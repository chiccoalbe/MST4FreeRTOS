
MST-FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089e4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08008b84  08008b84  00009b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c84  08008c84  0000a060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008c84  08008c84  00009c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c8c  08008c8c  0000a060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c8c  08008c8c  00009c8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008c90  08008c90  00009c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08008c94  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004dcc  20000060  08008cf4  0000a060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004e2c  08008cf4  0000ae2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a1dc  00000000  00000000  0000a090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a67  00000000  00000000  0002426c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015a0  00000000  00000000  00027cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010c8  00000000  00000000  00029278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001921a  00000000  00000000  0002a340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017a3a  00000000  00000000  0004355a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098d29  00000000  00000000  0005af94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f3cbd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006044  00000000  00000000  000f3d00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  000f9d44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008b6c 	.word	0x08008b6c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08008b6c 	.word	0x08008b6c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <prvMSTSetupUSClock>:

#if(TESTING_STM32 == 1)
/*
 * Timer reference given from user and used by MST to count nanoseconds
 */
static float prvMSTSetupUSClock() {
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
	 tstMSTTimerReferenceFromUser->PSC = (HAL_RCC_GetPCLK1Freq() / 1000000 - 1);
	 RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
	 tstMSTTimerReferenceFromUser->ARR = 0xFFFFFFFF;
	 tstMSTTimerReferenceFromUser->CR1 |= TIM_CR1_CEN;*/
	//we have that f_step = 1Mhz and Tstep = 1us, this way we can count us
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80005b0:	4b0a      	ldr	r3, [pc, #40]	@ (80005dc <prvMSTSetupUSClock+0x30>)
 80005b2:	68db      	ldr	r3, [r3, #12]
 80005b4:	4a09      	ldr	r2, [pc, #36]	@ (80005dc <prvMSTSetupUSClock+0x30>)
 80005b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80005ba:	60d3      	str	r3, [r2, #12]
	DWT->CYCCNT = 0;
 80005bc:	4b08      	ldr	r3, [pc, #32]	@ (80005e0 <prvMSTSetupUSClock+0x34>)
 80005be:	2200      	movs	r2, #0
 80005c0:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80005c2:	4b07      	ldr	r3, [pc, #28]	@ (80005e0 <prvMSTSetupUSClock+0x34>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4a06      	ldr	r2, [pc, #24]	@ (80005e0 <prvMSTSetupUSClock+0x34>)
 80005c8:	f043 0301 	orr.w	r3, r3, #1
 80005cc:	6013      	str	r3, [r2, #0]
}
 80005ce:	bf00      	nop
 80005d0:	eeb0 0a67 	vmov.f32	s0, s15
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr
 80005dc:	e000edf0 	.word	0xe000edf0
 80005e0:	e0001000 	.word	0xe0001000

080005e4 <prvMSTGetUS>:

static uint32_t prvMSTGetUS() {
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
	/*uint32_t out = tstMSTTimerReferenceFromUser->CNT;
	 BaseType_t clckFreq = HAL_RCC_GetPCLK1Freq();
	 BaseType_t countFreq = clckFreq / (tstMSTTimerReferenceFromUser->PSC + 1);
	 float timing = 1.0 / (float) countFreq;*/
	uint32_t outUS = (DWT->CYCCNT / (24));
 80005ea:	4b07      	ldr	r3, [pc, #28]	@ (8000608 <prvMSTGetUS+0x24>)
 80005ec:	685b      	ldr	r3, [r3, #4]
 80005ee:	4a07      	ldr	r2, [pc, #28]	@ (800060c <prvMSTGetUS+0x28>)
 80005f0:	fba2 2303 	umull	r2, r3, r2, r3
 80005f4:	091b      	lsrs	r3, r3, #4
 80005f6:	607b      	str	r3, [r7, #4]
	return outUS;
 80005f8:	687b      	ldr	r3, [r7, #4]
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	370c      	adds	r7, #12
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	e0001000 	.word	0xe0001000
 800060c:	aaaaaaab 	.word	0xaaaaaaab

08000610 <prvPeriodicTaskCreate>:
	BaseType_t xInterarrivalTimerRunning;
	BaseType_t xJobCalled;

} extTCB_t;

static BaseType_t prvPeriodicTaskCreate(extTCB_t *xFromTCB) {
 8000610:	b590      	push	{r4, r7, lr}
 8000612:	b087      	sub	sp, #28
 8000614:	af02      	add	r7, sp, #8
 8000616:	6078      	str	r0, [r7, #4]
	if (xTaskCreate(prvMSTPeriodicGenericJob, xFromTCB->pcName,
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	6999      	ldr	r1, [r3, #24]
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	8b98      	ldrh	r0, [r3, #28]
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	6a1c      	ldr	r4, [r3, #32]
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000628:	687a      	ldr	r2, [r7, #4]
 800062a:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800062c:	9201      	str	r2, [sp, #4]
 800062e:	9300      	str	r3, [sp, #0]
 8000630:	4623      	mov	r3, r4
 8000632:	4602      	mov	r2, r0
 8000634:	4823      	ldr	r0, [pc, #140]	@ (80006c4 <prvPeriodicTaskCreate+0xb4>)
 8000636:	f005 f9b1 	bl	800599c <xTaskCreate>
 800063a:	4603      	mov	r3, r0
 800063c:	2b01      	cmp	r3, #1
 800063e:	d13b      	bne.n	80006b8 <prvPeriodicTaskCreate+0xa8>
		/*
		 Create the timer,
		 Handle the specific semaphore for the callback
		 */
		TimerHandle_t xTimer = xTimerCreate("generic periodic timer",
				pdMS_TO_TICKS(xFromTCB->xTaskPhase + xFromTCB->xTaskPeriod),
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000648:	4413      	add	r3, r2
 800064a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800064e:	fb02 f303 	mul.w	r3, r2, r3
		TimerHandle_t xTimer = xTimerCreate("generic periodic timer",
 8000652:	4a1d      	ldr	r2, [pc, #116]	@ (80006c8 <prvPeriodicTaskCreate+0xb8>)
 8000654:	fba2 2303 	umull	r2, r3, r2, r3
 8000658:	0999      	lsrs	r1, r3, #6
				pdTRUE, (void*) (xFromTCB->pxCreatedTask),
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
		TimerHandle_t xTimer = xTimerCreate("generic periodic timer",
 800065e:	4a1b      	ldr	r2, [pc, #108]	@ (80006cc <prvPeriodicTaskCreate+0xbc>)
 8000660:	9200      	str	r2, [sp, #0]
 8000662:	2201      	movs	r2, #1
 8000664:	481a      	ldr	r0, [pc, #104]	@ (80006d0 <prvPeriodicTaskCreate+0xc0>)
 8000666:	f006 fc1d 	bl	8006ea4 <xTimerCreate>
 800066a:	60f8      	str	r0, [r7, #12]
				prvMSTPeriodicTimerCallback);
		xFromTCB->xTaskSpecificTimer = xTimer;
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	68fa      	ldr	r2, [r7, #12]
 8000670:	661a      	str	r2, [r3, #96]	@ 0x60
		configASSERT(xTimerStart(xTimer, 0) == pdPASS)
 8000672:	f005 fcc5 	bl	8006000 <xTaskGetTickCount>
 8000676:	4602      	mov	r2, r0
 8000678:	2300      	movs	r3, #0
 800067a:	9300      	str	r3, [sp, #0]
 800067c:	2300      	movs	r3, #0
 800067e:	2101      	movs	r1, #1
 8000680:	68f8      	ldr	r0, [r7, #12]
 8000682:	f006 fc6d 	bl	8006f60 <xTimerGenericCommand>
 8000686:	4603      	mov	r3, r0
 8000688:	2b01      	cmp	r3, #1
 800068a:	d00b      	beq.n	80006a4 <prvPeriodicTaskCreate+0x94>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800068c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000690:	f383 8811 	msr	BASEPRI, r3
 8000694:	f3bf 8f6f 	isb	sy
 8000698:	f3bf 8f4f 	dsb	sy
 800069c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800069e:	bf00      	nop
 80006a0:	bf00      	nop
 80006a2:	e7fd      	b.n	80006a0 <prvPeriodicTaskCreate+0x90>
#endif
		vTaskSetThreadLocalStoragePointer(*(xFromTCB->pxCreatedTask),
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	687a      	ldr	r2, [r7, #4]
 80006ac:	2100      	movs	r1, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f005 ff46 	bl	8006540 <vTaskSetThreadLocalStoragePointer>
				mstLOCAL_STORAGE_DATA_INDEX, xFromTCB);
		return pdPASS;
 80006b4:	2301      	movs	r3, #1
 80006b6:	e000      	b.n	80006ba <prvPeriodicTaskCreate+0xaa>
	} else {
		return pdFAIL;
 80006b8:	2300      	movs	r3, #0
	}
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	3714      	adds	r7, #20
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd90      	pop	{r4, r7, pc}
 80006c2:	bf00      	nop
 80006c4:	08000779 	.word	0x08000779
 80006c8:	10624dd3 	.word	0x10624dd3
 80006cc:	080008c1 	.word	0x080008c1
 80006d0:	08008b84 	.word	0x08008b84

080006d4 <vMSTPeriodicTaskCreate>:
TaskHandle_t vMSTPeriodicTaskCreate(TaskFunction_t pvJobCode,
		const char *pcName, uint16_t usStackDepth, void *pvParameters,
		UBaseType_t uxPriority, TaskHandle_t *pxCreatedTask,
		/* library-specific parameters */
		TickType_t xTaskPeriod, TickType_t xTaskDeadline, TickType_t xTaskPhase,
		TickType_t xTaskWCET) {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b0a4      	sub	sp, #144	@ 0x90
 80006d8:	af00      	add	r7, sp, #0
 80006da:	60f8      	str	r0, [r7, #12]
 80006dc:	60b9      	str	r1, [r7, #8]
 80006de:	603b      	str	r3, [r7, #0]
 80006e0:	4613      	mov	r3, r2
 80006e2:	80fb      	strh	r3, [r7, #6]

	/*
	 Allocate, fill extended TCB using local task storage
	 */

	xNewExtTCB = (extTCB_t*) pvPortMalloc(sizeof(extTCB_t));
 80006e4:	207c      	movs	r0, #124	@ 0x7c
 80006e6:	f007 f9c1 	bl	8007a6c <pvPortMalloc>
 80006ea:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
	*xNewExtTCB = (extTCB_t ) { .pvJobCode = pvJobCode, .pcName = pcName,
 80006ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80006f2:	4618      	mov	r0, r3
 80006f4:	237c      	movs	r3, #124	@ 0x7c
 80006f6:	461a      	mov	r2, r3
 80006f8:	2100      	movs	r1, #0
 80006fa:	f007 fd5b 	bl	80081b4 <memset>
 80006fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000702:	68fa      	ldr	r2, [r7, #12]
 8000704:	615a      	str	r2, [r3, #20]
 8000706:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800070a:	68ba      	ldr	r2, [r7, #8]
 800070c:	619a      	str	r2, [r3, #24]
 800070e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000712:	88fa      	ldrh	r2, [r7, #6]
 8000714:	839a      	strh	r2, [r3, #28]
 8000716:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800071a:	683a      	ldr	r2, [r7, #0]
 800071c:	621a      	str	r2, [r3, #32]
 800071e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000722:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8000726:	625a      	str	r2, [r3, #36]	@ 0x24
 8000728:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800072c:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8000730:	629a      	str	r2, [r3, #40]	@ 0x28
 8000732:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000736:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800073a:	631a      	str	r2, [r3, #48]	@ 0x30
 800073c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000740:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8000744:	635a      	str	r2, [r3, #52]	@ 0x34
 8000746:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800074a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800074e:	639a      	str	r2, [r3, #56]	@ 0x38
 8000750:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000754:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8000758:	63da      	str	r2, [r3, #60]	@ 0x3c
	return pdPASS;
#else
	/*
	 * If not RMS we can directly create the task, otherwise it is done before kernel start
	 */
	if(prvPeriodicTaskCreate(xNewExtTCB)) {
 800075a:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 800075e:	f7ff ff57 	bl	8000610 <prvPeriodicTaskCreate>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <vMSTPeriodicTaskCreate+0x98>
		return pdPASS;
 8000768:	2301      	movs	r3, #1
 800076a:	e000      	b.n	800076e <vMSTPeriodicTaskCreate+0x9a>
	} else {
		return pdFAIL;
 800076c:	2300      	movs	r3, #0
	}
#endif

}
 800076e:	4618      	mov	r0, r3
 8000770:	3790      	adds	r7, #144	@ 0x90
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
	...

08000778 <prvMSTPeriodicGenericJob>:
 * This version uses delays
 *
 * @param pvParameters
 */

static void prvMSTPeriodicGenericJob(void *pvParameters) {
 8000778:	b580      	push	{r7, lr}
 800077a:	b088      	sub	sp, #32
 800077c:	af02      	add	r7, sp, #8
 800077e:	6078      	str	r0, [r7, #4]
#if(mst_test_PERIODIC_METHOD == 2)
	/*
	 Takes notification for current task
	 */
	ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8000780:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000784:	2001      	movs	r0, #1
 8000786:	f006 f981 	bl	8006a8c <ulTaskNotifyTake>
#endif
	/*
	 Get values about current job
	 */
	TaskHandle_t xCurrentHandle = xTaskGetCurrentTaskHandle();
 800078a:	f005 ffe1 	bl	8006750 <xTaskGetCurrentTaskHandle>
 800078e:	6178      	str	r0, [r7, #20]
	extTCB_t *xCurrExtTCB = (extTCB_t*) pvTaskGetThreadLocalStoragePointer(
 8000790:	2100      	movs	r1, #0
 8000792:	6978      	ldr	r0, [r7, #20]
 8000794:	f005 fef4 	bl	8006580 <pvTaskGetThreadLocalStoragePointer>
 8000798:	6138      	str	r0, [r7, #16]
			xCurrentHandle, mstLOCAL_STORAGE_DATA_INDEX);
	/*
	 We assert that the TCB has been retreived, else we compromised exec
	 */
	configASSERT(xCurrExtTCB != NULL);
 800079a:	693b      	ldr	r3, [r7, #16]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d10b      	bne.n	80007b8 <prvMSTPeriodicGenericJob+0x40>
	__asm volatile
 80007a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80007a4:	f383 8811 	msr	BASEPRI, r3
 80007a8:	f3bf 8f6f 	isb	sy
 80007ac:	f3bf 8f4f 	dsb	sy
 80007b0:	60bb      	str	r3, [r7, #8]
}
 80007b2:	bf00      	nop
 80007b4:	bf00      	nop
 80007b6:	e7fd      	b.n	80007b4 <prvMSTPeriodicGenericJob+0x3c>
	/*
	 First iteration with phase passed, change the period to not have the phase
	 */
	if (xCurrExtTCB->xTaskInitDone == pdFALSE) {
 80007b8:	693b      	ldr	r3, [r7, #16]
 80007ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d11f      	bne.n	8000800 <prvMSTPeriodicGenericJob+0x88>
		xCurrExtTCB->xTaskInitDone = pdTRUE;
 80007c0:	693b      	ldr	r3, [r7, #16]
 80007c2:	2201      	movs	r2, #1
 80007c4:	65da      	str	r2, [r3, #92]	@ 0x5c
#if(TESTING_STM32)
		//this is the us at start
		xCurrExtTCB->xUsFromIdealRelease = 0;
 80007c6:	693b      	ldr	r3, [r7, #16]
 80007c8:	2200      	movs	r2, #0
 80007ca:	665a      	str	r2, [r3, #100]	@ 0x64
		xCurrExtTCB->xUsAverageReleaseGap = 0;
 80007cc:	693b      	ldr	r3, [r7, #16]
 80007ce:	2200      	movs	r2, #0
 80007d0:	66da      	str	r2, [r3, #108]	@ 0x6c
#endif

		if (xCurrExtTCB->xTaskPhase > 0) {
 80007d2:	693b      	ldr	r3, [r7, #16]
 80007d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d012      	beq.n	8000800 <prvMSTPeriodicGenericJob+0x88>
			 If we have a phase, we should have just passed it
			 */
#if(mst_test_PERIODIC_METHOD == 1)
			vTaskDelayUntil(&(xCurrExtTCB->xPrevReleaseTime), xCurrExtTCB->xTaskPhase);
#elif(mst_test_PERIODIC_METHOD == 2)
			xTimerChangePeriod(xCurrExtTCB->xTaskSpecificTimer,
 80007da:	693b      	ldr	r3, [r7, #16]
 80007dc:	6e18      	ldr	r0, [r3, #96]	@ 0x60
 80007de:	693b      	ldr	r3, [r7, #16]
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80007e6:	fb02 f303 	mul.w	r3, r2, r3
 80007ea:	4a34      	ldr	r2, [pc, #208]	@ (80008bc <prvMSTPeriodicGenericJob+0x144>)
 80007ec:	fba2 2303 	umull	r2, r3, r2, r3
 80007f0:	099a      	lsrs	r2, r3, #6
 80007f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80007f6:	9300      	str	r3, [sp, #0]
 80007f8:	2300      	movs	r3, #0
 80007fa:	2104      	movs	r1, #4
 80007fc:	f006 fbb0 	bl	8006f60 <xTimerGenericCommand>
#endif
		}

	}

	xCurrExtTCB->xPrevReleaseTime = xTaskGetTickCount();
 8000800:	f005 fbfe 	bl	8006000 <xTaskGetTickCount>
 8000804:	4602      	mov	r2, r0
 8000806:	693b      	ldr	r3, [r7, #16]
 8000808:	641a      	str	r2, [r3, #64]	@ 0x40
	for (;;) {

#if(TESTING_STM32)
		//count gap from execution if testing
#if(mst_test_PERIODIC_METHOD == 2)
		xCurrExtTCB->xNumOfIterations++;
 800080a:	693b      	ldr	r3, [r7, #16]
 800080c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800080e:	1c5a      	adds	r2, r3, #1
 8000810:	693b      	ldr	r3, [r7, #16]
 8000812:	669a      	str	r2, [r3, #104]	@ 0x68
#endif
		//calculate the absolute perfect release in us
		uint32_t perfRelease = xCurrExtTCB->xTaskPhase * 1000
 8000814:	693b      	ldr	r3, [r7, #16]
 8000816:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
				+ xCurrExtTCB->xTaskPeriod * 1000
 8000818:	693b      	ldr	r3, [r7, #16]
 800081a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
						* (xCurrExtTCB->xNumOfIterations);
 800081c:	6939      	ldr	r1, [r7, #16]
 800081e:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8000820:	fb01 f303 	mul.w	r3, r1, r3
				+ xCurrExtTCB->xTaskPeriod * 1000
 8000824:	4413      	add	r3, r2
		uint32_t perfRelease = xCurrExtTCB->xTaskPhase * 1000
 8000826:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800082a:	fb02 f303 	mul.w	r3, r2, r3
 800082e:	60fb      	str	r3, [r7, #12]
		//calculate the gap between perfect and absolute gap in us and update the avg
		xCurrExtTCB->xUsFromIdealRelease += prvMSTGetUS() - perfRelease;
 8000830:	f7ff fed8 	bl	80005e4 <prvMSTGetUS>
 8000834:	4602      	mov	r2, r0
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	1ad3      	subs	r3, r2, r3
 800083a:	693a      	ldr	r2, [r7, #16]
 800083c:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800083e:	4413      	add	r3, r2
 8000840:	461a      	mov	r2, r3
 8000842:	693b      	ldr	r3, [r7, #16]
 8000844:	665a      	str	r2, [r3, #100]	@ 0x64
		if (xCurrExtTCB->xNumOfIterations > 0) {
 8000846:	693b      	ldr	r3, [r7, #16]
 8000848:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800084a:	2b00      	cmp	r3, #0
 800084c:	d009      	beq.n	8000862 <prvMSTPeriodicGenericJob+0xea>
			xCurrExtTCB->xUsAverageReleaseGap =
					(xCurrExtTCB->xUsFromIdealRelease)
 800084e:	693b      	ldr	r3, [r7, #16]
 8000850:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8000852:	461a      	mov	r2, r3
							/ (xCurrExtTCB->xNumOfIterations);
 8000854:	693b      	ldr	r3, [r7, #16]
 8000856:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000858:	fbb2 f3f3 	udiv	r3, r2, r3
 800085c:	461a      	mov	r2, r3
			xCurrExtTCB->xUsAverageReleaseGap =
 800085e:	693b      	ldr	r3, [r7, #16]
 8000860:	66da      	str	r2, [r3, #108]	@ 0x6c
#endif
#endif
		/*
		 Run user code
		 */
		xCurrExtTCB->xPrevStartTime = xTaskGetTickCount();
 8000862:	f005 fbcd 	bl	8006000 <xTaskGetTickCount>
 8000866:	4602      	mov	r2, r0
 8000868:	693b      	ldr	r3, [r7, #16]
 800086a:	64da      	str	r2, [r3, #76]	@ 0x4c
		xCurrExtTCB->pvJobCode(pvParameters);
 800086c:	693b      	ldr	r3, [r7, #16]
 800086e:	695b      	ldr	r3, [r3, #20]
 8000870:	6878      	ldr	r0, [r7, #4]
 8000872:	4798      	blx	r3
		xCurrExtTCB->xPrevFinishTime = xTaskGetTickCount();
 8000874:	f005 fbc4 	bl	8006000 <xTaskGetTickCount>
 8000878:	4602      	mov	r2, r0
 800087a:	693b      	ldr	r3, [r7, #16]
 800087c:	651a      	str	r2, [r3, #80]	@ 0x50
		xCurrExtTCB->xPrevExecTime = xCurrExtTCB->xPrevFinishTime
 800087e:	693b      	ldr	r3, [r7, #16]
 8000880:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
				- xCurrExtTCB->xPrevStartTime;
 8000882:	693b      	ldr	r3, [r7, #16]
 8000884:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000886:	1ad2      	subs	r2, r2, r3
		xCurrExtTCB->xPrevExecTime = xCurrExtTCB->xPrevFinishTime
 8000888:	693b      	ldr	r3, [r7, #16]
 800088a:	645a      	str	r2, [r3, #68]	@ 0x44

		if (xCurrExtTCB->xPrevExecTime > xCurrExtTCB->xTaskDeadline) {
 800088c:	693b      	ldr	r3, [r7, #16]
 800088e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000890:	693b      	ldr	r3, [r7, #16]
 8000892:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000894:	429a      	cmp	r2, r3
 8000896:	d904      	bls.n	80008a2 <prvMSTPeriodicGenericJob+0x12a>
			//current task got over the deadline, make notice of the event
			xCurrExtTCB->uNumOfMissedDeadlines++;
 8000898:	693b      	ldr	r3, [r7, #16]
 800089a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800089c:	1c5a      	adds	r2, r3, #1
 800089e:	693b      	ldr	r3, [r7, #16]
 80008a0:	655a      	str	r2, [r3, #84]	@ 0x54
		
	#if mst_schedSCHEDULING_POLICY == mst_schedSCHEDULING_EDF
		/*
		Notify dispatcher of finished job
		*/
		prvMSTDispatch(xCurrExtTCB->pxCreatedTask, false, taskTypePeriodic, false);
 80008a2:	693b      	ldr	r3, [r7, #16]
 80008a4:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80008a6:	2300      	movs	r3, #0
 80008a8:	2200      	movs	r2, #0
 80008aa:	2100      	movs	r1, #0
 80008ac:	f000 fa28 	bl	8000d00 <prvMSTDispatch>
		Update scheduler-referenced release time
		*/
		//vTaskDelay(pdMS_TO_TICKS(xCurrExtTCB->xTaskPeriod));
		vTaskDelayUntil(&(xCurrExtTCB->xPrevReleaseTime), pdMS_TO_TICKS(xCurrExtTCB->xTaskPeriod));
#elif(mst_test_PERIODIC_METHOD == 2)
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80008b0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80008b4:	2001      	movs	r0, #1
 80008b6:	f006 f8e9 	bl	8006a8c <ulTaskNotifyTake>
	for (;;) {
 80008ba:	e7a6      	b.n	800080a <prvMSTPeriodicGenericJob+0x92>
 80008bc:	10624dd3 	.word	0x10624dd3

080008c0 <prvMSTPeriodicTimerCallback>:

#if(mst_test_PERIODIC_METHOD == 2)
/*
 Using periodic timers with mutexes
 */
static void prvMSTPeriodicTimerCallback(TimerHandle_t xTimer) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
	/*
	 Here the callback of a certain task timer is called, it shall have the semaphore
	 as parameter
	 */
	TaskHandle_t *param = (TaskHandle_t*) pvTimerGetTimerID(xTimer);
 80008c8:	6878      	ldr	r0, [r7, #4]
 80008ca:	f006 fe59 	bl	8007580 <pvTimerGetTimerID>
 80008ce:	60f8      	str	r0, [r7, #12]
	prvMSTDispatch(param, true, taskTypePeriodic, false);
 80008d0:	2300      	movs	r3, #0
 80008d2:	2200      	movs	r2, #0
 80008d4:	2101      	movs	r1, #1
 80008d6:	68f8      	ldr	r0, [r7, #12]
 80008d8:	f000 fa12 	bl	8000d00 <prvMSTDispatch>
}
 80008dc:	bf00      	nop
 80008de:	3710      	adds	r7, #16
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <prvMSTSporadicTimerCallback>:

static void prvMSTSporadicTimerCallback(TimerHandle_t xTimer) {
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
	/*
	 Notify a sporadic task but make sure it knows it was the timer to notify, by passing a parameter
	 */
	TaskHandle_t *param = (TaskHandle_t*) pvTimerGetTimerID(xTimer);
 80008ec:	6878      	ldr	r0, [r7, #4]
 80008ee:	f006 fe47 	bl	8007580 <pvTimerGetTimerID>
 80008f2:	60f8      	str	r0, [r7, #12]
	prvMSTDispatch(param, true, taskTypeSporadic, false);
 80008f4:	2300      	movs	r3, #0
 80008f6:	2201      	movs	r2, #1
 80008f8:	2101      	movs	r1, #1
 80008fa:	68f8      	ldr	r0, [r7, #12]
 80008fc:	f000 fa00 	bl	8000d00 <prvMSTDispatch>
}
 8000900:	bf00      	nop
 8000902:	3710      	adds	r7, #16
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}

08000908 <vMSTSporadicTaskCreate>:
BaseType_t vMSTSporadicTaskCreate(TaskFunction_t pvJobCode, const char *pcName,
		uint16_t usStackDepth, void *pvParameters, UBaseType_t uxPriority,
		TaskHandle_t *pxCreatedTask,
		/* library-specific parameters */
		TickType_t xTaskInterarrivalTime, TickType_t xTaskDeadline,
		TickType_t xTaskWCET) {
 8000908:	b580      	push	{r7, lr}
 800090a:	b0a6      	sub	sp, #152	@ 0x98
 800090c:	af02      	add	r7, sp, #8
 800090e:	60f8      	str	r0, [r7, #12]
 8000910:	60b9      	str	r1, [r7, #8]
 8000912:	603b      	str	r3, [r7, #0]
 8000914:	4613      	mov	r3, r2
 8000916:	80fb      	strh	r3, [r7, #6]

	extTCB_t *xNewExtTCB;
	if (xTaskCreate(prvMSTSporadicGenericJob, pcName, usStackDepth,
 8000918:	88fa      	ldrh	r2, [r7, #6]
 800091a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800091e:	9301      	str	r3, [sp, #4]
 8000920:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000924:	9300      	str	r3, [sp, #0]
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	68b9      	ldr	r1, [r7, #8]
 800092a:	4821      	ldr	r0, [pc, #132]	@ (80009b0 <vMSTSporadicTaskCreate+0xa8>)
 800092c:	f005 f836 	bl	800599c <xTaskCreate>
 8000930:	4603      	mov	r3, r0
 8000932:	2b01      	cmp	r3, #1
 8000934:	d137      	bne.n	80009a6 <vMSTSporadicTaskCreate+0x9e>
			pvParameters, uxPriority, pxCreatedTask) == pdPASS) {
		/*
		 Allocate, fill extended TCB using local task storage
		 */
		xNewExtTCB = (extTCB_t*) pvPortMalloc(sizeof(extTCB_t));
 8000936:	207c      	movs	r0, #124	@ 0x7c
 8000938:	f007 f898 	bl	8007a6c <pvPortMalloc>
 800093c:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
		*xNewExtTCB = (extTCB_t ) { .pvJobCode = pvJobCode, .pcName = pcName,
 8000940:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000944:	4618      	mov	r0, r3
 8000946:	237c      	movs	r3, #124	@ 0x7c
 8000948:	461a      	mov	r2, r3
 800094a:	2100      	movs	r1, #0
 800094c:	f007 fc32 	bl	80081b4 <memset>
 8000950:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000954:	68fa      	ldr	r2, [r7, #12]
 8000956:	615a      	str	r2, [r3, #20]
 8000958:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800095c:	68ba      	ldr	r2, [r7, #8]
 800095e:	619a      	str	r2, [r3, #24]
 8000960:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000964:	683a      	ldr	r2, [r7, #0]
 8000966:	621a      	str	r2, [r3, #32]
 8000968:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800096c:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8000970:	625a      	str	r2, [r3, #36]	@ 0x24
 8000972:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000976:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800097a:	629a      	str	r2, [r3, #40]	@ 0x28
 800097c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000980:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8000984:	635a      	str	r2, [r3, #52]	@ 0x34
 8000986:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800098a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800098e:	671a      	str	r2, [r3, #112]	@ 0x70
						pdFALSE };

		/*
		 We create the task and allocate, but we do not clear the mutex nor start the timer
		 */
		vTaskSetThreadLocalStoragePointer(*pxCreatedTask,
 8000990:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800099a:	2100      	movs	r1, #0
 800099c:	4618      	mov	r0, r3
 800099e:	f005 fdcf 	bl	8006540 <vTaskSetThreadLocalStoragePointer>
				mstLOCAL_STORAGE_DATA_INDEX, xNewExtTCB);
		return pdPASS;
 80009a2:	2301      	movs	r3, #1
 80009a4:	e000      	b.n	80009a8 <vMSTSporadicTaskCreate+0xa0>
	} else {
		//task created unsuccesfully
		return pdFAIL;
 80009a6:	2300      	movs	r3, #0
	}
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	3790      	adds	r7, #144	@ 0x90
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	080009b5 	.word	0x080009b5

080009b4 <prvMSTSporadicGenericJob>:
 * @brief
 *
 * @param pvParameters
 */

static void prvMSTSporadicGenericJob(void *pvParameters) {
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b08a      	sub	sp, #40	@ 0x28
 80009b8:	af02      	add	r7, sp, #8
 80009ba:	6078      	str	r0, [r7, #4]

	TaskHandle_t xCurrentHandle = xTaskGetCurrentTaskHandle();
 80009bc:	f005 fec8 	bl	8006750 <xTaskGetCurrentTaskHandle>
 80009c0:	61f8      	str	r0, [r7, #28]
	extTCB_t *xCurrExtTCB = (extTCB_t*) pvTaskGetThreadLocalStoragePointer(
 80009c2:	2100      	movs	r1, #0
 80009c4:	69f8      	ldr	r0, [r7, #28]
 80009c6:	f005 fddb 	bl	8006580 <pvTaskGetThreadLocalStoragePointer>
 80009ca:	61b8      	str	r0, [r7, #24]
			xCurrentHandle, mstLOCAL_STORAGE_DATA_INDEX);
	configASSERT(xCurrExtTCB != NULL);
 80009cc:	69bb      	ldr	r3, [r7, #24]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d10b      	bne.n	80009ea <prvMSTSporadicGenericJob+0x36>
	__asm volatile
 80009d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80009d6:	f383 8811 	msr	BASEPRI, r3
 80009da:	f3bf 8f6f 	isb	sy
 80009de:	f3bf 8f4f 	dsb	sy
 80009e2:	613b      	str	r3, [r7, #16]
}
 80009e4:	bf00      	nop
 80009e6:	bf00      	nop
 80009e8:	e7fd      	b.n	80009e6 <prvMSTSporadicGenericJob+0x32>
	for (;;) {
		/*
		 Takes notification for current task, could be from timer or user
		 */
		uint32_t notificationGiver;
		if (xTaskNotifyWait(0, NOTIFY_INTERARRIVAL_TIMER | NOTIFY_USER_REQUEST,
 80009ea:	f107 0208 	add.w	r2, r7, #8
 80009ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80009f2:	2103      	movs	r1, #3
 80009f4:	2000      	movs	r0, #0
 80009f6:	f006 f895 	bl	8006b24 <xTaskNotifyWait>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d121      	bne.n	8000a44 <prvMSTSporadicGenericJob+0x90>
				&notificationGiver, portMAX_DELAY) == pdPASS) {
			if (notificationGiver & NOTIFY_INTERARRIVAL_TIMER) {
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	f003 0301 	and.w	r3, r3, #1
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d00b      	beq.n	8000a22 <prvMSTSporadicGenericJob+0x6e>
				//it was the interarrival timer that woke up the task
				xCurrExtTCB->xInterarrivalTimerRunning = pdFALSE;
 8000a0a:	69bb      	ldr	r3, [r7, #24]
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	675a      	str	r2, [r3, #116]	@ 0x74
				notificationGiver &= ~NOTIFY_INTERARRIVAL_TIMER;
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	f023 0301 	bic.w	r3, r3, #1
 8000a16:	60bb      	str	r3, [r7, #8]
				if (xCurrExtTCB->xJobCalled == pdFALSE) {
 8000a18:	69bb      	ldr	r3, [r7, #24]
 8000a1a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d111      	bne.n	8000a44 <prvMSTSporadicGenericJob+0x90>
					continue;
 8000a20:	e068      	b.n	8000af4 <prvMSTSporadicGenericJob+0x140>
				}
			} else if (notificationGiver & NOTIFY_USER_REQUEST) {
 8000a22:	68bb      	ldr	r3, [r7, #8]
 8000a24:	f003 0302 	and.w	r3, r3, #2
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d00b      	beq.n	8000a44 <prvMSTSporadicGenericJob+0x90>
				//user requested to run
				notificationGiver &= ~NOTIFY_USER_REQUEST;
 8000a2c:	68bb      	ldr	r3, [r7, #8]
 8000a2e:	f023 0302 	bic.w	r3, r3, #2
 8000a32:	60bb      	str	r3, [r7, #8]
				if (xCurrExtTCB->xInterarrivalTimerRunning == pdTRUE) {
 8000a34:	69bb      	ldr	r3, [r7, #24]
 8000a36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d103      	bne.n	8000a44 <prvMSTSporadicGenericJob+0x90>
					xCurrExtTCB->xJobCalled = pdTRUE;
 8000a3c:	69bb      	ldr	r3, [r7, #24]
 8000a3e:	2201      	movs	r2, #1
 8000a40:	679a      	str	r2, [r3, #120]	@ 0x78
					continue;
 8000a42:	e057      	b.n	8000af4 <prvMSTSporadicGenericJob+0x140>
			}
		}
		/*
		 Notify job called and interarrival timer from release
		 */
		xCurrExtTCB->xJobCalled = pdTRUE;
 8000a44:	69bb      	ldr	r3, [r7, #24]
 8000a46:	2201      	movs	r2, #1
 8000a48:	679a      	str	r2, [r3, #120]	@ 0x78
		TimerHandle_t xTimer = xTimerCreate("sporadic interarrival timer", // Name of the timer
				pdMS_TO_TICKS(xCurrExtTCB->xTaskInterarrivalTime), // Timer period in ticks
 8000a4a:	69bb      	ldr	r3, [r7, #24]
 8000a4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000a4e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000a52:	fb02 f303 	mul.w	r3, r2, r3
		TimerHandle_t xTimer = xTimerCreate("sporadic interarrival timer", // Name of the timer
 8000a56:	4a28      	ldr	r2, [pc, #160]	@ (8000af8 <prvMSTSporadicGenericJob+0x144>)
 8000a58:	fba2 2303 	umull	r2, r3, r2, r3
 8000a5c:	0999      	lsrs	r1, r3, #6
				pdFALSE,                               // Auto-reload (periodic)
				(void*) (xCurrExtTCB->pxCreatedTask), // Task handle as parameter
 8000a5e:	69bb      	ldr	r3, [r7, #24]
 8000a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
		TimerHandle_t xTimer = xTimerCreate("sporadic interarrival timer", // Name of the timer
 8000a62:	4a26      	ldr	r2, [pc, #152]	@ (8000afc <prvMSTSporadicGenericJob+0x148>)
 8000a64:	9200      	str	r2, [sp, #0]
 8000a66:	2200      	movs	r2, #0
 8000a68:	4825      	ldr	r0, [pc, #148]	@ (8000b00 <prvMSTSporadicGenericJob+0x14c>)
 8000a6a:	f006 fa1b 	bl	8006ea4 <xTimerCreate>
 8000a6e:	6178      	str	r0, [r7, #20]
				prvMSTSporadicTimerCallback                 // Callback function
				);
		configASSERT(xTimerStart(xTimer, 0) == pdPASS)
 8000a70:	f005 fac6 	bl	8006000 <xTaskGetTickCount>
 8000a74:	4602      	mov	r2, r0
 8000a76:	2300      	movs	r3, #0
 8000a78:	9300      	str	r3, [sp, #0]
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	2101      	movs	r1, #1
 8000a7e:	6978      	ldr	r0, [r7, #20]
 8000a80:	f006 fa6e 	bl	8006f60 <xTimerGenericCommand>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b01      	cmp	r3, #1
 8000a88:	d00b      	beq.n	8000aa2 <prvMSTSporadicGenericJob+0xee>
	__asm volatile
 8000a8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000a8e:	f383 8811 	msr	BASEPRI, r3
 8000a92:	f3bf 8f6f 	isb	sy
 8000a96:	f3bf 8f4f 	dsb	sy
 8000a9a:	60fb      	str	r3, [r7, #12]
}
 8000a9c:	bf00      	nop
 8000a9e:	bf00      	nop
 8000aa0:	e7fd      	b.n	8000a9e <prvMSTSporadicGenericJob+0xea>
		xCurrExtTCB->xTaskSpecificTimer = xTimer;
 8000aa2:	69bb      	ldr	r3, [r7, #24]
 8000aa4:	697a      	ldr	r2, [r7, #20]
 8000aa6:	661a      	str	r2, [r3, #96]	@ 0x60
		taskENTER_CRITICAL(); //maybe not needed
 8000aa8:	f006 febe 	bl	8007828 <vPortEnterCritical>
		xCurrExtTCB->xInterarrivalTimerRunning = pdTRUE;
 8000aac:	69bb      	ldr	r3, [r7, #24]
 8000aae:	2201      	movs	r2, #1
 8000ab0:	675a      	str	r2, [r3, #116]	@ 0x74
		xCurrExtTCB->xJobCalled = pdFALSE;
 8000ab2:	69bb      	ldr	r3, [r7, #24]
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	679a      	str	r2, [r3, #120]	@ 0x78
		taskEXIT_CRITICAL();
 8000ab8:	f006 fee8 	bl	800788c <vPortExitCritical>

		xCurrExtTCB->xPrevStartTime = xTaskGetTickCount();
 8000abc:	f005 faa0 	bl	8006000 <xTaskGetTickCount>
 8000ac0:	4602      	mov	r2, r0
 8000ac2:	69bb      	ldr	r3, [r7, #24]
 8000ac4:	64da      	str	r2, [r3, #76]	@ 0x4c
		xCurrExtTCB->pvJobCode(pvParameters);
 8000ac6:	69bb      	ldr	r3, [r7, #24]
 8000ac8:	695b      	ldr	r3, [r3, #20]
 8000aca:	6878      	ldr	r0, [r7, #4]
 8000acc:	4798      	blx	r3
		/*
		 If periodic job is called within the task itself its no problem since the timer is going
		 */
		xCurrExtTCB->xPrevFinishTime = xTaskGetTickCount();
 8000ace:	f005 fa97 	bl	8006000 <xTaskGetTickCount>
 8000ad2:	4602      	mov	r2, r0
 8000ad4:	69bb      	ldr	r3, [r7, #24]
 8000ad6:	651a      	str	r2, [r3, #80]	@ 0x50
		xCurrExtTCB->xPrevExecTime = xCurrExtTCB->xPrevFinishTime
 8000ad8:	69bb      	ldr	r3, [r7, #24]
 8000ada:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
				- xCurrExtTCB->xPrevStartTime;
 8000adc:	69bb      	ldr	r3, [r7, #24]
 8000ade:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ae0:	1ad2      	subs	r2, r2, r3
		xCurrExtTCB->xPrevExecTime = xCurrExtTCB->xPrevFinishTime
 8000ae2:	69bb      	ldr	r3, [r7, #24]
 8000ae4:	645a      	str	r2, [r3, #68]	@ 0x44

		#if mst_schedSCHEDULING_POLICY == mst_schedSCHEDULING_EDF
		/*
		Notify dispatcher of finished job
		*/
		prvMSTDispatch(xCurrExtTCB->pxCreatedTask, false, taskTypeSporadic, false);
 8000ae6:	69bb      	ldr	r3, [r7, #24]
 8000ae8:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8000aea:	2300      	movs	r3, #0
 8000aec:	2201      	movs	r2, #1
 8000aee:	2100      	movs	r1, #0
 8000af0:	f000 f906 	bl	8000d00 <prvMSTDispatch>
	for (;;) {
 8000af4:	e779      	b.n	80009ea <prvMSTSporadicGenericJob+0x36>
 8000af6:	bf00      	nop
 8000af8:	10624dd3 	.word	0x10624dd3
 8000afc:	080008e5 	.word	0x080008e5
 8000b00:	08008b9c 	.word	0x08008b9c

08000b04 <vMSTSporadicTaskRun>:
	#endif
	}
}

BaseType_t vMSTSporadicTaskRun(TaskHandle_t *pxTaskToRunHandle) {
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
	/*
	 We check if the task has been created, one way of doing this is by seeing if the TCB is ok
	 maybe there are other better ways
	 */
	extTCB_t *xCurrExtTCB = (extTCB_t*) pvTaskGetThreadLocalStoragePointer(
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	2100      	movs	r1, #0
 8000b12:	4618      	mov	r0, r3
 8000b14:	f005 fd34 	bl	8006580 <pvTaskGetThreadLocalStoragePointer>
 8000b18:	60f8      	str	r0, [r7, #12]
			*pxTaskToRunHandle, mstLOCAL_STORAGE_DATA_INDEX);

	if (xCurrExtTCB == NULL) {
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d101      	bne.n	8000b24 <vMSTSporadicTaskRun+0x20>
		return pdFAIL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	e006      	b.n	8000b32 <vMSTSporadicTaskRun+0x2e>
	} else {
		prvMSTDispatch(pxTaskToRunHandle, true, taskTypeSporadic, true);
 8000b24:	2301      	movs	r3, #1
 8000b26:	2201      	movs	r2, #1
 8000b28:	2101      	movs	r1, #1
 8000b2a:	6878      	ldr	r0, [r7, #4]
 8000b2c:	f000 f8e8 	bl	8000d00 <prvMSTDispatch>
		return pdPASS;
 8000b30:	2301      	movs	r3, #1
	}
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3710      	adds	r7, #16
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <prv_compare>:

#if (mst_schedSCHEDULING_POLICY == mst_schedSCHEDULING_RMS || mst_schedSCHEDULING_POLICY == mst_schedSCHEDULING_EDF)
static int prv_compare(const void *arg1, const void *arg2) {
 8000b3a:	b480      	push	{r7}
 8000b3c:	b085      	sub	sp, #20
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	6078      	str	r0, [r7, #4]
 8000b42:	6039      	str	r1, [r7, #0]
	extTCB_t *itm1 = *(extTCB_t**) arg1;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	60fb      	str	r3, [r7, #12]
	extTCB_t *itm2 = *(extTCB_t**) arg2;
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	60bb      	str	r3, [r7, #8]
		return -1;
	if (itm1->xTaskPeriod < itm2->xTaskPeriod)
		return 1;
	return 0; // Equal
#elif mst_schedSCHEDULING_POLICY == mst_schedSCHEDULING_EDF
	if (itm1->xTaskDeadline < itm2->xTaskDeadline)
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	d202      	bcs.n	8000b62 <prv_compare+0x28>
		return -1;
 8000b5c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b60:	e008      	b.n	8000b74 <prv_compare+0x3a>
	if (itm1->xTaskDeadline > itm2->xTaskDeadline)
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b66:	68bb      	ldr	r3, [r7, #8]
 8000b68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b6a:	429a      	cmp	r2, r3
 8000b6c:	d901      	bls.n	8000b72 <prv_compare+0x38>
		return 1;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	e000      	b.n	8000b74 <prv_compare+0x3a>
	return 0; // Equal
 8000b72:	2300      	movs	r3, #0
#endif


}
 8000b74:	4618      	mov	r0, r3
 8000b76:	3714      	adds	r7, #20
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr

08000b80 <prvComputeOrderedPriorities>:
/*
 *TODO: This can be obviously optimized by using an appropriate data structure
 Now it does quicksort after getting list, we have O(n log n) in best case
 */

static BaseType_t prvComputeOrderedPriorities() {
 8000b80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b84:	b090      	sub	sp, #64	@ 0x40
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	466b      	mov	r3, sp
 8000b8a:	4698      	mov	r8, r3
	extTCB_t *listArray[xListTasksNumber];
 8000b8c:	4b55      	ldr	r3, [pc, #340]	@ (8000ce4 <prvComputeOrderedPriorities+0x164>)
 8000b8e:	681e      	ldr	r6, [r3, #0]
 8000b90:	1e73      	subs	r3, r6, #1
 8000b92:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000b94:	4632      	mov	r2, r6
 8000b96:	2300      	movs	r3, #0
 8000b98:	4614      	mov	r4, r2
 8000b9a:	461d      	mov	r5, r3
 8000b9c:	f04f 0200 	mov.w	r2, #0
 8000ba0:	f04f 0300 	mov.w	r3, #0
 8000ba4:	016b      	lsls	r3, r5, #5
 8000ba6:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8000baa:	0162      	lsls	r2, r4, #5
 8000bac:	4632      	mov	r2, r6
 8000bae:	2300      	movs	r3, #0
 8000bb0:	4610      	mov	r0, r2
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	f04f 0200 	mov.w	r2, #0
 8000bb8:	f04f 0300 	mov.w	r3, #0
 8000bbc:	014b      	lsls	r3, r1, #5
 8000bbe:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000bc2:	0142      	lsls	r2, r0, #5
 8000bc4:	4633      	mov	r3, r6
 8000bc6:	009b      	lsls	r3, r3, #2
 8000bc8:	3307      	adds	r3, #7
 8000bca:	08db      	lsrs	r3, r3, #3
 8000bcc:	00db      	lsls	r3, r3, #3
 8000bce:	ebad 0d03 	sub.w	sp, sp, r3
 8000bd2:	466b      	mov	r3, sp
 8000bd4:	3303      	adds	r3, #3
 8000bd6:	089b      	lsrs	r3, r3, #2
 8000bd8:	009b      	lsls	r3, r3, #2
 8000bda:	62bb      	str	r3, [r7, #40]	@ 0x28
	//transfer linked list to array
	int i = 0;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	627b      	str	r3, [r7, #36]	@ 0x24
	if(xListTasksNumber == 3)
 8000be0:	4b40      	ldr	r3, [pc, #256]	@ (8000ce4 <prvComputeOrderedPriorities+0x164>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	2b03      	cmp	r3, #3
 8000be6:	d101      	bne.n	8000bec <prvComputeOrderedPriorities+0x6c>
			{
				int jj = 0;
 8000be8:	2300      	movs	r3, #0
 8000bea:	623b      	str	r3, [r7, #32]
			}
	configASSERT(xTasksList.uxNumberOfItems == xListTasksNumber);
 8000bec:	4b3e      	ldr	r3, [pc, #248]	@ (8000ce8 <prvComputeOrderedPriorities+0x168>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a3c      	ldr	r2, [pc, #240]	@ (8000ce4 <prvComputeOrderedPriorities+0x164>)
 8000bf2:	6812      	ldr	r2, [r2, #0]
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d00b      	beq.n	8000c10 <prvComputeOrderedPriorities+0x90>
	__asm volatile
 8000bf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000bfc:	f383 8811 	msr	BASEPRI, r3
 8000c00:	f3bf 8f6f 	isb	sy
 8000c04:	f3bf 8f4f 	dsb	sy
 8000c08:	60fb      	str	r3, [r7, #12]
}
 8000c0a:	bf00      	nop
 8000c0c:	bf00      	nop
 8000c0e:	e7fd      	b.n	8000c0c <prvComputeOrderedPriorities+0x8c>

	ListItem_t *xItm = listGET_HEAD_ENTRY(&xTasksList); // this is xListEnd.pxNext
 8000c10:	4b35      	ldr	r3, [pc, #212]	@ (8000ce8 <prvComputeOrderedPriorities+0x168>)
 8000c12:	68db      	ldr	r3, [r3, #12]
 8000c14:	63fb      	str	r3, [r7, #60]	@ 0x3c
	for (int i = 0; i < xListTasksNumber; i++) {
 8000c16:	2300      	movs	r3, #0
 8000c18:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000c1a:	e01c      	b.n	8000c56 <prvComputeOrderedPriorities+0xd6>
	    extTCB_t *xTCB = (extTCB_t *) xItm->pvOwner;
 8000c1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	613b      	str	r3, [r7, #16]

	    configASSERT(xTCB != NULL);  // Make sure we don't dereference garbage
 8000c22:	693b      	ldr	r3, [r7, #16]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d10b      	bne.n	8000c40 <prvComputeOrderedPriorities+0xc0>
	__asm volatile
 8000c28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000c2c:	f383 8811 	msr	BASEPRI, r3
 8000c30:	f3bf 8f6f 	isb	sy
 8000c34:	f3bf 8f4f 	dsb	sy
 8000c38:	60bb      	str	r3, [r7, #8]
}
 8000c3a:	bf00      	nop
 8000c3c:	bf00      	nop
 8000c3e:	e7fd      	b.n	8000c3c <prvComputeOrderedPriorities+0xbc>
	    listArray[i] = xTCB;
 8000c40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c42:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000c44:	6939      	ldr	r1, [r7, #16]
 8000c46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	    xItm = listGET_NEXT(xItm);
 8000c4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	for (int i = 0; i < xListTasksNumber; i++) {
 8000c50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000c52:	3301      	adds	r3, #1
 8000c54:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000c56:	4b23      	ldr	r3, [pc, #140]	@ (8000ce4 <prvComputeOrderedPriorities+0x164>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	dbdd      	blt.n	8000c1c <prvComputeOrderedPriorities+0x9c>

	}

	qsort(listArray, xListTasksNumber, sizeof(extTCB_t*), prv_compare);
 8000c60:	4b20      	ldr	r3, [pc, #128]	@ (8000ce4 <prvComputeOrderedPriorities+0x164>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4619      	mov	r1, r3
 8000c66:	4b21      	ldr	r3, [pc, #132]	@ (8000cec <prvComputeOrderedPriorities+0x16c>)
 8000c68:	2204      	movs	r2, #4
 8000c6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000c6c:	f007 f925 	bl	8007eba <qsort>
	UBaseType_t uxUsedPriority = prvSTARTING_PRIORITY;
 8000c70:	2305      	movs	r3, #5
 8000c72:	637b      	str	r3, [r7, #52]	@ 0x34

	//GUARDA PERCHE PROBLEMI ogni tot
	//RICALCOLA ABS DEADLINE

	for (UBaseType_t xCurrInx = 0; xCurrInx < xListTasksNumber; xCurrInx++) {
 8000c74:	2300      	movs	r3, #0
 8000c76:	633b      	str	r3, [r7, #48]	@ 0x30
 8000c78:	e027      	b.n	8000cca <prvComputeOrderedPriorities+0x14a>
		extTCB_t *xTCB_Reference = listArray[xCurrInx];
 8000c7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000c7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c82:	61fb      	str	r3, [r7, #28]
		UBaseType_t bNewPriority = uxUsedPriority++;
 8000c84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c86:	1c5a      	adds	r2, r3, #1
 8000c88:	637a      	str	r2, [r7, #52]	@ 0x34
 8000c8a:	61bb      	str	r3, [r7, #24]
		xTCB_Reference->uxPriority = bNewPriority;
 8000c8c:	69fb      	ldr	r3, [r7, #28]
 8000c8e:	69ba      	ldr	r2, [r7, #24]
 8000c90:	625a      	str	r2, [r3, #36]	@ 0x24
		/*
		 * Here we create the periodic tasks that we saved in the list
		 */
		configASSERT(prvPeriodicTaskCreate(xTCB_Reference));
#elif mst_schedSCHEDULING_POLICY == mst_schedSCHEDULING_EDF
		configASSERT(xTCB_Reference->pxCreatedTask != NULL);
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d10b      	bne.n	8000cb2 <prvComputeOrderedPriorities+0x132>
	__asm volatile
 8000c9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000c9e:	f383 8811 	msr	BASEPRI, r3
 8000ca2:	f3bf 8f6f 	isb	sy
 8000ca6:	f3bf 8f4f 	dsb	sy
 8000caa:	607b      	str	r3, [r7, #4]
}
 8000cac:	bf00      	nop
 8000cae:	bf00      	nop
 8000cb0:	e7fd      	b.n	8000cae <prvComputeOrderedPriorities+0x12e>
		extTCB_t * tht = (xTCB_Reference);
 8000cb2:	69fb      	ldr	r3, [r7, #28]
 8000cb4:	617b      	str	r3, [r7, #20]
			vTaskPrioritySet(*(xTCB_Reference->pxCreatedTask), bNewPriority);
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	69b9      	ldr	r1, [r7, #24]
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f004 ffe2 	bl	8005c88 <vTaskPrioritySet>
	for (UBaseType_t xCurrInx = 0; xCurrInx < xListTasksNumber; xCurrInx++) {
 8000cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	633b      	str	r3, [r7, #48]	@ 0x30
 8000cca:	4b06      	ldr	r3, [pc, #24]	@ (8000ce4 <prvComputeOrderedPriorities+0x164>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	461a      	mov	r2, r3
 8000cd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d3d1      	bcc.n	8000c7a <prvComputeOrderedPriorities+0xfa>
			#endif
	}
	return pdPASS;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	46c5      	mov	sp, r8
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3740      	adds	r7, #64	@ 0x40
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000ce4:	20000094 	.word	0x20000094
 8000ce8:	20000080 	.word	0x20000080
 8000cec:	08000b3b 	.word	0x08000b3b

08000cf0 <vMSTSchedulerStart>:
#endif

/*
 MST version of scheduler start
 */
void vMSTSchedulerStart(void) {
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
#if(TESTING_STM32 == 1)
	prvMSTSetupUSClock();
 8000cf4:	f7ff fc5a 	bl	80005ac <prvMSTSetupUSClock>
	 */
	configASSERT(prvComputeOrderedPriorities());

#endif

	vTaskStartScheduler();
 8000cf8:	f005 f864 	bl	8005dc4 <vTaskStartScheduler>

}
 8000cfc:	bf00      	nop
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <prvMSTDispatch>:


static void prvMSTDispatch(TaskHandle_t *forTask, BaseType_t xAsCallee,
		taskType_e xOfTaskType, BaseType_t xFromUserRequest) {
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08c      	sub	sp, #48	@ 0x30
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	60f8      	str	r0, [r7, #12]
 8000d08:	60b9      	str	r1, [r7, #8]
 8000d0a:	603b      	str	r3, [r7, #0]
 8000d0c:	4613      	mov	r3, r2
 8000d0e:	71fb      	strb	r3, [r7, #7]

	if (xAsCallee == pdTRUE) {
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d172      	bne.n	8000dfc <prvMSTDispatch+0xfc>
#if mst_schedSCHEDULING_POLICY == mst_schedSCHEDULING_EDF
		/*
		A job wants to run, we add it to list and recompute priorities
		*/

		extTCB_t *xCurrExtTCB = (extTCB_t*) pvTaskGetThreadLocalStoragePointer(
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f005 fc2f 	bl	8006580 <pvTaskGetThreadLocalStoragePointer>
 8000d22:	62b8      	str	r0, [r7, #40]	@ 0x28
	                            *forTask, mstLOCAL_STORAGE_DATA_INDEX);

		taskENTER_CRITICAL();
 8000d24:	f006 fd80 	bl	8007828 <vPortEnterCritical>
		{
		    if (vTasksListInit == pdFALSE) {
 8000d28:	4b5a      	ldr	r3, [pc, #360]	@ (8000e94 <prvMSTDispatch+0x194>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d108      	bne.n	8000d42 <prvMSTDispatch+0x42>
		        vTasksListInit = pdTRUE;
 8000d30:	4b58      	ldr	r3, [pc, #352]	@ (8000e94 <prvMSTDispatch+0x194>)
 8000d32:	2201      	movs	r2, #1
 8000d34:	601a      	str	r2, [r3, #0]
		        vListInitialise(&xTasksList);
 8000d36:	4858      	ldr	r0, [pc, #352]	@ (8000e98 <prvMSTDispatch+0x198>)
 8000d38:	f003 fe2e 	bl	8004998 <vListInitialise>
		        xListTasksNumber = 0;
 8000d3c:	4b57      	ldr	r3, [pc, #348]	@ (8000e9c <prvMSTDispatch+0x19c>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
		    }
		    //TODO: This might not be ideal, would we want same task in list? This is a rejection
		    if (!listIS_CONTAINED_WITHIN(&xTasksList, &xCurrExtTCB->pxTaskTCBListItem)) {
 8000d42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d44:	691b      	ldr	r3, [r3, #16]
 8000d46:	4a54      	ldr	r2, [pc, #336]	@ (8000e98 <prvMSTDispatch+0x198>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d017      	beq.n	8000d7c <prvMSTDispatch+0x7c>
		        vListInitialiseItem(&xCurrExtTCB->pxTaskTCBListItem);
 8000d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f003 fe42 	bl	80049d8 <vListInitialiseItem>
		        listSET_LIST_ITEM_OWNER(&xCurrExtTCB->pxTaskTCBListItem, xCurrExtTCB);
 8000d54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d56:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000d58:	60da      	str	r2, [r3, #12]
		        listSET_LIST_ITEM_VALUE(&xCurrExtTCB->pxTaskTCBListItem,
 8000d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d5c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8000d5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d62:	441a      	add	r2, r3
 8000d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d66:	601a      	str	r2, [r3, #0]
		            xCurrExtTCB->xPrevAbsDeadline + xCurrExtTCB->xTaskDeadline);

		        vListInsertEnd(&xTasksList, &xCurrExtTCB->pxTaskTCBListItem);
 8000d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	484a      	ldr	r0, [pc, #296]	@ (8000e98 <prvMSTDispatch+0x198>)
 8000d6e:	f003 fe40 	bl	80049f2 <vListInsertEnd>
		        xListTasksNumber++;
 8000d72:	4b4a      	ldr	r3, [pc, #296]	@ (8000e9c <prvMSTDispatch+0x19c>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	3301      	adds	r3, #1
 8000d78:	4a48      	ldr	r2, [pc, #288]	@ (8000e9c <prvMSTDispatch+0x19c>)
 8000d7a:	6013      	str	r3, [r2, #0]
		    }

		    configASSERT(prvComputeOrderedPriorities());
 8000d7c:	f7ff ff00 	bl	8000b80 <prvComputeOrderedPriorities>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d10b      	bne.n	8000d9e <prvMSTDispatch+0x9e>
	__asm volatile
 8000d86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000d8a:	f383 8811 	msr	BASEPRI, r3
 8000d8e:	f3bf 8f6f 	isb	sy
 8000d92:	f3bf 8f4f 	dsb	sy
 8000d96:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8000d98:	bf00      	nop
 8000d9a:	bf00      	nop
 8000d9c:	e7fd      	b.n	8000d9a <prvMSTDispatch+0x9a>
		}
		taskEXIT_CRITICAL();
 8000d9e:	f006 fd75 	bl	800788c <vPortExitCritical>
#else
		//nothing
#endif
		switch (xOfTaskType) {
 8000da2:	79fb      	ldrb	r3, [r7, #7]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d002      	beq.n	8000dae <prvMSTDispatch+0xae>
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d008      	beq.n	8000dbe <prvMSTDispatch+0xbe>
 8000dac:	e01a      	b.n	8000de4 <prvMSTDispatch+0xe4>
		case taskTypePeriodic:
			xTaskNotifyGive(*forTask);
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	6818      	ldr	r0, [r3, #0]
 8000db2:	2300      	movs	r3, #0
 8000db4:	2202      	movs	r2, #2
 8000db6:	2100      	movs	r1, #0
 8000db8:	f005 ff14 	bl	8006be4 <xTaskGenericNotify>
			break;
 8000dbc:	e065      	b.n	8000e8a <prvMSTDispatch+0x18a>
		case taskTypeSporadic:
			if (xFromUserRequest == pdTRUE) {
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d107      	bne.n	8000dd4 <prvMSTDispatch+0xd4>
				xTaskNotify(*forTask, NOTIFY_USER_REQUEST, eSetBits);
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	6818      	ldr	r0, [r3, #0]
 8000dc8:	2300      	movs	r3, #0
 8000dca:	2201      	movs	r2, #1
 8000dcc:	2102      	movs	r1, #2
 8000dce:	f005 ff09 	bl	8006be4 <xTaskGenericNotify>
			} else {
				xTaskNotify(*forTask, NOTIFY_INTERARRIVAL_TIMER, eSetBits);
			}
			break;
 8000dd2:	e05a      	b.n	8000e8a <prvMSTDispatch+0x18a>
				xTaskNotify(*forTask, NOTIFY_INTERARRIVAL_TIMER, eSetBits);
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	6818      	ldr	r0, [r3, #0]
 8000dd8:	2300      	movs	r3, #0
 8000dda:	2201      	movs	r2, #1
 8000ddc:	2101      	movs	r1, #1
 8000dde:	f005 ff01 	bl	8006be4 <xTaskGenericNotify>
			break;
 8000de2:	e052      	b.n	8000e8a <prvMSTDispatch+0x18a>
	__asm volatile
 8000de4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000de8:	f383 8811 	msr	BASEPRI, r3
 8000dec:	f3bf 8f6f 	isb	sy
 8000df0:	f3bf 8f4f 	dsb	sy
 8000df4:	623b      	str	r3, [r7, #32]
}
 8000df6:	bf00      	nop
		default:
			configASSERT(pdFALSE)
 8000df8:	bf00      	nop
 8000dfa:	e7fd      	b.n	8000df8 <prvMSTDispatch+0xf8>
	} else {
		/*
		 Received from a finished job, we shall remove the job from the actively running in the list
		 */
#if mst_schedSCHEDULING_POLICY == mst_schedSCHEDULING_EDF
    extTCB_t *xCurrExtTCB = (extTCB_t*) pvTaskGetThreadLocalStoragePointer(
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	2100      	movs	r1, #0
 8000e02:	4618      	mov	r0, r3
 8000e04:	f005 fbbc 	bl	8006580 <pvTaskGetThreadLocalStoragePointer>
 8000e08:	62f8      	str	r0, [r7, #44]	@ 0x2c
                                *forTask, mstLOCAL_STORAGE_DATA_INDEX);

    configASSERT(xCurrExtTCB != NULL);
 8000e0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d10b      	bne.n	8000e28 <prvMSTDispatch+0x128>
	__asm volatile
 8000e10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000e14:	f383 8811 	msr	BASEPRI, r3
 8000e18:	f3bf 8f6f 	isb	sy
 8000e1c:	f3bf 8f4f 	dsb	sy
 8000e20:	61fb      	str	r3, [r7, #28]
}
 8000e22:	bf00      	nop
 8000e24:	bf00      	nop
 8000e26:	e7fd      	b.n	8000e24 <prvMSTDispatch+0x124>

    taskENTER_CRITICAL();
 8000e28:	f006 fcfe 	bl	8007828 <vPortEnterCritical>
    {
        if (listIS_CONTAINED_WITHIN(&xTasksList, &(xCurrExtTCB->pxTaskTCBListItem))) {
 8000e2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e2e:	691b      	ldr	r3, [r3, #16]
 8000e30:	4a19      	ldr	r2, [pc, #100]	@ (8000e98 <prvMSTDispatch+0x198>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d10e      	bne.n	8000e54 <prvMSTDispatch+0x154>
            uxListRemove(&(xCurrExtTCB->pxTaskTCBListItem));
 8000e36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f003 fe37 	bl	8004aac <uxListRemove>
            xListTasksNumber--;
 8000e3e:	4b17      	ldr	r3, [pc, #92]	@ (8000e9c <prvMSTDispatch+0x19c>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	3b01      	subs	r3, #1
 8000e44:	4a15      	ldr	r2, [pc, #84]	@ (8000e9c <prvMSTDispatch+0x19c>)
 8000e46:	6013      	str	r3, [r2, #0]
        } else {
            configASSERT(pdFALSE);
        }

        configASSERT(prvComputeOrderedPriorities());
 8000e48:	f7ff fe9a 	bl	8000b80 <prvComputeOrderedPriorities>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d118      	bne.n	8000e84 <prvMSTDispatch+0x184>
 8000e52:	e00b      	b.n	8000e6c <prvMSTDispatch+0x16c>
	__asm volatile
 8000e54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000e58:	f383 8811 	msr	BASEPRI, r3
 8000e5c:	f3bf 8f6f 	isb	sy
 8000e60:	f3bf 8f4f 	dsb	sy
 8000e64:	61bb      	str	r3, [r7, #24]
}
 8000e66:	bf00      	nop
            configASSERT(pdFALSE);
 8000e68:	bf00      	nop
 8000e6a:	e7fd      	b.n	8000e68 <prvMSTDispatch+0x168>
	__asm volatile
 8000e6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000e70:	f383 8811 	msr	BASEPRI, r3
 8000e74:	f3bf 8f6f 	isb	sy
 8000e78:	f3bf 8f4f 	dsb	sy
 8000e7c:	617b      	str	r3, [r7, #20]
}
 8000e7e:	bf00      	nop
        configASSERT(prvComputeOrderedPriorities());
 8000e80:	bf00      	nop
 8000e82:	e7fd      	b.n	8000e80 <prvMSTDispatch+0x180>
    }
    taskEXIT_CRITICAL();
 8000e84:	f006 fd02 	bl	800788c <vPortExitCritical>

#endif
	}

}
 8000e88:	bf00      	nop
 8000e8a:	bf00      	nop
 8000e8c:	3730      	adds	r7, #48	@ 0x30
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	2000007c 	.word	0x2000007c
 8000e98:	20000080 	.word	0x20000080
 8000e9c:	20000094 	.word	0x20000094

08000ea0 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
	ulStatsTimerTicks = 0;
 8000ea4:	4b03      	ldr	r3, [pc, #12]	@ (8000eb4 <configureTimerForRunTimeStats+0x14>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim10);
 8000eaa:	4803      	ldr	r0, [pc, #12]	@ (8000eb8 <configureTimerForRunTimeStats+0x18>)
 8000eac:	f002 f8ec 	bl	8003088 <HAL_TIM_Base_Start_IT>
}
 8000eb0:	bf00      	nop
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	20000098 	.word	0x20000098
 8000eb8:	200000e4 	.word	0x200000e4

08000ebc <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
return ulStatsTimerTicks;
 8000ec0:	4b03      	ldr	r3, [pc, #12]	@ (8000ed0 <getRunTimeCounterValue+0x14>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	20000098 	.word	0x20000098

08000ed4 <MSTTask1>:
TaskHandle_t Task1Handle;
TaskHandle_t Task2Handle;
TaskHandle_t Task3Handle;
TaskHandle_t Task4Handle;

void MSTTask1(void *pvParameters) {
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
	if (xSemaphoreTake(xBinarySemUART2, portMAX_DELAY) == pdTRUE) {
 8000edc:	4b10      	ldr	r3, [pc, #64]	@ (8000f20 <MSTTask1+0x4c>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f004 fa63 	bl	80053b0 <xQueueSemaphoreTake>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d113      	bne.n	8000f18 <MSTTask1+0x44>
		length = snprintf((char*) transmit, sizeof(transmit), "Task1\n");
 8000ef0:	4a0c      	ldr	r2, [pc, #48]	@ (8000f24 <MSTTask1+0x50>)
 8000ef2:	2114      	movs	r1, #20
 8000ef4:	480c      	ldr	r0, [pc, #48]	@ (8000f28 <MSTTask1+0x54>)
 8000ef6:	f007 f927 	bl	8008148 <sniprintf>
 8000efa:	4603      	mov	r3, r0
 8000efc:	4a0b      	ldr	r2, [pc, #44]	@ (8000f2c <MSTTask1+0x58>)
 8000efe:	6013      	str	r3, [r2, #0]
		HAL_Delay(300);
 8000f00:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000f04:	f000 fd5a 	bl	80019bc <HAL_Delay>
		HAL_UART_Transmit_DMA(&huart2, transmit, length);
 8000f08:	4b08      	ldr	r3, [pc, #32]	@ (8000f2c <MSTTask1+0x58>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	b29b      	uxth	r3, r3
 8000f0e:	461a      	mov	r2, r3
 8000f10:	4905      	ldr	r1, [pc, #20]	@ (8000f28 <MSTTask1+0x54>)
 8000f12:	4807      	ldr	r0, [pc, #28]	@ (8000f30 <MSTTask1+0x5c>)
 8000f14:	f002 fcf2 	bl	80038fc <HAL_UART_Transmit_DMA>
	}
}
 8000f18:	bf00      	nop
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	2000021c 	.word	0x2000021c
 8000f24:	08008bb8 	.word	0x08008bb8
 8000f28:	20000220 	.word	0x20000220
 8000f2c:	20000234 	.word	0x20000234
 8000f30:	20000174 	.word	0x20000174

08000f34 <MSTTask2>:

void MSTTask2(void *pvParameters) {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
	vMSTSporadicTaskRun(&Task3Handle);
 8000f3c:	4811      	ldr	r0, [pc, #68]	@ (8000f84 <MSTTask2+0x50>)
 8000f3e:	f7ff fde1 	bl	8000b04 <vMSTSporadicTaskRun>
	vMSTSporadicTaskRun(&Task4Handle);
 8000f42:	4811      	ldr	r0, [pc, #68]	@ (8000f88 <MSTTask2+0x54>)
 8000f44:	f7ff fdde 	bl	8000b04 <vMSTSporadicTaskRun>
	if (xSemaphoreTake(xBinarySemUART2, portMAX_DELAY) == pdTRUE) {
 8000f48:	4b10      	ldr	r3, [pc, #64]	@ (8000f8c <MSTTask2+0x58>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000f50:	4618      	mov	r0, r3
 8000f52:	f004 fa2d 	bl	80053b0 <xQueueSemaphoreTake>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d10f      	bne.n	8000f7c <MSTTask2+0x48>
		length = snprintf((char*) transmit, sizeof(transmit), "Task2\n");
 8000f5c:	4a0c      	ldr	r2, [pc, #48]	@ (8000f90 <MSTTask2+0x5c>)
 8000f5e:	2114      	movs	r1, #20
 8000f60:	480c      	ldr	r0, [pc, #48]	@ (8000f94 <MSTTask2+0x60>)
 8000f62:	f007 f8f1 	bl	8008148 <sniprintf>
 8000f66:	4603      	mov	r3, r0
 8000f68:	4a0b      	ldr	r2, [pc, #44]	@ (8000f98 <MSTTask2+0x64>)
 8000f6a:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit_DMA(&huart2, transmit, length);
 8000f6c:	4b0a      	ldr	r3, [pc, #40]	@ (8000f98 <MSTTask2+0x64>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	b29b      	uxth	r3, r3
 8000f72:	461a      	mov	r2, r3
 8000f74:	4907      	ldr	r1, [pc, #28]	@ (8000f94 <MSTTask2+0x60>)
 8000f76:	4809      	ldr	r0, [pc, #36]	@ (8000f9c <MSTTask2+0x68>)
 8000f78:	f002 fcc0 	bl	80038fc <HAL_UART_Transmit_DMA>
	}
}
 8000f7c:	bf00      	nop
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	20000240 	.word	0x20000240
 8000f88:	20000244 	.word	0x20000244
 8000f8c:	2000021c 	.word	0x2000021c
 8000f90:	08008bc0 	.word	0x08008bc0
 8000f94:	20000220 	.word	0x20000220
 8000f98:	20000234 	.word	0x20000234
 8000f9c:	20000174 	.word	0x20000174

08000fa0 <MSTTask3>:

void MSTTask3(void *pvParameters) {
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
	if (xSemaphoreTake(xBinarySemUART2, portMAX_DELAY) == pdTRUE) {
 8000fa8:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe4 <MSTTask3+0x44>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f004 f9fd 	bl	80053b0 <xQueueSemaphoreTake>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d10f      	bne.n	8000fdc <MSTTask3+0x3c>
		length = snprintf((char*) transmit, sizeof(transmit), "SPORADIC1\n");
 8000fbc:	4a0a      	ldr	r2, [pc, #40]	@ (8000fe8 <MSTTask3+0x48>)
 8000fbe:	2114      	movs	r1, #20
 8000fc0:	480a      	ldr	r0, [pc, #40]	@ (8000fec <MSTTask3+0x4c>)
 8000fc2:	f007 f8c1 	bl	8008148 <sniprintf>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	4a09      	ldr	r2, [pc, #36]	@ (8000ff0 <MSTTask3+0x50>)
 8000fca:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit_DMA(&huart2, transmit, length);
 8000fcc:	4b08      	ldr	r3, [pc, #32]	@ (8000ff0 <MSTTask3+0x50>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	b29b      	uxth	r3, r3
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	4905      	ldr	r1, [pc, #20]	@ (8000fec <MSTTask3+0x4c>)
 8000fd6:	4807      	ldr	r0, [pc, #28]	@ (8000ff4 <MSTTask3+0x54>)
 8000fd8:	f002 fc90 	bl	80038fc <HAL_UART_Transmit_DMA>
	}
}
 8000fdc:	bf00      	nop
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	2000021c 	.word	0x2000021c
 8000fe8:	08008bc8 	.word	0x08008bc8
 8000fec:	20000220 	.word	0x20000220
 8000ff0:	20000234 	.word	0x20000234
 8000ff4:	20000174 	.word	0x20000174

08000ff8 <MSTTask4>:

void MSTTask4(void *pvParameters) {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
	if (xSemaphoreTake(xBinarySemUART2, portMAX_DELAY) == pdTRUE) {
 8001000:	4b0e      	ldr	r3, [pc, #56]	@ (800103c <MSTTask4+0x44>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001008:	4618      	mov	r0, r3
 800100a:	f004 f9d1 	bl	80053b0 <xQueueSemaphoreTake>
 800100e:	4603      	mov	r3, r0
 8001010:	2b01      	cmp	r3, #1
 8001012:	d10f      	bne.n	8001034 <MSTTask4+0x3c>
		length = snprintf((char*) transmit, sizeof(transmit), "SPORADIC2\n");
 8001014:	4a0a      	ldr	r2, [pc, #40]	@ (8001040 <MSTTask4+0x48>)
 8001016:	2114      	movs	r1, #20
 8001018:	480a      	ldr	r0, [pc, #40]	@ (8001044 <MSTTask4+0x4c>)
 800101a:	f007 f895 	bl	8008148 <sniprintf>
 800101e:	4603      	mov	r3, r0
 8001020:	4a09      	ldr	r2, [pc, #36]	@ (8001048 <MSTTask4+0x50>)
 8001022:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit_DMA(&huart2, transmit, length);
 8001024:	4b08      	ldr	r3, [pc, #32]	@ (8001048 <MSTTask4+0x50>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	b29b      	uxth	r3, r3
 800102a:	461a      	mov	r2, r3
 800102c:	4905      	ldr	r1, [pc, #20]	@ (8001044 <MSTTask4+0x4c>)
 800102e:	4807      	ldr	r0, [pc, #28]	@ (800104c <MSTTask4+0x54>)
 8001030:	f002 fc64 	bl	80038fc <HAL_UART_Transmit_DMA>
	}
}
 8001034:	bf00      	nop
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	2000021c 	.word	0x2000021c
 8001040:	08008bd4 	.word	0x08008bd4
 8001044:	20000220 	.word	0x20000220
 8001048:	20000234 	.word	0x20000234
 800104c:	20000174 	.word	0x20000174

08001050 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
	if (huart == &huart2) {
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	4a08      	ldr	r2, [pc, #32]	@ (800107c <HAL_UART_TxCpltCallback+0x2c>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d109      	bne.n	8001074 <HAL_UART_TxCpltCallback+0x24>
		//free sem
		BaseType_t xHigherPr = pdFALSE;
 8001060:	2300      	movs	r3, #0
 8001062:	60fb      	str	r3, [r7, #12]
		xSemaphoreGiveFromISR(xBinarySemUART2, &xHigherPr);
 8001064:	4b06      	ldr	r3, [pc, #24]	@ (8001080 <HAL_UART_TxCpltCallback+0x30>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f107 020c 	add.w	r2, r7, #12
 800106c:	4611      	mov	r1, r2
 800106e:	4618      	mov	r0, r3
 8001070:	f004 f82c 	bl	80050cc <xQueueGiveFromISR>
	}
}
 8001074:	bf00      	nop
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	20000174 	.word	0x20000174
 8001080:	2000021c 	.word	0x2000021c

08001084 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001084:	b580      	push	{r7, lr}
 8001086:	b086      	sub	sp, #24
 8001088:	af06      	add	r7, sp, #24
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800108a:	f000 fc55 	bl	8001938 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800108e:	f000 f889 	bl	80011a4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001092:	f000 f9d3 	bl	800143c <MX_GPIO_Init>
	MX_DMA_Init();
 8001096:	f000 f9b1 	bl	80013fc <MX_DMA_Init>
	MX_USART2_UART_Init();
 800109a:	f000 f985 	bl	80013a8 <MX_USART2_UART_Init>
	MX_USART1_UART_Init();
 800109e:	f000 f959 	bl	8001354 <MX_USART1_UART_Init>
	MX_TIM10_Init();
 80010a2:	f000 f935 	bl	8001310 <MX_TIM10_Init>
	MX_TIM2_Init();
 80010a6:	f000 f8e7 	bl	8001278 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */

	xBinarySemUART2 = xSemaphoreCreateBinary();
 80010aa:	2203      	movs	r2, #3
 80010ac:	2100      	movs	r1, #0
 80010ae:	2001      	movs	r0, #1
 80010b0:	f003 fe0d 	bl	8004cce <xQueueGenericCreate>
 80010b4:	4603      	mov	r3, r0
 80010b6:	4a2e      	ldr	r2, [pc, #184]	@ (8001170 <main+0xec>)
 80010b8:	6013      	str	r3, [r2, #0]
	xSemaphoreGive(xBinarySemUART2);
 80010ba:	4b2d      	ldr	r3, [pc, #180]	@ (8001170 <main+0xec>)
 80010bc:	6818      	ldr	r0, [r3, #0]
 80010be:	2300      	movs	r3, #0
 80010c0:	2200      	movs	r2, #0
 80010c2:	2100      	movs	r1, #0
 80010c4:	f003 fe62 	bl	8004d8c <xQueueGenericSend>

	vMSTPeriodicTaskCreate(MSTTask1,                  // Function to execute
 80010c8:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80010cc:	9305      	str	r3, [sp, #20]
 80010ce:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80010d2:	9304      	str	r3, [sp, #16]
 80010d4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80010d8:	9303      	str	r3, [sp, #12]
 80010da:	f241 3388 	movw	r3, #5000	@ 0x1388
 80010de:	9302      	str	r3, [sp, #8]
 80010e0:	4b24      	ldr	r3, [pc, #144]	@ (8001174 <main+0xf0>)
 80010e2:	9301      	str	r3, [sp, #4]
 80010e4:	2305      	movs	r3, #5
 80010e6:	9300      	str	r3, [sp, #0]
 80010e8:	2300      	movs	r3, #0
 80010ea:	2280      	movs	r2, #128	@ 0x80
 80010ec:	4922      	ldr	r1, [pc, #136]	@ (8001178 <main+0xf4>)
 80010ee:	4823      	ldr	r0, [pc, #140]	@ (800117c <main+0xf8>)
 80010f0:	f7ff faf0 	bl	80006d4 <vMSTPeriodicTaskCreate>
	                       500,                       //deadline
	                       500,                       //phase
	                       300                        //WCET
	                      );

	vMSTPeriodicTaskCreate(MSTTask2, "2",
 80010f4:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80010f8:	9305      	str	r3, [sp, #20]
 80010fa:	f242 7310 	movw	r3, #10000	@ 0x2710
 80010fe:	9304      	str	r3, [sp, #16]
 8001100:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8001104:	9303      	str	r3, [sp, #12]
 8001106:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800110a:	9302      	str	r3, [sp, #8]
 800110c:	4b1c      	ldr	r3, [pc, #112]	@ (8001180 <main+0xfc>)
 800110e:	9301      	str	r3, [sp, #4]
 8001110:	2302      	movs	r3, #2
 8001112:	9300      	str	r3, [sp, #0]
 8001114:	2300      	movs	r3, #0
 8001116:	2280      	movs	r2, #128	@ 0x80
 8001118:	491a      	ldr	r1, [pc, #104]	@ (8001184 <main+0x100>)
 800111a:	481b      	ldr	r0, [pc, #108]	@ (8001188 <main+0x104>)
 800111c:	f7ff fada 	bl	80006d4 <vMSTPeriodicTaskCreate>
	                       configMINIMAL_STACK_SIZE,
	                       NULL, 2, &Task2Handle, 1000, 300, 10000, 300);

	vMSTSporadicTaskCreate(MSTTask3, "3",
 8001120:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8001124:	9304      	str	r3, [sp, #16]
 8001126:	23c8      	movs	r3, #200	@ 0xc8
 8001128:	9303      	str	r3, [sp, #12]
 800112a:	2301      	movs	r3, #1
 800112c:	9302      	str	r3, [sp, #8]
 800112e:	4b17      	ldr	r3, [pc, #92]	@ (800118c <main+0x108>)
 8001130:	9301      	str	r3, [sp, #4]
 8001132:	2301      	movs	r3, #1
 8001134:	9300      	str	r3, [sp, #0]
 8001136:	2300      	movs	r3, #0
 8001138:	2280      	movs	r2, #128	@ 0x80
 800113a:	4915      	ldr	r1, [pc, #84]	@ (8001190 <main+0x10c>)
 800113c:	4815      	ldr	r0, [pc, #84]	@ (8001194 <main+0x110>)
 800113e:	f7ff fbe3 	bl	8000908 <vMSTSporadicTaskCreate>
	                       configMINIMAL_STACK_SIZE,
	                       NULL, 1, &Task3Handle, 1,
	                       200, 300);
	vMSTSporadicTaskCreate(MSTTask4, "4",
 8001142:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8001146:	9304      	str	r3, [sp, #16]
 8001148:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800114c:	9303      	str	r3, [sp, #12]
 800114e:	2301      	movs	r3, #1
 8001150:	9302      	str	r3, [sp, #8]
 8001152:	4b11      	ldr	r3, [pc, #68]	@ (8001198 <main+0x114>)
 8001154:	9301      	str	r3, [sp, #4]
 8001156:	2301      	movs	r3, #1
 8001158:	9300      	str	r3, [sp, #0]
 800115a:	2300      	movs	r3, #0
 800115c:	2280      	movs	r2, #128	@ 0x80
 800115e:	490f      	ldr	r1, [pc, #60]	@ (800119c <main+0x118>)
 8001160:	480f      	ldr	r0, [pc, #60]	@ (80011a0 <main+0x11c>)
 8001162:	f7ff fbd1 	bl	8000908 <vMSTSporadicTaskCreate>
		                   configMINIMAL_STACK_SIZE,
		                   NULL, 1, &Task4Handle, 1,
		                   300, 300);

	vMSTSchedulerStart();
 8001166:	f7ff fdc3 	bl	8000cf0 <vMSTSchedulerStart>

	//shall never arrive here
	for (;;)
 800116a:	bf00      	nop
 800116c:	e7fd      	b.n	800116a <main+0xe6>
 800116e:	bf00      	nop
 8001170:	2000021c 	.word	0x2000021c
 8001174:	20000238 	.word	0x20000238
 8001178:	08008be0 	.word	0x08008be0
 800117c:	08000ed5 	.word	0x08000ed5
 8001180:	2000023c 	.word	0x2000023c
 8001184:	08008be4 	.word	0x08008be4
 8001188:	08000f35 	.word	0x08000f35
 800118c:	20000240 	.word	0x20000240
 8001190:	08008be8 	.word	0x08008be8
 8001194:	08000fa1 	.word	0x08000fa1
 8001198:	20000244 	.word	0x20000244
 800119c:	08008bec 	.word	0x08008bec
 80011a0:	08000ff9 	.word	0x08000ff9

080011a4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b094      	sub	sp, #80	@ 0x50
 80011a8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80011aa:	f107 0320 	add.w	r3, r7, #32
 80011ae:	2230      	movs	r2, #48	@ 0x30
 80011b0:	2100      	movs	r1, #0
 80011b2:	4618      	mov	r0, r3
 80011b4:	f006 fffe 	bl	80081b4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80011b8:	f107 030c 	add.w	r3, r7, #12
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]
 80011c6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80011c8:	2300      	movs	r3, #0
 80011ca:	60bb      	str	r3, [r7, #8]
 80011cc:	4b28      	ldr	r3, [pc, #160]	@ (8001270 <SystemClock_Config+0xcc>)
 80011ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d0:	4a27      	ldr	r2, [pc, #156]	@ (8001270 <SystemClock_Config+0xcc>)
 80011d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80011d8:	4b25      	ldr	r3, [pc, #148]	@ (8001270 <SystemClock_Config+0xcc>)
 80011da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011e0:	60bb      	str	r3, [r7, #8]
 80011e2:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80011e4:	2300      	movs	r3, #0
 80011e6:	607b      	str	r3, [r7, #4]
 80011e8:	4b22      	ldr	r3, [pc, #136]	@ (8001274 <SystemClock_Config+0xd0>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80011f0:	4a20      	ldr	r2, [pc, #128]	@ (8001274 <SystemClock_Config+0xd0>)
 80011f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80011f6:	6013      	str	r3, [r2, #0]
 80011f8:	4b1e      	ldr	r3, [pc, #120]	@ (8001274 <SystemClock_Config+0xd0>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001200:	607b      	str	r3, [r7, #4]
 8001202:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001204:	2302      	movs	r3, #2
 8001206:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001208:	2301      	movs	r3, #1
 800120a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800120c:	2310      	movs	r3, #16
 800120e:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001210:	2302      	movs	r3, #2
 8001212:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001214:	2300      	movs	r3, #0
 8001216:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 8001218:	2310      	movs	r3, #16
 800121a:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 192;
 800121c:	23c0      	movs	r3, #192	@ 0xc0
 800121e:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 8001220:	2308      	movs	r3, #8
 8001222:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001224:	2304      	movs	r3, #4
 8001226:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001228:	f107 0320 	add.w	r3, r7, #32
 800122c:	4618      	mov	r0, r3
 800122e:	f001 fa51 	bl	80026d4 <HAL_RCC_OscConfig>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <SystemClock_Config+0x98>
		Error_Handler();
 8001238:	f000 f92c 	bl	8001494 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800123c:	230f      	movs	r3, #15
 800123e:	60fb      	str	r3, [r7, #12]
	                              | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001240:	2302      	movs	r3, #2
 8001242:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001248:	2300      	movs	r3, #0
 800124a:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800124c:	2300      	movs	r3, #0
 800124e:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001250:	f107 030c 	add.w	r3, r7, #12
 8001254:	2100      	movs	r1, #0
 8001256:	4618      	mov	r0, r3
 8001258:	f001 fcb4 	bl	8002bc4 <HAL_RCC_ClockConfig>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <SystemClock_Config+0xc2>
		Error_Handler();
 8001262:	f000 f917 	bl	8001494 <Error_Handler>
	}
}
 8001266:	bf00      	nop
 8001268:	3750      	adds	r7, #80	@ 0x50
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40023800 	.word	0x40023800
 8001274:	40007000 	.word	0x40007000

08001278 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800127e:	f107 0308 	add.w	r3, r7, #8
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	605a      	str	r2, [r3, #4]
 8001288:	609a      	str	r2, [r3, #8]
 800128a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800128c:	463b      	mov	r3, r7
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001294:	4b1d      	ldr	r3, [pc, #116]	@ (800130c <MX_TIM2_Init+0x94>)
 8001296:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800129a:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 24 - 1;
 800129c:	4b1b      	ldr	r3, [pc, #108]	@ (800130c <MX_TIM2_Init+0x94>)
 800129e:	2217      	movs	r2, #23
 80012a0:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012a2:	4b1a      	ldr	r3, [pc, #104]	@ (800130c <MX_TIM2_Init+0x94>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 80012a8:	4b18      	ldr	r3, [pc, #96]	@ (800130c <MX_TIM2_Init+0x94>)
 80012aa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80012ae:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012b0:	4b16      	ldr	r3, [pc, #88]	@ (800130c <MX_TIM2_Init+0x94>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012b6:	4b15      	ldr	r3, [pc, #84]	@ (800130c <MX_TIM2_Init+0x94>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80012bc:	4813      	ldr	r0, [pc, #76]	@ (800130c <MX_TIM2_Init+0x94>)
 80012be:	f001 fe93 	bl	8002fe8 <HAL_TIM_Base_Init>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_TIM2_Init+0x54>
		Error_Handler();
 80012c8:	f000 f8e4 	bl	8001494 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012d0:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80012d2:	f107 0308 	add.w	r3, r7, #8
 80012d6:	4619      	mov	r1, r3
 80012d8:	480c      	ldr	r0, [pc, #48]	@ (800130c <MX_TIM2_Init+0x94>)
 80012da:	f002 f827 	bl	800332c <HAL_TIM_ConfigClockSource>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_TIM2_Init+0x70>
		Error_Handler();
 80012e4:	f000 f8d6 	bl	8001494 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012e8:	2300      	movs	r3, #0
 80012ea:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ec:	2300      	movs	r3, #0
 80012ee:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80012f0:	463b      	mov	r3, r7
 80012f2:	4619      	mov	r1, r3
 80012f4:	4805      	ldr	r0, [pc, #20]	@ (800130c <MX_TIM2_Init+0x94>)
 80012f6:	f002 fa2f 	bl	8003758 <HAL_TIMEx_MasterConfigSynchronization>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_TIM2_Init+0x8c>
	        != HAL_OK) {
		Error_Handler();
 8001300:	f000 f8c8 	bl	8001494 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8001304:	bf00      	nop
 8001306:	3718      	adds	r7, #24
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	2000009c 	.word	0x2000009c

08001310 <MX_TIM10_Init>:
/**
 * @brief TIM10 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM10_Init(void) {
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
	/* USER CODE END TIM10_Init 0 */

	/* USER CODE BEGIN TIM10_Init 1 */

	/* USER CODE END TIM10_Init 1 */
	htim10.Instance = TIM10;
 8001314:	4b0d      	ldr	r3, [pc, #52]	@ (800134c <MX_TIM10_Init+0x3c>)
 8001316:	4a0e      	ldr	r2, [pc, #56]	@ (8001350 <MX_TIM10_Init+0x40>)
 8001318:	601a      	str	r2, [r3, #0]
	htim10.Init.Prescaler = 15;
 800131a:	4b0c      	ldr	r3, [pc, #48]	@ (800134c <MX_TIM10_Init+0x3c>)
 800131c:	220f      	movs	r2, #15
 800131e:	605a      	str	r2, [r3, #4]
	htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001320:	4b0a      	ldr	r3, [pc, #40]	@ (800134c <MX_TIM10_Init+0x3c>)
 8001322:	2200      	movs	r2, #0
 8001324:	609a      	str	r2, [r3, #8]
	htim10.Init.Period = 99;
 8001326:	4b09      	ldr	r3, [pc, #36]	@ (800134c <MX_TIM10_Init+0x3c>)
 8001328:	2263      	movs	r2, #99	@ 0x63
 800132a:	60da      	str	r2, [r3, #12]
	htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800132c:	4b07      	ldr	r3, [pc, #28]	@ (800134c <MX_TIM10_Init+0x3c>)
 800132e:	2200      	movs	r2, #0
 8001330:	611a      	str	r2, [r3, #16]
	htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001332:	4b06      	ldr	r3, [pc, #24]	@ (800134c <MX_TIM10_Init+0x3c>)
 8001334:	2200      	movs	r2, #0
 8001336:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim10) != HAL_OK) {
 8001338:	4804      	ldr	r0, [pc, #16]	@ (800134c <MX_TIM10_Init+0x3c>)
 800133a:	f001 fe55 	bl	8002fe8 <HAL_TIM_Base_Init>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_TIM10_Init+0x38>
		Error_Handler();
 8001344:	f000 f8a6 	bl	8001494 <Error_Handler>
	}
	/* USER CODE BEGIN TIM10_Init 2 */

	/* USER CODE END TIM10_Init 2 */

}
 8001348:	bf00      	nop
 800134a:	bd80      	pop	{r7, pc}
 800134c:	200000e4 	.word	0x200000e4
 8001350:	40014400 	.word	0x40014400

08001354 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001358:	4b11      	ldr	r3, [pc, #68]	@ (80013a0 <MX_USART1_UART_Init+0x4c>)
 800135a:	4a12      	ldr	r2, [pc, #72]	@ (80013a4 <MX_USART1_UART_Init+0x50>)
 800135c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800135e:	4b10      	ldr	r3, [pc, #64]	@ (80013a0 <MX_USART1_UART_Init+0x4c>)
 8001360:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001364:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001366:	4b0e      	ldr	r3, [pc, #56]	@ (80013a0 <MX_USART1_UART_Init+0x4c>)
 8001368:	2200      	movs	r2, #0
 800136a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800136c:	4b0c      	ldr	r3, [pc, #48]	@ (80013a0 <MX_USART1_UART_Init+0x4c>)
 800136e:	2200      	movs	r2, #0
 8001370:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001372:	4b0b      	ldr	r3, [pc, #44]	@ (80013a0 <MX_USART1_UART_Init+0x4c>)
 8001374:	2200      	movs	r2, #0
 8001376:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001378:	4b09      	ldr	r3, [pc, #36]	@ (80013a0 <MX_USART1_UART_Init+0x4c>)
 800137a:	220c      	movs	r2, #12
 800137c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800137e:	4b08      	ldr	r3, [pc, #32]	@ (80013a0 <MX_USART1_UART_Init+0x4c>)
 8001380:	2200      	movs	r2, #0
 8001382:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001384:	4b06      	ldr	r3, [pc, #24]	@ (80013a0 <MX_USART1_UART_Init+0x4c>)
 8001386:	2200      	movs	r2, #0
 8001388:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800138a:	4805      	ldr	r0, [pc, #20]	@ (80013a0 <MX_USART1_UART_Init+0x4c>)
 800138c:	f002 fa66 	bl	800385c <HAL_UART_Init>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8001396:	f000 f87d 	bl	8001494 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	2000012c 	.word	0x2000012c
 80013a4:	40011000 	.word	0x40011000

080013a8 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80013ac:	4b11      	ldr	r3, [pc, #68]	@ (80013f4 <MX_USART2_UART_Init+0x4c>)
 80013ae:	4a12      	ldr	r2, [pc, #72]	@ (80013f8 <MX_USART2_UART_Init+0x50>)
 80013b0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 80013b2:	4b10      	ldr	r3, [pc, #64]	@ (80013f4 <MX_USART2_UART_Init+0x4c>)
 80013b4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80013b8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013ba:	4b0e      	ldr	r3, [pc, #56]	@ (80013f4 <MX_USART2_UART_Init+0x4c>)
 80013bc:	2200      	movs	r2, #0
 80013be:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80013c0:	4b0c      	ldr	r3, [pc, #48]	@ (80013f4 <MX_USART2_UART_Init+0x4c>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80013c6:	4b0b      	ldr	r3, [pc, #44]	@ (80013f4 <MX_USART2_UART_Init+0x4c>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80013cc:	4b09      	ldr	r3, [pc, #36]	@ (80013f4 <MX_USART2_UART_Init+0x4c>)
 80013ce:	220c      	movs	r2, #12
 80013d0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013d2:	4b08      	ldr	r3, [pc, #32]	@ (80013f4 <MX_USART2_UART_Init+0x4c>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013d8:	4b06      	ldr	r3, [pc, #24]	@ (80013f4 <MX_USART2_UART_Init+0x4c>)
 80013da:	2200      	movs	r2, #0
 80013dc:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80013de:	4805      	ldr	r0, [pc, #20]	@ (80013f4 <MX_USART2_UART_Init+0x4c>)
 80013e0:	f002 fa3c 	bl	800385c <HAL_UART_Init>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80013ea:	f000 f853 	bl	8001494 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20000174 	.word	0x20000174
 80013f8:	40004400 	.word	0x40004400

080013fc <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	607b      	str	r3, [r7, #4]
 8001406:	4b0c      	ldr	r3, [pc, #48]	@ (8001438 <MX_DMA_Init+0x3c>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140a:	4a0b      	ldr	r2, [pc, #44]	@ (8001438 <MX_DMA_Init+0x3c>)
 800140c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001410:	6313      	str	r3, [r2, #48]	@ 0x30
 8001412:	4b09      	ldr	r3, [pc, #36]	@ (8001438 <MX_DMA_Init+0x3c>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001416:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800141a:	607b      	str	r3, [r7, #4]
 800141c:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800141e:	2200      	movs	r2, #0
 8001420:	2105      	movs	r1, #5
 8001422:	2011      	movs	r0, #17
 8001424:	f000 fba6 	bl	8001b74 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001428:	2011      	movs	r0, #17
 800142a:	f000 fbbf 	bl	8001bac <HAL_NVIC_EnableIRQ>

}
 800142e:	bf00      	nop
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	40023800 	.word	0x40023800

0800143c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	607b      	str	r3, [r7, #4]
 8001446:	4b09      	ldr	r3, [pc, #36]	@ (800146c <MX_GPIO_Init+0x30>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144a:	4a08      	ldr	r2, [pc, #32]	@ (800146c <MX_GPIO_Init+0x30>)
 800144c:	f043 0301 	orr.w	r3, r3, #1
 8001450:	6313      	str	r3, [r2, #48]	@ 0x30
 8001452:	4b06      	ldr	r3, [pc, #24]	@ (800146c <MX_GPIO_Init+0x30>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	607b      	str	r3, [r7, #4]
 800145c:	687b      	ldr	r3, [r7, #4]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800145e:	bf00      	nop
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	40023800 	.word	0x40023800

08001470 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM9) {
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a04      	ldr	r2, [pc, #16]	@ (8001490 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d101      	bne.n	8001486 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8001482:	f000 fa7b 	bl	800197c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8001486:	bf00      	nop
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40014000 	.word	0x40014000

08001494 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001498:	b672      	cpsid	i
}
 800149a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800149c:	bf00      	nop
 800149e:	e7fd      	b.n	800149c <Error_Handler+0x8>

080014a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	607b      	str	r3, [r7, #4]
 80014aa:	4b12      	ldr	r3, [pc, #72]	@ (80014f4 <HAL_MspInit+0x54>)
 80014ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ae:	4a11      	ldr	r2, [pc, #68]	@ (80014f4 <HAL_MspInit+0x54>)
 80014b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80014b6:	4b0f      	ldr	r3, [pc, #60]	@ (80014f4 <HAL_MspInit+0x54>)
 80014b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014be:	607b      	str	r3, [r7, #4]
 80014c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	603b      	str	r3, [r7, #0]
 80014c6:	4b0b      	ldr	r3, [pc, #44]	@ (80014f4 <HAL_MspInit+0x54>)
 80014c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ca:	4a0a      	ldr	r2, [pc, #40]	@ (80014f4 <HAL_MspInit+0x54>)
 80014cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80014d2:	4b08      	ldr	r3, [pc, #32]	@ (80014f4 <HAL_MspInit+0x54>)
 80014d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014da:	603b      	str	r3, [r7, #0]
 80014dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014de:	2200      	movs	r2, #0
 80014e0:	210f      	movs	r1, #15
 80014e2:	f06f 0001 	mvn.w	r0, #1
 80014e6:	f000 fb45 	bl	8001b74 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ea:	bf00      	nop
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40023800 	.word	0x40023800

080014f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001508:	d10e      	bne.n	8001528 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	60fb      	str	r3, [r7, #12]
 800150e:	4b16      	ldr	r3, [pc, #88]	@ (8001568 <HAL_TIM_Base_MspInit+0x70>)
 8001510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001512:	4a15      	ldr	r2, [pc, #84]	@ (8001568 <HAL_TIM_Base_MspInit+0x70>)
 8001514:	f043 0301 	orr.w	r3, r3, #1
 8001518:	6413      	str	r3, [r2, #64]	@ 0x40
 800151a:	4b13      	ldr	r3, [pc, #76]	@ (8001568 <HAL_TIM_Base_MspInit+0x70>)
 800151c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001526:	e01a      	b.n	800155e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM10)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a0f      	ldr	r2, [pc, #60]	@ (800156c <HAL_TIM_Base_MspInit+0x74>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d115      	bne.n	800155e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	60bb      	str	r3, [r7, #8]
 8001536:	4b0c      	ldr	r3, [pc, #48]	@ (8001568 <HAL_TIM_Base_MspInit+0x70>)
 8001538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800153a:	4a0b      	ldr	r2, [pc, #44]	@ (8001568 <HAL_TIM_Base_MspInit+0x70>)
 800153c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001540:	6453      	str	r3, [r2, #68]	@ 0x44
 8001542:	4b09      	ldr	r3, [pc, #36]	@ (8001568 <HAL_TIM_Base_MspInit+0x70>)
 8001544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001546:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800154a:	60bb      	str	r3, [r7, #8]
 800154c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 800154e:	2200      	movs	r2, #0
 8001550:	2105      	movs	r1, #5
 8001552:	2019      	movs	r0, #25
 8001554:	f000 fb0e 	bl	8001b74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001558:	2019      	movs	r0, #25
 800155a:	f000 fb27 	bl	8001bac <HAL_NVIC_EnableIRQ>
}
 800155e:	bf00      	nop
 8001560:	3710      	adds	r7, #16
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40023800 	.word	0x40023800
 800156c:	40014400 	.word	0x40014400

08001570 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b08c      	sub	sp, #48	@ 0x30
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001578:	f107 031c 	add.w	r3, r7, #28
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	60da      	str	r2, [r3, #12]
 8001586:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a4d      	ldr	r2, [pc, #308]	@ (80016c4 <HAL_UART_MspInit+0x154>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d12d      	bne.n	80015ee <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	61bb      	str	r3, [r7, #24]
 8001596:	4b4c      	ldr	r3, [pc, #304]	@ (80016c8 <HAL_UART_MspInit+0x158>)
 8001598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800159a:	4a4b      	ldr	r2, [pc, #300]	@ (80016c8 <HAL_UART_MspInit+0x158>)
 800159c:	f043 0310 	orr.w	r3, r3, #16
 80015a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80015a2:	4b49      	ldr	r3, [pc, #292]	@ (80016c8 <HAL_UART_MspInit+0x158>)
 80015a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015a6:	f003 0310 	and.w	r3, r3, #16
 80015aa:	61bb      	str	r3, [r7, #24]
 80015ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	617b      	str	r3, [r7, #20]
 80015b2:	4b45      	ldr	r3, [pc, #276]	@ (80016c8 <HAL_UART_MspInit+0x158>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b6:	4a44      	ldr	r2, [pc, #272]	@ (80016c8 <HAL_UART_MspInit+0x158>)
 80015b8:	f043 0301 	orr.w	r3, r3, #1
 80015bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80015be:	4b42      	ldr	r3, [pc, #264]	@ (80016c8 <HAL_UART_MspInit+0x158>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	617b      	str	r3, [r7, #20]
 80015c8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80015ca:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80015ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d0:	2302      	movs	r3, #2
 80015d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d8:	2303      	movs	r3, #3
 80015da:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015dc:	2307      	movs	r3, #7
 80015de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e0:	f107 031c 	add.w	r3, r7, #28
 80015e4:	4619      	mov	r1, r3
 80015e6:	4839      	ldr	r0, [pc, #228]	@ (80016cc <HAL_UART_MspInit+0x15c>)
 80015e8:	f000 fef0 	bl	80023cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015ec:	e066      	b.n	80016bc <HAL_UART_MspInit+0x14c>
  else if(huart->Instance==USART2)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a37      	ldr	r2, [pc, #220]	@ (80016d0 <HAL_UART_MspInit+0x160>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d161      	bne.n	80016bc <HAL_UART_MspInit+0x14c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80015f8:	2300      	movs	r3, #0
 80015fa:	613b      	str	r3, [r7, #16]
 80015fc:	4b32      	ldr	r3, [pc, #200]	@ (80016c8 <HAL_UART_MspInit+0x158>)
 80015fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001600:	4a31      	ldr	r2, [pc, #196]	@ (80016c8 <HAL_UART_MspInit+0x158>)
 8001602:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001606:	6413      	str	r3, [r2, #64]	@ 0x40
 8001608:	4b2f      	ldr	r3, [pc, #188]	@ (80016c8 <HAL_UART_MspInit+0x158>)
 800160a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001610:	613b      	str	r3, [r7, #16]
 8001612:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001614:	2300      	movs	r3, #0
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	4b2b      	ldr	r3, [pc, #172]	@ (80016c8 <HAL_UART_MspInit+0x158>)
 800161a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161c:	4a2a      	ldr	r2, [pc, #168]	@ (80016c8 <HAL_UART_MspInit+0x158>)
 800161e:	f043 0301 	orr.w	r3, r3, #1
 8001622:	6313      	str	r3, [r2, #48]	@ 0x30
 8001624:	4b28      	ldr	r3, [pc, #160]	@ (80016c8 <HAL_UART_MspInit+0x158>)
 8001626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001628:	f003 0301 	and.w	r3, r3, #1
 800162c:	60fb      	str	r3, [r7, #12]
 800162e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001630:	230c      	movs	r3, #12
 8001632:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001634:	2302      	movs	r3, #2
 8001636:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001638:	2300      	movs	r3, #0
 800163a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163c:	2303      	movs	r3, #3
 800163e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001640:	2307      	movs	r3, #7
 8001642:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001644:	f107 031c 	add.w	r3, r7, #28
 8001648:	4619      	mov	r1, r3
 800164a:	4820      	ldr	r0, [pc, #128]	@ (80016cc <HAL_UART_MspInit+0x15c>)
 800164c:	f000 febe 	bl	80023cc <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001650:	4b20      	ldr	r3, [pc, #128]	@ (80016d4 <HAL_UART_MspInit+0x164>)
 8001652:	4a21      	ldr	r2, [pc, #132]	@ (80016d8 <HAL_UART_MspInit+0x168>)
 8001654:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001656:	4b1f      	ldr	r3, [pc, #124]	@ (80016d4 <HAL_UART_MspInit+0x164>)
 8001658:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800165c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800165e:	4b1d      	ldr	r3, [pc, #116]	@ (80016d4 <HAL_UART_MspInit+0x164>)
 8001660:	2240      	movs	r2, #64	@ 0x40
 8001662:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001664:	4b1b      	ldr	r3, [pc, #108]	@ (80016d4 <HAL_UART_MspInit+0x164>)
 8001666:	2200      	movs	r2, #0
 8001668:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800166a:	4b1a      	ldr	r3, [pc, #104]	@ (80016d4 <HAL_UART_MspInit+0x164>)
 800166c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001670:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001672:	4b18      	ldr	r3, [pc, #96]	@ (80016d4 <HAL_UART_MspInit+0x164>)
 8001674:	2200      	movs	r2, #0
 8001676:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001678:	4b16      	ldr	r3, [pc, #88]	@ (80016d4 <HAL_UART_MspInit+0x164>)
 800167a:	2200      	movs	r2, #0
 800167c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800167e:	4b15      	ldr	r3, [pc, #84]	@ (80016d4 <HAL_UART_MspInit+0x164>)
 8001680:	2200      	movs	r2, #0
 8001682:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001684:	4b13      	ldr	r3, [pc, #76]	@ (80016d4 <HAL_UART_MspInit+0x164>)
 8001686:	2200      	movs	r2, #0
 8001688:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800168a:	4b12      	ldr	r3, [pc, #72]	@ (80016d4 <HAL_UART_MspInit+0x164>)
 800168c:	2200      	movs	r2, #0
 800168e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001690:	4810      	ldr	r0, [pc, #64]	@ (80016d4 <HAL_UART_MspInit+0x164>)
 8001692:	f000 fa99 	bl	8001bc8 <HAL_DMA_Init>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <HAL_UART_MspInit+0x130>
      Error_Handler();
 800169c:	f7ff fefa 	bl	8001494 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	4a0c      	ldr	r2, [pc, #48]	@ (80016d4 <HAL_UART_MspInit+0x164>)
 80016a4:	639a      	str	r2, [r3, #56]	@ 0x38
 80016a6:	4a0b      	ldr	r2, [pc, #44]	@ (80016d4 <HAL_UART_MspInit+0x164>)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80016ac:	2200      	movs	r2, #0
 80016ae:	2105      	movs	r1, #5
 80016b0:	2026      	movs	r0, #38	@ 0x26
 80016b2:	f000 fa5f 	bl	8001b74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80016b6:	2026      	movs	r0, #38	@ 0x26
 80016b8:	f000 fa78 	bl	8001bac <HAL_NVIC_EnableIRQ>
}
 80016bc:	bf00      	nop
 80016be:	3730      	adds	r7, #48	@ 0x30
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40011000 	.word	0x40011000
 80016c8:	40023800 	.word	0x40023800
 80016cc:	40020000 	.word	0x40020000
 80016d0:	40004400 	.word	0x40004400
 80016d4:	200001bc 	.word	0x200001bc
 80016d8:	400260a0 	.word	0x400260a0

080016dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b08c      	sub	sp, #48	@ 0x30
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80016e4:	2300      	movs	r3, #0
 80016e6:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80016e8:	2300      	movs	r3, #0
 80016ea:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 80016ec:	2300      	movs	r3, #0
 80016ee:	60bb      	str	r3, [r7, #8]
 80016f0:	4b2e      	ldr	r3, [pc, #184]	@ (80017ac <HAL_InitTick+0xd0>)
 80016f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016f4:	4a2d      	ldr	r2, [pc, #180]	@ (80017ac <HAL_InitTick+0xd0>)
 80016f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016fa:	6453      	str	r3, [r2, #68]	@ 0x44
 80016fc:	4b2b      	ldr	r3, [pc, #172]	@ (80017ac <HAL_InitTick+0xd0>)
 80016fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001700:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001704:	60bb      	str	r3, [r7, #8]
 8001706:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001708:	f107 020c 	add.w	r2, r7, #12
 800170c:	f107 0310 	add.w	r3, r7, #16
 8001710:	4611      	mov	r1, r2
 8001712:	4618      	mov	r0, r3
 8001714:	f001 fc36 	bl	8002f84 <HAL_RCC_GetClockConfig>
  /* Compute TIM9 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001718:	f001 fc20 	bl	8002f5c <HAL_RCC_GetPCLK2Freq>
 800171c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800171e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001720:	4a23      	ldr	r2, [pc, #140]	@ (80017b0 <HAL_InitTick+0xd4>)
 8001722:	fba2 2303 	umull	r2, r3, r2, r3
 8001726:	0c9b      	lsrs	r3, r3, #18
 8001728:	3b01      	subs	r3, #1
 800172a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 800172c:	4b21      	ldr	r3, [pc, #132]	@ (80017b4 <HAL_InitTick+0xd8>)
 800172e:	4a22      	ldr	r2, [pc, #136]	@ (80017b8 <HAL_InitTick+0xdc>)
 8001730:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 8001732:	4b20      	ldr	r3, [pc, #128]	@ (80017b4 <HAL_InitTick+0xd8>)
 8001734:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001738:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 800173a:	4a1e      	ldr	r2, [pc, #120]	@ (80017b4 <HAL_InitTick+0xd8>)
 800173c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800173e:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 8001740:	4b1c      	ldr	r3, [pc, #112]	@ (80017b4 <HAL_InitTick+0xd8>)
 8001742:	2200      	movs	r2, #0
 8001744:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001746:	4b1b      	ldr	r3, [pc, #108]	@ (80017b4 <HAL_InitTick+0xd8>)
 8001748:	2200      	movs	r2, #0
 800174a:	609a      	str	r2, [r3, #8]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800174c:	4b19      	ldr	r3, [pc, #100]	@ (80017b4 <HAL_InitTick+0xd8>)
 800174e:	2200      	movs	r2, #0
 8001750:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim9);
 8001752:	4818      	ldr	r0, [pc, #96]	@ (80017b4 <HAL_InitTick+0xd8>)
 8001754:	f001 fc48 	bl	8002fe8 <HAL_TIM_Base_Init>
 8001758:	4603      	mov	r3, r0
 800175a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800175e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001762:	2b00      	cmp	r3, #0
 8001764:	d11b      	bne.n	800179e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim9);
 8001766:	4813      	ldr	r0, [pc, #76]	@ (80017b4 <HAL_InitTick+0xd8>)
 8001768:	f001 fc8e 	bl	8003088 <HAL_TIM_Base_Start_IT>
 800176c:	4603      	mov	r3, r0
 800176e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001772:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001776:	2b00      	cmp	r3, #0
 8001778:	d111      	bne.n	800179e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM9 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800177a:	2018      	movs	r0, #24
 800177c:	f000 fa16 	bl	8001bac <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2b0f      	cmp	r3, #15
 8001784:	d808      	bhi.n	8001798 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority, 0U);
 8001786:	2200      	movs	r2, #0
 8001788:	6879      	ldr	r1, [r7, #4]
 800178a:	2018      	movs	r0, #24
 800178c:	f000 f9f2 	bl	8001b74 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001790:	4a0a      	ldr	r2, [pc, #40]	@ (80017bc <HAL_InitTick+0xe0>)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6013      	str	r3, [r2, #0]
 8001796:	e002      	b.n	800179e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800179e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3730      	adds	r7, #48	@ 0x30
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40023800 	.word	0x40023800
 80017b0:	431bde83 	.word	0x431bde83
 80017b4:	20000248 	.word	0x20000248
 80017b8:	40014000 	.word	0x40014000
 80017bc:	20000004 	.word	0x20000004

080017c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017c4:	bf00      	nop
 80017c6:	e7fd      	b.n	80017c4 <NMI_Handler+0x4>

080017c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017cc:	bf00      	nop
 80017ce:	e7fd      	b.n	80017cc <HardFault_Handler+0x4>

080017d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017d4:	bf00      	nop
 80017d6:	e7fd      	b.n	80017d4 <MemManage_Handler+0x4>

080017d8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017dc:	bf00      	nop
 80017de:	e7fd      	b.n	80017dc <BusFault_Handler+0x4>

080017e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017e4:	bf00      	nop
 80017e6:	e7fd      	b.n	80017e4 <UsageFault_Handler+0x4>

080017e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017ec:	bf00      	nop
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
	...

080017f8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80017fc:	4802      	ldr	r0, [pc, #8]	@ (8001808 <DMA1_Stream6_IRQHandler+0x10>)
 80017fe:	f000 fb7b 	bl	8001ef8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	200001bc 	.word	0x200001bc

0800180c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8001810:	4802      	ldr	r0, [pc, #8]	@ (800181c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001812:	f001 fc9b 	bl	800314c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	20000248 	.word	0x20000248

08001820 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	ulStatsTimerTicks++;
 8001824:	4b04      	ldr	r3, [pc, #16]	@ (8001838 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	3301      	adds	r3, #1
 800182a:	4a03      	ldr	r2, [pc, #12]	@ (8001838 <TIM1_UP_TIM10_IRQHandler+0x18>)
 800182c:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 800182e:	4803      	ldr	r0, [pc, #12]	@ (800183c <TIM1_UP_TIM10_IRQHandler+0x1c>)
 8001830:	f001 fc8c 	bl	800314c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001834:	bf00      	nop
 8001836:	bd80      	pop	{r7, pc}
 8001838:	20000098 	.word	0x20000098
 800183c:	200000e4 	.word	0x200000e4

08001840 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001844:	4802      	ldr	r0, [pc, #8]	@ (8001850 <USART2_IRQHandler+0x10>)
 8001846:	f002 f8c9 	bl	80039dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	20000174 	.word	0x20000174

08001854 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800185c:	4a14      	ldr	r2, [pc, #80]	@ (80018b0 <_sbrk+0x5c>)
 800185e:	4b15      	ldr	r3, [pc, #84]	@ (80018b4 <_sbrk+0x60>)
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001868:	4b13      	ldr	r3, [pc, #76]	@ (80018b8 <_sbrk+0x64>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d102      	bne.n	8001876 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001870:	4b11      	ldr	r3, [pc, #68]	@ (80018b8 <_sbrk+0x64>)
 8001872:	4a12      	ldr	r2, [pc, #72]	@ (80018bc <_sbrk+0x68>)
 8001874:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001876:	4b10      	ldr	r3, [pc, #64]	@ (80018b8 <_sbrk+0x64>)
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4413      	add	r3, r2
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	429a      	cmp	r2, r3
 8001882:	d207      	bcs.n	8001894 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001884:	f006 fc9e 	bl	80081c4 <__errno>
 8001888:	4603      	mov	r3, r0
 800188a:	220c      	movs	r2, #12
 800188c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800188e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001892:	e009      	b.n	80018a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001894:	4b08      	ldr	r3, [pc, #32]	@ (80018b8 <_sbrk+0x64>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800189a:	4b07      	ldr	r3, [pc, #28]	@ (80018b8 <_sbrk+0x64>)
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4413      	add	r3, r2
 80018a2:	4a05      	ldr	r2, [pc, #20]	@ (80018b8 <_sbrk+0x64>)
 80018a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018a6:	68fb      	ldr	r3, [r7, #12]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3718      	adds	r7, #24
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	20018000 	.word	0x20018000
 80018b4:	00000400 	.word	0x00000400
 80018b8:	20000290 	.word	0x20000290
 80018bc:	20004e30 	.word	0x20004e30

080018c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018c4:	4b06      	ldr	r3, [pc, #24]	@ (80018e0 <SystemInit+0x20>)
 80018c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018ca:	4a05      	ldr	r2, [pc, #20]	@ (80018e0 <SystemInit+0x20>)
 80018cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018d4:	bf00      	nop
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	e000ed00 	.word	0xe000ed00

080018e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80018e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800191c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80018e8:	f7ff ffea 	bl	80018c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018ec:	480c      	ldr	r0, [pc, #48]	@ (8001920 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018ee:	490d      	ldr	r1, [pc, #52]	@ (8001924 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001928 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018f4:	e002      	b.n	80018fc <LoopCopyDataInit>

080018f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018fa:	3304      	adds	r3, #4

080018fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001900:	d3f9      	bcc.n	80018f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001902:	4a0a      	ldr	r2, [pc, #40]	@ (800192c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001904:	4c0a      	ldr	r4, [pc, #40]	@ (8001930 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001906:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001908:	e001      	b.n	800190e <LoopFillZerobss>

0800190a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800190a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800190c:	3204      	adds	r2, #4

0800190e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800190e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001910:	d3fb      	bcc.n	800190a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001912:	f006 fc5d 	bl	80081d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001916:	f7ff fbb5 	bl	8001084 <main>
  bx  lr    
 800191a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800191c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001920:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001924:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001928:	08008c94 	.word	0x08008c94
  ldr r2, =_sbss
 800192c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001930:	20004e2c 	.word	0x20004e2c

08001934 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001934:	e7fe      	b.n	8001934 <ADC_IRQHandler>
	...

08001938 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800193c:	4b0e      	ldr	r3, [pc, #56]	@ (8001978 <HAL_Init+0x40>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a0d      	ldr	r2, [pc, #52]	@ (8001978 <HAL_Init+0x40>)
 8001942:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001946:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001948:	4b0b      	ldr	r3, [pc, #44]	@ (8001978 <HAL_Init+0x40>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a0a      	ldr	r2, [pc, #40]	@ (8001978 <HAL_Init+0x40>)
 800194e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001952:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001954:	4b08      	ldr	r3, [pc, #32]	@ (8001978 <HAL_Init+0x40>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a07      	ldr	r2, [pc, #28]	@ (8001978 <HAL_Init+0x40>)
 800195a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800195e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001960:	2003      	movs	r0, #3
 8001962:	f000 f8fc 	bl	8001b5e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001966:	200f      	movs	r0, #15
 8001968:	f7ff feb8 	bl	80016dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800196c:	f7ff fd98 	bl	80014a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40023c00 	.word	0x40023c00

0800197c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001980:	4b06      	ldr	r3, [pc, #24]	@ (800199c <HAL_IncTick+0x20>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	461a      	mov	r2, r3
 8001986:	4b06      	ldr	r3, [pc, #24]	@ (80019a0 <HAL_IncTick+0x24>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4413      	add	r3, r2
 800198c:	4a04      	ldr	r2, [pc, #16]	@ (80019a0 <HAL_IncTick+0x24>)
 800198e:	6013      	str	r3, [r2, #0]
}
 8001990:	bf00      	nop
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	20000008 	.word	0x20000008
 80019a0:	20000294 	.word	0x20000294

080019a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  return uwTick;
 80019a8:	4b03      	ldr	r3, [pc, #12]	@ (80019b8 <HAL_GetTick+0x14>)
 80019aa:	681b      	ldr	r3, [r3, #0]
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	20000294 	.word	0x20000294

080019bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019c4:	f7ff ffee 	bl	80019a4 <HAL_GetTick>
 80019c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80019d4:	d005      	beq.n	80019e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001a00 <HAL_Delay+0x44>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	461a      	mov	r2, r3
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	4413      	add	r3, r2
 80019e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019e2:	bf00      	nop
 80019e4:	f7ff ffde 	bl	80019a4 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	68fa      	ldr	r2, [r7, #12]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d8f7      	bhi.n	80019e4 <HAL_Delay+0x28>
  {
  }
}
 80019f4:	bf00      	nop
 80019f6:	bf00      	nop
 80019f8:	3710      	adds	r7, #16
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	20000008 	.word	0x20000008

08001a04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f003 0307 	and.w	r3, r3, #7
 8001a12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a14:	4b0c      	ldr	r3, [pc, #48]	@ (8001a48 <__NVIC_SetPriorityGrouping+0x44>)
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a1a:	68ba      	ldr	r2, [r7, #8]
 8001a1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a20:	4013      	ands	r3, r2
 8001a22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a36:	4a04      	ldr	r2, [pc, #16]	@ (8001a48 <__NVIC_SetPriorityGrouping+0x44>)
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	60d3      	str	r3, [r2, #12]
}
 8001a3c:	bf00      	nop
 8001a3e:	3714      	adds	r7, #20
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	e000ed00 	.word	0xe000ed00

08001a4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a50:	4b04      	ldr	r3, [pc, #16]	@ (8001a64 <__NVIC_GetPriorityGrouping+0x18>)
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	0a1b      	lsrs	r3, r3, #8
 8001a56:	f003 0307 	and.w	r3, r3, #7
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr
 8001a64:	e000ed00 	.word	0xe000ed00

08001a68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	db0b      	blt.n	8001a92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a7a:	79fb      	ldrb	r3, [r7, #7]
 8001a7c:	f003 021f 	and.w	r2, r3, #31
 8001a80:	4907      	ldr	r1, [pc, #28]	@ (8001aa0 <__NVIC_EnableIRQ+0x38>)
 8001a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a86:	095b      	lsrs	r3, r3, #5
 8001a88:	2001      	movs	r0, #1
 8001a8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a92:	bf00      	nop
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	e000e100 	.word	0xe000e100

08001aa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	4603      	mov	r3, r0
 8001aac:	6039      	str	r1, [r7, #0]
 8001aae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	db0a      	blt.n	8001ace <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	b2da      	uxtb	r2, r3
 8001abc:	490c      	ldr	r1, [pc, #48]	@ (8001af0 <__NVIC_SetPriority+0x4c>)
 8001abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac2:	0112      	lsls	r2, r2, #4
 8001ac4:	b2d2      	uxtb	r2, r2
 8001ac6:	440b      	add	r3, r1
 8001ac8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001acc:	e00a      	b.n	8001ae4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	b2da      	uxtb	r2, r3
 8001ad2:	4908      	ldr	r1, [pc, #32]	@ (8001af4 <__NVIC_SetPriority+0x50>)
 8001ad4:	79fb      	ldrb	r3, [r7, #7]
 8001ad6:	f003 030f 	and.w	r3, r3, #15
 8001ada:	3b04      	subs	r3, #4
 8001adc:	0112      	lsls	r2, r2, #4
 8001ade:	b2d2      	uxtb	r2, r2
 8001ae0:	440b      	add	r3, r1
 8001ae2:	761a      	strb	r2, [r3, #24]
}
 8001ae4:	bf00      	nop
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr
 8001af0:	e000e100 	.word	0xe000e100
 8001af4:	e000ed00 	.word	0xe000ed00

08001af8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b089      	sub	sp, #36	@ 0x24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f003 0307 	and.w	r3, r3, #7
 8001b0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	f1c3 0307 	rsb	r3, r3, #7
 8001b12:	2b04      	cmp	r3, #4
 8001b14:	bf28      	it	cs
 8001b16:	2304      	movcs	r3, #4
 8001b18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	3304      	adds	r3, #4
 8001b1e:	2b06      	cmp	r3, #6
 8001b20:	d902      	bls.n	8001b28 <NVIC_EncodePriority+0x30>
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	3b03      	subs	r3, #3
 8001b26:	e000      	b.n	8001b2a <NVIC_EncodePriority+0x32>
 8001b28:	2300      	movs	r3, #0
 8001b2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b2c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	43da      	mvns	r2, r3
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	401a      	ands	r2, r3
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b40:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	fa01 f303 	lsl.w	r3, r1, r3
 8001b4a:	43d9      	mvns	r1, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b50:	4313      	orrs	r3, r2
         );
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3724      	adds	r7, #36	@ 0x24
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr

08001b5e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b082      	sub	sp, #8
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f7ff ff4c 	bl	8001a04 <__NVIC_SetPriorityGrouping>
}
 8001b6c:	bf00      	nop
 8001b6e:	3708      	adds	r7, #8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	60b9      	str	r1, [r7, #8]
 8001b7e:	607a      	str	r2, [r7, #4]
 8001b80:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b82:	2300      	movs	r3, #0
 8001b84:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b86:	f7ff ff61 	bl	8001a4c <__NVIC_GetPriorityGrouping>
 8001b8a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	68b9      	ldr	r1, [r7, #8]
 8001b90:	6978      	ldr	r0, [r7, #20]
 8001b92:	f7ff ffb1 	bl	8001af8 <NVIC_EncodePriority>
 8001b96:	4602      	mov	r2, r0
 8001b98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b9c:	4611      	mov	r1, r2
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff ff80 	bl	8001aa4 <__NVIC_SetPriority>
}
 8001ba4:	bf00      	nop
 8001ba6:	3718      	adds	r7, #24
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7ff ff54 	bl	8001a68 <__NVIC_EnableIRQ>
}
 8001bc0:	bf00      	nop
 8001bc2:	3708      	adds	r7, #8
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b086      	sub	sp, #24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001bd4:	f7ff fee6 	bl	80019a4 <HAL_GetTick>
 8001bd8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d101      	bne.n	8001be4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e099      	b.n	8001d18 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2202      	movs	r2, #2
 8001be8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f022 0201 	bic.w	r2, r2, #1
 8001c02:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c04:	e00f      	b.n	8001c26 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c06:	f7ff fecd 	bl	80019a4 <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	2b05      	cmp	r3, #5
 8001c12:	d908      	bls.n	8001c26 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2220      	movs	r2, #32
 8001c18:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2203      	movs	r2, #3
 8001c1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e078      	b.n	8001d18 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0301 	and.w	r3, r3, #1
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d1e8      	bne.n	8001c06 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c3c:	697a      	ldr	r2, [r7, #20]
 8001c3e:	4b38      	ldr	r3, [pc, #224]	@ (8001d20 <HAL_DMA_Init+0x158>)
 8001c40:	4013      	ands	r3, r2
 8001c42:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685a      	ldr	r2, [r3, #4]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c52:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	691b      	ldr	r3, [r3, #16]
 8001c58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6a1b      	ldr	r3, [r3, #32]
 8001c70:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c72:	697a      	ldr	r2, [r7, #20]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c7c:	2b04      	cmp	r3, #4
 8001c7e:	d107      	bne.n	8001c90 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	697a      	ldr	r2, [r7, #20]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	697a      	ldr	r2, [r7, #20]
 8001c96:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	695b      	ldr	r3, [r3, #20]
 8001c9e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	f023 0307 	bic.w	r3, r3, #7
 8001ca6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cac:	697a      	ldr	r2, [r7, #20]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cb6:	2b04      	cmp	r3, #4
 8001cb8:	d117      	bne.n	8001cea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cbe:	697a      	ldr	r2, [r7, #20]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d00e      	beq.n	8001cea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f000 fb01 	bl	80022d4 <DMA_CheckFifoParam>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d008      	beq.n	8001cea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2240      	movs	r2, #64	@ 0x40
 8001cdc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e016      	b.n	8001d18 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	697a      	ldr	r2, [r7, #20]
 8001cf0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f000 fab8 	bl	8002268 <DMA_CalcBaseAndBitshift>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d00:	223f      	movs	r2, #63	@ 0x3f
 8001d02:	409a      	lsls	r2, r3
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2201      	movs	r2, #1
 8001d12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001d16:	2300      	movs	r3, #0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3718      	adds	r7, #24
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	f010803f 	.word	0xf010803f

08001d24 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	60b9      	str	r1, [r7, #8]
 8001d2e:	607a      	str	r2, [r7, #4]
 8001d30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d32:	2300      	movs	r3, #0
 8001d34:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d3a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d101      	bne.n	8001d4a <HAL_DMA_Start_IT+0x26>
 8001d46:	2302      	movs	r3, #2
 8001d48:	e040      	b.n	8001dcc <HAL_DMA_Start_IT+0xa8>
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d12f      	bne.n	8001dbe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2202      	movs	r2, #2
 8001d62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	68b9      	ldr	r1, [r7, #8]
 8001d72:	68f8      	ldr	r0, [r7, #12]
 8001d74:	f000 fa4a 	bl	800220c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d7c:	223f      	movs	r2, #63	@ 0x3f
 8001d7e:	409a      	lsls	r2, r3
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f042 0216 	orr.w	r2, r2, #22
 8001d92:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d007      	beq.n	8001dac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f042 0208 	orr.w	r2, r2, #8
 8001daa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f042 0201 	orr.w	r2, r2, #1
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	e005      	b.n	8001dca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001dca:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3718      	adds	r7, #24
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001de0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001de2:	f7ff fddf 	bl	80019a4 <HAL_GetTick>
 8001de6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d008      	beq.n	8001e06 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2280      	movs	r2, #128	@ 0x80
 8001df8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e052      	b.n	8001eac <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f022 0216 	bic.w	r2, r2, #22
 8001e14:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	695a      	ldr	r2, [r3, #20]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001e24:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d103      	bne.n	8001e36 <HAL_DMA_Abort+0x62>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d007      	beq.n	8001e46 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f022 0208 	bic.w	r2, r2, #8
 8001e44:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f022 0201 	bic.w	r2, r2, #1
 8001e54:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e56:	e013      	b.n	8001e80 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e58:	f7ff fda4 	bl	80019a4 <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b05      	cmp	r3, #5
 8001e64:	d90c      	bls.n	8001e80 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2220      	movs	r2, #32
 8001e6a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2203      	movs	r2, #3
 8001e70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e015      	b.n	8001eac <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d1e4      	bne.n	8001e58 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e92:	223f      	movs	r2, #63	@ 0x3f
 8001e94:	409a      	lsls	r2, r3
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001eaa:	2300      	movs	r3, #0
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3710      	adds	r7, #16
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d004      	beq.n	8001ed2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2280      	movs	r2, #128	@ 0x80
 8001ecc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e00c      	b.n	8001eec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2205      	movs	r2, #5
 8001ed6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f022 0201 	bic.w	r2, r2, #1
 8001ee8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b086      	sub	sp, #24
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f00:	2300      	movs	r3, #0
 8001f02:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f04:	4b8e      	ldr	r3, [pc, #568]	@ (8002140 <HAL_DMA_IRQHandler+0x248>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a8e      	ldr	r2, [pc, #568]	@ (8002144 <HAL_DMA_IRQHandler+0x24c>)
 8001f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0e:	0a9b      	lsrs	r3, r3, #10
 8001f10:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f16:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f22:	2208      	movs	r2, #8
 8001f24:	409a      	lsls	r2, r3
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d01a      	beq.n	8001f64 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0304 	and.w	r3, r3, #4
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d013      	beq.n	8001f64 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f022 0204 	bic.w	r2, r2, #4
 8001f4a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f50:	2208      	movs	r2, #8
 8001f52:	409a      	lsls	r2, r3
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f5c:	f043 0201 	orr.w	r2, r3, #1
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f68:	2201      	movs	r2, #1
 8001f6a:	409a      	lsls	r2, r3
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d012      	beq.n	8001f9a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	695b      	ldr	r3, [r3, #20]
 8001f7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d00b      	beq.n	8001f9a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f86:	2201      	movs	r2, #1
 8001f88:	409a      	lsls	r2, r3
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f92:	f043 0202 	orr.w	r2, r3, #2
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f9e:	2204      	movs	r2, #4
 8001fa0:	409a      	lsls	r2, r3
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d012      	beq.n	8001fd0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0302 	and.w	r3, r3, #2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d00b      	beq.n	8001fd0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fbc:	2204      	movs	r2, #4
 8001fbe:	409a      	lsls	r2, r3
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fc8:	f043 0204 	orr.w	r2, r3, #4
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fd4:	2210      	movs	r2, #16
 8001fd6:	409a      	lsls	r2, r3
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d043      	beq.n	8002068 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0308 	and.w	r3, r3, #8
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d03c      	beq.n	8002068 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ff2:	2210      	movs	r2, #16
 8001ff4:	409a      	lsls	r2, r3
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d018      	beq.n	800203a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d108      	bne.n	8002028 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800201a:	2b00      	cmp	r3, #0
 800201c:	d024      	beq.n	8002068 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	4798      	blx	r3
 8002026:	e01f      	b.n	8002068 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800202c:	2b00      	cmp	r3, #0
 800202e:	d01b      	beq.n	8002068 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	4798      	blx	r3
 8002038:	e016      	b.n	8002068 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002044:	2b00      	cmp	r3, #0
 8002046:	d107      	bne.n	8002058 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f022 0208 	bic.w	r2, r2, #8
 8002056:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800205c:	2b00      	cmp	r3, #0
 800205e:	d003      	beq.n	8002068 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800206c:	2220      	movs	r2, #32
 800206e:	409a      	lsls	r2, r3
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	4013      	ands	r3, r2
 8002074:	2b00      	cmp	r3, #0
 8002076:	f000 808f 	beq.w	8002198 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0310 	and.w	r3, r3, #16
 8002084:	2b00      	cmp	r3, #0
 8002086:	f000 8087 	beq.w	8002198 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800208e:	2220      	movs	r2, #32
 8002090:	409a      	lsls	r2, r3
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b05      	cmp	r3, #5
 80020a0:	d136      	bne.n	8002110 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f022 0216 	bic.w	r2, r2, #22
 80020b0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	695a      	ldr	r2, [r3, #20]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80020c0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d103      	bne.n	80020d2 <HAL_DMA_IRQHandler+0x1da>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d007      	beq.n	80020e2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f022 0208 	bic.w	r2, r2, #8
 80020e0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020e6:	223f      	movs	r2, #63	@ 0x3f
 80020e8:	409a      	lsls	r2, r3
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2201      	movs	r2, #1
 80020f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002102:	2b00      	cmp	r3, #0
 8002104:	d07e      	beq.n	8002204 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	4798      	blx	r3
        }
        return;
 800210e:	e079      	b.n	8002204 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d01d      	beq.n	800215a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d10d      	bne.n	8002148 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002130:	2b00      	cmp	r3, #0
 8002132:	d031      	beq.n	8002198 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	4798      	blx	r3
 800213c:	e02c      	b.n	8002198 <HAL_DMA_IRQHandler+0x2a0>
 800213e:	bf00      	nop
 8002140:	20000000 	.word	0x20000000
 8002144:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800214c:	2b00      	cmp	r3, #0
 800214e:	d023      	beq.n	8002198 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	4798      	blx	r3
 8002158:	e01e      	b.n	8002198 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002164:	2b00      	cmp	r3, #0
 8002166:	d10f      	bne.n	8002188 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f022 0210 	bic.w	r2, r2, #16
 8002176:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800218c:	2b00      	cmp	r3, #0
 800218e:	d003      	beq.n	8002198 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800219c:	2b00      	cmp	r3, #0
 800219e:	d032      	beq.n	8002206 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021a4:	f003 0301 	and.w	r3, r3, #1
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d022      	beq.n	80021f2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2205      	movs	r2, #5
 80021b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f022 0201 	bic.w	r2, r2, #1
 80021c2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	3301      	adds	r3, #1
 80021c8:	60bb      	str	r3, [r7, #8]
 80021ca:	697a      	ldr	r2, [r7, #20]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d307      	bcc.n	80021e0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d1f2      	bne.n	80021c4 <HAL_DMA_IRQHandler+0x2cc>
 80021de:	e000      	b.n	80021e2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80021e0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2201      	movs	r2, #1
 80021e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d005      	beq.n	8002206 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	4798      	blx	r3
 8002202:	e000      	b.n	8002206 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002204:	bf00      	nop
    }
  }
}
 8002206:	3718      	adds	r7, #24
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}

0800220c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800220c:	b480      	push	{r7}
 800220e:	b085      	sub	sp, #20
 8002210:	af00      	add	r7, sp, #0
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	607a      	str	r2, [r7, #4]
 8002218:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002228:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	683a      	ldr	r2, [r7, #0]
 8002230:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	2b40      	cmp	r3, #64	@ 0x40
 8002238:	d108      	bne.n	800224c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	68ba      	ldr	r2, [r7, #8]
 8002248:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800224a:	e007      	b.n	800225c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	68ba      	ldr	r2, [r7, #8]
 8002252:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	60da      	str	r2, [r3, #12]
}
 800225c:	bf00      	nop
 800225e:	3714      	adds	r7, #20
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002268:	b480      	push	{r7}
 800226a:	b085      	sub	sp, #20
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	b2db      	uxtb	r3, r3
 8002276:	3b10      	subs	r3, #16
 8002278:	4a14      	ldr	r2, [pc, #80]	@ (80022cc <DMA_CalcBaseAndBitshift+0x64>)
 800227a:	fba2 2303 	umull	r2, r3, r2, r3
 800227e:	091b      	lsrs	r3, r3, #4
 8002280:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002282:	4a13      	ldr	r2, [pc, #76]	@ (80022d0 <DMA_CalcBaseAndBitshift+0x68>)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	4413      	add	r3, r2
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	461a      	mov	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2b03      	cmp	r3, #3
 8002294:	d909      	bls.n	80022aa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800229e:	f023 0303 	bic.w	r3, r3, #3
 80022a2:	1d1a      	adds	r2, r3, #4
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	659a      	str	r2, [r3, #88]	@ 0x58
 80022a8:	e007      	b.n	80022ba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80022b2:	f023 0303 	bic.w	r3, r3, #3
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3714      	adds	r7, #20
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	aaaaaaab 	.word	0xaaaaaaab
 80022d0:	08008c48 	.word	0x08008c48

080022d4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022dc:	2300      	movs	r3, #0
 80022de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022e4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	699b      	ldr	r3, [r3, #24]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d11f      	bne.n	800232e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	2b03      	cmp	r3, #3
 80022f2:	d856      	bhi.n	80023a2 <DMA_CheckFifoParam+0xce>
 80022f4:	a201      	add	r2, pc, #4	@ (adr r2, 80022fc <DMA_CheckFifoParam+0x28>)
 80022f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022fa:	bf00      	nop
 80022fc:	0800230d 	.word	0x0800230d
 8002300:	0800231f 	.word	0x0800231f
 8002304:	0800230d 	.word	0x0800230d
 8002308:	080023a3 	.word	0x080023a3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002310:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d046      	beq.n	80023a6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800231c:	e043      	b.n	80023a6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002322:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002326:	d140      	bne.n	80023aa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800232c:	e03d      	b.n	80023aa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	699b      	ldr	r3, [r3, #24]
 8002332:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002336:	d121      	bne.n	800237c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	2b03      	cmp	r3, #3
 800233c:	d837      	bhi.n	80023ae <DMA_CheckFifoParam+0xda>
 800233e:	a201      	add	r2, pc, #4	@ (adr r2, 8002344 <DMA_CheckFifoParam+0x70>)
 8002340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002344:	08002355 	.word	0x08002355
 8002348:	0800235b 	.word	0x0800235b
 800234c:	08002355 	.word	0x08002355
 8002350:	0800236d 	.word	0x0800236d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	73fb      	strb	r3, [r7, #15]
      break;
 8002358:	e030      	b.n	80023bc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800235e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d025      	beq.n	80023b2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800236a:	e022      	b.n	80023b2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002370:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002374:	d11f      	bne.n	80023b6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800237a:	e01c      	b.n	80023b6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	2b02      	cmp	r3, #2
 8002380:	d903      	bls.n	800238a <DMA_CheckFifoParam+0xb6>
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	2b03      	cmp	r3, #3
 8002386:	d003      	beq.n	8002390 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002388:	e018      	b.n	80023bc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	73fb      	strb	r3, [r7, #15]
      break;
 800238e:	e015      	b.n	80023bc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002394:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d00e      	beq.n	80023ba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	73fb      	strb	r3, [r7, #15]
      break;
 80023a0:	e00b      	b.n	80023ba <DMA_CheckFifoParam+0xe6>
      break;
 80023a2:	bf00      	nop
 80023a4:	e00a      	b.n	80023bc <DMA_CheckFifoParam+0xe8>
      break;
 80023a6:	bf00      	nop
 80023a8:	e008      	b.n	80023bc <DMA_CheckFifoParam+0xe8>
      break;
 80023aa:	bf00      	nop
 80023ac:	e006      	b.n	80023bc <DMA_CheckFifoParam+0xe8>
      break;
 80023ae:	bf00      	nop
 80023b0:	e004      	b.n	80023bc <DMA_CheckFifoParam+0xe8>
      break;
 80023b2:	bf00      	nop
 80023b4:	e002      	b.n	80023bc <DMA_CheckFifoParam+0xe8>
      break;   
 80023b6:	bf00      	nop
 80023b8:	e000      	b.n	80023bc <DMA_CheckFifoParam+0xe8>
      break;
 80023ba:	bf00      	nop
    }
  } 
  
  return status; 
 80023bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3714      	adds	r7, #20
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop

080023cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b089      	sub	sp, #36	@ 0x24
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023d6:	2300      	movs	r3, #0
 80023d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023da:	2300      	movs	r3, #0
 80023dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023de:	2300      	movs	r3, #0
 80023e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023e2:	2300      	movs	r3, #0
 80023e4:	61fb      	str	r3, [r7, #28]
 80023e6:	e159      	b.n	800269c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023e8:	2201      	movs	r2, #1
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	697a      	ldr	r2, [r7, #20]
 80023f8:	4013      	ands	r3, r2
 80023fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023fc:	693a      	ldr	r2, [r7, #16]
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	429a      	cmp	r2, r3
 8002402:	f040 8148 	bne.w	8002696 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f003 0303 	and.w	r3, r3, #3
 800240e:	2b01      	cmp	r3, #1
 8002410:	d005      	beq.n	800241e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800241a:	2b02      	cmp	r3, #2
 800241c:	d130      	bne.n	8002480 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	005b      	lsls	r3, r3, #1
 8002428:	2203      	movs	r2, #3
 800242a:	fa02 f303 	lsl.w	r3, r2, r3
 800242e:	43db      	mvns	r3, r3
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	4013      	ands	r3, r2
 8002434:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	68da      	ldr	r2, [r3, #12]
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	fa02 f303 	lsl.w	r3, r2, r3
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	4313      	orrs	r3, r2
 8002446:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002454:	2201      	movs	r2, #1
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	fa02 f303 	lsl.w	r3, r2, r3
 800245c:	43db      	mvns	r3, r3
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	4013      	ands	r3, r2
 8002462:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	091b      	lsrs	r3, r3, #4
 800246a:	f003 0201 	and.w	r2, r3, #1
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	4313      	orrs	r3, r2
 8002478:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f003 0303 	and.w	r3, r3, #3
 8002488:	2b03      	cmp	r3, #3
 800248a:	d017      	beq.n	80024bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	2203      	movs	r2, #3
 8002498:	fa02 f303 	lsl.w	r3, r2, r3
 800249c:	43db      	mvns	r3, r3
 800249e:	69ba      	ldr	r2, [r7, #24]
 80024a0:	4013      	ands	r3, r2
 80024a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	689a      	ldr	r2, [r3, #8]
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	005b      	lsls	r3, r3, #1
 80024ac:	fa02 f303 	lsl.w	r3, r2, r3
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f003 0303 	and.w	r3, r3, #3
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d123      	bne.n	8002510 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	08da      	lsrs	r2, r3, #3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	3208      	adds	r2, #8
 80024d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	f003 0307 	and.w	r3, r3, #7
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	220f      	movs	r2, #15
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	43db      	mvns	r3, r3
 80024e6:	69ba      	ldr	r2, [r7, #24]
 80024e8:	4013      	ands	r3, r2
 80024ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	691a      	ldr	r2, [r3, #16]
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	f003 0307 	and.w	r3, r3, #7
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	4313      	orrs	r3, r2
 8002500:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	08da      	lsrs	r2, r3, #3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	3208      	adds	r2, #8
 800250a:	69b9      	ldr	r1, [r7, #24]
 800250c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	2203      	movs	r2, #3
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	43db      	mvns	r3, r3
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	4013      	ands	r3, r2
 8002526:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f003 0203 	and.w	r2, r3, #3
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	4313      	orrs	r3, r2
 800253c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800254c:	2b00      	cmp	r3, #0
 800254e:	f000 80a2 	beq.w	8002696 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002552:	2300      	movs	r3, #0
 8002554:	60fb      	str	r3, [r7, #12]
 8002556:	4b57      	ldr	r3, [pc, #348]	@ (80026b4 <HAL_GPIO_Init+0x2e8>)
 8002558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800255a:	4a56      	ldr	r2, [pc, #344]	@ (80026b4 <HAL_GPIO_Init+0x2e8>)
 800255c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002560:	6453      	str	r3, [r2, #68]	@ 0x44
 8002562:	4b54      	ldr	r3, [pc, #336]	@ (80026b4 <HAL_GPIO_Init+0x2e8>)
 8002564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002566:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800256a:	60fb      	str	r3, [r7, #12]
 800256c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800256e:	4a52      	ldr	r2, [pc, #328]	@ (80026b8 <HAL_GPIO_Init+0x2ec>)
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	089b      	lsrs	r3, r3, #2
 8002574:	3302      	adds	r3, #2
 8002576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800257a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	f003 0303 	and.w	r3, r3, #3
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	220f      	movs	r2, #15
 8002586:	fa02 f303 	lsl.w	r3, r2, r3
 800258a:	43db      	mvns	r3, r3
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	4013      	ands	r3, r2
 8002590:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a49      	ldr	r2, [pc, #292]	@ (80026bc <HAL_GPIO_Init+0x2f0>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d019      	beq.n	80025ce <HAL_GPIO_Init+0x202>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a48      	ldr	r2, [pc, #288]	@ (80026c0 <HAL_GPIO_Init+0x2f4>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d013      	beq.n	80025ca <HAL_GPIO_Init+0x1fe>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a47      	ldr	r2, [pc, #284]	@ (80026c4 <HAL_GPIO_Init+0x2f8>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d00d      	beq.n	80025c6 <HAL_GPIO_Init+0x1fa>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a46      	ldr	r2, [pc, #280]	@ (80026c8 <HAL_GPIO_Init+0x2fc>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d007      	beq.n	80025c2 <HAL_GPIO_Init+0x1f6>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a45      	ldr	r2, [pc, #276]	@ (80026cc <HAL_GPIO_Init+0x300>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d101      	bne.n	80025be <HAL_GPIO_Init+0x1f2>
 80025ba:	2304      	movs	r3, #4
 80025bc:	e008      	b.n	80025d0 <HAL_GPIO_Init+0x204>
 80025be:	2307      	movs	r3, #7
 80025c0:	e006      	b.n	80025d0 <HAL_GPIO_Init+0x204>
 80025c2:	2303      	movs	r3, #3
 80025c4:	e004      	b.n	80025d0 <HAL_GPIO_Init+0x204>
 80025c6:	2302      	movs	r3, #2
 80025c8:	e002      	b.n	80025d0 <HAL_GPIO_Init+0x204>
 80025ca:	2301      	movs	r3, #1
 80025cc:	e000      	b.n	80025d0 <HAL_GPIO_Init+0x204>
 80025ce:	2300      	movs	r3, #0
 80025d0:	69fa      	ldr	r2, [r7, #28]
 80025d2:	f002 0203 	and.w	r2, r2, #3
 80025d6:	0092      	lsls	r2, r2, #2
 80025d8:	4093      	lsls	r3, r2
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	4313      	orrs	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025e0:	4935      	ldr	r1, [pc, #212]	@ (80026b8 <HAL_GPIO_Init+0x2ec>)
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	089b      	lsrs	r3, r3, #2
 80025e6:	3302      	adds	r3, #2
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025ee:	4b38      	ldr	r3, [pc, #224]	@ (80026d0 <HAL_GPIO_Init+0x304>)
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	43db      	mvns	r3, r3
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	4013      	ands	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d003      	beq.n	8002612 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	4313      	orrs	r3, r2
 8002610:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002612:	4a2f      	ldr	r2, [pc, #188]	@ (80026d0 <HAL_GPIO_Init+0x304>)
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002618:	4b2d      	ldr	r3, [pc, #180]	@ (80026d0 <HAL_GPIO_Init+0x304>)
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	43db      	mvns	r3, r3
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	4013      	ands	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d003      	beq.n	800263c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	4313      	orrs	r3, r2
 800263a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800263c:	4a24      	ldr	r2, [pc, #144]	@ (80026d0 <HAL_GPIO_Init+0x304>)
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002642:	4b23      	ldr	r3, [pc, #140]	@ (80026d0 <HAL_GPIO_Init+0x304>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	43db      	mvns	r3, r3
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	4013      	ands	r3, r2
 8002650:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d003      	beq.n	8002666 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	4313      	orrs	r3, r2
 8002664:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002666:	4a1a      	ldr	r2, [pc, #104]	@ (80026d0 <HAL_GPIO_Init+0x304>)
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800266c:	4b18      	ldr	r3, [pc, #96]	@ (80026d0 <HAL_GPIO_Init+0x304>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	43db      	mvns	r3, r3
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	4013      	ands	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d003      	beq.n	8002690 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	4313      	orrs	r3, r2
 800268e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002690:	4a0f      	ldr	r2, [pc, #60]	@ (80026d0 <HAL_GPIO_Init+0x304>)
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	3301      	adds	r3, #1
 800269a:	61fb      	str	r3, [r7, #28]
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	2b0f      	cmp	r3, #15
 80026a0:	f67f aea2 	bls.w	80023e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026a4:	bf00      	nop
 80026a6:	bf00      	nop
 80026a8:	3724      	adds	r7, #36	@ 0x24
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	40023800 	.word	0x40023800
 80026b8:	40013800 	.word	0x40013800
 80026bc:	40020000 	.word	0x40020000
 80026c0:	40020400 	.word	0x40020400
 80026c4:	40020800 	.word	0x40020800
 80026c8:	40020c00 	.word	0x40020c00
 80026cc:	40021000 	.word	0x40021000
 80026d0:	40013c00 	.word	0x40013c00

080026d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b086      	sub	sp, #24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d101      	bne.n	80026e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e267      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d075      	beq.n	80027de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80026f2:	4b88      	ldr	r3, [pc, #544]	@ (8002914 <HAL_RCC_OscConfig+0x240>)
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f003 030c 	and.w	r3, r3, #12
 80026fa:	2b04      	cmp	r3, #4
 80026fc:	d00c      	beq.n	8002718 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026fe:	4b85      	ldr	r3, [pc, #532]	@ (8002914 <HAL_RCC_OscConfig+0x240>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002706:	2b08      	cmp	r3, #8
 8002708:	d112      	bne.n	8002730 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800270a:	4b82      	ldr	r3, [pc, #520]	@ (8002914 <HAL_RCC_OscConfig+0x240>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002712:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002716:	d10b      	bne.n	8002730 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002718:	4b7e      	ldr	r3, [pc, #504]	@ (8002914 <HAL_RCC_OscConfig+0x240>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d05b      	beq.n	80027dc <HAL_RCC_OscConfig+0x108>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d157      	bne.n	80027dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e242      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002738:	d106      	bne.n	8002748 <HAL_RCC_OscConfig+0x74>
 800273a:	4b76      	ldr	r3, [pc, #472]	@ (8002914 <HAL_RCC_OscConfig+0x240>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a75      	ldr	r2, [pc, #468]	@ (8002914 <HAL_RCC_OscConfig+0x240>)
 8002740:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002744:	6013      	str	r3, [r2, #0]
 8002746:	e01d      	b.n	8002784 <HAL_RCC_OscConfig+0xb0>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002750:	d10c      	bne.n	800276c <HAL_RCC_OscConfig+0x98>
 8002752:	4b70      	ldr	r3, [pc, #448]	@ (8002914 <HAL_RCC_OscConfig+0x240>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a6f      	ldr	r2, [pc, #444]	@ (8002914 <HAL_RCC_OscConfig+0x240>)
 8002758:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800275c:	6013      	str	r3, [r2, #0]
 800275e:	4b6d      	ldr	r3, [pc, #436]	@ (8002914 <HAL_RCC_OscConfig+0x240>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a6c      	ldr	r2, [pc, #432]	@ (8002914 <HAL_RCC_OscConfig+0x240>)
 8002764:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002768:	6013      	str	r3, [r2, #0]
 800276a:	e00b      	b.n	8002784 <HAL_RCC_OscConfig+0xb0>
 800276c:	4b69      	ldr	r3, [pc, #420]	@ (8002914 <HAL_RCC_OscConfig+0x240>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a68      	ldr	r2, [pc, #416]	@ (8002914 <HAL_RCC_OscConfig+0x240>)
 8002772:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002776:	6013      	str	r3, [r2, #0]
 8002778:	4b66      	ldr	r3, [pc, #408]	@ (8002914 <HAL_RCC_OscConfig+0x240>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a65      	ldr	r2, [pc, #404]	@ (8002914 <HAL_RCC_OscConfig+0x240>)
 800277e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002782:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d013      	beq.n	80027b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800278c:	f7ff f90a 	bl	80019a4 <HAL_GetTick>
 8002790:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002792:	e008      	b.n	80027a6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002794:	f7ff f906 	bl	80019a4 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	2b64      	cmp	r3, #100	@ 0x64
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e207      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027a6:	4b5b      	ldr	r3, [pc, #364]	@ (8002914 <HAL_RCC_OscConfig+0x240>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d0f0      	beq.n	8002794 <HAL_RCC_OscConfig+0xc0>
 80027b2:	e014      	b.n	80027de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b4:	f7ff f8f6 	bl	80019a4 <HAL_GetTick>
 80027b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ba:	e008      	b.n	80027ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027bc:	f7ff f8f2 	bl	80019a4 <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b64      	cmp	r3, #100	@ 0x64
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e1f3      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ce:	4b51      	ldr	r3, [pc, #324]	@ (8002914 <HAL_RCC_OscConfig+0x240>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d1f0      	bne.n	80027bc <HAL_RCC_OscConfig+0xe8>
 80027da:	e000      	b.n	80027de <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d063      	beq.n	80028b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80027ea:	4b4a      	ldr	r3, [pc, #296]	@ (8002914 <HAL_RCC_OscConfig+0x240>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f003 030c 	and.w	r3, r3, #12
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d00b      	beq.n	800280e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027f6:	4b47      	ldr	r3, [pc, #284]	@ (8002914 <HAL_RCC_OscConfig+0x240>)
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80027fe:	2b08      	cmp	r3, #8
 8002800:	d11c      	bne.n	800283c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002802:	4b44      	ldr	r3, [pc, #272]	@ (8002914 <HAL_RCC_OscConfig+0x240>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d116      	bne.n	800283c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800280e:	4b41      	ldr	r3, [pc, #260]	@ (8002914 <HAL_RCC_OscConfig+0x240>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d005      	beq.n	8002826 <HAL_RCC_OscConfig+0x152>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d001      	beq.n	8002826 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e1c7      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002826:	4b3b      	ldr	r3, [pc, #236]	@ (8002914 <HAL_RCC_OscConfig+0x240>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	00db      	lsls	r3, r3, #3
 8002834:	4937      	ldr	r1, [pc, #220]	@ (8002914 <HAL_RCC_OscConfig+0x240>)
 8002836:	4313      	orrs	r3, r2
 8002838:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800283a:	e03a      	b.n	80028b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d020      	beq.n	8002886 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002844:	4b34      	ldr	r3, [pc, #208]	@ (8002918 <HAL_RCC_OscConfig+0x244>)
 8002846:	2201      	movs	r2, #1
 8002848:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800284a:	f7ff f8ab 	bl	80019a4 <HAL_GetTick>
 800284e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002850:	e008      	b.n	8002864 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002852:	f7ff f8a7 	bl	80019a4 <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	2b02      	cmp	r3, #2
 800285e:	d901      	bls.n	8002864 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e1a8      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002864:	4b2b      	ldr	r3, [pc, #172]	@ (8002914 <HAL_RCC_OscConfig+0x240>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0302 	and.w	r3, r3, #2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d0f0      	beq.n	8002852 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002870:	4b28      	ldr	r3, [pc, #160]	@ (8002914 <HAL_RCC_OscConfig+0x240>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	00db      	lsls	r3, r3, #3
 800287e:	4925      	ldr	r1, [pc, #148]	@ (8002914 <HAL_RCC_OscConfig+0x240>)
 8002880:	4313      	orrs	r3, r2
 8002882:	600b      	str	r3, [r1, #0]
 8002884:	e015      	b.n	80028b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002886:	4b24      	ldr	r3, [pc, #144]	@ (8002918 <HAL_RCC_OscConfig+0x244>)
 8002888:	2200      	movs	r2, #0
 800288a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800288c:	f7ff f88a 	bl	80019a4 <HAL_GetTick>
 8002890:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002892:	e008      	b.n	80028a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002894:	f7ff f886 	bl	80019a4 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e187      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028a6:	4b1b      	ldr	r3, [pc, #108]	@ (8002914 <HAL_RCC_OscConfig+0x240>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d1f0      	bne.n	8002894 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0308 	and.w	r3, r3, #8
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d036      	beq.n	800292c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	695b      	ldr	r3, [r3, #20]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d016      	beq.n	80028f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028c6:	4b15      	ldr	r3, [pc, #84]	@ (800291c <HAL_RCC_OscConfig+0x248>)
 80028c8:	2201      	movs	r2, #1
 80028ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028cc:	f7ff f86a 	bl	80019a4 <HAL_GetTick>
 80028d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028d2:	e008      	b.n	80028e6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028d4:	f7ff f866 	bl	80019a4 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e167      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002914 <HAL_RCC_OscConfig+0x240>)
 80028e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d0f0      	beq.n	80028d4 <HAL_RCC_OscConfig+0x200>
 80028f2:	e01b      	b.n	800292c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028f4:	4b09      	ldr	r3, [pc, #36]	@ (800291c <HAL_RCC_OscConfig+0x248>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028fa:	f7ff f853 	bl	80019a4 <HAL_GetTick>
 80028fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002900:	e00e      	b.n	8002920 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002902:	f7ff f84f 	bl	80019a4 <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	2b02      	cmp	r3, #2
 800290e:	d907      	bls.n	8002920 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e150      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4e2>
 8002914:	40023800 	.word	0x40023800
 8002918:	42470000 	.word	0x42470000
 800291c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002920:	4b88      	ldr	r3, [pc, #544]	@ (8002b44 <HAL_RCC_OscConfig+0x470>)
 8002922:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002924:	f003 0302 	and.w	r3, r3, #2
 8002928:	2b00      	cmp	r3, #0
 800292a:	d1ea      	bne.n	8002902 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0304 	and.w	r3, r3, #4
 8002934:	2b00      	cmp	r3, #0
 8002936:	f000 8097 	beq.w	8002a68 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800293a:	2300      	movs	r3, #0
 800293c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800293e:	4b81      	ldr	r3, [pc, #516]	@ (8002b44 <HAL_RCC_OscConfig+0x470>)
 8002940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002942:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d10f      	bne.n	800296a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800294a:	2300      	movs	r3, #0
 800294c:	60bb      	str	r3, [r7, #8]
 800294e:	4b7d      	ldr	r3, [pc, #500]	@ (8002b44 <HAL_RCC_OscConfig+0x470>)
 8002950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002952:	4a7c      	ldr	r2, [pc, #496]	@ (8002b44 <HAL_RCC_OscConfig+0x470>)
 8002954:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002958:	6413      	str	r3, [r2, #64]	@ 0x40
 800295a:	4b7a      	ldr	r3, [pc, #488]	@ (8002b44 <HAL_RCC_OscConfig+0x470>)
 800295c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800295e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002962:	60bb      	str	r3, [r7, #8]
 8002964:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002966:	2301      	movs	r3, #1
 8002968:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800296a:	4b77      	ldr	r3, [pc, #476]	@ (8002b48 <HAL_RCC_OscConfig+0x474>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002972:	2b00      	cmp	r3, #0
 8002974:	d118      	bne.n	80029a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002976:	4b74      	ldr	r3, [pc, #464]	@ (8002b48 <HAL_RCC_OscConfig+0x474>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a73      	ldr	r2, [pc, #460]	@ (8002b48 <HAL_RCC_OscConfig+0x474>)
 800297c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002980:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002982:	f7ff f80f 	bl	80019a4 <HAL_GetTick>
 8002986:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002988:	e008      	b.n	800299c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800298a:	f7ff f80b 	bl	80019a4 <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	2b02      	cmp	r3, #2
 8002996:	d901      	bls.n	800299c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e10c      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800299c:	4b6a      	ldr	r3, [pc, #424]	@ (8002b48 <HAL_RCC_OscConfig+0x474>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d0f0      	beq.n	800298a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d106      	bne.n	80029be <HAL_RCC_OscConfig+0x2ea>
 80029b0:	4b64      	ldr	r3, [pc, #400]	@ (8002b44 <HAL_RCC_OscConfig+0x470>)
 80029b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029b4:	4a63      	ldr	r2, [pc, #396]	@ (8002b44 <HAL_RCC_OscConfig+0x470>)
 80029b6:	f043 0301 	orr.w	r3, r3, #1
 80029ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80029bc:	e01c      	b.n	80029f8 <HAL_RCC_OscConfig+0x324>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	2b05      	cmp	r3, #5
 80029c4:	d10c      	bne.n	80029e0 <HAL_RCC_OscConfig+0x30c>
 80029c6:	4b5f      	ldr	r3, [pc, #380]	@ (8002b44 <HAL_RCC_OscConfig+0x470>)
 80029c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029ca:	4a5e      	ldr	r2, [pc, #376]	@ (8002b44 <HAL_RCC_OscConfig+0x470>)
 80029cc:	f043 0304 	orr.w	r3, r3, #4
 80029d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80029d2:	4b5c      	ldr	r3, [pc, #368]	@ (8002b44 <HAL_RCC_OscConfig+0x470>)
 80029d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029d6:	4a5b      	ldr	r2, [pc, #364]	@ (8002b44 <HAL_RCC_OscConfig+0x470>)
 80029d8:	f043 0301 	orr.w	r3, r3, #1
 80029dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80029de:	e00b      	b.n	80029f8 <HAL_RCC_OscConfig+0x324>
 80029e0:	4b58      	ldr	r3, [pc, #352]	@ (8002b44 <HAL_RCC_OscConfig+0x470>)
 80029e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029e4:	4a57      	ldr	r2, [pc, #348]	@ (8002b44 <HAL_RCC_OscConfig+0x470>)
 80029e6:	f023 0301 	bic.w	r3, r3, #1
 80029ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80029ec:	4b55      	ldr	r3, [pc, #340]	@ (8002b44 <HAL_RCC_OscConfig+0x470>)
 80029ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029f0:	4a54      	ldr	r2, [pc, #336]	@ (8002b44 <HAL_RCC_OscConfig+0x470>)
 80029f2:	f023 0304 	bic.w	r3, r3, #4
 80029f6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d015      	beq.n	8002a2c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a00:	f7fe ffd0 	bl	80019a4 <HAL_GetTick>
 8002a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a06:	e00a      	b.n	8002a1e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a08:	f7fe ffcc 	bl	80019a4 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e0cb      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a1e:	4b49      	ldr	r3, [pc, #292]	@ (8002b44 <HAL_RCC_OscConfig+0x470>)
 8002a20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d0ee      	beq.n	8002a08 <HAL_RCC_OscConfig+0x334>
 8002a2a:	e014      	b.n	8002a56 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a2c:	f7fe ffba 	bl	80019a4 <HAL_GetTick>
 8002a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a32:	e00a      	b.n	8002a4a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a34:	f7fe ffb6 	bl	80019a4 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e0b5      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a4a:	4b3e      	ldr	r3, [pc, #248]	@ (8002b44 <HAL_RCC_OscConfig+0x470>)
 8002a4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1ee      	bne.n	8002a34 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a56:	7dfb      	ldrb	r3, [r7, #23]
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d105      	bne.n	8002a68 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a5c:	4b39      	ldr	r3, [pc, #228]	@ (8002b44 <HAL_RCC_OscConfig+0x470>)
 8002a5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a60:	4a38      	ldr	r2, [pc, #224]	@ (8002b44 <HAL_RCC_OscConfig+0x470>)
 8002a62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a66:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	699b      	ldr	r3, [r3, #24]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	f000 80a1 	beq.w	8002bb4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a72:	4b34      	ldr	r3, [pc, #208]	@ (8002b44 <HAL_RCC_OscConfig+0x470>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f003 030c 	and.w	r3, r3, #12
 8002a7a:	2b08      	cmp	r3, #8
 8002a7c:	d05c      	beq.n	8002b38 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d141      	bne.n	8002b0a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a86:	4b31      	ldr	r3, [pc, #196]	@ (8002b4c <HAL_RCC_OscConfig+0x478>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a8c:	f7fe ff8a 	bl	80019a4 <HAL_GetTick>
 8002a90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a92:	e008      	b.n	8002aa6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a94:	f7fe ff86 	bl	80019a4 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e087      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aa6:	4b27      	ldr	r3, [pc, #156]	@ (8002b44 <HAL_RCC_OscConfig+0x470>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1f0      	bne.n	8002a94 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	69da      	ldr	r2, [r3, #28]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a1b      	ldr	r3, [r3, #32]
 8002aba:	431a      	orrs	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac0:	019b      	lsls	r3, r3, #6
 8002ac2:	431a      	orrs	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ac8:	085b      	lsrs	r3, r3, #1
 8002aca:	3b01      	subs	r3, #1
 8002acc:	041b      	lsls	r3, r3, #16
 8002ace:	431a      	orrs	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ad4:	061b      	lsls	r3, r3, #24
 8002ad6:	491b      	ldr	r1, [pc, #108]	@ (8002b44 <HAL_RCC_OscConfig+0x470>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002adc:	4b1b      	ldr	r3, [pc, #108]	@ (8002b4c <HAL_RCC_OscConfig+0x478>)
 8002ade:	2201      	movs	r2, #1
 8002ae0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae2:	f7fe ff5f 	bl	80019a4 <HAL_GetTick>
 8002ae6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ae8:	e008      	b.n	8002afc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aea:	f7fe ff5b 	bl	80019a4 <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d901      	bls.n	8002afc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e05c      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002afc:	4b11      	ldr	r3, [pc, #68]	@ (8002b44 <HAL_RCC_OscConfig+0x470>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d0f0      	beq.n	8002aea <HAL_RCC_OscConfig+0x416>
 8002b08:	e054      	b.n	8002bb4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b0a:	4b10      	ldr	r3, [pc, #64]	@ (8002b4c <HAL_RCC_OscConfig+0x478>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b10:	f7fe ff48 	bl	80019a4 <HAL_GetTick>
 8002b14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b16:	e008      	b.n	8002b2a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b18:	f7fe ff44 	bl	80019a4 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e045      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b2a:	4b06      	ldr	r3, [pc, #24]	@ (8002b44 <HAL_RCC_OscConfig+0x470>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d1f0      	bne.n	8002b18 <HAL_RCC_OscConfig+0x444>
 8002b36:	e03d      	b.n	8002bb4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	699b      	ldr	r3, [r3, #24]
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d107      	bne.n	8002b50 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e038      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4e2>
 8002b44:	40023800 	.word	0x40023800
 8002b48:	40007000 	.word	0x40007000
 8002b4c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b50:	4b1b      	ldr	r3, [pc, #108]	@ (8002bc0 <HAL_RCC_OscConfig+0x4ec>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d028      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d121      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d11a      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002b80:	4013      	ands	r3, r2
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002b86:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d111      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b96:	085b      	lsrs	r3, r3, #1
 8002b98:	3b01      	subs	r3, #1
 8002b9a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d107      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002baa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d001      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e000      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3718      	adds	r7, #24
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	40023800 	.word	0x40023800

08002bc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d101      	bne.n	8002bd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e0cc      	b.n	8002d72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bd8:	4b68      	ldr	r3, [pc, #416]	@ (8002d7c <HAL_RCC_ClockConfig+0x1b8>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0307 	and.w	r3, r3, #7
 8002be0:	683a      	ldr	r2, [r7, #0]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d90c      	bls.n	8002c00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002be6:	4b65      	ldr	r3, [pc, #404]	@ (8002d7c <HAL_RCC_ClockConfig+0x1b8>)
 8002be8:	683a      	ldr	r2, [r7, #0]
 8002bea:	b2d2      	uxtb	r2, r2
 8002bec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bee:	4b63      	ldr	r3, [pc, #396]	@ (8002d7c <HAL_RCC_ClockConfig+0x1b8>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0307 	and.w	r3, r3, #7
 8002bf6:	683a      	ldr	r2, [r7, #0]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d001      	beq.n	8002c00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e0b8      	b.n	8002d72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0302 	and.w	r3, r3, #2
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d020      	beq.n	8002c4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0304 	and.w	r3, r3, #4
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d005      	beq.n	8002c24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c18:	4b59      	ldr	r3, [pc, #356]	@ (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	4a58      	ldr	r2, [pc, #352]	@ (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002c22:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0308 	and.w	r3, r3, #8
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d005      	beq.n	8002c3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c30:	4b53      	ldr	r3, [pc, #332]	@ (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	4a52      	ldr	r2, [pc, #328]	@ (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002c36:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002c3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c3c:	4b50      	ldr	r3, [pc, #320]	@ (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	494d      	ldr	r1, [pc, #308]	@ (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d044      	beq.n	8002ce4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d107      	bne.n	8002c72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c62:	4b47      	ldr	r3, [pc, #284]	@ (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d119      	bne.n	8002ca2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e07f      	b.n	8002d72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d003      	beq.n	8002c82 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c7e:	2b03      	cmp	r3, #3
 8002c80:	d107      	bne.n	8002c92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c82:	4b3f      	ldr	r3, [pc, #252]	@ (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d109      	bne.n	8002ca2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e06f      	b.n	8002d72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c92:	4b3b      	ldr	r3, [pc, #236]	@ (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d101      	bne.n	8002ca2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e067      	b.n	8002d72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ca2:	4b37      	ldr	r3, [pc, #220]	@ (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f023 0203 	bic.w	r2, r3, #3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	4934      	ldr	r1, [pc, #208]	@ (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cb4:	f7fe fe76 	bl	80019a4 <HAL_GetTick>
 8002cb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cba:	e00a      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cbc:	f7fe fe72 	bl	80019a4 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e04f      	b.n	8002d72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cd2:	4b2b      	ldr	r3, [pc, #172]	@ (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f003 020c 	and.w	r2, r3, #12
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d1eb      	bne.n	8002cbc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ce4:	4b25      	ldr	r3, [pc, #148]	@ (8002d7c <HAL_RCC_ClockConfig+0x1b8>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0307 	and.w	r3, r3, #7
 8002cec:	683a      	ldr	r2, [r7, #0]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d20c      	bcs.n	8002d0c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cf2:	4b22      	ldr	r3, [pc, #136]	@ (8002d7c <HAL_RCC_ClockConfig+0x1b8>)
 8002cf4:	683a      	ldr	r2, [r7, #0]
 8002cf6:	b2d2      	uxtb	r2, r2
 8002cf8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cfa:	4b20      	ldr	r3, [pc, #128]	@ (8002d7c <HAL_RCC_ClockConfig+0x1b8>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0307 	and.w	r3, r3, #7
 8002d02:	683a      	ldr	r2, [r7, #0]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d001      	beq.n	8002d0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e032      	b.n	8002d72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0304 	and.w	r3, r3, #4
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d008      	beq.n	8002d2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d18:	4b19      	ldr	r3, [pc, #100]	@ (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	4916      	ldr	r1, [pc, #88]	@ (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0308 	and.w	r3, r3, #8
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d009      	beq.n	8002d4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d36:	4b12      	ldr	r3, [pc, #72]	@ (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	691b      	ldr	r3, [r3, #16]
 8002d42:	00db      	lsls	r3, r3, #3
 8002d44:	490e      	ldr	r1, [pc, #56]	@ (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002d46:	4313      	orrs	r3, r2
 8002d48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d4a:	f000 f821 	bl	8002d90 <HAL_RCC_GetSysClockFreq>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	4b0b      	ldr	r3, [pc, #44]	@ (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	091b      	lsrs	r3, r3, #4
 8002d56:	f003 030f 	and.w	r3, r3, #15
 8002d5a:	490a      	ldr	r1, [pc, #40]	@ (8002d84 <HAL_RCC_ClockConfig+0x1c0>)
 8002d5c:	5ccb      	ldrb	r3, [r1, r3]
 8002d5e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d62:	4a09      	ldr	r2, [pc, #36]	@ (8002d88 <HAL_RCC_ClockConfig+0x1c4>)
 8002d64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002d66:	4b09      	ldr	r3, [pc, #36]	@ (8002d8c <HAL_RCC_ClockConfig+0x1c8>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7fe fcb6 	bl	80016dc <HAL_InitTick>

  return HAL_OK;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3710      	adds	r7, #16
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	40023c00 	.word	0x40023c00
 8002d80:	40023800 	.word	0x40023800
 8002d84:	08008c30 	.word	0x08008c30
 8002d88:	20000000 	.word	0x20000000
 8002d8c:	20000004 	.word	0x20000004

08002d90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d94:	b090      	sub	sp, #64	@ 0x40
 8002d96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002da0:	2300      	movs	r3, #0
 8002da2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002da4:	2300      	movs	r3, #0
 8002da6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002da8:	4b59      	ldr	r3, [pc, #356]	@ (8002f10 <HAL_RCC_GetSysClockFreq+0x180>)
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f003 030c 	and.w	r3, r3, #12
 8002db0:	2b08      	cmp	r3, #8
 8002db2:	d00d      	beq.n	8002dd0 <HAL_RCC_GetSysClockFreq+0x40>
 8002db4:	2b08      	cmp	r3, #8
 8002db6:	f200 80a1 	bhi.w	8002efc <HAL_RCC_GetSysClockFreq+0x16c>
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d002      	beq.n	8002dc4 <HAL_RCC_GetSysClockFreq+0x34>
 8002dbe:	2b04      	cmp	r3, #4
 8002dc0:	d003      	beq.n	8002dca <HAL_RCC_GetSysClockFreq+0x3a>
 8002dc2:	e09b      	b.n	8002efc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002dc4:	4b53      	ldr	r3, [pc, #332]	@ (8002f14 <HAL_RCC_GetSysClockFreq+0x184>)
 8002dc6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002dc8:	e09b      	b.n	8002f02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002dca:	4b53      	ldr	r3, [pc, #332]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0x188>)
 8002dcc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002dce:	e098      	b.n	8002f02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002dd0:	4b4f      	ldr	r3, [pc, #316]	@ (8002f10 <HAL_RCC_GetSysClockFreq+0x180>)
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002dd8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dda:	4b4d      	ldr	r3, [pc, #308]	@ (8002f10 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d028      	beq.n	8002e38 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002de6:	4b4a      	ldr	r3, [pc, #296]	@ (8002f10 <HAL_RCC_GetSysClockFreq+0x180>)
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	099b      	lsrs	r3, r3, #6
 8002dec:	2200      	movs	r2, #0
 8002dee:	623b      	str	r3, [r7, #32]
 8002df0:	627a      	str	r2, [r7, #36]	@ 0x24
 8002df2:	6a3b      	ldr	r3, [r7, #32]
 8002df4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002df8:	2100      	movs	r1, #0
 8002dfa:	4b47      	ldr	r3, [pc, #284]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0x188>)
 8002dfc:	fb03 f201 	mul.w	r2, r3, r1
 8002e00:	2300      	movs	r3, #0
 8002e02:	fb00 f303 	mul.w	r3, r0, r3
 8002e06:	4413      	add	r3, r2
 8002e08:	4a43      	ldr	r2, [pc, #268]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0x188>)
 8002e0a:	fba0 1202 	umull	r1, r2, r0, r2
 8002e0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002e10:	460a      	mov	r2, r1
 8002e12:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002e14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e16:	4413      	add	r3, r2
 8002e18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	61bb      	str	r3, [r7, #24]
 8002e20:	61fa      	str	r2, [r7, #28]
 8002e22:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e26:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002e2a:	f7fd fa29 	bl	8000280 <__aeabi_uldivmod>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	460b      	mov	r3, r1
 8002e32:	4613      	mov	r3, r2
 8002e34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e36:	e053      	b.n	8002ee0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e38:	4b35      	ldr	r3, [pc, #212]	@ (8002f10 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	099b      	lsrs	r3, r3, #6
 8002e3e:	2200      	movs	r2, #0
 8002e40:	613b      	str	r3, [r7, #16]
 8002e42:	617a      	str	r2, [r7, #20]
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002e4a:	f04f 0b00 	mov.w	fp, #0
 8002e4e:	4652      	mov	r2, sl
 8002e50:	465b      	mov	r3, fp
 8002e52:	f04f 0000 	mov.w	r0, #0
 8002e56:	f04f 0100 	mov.w	r1, #0
 8002e5a:	0159      	lsls	r1, r3, #5
 8002e5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e60:	0150      	lsls	r0, r2, #5
 8002e62:	4602      	mov	r2, r0
 8002e64:	460b      	mov	r3, r1
 8002e66:	ebb2 080a 	subs.w	r8, r2, sl
 8002e6a:	eb63 090b 	sbc.w	r9, r3, fp
 8002e6e:	f04f 0200 	mov.w	r2, #0
 8002e72:	f04f 0300 	mov.w	r3, #0
 8002e76:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002e7a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002e7e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002e82:	ebb2 0408 	subs.w	r4, r2, r8
 8002e86:	eb63 0509 	sbc.w	r5, r3, r9
 8002e8a:	f04f 0200 	mov.w	r2, #0
 8002e8e:	f04f 0300 	mov.w	r3, #0
 8002e92:	00eb      	lsls	r3, r5, #3
 8002e94:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e98:	00e2      	lsls	r2, r4, #3
 8002e9a:	4614      	mov	r4, r2
 8002e9c:	461d      	mov	r5, r3
 8002e9e:	eb14 030a 	adds.w	r3, r4, sl
 8002ea2:	603b      	str	r3, [r7, #0]
 8002ea4:	eb45 030b 	adc.w	r3, r5, fp
 8002ea8:	607b      	str	r3, [r7, #4]
 8002eaa:	f04f 0200 	mov.w	r2, #0
 8002eae:	f04f 0300 	mov.w	r3, #0
 8002eb2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002eb6:	4629      	mov	r1, r5
 8002eb8:	028b      	lsls	r3, r1, #10
 8002eba:	4621      	mov	r1, r4
 8002ebc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ec0:	4621      	mov	r1, r4
 8002ec2:	028a      	lsls	r2, r1, #10
 8002ec4:	4610      	mov	r0, r2
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002eca:	2200      	movs	r2, #0
 8002ecc:	60bb      	str	r3, [r7, #8]
 8002ece:	60fa      	str	r2, [r7, #12]
 8002ed0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ed4:	f7fd f9d4 	bl	8000280 <__aeabi_uldivmod>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	460b      	mov	r3, r1
 8002edc:	4613      	mov	r3, r2
 8002ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8002f10 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	0c1b      	lsrs	r3, r3, #16
 8002ee6:	f003 0303 	and.w	r3, r3, #3
 8002eea:	3301      	adds	r3, #1
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002ef0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ef8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002efa:	e002      	b.n	8002f02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002efc:	4b05      	ldr	r3, [pc, #20]	@ (8002f14 <HAL_RCC_GetSysClockFreq+0x184>)
 8002efe:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002f00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3740      	adds	r7, #64	@ 0x40
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f0e:	bf00      	nop
 8002f10:	40023800 	.word	0x40023800
 8002f14:	00f42400 	.word	0x00f42400
 8002f18:	017d7840 	.word	0x017d7840

08002f1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f20:	4b03      	ldr	r3, [pc, #12]	@ (8002f30 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f22:	681b      	ldr	r3, [r3, #0]
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	20000000 	.word	0x20000000

08002f34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f38:	f7ff fff0 	bl	8002f1c <HAL_RCC_GetHCLKFreq>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	4b05      	ldr	r3, [pc, #20]	@ (8002f54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	0a9b      	lsrs	r3, r3, #10
 8002f44:	f003 0307 	and.w	r3, r3, #7
 8002f48:	4903      	ldr	r1, [pc, #12]	@ (8002f58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f4a:	5ccb      	ldrb	r3, [r1, r3]
 8002f4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	40023800 	.word	0x40023800
 8002f58:	08008c40 	.word	0x08008c40

08002f5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f60:	f7ff ffdc 	bl	8002f1c <HAL_RCC_GetHCLKFreq>
 8002f64:	4602      	mov	r2, r0
 8002f66:	4b05      	ldr	r3, [pc, #20]	@ (8002f7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	0b5b      	lsrs	r3, r3, #13
 8002f6c:	f003 0307 	and.w	r3, r3, #7
 8002f70:	4903      	ldr	r1, [pc, #12]	@ (8002f80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f72:	5ccb      	ldrb	r3, [r1, r3]
 8002f74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	40023800 	.word	0x40023800
 8002f80:	08008c40 	.word	0x08008c40

08002f84 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	220f      	movs	r2, #15
 8002f92:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002f94:	4b12      	ldr	r3, [pc, #72]	@ (8002fe0 <HAL_RCC_GetClockConfig+0x5c>)
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f003 0203 	and.w	r2, r3, #3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002fa0:	4b0f      	ldr	r3, [pc, #60]	@ (8002fe0 <HAL_RCC_GetClockConfig+0x5c>)
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002fac:	4b0c      	ldr	r3, [pc, #48]	@ (8002fe0 <HAL_RCC_GetClockConfig+0x5c>)
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002fb8:	4b09      	ldr	r3, [pc, #36]	@ (8002fe0 <HAL_RCC_GetClockConfig+0x5c>)
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	08db      	lsrs	r3, r3, #3
 8002fbe:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002fc6:	4b07      	ldr	r3, [pc, #28]	@ (8002fe4 <HAL_RCC_GetClockConfig+0x60>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0207 	and.w	r2, r3, #7
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	601a      	str	r2, [r3, #0]
}
 8002fd2:	bf00      	nop
 8002fd4:	370c      	adds	r7, #12
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	40023800 	.word	0x40023800
 8002fe4:	40023c00 	.word	0x40023c00

08002fe8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d101      	bne.n	8002ffa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e041      	b.n	800307e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003000:	b2db      	uxtb	r3, r3
 8003002:	2b00      	cmp	r3, #0
 8003004:	d106      	bne.n	8003014 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f7fe fa72 	bl	80014f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2202      	movs	r2, #2
 8003018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	3304      	adds	r3, #4
 8003024:	4619      	mov	r1, r3
 8003026:	4610      	mov	r0, r2
 8003028:	f000 fa70 	bl	800350c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3708      	adds	r7, #8
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
	...

08003088 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003088:	b480      	push	{r7}
 800308a:	b085      	sub	sp, #20
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003096:	b2db      	uxtb	r3, r3
 8003098:	2b01      	cmp	r3, #1
 800309a:	d001      	beq.n	80030a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e044      	b.n	800312a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2202      	movs	r2, #2
 80030a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68da      	ldr	r2, [r3, #12]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f042 0201 	orr.w	r2, r2, #1
 80030b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a1e      	ldr	r2, [pc, #120]	@ (8003138 <HAL_TIM_Base_Start_IT+0xb0>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d018      	beq.n	80030f4 <HAL_TIM_Base_Start_IT+0x6c>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030ca:	d013      	beq.n	80030f4 <HAL_TIM_Base_Start_IT+0x6c>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a1a      	ldr	r2, [pc, #104]	@ (800313c <HAL_TIM_Base_Start_IT+0xb4>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d00e      	beq.n	80030f4 <HAL_TIM_Base_Start_IT+0x6c>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a19      	ldr	r2, [pc, #100]	@ (8003140 <HAL_TIM_Base_Start_IT+0xb8>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d009      	beq.n	80030f4 <HAL_TIM_Base_Start_IT+0x6c>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a17      	ldr	r2, [pc, #92]	@ (8003144 <HAL_TIM_Base_Start_IT+0xbc>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d004      	beq.n	80030f4 <HAL_TIM_Base_Start_IT+0x6c>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a16      	ldr	r2, [pc, #88]	@ (8003148 <HAL_TIM_Base_Start_IT+0xc0>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d111      	bne.n	8003118 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f003 0307 	and.w	r3, r3, #7
 80030fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2b06      	cmp	r3, #6
 8003104:	d010      	beq.n	8003128 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f042 0201 	orr.w	r2, r2, #1
 8003114:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003116:	e007      	b.n	8003128 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f042 0201 	orr.w	r2, r2, #1
 8003126:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3714      	adds	r7, #20
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	40010000 	.word	0x40010000
 800313c:	40000400 	.word	0x40000400
 8003140:	40000800 	.word	0x40000800
 8003144:	40000c00 	.word	0x40000c00
 8003148:	40014000 	.word	0x40014000

0800314c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	691b      	ldr	r3, [r3, #16]
 8003162:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d020      	beq.n	80031b0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f003 0302 	and.w	r3, r3, #2
 8003174:	2b00      	cmp	r3, #0
 8003176:	d01b      	beq.n	80031b0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f06f 0202 	mvn.w	r2, #2
 8003180:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2201      	movs	r2, #1
 8003186:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	699b      	ldr	r3, [r3, #24]
 800318e:	f003 0303 	and.w	r3, r3, #3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d003      	beq.n	800319e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f000 f999 	bl	80034ce <HAL_TIM_IC_CaptureCallback>
 800319c:	e005      	b.n	80031aa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 f98b 	bl	80034ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f000 f99c 	bl	80034e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	f003 0304 	and.w	r3, r3, #4
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d020      	beq.n	80031fc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f003 0304 	and.w	r3, r3, #4
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d01b      	beq.n	80031fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f06f 0204 	mvn.w	r2, #4
 80031cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2202      	movs	r2, #2
 80031d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	699b      	ldr	r3, [r3, #24]
 80031da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d003      	beq.n	80031ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 f973 	bl	80034ce <HAL_TIM_IC_CaptureCallback>
 80031e8:	e005      	b.n	80031f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 f965 	bl	80034ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f000 f976 	bl	80034e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	f003 0308 	and.w	r3, r3, #8
 8003202:	2b00      	cmp	r3, #0
 8003204:	d020      	beq.n	8003248 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	f003 0308 	and.w	r3, r3, #8
 800320c:	2b00      	cmp	r3, #0
 800320e:	d01b      	beq.n	8003248 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f06f 0208 	mvn.w	r2, #8
 8003218:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2204      	movs	r2, #4
 800321e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	69db      	ldr	r3, [r3, #28]
 8003226:	f003 0303 	and.w	r3, r3, #3
 800322a:	2b00      	cmp	r3, #0
 800322c:	d003      	beq.n	8003236 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f000 f94d 	bl	80034ce <HAL_TIM_IC_CaptureCallback>
 8003234:	e005      	b.n	8003242 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f000 f93f 	bl	80034ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f000 f950 	bl	80034e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	f003 0310 	and.w	r3, r3, #16
 800324e:	2b00      	cmp	r3, #0
 8003250:	d020      	beq.n	8003294 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	f003 0310 	and.w	r3, r3, #16
 8003258:	2b00      	cmp	r3, #0
 800325a:	d01b      	beq.n	8003294 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f06f 0210 	mvn.w	r2, #16
 8003264:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2208      	movs	r2, #8
 800326a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	69db      	ldr	r3, [r3, #28]
 8003272:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003276:	2b00      	cmp	r3, #0
 8003278:	d003      	beq.n	8003282 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f000 f927 	bl	80034ce <HAL_TIM_IC_CaptureCallback>
 8003280:	e005      	b.n	800328e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f000 f919 	bl	80034ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f000 f92a 	bl	80034e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00c      	beq.n	80032b8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f003 0301 	and.w	r3, r3, #1
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d007      	beq.n	80032b8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f06f 0201 	mvn.w	r2, #1
 80032b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f7fe f8dc 	bl	8001470 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d00c      	beq.n	80032dc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d007      	beq.n	80032dc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80032d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 fab6 	bl	8003848 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00c      	beq.n	8003300 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d007      	beq.n	8003300 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80032f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f000 f8fb 	bl	80034f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	f003 0320 	and.w	r3, r3, #32
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00c      	beq.n	8003324 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f003 0320 	and.w	r3, r3, #32
 8003310:	2b00      	cmp	r3, #0
 8003312:	d007      	beq.n	8003324 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f06f 0220 	mvn.w	r2, #32
 800331c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f000 fa88 	bl	8003834 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003324:	bf00      	nop
 8003326:	3710      	adds	r7, #16
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}

0800332c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003336:	2300      	movs	r3, #0
 8003338:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003340:	2b01      	cmp	r3, #1
 8003342:	d101      	bne.n	8003348 <HAL_TIM_ConfigClockSource+0x1c>
 8003344:	2302      	movs	r3, #2
 8003346:	e0b4      	b.n	80034b2 <HAL_TIM_ConfigClockSource+0x186>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2202      	movs	r2, #2
 8003354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003366:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800336e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	68ba      	ldr	r2, [r7, #8]
 8003376:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003380:	d03e      	beq.n	8003400 <HAL_TIM_ConfigClockSource+0xd4>
 8003382:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003386:	f200 8087 	bhi.w	8003498 <HAL_TIM_ConfigClockSource+0x16c>
 800338a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800338e:	f000 8086 	beq.w	800349e <HAL_TIM_ConfigClockSource+0x172>
 8003392:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003396:	d87f      	bhi.n	8003498 <HAL_TIM_ConfigClockSource+0x16c>
 8003398:	2b70      	cmp	r3, #112	@ 0x70
 800339a:	d01a      	beq.n	80033d2 <HAL_TIM_ConfigClockSource+0xa6>
 800339c:	2b70      	cmp	r3, #112	@ 0x70
 800339e:	d87b      	bhi.n	8003498 <HAL_TIM_ConfigClockSource+0x16c>
 80033a0:	2b60      	cmp	r3, #96	@ 0x60
 80033a2:	d050      	beq.n	8003446 <HAL_TIM_ConfigClockSource+0x11a>
 80033a4:	2b60      	cmp	r3, #96	@ 0x60
 80033a6:	d877      	bhi.n	8003498 <HAL_TIM_ConfigClockSource+0x16c>
 80033a8:	2b50      	cmp	r3, #80	@ 0x50
 80033aa:	d03c      	beq.n	8003426 <HAL_TIM_ConfigClockSource+0xfa>
 80033ac:	2b50      	cmp	r3, #80	@ 0x50
 80033ae:	d873      	bhi.n	8003498 <HAL_TIM_ConfigClockSource+0x16c>
 80033b0:	2b40      	cmp	r3, #64	@ 0x40
 80033b2:	d058      	beq.n	8003466 <HAL_TIM_ConfigClockSource+0x13a>
 80033b4:	2b40      	cmp	r3, #64	@ 0x40
 80033b6:	d86f      	bhi.n	8003498 <HAL_TIM_ConfigClockSource+0x16c>
 80033b8:	2b30      	cmp	r3, #48	@ 0x30
 80033ba:	d064      	beq.n	8003486 <HAL_TIM_ConfigClockSource+0x15a>
 80033bc:	2b30      	cmp	r3, #48	@ 0x30
 80033be:	d86b      	bhi.n	8003498 <HAL_TIM_ConfigClockSource+0x16c>
 80033c0:	2b20      	cmp	r3, #32
 80033c2:	d060      	beq.n	8003486 <HAL_TIM_ConfigClockSource+0x15a>
 80033c4:	2b20      	cmp	r3, #32
 80033c6:	d867      	bhi.n	8003498 <HAL_TIM_ConfigClockSource+0x16c>
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d05c      	beq.n	8003486 <HAL_TIM_ConfigClockSource+0x15a>
 80033cc:	2b10      	cmp	r3, #16
 80033ce:	d05a      	beq.n	8003486 <HAL_TIM_ConfigClockSource+0x15a>
 80033d0:	e062      	b.n	8003498 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80033e2:	f000 f999 	bl	8003718 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80033f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	68ba      	ldr	r2, [r7, #8]
 80033fc:	609a      	str	r2, [r3, #8]
      break;
 80033fe:	e04f      	b.n	80034a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003410:	f000 f982 	bl	8003718 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	689a      	ldr	r2, [r3, #8]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003422:	609a      	str	r2, [r3, #8]
      break;
 8003424:	e03c      	b.n	80034a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003432:	461a      	mov	r2, r3
 8003434:	f000 f8f6 	bl	8003624 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2150      	movs	r1, #80	@ 0x50
 800343e:	4618      	mov	r0, r3
 8003440:	f000 f94f 	bl	80036e2 <TIM_ITRx_SetConfig>
      break;
 8003444:	e02c      	b.n	80034a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003452:	461a      	mov	r2, r3
 8003454:	f000 f915 	bl	8003682 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2160      	movs	r1, #96	@ 0x60
 800345e:	4618      	mov	r0, r3
 8003460:	f000 f93f 	bl	80036e2 <TIM_ITRx_SetConfig>
      break;
 8003464:	e01c      	b.n	80034a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003472:	461a      	mov	r2, r3
 8003474:	f000 f8d6 	bl	8003624 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2140      	movs	r1, #64	@ 0x40
 800347e:	4618      	mov	r0, r3
 8003480:	f000 f92f 	bl	80036e2 <TIM_ITRx_SetConfig>
      break;
 8003484:	e00c      	b.n	80034a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4619      	mov	r1, r3
 8003490:	4610      	mov	r0, r2
 8003492:	f000 f926 	bl	80036e2 <TIM_ITRx_SetConfig>
      break;
 8003496:	e003      	b.n	80034a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	73fb      	strb	r3, [r7, #15]
      break;
 800349c:	e000      	b.n	80034a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800349e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80034b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3710      	adds	r7, #16
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}

080034ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034ba:	b480      	push	{r7}
 80034bc:	b083      	sub	sp, #12
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034c2:	bf00      	nop
 80034c4:	370c      	adds	r7, #12
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr

080034ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034ce:	b480      	push	{r7}
 80034d0:	b083      	sub	sp, #12
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034d6:	bf00      	nop
 80034d8:	370c      	adds	r7, #12
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr

080034e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034e2:	b480      	push	{r7}
 80034e4:	b083      	sub	sp, #12
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034ea:	bf00      	nop
 80034ec:	370c      	adds	r7, #12
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr

080034f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034f6:	b480      	push	{r7}
 80034f8:	b083      	sub	sp, #12
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034fe:	bf00      	nop
 8003500:	370c      	adds	r7, #12
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr
	...

0800350c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800350c:	b480      	push	{r7}
 800350e:	b085      	sub	sp, #20
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4a3a      	ldr	r2, [pc, #232]	@ (8003608 <TIM_Base_SetConfig+0xfc>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d00f      	beq.n	8003544 <TIM_Base_SetConfig+0x38>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800352a:	d00b      	beq.n	8003544 <TIM_Base_SetConfig+0x38>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a37      	ldr	r2, [pc, #220]	@ (800360c <TIM_Base_SetConfig+0x100>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d007      	beq.n	8003544 <TIM_Base_SetConfig+0x38>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a36      	ldr	r2, [pc, #216]	@ (8003610 <TIM_Base_SetConfig+0x104>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d003      	beq.n	8003544 <TIM_Base_SetConfig+0x38>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a35      	ldr	r2, [pc, #212]	@ (8003614 <TIM_Base_SetConfig+0x108>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d108      	bne.n	8003556 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800354a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	68fa      	ldr	r2, [r7, #12]
 8003552:	4313      	orrs	r3, r2
 8003554:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a2b      	ldr	r2, [pc, #172]	@ (8003608 <TIM_Base_SetConfig+0xfc>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d01b      	beq.n	8003596 <TIM_Base_SetConfig+0x8a>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003564:	d017      	beq.n	8003596 <TIM_Base_SetConfig+0x8a>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a28      	ldr	r2, [pc, #160]	@ (800360c <TIM_Base_SetConfig+0x100>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d013      	beq.n	8003596 <TIM_Base_SetConfig+0x8a>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a27      	ldr	r2, [pc, #156]	@ (8003610 <TIM_Base_SetConfig+0x104>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d00f      	beq.n	8003596 <TIM_Base_SetConfig+0x8a>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a26      	ldr	r2, [pc, #152]	@ (8003614 <TIM_Base_SetConfig+0x108>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d00b      	beq.n	8003596 <TIM_Base_SetConfig+0x8a>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a25      	ldr	r2, [pc, #148]	@ (8003618 <TIM_Base_SetConfig+0x10c>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d007      	beq.n	8003596 <TIM_Base_SetConfig+0x8a>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a24      	ldr	r2, [pc, #144]	@ (800361c <TIM_Base_SetConfig+0x110>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d003      	beq.n	8003596 <TIM_Base_SetConfig+0x8a>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a23      	ldr	r2, [pc, #140]	@ (8003620 <TIM_Base_SetConfig+0x114>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d108      	bne.n	80035a8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800359c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	68fa      	ldr	r2, [r7, #12]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	68fa      	ldr	r2, [r7, #12]
 80035ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	689a      	ldr	r2, [r3, #8]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4a0e      	ldr	r2, [pc, #56]	@ (8003608 <TIM_Base_SetConfig+0xfc>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d103      	bne.n	80035dc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	691a      	ldr	r2, [r3, #16]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d105      	bne.n	80035fa <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	f023 0201 	bic.w	r2, r3, #1
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	611a      	str	r2, [r3, #16]
  }
}
 80035fa:	bf00      	nop
 80035fc:	3714      	adds	r7, #20
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	40010000 	.word	0x40010000
 800360c:	40000400 	.word	0x40000400
 8003610:	40000800 	.word	0x40000800
 8003614:	40000c00 	.word	0x40000c00
 8003618:	40014000 	.word	0x40014000
 800361c:	40014400 	.word	0x40014400
 8003620:	40014800 	.word	0x40014800

08003624 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003624:	b480      	push	{r7}
 8003626:	b087      	sub	sp, #28
 8003628:	af00      	add	r7, sp, #0
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6a1b      	ldr	r3, [r3, #32]
 8003634:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6a1b      	ldr	r3, [r3, #32]
 800363a:	f023 0201 	bic.w	r2, r3, #1
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	699b      	ldr	r3, [r3, #24]
 8003646:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800364e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	011b      	lsls	r3, r3, #4
 8003654:	693a      	ldr	r2, [r7, #16]
 8003656:	4313      	orrs	r3, r2
 8003658:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	f023 030a 	bic.w	r3, r3, #10
 8003660:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003662:	697a      	ldr	r2, [r7, #20]
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	4313      	orrs	r3, r2
 8003668:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	693a      	ldr	r2, [r7, #16]
 800366e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	697a      	ldr	r2, [r7, #20]
 8003674:	621a      	str	r2, [r3, #32]
}
 8003676:	bf00      	nop
 8003678:	371c      	adds	r7, #28
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr

08003682 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003682:	b480      	push	{r7}
 8003684:	b087      	sub	sp, #28
 8003686:	af00      	add	r7, sp, #0
 8003688:	60f8      	str	r0, [r7, #12]
 800368a:	60b9      	str	r1, [r7, #8]
 800368c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6a1b      	ldr	r3, [r3, #32]
 8003698:	f023 0210 	bic.w	r2, r3, #16
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	699b      	ldr	r3, [r3, #24]
 80036a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80036ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	031b      	lsls	r3, r3, #12
 80036b2:	693a      	ldr	r2, [r7, #16]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80036be:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	011b      	lsls	r3, r3, #4
 80036c4:	697a      	ldr	r2, [r7, #20]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	693a      	ldr	r2, [r7, #16]
 80036ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	697a      	ldr	r2, [r7, #20]
 80036d4:	621a      	str	r2, [r3, #32]
}
 80036d6:	bf00      	nop
 80036d8:	371c      	adds	r7, #28
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr

080036e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036e2:	b480      	push	{r7}
 80036e4:	b085      	sub	sp, #20
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
 80036ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036fa:	683a      	ldr	r2, [r7, #0]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	4313      	orrs	r3, r2
 8003700:	f043 0307 	orr.w	r3, r3, #7
 8003704:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	609a      	str	r2, [r3, #8]
}
 800370c:	bf00      	nop
 800370e:	3714      	adds	r7, #20
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003718:	b480      	push	{r7}
 800371a:	b087      	sub	sp, #28
 800371c:	af00      	add	r7, sp, #0
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	607a      	str	r2, [r7, #4]
 8003724:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003732:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	021a      	lsls	r2, r3, #8
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	431a      	orrs	r2, r3
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	4313      	orrs	r3, r2
 8003740:	697a      	ldr	r2, [r7, #20]
 8003742:	4313      	orrs	r3, r2
 8003744:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	697a      	ldr	r2, [r7, #20]
 800374a:	609a      	str	r2, [r3, #8]
}
 800374c:	bf00      	nop
 800374e:	371c      	adds	r7, #28
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003758:	b480      	push	{r7}
 800375a:	b085      	sub	sp, #20
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003768:	2b01      	cmp	r3, #1
 800376a:	d101      	bne.n	8003770 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800376c:	2302      	movs	r3, #2
 800376e:	e050      	b.n	8003812 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2202      	movs	r2, #2
 800377c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003796:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	68fa      	ldr	r2, [r7, #12]
 800379e:	4313      	orrs	r3, r2
 80037a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	68fa      	ldr	r2, [r7, #12]
 80037a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a1c      	ldr	r2, [pc, #112]	@ (8003820 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d018      	beq.n	80037e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037bc:	d013      	beq.n	80037e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a18      	ldr	r2, [pc, #96]	@ (8003824 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d00e      	beq.n	80037e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a16      	ldr	r2, [pc, #88]	@ (8003828 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d009      	beq.n	80037e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a15      	ldr	r2, [pc, #84]	@ (800382c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d004      	beq.n	80037e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a13      	ldr	r2, [pc, #76]	@ (8003830 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d10c      	bne.n	8003800 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80037ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	68ba      	ldr	r2, [r7, #8]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68ba      	ldr	r2, [r7, #8]
 80037fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003810:	2300      	movs	r3, #0
}
 8003812:	4618      	mov	r0, r3
 8003814:	3714      	adds	r7, #20
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	40010000 	.word	0x40010000
 8003824:	40000400 	.word	0x40000400
 8003828:	40000800 	.word	0x40000800
 800382c:	40000c00 	.word	0x40000c00
 8003830:	40014000 	.word	0x40014000

08003834 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800383c:	bf00      	nop
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003850:	bf00      	nop
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d101      	bne.n	800386e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e042      	b.n	80038f4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d106      	bne.n	8003888 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f7fd fe74 	bl	8001570 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2224      	movs	r2, #36	@ 0x24
 800388c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68da      	ldr	r2, [r3, #12]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800389e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f000 fdc1 	bl	8004428 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	691a      	ldr	r2, [r3, #16]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80038b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	695a      	ldr	r2, [r3, #20]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80038c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	68da      	ldr	r2, [r3, #12]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80038d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2220      	movs	r2, #32
 80038e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2220      	movs	r2, #32
 80038e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80038f2:	2300      	movs	r3, #0
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3708      	adds	r7, #8
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b08c      	sub	sp, #48	@ 0x30
 8003900:	af00      	add	r7, sp, #0
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	4613      	mov	r3, r2
 8003908:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b20      	cmp	r3, #32
 8003914:	d156      	bne.n	80039c4 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d002      	beq.n	8003922 <HAL_UART_Transmit_DMA+0x26>
 800391c:	88fb      	ldrh	r3, [r7, #6]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d101      	bne.n	8003926 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e04f      	b.n	80039c6 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8003926:	68ba      	ldr	r2, [r7, #8]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	88fa      	ldrh	r2, [r7, #6]
 8003930:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	88fa      	ldrh	r2, [r7, #6]
 8003936:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2200      	movs	r2, #0
 800393c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2221      	movs	r2, #33	@ 0x21
 8003942:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800394a:	4a21      	ldr	r2, [pc, #132]	@ (80039d0 <HAL_UART_Transmit_DMA+0xd4>)
 800394c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003952:	4a20      	ldr	r2, [pc, #128]	@ (80039d4 <HAL_UART_Transmit_DMA+0xd8>)
 8003954:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800395a:	4a1f      	ldr	r2, [pc, #124]	@ (80039d8 <HAL_UART_Transmit_DMA+0xdc>)
 800395c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003962:	2200      	movs	r2, #0
 8003964:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8003966:	f107 0308 	add.w	r3, r7, #8
 800396a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003972:	6819      	ldr	r1, [r3, #0]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	3304      	adds	r3, #4
 800397a:	461a      	mov	r2, r3
 800397c:	88fb      	ldrh	r3, [r7, #6]
 800397e:	f7fe f9d1 	bl	8001d24 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800398a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	3314      	adds	r3, #20
 8003992:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	e853 3f00 	ldrex	r3, [r3]
 800399a:	617b      	str	r3, [r7, #20]
   return(result);
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	3314      	adds	r3, #20
 80039aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80039ac:	627a      	str	r2, [r7, #36]	@ 0x24
 80039ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b0:	6a39      	ldr	r1, [r7, #32]
 80039b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039b4:	e841 2300 	strex	r3, r2, [r1]
 80039b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d1e5      	bne.n	800398c <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80039c0:	2300      	movs	r3, #0
 80039c2:	e000      	b.n	80039c6 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80039c4:	2302      	movs	r3, #2
  }
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3730      	adds	r7, #48	@ 0x30
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	08003f55 	.word	0x08003f55
 80039d4:	08003fef 	.word	0x08003fef
 80039d8:	0800400b 	.word	0x0800400b

080039dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b0ba      	sub	sp, #232	@ 0xe8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	695b      	ldr	r3, [r3, #20]
 80039fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003a02:	2300      	movs	r3, #0
 8003a04:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a12:	f003 030f 	and.w	r3, r3, #15
 8003a16:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003a1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d10f      	bne.n	8003a42 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a26:	f003 0320 	and.w	r3, r3, #32
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d009      	beq.n	8003a42 <HAL_UART_IRQHandler+0x66>
 8003a2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a32:	f003 0320 	and.w	r3, r3, #32
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d003      	beq.n	8003a42 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f000 fc36 	bl	80042ac <UART_Receive_IT>
      return;
 8003a40:	e25b      	b.n	8003efa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003a42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	f000 80de 	beq.w	8003c08 <HAL_UART_IRQHandler+0x22c>
 8003a4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a50:	f003 0301 	and.w	r3, r3, #1
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d106      	bne.n	8003a66 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003a58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a5c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	f000 80d1 	beq.w	8003c08 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003a66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00b      	beq.n	8003a8a <HAL_UART_IRQHandler+0xae>
 8003a72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d005      	beq.n	8003a8a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a82:	f043 0201 	orr.w	r2, r3, #1
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a8e:	f003 0304 	and.w	r3, r3, #4
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00b      	beq.n	8003aae <HAL_UART_IRQHandler+0xd2>
 8003a96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a9a:	f003 0301 	and.w	r3, r3, #1
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d005      	beq.n	8003aae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aa6:	f043 0202 	orr.w	r2, r3, #2
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003aae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00b      	beq.n	8003ad2 <HAL_UART_IRQHandler+0xf6>
 8003aba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003abe:	f003 0301 	and.w	r3, r3, #1
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d005      	beq.n	8003ad2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aca:	f043 0204 	orr.w	r2, r3, #4
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003ad2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ad6:	f003 0308 	and.w	r3, r3, #8
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d011      	beq.n	8003b02 <HAL_UART_IRQHandler+0x126>
 8003ade:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ae2:	f003 0320 	and.w	r3, r3, #32
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d105      	bne.n	8003af6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003aea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003aee:	f003 0301 	and.w	r3, r3, #1
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d005      	beq.n	8003b02 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003afa:	f043 0208 	orr.w	r2, r3, #8
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	f000 81f2 	beq.w	8003ef0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b10:	f003 0320 	and.w	r3, r3, #32
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d008      	beq.n	8003b2a <HAL_UART_IRQHandler+0x14e>
 8003b18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b1c:	f003 0320 	and.w	r3, r3, #32
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d002      	beq.n	8003b2a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f000 fbc1 	bl	80042ac <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	695b      	ldr	r3, [r3, #20]
 8003b30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b34:	2b40      	cmp	r3, #64	@ 0x40
 8003b36:	bf0c      	ite	eq
 8003b38:	2301      	moveq	r3, #1
 8003b3a:	2300      	movne	r3, #0
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b46:	f003 0308 	and.w	r3, r3, #8
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d103      	bne.n	8003b56 <HAL_UART_IRQHandler+0x17a>
 8003b4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d04f      	beq.n	8003bf6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 fac9 	bl	80040ee <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	695b      	ldr	r3, [r3, #20]
 8003b62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b66:	2b40      	cmp	r3, #64	@ 0x40
 8003b68:	d141      	bne.n	8003bee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	3314      	adds	r3, #20
 8003b70:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b74:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003b78:	e853 3f00 	ldrex	r3, [r3]
 8003b7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003b80:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003b84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b88:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	3314      	adds	r3, #20
 8003b92:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003b96:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003b9a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b9e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003ba2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003ba6:	e841 2300 	strex	r3, r2, [r1]
 8003baa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003bae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d1d9      	bne.n	8003b6a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d013      	beq.n	8003be6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bc2:	4a7e      	ldr	r2, [pc, #504]	@ (8003dbc <HAL_UART_IRQHandler+0x3e0>)
 8003bc4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f7fe f972 	bl	8001eb4 <HAL_DMA_Abort_IT>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d016      	beq.n	8003c04 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003be0:	4610      	mov	r0, r2
 8003be2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003be4:	e00e      	b.n	8003c04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 f99e 	bl	8003f28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bec:	e00a      	b.n	8003c04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 f99a 	bl	8003f28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bf4:	e006      	b.n	8003c04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 f996 	bl	8003f28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003c02:	e175      	b.n	8003ef0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c04:	bf00      	nop
    return;
 8003c06:	e173      	b.n	8003ef0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	f040 814f 	bne.w	8003eb0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003c12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c16:	f003 0310 	and.w	r3, r3, #16
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	f000 8148 	beq.w	8003eb0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003c20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c24:	f003 0310 	and.w	r3, r3, #16
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	f000 8141 	beq.w	8003eb0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c2e:	2300      	movs	r3, #0
 8003c30:	60bb      	str	r3, [r7, #8]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	60bb      	str	r3, [r7, #8]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	60bb      	str	r3, [r7, #8]
 8003c42:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	695b      	ldr	r3, [r3, #20]
 8003c4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c4e:	2b40      	cmp	r3, #64	@ 0x40
 8003c50:	f040 80b6 	bne.w	8003dc0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003c60:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	f000 8145 	beq.w	8003ef4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003c6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003c72:	429a      	cmp	r2, r3
 8003c74:	f080 813e 	bcs.w	8003ef4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003c7e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c84:	69db      	ldr	r3, [r3, #28]
 8003c86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c8a:	f000 8088 	beq.w	8003d9e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	330c      	adds	r3, #12
 8003c94:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c98:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003c9c:	e853 3f00 	ldrex	r3, [r3]
 8003ca0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003ca4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003ca8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003cac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	330c      	adds	r3, #12
 8003cb6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003cba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003cbe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003cc6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003cca:	e841 2300 	strex	r3, r2, [r1]
 8003cce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003cd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d1d9      	bne.n	8003c8e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	3314      	adds	r3, #20
 8003ce0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ce4:	e853 3f00 	ldrex	r3, [r3]
 8003ce8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003cea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003cec:	f023 0301 	bic.w	r3, r3, #1
 8003cf0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	3314      	adds	r3, #20
 8003cfa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003cfe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003d02:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d04:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003d06:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003d0a:	e841 2300 	strex	r3, r2, [r1]
 8003d0e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003d10:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d1e1      	bne.n	8003cda <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	3314      	adds	r3, #20
 8003d1c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d1e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003d20:	e853 3f00 	ldrex	r3, [r3]
 8003d24:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003d26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d2c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	3314      	adds	r3, #20
 8003d36:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003d3a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003d3c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d3e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003d40:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003d42:	e841 2300 	strex	r3, r2, [r1]
 8003d46:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003d48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d1e3      	bne.n	8003d16 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2220      	movs	r2, #32
 8003d52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	330c      	adds	r3, #12
 8003d62:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d66:	e853 3f00 	ldrex	r3, [r3]
 8003d6a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003d6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d6e:	f023 0310 	bic.w	r3, r3, #16
 8003d72:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	330c      	adds	r3, #12
 8003d7c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003d80:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003d82:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d84:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003d86:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003d88:	e841 2300 	strex	r3, r2, [r1]
 8003d8c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003d8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d1e3      	bne.n	8003d5c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f7fe f81b 	bl	8001dd4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2202      	movs	r2, #2
 8003da2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	4619      	mov	r1, r3
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f000 f8c1 	bl	8003f3c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003dba:	e09b      	b.n	8003ef4 <HAL_UART_IRQHandler+0x518>
 8003dbc:	080041b5 	.word	0x080041b5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	f000 808e 	beq.w	8003ef8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003ddc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	f000 8089 	beq.w	8003ef8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	330c      	adds	r3, #12
 8003dec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003df0:	e853 3f00 	ldrex	r3, [r3]
 8003df4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003df6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003df8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003dfc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	330c      	adds	r3, #12
 8003e06:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003e0a:	647a      	str	r2, [r7, #68]	@ 0x44
 8003e0c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e0e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003e10:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e12:	e841 2300 	strex	r3, r2, [r1]
 8003e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003e18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1e3      	bne.n	8003de6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	3314      	adds	r3, #20
 8003e24:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e28:	e853 3f00 	ldrex	r3, [r3]
 8003e2c:	623b      	str	r3, [r7, #32]
   return(result);
 8003e2e:	6a3b      	ldr	r3, [r7, #32]
 8003e30:	f023 0301 	bic.w	r3, r3, #1
 8003e34:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	3314      	adds	r3, #20
 8003e3e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003e42:	633a      	str	r2, [r7, #48]	@ 0x30
 8003e44:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e4a:	e841 2300 	strex	r3, r2, [r1]
 8003e4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003e50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d1e3      	bne.n	8003e1e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2220      	movs	r2, #32
 8003e5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	330c      	adds	r3, #12
 8003e6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	e853 3f00 	ldrex	r3, [r3]
 8003e72:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f023 0310 	bic.w	r3, r3, #16
 8003e7a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	330c      	adds	r3, #12
 8003e84:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003e88:	61fa      	str	r2, [r7, #28]
 8003e8a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e8c:	69b9      	ldr	r1, [r7, #24]
 8003e8e:	69fa      	ldr	r2, [r7, #28]
 8003e90:	e841 2300 	strex	r3, r2, [r1]
 8003e94:	617b      	str	r3, [r7, #20]
   return(result);
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d1e3      	bne.n	8003e64 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2202      	movs	r2, #2
 8003ea0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ea2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f000 f847 	bl	8003f3c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003eae:	e023      	b.n	8003ef8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003eb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003eb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d009      	beq.n	8003ed0 <HAL_UART_IRQHandler+0x4f4>
 8003ebc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ec0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d003      	beq.n	8003ed0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f000 f987 	bl	80041dc <UART_Transmit_IT>
    return;
 8003ece:	e014      	b.n	8003efa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003ed0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ed4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d00e      	beq.n	8003efa <HAL_UART_IRQHandler+0x51e>
 8003edc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ee0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d008      	beq.n	8003efa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f000 f9c7 	bl	800427c <UART_EndTransmit_IT>
    return;
 8003eee:	e004      	b.n	8003efa <HAL_UART_IRQHandler+0x51e>
    return;
 8003ef0:	bf00      	nop
 8003ef2:	e002      	b.n	8003efa <HAL_UART_IRQHandler+0x51e>
      return;
 8003ef4:	bf00      	nop
 8003ef6:	e000      	b.n	8003efa <HAL_UART_IRQHandler+0x51e>
      return;
 8003ef8:	bf00      	nop
  }
}
 8003efa:	37e8      	adds	r7, #232	@ 0xe8
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003f08:	bf00      	nop
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003f1c:	bf00      	nop
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003f30:	bf00      	nop
 8003f32:	370c      	adds	r7, #12
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr

08003f3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	460b      	mov	r3, r1
 8003f46:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f48:	bf00      	nop
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b090      	sub	sp, #64	@ 0x40
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f60:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d137      	bne.n	8003fe0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8003f70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f72:	2200      	movs	r2, #0
 8003f74:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003f76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	3314      	adds	r3, #20
 8003f7c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f80:	e853 3f00 	ldrex	r3, [r3]
 8003f84:	623b      	str	r3, [r7, #32]
   return(result);
 8003f86:	6a3b      	ldr	r3, [r7, #32]
 8003f88:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f8c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	3314      	adds	r3, #20
 8003f94:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003f96:	633a      	str	r2, [r7, #48]	@ 0x30
 8003f98:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f9a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f9e:	e841 2300 	strex	r3, r2, [r1]
 8003fa2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003fa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d1e5      	bne.n	8003f76 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003faa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	330c      	adds	r3, #12
 8003fb0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	e853 3f00 	ldrex	r3, [r3]
 8003fb8:	60fb      	str	r3, [r7, #12]
   return(result);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003fc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	330c      	adds	r3, #12
 8003fc8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003fca:	61fa      	str	r2, [r7, #28]
 8003fcc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fce:	69b9      	ldr	r1, [r7, #24]
 8003fd0:	69fa      	ldr	r2, [r7, #28]
 8003fd2:	e841 2300 	strex	r3, r2, [r1]
 8003fd6:	617b      	str	r3, [r7, #20]
   return(result);
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d1e5      	bne.n	8003faa <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003fde:	e002      	b.n	8003fe6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8003fe0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003fe2:	f7fd f835 	bl	8001050 <HAL_UART_TxCpltCallback>
}
 8003fe6:	bf00      	nop
 8003fe8:	3740      	adds	r7, #64	@ 0x40
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}

08003fee <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003fee:	b580      	push	{r7, lr}
 8003ff0:	b084      	sub	sp, #16
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ffa:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003ffc:	68f8      	ldr	r0, [r7, #12]
 8003ffe:	f7ff ff7f 	bl	8003f00 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004002:	bf00      	nop
 8004004:	3710      	adds	r7, #16
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}

0800400a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800400a:	b580      	push	{r7, lr}
 800400c:	b084      	sub	sp, #16
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004012:	2300      	movs	r3, #0
 8004014:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800401a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	695b      	ldr	r3, [r3, #20]
 8004022:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004026:	2b80      	cmp	r3, #128	@ 0x80
 8004028:	bf0c      	ite	eq
 800402a:	2301      	moveq	r3, #1
 800402c:	2300      	movne	r3, #0
 800402e:	b2db      	uxtb	r3, r3
 8004030:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004038:	b2db      	uxtb	r3, r3
 800403a:	2b21      	cmp	r3, #33	@ 0x21
 800403c:	d108      	bne.n	8004050 <UART_DMAError+0x46>
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d005      	beq.n	8004050 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	2200      	movs	r2, #0
 8004048:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800404a:	68b8      	ldr	r0, [r7, #8]
 800404c:	f000 f827 	bl	800409e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	695b      	ldr	r3, [r3, #20]
 8004056:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800405a:	2b40      	cmp	r3, #64	@ 0x40
 800405c:	bf0c      	ite	eq
 800405e:	2301      	moveq	r3, #1
 8004060:	2300      	movne	r3, #0
 8004062:	b2db      	uxtb	r3, r3
 8004064:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2b22      	cmp	r3, #34	@ 0x22
 8004070:	d108      	bne.n	8004084 <UART_DMAError+0x7a>
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d005      	beq.n	8004084 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	2200      	movs	r2, #0
 800407c:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800407e:	68b8      	ldr	r0, [r7, #8]
 8004080:	f000 f835 	bl	80040ee <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004088:	f043 0210 	orr.w	r2, r3, #16
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004090:	68b8      	ldr	r0, [r7, #8]
 8004092:	f7ff ff49 	bl	8003f28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004096:	bf00      	nop
 8004098:	3710      	adds	r7, #16
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}

0800409e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800409e:	b480      	push	{r7}
 80040a0:	b089      	sub	sp, #36	@ 0x24
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	330c      	adds	r3, #12
 80040ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	e853 3f00 	ldrex	r3, [r3]
 80040b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80040bc:	61fb      	str	r3, [r7, #28]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	330c      	adds	r3, #12
 80040c4:	69fa      	ldr	r2, [r7, #28]
 80040c6:	61ba      	str	r2, [r7, #24]
 80040c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ca:	6979      	ldr	r1, [r7, #20]
 80040cc:	69ba      	ldr	r2, [r7, #24]
 80040ce:	e841 2300 	strex	r3, r2, [r1]
 80040d2:	613b      	str	r3, [r7, #16]
   return(result);
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d1e5      	bne.n	80040a6 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2220      	movs	r2, #32
 80040de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80040e2:	bf00      	nop
 80040e4:	3724      	adds	r7, #36	@ 0x24
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr

080040ee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040ee:	b480      	push	{r7}
 80040f0:	b095      	sub	sp, #84	@ 0x54
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	330c      	adds	r3, #12
 80040fc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004100:	e853 3f00 	ldrex	r3, [r3]
 8004104:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004108:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800410c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	330c      	adds	r3, #12
 8004114:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004116:	643a      	str	r2, [r7, #64]	@ 0x40
 8004118:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800411a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800411c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800411e:	e841 2300 	strex	r3, r2, [r1]
 8004122:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1e5      	bne.n	80040f6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	3314      	adds	r3, #20
 8004130:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004132:	6a3b      	ldr	r3, [r7, #32]
 8004134:	e853 3f00 	ldrex	r3, [r3]
 8004138:	61fb      	str	r3, [r7, #28]
   return(result);
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	f023 0301 	bic.w	r3, r3, #1
 8004140:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	3314      	adds	r3, #20
 8004148:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800414a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800414c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800414e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004150:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004152:	e841 2300 	strex	r3, r2, [r1]
 8004156:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800415a:	2b00      	cmp	r3, #0
 800415c:	d1e5      	bne.n	800412a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004162:	2b01      	cmp	r3, #1
 8004164:	d119      	bne.n	800419a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	330c      	adds	r3, #12
 800416c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	e853 3f00 	ldrex	r3, [r3]
 8004174:	60bb      	str	r3, [r7, #8]
   return(result);
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	f023 0310 	bic.w	r3, r3, #16
 800417c:	647b      	str	r3, [r7, #68]	@ 0x44
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	330c      	adds	r3, #12
 8004184:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004186:	61ba      	str	r2, [r7, #24]
 8004188:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800418a:	6979      	ldr	r1, [r7, #20]
 800418c:	69ba      	ldr	r2, [r7, #24]
 800418e:	e841 2300 	strex	r3, r2, [r1]
 8004192:	613b      	str	r3, [r7, #16]
   return(result);
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d1e5      	bne.n	8004166 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2220      	movs	r2, #32
 800419e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80041a8:	bf00      	nop
 80041aa:	3754      	adds	r7, #84	@ 0x54
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2200      	movs	r2, #0
 80041c6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2200      	movs	r2, #0
 80041cc:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80041ce:	68f8      	ldr	r0, [r7, #12]
 80041d0:	f7ff feaa 	bl	8003f28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041d4:	bf00      	nop
 80041d6:	3710      	adds	r7, #16
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}

080041dc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80041dc:	b480      	push	{r7}
 80041de:	b085      	sub	sp, #20
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	2b21      	cmp	r3, #33	@ 0x21
 80041ee:	d13e      	bne.n	800426e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041f8:	d114      	bne.n	8004224 <UART_Transmit_IT+0x48>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d110      	bne.n	8004224 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a1b      	ldr	r3, [r3, #32]
 8004206:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	881b      	ldrh	r3, [r3, #0]
 800420c:	461a      	mov	r2, r3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004216:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a1b      	ldr	r3, [r3, #32]
 800421c:	1c9a      	adds	r2, r3, #2
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	621a      	str	r2, [r3, #32]
 8004222:	e008      	b.n	8004236 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a1b      	ldr	r3, [r3, #32]
 8004228:	1c59      	adds	r1, r3, #1
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	6211      	str	r1, [r2, #32]
 800422e:	781a      	ldrb	r2, [r3, #0]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800423a:	b29b      	uxth	r3, r3
 800423c:	3b01      	subs	r3, #1
 800423e:	b29b      	uxth	r3, r3
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	4619      	mov	r1, r3
 8004244:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004246:	2b00      	cmp	r3, #0
 8004248:	d10f      	bne.n	800426a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	68da      	ldr	r2, [r3, #12]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004258:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68da      	ldr	r2, [r3, #12]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004268:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800426a:	2300      	movs	r3, #0
 800426c:	e000      	b.n	8004270 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800426e:	2302      	movs	r3, #2
  }
}
 8004270:	4618      	mov	r0, r3
 8004272:	3714      	adds	r7, #20
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr

0800427c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	68da      	ldr	r2, [r3, #12]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004292:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2220      	movs	r2, #32
 8004298:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f7fc fed7 	bl	8001050 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80042a2:	2300      	movs	r3, #0
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3708      	adds	r7, #8
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}

080042ac <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b08c      	sub	sp, #48	@ 0x30
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	2b22      	cmp	r3, #34	@ 0x22
 80042be:	f040 80ae 	bne.w	800441e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042ca:	d117      	bne.n	80042fc <UART_Receive_IT+0x50>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	691b      	ldr	r3, [r3, #16]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d113      	bne.n	80042fc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80042d4:	2300      	movs	r3, #0
 80042d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042dc:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042ea:	b29a      	uxth	r2, r3
 80042ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042ee:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042f4:	1c9a      	adds	r2, r3, #2
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	629a      	str	r2, [r3, #40]	@ 0x28
 80042fa:	e026      	b.n	800434a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004300:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004302:	2300      	movs	r3, #0
 8004304:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800430e:	d007      	beq.n	8004320 <UART_Receive_IT+0x74>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d10a      	bne.n	800432e <UART_Receive_IT+0x82>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	691b      	ldr	r3, [r3, #16]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d106      	bne.n	800432e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	b2da      	uxtb	r2, r3
 8004328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800432a:	701a      	strb	r2, [r3, #0]
 800432c:	e008      	b.n	8004340 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	b2db      	uxtb	r3, r3
 8004336:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800433a:	b2da      	uxtb	r2, r3
 800433c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800433e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004344:	1c5a      	adds	r2, r3, #1
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800434e:	b29b      	uxth	r3, r3
 8004350:	3b01      	subs	r3, #1
 8004352:	b29b      	uxth	r3, r3
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	4619      	mov	r1, r3
 8004358:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800435a:	2b00      	cmp	r3, #0
 800435c:	d15d      	bne.n	800441a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	68da      	ldr	r2, [r3, #12]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f022 0220 	bic.w	r2, r2, #32
 800436c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68da      	ldr	r2, [r3, #12]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800437c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	695a      	ldr	r2, [r3, #20]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f022 0201 	bic.w	r2, r2, #1
 800438c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2220      	movs	r2, #32
 8004392:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d135      	bne.n	8004410 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	330c      	adds	r3, #12
 80043b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	e853 3f00 	ldrex	r3, [r3]
 80043b8:	613b      	str	r3, [r7, #16]
   return(result);
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	f023 0310 	bic.w	r3, r3, #16
 80043c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	330c      	adds	r3, #12
 80043c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043ca:	623a      	str	r2, [r7, #32]
 80043cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ce:	69f9      	ldr	r1, [r7, #28]
 80043d0:	6a3a      	ldr	r2, [r7, #32]
 80043d2:	e841 2300 	strex	r3, r2, [r1]
 80043d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80043d8:	69bb      	ldr	r3, [r7, #24]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d1e5      	bne.n	80043aa <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0310 	and.w	r3, r3, #16
 80043e8:	2b10      	cmp	r3, #16
 80043ea:	d10a      	bne.n	8004402 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80043ec:	2300      	movs	r3, #0
 80043ee:	60fb      	str	r3, [r7, #12]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	60fb      	str	r3, [r7, #12]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	60fb      	str	r3, [r7, #12]
 8004400:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004406:	4619      	mov	r1, r3
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f7ff fd97 	bl	8003f3c <HAL_UARTEx_RxEventCallback>
 800440e:	e002      	b.n	8004416 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f7ff fd7f 	bl	8003f14 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004416:	2300      	movs	r3, #0
 8004418:	e002      	b.n	8004420 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800441a:	2300      	movs	r3, #0
 800441c:	e000      	b.n	8004420 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800441e:	2302      	movs	r3, #2
  }
}
 8004420:	4618      	mov	r0, r3
 8004422:	3730      	adds	r7, #48	@ 0x30
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004428:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800442c:	b0c0      	sub	sp, #256	@ 0x100
 800442e:	af00      	add	r7, sp, #0
 8004430:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	691b      	ldr	r3, [r3, #16]
 800443c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004444:	68d9      	ldr	r1, [r3, #12]
 8004446:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	ea40 0301 	orr.w	r3, r0, r1
 8004450:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004456:	689a      	ldr	r2, [r3, #8]
 8004458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	431a      	orrs	r2, r3
 8004460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004464:	695b      	ldr	r3, [r3, #20]
 8004466:	431a      	orrs	r2, r3
 8004468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800446c:	69db      	ldr	r3, [r3, #28]
 800446e:	4313      	orrs	r3, r2
 8004470:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004480:	f021 010c 	bic.w	r1, r1, #12
 8004484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800448e:	430b      	orrs	r3, r1
 8004490:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	695b      	ldr	r3, [r3, #20]
 800449a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800449e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044a2:	6999      	ldr	r1, [r3, #24]
 80044a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	ea40 0301 	orr.w	r3, r0, r1
 80044ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80044b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	4b8f      	ldr	r3, [pc, #572]	@ (80046f4 <UART_SetConfig+0x2cc>)
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d005      	beq.n	80044c8 <UART_SetConfig+0xa0>
 80044bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	4b8d      	ldr	r3, [pc, #564]	@ (80046f8 <UART_SetConfig+0x2d0>)
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d104      	bne.n	80044d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80044c8:	f7fe fd48 	bl	8002f5c <HAL_RCC_GetPCLK2Freq>
 80044cc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80044d0:	e003      	b.n	80044da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80044d2:	f7fe fd2f 	bl	8002f34 <HAL_RCC_GetPCLK1Freq>
 80044d6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044de:	69db      	ldr	r3, [r3, #28]
 80044e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044e4:	f040 810c 	bne.w	8004700 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80044e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044ec:	2200      	movs	r2, #0
 80044ee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80044f2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80044f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80044fa:	4622      	mov	r2, r4
 80044fc:	462b      	mov	r3, r5
 80044fe:	1891      	adds	r1, r2, r2
 8004500:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004502:	415b      	adcs	r3, r3
 8004504:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004506:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800450a:	4621      	mov	r1, r4
 800450c:	eb12 0801 	adds.w	r8, r2, r1
 8004510:	4629      	mov	r1, r5
 8004512:	eb43 0901 	adc.w	r9, r3, r1
 8004516:	f04f 0200 	mov.w	r2, #0
 800451a:	f04f 0300 	mov.w	r3, #0
 800451e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004522:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004526:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800452a:	4690      	mov	r8, r2
 800452c:	4699      	mov	r9, r3
 800452e:	4623      	mov	r3, r4
 8004530:	eb18 0303 	adds.w	r3, r8, r3
 8004534:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004538:	462b      	mov	r3, r5
 800453a:	eb49 0303 	adc.w	r3, r9, r3
 800453e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800454e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004552:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004556:	460b      	mov	r3, r1
 8004558:	18db      	adds	r3, r3, r3
 800455a:	653b      	str	r3, [r7, #80]	@ 0x50
 800455c:	4613      	mov	r3, r2
 800455e:	eb42 0303 	adc.w	r3, r2, r3
 8004562:	657b      	str	r3, [r7, #84]	@ 0x54
 8004564:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004568:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800456c:	f7fb fe88 	bl	8000280 <__aeabi_uldivmod>
 8004570:	4602      	mov	r2, r0
 8004572:	460b      	mov	r3, r1
 8004574:	4b61      	ldr	r3, [pc, #388]	@ (80046fc <UART_SetConfig+0x2d4>)
 8004576:	fba3 2302 	umull	r2, r3, r3, r2
 800457a:	095b      	lsrs	r3, r3, #5
 800457c:	011c      	lsls	r4, r3, #4
 800457e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004582:	2200      	movs	r2, #0
 8004584:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004588:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800458c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004590:	4642      	mov	r2, r8
 8004592:	464b      	mov	r3, r9
 8004594:	1891      	adds	r1, r2, r2
 8004596:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004598:	415b      	adcs	r3, r3
 800459a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800459c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80045a0:	4641      	mov	r1, r8
 80045a2:	eb12 0a01 	adds.w	sl, r2, r1
 80045a6:	4649      	mov	r1, r9
 80045a8:	eb43 0b01 	adc.w	fp, r3, r1
 80045ac:	f04f 0200 	mov.w	r2, #0
 80045b0:	f04f 0300 	mov.w	r3, #0
 80045b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80045b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80045bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80045c0:	4692      	mov	sl, r2
 80045c2:	469b      	mov	fp, r3
 80045c4:	4643      	mov	r3, r8
 80045c6:	eb1a 0303 	adds.w	r3, sl, r3
 80045ca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80045ce:	464b      	mov	r3, r9
 80045d0:	eb4b 0303 	adc.w	r3, fp, r3
 80045d4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80045d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80045e4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80045e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80045ec:	460b      	mov	r3, r1
 80045ee:	18db      	adds	r3, r3, r3
 80045f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80045f2:	4613      	mov	r3, r2
 80045f4:	eb42 0303 	adc.w	r3, r2, r3
 80045f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80045fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80045fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004602:	f7fb fe3d 	bl	8000280 <__aeabi_uldivmod>
 8004606:	4602      	mov	r2, r0
 8004608:	460b      	mov	r3, r1
 800460a:	4611      	mov	r1, r2
 800460c:	4b3b      	ldr	r3, [pc, #236]	@ (80046fc <UART_SetConfig+0x2d4>)
 800460e:	fba3 2301 	umull	r2, r3, r3, r1
 8004612:	095b      	lsrs	r3, r3, #5
 8004614:	2264      	movs	r2, #100	@ 0x64
 8004616:	fb02 f303 	mul.w	r3, r2, r3
 800461a:	1acb      	subs	r3, r1, r3
 800461c:	00db      	lsls	r3, r3, #3
 800461e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004622:	4b36      	ldr	r3, [pc, #216]	@ (80046fc <UART_SetConfig+0x2d4>)
 8004624:	fba3 2302 	umull	r2, r3, r3, r2
 8004628:	095b      	lsrs	r3, r3, #5
 800462a:	005b      	lsls	r3, r3, #1
 800462c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004630:	441c      	add	r4, r3
 8004632:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004636:	2200      	movs	r2, #0
 8004638:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800463c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004640:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004644:	4642      	mov	r2, r8
 8004646:	464b      	mov	r3, r9
 8004648:	1891      	adds	r1, r2, r2
 800464a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800464c:	415b      	adcs	r3, r3
 800464e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004650:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004654:	4641      	mov	r1, r8
 8004656:	1851      	adds	r1, r2, r1
 8004658:	6339      	str	r1, [r7, #48]	@ 0x30
 800465a:	4649      	mov	r1, r9
 800465c:	414b      	adcs	r3, r1
 800465e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004660:	f04f 0200 	mov.w	r2, #0
 8004664:	f04f 0300 	mov.w	r3, #0
 8004668:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800466c:	4659      	mov	r1, fp
 800466e:	00cb      	lsls	r3, r1, #3
 8004670:	4651      	mov	r1, sl
 8004672:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004676:	4651      	mov	r1, sl
 8004678:	00ca      	lsls	r2, r1, #3
 800467a:	4610      	mov	r0, r2
 800467c:	4619      	mov	r1, r3
 800467e:	4603      	mov	r3, r0
 8004680:	4642      	mov	r2, r8
 8004682:	189b      	adds	r3, r3, r2
 8004684:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004688:	464b      	mov	r3, r9
 800468a:	460a      	mov	r2, r1
 800468c:	eb42 0303 	adc.w	r3, r2, r3
 8004690:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80046a0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80046a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80046a8:	460b      	mov	r3, r1
 80046aa:	18db      	adds	r3, r3, r3
 80046ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80046ae:	4613      	mov	r3, r2
 80046b0:	eb42 0303 	adc.w	r3, r2, r3
 80046b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80046ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80046be:	f7fb fddf 	bl	8000280 <__aeabi_uldivmod>
 80046c2:	4602      	mov	r2, r0
 80046c4:	460b      	mov	r3, r1
 80046c6:	4b0d      	ldr	r3, [pc, #52]	@ (80046fc <UART_SetConfig+0x2d4>)
 80046c8:	fba3 1302 	umull	r1, r3, r3, r2
 80046cc:	095b      	lsrs	r3, r3, #5
 80046ce:	2164      	movs	r1, #100	@ 0x64
 80046d0:	fb01 f303 	mul.w	r3, r1, r3
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	00db      	lsls	r3, r3, #3
 80046d8:	3332      	adds	r3, #50	@ 0x32
 80046da:	4a08      	ldr	r2, [pc, #32]	@ (80046fc <UART_SetConfig+0x2d4>)
 80046dc:	fba2 2303 	umull	r2, r3, r2, r3
 80046e0:	095b      	lsrs	r3, r3, #5
 80046e2:	f003 0207 	and.w	r2, r3, #7
 80046e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4422      	add	r2, r4
 80046ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80046f0:	e106      	b.n	8004900 <UART_SetConfig+0x4d8>
 80046f2:	bf00      	nop
 80046f4:	40011000 	.word	0x40011000
 80046f8:	40011400 	.word	0x40011400
 80046fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004700:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004704:	2200      	movs	r2, #0
 8004706:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800470a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800470e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004712:	4642      	mov	r2, r8
 8004714:	464b      	mov	r3, r9
 8004716:	1891      	adds	r1, r2, r2
 8004718:	6239      	str	r1, [r7, #32]
 800471a:	415b      	adcs	r3, r3
 800471c:	627b      	str	r3, [r7, #36]	@ 0x24
 800471e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004722:	4641      	mov	r1, r8
 8004724:	1854      	adds	r4, r2, r1
 8004726:	4649      	mov	r1, r9
 8004728:	eb43 0501 	adc.w	r5, r3, r1
 800472c:	f04f 0200 	mov.w	r2, #0
 8004730:	f04f 0300 	mov.w	r3, #0
 8004734:	00eb      	lsls	r3, r5, #3
 8004736:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800473a:	00e2      	lsls	r2, r4, #3
 800473c:	4614      	mov	r4, r2
 800473e:	461d      	mov	r5, r3
 8004740:	4643      	mov	r3, r8
 8004742:	18e3      	adds	r3, r4, r3
 8004744:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004748:	464b      	mov	r3, r9
 800474a:	eb45 0303 	adc.w	r3, r5, r3
 800474e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800475e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004762:	f04f 0200 	mov.w	r2, #0
 8004766:	f04f 0300 	mov.w	r3, #0
 800476a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800476e:	4629      	mov	r1, r5
 8004770:	008b      	lsls	r3, r1, #2
 8004772:	4621      	mov	r1, r4
 8004774:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004778:	4621      	mov	r1, r4
 800477a:	008a      	lsls	r2, r1, #2
 800477c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004780:	f7fb fd7e 	bl	8000280 <__aeabi_uldivmod>
 8004784:	4602      	mov	r2, r0
 8004786:	460b      	mov	r3, r1
 8004788:	4b60      	ldr	r3, [pc, #384]	@ (800490c <UART_SetConfig+0x4e4>)
 800478a:	fba3 2302 	umull	r2, r3, r3, r2
 800478e:	095b      	lsrs	r3, r3, #5
 8004790:	011c      	lsls	r4, r3, #4
 8004792:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004796:	2200      	movs	r2, #0
 8004798:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800479c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80047a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80047a4:	4642      	mov	r2, r8
 80047a6:	464b      	mov	r3, r9
 80047a8:	1891      	adds	r1, r2, r2
 80047aa:	61b9      	str	r1, [r7, #24]
 80047ac:	415b      	adcs	r3, r3
 80047ae:	61fb      	str	r3, [r7, #28]
 80047b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047b4:	4641      	mov	r1, r8
 80047b6:	1851      	adds	r1, r2, r1
 80047b8:	6139      	str	r1, [r7, #16]
 80047ba:	4649      	mov	r1, r9
 80047bc:	414b      	adcs	r3, r1
 80047be:	617b      	str	r3, [r7, #20]
 80047c0:	f04f 0200 	mov.w	r2, #0
 80047c4:	f04f 0300 	mov.w	r3, #0
 80047c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80047cc:	4659      	mov	r1, fp
 80047ce:	00cb      	lsls	r3, r1, #3
 80047d0:	4651      	mov	r1, sl
 80047d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047d6:	4651      	mov	r1, sl
 80047d8:	00ca      	lsls	r2, r1, #3
 80047da:	4610      	mov	r0, r2
 80047dc:	4619      	mov	r1, r3
 80047de:	4603      	mov	r3, r0
 80047e0:	4642      	mov	r2, r8
 80047e2:	189b      	adds	r3, r3, r2
 80047e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80047e8:	464b      	mov	r3, r9
 80047ea:	460a      	mov	r2, r1
 80047ec:	eb42 0303 	adc.w	r3, r2, r3
 80047f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80047f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80047fe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004800:	f04f 0200 	mov.w	r2, #0
 8004804:	f04f 0300 	mov.w	r3, #0
 8004808:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800480c:	4649      	mov	r1, r9
 800480e:	008b      	lsls	r3, r1, #2
 8004810:	4641      	mov	r1, r8
 8004812:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004816:	4641      	mov	r1, r8
 8004818:	008a      	lsls	r2, r1, #2
 800481a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800481e:	f7fb fd2f 	bl	8000280 <__aeabi_uldivmod>
 8004822:	4602      	mov	r2, r0
 8004824:	460b      	mov	r3, r1
 8004826:	4611      	mov	r1, r2
 8004828:	4b38      	ldr	r3, [pc, #224]	@ (800490c <UART_SetConfig+0x4e4>)
 800482a:	fba3 2301 	umull	r2, r3, r3, r1
 800482e:	095b      	lsrs	r3, r3, #5
 8004830:	2264      	movs	r2, #100	@ 0x64
 8004832:	fb02 f303 	mul.w	r3, r2, r3
 8004836:	1acb      	subs	r3, r1, r3
 8004838:	011b      	lsls	r3, r3, #4
 800483a:	3332      	adds	r3, #50	@ 0x32
 800483c:	4a33      	ldr	r2, [pc, #204]	@ (800490c <UART_SetConfig+0x4e4>)
 800483e:	fba2 2303 	umull	r2, r3, r2, r3
 8004842:	095b      	lsrs	r3, r3, #5
 8004844:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004848:	441c      	add	r4, r3
 800484a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800484e:	2200      	movs	r2, #0
 8004850:	673b      	str	r3, [r7, #112]	@ 0x70
 8004852:	677a      	str	r2, [r7, #116]	@ 0x74
 8004854:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004858:	4642      	mov	r2, r8
 800485a:	464b      	mov	r3, r9
 800485c:	1891      	adds	r1, r2, r2
 800485e:	60b9      	str	r1, [r7, #8]
 8004860:	415b      	adcs	r3, r3
 8004862:	60fb      	str	r3, [r7, #12]
 8004864:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004868:	4641      	mov	r1, r8
 800486a:	1851      	adds	r1, r2, r1
 800486c:	6039      	str	r1, [r7, #0]
 800486e:	4649      	mov	r1, r9
 8004870:	414b      	adcs	r3, r1
 8004872:	607b      	str	r3, [r7, #4]
 8004874:	f04f 0200 	mov.w	r2, #0
 8004878:	f04f 0300 	mov.w	r3, #0
 800487c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004880:	4659      	mov	r1, fp
 8004882:	00cb      	lsls	r3, r1, #3
 8004884:	4651      	mov	r1, sl
 8004886:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800488a:	4651      	mov	r1, sl
 800488c:	00ca      	lsls	r2, r1, #3
 800488e:	4610      	mov	r0, r2
 8004890:	4619      	mov	r1, r3
 8004892:	4603      	mov	r3, r0
 8004894:	4642      	mov	r2, r8
 8004896:	189b      	adds	r3, r3, r2
 8004898:	66bb      	str	r3, [r7, #104]	@ 0x68
 800489a:	464b      	mov	r3, r9
 800489c:	460a      	mov	r2, r1
 800489e:	eb42 0303 	adc.w	r3, r2, r3
 80048a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80048a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	663b      	str	r3, [r7, #96]	@ 0x60
 80048ae:	667a      	str	r2, [r7, #100]	@ 0x64
 80048b0:	f04f 0200 	mov.w	r2, #0
 80048b4:	f04f 0300 	mov.w	r3, #0
 80048b8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80048bc:	4649      	mov	r1, r9
 80048be:	008b      	lsls	r3, r1, #2
 80048c0:	4641      	mov	r1, r8
 80048c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048c6:	4641      	mov	r1, r8
 80048c8:	008a      	lsls	r2, r1, #2
 80048ca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80048ce:	f7fb fcd7 	bl	8000280 <__aeabi_uldivmod>
 80048d2:	4602      	mov	r2, r0
 80048d4:	460b      	mov	r3, r1
 80048d6:	4b0d      	ldr	r3, [pc, #52]	@ (800490c <UART_SetConfig+0x4e4>)
 80048d8:	fba3 1302 	umull	r1, r3, r3, r2
 80048dc:	095b      	lsrs	r3, r3, #5
 80048de:	2164      	movs	r1, #100	@ 0x64
 80048e0:	fb01 f303 	mul.w	r3, r1, r3
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	011b      	lsls	r3, r3, #4
 80048e8:	3332      	adds	r3, #50	@ 0x32
 80048ea:	4a08      	ldr	r2, [pc, #32]	@ (800490c <UART_SetConfig+0x4e4>)
 80048ec:	fba2 2303 	umull	r2, r3, r2, r3
 80048f0:	095b      	lsrs	r3, r3, #5
 80048f2:	f003 020f 	and.w	r2, r3, #15
 80048f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4422      	add	r2, r4
 80048fe:	609a      	str	r2, [r3, #8]
}
 8004900:	bf00      	nop
 8004902:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004906:	46bd      	mov	sp, r7
 8004908:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800490c:	51eb851f 	.word	0x51eb851f

08004910 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004910:	b580      	push	{r7, lr}
 8004912:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004914:	4b05      	ldr	r3, [pc, #20]	@ (800492c <SysTick_Handler+0x1c>)
 8004916:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004918:	f001 ff2a 	bl	8006770 <xTaskGetSchedulerState>
 800491c:	4603      	mov	r3, r0
 800491e:	2b01      	cmp	r3, #1
 8004920:	d001      	beq.n	8004926 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004922:	f003 f811 	bl	8007948 <xPortSysTickHandler>
  }
}
 8004926:	bf00      	nop
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	e000e010 	.word	0xe000e010

08004930 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004930:	b480      	push	{r7}
 8004932:	b085      	sub	sp, #20
 8004934:	af00      	add	r7, sp, #0
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	4a07      	ldr	r2, [pc, #28]	@ (800495c <vApplicationGetIdleTaskMemory+0x2c>)
 8004940:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	4a06      	ldr	r2, [pc, #24]	@ (8004960 <vApplicationGetIdleTaskMemory+0x30>)
 8004946:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2280      	movs	r2, #128	@ 0x80
 800494c:	601a      	str	r2, [r3, #0]
}
 800494e:	bf00      	nop
 8004950:	3714      	adds	r7, #20
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr
 800495a:	bf00      	nop
 800495c:	20000298 	.word	0x20000298
 8004960:	20000370 	.word	0x20000370

08004964 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004964:	b480      	push	{r7}
 8004966:	b085      	sub	sp, #20
 8004968:	af00      	add	r7, sp, #0
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	60b9      	str	r1, [r7, #8]
 800496e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	4a07      	ldr	r2, [pc, #28]	@ (8004990 <vApplicationGetTimerTaskMemory+0x2c>)
 8004974:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	4a06      	ldr	r2, [pc, #24]	@ (8004994 <vApplicationGetTimerTaskMemory+0x30>)
 800497a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004982:	601a      	str	r2, [r3, #0]
}
 8004984:	bf00      	nop
 8004986:	3714      	adds	r7, #20
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr
 8004990:	20000570 	.word	0x20000570
 8004994:	20000648 	.word	0x20000648

08004998 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f103 0208 	add.w	r2, r3, #8
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80049b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f103 0208 	add.w	r2, r3, #8
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f103 0208 	add.w	r2, r3, #8
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80049cc:	bf00      	nop
 80049ce:	370c      	adds	r7, #12
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr

080049d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80049e6:	bf00      	nop
 80049e8:	370c      	adds	r7, #12
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr

080049f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80049f2:	b480      	push	{r7}
 80049f4:	b085      	sub	sp, #20
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
 80049fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	689a      	ldr	r2, [r3, #8]
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	683a      	ldr	r2, [r7, #0]
 8004a16:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	683a      	ldr	r2, [r7, #0]
 8004a1c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	1c5a      	adds	r2, r3, #1
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	601a      	str	r2, [r3, #0]
}
 8004a2e:	bf00      	nop
 8004a30:	3714      	adds	r7, #20
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr

08004a3a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a3a:	b480      	push	{r7}
 8004a3c:	b085      	sub	sp, #20
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]
 8004a42:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a50:	d103      	bne.n	8004a5a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	691b      	ldr	r3, [r3, #16]
 8004a56:	60fb      	str	r3, [r7, #12]
 8004a58:	e00c      	b.n	8004a74 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	3308      	adds	r3, #8
 8004a5e:	60fb      	str	r3, [r7, #12]
 8004a60:	e002      	b.n	8004a68 <vListInsert+0x2e>
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	60fb      	str	r3, [r7, #12]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	68ba      	ldr	r2, [r7, #8]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d2f6      	bcs.n	8004a62 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	685a      	ldr	r2, [r3, #4]
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	683a      	ldr	r2, [r7, #0]
 8004a82:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	683a      	ldr	r2, [r7, #0]
 8004a8e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	1c5a      	adds	r2, r3, #1
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	601a      	str	r2, [r3, #0]
}
 8004aa0:	bf00      	nop
 8004aa2:	3714      	adds	r7, #20
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004aac:	b480      	push	{r7}
 8004aae:	b085      	sub	sp, #20
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	691b      	ldr	r3, [r3, #16]
 8004ab8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	6892      	ldr	r2, [r2, #8]
 8004ac2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	6852      	ldr	r2, [r2, #4]
 8004acc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d103      	bne.n	8004ae0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	689a      	ldr	r2, [r3, #8]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	1e5a      	subs	r2, r3, #1
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3714      	adds	r7, #20
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b084      	sub	sp, #16
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d10b      	bne.n	8004b2c <xQueueGenericReset+0x2c>
	__asm volatile
 8004b14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b18:	f383 8811 	msr	BASEPRI, r3
 8004b1c:	f3bf 8f6f 	isb	sy
 8004b20:	f3bf 8f4f 	dsb	sy
 8004b24:	60bb      	str	r3, [r7, #8]
}
 8004b26:	bf00      	nop
 8004b28:	bf00      	nop
 8004b2a:	e7fd      	b.n	8004b28 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004b2c:	f002 fe7c 	bl	8007828 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b38:	68f9      	ldr	r1, [r7, #12]
 8004b3a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004b3c:	fb01 f303 	mul.w	r3, r1, r3
 8004b40:	441a      	add	r2, r3
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b5c:	3b01      	subs	r3, #1
 8004b5e:	68f9      	ldr	r1, [r7, #12]
 8004b60:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004b62:	fb01 f303 	mul.w	r3, r1, r3
 8004b66:	441a      	add	r2, r3
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	22ff      	movs	r2, #255	@ 0xff
 8004b70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	22ff      	movs	r2, #255	@ 0xff
 8004b78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d114      	bne.n	8004bac <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d01a      	beq.n	8004bc0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	3310      	adds	r3, #16
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f001 fbd4 	bl	800633c <xTaskRemoveFromEventList>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d012      	beq.n	8004bc0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004b9a:	4b0d      	ldr	r3, [pc, #52]	@ (8004bd0 <xQueueGenericReset+0xd0>)
 8004b9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ba0:	601a      	str	r2, [r3, #0]
 8004ba2:	f3bf 8f4f 	dsb	sy
 8004ba6:	f3bf 8f6f 	isb	sy
 8004baa:	e009      	b.n	8004bc0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	3310      	adds	r3, #16
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f7ff fef1 	bl	8004998 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	3324      	adds	r3, #36	@ 0x24
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f7ff feec 	bl	8004998 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004bc0:	f002 fe64 	bl	800788c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004bc4:	2301      	movs	r3, #1
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3710      	adds	r7, #16
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	e000ed04 	.word	0xe000ed04

08004bd4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b08e      	sub	sp, #56	@ 0x38
 8004bd8:	af02      	add	r7, sp, #8
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	60b9      	str	r1, [r7, #8]
 8004bde:	607a      	str	r2, [r7, #4]
 8004be0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d10b      	bne.n	8004c00 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004be8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bec:	f383 8811 	msr	BASEPRI, r3
 8004bf0:	f3bf 8f6f 	isb	sy
 8004bf4:	f3bf 8f4f 	dsb	sy
 8004bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004bfa:	bf00      	nop
 8004bfc:	bf00      	nop
 8004bfe:	e7fd      	b.n	8004bfc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d10b      	bne.n	8004c1e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004c06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c0a:	f383 8811 	msr	BASEPRI, r3
 8004c0e:	f3bf 8f6f 	isb	sy
 8004c12:	f3bf 8f4f 	dsb	sy
 8004c16:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004c18:	bf00      	nop
 8004c1a:	bf00      	nop
 8004c1c:	e7fd      	b.n	8004c1a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d002      	beq.n	8004c2a <xQueueGenericCreateStatic+0x56>
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d001      	beq.n	8004c2e <xQueueGenericCreateStatic+0x5a>
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e000      	b.n	8004c30 <xQueueGenericCreateStatic+0x5c>
 8004c2e:	2300      	movs	r3, #0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d10b      	bne.n	8004c4c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004c34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c38:	f383 8811 	msr	BASEPRI, r3
 8004c3c:	f3bf 8f6f 	isb	sy
 8004c40:	f3bf 8f4f 	dsb	sy
 8004c44:	623b      	str	r3, [r7, #32]
}
 8004c46:	bf00      	nop
 8004c48:	bf00      	nop
 8004c4a:	e7fd      	b.n	8004c48 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d102      	bne.n	8004c58 <xQueueGenericCreateStatic+0x84>
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d101      	bne.n	8004c5c <xQueueGenericCreateStatic+0x88>
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e000      	b.n	8004c5e <xQueueGenericCreateStatic+0x8a>
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d10b      	bne.n	8004c7a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004c62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c66:	f383 8811 	msr	BASEPRI, r3
 8004c6a:	f3bf 8f6f 	isb	sy
 8004c6e:	f3bf 8f4f 	dsb	sy
 8004c72:	61fb      	str	r3, [r7, #28]
}
 8004c74:	bf00      	nop
 8004c76:	bf00      	nop
 8004c78:	e7fd      	b.n	8004c76 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004c7a:	2350      	movs	r3, #80	@ 0x50
 8004c7c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	2b50      	cmp	r3, #80	@ 0x50
 8004c82:	d00b      	beq.n	8004c9c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004c84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c88:	f383 8811 	msr	BASEPRI, r3
 8004c8c:	f3bf 8f6f 	isb	sy
 8004c90:	f3bf 8f4f 	dsb	sy
 8004c94:	61bb      	str	r3, [r7, #24]
}
 8004c96:	bf00      	nop
 8004c98:	bf00      	nop
 8004c9a:	e7fd      	b.n	8004c98 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004c9c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004ca2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d00d      	beq.n	8004cc4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004ca8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004cb0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004cb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cb6:	9300      	str	r3, [sp, #0]
 8004cb8:	4613      	mov	r3, r2
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	68b9      	ldr	r1, [r7, #8]
 8004cbe:	68f8      	ldr	r0, [r7, #12]
 8004cc0:	f000 f840 	bl	8004d44 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004cc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3730      	adds	r7, #48	@ 0x30
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}

08004cce <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004cce:	b580      	push	{r7, lr}
 8004cd0:	b08a      	sub	sp, #40	@ 0x28
 8004cd2:	af02      	add	r7, sp, #8
 8004cd4:	60f8      	str	r0, [r7, #12]
 8004cd6:	60b9      	str	r1, [r7, #8]
 8004cd8:	4613      	mov	r3, r2
 8004cda:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d10b      	bne.n	8004cfa <xQueueGenericCreate+0x2c>
	__asm volatile
 8004ce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ce6:	f383 8811 	msr	BASEPRI, r3
 8004cea:	f3bf 8f6f 	isb	sy
 8004cee:	f3bf 8f4f 	dsb	sy
 8004cf2:	613b      	str	r3, [r7, #16]
}
 8004cf4:	bf00      	nop
 8004cf6:	bf00      	nop
 8004cf8:	e7fd      	b.n	8004cf6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	68ba      	ldr	r2, [r7, #8]
 8004cfe:	fb02 f303 	mul.w	r3, r2, r3
 8004d02:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	3350      	adds	r3, #80	@ 0x50
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f002 feaf 	bl	8007a6c <pvPortMalloc>
 8004d0e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d011      	beq.n	8004d3a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	3350      	adds	r3, #80	@ 0x50
 8004d1e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004d20:	69bb      	ldr	r3, [r7, #24]
 8004d22:	2200      	movs	r2, #0
 8004d24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004d28:	79fa      	ldrb	r2, [r7, #7]
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	9300      	str	r3, [sp, #0]
 8004d2e:	4613      	mov	r3, r2
 8004d30:	697a      	ldr	r2, [r7, #20]
 8004d32:	68b9      	ldr	r1, [r7, #8]
 8004d34:	68f8      	ldr	r0, [r7, #12]
 8004d36:	f000 f805 	bl	8004d44 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004d3a:	69bb      	ldr	r3, [r7, #24]
	}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3720      	adds	r7, #32
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}

08004d44 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b084      	sub	sp, #16
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	60f8      	str	r0, [r7, #12]
 8004d4c:	60b9      	str	r1, [r7, #8]
 8004d4e:	607a      	str	r2, [r7, #4]
 8004d50:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d103      	bne.n	8004d60 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	69ba      	ldr	r2, [r7, #24]
 8004d5c:	601a      	str	r2, [r3, #0]
 8004d5e:	e002      	b.n	8004d66 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004d60:	69bb      	ldr	r3, [r7, #24]
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	68fa      	ldr	r2, [r7, #12]
 8004d6a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004d6c:	69bb      	ldr	r3, [r7, #24]
 8004d6e:	68ba      	ldr	r2, [r7, #8]
 8004d70:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004d72:	2101      	movs	r1, #1
 8004d74:	69b8      	ldr	r0, [r7, #24]
 8004d76:	f7ff fec3 	bl	8004b00 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	78fa      	ldrb	r2, [r7, #3]
 8004d7e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004d82:	bf00      	nop
 8004d84:	3710      	adds	r7, #16
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
	...

08004d8c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b08e      	sub	sp, #56	@ 0x38
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	607a      	str	r2, [r7, #4]
 8004d98:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d10b      	bne.n	8004dc0 <xQueueGenericSend+0x34>
	__asm volatile
 8004da8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dac:	f383 8811 	msr	BASEPRI, r3
 8004db0:	f3bf 8f6f 	isb	sy
 8004db4:	f3bf 8f4f 	dsb	sy
 8004db8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004dba:	bf00      	nop
 8004dbc:	bf00      	nop
 8004dbe:	e7fd      	b.n	8004dbc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d103      	bne.n	8004dce <xQueueGenericSend+0x42>
 8004dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d101      	bne.n	8004dd2 <xQueueGenericSend+0x46>
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e000      	b.n	8004dd4 <xQueueGenericSend+0x48>
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d10b      	bne.n	8004df0 <xQueueGenericSend+0x64>
	__asm volatile
 8004dd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ddc:	f383 8811 	msr	BASEPRI, r3
 8004de0:	f3bf 8f6f 	isb	sy
 8004de4:	f3bf 8f4f 	dsb	sy
 8004de8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004dea:	bf00      	nop
 8004dec:	bf00      	nop
 8004dee:	e7fd      	b.n	8004dec <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	2b02      	cmp	r3, #2
 8004df4:	d103      	bne.n	8004dfe <xQueueGenericSend+0x72>
 8004df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004df8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d101      	bne.n	8004e02 <xQueueGenericSend+0x76>
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e000      	b.n	8004e04 <xQueueGenericSend+0x78>
 8004e02:	2300      	movs	r3, #0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d10b      	bne.n	8004e20 <xQueueGenericSend+0x94>
	__asm volatile
 8004e08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e0c:	f383 8811 	msr	BASEPRI, r3
 8004e10:	f3bf 8f6f 	isb	sy
 8004e14:	f3bf 8f4f 	dsb	sy
 8004e18:	623b      	str	r3, [r7, #32]
}
 8004e1a:	bf00      	nop
 8004e1c:	bf00      	nop
 8004e1e:	e7fd      	b.n	8004e1c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e20:	f001 fca6 	bl	8006770 <xTaskGetSchedulerState>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d102      	bne.n	8004e30 <xQueueGenericSend+0xa4>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d101      	bne.n	8004e34 <xQueueGenericSend+0xa8>
 8004e30:	2301      	movs	r3, #1
 8004e32:	e000      	b.n	8004e36 <xQueueGenericSend+0xaa>
 8004e34:	2300      	movs	r3, #0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d10b      	bne.n	8004e52 <xQueueGenericSend+0xc6>
	__asm volatile
 8004e3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e3e:	f383 8811 	msr	BASEPRI, r3
 8004e42:	f3bf 8f6f 	isb	sy
 8004e46:	f3bf 8f4f 	dsb	sy
 8004e4a:	61fb      	str	r3, [r7, #28]
}
 8004e4c:	bf00      	nop
 8004e4e:	bf00      	nop
 8004e50:	e7fd      	b.n	8004e4e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004e52:	f002 fce9 	bl	8007828 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e58:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d302      	bcc.n	8004e68 <xQueueGenericSend+0xdc>
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	2b02      	cmp	r3, #2
 8004e66:	d129      	bne.n	8004ebc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004e68:	683a      	ldr	r2, [r7, #0]
 8004e6a:	68b9      	ldr	r1, [r7, #8]
 8004e6c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004e6e:	f000 fbc7 	bl	8005600 <prvCopyDataToQueue>
 8004e72:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d010      	beq.n	8004e9e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e7e:	3324      	adds	r3, #36	@ 0x24
 8004e80:	4618      	mov	r0, r3
 8004e82:	f001 fa5b 	bl	800633c <xTaskRemoveFromEventList>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d013      	beq.n	8004eb4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004e8c:	4b3f      	ldr	r3, [pc, #252]	@ (8004f8c <xQueueGenericSend+0x200>)
 8004e8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e92:	601a      	str	r2, [r3, #0]
 8004e94:	f3bf 8f4f 	dsb	sy
 8004e98:	f3bf 8f6f 	isb	sy
 8004e9c:	e00a      	b.n	8004eb4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004e9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d007      	beq.n	8004eb4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004ea4:	4b39      	ldr	r3, [pc, #228]	@ (8004f8c <xQueueGenericSend+0x200>)
 8004ea6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004eaa:	601a      	str	r2, [r3, #0]
 8004eac:	f3bf 8f4f 	dsb	sy
 8004eb0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004eb4:	f002 fcea 	bl	800788c <vPortExitCritical>
				return pdPASS;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e063      	b.n	8004f84 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d103      	bne.n	8004eca <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004ec2:	f002 fce3 	bl	800788c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	e05c      	b.n	8004f84 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004eca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d106      	bne.n	8004ede <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004ed0:	f107 0314 	add.w	r3, r7, #20
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f001 fa95 	bl	8006404 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004eda:	2301      	movs	r3, #1
 8004edc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004ede:	f002 fcd5 	bl	800788c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004ee2:	f000 ffe1 	bl	8005ea8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004ee6:	f002 fc9f 	bl	8007828 <vPortEnterCritical>
 8004eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004ef0:	b25b      	sxtb	r3, r3
 8004ef2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004ef6:	d103      	bne.n	8004f00 <xQueueGenericSend+0x174>
 8004ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004efa:	2200      	movs	r2, #0
 8004efc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f02:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004f06:	b25b      	sxtb	r3, r3
 8004f08:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f0c:	d103      	bne.n	8004f16 <xQueueGenericSend+0x18a>
 8004f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f10:	2200      	movs	r2, #0
 8004f12:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004f16:	f002 fcb9 	bl	800788c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f1a:	1d3a      	adds	r2, r7, #4
 8004f1c:	f107 0314 	add.w	r3, r7, #20
 8004f20:	4611      	mov	r1, r2
 8004f22:	4618      	mov	r0, r3
 8004f24:	f001 fa84 	bl	8006430 <xTaskCheckForTimeOut>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d124      	bne.n	8004f78 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004f2e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004f30:	f000 fc5e 	bl	80057f0 <prvIsQueueFull>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d018      	beq.n	8004f6c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f3c:	3310      	adds	r3, #16
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	4611      	mov	r1, r2
 8004f42:	4618      	mov	r0, r3
 8004f44:	f001 f9a8 	bl	8006298 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004f48:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004f4a:	f000 fbe9 	bl	8005720 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004f4e:	f000 ffb9 	bl	8005ec4 <xTaskResumeAll>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	f47f af7c 	bne.w	8004e52 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004f5a:	4b0c      	ldr	r3, [pc, #48]	@ (8004f8c <xQueueGenericSend+0x200>)
 8004f5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f60:	601a      	str	r2, [r3, #0]
 8004f62:	f3bf 8f4f 	dsb	sy
 8004f66:	f3bf 8f6f 	isb	sy
 8004f6a:	e772      	b.n	8004e52 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004f6c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004f6e:	f000 fbd7 	bl	8005720 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f72:	f000 ffa7 	bl	8005ec4 <xTaskResumeAll>
 8004f76:	e76c      	b.n	8004e52 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004f78:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004f7a:	f000 fbd1 	bl	8005720 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f7e:	f000 ffa1 	bl	8005ec4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004f82:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3738      	adds	r7, #56	@ 0x38
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	e000ed04 	.word	0xe000ed04

08004f90 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b090      	sub	sp, #64	@ 0x40
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	60f8      	str	r0, [r7, #12]
 8004f98:	60b9      	str	r1, [r7, #8]
 8004f9a:	607a      	str	r2, [r7, #4]
 8004f9c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004fa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d10b      	bne.n	8004fc0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004fa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fac:	f383 8811 	msr	BASEPRI, r3
 8004fb0:	f3bf 8f6f 	isb	sy
 8004fb4:	f3bf 8f4f 	dsb	sy
 8004fb8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004fba:	bf00      	nop
 8004fbc:	bf00      	nop
 8004fbe:	e7fd      	b.n	8004fbc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d103      	bne.n	8004fce <xQueueGenericSendFromISR+0x3e>
 8004fc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d101      	bne.n	8004fd2 <xQueueGenericSendFromISR+0x42>
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e000      	b.n	8004fd4 <xQueueGenericSendFromISR+0x44>
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d10b      	bne.n	8004ff0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004fd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fdc:	f383 8811 	msr	BASEPRI, r3
 8004fe0:	f3bf 8f6f 	isb	sy
 8004fe4:	f3bf 8f4f 	dsb	sy
 8004fe8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004fea:	bf00      	nop
 8004fec:	bf00      	nop
 8004fee:	e7fd      	b.n	8004fec <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	2b02      	cmp	r3, #2
 8004ff4:	d103      	bne.n	8004ffe <xQueueGenericSendFromISR+0x6e>
 8004ff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ff8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d101      	bne.n	8005002 <xQueueGenericSendFromISR+0x72>
 8004ffe:	2301      	movs	r3, #1
 8005000:	e000      	b.n	8005004 <xQueueGenericSendFromISR+0x74>
 8005002:	2300      	movs	r3, #0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d10b      	bne.n	8005020 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005008:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800500c:	f383 8811 	msr	BASEPRI, r3
 8005010:	f3bf 8f6f 	isb	sy
 8005014:	f3bf 8f4f 	dsb	sy
 8005018:	623b      	str	r3, [r7, #32]
}
 800501a:	bf00      	nop
 800501c:	bf00      	nop
 800501e:	e7fd      	b.n	800501c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005020:	f002 fce2 	bl	80079e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005024:	f3ef 8211 	mrs	r2, BASEPRI
 8005028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800502c:	f383 8811 	msr	BASEPRI, r3
 8005030:	f3bf 8f6f 	isb	sy
 8005034:	f3bf 8f4f 	dsb	sy
 8005038:	61fa      	str	r2, [r7, #28]
 800503a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800503c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800503e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005042:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005046:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005048:	429a      	cmp	r2, r3
 800504a:	d302      	bcc.n	8005052 <xQueueGenericSendFromISR+0xc2>
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	2b02      	cmp	r3, #2
 8005050:	d12f      	bne.n	80050b2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005054:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005058:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800505c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800505e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005060:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005062:	683a      	ldr	r2, [r7, #0]
 8005064:	68b9      	ldr	r1, [r7, #8]
 8005066:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005068:	f000 faca 	bl	8005600 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800506c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005070:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005074:	d112      	bne.n	800509c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800507a:	2b00      	cmp	r3, #0
 800507c:	d016      	beq.n	80050ac <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800507e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005080:	3324      	adds	r3, #36	@ 0x24
 8005082:	4618      	mov	r0, r3
 8005084:	f001 f95a 	bl	800633c <xTaskRemoveFromEventList>
 8005088:	4603      	mov	r3, r0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d00e      	beq.n	80050ac <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d00b      	beq.n	80050ac <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	601a      	str	r2, [r3, #0]
 800509a:	e007      	b.n	80050ac <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800509c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80050a0:	3301      	adds	r3, #1
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	b25a      	sxtb	r2, r3
 80050a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80050ac:	2301      	movs	r3, #1
 80050ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80050b0:	e001      	b.n	80050b6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80050b2:	2300      	movs	r3, #0
 80050b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80050b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050b8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80050c0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80050c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3740      	adds	r7, #64	@ 0x40
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b08e      	sub	sp, #56	@ 0x38
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80050da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d10b      	bne.n	80050f8 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80050e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050e4:	f383 8811 	msr	BASEPRI, r3
 80050e8:	f3bf 8f6f 	isb	sy
 80050ec:	f3bf 8f4f 	dsb	sy
 80050f0:	623b      	str	r3, [r7, #32]
}
 80050f2:	bf00      	nop
 80050f4:	bf00      	nop
 80050f6:	e7fd      	b.n	80050f4 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80050f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d00b      	beq.n	8005118 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8005100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005104:	f383 8811 	msr	BASEPRI, r3
 8005108:	f3bf 8f6f 	isb	sy
 800510c:	f3bf 8f4f 	dsb	sy
 8005110:	61fb      	str	r3, [r7, #28]
}
 8005112:	bf00      	nop
 8005114:	bf00      	nop
 8005116:	e7fd      	b.n	8005114 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d103      	bne.n	8005128 <xQueueGiveFromISR+0x5c>
 8005120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d101      	bne.n	800512c <xQueueGiveFromISR+0x60>
 8005128:	2301      	movs	r3, #1
 800512a:	e000      	b.n	800512e <xQueueGiveFromISR+0x62>
 800512c:	2300      	movs	r3, #0
 800512e:	2b00      	cmp	r3, #0
 8005130:	d10b      	bne.n	800514a <xQueueGiveFromISR+0x7e>
	__asm volatile
 8005132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005136:	f383 8811 	msr	BASEPRI, r3
 800513a:	f3bf 8f6f 	isb	sy
 800513e:	f3bf 8f4f 	dsb	sy
 8005142:	61bb      	str	r3, [r7, #24]
}
 8005144:	bf00      	nop
 8005146:	bf00      	nop
 8005148:	e7fd      	b.n	8005146 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800514a:	f002 fc4d 	bl	80079e8 <vPortValidateInterruptPriority>
	__asm volatile
 800514e:	f3ef 8211 	mrs	r2, BASEPRI
 8005152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005156:	f383 8811 	msr	BASEPRI, r3
 800515a:	f3bf 8f6f 	isb	sy
 800515e:	f3bf 8f4f 	dsb	sy
 8005162:	617a      	str	r2, [r7, #20]
 8005164:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005166:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005168:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800516a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800516c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800516e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005172:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005174:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005176:	429a      	cmp	r2, r3
 8005178:	d22b      	bcs.n	80051d2 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800517a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800517c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005180:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005186:	1c5a      	adds	r2, r3, #1
 8005188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800518a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800518c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005190:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005194:	d112      	bne.n	80051bc <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800519a:	2b00      	cmp	r3, #0
 800519c:	d016      	beq.n	80051cc <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800519e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051a0:	3324      	adds	r3, #36	@ 0x24
 80051a2:	4618      	mov	r0, r3
 80051a4:	f001 f8ca 	bl	800633c <xTaskRemoveFromEventList>
 80051a8:	4603      	mov	r3, r0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d00e      	beq.n	80051cc <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d00b      	beq.n	80051cc <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	2201      	movs	r2, #1
 80051b8:	601a      	str	r2, [r3, #0]
 80051ba:	e007      	b.n	80051cc <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80051bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80051c0:	3301      	adds	r3, #1
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	b25a      	sxtb	r2, r3
 80051c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80051cc:	2301      	movs	r3, #1
 80051ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80051d0:	e001      	b.n	80051d6 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80051d2:	2300      	movs	r3, #0
 80051d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80051d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051d8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f383 8811 	msr	BASEPRI, r3
}
 80051e0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80051e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3738      	adds	r7, #56	@ 0x38
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}

080051ec <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b08c      	sub	sp, #48	@ 0x30
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80051f8:	2300      	movs	r3, #0
 80051fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005202:	2b00      	cmp	r3, #0
 8005204:	d10b      	bne.n	800521e <xQueueReceive+0x32>
	__asm volatile
 8005206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800520a:	f383 8811 	msr	BASEPRI, r3
 800520e:	f3bf 8f6f 	isb	sy
 8005212:	f3bf 8f4f 	dsb	sy
 8005216:	623b      	str	r3, [r7, #32]
}
 8005218:	bf00      	nop
 800521a:	bf00      	nop
 800521c:	e7fd      	b.n	800521a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d103      	bne.n	800522c <xQueueReceive+0x40>
 8005224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005228:	2b00      	cmp	r3, #0
 800522a:	d101      	bne.n	8005230 <xQueueReceive+0x44>
 800522c:	2301      	movs	r3, #1
 800522e:	e000      	b.n	8005232 <xQueueReceive+0x46>
 8005230:	2300      	movs	r3, #0
 8005232:	2b00      	cmp	r3, #0
 8005234:	d10b      	bne.n	800524e <xQueueReceive+0x62>
	__asm volatile
 8005236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800523a:	f383 8811 	msr	BASEPRI, r3
 800523e:	f3bf 8f6f 	isb	sy
 8005242:	f3bf 8f4f 	dsb	sy
 8005246:	61fb      	str	r3, [r7, #28]
}
 8005248:	bf00      	nop
 800524a:	bf00      	nop
 800524c:	e7fd      	b.n	800524a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800524e:	f001 fa8f 	bl	8006770 <xTaskGetSchedulerState>
 8005252:	4603      	mov	r3, r0
 8005254:	2b00      	cmp	r3, #0
 8005256:	d102      	bne.n	800525e <xQueueReceive+0x72>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d101      	bne.n	8005262 <xQueueReceive+0x76>
 800525e:	2301      	movs	r3, #1
 8005260:	e000      	b.n	8005264 <xQueueReceive+0x78>
 8005262:	2300      	movs	r3, #0
 8005264:	2b00      	cmp	r3, #0
 8005266:	d10b      	bne.n	8005280 <xQueueReceive+0x94>
	__asm volatile
 8005268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800526c:	f383 8811 	msr	BASEPRI, r3
 8005270:	f3bf 8f6f 	isb	sy
 8005274:	f3bf 8f4f 	dsb	sy
 8005278:	61bb      	str	r3, [r7, #24]
}
 800527a:	bf00      	nop
 800527c:	bf00      	nop
 800527e:	e7fd      	b.n	800527c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005280:	f002 fad2 	bl	8007828 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005288:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800528a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800528c:	2b00      	cmp	r3, #0
 800528e:	d01f      	beq.n	80052d0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005290:	68b9      	ldr	r1, [r7, #8]
 8005292:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005294:	f000 fa1e 	bl	80056d4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800529a:	1e5a      	subs	r2, r3, #1
 800529c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800529e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052a2:	691b      	ldr	r3, [r3, #16]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d00f      	beq.n	80052c8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052aa:	3310      	adds	r3, #16
 80052ac:	4618      	mov	r0, r3
 80052ae:	f001 f845 	bl	800633c <xTaskRemoveFromEventList>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d007      	beq.n	80052c8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80052b8:	4b3c      	ldr	r3, [pc, #240]	@ (80053ac <xQueueReceive+0x1c0>)
 80052ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052be:	601a      	str	r2, [r3, #0]
 80052c0:	f3bf 8f4f 	dsb	sy
 80052c4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80052c8:	f002 fae0 	bl	800788c <vPortExitCritical>
				return pdPASS;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e069      	b.n	80053a4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d103      	bne.n	80052de <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80052d6:	f002 fad9 	bl	800788c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80052da:	2300      	movs	r3, #0
 80052dc:	e062      	b.n	80053a4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80052de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d106      	bne.n	80052f2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80052e4:	f107 0310 	add.w	r3, r7, #16
 80052e8:	4618      	mov	r0, r3
 80052ea:	f001 f88b 	bl	8006404 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80052ee:	2301      	movs	r3, #1
 80052f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80052f2:	f002 facb 	bl	800788c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80052f6:	f000 fdd7 	bl	8005ea8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80052fa:	f002 fa95 	bl	8007828 <vPortEnterCritical>
 80052fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005300:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005304:	b25b      	sxtb	r3, r3
 8005306:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800530a:	d103      	bne.n	8005314 <xQueueReceive+0x128>
 800530c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800530e:	2200      	movs	r2, #0
 8005310:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005316:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800531a:	b25b      	sxtb	r3, r3
 800531c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005320:	d103      	bne.n	800532a <xQueueReceive+0x13e>
 8005322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005324:	2200      	movs	r2, #0
 8005326:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800532a:	f002 faaf 	bl	800788c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800532e:	1d3a      	adds	r2, r7, #4
 8005330:	f107 0310 	add.w	r3, r7, #16
 8005334:	4611      	mov	r1, r2
 8005336:	4618      	mov	r0, r3
 8005338:	f001 f87a 	bl	8006430 <xTaskCheckForTimeOut>
 800533c:	4603      	mov	r3, r0
 800533e:	2b00      	cmp	r3, #0
 8005340:	d123      	bne.n	800538a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005342:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005344:	f000 fa3e 	bl	80057c4 <prvIsQueueEmpty>
 8005348:	4603      	mov	r3, r0
 800534a:	2b00      	cmp	r3, #0
 800534c:	d017      	beq.n	800537e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800534e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005350:	3324      	adds	r3, #36	@ 0x24
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	4611      	mov	r1, r2
 8005356:	4618      	mov	r0, r3
 8005358:	f000 ff9e 	bl	8006298 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800535c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800535e:	f000 f9df 	bl	8005720 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005362:	f000 fdaf 	bl	8005ec4 <xTaskResumeAll>
 8005366:	4603      	mov	r3, r0
 8005368:	2b00      	cmp	r3, #0
 800536a:	d189      	bne.n	8005280 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800536c:	4b0f      	ldr	r3, [pc, #60]	@ (80053ac <xQueueReceive+0x1c0>)
 800536e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005372:	601a      	str	r2, [r3, #0]
 8005374:	f3bf 8f4f 	dsb	sy
 8005378:	f3bf 8f6f 	isb	sy
 800537c:	e780      	b.n	8005280 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800537e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005380:	f000 f9ce 	bl	8005720 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005384:	f000 fd9e 	bl	8005ec4 <xTaskResumeAll>
 8005388:	e77a      	b.n	8005280 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800538a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800538c:	f000 f9c8 	bl	8005720 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005390:	f000 fd98 	bl	8005ec4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005394:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005396:	f000 fa15 	bl	80057c4 <prvIsQueueEmpty>
 800539a:	4603      	mov	r3, r0
 800539c:	2b00      	cmp	r3, #0
 800539e:	f43f af6f 	beq.w	8005280 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80053a2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3730      	adds	r7, #48	@ 0x30
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}
 80053ac:	e000ed04 	.word	0xe000ed04

080053b0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b08e      	sub	sp, #56	@ 0x38
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80053ba:	2300      	movs	r3, #0
 80053bc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80053c2:	2300      	movs	r3, #0
 80053c4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80053c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d10b      	bne.n	80053e4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80053cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053d0:	f383 8811 	msr	BASEPRI, r3
 80053d4:	f3bf 8f6f 	isb	sy
 80053d8:	f3bf 8f4f 	dsb	sy
 80053dc:	623b      	str	r3, [r7, #32]
}
 80053de:	bf00      	nop
 80053e0:	bf00      	nop
 80053e2:	e7fd      	b.n	80053e0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80053e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d00b      	beq.n	8005404 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80053ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053f0:	f383 8811 	msr	BASEPRI, r3
 80053f4:	f3bf 8f6f 	isb	sy
 80053f8:	f3bf 8f4f 	dsb	sy
 80053fc:	61fb      	str	r3, [r7, #28]
}
 80053fe:	bf00      	nop
 8005400:	bf00      	nop
 8005402:	e7fd      	b.n	8005400 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005404:	f001 f9b4 	bl	8006770 <xTaskGetSchedulerState>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	d102      	bne.n	8005414 <xQueueSemaphoreTake+0x64>
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d101      	bne.n	8005418 <xQueueSemaphoreTake+0x68>
 8005414:	2301      	movs	r3, #1
 8005416:	e000      	b.n	800541a <xQueueSemaphoreTake+0x6a>
 8005418:	2300      	movs	r3, #0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d10b      	bne.n	8005436 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800541e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005422:	f383 8811 	msr	BASEPRI, r3
 8005426:	f3bf 8f6f 	isb	sy
 800542a:	f3bf 8f4f 	dsb	sy
 800542e:	61bb      	str	r3, [r7, #24]
}
 8005430:	bf00      	nop
 8005432:	bf00      	nop
 8005434:	e7fd      	b.n	8005432 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005436:	f002 f9f7 	bl	8007828 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800543a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800543c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800543e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005442:	2b00      	cmp	r3, #0
 8005444:	d024      	beq.n	8005490 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005448:	1e5a      	subs	r2, r3, #1
 800544a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800544c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800544e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d104      	bne.n	8005460 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005456:	f001 fb05 	bl	8006a64 <pvTaskIncrementMutexHeldCount>
 800545a:	4602      	mov	r2, r0
 800545c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800545e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005462:	691b      	ldr	r3, [r3, #16]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d00f      	beq.n	8005488 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800546a:	3310      	adds	r3, #16
 800546c:	4618      	mov	r0, r3
 800546e:	f000 ff65 	bl	800633c <xTaskRemoveFromEventList>
 8005472:	4603      	mov	r3, r0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d007      	beq.n	8005488 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005478:	4b54      	ldr	r3, [pc, #336]	@ (80055cc <xQueueSemaphoreTake+0x21c>)
 800547a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800547e:	601a      	str	r2, [r3, #0]
 8005480:	f3bf 8f4f 	dsb	sy
 8005484:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005488:	f002 fa00 	bl	800788c <vPortExitCritical>
				return pdPASS;
 800548c:	2301      	movs	r3, #1
 800548e:	e098      	b.n	80055c2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d112      	bne.n	80054bc <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005498:	2b00      	cmp	r3, #0
 800549a:	d00b      	beq.n	80054b4 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800549c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054a0:	f383 8811 	msr	BASEPRI, r3
 80054a4:	f3bf 8f6f 	isb	sy
 80054a8:	f3bf 8f4f 	dsb	sy
 80054ac:	617b      	str	r3, [r7, #20]
}
 80054ae:	bf00      	nop
 80054b0:	bf00      	nop
 80054b2:	e7fd      	b.n	80054b0 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80054b4:	f002 f9ea 	bl	800788c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80054b8:	2300      	movs	r3, #0
 80054ba:	e082      	b.n	80055c2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80054bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d106      	bne.n	80054d0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80054c2:	f107 030c 	add.w	r3, r7, #12
 80054c6:	4618      	mov	r0, r3
 80054c8:	f000 ff9c 	bl	8006404 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80054cc:	2301      	movs	r3, #1
 80054ce:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80054d0:	f002 f9dc 	bl	800788c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80054d4:	f000 fce8 	bl	8005ea8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80054d8:	f002 f9a6 	bl	8007828 <vPortEnterCritical>
 80054dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054de:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80054e2:	b25b      	sxtb	r3, r3
 80054e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80054e8:	d103      	bne.n	80054f2 <xQueueSemaphoreTake+0x142>
 80054ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80054f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054f4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80054f8:	b25b      	sxtb	r3, r3
 80054fa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80054fe:	d103      	bne.n	8005508 <xQueueSemaphoreTake+0x158>
 8005500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005502:	2200      	movs	r2, #0
 8005504:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005508:	f002 f9c0 	bl	800788c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800550c:	463a      	mov	r2, r7
 800550e:	f107 030c 	add.w	r3, r7, #12
 8005512:	4611      	mov	r1, r2
 8005514:	4618      	mov	r0, r3
 8005516:	f000 ff8b 	bl	8006430 <xTaskCheckForTimeOut>
 800551a:	4603      	mov	r3, r0
 800551c:	2b00      	cmp	r3, #0
 800551e:	d132      	bne.n	8005586 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005520:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005522:	f000 f94f 	bl	80057c4 <prvIsQueueEmpty>
 8005526:	4603      	mov	r3, r0
 8005528:	2b00      	cmp	r3, #0
 800552a:	d026      	beq.n	800557a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800552c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d109      	bne.n	8005548 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8005534:	f002 f978 	bl	8007828 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005538:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	4618      	mov	r0, r3
 800553e:	f001 f935 	bl	80067ac <xTaskPriorityInherit>
 8005542:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8005544:	f002 f9a2 	bl	800788c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800554a:	3324      	adds	r3, #36	@ 0x24
 800554c:	683a      	ldr	r2, [r7, #0]
 800554e:	4611      	mov	r1, r2
 8005550:	4618      	mov	r0, r3
 8005552:	f000 fea1 	bl	8006298 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005556:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005558:	f000 f8e2 	bl	8005720 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800555c:	f000 fcb2 	bl	8005ec4 <xTaskResumeAll>
 8005560:	4603      	mov	r3, r0
 8005562:	2b00      	cmp	r3, #0
 8005564:	f47f af67 	bne.w	8005436 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8005568:	4b18      	ldr	r3, [pc, #96]	@ (80055cc <xQueueSemaphoreTake+0x21c>)
 800556a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800556e:	601a      	str	r2, [r3, #0]
 8005570:	f3bf 8f4f 	dsb	sy
 8005574:	f3bf 8f6f 	isb	sy
 8005578:	e75d      	b.n	8005436 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800557a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800557c:	f000 f8d0 	bl	8005720 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005580:	f000 fca0 	bl	8005ec4 <xTaskResumeAll>
 8005584:	e757      	b.n	8005436 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005586:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005588:	f000 f8ca 	bl	8005720 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800558c:	f000 fc9a 	bl	8005ec4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005590:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005592:	f000 f917 	bl	80057c4 <prvIsQueueEmpty>
 8005596:	4603      	mov	r3, r0
 8005598:	2b00      	cmp	r3, #0
 800559a:	f43f af4c 	beq.w	8005436 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800559e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d00d      	beq.n	80055c0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80055a4:	f002 f940 	bl	8007828 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80055a8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80055aa:	f000 f811 	bl	80055d0 <prvGetDisinheritPriorityAfterTimeout>
 80055ae:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80055b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80055b6:	4618      	mov	r0, r3
 80055b8:	f001 f9d0 	bl	800695c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80055bc:	f002 f966 	bl	800788c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80055c0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3738      	adds	r7, #56	@ 0x38
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	e000ed04 	.word	0xe000ed04

080055d0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80055d0:	b480      	push	{r7}
 80055d2:	b085      	sub	sp, #20
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d006      	beq.n	80055ee <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80055ea:	60fb      	str	r3, [r7, #12]
 80055ec:	e001      	b.n	80055f2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80055ee:	2300      	movs	r3, #0
 80055f0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80055f2:	68fb      	ldr	r3, [r7, #12]
	}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3714      	adds	r7, #20
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr

08005600 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b086      	sub	sp, #24
 8005604:	af00      	add	r7, sp, #0
 8005606:	60f8      	str	r0, [r7, #12]
 8005608:	60b9      	str	r1, [r7, #8]
 800560a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800560c:	2300      	movs	r3, #0
 800560e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005614:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800561a:	2b00      	cmp	r3, #0
 800561c:	d10d      	bne.n	800563a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d14d      	bne.n	80056c2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	4618      	mov	r0, r3
 800562c:	f001 f926 	bl	800687c <xTaskPriorityDisinherit>
 8005630:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2200      	movs	r2, #0
 8005636:	609a      	str	r2, [r3, #8]
 8005638:	e043      	b.n	80056c2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d119      	bne.n	8005674 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6858      	ldr	r0, [r3, #4]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005648:	461a      	mov	r2, r3
 800564a:	68b9      	ldr	r1, [r7, #8]
 800564c:	f002 fe44 	bl	80082d8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	685a      	ldr	r2, [r3, #4]
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005658:	441a      	add	r2, r3
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	685a      	ldr	r2, [r3, #4]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	429a      	cmp	r2, r3
 8005668:	d32b      	bcc.n	80056c2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	605a      	str	r2, [r3, #4]
 8005672:	e026      	b.n	80056c2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	68d8      	ldr	r0, [r3, #12]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800567c:	461a      	mov	r2, r3
 800567e:	68b9      	ldr	r1, [r7, #8]
 8005680:	f002 fe2a 	bl	80082d8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	68da      	ldr	r2, [r3, #12]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800568c:	425b      	negs	r3, r3
 800568e:	441a      	add	r2, r3
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	68da      	ldr	r2, [r3, #12]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	429a      	cmp	r2, r3
 800569e:	d207      	bcs.n	80056b0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	689a      	ldr	r2, [r3, #8]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056a8:	425b      	negs	r3, r3
 80056aa:	441a      	add	r2, r3
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2b02      	cmp	r3, #2
 80056b4:	d105      	bne.n	80056c2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d002      	beq.n	80056c2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	3b01      	subs	r3, #1
 80056c0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	1c5a      	adds	r2, r3, #1
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80056ca:	697b      	ldr	r3, [r7, #20]
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3718      	adds	r7, #24
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}

080056d4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b082      	sub	sp, #8
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d018      	beq.n	8005718 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	68da      	ldr	r2, [r3, #12]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056ee:	441a      	add	r2, r3
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	68da      	ldr	r2, [r3, #12]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d303      	bcc.n	8005708 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	68d9      	ldr	r1, [r3, #12]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005710:	461a      	mov	r2, r3
 8005712:	6838      	ldr	r0, [r7, #0]
 8005714:	f002 fde0 	bl	80082d8 <memcpy>
	}
}
 8005718:	bf00      	nop
 800571a:	3708      	adds	r7, #8
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}

08005720 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b084      	sub	sp, #16
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005728:	f002 f87e 	bl	8007828 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005732:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005734:	e011      	b.n	800575a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800573a:	2b00      	cmp	r3, #0
 800573c:	d012      	beq.n	8005764 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	3324      	adds	r3, #36	@ 0x24
 8005742:	4618      	mov	r0, r3
 8005744:	f000 fdfa 	bl	800633c <xTaskRemoveFromEventList>
 8005748:	4603      	mov	r3, r0
 800574a:	2b00      	cmp	r3, #0
 800574c:	d001      	beq.n	8005752 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800574e:	f000 fed3 	bl	80064f8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005752:	7bfb      	ldrb	r3, [r7, #15]
 8005754:	3b01      	subs	r3, #1
 8005756:	b2db      	uxtb	r3, r3
 8005758:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800575a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800575e:	2b00      	cmp	r3, #0
 8005760:	dce9      	bgt.n	8005736 <prvUnlockQueue+0x16>
 8005762:	e000      	b.n	8005766 <prvUnlockQueue+0x46>
					break;
 8005764:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	22ff      	movs	r2, #255	@ 0xff
 800576a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800576e:	f002 f88d 	bl	800788c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005772:	f002 f859 	bl	8007828 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800577c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800577e:	e011      	b.n	80057a4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	691b      	ldr	r3, [r3, #16]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d012      	beq.n	80057ae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	3310      	adds	r3, #16
 800578c:	4618      	mov	r0, r3
 800578e:	f000 fdd5 	bl	800633c <xTaskRemoveFromEventList>
 8005792:	4603      	mov	r3, r0
 8005794:	2b00      	cmp	r3, #0
 8005796:	d001      	beq.n	800579c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005798:	f000 feae 	bl	80064f8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800579c:	7bbb      	ldrb	r3, [r7, #14]
 800579e:	3b01      	subs	r3, #1
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80057a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	dce9      	bgt.n	8005780 <prvUnlockQueue+0x60>
 80057ac:	e000      	b.n	80057b0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80057ae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	22ff      	movs	r2, #255	@ 0xff
 80057b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80057b8:	f002 f868 	bl	800788c <vPortExitCritical>
}
 80057bc:	bf00      	nop
 80057be:	3710      	adds	r7, #16
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b084      	sub	sp, #16
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80057cc:	f002 f82c 	bl	8007828 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d102      	bne.n	80057de <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80057d8:	2301      	movs	r3, #1
 80057da:	60fb      	str	r3, [r7, #12]
 80057dc:	e001      	b.n	80057e2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80057de:	2300      	movs	r3, #0
 80057e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80057e2:	f002 f853 	bl	800788c <vPortExitCritical>

	return xReturn;
 80057e6:	68fb      	ldr	r3, [r7, #12]
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3710      	adds	r7, #16
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}

080057f0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b084      	sub	sp, #16
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80057f8:	f002 f816 	bl	8007828 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005804:	429a      	cmp	r2, r3
 8005806:	d102      	bne.n	800580e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005808:	2301      	movs	r3, #1
 800580a:	60fb      	str	r3, [r7, #12]
 800580c:	e001      	b.n	8005812 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800580e:	2300      	movs	r3, #0
 8005810:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005812:	f002 f83b 	bl	800788c <vPortExitCritical>

	return xReturn;
 8005816:	68fb      	ldr	r3, [r7, #12]
}
 8005818:	4618      	mov	r0, r3
 800581a:	3710      	adds	r7, #16
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005820:	b480      	push	{r7}
 8005822:	b085      	sub	sp, #20
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800582a:	2300      	movs	r3, #0
 800582c:	60fb      	str	r3, [r7, #12]
 800582e:	e014      	b.n	800585a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005830:	4a0f      	ldr	r2, [pc, #60]	@ (8005870 <vQueueAddToRegistry+0x50>)
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d10b      	bne.n	8005854 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800583c:	490c      	ldr	r1, [pc, #48]	@ (8005870 <vQueueAddToRegistry+0x50>)
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	683a      	ldr	r2, [r7, #0]
 8005842:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005846:	4a0a      	ldr	r2, [pc, #40]	@ (8005870 <vQueueAddToRegistry+0x50>)
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	00db      	lsls	r3, r3, #3
 800584c:	4413      	add	r3, r2
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005852:	e006      	b.n	8005862 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	3301      	adds	r3, #1
 8005858:	60fb      	str	r3, [r7, #12]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2b07      	cmp	r3, #7
 800585e:	d9e7      	bls.n	8005830 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005860:	bf00      	nop
 8005862:	bf00      	nop
 8005864:	3714      	adds	r7, #20
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr
 800586e:	bf00      	nop
 8005870:	20000a48 	.word	0x20000a48

08005874 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005874:	b580      	push	{r7, lr}
 8005876:	b086      	sub	sp, #24
 8005878:	af00      	add	r7, sp, #0
 800587a:	60f8      	str	r0, [r7, #12]
 800587c:	60b9      	str	r1, [r7, #8]
 800587e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005884:	f001 ffd0 	bl	8007828 <vPortEnterCritical>
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800588e:	b25b      	sxtb	r3, r3
 8005890:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005894:	d103      	bne.n	800589e <vQueueWaitForMessageRestricted+0x2a>
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	2200      	movs	r2, #0
 800589a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80058a4:	b25b      	sxtb	r3, r3
 80058a6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80058aa:	d103      	bne.n	80058b4 <vQueueWaitForMessageRestricted+0x40>
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	2200      	movs	r2, #0
 80058b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80058b4:	f001 ffea 	bl	800788c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d106      	bne.n	80058ce <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	3324      	adds	r3, #36	@ 0x24
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	68b9      	ldr	r1, [r7, #8]
 80058c8:	4618      	mov	r0, r3
 80058ca:	f000 fd0b 	bl	80062e4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80058ce:	6978      	ldr	r0, [r7, #20]
 80058d0:	f7ff ff26 	bl	8005720 <prvUnlockQueue>
	}
 80058d4:	bf00      	nop
 80058d6:	3718      	adds	r7, #24
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}

080058dc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b08e      	sub	sp, #56	@ 0x38
 80058e0:	af04      	add	r7, sp, #16
 80058e2:	60f8      	str	r0, [r7, #12]
 80058e4:	60b9      	str	r1, [r7, #8]
 80058e6:	607a      	str	r2, [r7, #4]
 80058e8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80058ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d10b      	bne.n	8005908 <xTaskCreateStatic+0x2c>
	__asm volatile
 80058f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058f4:	f383 8811 	msr	BASEPRI, r3
 80058f8:	f3bf 8f6f 	isb	sy
 80058fc:	f3bf 8f4f 	dsb	sy
 8005900:	623b      	str	r3, [r7, #32]
}
 8005902:	bf00      	nop
 8005904:	bf00      	nop
 8005906:	e7fd      	b.n	8005904 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800590a:	2b00      	cmp	r3, #0
 800590c:	d10b      	bne.n	8005926 <xTaskCreateStatic+0x4a>
	__asm volatile
 800590e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005912:	f383 8811 	msr	BASEPRI, r3
 8005916:	f3bf 8f6f 	isb	sy
 800591a:	f3bf 8f4f 	dsb	sy
 800591e:	61fb      	str	r3, [r7, #28]
}
 8005920:	bf00      	nop
 8005922:	bf00      	nop
 8005924:	e7fd      	b.n	8005922 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005926:	23d8      	movs	r3, #216	@ 0xd8
 8005928:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	2bd8      	cmp	r3, #216	@ 0xd8
 800592e:	d00b      	beq.n	8005948 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005934:	f383 8811 	msr	BASEPRI, r3
 8005938:	f3bf 8f6f 	isb	sy
 800593c:	f3bf 8f4f 	dsb	sy
 8005940:	61bb      	str	r3, [r7, #24]
}
 8005942:	bf00      	nop
 8005944:	bf00      	nop
 8005946:	e7fd      	b.n	8005944 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005948:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800594a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800594c:	2b00      	cmp	r3, #0
 800594e:	d01e      	beq.n	800598e <xTaskCreateStatic+0xb2>
 8005950:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005952:	2b00      	cmp	r3, #0
 8005954:	d01b      	beq.n	800598e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005958:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800595a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800595c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800595e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005962:	2202      	movs	r2, #2
 8005964:	f883 20d5 	strb.w	r2, [r3, #213]	@ 0xd5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005968:	2300      	movs	r3, #0
 800596a:	9303      	str	r3, [sp, #12]
 800596c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800596e:	9302      	str	r3, [sp, #8]
 8005970:	f107 0314 	add.w	r3, r7, #20
 8005974:	9301      	str	r3, [sp, #4]
 8005976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005978:	9300      	str	r3, [sp, #0]
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	687a      	ldr	r2, [r7, #4]
 800597e:	68b9      	ldr	r1, [r7, #8]
 8005980:	68f8      	ldr	r0, [r7, #12]
 8005982:	f000 f851 	bl	8005a28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005986:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005988:	f000 f90e 	bl	8005ba8 <prvAddNewTaskToReadyList>
 800598c:	e001      	b.n	8005992 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800598e:	2300      	movs	r3, #0
 8005990:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005992:	697b      	ldr	r3, [r7, #20]
	}
 8005994:	4618      	mov	r0, r3
 8005996:	3728      	adds	r7, #40	@ 0x28
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800599c:	b580      	push	{r7, lr}
 800599e:	b08c      	sub	sp, #48	@ 0x30
 80059a0:	af04      	add	r7, sp, #16
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	60b9      	str	r1, [r7, #8]
 80059a6:	603b      	str	r3, [r7, #0]
 80059a8:	4613      	mov	r3, r2
 80059aa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80059ac:	88fb      	ldrh	r3, [r7, #6]
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	4618      	mov	r0, r3
 80059b2:	f002 f85b 	bl	8007a6c <pvPortMalloc>
 80059b6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d00e      	beq.n	80059dc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80059be:	20d8      	movs	r0, #216	@ 0xd8
 80059c0:	f002 f854 	bl	8007a6c <pvPortMalloc>
 80059c4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d003      	beq.n	80059d4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80059cc:	69fb      	ldr	r3, [r7, #28]
 80059ce:	697a      	ldr	r2, [r7, #20]
 80059d0:	631a      	str	r2, [r3, #48]	@ 0x30
 80059d2:	e005      	b.n	80059e0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80059d4:	6978      	ldr	r0, [r7, #20]
 80059d6:	f002 f917 	bl	8007c08 <vPortFree>
 80059da:	e001      	b.n	80059e0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80059dc:	2300      	movs	r3, #0
 80059de:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80059e0:	69fb      	ldr	r3, [r7, #28]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d017      	beq.n	8005a16 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	2200      	movs	r2, #0
 80059ea:	f883 20d5 	strb.w	r2, [r3, #213]	@ 0xd5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80059ee:	88fa      	ldrh	r2, [r7, #6]
 80059f0:	2300      	movs	r3, #0
 80059f2:	9303      	str	r3, [sp, #12]
 80059f4:	69fb      	ldr	r3, [r7, #28]
 80059f6:	9302      	str	r3, [sp, #8]
 80059f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059fa:	9301      	str	r3, [sp, #4]
 80059fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059fe:	9300      	str	r3, [sp, #0]
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	68b9      	ldr	r1, [r7, #8]
 8005a04:	68f8      	ldr	r0, [r7, #12]
 8005a06:	f000 f80f 	bl	8005a28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005a0a:	69f8      	ldr	r0, [r7, #28]
 8005a0c:	f000 f8cc 	bl	8005ba8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005a10:	2301      	movs	r3, #1
 8005a12:	61bb      	str	r3, [r7, #24]
 8005a14:	e002      	b.n	8005a1c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005a16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005a1a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005a1c:	69bb      	ldr	r3, [r7, #24]
	}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3720      	adds	r7, #32
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}
	...

08005a28 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b088      	sub	sp, #32
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	60f8      	str	r0, [r7, #12]
 8005a30:	60b9      	str	r1, [r7, #8]
 8005a32:	607a      	str	r2, [r7, #4]
 8005a34:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a38:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	461a      	mov	r2, r3
 8005a40:	21a5      	movs	r1, #165	@ 0xa5
 8005a42:	f002 fbb7 	bl	80081b4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a48:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005a50:	3b01      	subs	r3, #1
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	4413      	add	r3, r2
 8005a56:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005a58:	69bb      	ldr	r3, [r7, #24]
 8005a5a:	f023 0307 	bic.w	r3, r3, #7
 8005a5e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005a60:	69bb      	ldr	r3, [r7, #24]
 8005a62:	f003 0307 	and.w	r3, r3, #7
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d00b      	beq.n	8005a82 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005a6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a6e:	f383 8811 	msr	BASEPRI, r3
 8005a72:	f3bf 8f6f 	isb	sy
 8005a76:	f3bf 8f4f 	dsb	sy
 8005a7a:	617b      	str	r3, [r7, #20]
}
 8005a7c:	bf00      	nop
 8005a7e:	bf00      	nop
 8005a80:	e7fd      	b.n	8005a7e <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8005a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a84:	69ba      	ldr	r2, [r7, #24]
 8005a86:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d01f      	beq.n	8005ace <prvInitialiseNewTask+0xa6>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a8e:	2300      	movs	r3, #0
 8005a90:	61fb      	str	r3, [r7, #28]
 8005a92:	e012      	b.n	8005aba <prvInitialiseNewTask+0x92>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005a94:	68ba      	ldr	r2, [r7, #8]
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	4413      	add	r3, r2
 8005a9a:	7819      	ldrb	r1, [r3, #0]
 8005a9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a9e:	69fb      	ldr	r3, [r7, #28]
 8005aa0:	4413      	add	r3, r2
 8005aa2:	3334      	adds	r3, #52	@ 0x34
 8005aa4:	460a      	mov	r2, r1
 8005aa6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005aa8:	68ba      	ldr	r2, [r7, #8]
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	4413      	add	r3, r2
 8005aae:	781b      	ldrb	r3, [r3, #0]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d006      	beq.n	8005ac2 <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ab4:	69fb      	ldr	r3, [r7, #28]
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	61fb      	str	r3, [r7, #28]
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	2b0f      	cmp	r3, #15
 8005abe:	d9e9      	bls.n	8005a94 <prvInitialiseNewTask+0x6c>
 8005ac0:	e000      	b.n	8005ac4 <prvInitialiseNewTask+0x9c>
			{
				break;
 8005ac2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005acc:	e003      	b.n	8005ad6 <prvInitialiseNewTask+0xae>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005ace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ad8:	2b37      	cmp	r3, #55	@ 0x37
 8005ada:	d901      	bls.n	8005ae0 <prvInitialiseNewTask+0xb8>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005adc:	2337      	movs	r3, #55	@ 0x37
 8005ade:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ae2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ae4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ae8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005aea:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->uxMutexesHeld = 0;
 8005aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aee:	2200      	movs	r2, #0
 8005af0:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005af4:	3304      	adds	r3, #4
 8005af6:	4618      	mov	r0, r3
 8005af8:	f7fe ff6e 	bl	80049d8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005afe:	3318      	adds	r3, #24
 8005b00:	4618      	mov	r0, r3
 8005b02:	f7fe ff69 	bl	80049d8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b0a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b0e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b14:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b1a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8005b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	}
	#endif

	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
	{
		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 8005b24:	2300      	movs	r3, #0
 8005b26:	61fb      	str	r3, [r7, #28]
 8005b28:	e008      	b.n	8005b3c <prvInitialiseNewTask+0x114>
		{
			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 8005b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b2c:	69fa      	ldr	r2, [r7, #28]
 8005b2e:	3216      	adds	r2, #22
 8005b30:	2100      	movs	r1, #0
 8005b32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	3301      	adds	r3, #1
 8005b3a:	61fb      	str	r3, [r7, #28]
 8005b3c:	69fb      	ldr	r3, [r7, #28]
 8005b3e:	2b09      	cmp	r3, #9
 8005b40:	d9f3      	bls.n	8005b2a <prvInitialiseNewTask+0x102>
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b44:	2200      	movs	r2, #0
 8005b46:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b54:	3384      	adds	r3, #132	@ 0x84
 8005b56:	224c      	movs	r2, #76	@ 0x4c
 8005b58:	2100      	movs	r1, #0
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f002 fb2a 	bl	80081b4 <memset>
 8005b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b62:	4a0e      	ldr	r2, [pc, #56]	@ (8005b9c <prvInitialiseNewTask+0x174>)
 8005b64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8005b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b6a:	4a0d      	ldr	r2, [pc, #52]	@ (8005ba0 <prvInitialiseNewTask+0x178>)
 8005b6c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8005b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b72:	4a0c      	ldr	r2, [pc, #48]	@ (8005ba4 <prvInitialiseNewTask+0x17c>)
 8005b74:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005b78:	683a      	ldr	r2, [r7, #0]
 8005b7a:	68f9      	ldr	r1, [r7, #12]
 8005b7c:	69b8      	ldr	r0, [r7, #24]
 8005b7e:	f001 fd21 	bl	80075c4 <pxPortInitialiseStack>
 8005b82:	4602      	mov	r2, r0
 8005b84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b86:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005b88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d002      	beq.n	8005b94 <prvInitialiseNewTask+0x16c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005b8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b92:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b94:	bf00      	nop
 8005b96:	3720      	adds	r7, #32
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}
 8005b9c:	20004ce4 	.word	0x20004ce4
 8005ba0:	20004d4c 	.word	0x20004d4c
 8005ba4:	20004db4 	.word	0x20004db4

08005ba8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005bb0:	f001 fe3a 	bl	8007828 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005bb4:	4b2d      	ldr	r3, [pc, #180]	@ (8005c6c <prvAddNewTaskToReadyList+0xc4>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	3301      	adds	r3, #1
 8005bba:	4a2c      	ldr	r2, [pc, #176]	@ (8005c6c <prvAddNewTaskToReadyList+0xc4>)
 8005bbc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005bbe:	4b2c      	ldr	r3, [pc, #176]	@ (8005c70 <prvAddNewTaskToReadyList+0xc8>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d109      	bne.n	8005bda <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005bc6:	4a2a      	ldr	r2, [pc, #168]	@ (8005c70 <prvAddNewTaskToReadyList+0xc8>)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005bcc:	4b27      	ldr	r3, [pc, #156]	@ (8005c6c <prvAddNewTaskToReadyList+0xc4>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d110      	bne.n	8005bf6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005bd4:	f000 fcf8 	bl	80065c8 <prvInitialiseTaskLists>
 8005bd8:	e00d      	b.n	8005bf6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005bda:	4b26      	ldr	r3, [pc, #152]	@ (8005c74 <prvAddNewTaskToReadyList+0xcc>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d109      	bne.n	8005bf6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005be2:	4b23      	ldr	r3, [pc, #140]	@ (8005c70 <prvAddNewTaskToReadyList+0xc8>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d802      	bhi.n	8005bf6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005bf0:	4a1f      	ldr	r2, [pc, #124]	@ (8005c70 <prvAddNewTaskToReadyList+0xc8>)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005bf6:	4b20      	ldr	r3, [pc, #128]	@ (8005c78 <prvAddNewTaskToReadyList+0xd0>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	4a1e      	ldr	r2, [pc, #120]	@ (8005c78 <prvAddNewTaskToReadyList+0xd0>)
 8005bfe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005c00:	4b1d      	ldr	r3, [pc, #116]	@ (8005c78 <prvAddNewTaskToReadyList+0xd0>)
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	649a      	str	r2, [r3, #72]	@ 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c0c:	4b1b      	ldr	r3, [pc, #108]	@ (8005c7c <prvAddNewTaskToReadyList+0xd4>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d903      	bls.n	8005c1c <prvAddNewTaskToReadyList+0x74>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c18:	4a18      	ldr	r2, [pc, #96]	@ (8005c7c <prvAddNewTaskToReadyList+0xd4>)
 8005c1a:	6013      	str	r3, [r2, #0]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c20:	4613      	mov	r3, r2
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	4413      	add	r3, r2
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	4a15      	ldr	r2, [pc, #84]	@ (8005c80 <prvAddNewTaskToReadyList+0xd8>)
 8005c2a:	441a      	add	r2, r3
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	3304      	adds	r3, #4
 8005c30:	4619      	mov	r1, r3
 8005c32:	4610      	mov	r0, r2
 8005c34:	f7fe fedd 	bl	80049f2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005c38:	f001 fe28 	bl	800788c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005c3c:	4b0d      	ldr	r3, [pc, #52]	@ (8005c74 <prvAddNewTaskToReadyList+0xcc>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d00e      	beq.n	8005c62 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005c44:	4b0a      	ldr	r3, [pc, #40]	@ (8005c70 <prvAddNewTaskToReadyList+0xc8>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d207      	bcs.n	8005c62 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005c52:	4b0c      	ldr	r3, [pc, #48]	@ (8005c84 <prvAddNewTaskToReadyList+0xdc>)
 8005c54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c58:	601a      	str	r2, [r3, #0]
 8005c5a:	f3bf 8f4f 	dsb	sy
 8005c5e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c62:	bf00      	nop
 8005c64:	3708      	adds	r7, #8
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	bf00      	nop
 8005c6c:	20000f5c 	.word	0x20000f5c
 8005c70:	20000a88 	.word	0x20000a88
 8005c74:	20000f68 	.word	0x20000f68
 8005c78:	20000f78 	.word	0x20000f78
 8005c7c:	20000f64 	.word	0x20000f64
 8005c80:	20000a8c 	.word	0x20000a8c
 8005c84:	e000ed04 	.word	0xe000ed04

08005c88 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b088      	sub	sp, #32
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 8005c92:	2300      	movs	r3, #0
 8005c94:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	2b37      	cmp	r3, #55	@ 0x37
 8005c9a:	d90b      	bls.n	8005cb4 <vTaskPrioritySet+0x2c>
	__asm volatile
 8005c9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ca0:	f383 8811 	msr	BASEPRI, r3
 8005ca4:	f3bf 8f6f 	isb	sy
 8005ca8:	f3bf 8f4f 	dsb	sy
 8005cac:	60fb      	str	r3, [r7, #12]
}
 8005cae:	bf00      	nop
 8005cb0:	bf00      	nop
 8005cb2:	e7fd      	b.n	8005cb0 <vTaskPrioritySet+0x28>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	2b37      	cmp	r3, #55	@ 0x37
 8005cb8:	d901      	bls.n	8005cbe <vTaskPrioritySet+0x36>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005cba:	2337      	movs	r3, #55	@ 0x37
 8005cbc:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 8005cbe:	f001 fdb3 	bl	8007828 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d102      	bne.n	8005cce <vTaskPrioritySet+0x46>
 8005cc8:	4b3a      	ldr	r3, [pc, #232]	@ (8005db4 <vTaskPrioritySet+0x12c>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	e000      	b.n	8005cd0 <vTaskPrioritySet+0x48>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 8005cd2:	69bb      	ldr	r3, [r7, #24]
 8005cd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cd6:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 8005cd8:	697a      	ldr	r2, [r7, #20]
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d063      	beq.n	8005da8 <vTaskPrioritySet+0x120>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 8005ce0:	683a      	ldr	r2, [r7, #0]
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d90d      	bls.n	8005d04 <vTaskPrioritySet+0x7c>
				{
					if( pxTCB != pxCurrentTCB )
 8005ce8:	4b32      	ldr	r3, [pc, #200]	@ (8005db4 <vTaskPrioritySet+0x12c>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	69ba      	ldr	r2, [r7, #24]
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	d00f      	beq.n	8005d12 <vTaskPrioritySet+0x8a>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8005cf2:	4b30      	ldr	r3, [pc, #192]	@ (8005db4 <vTaskPrioritySet+0x12c>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cf8:	683a      	ldr	r2, [r7, #0]
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d309      	bcc.n	8005d12 <vTaskPrioritySet+0x8a>
						{
							xYieldRequired = pdTRUE;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	61fb      	str	r3, [r7, #28]
 8005d02:	e006      	b.n	8005d12 <vTaskPrioritySet+0x8a>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 8005d04:	4b2b      	ldr	r3, [pc, #172]	@ (8005db4 <vTaskPrioritySet+0x12c>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	69ba      	ldr	r2, [r7, #24]
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d101      	bne.n	8005d12 <vTaskPrioritySet+0x8a>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005d12:	69bb      	ldr	r3, [r7, #24]
 8005d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d16:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8005d18:	69bb      	ldr	r3, [r7, #24]
 8005d1a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005d1c:	69bb      	ldr	r3, [r7, #24]
 8005d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d102      	bne.n	8005d2a <vTaskPrioritySet+0xa2>
					{
						pxTCB->uxPriority = uxNewPriority;
 8005d24:	69bb      	ldr	r3, [r7, #24]
 8005d26:	683a      	ldr	r2, [r7, #0]
 8005d28:	62da      	str	r2, [r3, #44]	@ 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 8005d2a:	69bb      	ldr	r3, [r7, #24]
 8005d2c:	683a      	ldr	r2, [r7, #0]
 8005d2e:	651a      	str	r2, [r3, #80]	@ 0x50
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005d30:	69bb      	ldr	r3, [r7, #24]
 8005d32:	699b      	ldr	r3, [r3, #24]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	db04      	blt.n	8005d42 <vTaskPrioritySet+0xba>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005d3e:	69bb      	ldr	r3, [r7, #24]
 8005d40:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005d42:	69bb      	ldr	r3, [r7, #24]
 8005d44:	6959      	ldr	r1, [r3, #20]
 8005d46:	693a      	ldr	r2, [r7, #16]
 8005d48:	4613      	mov	r3, r2
 8005d4a:	009b      	lsls	r3, r3, #2
 8005d4c:	4413      	add	r3, r2
 8005d4e:	009b      	lsls	r3, r3, #2
 8005d50:	4a19      	ldr	r2, [pc, #100]	@ (8005db8 <vTaskPrioritySet+0x130>)
 8005d52:	4413      	add	r3, r2
 8005d54:	4299      	cmp	r1, r3
 8005d56:	d11c      	bne.n	8005d92 <vTaskPrioritySet+0x10a>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d58:	69bb      	ldr	r3, [r7, #24]
 8005d5a:	3304      	adds	r3, #4
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f7fe fea5 	bl	8004aac <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d66:	4b15      	ldr	r3, [pc, #84]	@ (8005dbc <vTaskPrioritySet+0x134>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d903      	bls.n	8005d76 <vTaskPrioritySet+0xee>
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d72:	4a12      	ldr	r2, [pc, #72]	@ (8005dbc <vTaskPrioritySet+0x134>)
 8005d74:	6013      	str	r3, [r2, #0]
 8005d76:	69bb      	ldr	r3, [r7, #24]
 8005d78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d7a:	4613      	mov	r3, r2
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	4413      	add	r3, r2
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	4a0d      	ldr	r2, [pc, #52]	@ (8005db8 <vTaskPrioritySet+0x130>)
 8005d84:	441a      	add	r2, r3
 8005d86:	69bb      	ldr	r3, [r7, #24]
 8005d88:	3304      	adds	r3, #4
 8005d8a:	4619      	mov	r1, r3
 8005d8c:	4610      	mov	r0, r2
 8005d8e:	f7fe fe30 	bl	80049f2 <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 8005d92:	69fb      	ldr	r3, [r7, #28]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d007      	beq.n	8005da8 <vTaskPrioritySet+0x120>
				{
					taskYIELD_IF_USING_PREEMPTION();
 8005d98:	4b09      	ldr	r3, [pc, #36]	@ (8005dc0 <vTaskPrioritySet+0x138>)
 8005d9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d9e:	601a      	str	r2, [r3, #0]
 8005da0:	f3bf 8f4f 	dsb	sy
 8005da4:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 8005da8:	f001 fd70 	bl	800788c <vPortExitCritical>
	}
 8005dac:	bf00      	nop
 8005dae:	3720      	adds	r7, #32
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}
 8005db4:	20000a88 	.word	0x20000a88
 8005db8:	20000a8c 	.word	0x20000a8c
 8005dbc:	20000f64 	.word	0x20000f64
 8005dc0:	e000ed04 	.word	0xe000ed04

08005dc4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b08a      	sub	sp, #40	@ 0x28
 8005dc8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005dd2:	463a      	mov	r2, r7
 8005dd4:	1d39      	adds	r1, r7, #4
 8005dd6:	f107 0308 	add.w	r3, r7, #8
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f7fe fda8 	bl	8004930 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005de0:	6839      	ldr	r1, [r7, #0]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	68ba      	ldr	r2, [r7, #8]
 8005de6:	9202      	str	r2, [sp, #8]
 8005de8:	9301      	str	r3, [sp, #4]
 8005dea:	2300      	movs	r3, #0
 8005dec:	9300      	str	r3, [sp, #0]
 8005dee:	2300      	movs	r3, #0
 8005df0:	460a      	mov	r2, r1
 8005df2:	4925      	ldr	r1, [pc, #148]	@ (8005e88 <vTaskStartScheduler+0xc4>)
 8005df4:	4825      	ldr	r0, [pc, #148]	@ (8005e8c <vTaskStartScheduler+0xc8>)
 8005df6:	f7ff fd71 	bl	80058dc <xTaskCreateStatic>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	4a24      	ldr	r2, [pc, #144]	@ (8005e90 <vTaskStartScheduler+0xcc>)
 8005dfe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005e00:	4b23      	ldr	r3, [pc, #140]	@ (8005e90 <vTaskStartScheduler+0xcc>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d002      	beq.n	8005e0e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	617b      	str	r3, [r7, #20]
 8005e0c:	e001      	b.n	8005e12 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d102      	bne.n	8005e1e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005e18:	f000 fffa 	bl	8006e10 <xTimerCreateTimerTask>
 8005e1c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d11d      	bne.n	8005e60 <vTaskStartScheduler+0x9c>
	__asm volatile
 8005e24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e28:	f383 8811 	msr	BASEPRI, r3
 8005e2c:	f3bf 8f6f 	isb	sy
 8005e30:	f3bf 8f4f 	dsb	sy
 8005e34:	613b      	str	r3, [r7, #16]
}
 8005e36:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005e38:	4b16      	ldr	r3, [pc, #88]	@ (8005e94 <vTaskStartScheduler+0xd0>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	3384      	adds	r3, #132	@ 0x84
 8005e3e:	4a16      	ldr	r2, [pc, #88]	@ (8005e98 <vTaskStartScheduler+0xd4>)
 8005e40:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005e42:	4b16      	ldr	r3, [pc, #88]	@ (8005e9c <vTaskStartScheduler+0xd8>)
 8005e44:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005e48:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005e4a:	4b15      	ldr	r3, [pc, #84]	@ (8005ea0 <vTaskStartScheduler+0xdc>)
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005e50:	4b14      	ldr	r3, [pc, #80]	@ (8005ea4 <vTaskStartScheduler+0xe0>)
 8005e52:	2200      	movs	r2, #0
 8005e54:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8005e56:	f7fb f823 	bl	8000ea0 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005e5a:	f001 fc41 	bl	80076e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005e5e:	e00f      	b.n	8005e80 <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005e66:	d10b      	bne.n	8005e80 <vTaskStartScheduler+0xbc>
	__asm volatile
 8005e68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e6c:	f383 8811 	msr	BASEPRI, r3
 8005e70:	f3bf 8f6f 	isb	sy
 8005e74:	f3bf 8f4f 	dsb	sy
 8005e78:	60fb      	str	r3, [r7, #12]
}
 8005e7a:	bf00      	nop
 8005e7c:	bf00      	nop
 8005e7e:	e7fd      	b.n	8005e7c <vTaskStartScheduler+0xb8>
}
 8005e80:	bf00      	nop
 8005e82:	3718      	adds	r7, #24
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}
 8005e88:	08008bf0 	.word	0x08008bf0
 8005e8c:	08006511 	.word	0x08006511
 8005e90:	20000f80 	.word	0x20000f80
 8005e94:	20000a88 	.word	0x20000a88
 8005e98:	20000010 	.word	0x20000010
 8005e9c:	20000f7c 	.word	0x20000f7c
 8005ea0:	20000f68 	.word	0x20000f68
 8005ea4:	20000f60 	.word	0x20000f60

08005ea8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005eac:	4b04      	ldr	r3, [pc, #16]	@ (8005ec0 <vTaskSuspendAll+0x18>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	3301      	adds	r3, #1
 8005eb2:	4a03      	ldr	r2, [pc, #12]	@ (8005ec0 <vTaskSuspendAll+0x18>)
 8005eb4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005eb6:	bf00      	nop
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr
 8005ec0:	20000f84 	.word	0x20000f84

08005ec4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b084      	sub	sp, #16
 8005ec8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005ed2:	4b42      	ldr	r3, [pc, #264]	@ (8005fdc <xTaskResumeAll+0x118>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d10b      	bne.n	8005ef2 <xTaskResumeAll+0x2e>
	__asm volatile
 8005eda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ede:	f383 8811 	msr	BASEPRI, r3
 8005ee2:	f3bf 8f6f 	isb	sy
 8005ee6:	f3bf 8f4f 	dsb	sy
 8005eea:	603b      	str	r3, [r7, #0]
}
 8005eec:	bf00      	nop
 8005eee:	bf00      	nop
 8005ef0:	e7fd      	b.n	8005eee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005ef2:	f001 fc99 	bl	8007828 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005ef6:	4b39      	ldr	r3, [pc, #228]	@ (8005fdc <xTaskResumeAll+0x118>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	3b01      	subs	r3, #1
 8005efc:	4a37      	ldr	r2, [pc, #220]	@ (8005fdc <xTaskResumeAll+0x118>)
 8005efe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f00:	4b36      	ldr	r3, [pc, #216]	@ (8005fdc <xTaskResumeAll+0x118>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d162      	bne.n	8005fce <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005f08:	4b35      	ldr	r3, [pc, #212]	@ (8005fe0 <xTaskResumeAll+0x11c>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d05e      	beq.n	8005fce <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005f10:	e02f      	b.n	8005f72 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f12:	4b34      	ldr	r3, [pc, #208]	@ (8005fe4 <xTaskResumeAll+0x120>)
 8005f14:	68db      	ldr	r3, [r3, #12]
 8005f16:	68db      	ldr	r3, [r3, #12]
 8005f18:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	3318      	adds	r3, #24
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f7fe fdc4 	bl	8004aac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	3304      	adds	r3, #4
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f7fe fdbf 	bl	8004aac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f32:	4b2d      	ldr	r3, [pc, #180]	@ (8005fe8 <xTaskResumeAll+0x124>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d903      	bls.n	8005f42 <xTaskResumeAll+0x7e>
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f3e:	4a2a      	ldr	r2, [pc, #168]	@ (8005fe8 <xTaskResumeAll+0x124>)
 8005f40:	6013      	str	r3, [r2, #0]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f46:	4613      	mov	r3, r2
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	4413      	add	r3, r2
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	4a27      	ldr	r2, [pc, #156]	@ (8005fec <xTaskResumeAll+0x128>)
 8005f50:	441a      	add	r2, r3
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	3304      	adds	r3, #4
 8005f56:	4619      	mov	r1, r3
 8005f58:	4610      	mov	r0, r2
 8005f5a:	f7fe fd4a 	bl	80049f2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f62:	4b23      	ldr	r3, [pc, #140]	@ (8005ff0 <xTaskResumeAll+0x12c>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d302      	bcc.n	8005f72 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005f6c:	4b21      	ldr	r3, [pc, #132]	@ (8005ff4 <xTaskResumeAll+0x130>)
 8005f6e:	2201      	movs	r2, #1
 8005f70:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005f72:	4b1c      	ldr	r3, [pc, #112]	@ (8005fe4 <xTaskResumeAll+0x120>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d1cb      	bne.n	8005f12 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d001      	beq.n	8005f84 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005f80:	f000 fbc6 	bl	8006710 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005f84:	4b1c      	ldr	r3, [pc, #112]	@ (8005ff8 <xTaskResumeAll+0x134>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d010      	beq.n	8005fb2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005f90:	f000 f846 	bl	8006020 <xTaskIncrementTick>
 8005f94:	4603      	mov	r3, r0
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d002      	beq.n	8005fa0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005f9a:	4b16      	ldr	r3, [pc, #88]	@ (8005ff4 <xTaskResumeAll+0x130>)
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	3b01      	subs	r3, #1
 8005fa4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d1f1      	bne.n	8005f90 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005fac:	4b12      	ldr	r3, [pc, #72]	@ (8005ff8 <xTaskResumeAll+0x134>)
 8005fae:	2200      	movs	r2, #0
 8005fb0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005fb2:	4b10      	ldr	r3, [pc, #64]	@ (8005ff4 <xTaskResumeAll+0x130>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d009      	beq.n	8005fce <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005fbe:	4b0f      	ldr	r3, [pc, #60]	@ (8005ffc <xTaskResumeAll+0x138>)
 8005fc0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005fc4:	601a      	str	r2, [r3, #0]
 8005fc6:	f3bf 8f4f 	dsb	sy
 8005fca:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005fce:	f001 fc5d 	bl	800788c <vPortExitCritical>

	return xAlreadyYielded;
 8005fd2:	68bb      	ldr	r3, [r7, #8]
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3710      	adds	r7, #16
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}
 8005fdc:	20000f84 	.word	0x20000f84
 8005fe0:	20000f5c 	.word	0x20000f5c
 8005fe4:	20000f1c 	.word	0x20000f1c
 8005fe8:	20000f64 	.word	0x20000f64
 8005fec:	20000a8c 	.word	0x20000a8c
 8005ff0:	20000a88 	.word	0x20000a88
 8005ff4:	20000f70 	.word	0x20000f70
 8005ff8:	20000f6c 	.word	0x20000f6c
 8005ffc:	e000ed04 	.word	0xe000ed04

08006000 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006000:	b480      	push	{r7}
 8006002:	b083      	sub	sp, #12
 8006004:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006006:	4b05      	ldr	r3, [pc, #20]	@ (800601c <xTaskGetTickCount+0x1c>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800600c:	687b      	ldr	r3, [r7, #4]
}
 800600e:	4618      	mov	r0, r3
 8006010:	370c      	adds	r7, #12
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr
 800601a:	bf00      	nop
 800601c:	20000f60 	.word	0x20000f60

08006020 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b086      	sub	sp, #24
 8006024:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006026:	2300      	movs	r3, #0
 8006028:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800602a:	4b4f      	ldr	r3, [pc, #316]	@ (8006168 <xTaskIncrementTick+0x148>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	2b00      	cmp	r3, #0
 8006030:	f040 8090 	bne.w	8006154 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006034:	4b4d      	ldr	r3, [pc, #308]	@ (800616c <xTaskIncrementTick+0x14c>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	3301      	adds	r3, #1
 800603a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800603c:	4a4b      	ldr	r2, [pc, #300]	@ (800616c <xTaskIncrementTick+0x14c>)
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d121      	bne.n	800608c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006048:	4b49      	ldr	r3, [pc, #292]	@ (8006170 <xTaskIncrementTick+0x150>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d00b      	beq.n	800606a <xTaskIncrementTick+0x4a>
	__asm volatile
 8006052:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006056:	f383 8811 	msr	BASEPRI, r3
 800605a:	f3bf 8f6f 	isb	sy
 800605e:	f3bf 8f4f 	dsb	sy
 8006062:	603b      	str	r3, [r7, #0]
}
 8006064:	bf00      	nop
 8006066:	bf00      	nop
 8006068:	e7fd      	b.n	8006066 <xTaskIncrementTick+0x46>
 800606a:	4b41      	ldr	r3, [pc, #260]	@ (8006170 <xTaskIncrementTick+0x150>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	60fb      	str	r3, [r7, #12]
 8006070:	4b40      	ldr	r3, [pc, #256]	@ (8006174 <xTaskIncrementTick+0x154>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a3e      	ldr	r2, [pc, #248]	@ (8006170 <xTaskIncrementTick+0x150>)
 8006076:	6013      	str	r3, [r2, #0]
 8006078:	4a3e      	ldr	r2, [pc, #248]	@ (8006174 <xTaskIncrementTick+0x154>)
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	6013      	str	r3, [r2, #0]
 800607e:	4b3e      	ldr	r3, [pc, #248]	@ (8006178 <xTaskIncrementTick+0x158>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	3301      	adds	r3, #1
 8006084:	4a3c      	ldr	r2, [pc, #240]	@ (8006178 <xTaskIncrementTick+0x158>)
 8006086:	6013      	str	r3, [r2, #0]
 8006088:	f000 fb42 	bl	8006710 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800608c:	4b3b      	ldr	r3, [pc, #236]	@ (800617c <xTaskIncrementTick+0x15c>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	693a      	ldr	r2, [r7, #16]
 8006092:	429a      	cmp	r2, r3
 8006094:	d349      	bcc.n	800612a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006096:	4b36      	ldr	r3, [pc, #216]	@ (8006170 <xTaskIncrementTick+0x150>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d104      	bne.n	80060aa <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060a0:	4b36      	ldr	r3, [pc, #216]	@ (800617c <xTaskIncrementTick+0x15c>)
 80060a2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80060a6:	601a      	str	r2, [r3, #0]
					break;
 80060a8:	e03f      	b.n	800612a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060aa:	4b31      	ldr	r3, [pc, #196]	@ (8006170 <xTaskIncrementTick+0x150>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80060ba:	693a      	ldr	r2, [r7, #16]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	429a      	cmp	r2, r3
 80060c0:	d203      	bcs.n	80060ca <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80060c2:	4a2e      	ldr	r2, [pc, #184]	@ (800617c <xTaskIncrementTick+0x15c>)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80060c8:	e02f      	b.n	800612a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	3304      	adds	r3, #4
 80060ce:	4618      	mov	r0, r3
 80060d0:	f7fe fcec 	bl	8004aac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d004      	beq.n	80060e6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	3318      	adds	r3, #24
 80060e0:	4618      	mov	r0, r3
 80060e2:	f7fe fce3 	bl	8004aac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060ea:	4b25      	ldr	r3, [pc, #148]	@ (8006180 <xTaskIncrementTick+0x160>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d903      	bls.n	80060fa <xTaskIncrementTick+0xda>
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060f6:	4a22      	ldr	r2, [pc, #136]	@ (8006180 <xTaskIncrementTick+0x160>)
 80060f8:	6013      	str	r3, [r2, #0]
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060fe:	4613      	mov	r3, r2
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	4413      	add	r3, r2
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	4a1f      	ldr	r2, [pc, #124]	@ (8006184 <xTaskIncrementTick+0x164>)
 8006108:	441a      	add	r2, r3
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	3304      	adds	r3, #4
 800610e:	4619      	mov	r1, r3
 8006110:	4610      	mov	r0, r2
 8006112:	f7fe fc6e 	bl	80049f2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800611a:	4b1b      	ldr	r3, [pc, #108]	@ (8006188 <xTaskIncrementTick+0x168>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006120:	429a      	cmp	r2, r3
 8006122:	d3b8      	bcc.n	8006096 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006124:	2301      	movs	r3, #1
 8006126:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006128:	e7b5      	b.n	8006096 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800612a:	4b17      	ldr	r3, [pc, #92]	@ (8006188 <xTaskIncrementTick+0x168>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006130:	4914      	ldr	r1, [pc, #80]	@ (8006184 <xTaskIncrementTick+0x164>)
 8006132:	4613      	mov	r3, r2
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	4413      	add	r3, r2
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	440b      	add	r3, r1
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	2b01      	cmp	r3, #1
 8006140:	d901      	bls.n	8006146 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006142:	2301      	movs	r3, #1
 8006144:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006146:	4b11      	ldr	r3, [pc, #68]	@ (800618c <xTaskIncrementTick+0x16c>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d007      	beq.n	800615e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800614e:	2301      	movs	r3, #1
 8006150:	617b      	str	r3, [r7, #20]
 8006152:	e004      	b.n	800615e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006154:	4b0e      	ldr	r3, [pc, #56]	@ (8006190 <xTaskIncrementTick+0x170>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	3301      	adds	r3, #1
 800615a:	4a0d      	ldr	r2, [pc, #52]	@ (8006190 <xTaskIncrementTick+0x170>)
 800615c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800615e:	697b      	ldr	r3, [r7, #20]
}
 8006160:	4618      	mov	r0, r3
 8006162:	3718      	adds	r7, #24
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}
 8006168:	20000f84 	.word	0x20000f84
 800616c:	20000f60 	.word	0x20000f60
 8006170:	20000f14 	.word	0x20000f14
 8006174:	20000f18 	.word	0x20000f18
 8006178:	20000f74 	.word	0x20000f74
 800617c:	20000f7c 	.word	0x20000f7c
 8006180:	20000f64 	.word	0x20000f64
 8006184:	20000a8c 	.word	0x20000a8c
 8006188:	20000a88 	.word	0x20000a88
 800618c:	20000f70 	.word	0x20000f70
 8006190:	20000f6c 	.word	0x20000f6c

08006194 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b084      	sub	sp, #16
 8006198:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800619a:	4b37      	ldr	r3, [pc, #220]	@ (8006278 <vTaskSwitchContext+0xe4>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d003      	beq.n	80061aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80061a2:	4b36      	ldr	r3, [pc, #216]	@ (800627c <vTaskSwitchContext+0xe8>)
 80061a4:	2201      	movs	r2, #1
 80061a6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80061a8:	e062      	b.n	8006270 <vTaskSwitchContext+0xdc>
		xYieldPending = pdFALSE;
 80061aa:	4b34      	ldr	r3, [pc, #208]	@ (800627c <vTaskSwitchContext+0xe8>)
 80061ac:	2200      	movs	r2, #0
 80061ae:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80061b0:	f7fa fe84 	bl	8000ebc <getRunTimeCounterValue>
 80061b4:	4603      	mov	r3, r0
 80061b6:	4a32      	ldr	r2, [pc, #200]	@ (8006280 <vTaskSwitchContext+0xec>)
 80061b8:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 80061ba:	4b31      	ldr	r3, [pc, #196]	@ (8006280 <vTaskSwitchContext+0xec>)
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	4b31      	ldr	r3, [pc, #196]	@ (8006284 <vTaskSwitchContext+0xf0>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	429a      	cmp	r2, r3
 80061c4:	d90b      	bls.n	80061de <vTaskSwitchContext+0x4a>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 80061c6:	4b30      	ldr	r3, [pc, #192]	@ (8006288 <vTaskSwitchContext+0xf4>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
 80061ce:	4a2c      	ldr	r2, [pc, #176]	@ (8006280 <vTaskSwitchContext+0xec>)
 80061d0:	6810      	ldr	r0, [r2, #0]
 80061d2:	4a2c      	ldr	r2, [pc, #176]	@ (8006284 <vTaskSwitchContext+0xf0>)
 80061d4:	6812      	ldr	r2, [r2, #0]
 80061d6:	1a82      	subs	r2, r0, r2
 80061d8:	440a      	add	r2, r1
 80061da:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
			ulTaskSwitchedInTime = ulTotalRunTime;
 80061de:	4b28      	ldr	r3, [pc, #160]	@ (8006280 <vTaskSwitchContext+0xec>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a28      	ldr	r2, [pc, #160]	@ (8006284 <vTaskSwitchContext+0xf0>)
 80061e4:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061e6:	4b29      	ldr	r3, [pc, #164]	@ (800628c <vTaskSwitchContext+0xf8>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	60fb      	str	r3, [r7, #12]
 80061ec:	e011      	b.n	8006212 <vTaskSwitchContext+0x7e>
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d10b      	bne.n	800620c <vTaskSwitchContext+0x78>
	__asm volatile
 80061f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061f8:	f383 8811 	msr	BASEPRI, r3
 80061fc:	f3bf 8f6f 	isb	sy
 8006200:	f3bf 8f4f 	dsb	sy
 8006204:	607b      	str	r3, [r7, #4]
}
 8006206:	bf00      	nop
 8006208:	bf00      	nop
 800620a:	e7fd      	b.n	8006208 <vTaskSwitchContext+0x74>
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	3b01      	subs	r3, #1
 8006210:	60fb      	str	r3, [r7, #12]
 8006212:	491f      	ldr	r1, [pc, #124]	@ (8006290 <vTaskSwitchContext+0xfc>)
 8006214:	68fa      	ldr	r2, [r7, #12]
 8006216:	4613      	mov	r3, r2
 8006218:	009b      	lsls	r3, r3, #2
 800621a:	4413      	add	r3, r2
 800621c:	009b      	lsls	r3, r3, #2
 800621e:	440b      	add	r3, r1
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d0e3      	beq.n	80061ee <vTaskSwitchContext+0x5a>
 8006226:	68fa      	ldr	r2, [r7, #12]
 8006228:	4613      	mov	r3, r2
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	4413      	add	r3, r2
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	4a17      	ldr	r2, [pc, #92]	@ (8006290 <vTaskSwitchContext+0xfc>)
 8006232:	4413      	add	r3, r2
 8006234:	60bb      	str	r3, [r7, #8]
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	685a      	ldr	r2, [r3, #4]
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	605a      	str	r2, [r3, #4]
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	685a      	ldr	r2, [r3, #4]
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	3308      	adds	r3, #8
 8006248:	429a      	cmp	r2, r3
 800624a:	d104      	bne.n	8006256 <vTaskSwitchContext+0xc2>
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	685a      	ldr	r2, [r3, #4]
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	605a      	str	r2, [r3, #4]
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	68db      	ldr	r3, [r3, #12]
 800625c:	4a0a      	ldr	r2, [pc, #40]	@ (8006288 <vTaskSwitchContext+0xf4>)
 800625e:	6013      	str	r3, [r2, #0]
 8006260:	4a0a      	ldr	r2, [pc, #40]	@ (800628c <vTaskSwitchContext+0xf8>)
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006266:	4b08      	ldr	r3, [pc, #32]	@ (8006288 <vTaskSwitchContext+0xf4>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	3384      	adds	r3, #132	@ 0x84
 800626c:	4a09      	ldr	r2, [pc, #36]	@ (8006294 <vTaskSwitchContext+0x100>)
 800626e:	6013      	str	r3, [r2, #0]
}
 8006270:	bf00      	nop
 8006272:	3710      	adds	r7, #16
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}
 8006278:	20000f84 	.word	0x20000f84
 800627c:	20000f70 	.word	0x20000f70
 8006280:	20000f8c 	.word	0x20000f8c
 8006284:	20000f88 	.word	0x20000f88
 8006288:	20000a88 	.word	0x20000a88
 800628c:	20000f64 	.word	0x20000f64
 8006290:	20000a8c 	.word	0x20000a8c
 8006294:	20000010 	.word	0x20000010

08006298 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d10b      	bne.n	80062c0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80062a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062ac:	f383 8811 	msr	BASEPRI, r3
 80062b0:	f3bf 8f6f 	isb	sy
 80062b4:	f3bf 8f4f 	dsb	sy
 80062b8:	60fb      	str	r3, [r7, #12]
}
 80062ba:	bf00      	nop
 80062bc:	bf00      	nop
 80062be:	e7fd      	b.n	80062bc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80062c0:	4b07      	ldr	r3, [pc, #28]	@ (80062e0 <vTaskPlaceOnEventList+0x48>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	3318      	adds	r3, #24
 80062c6:	4619      	mov	r1, r3
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f7fe fbb6 	bl	8004a3a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80062ce:	2101      	movs	r1, #1
 80062d0:	6838      	ldr	r0, [r7, #0]
 80062d2:	f000 fd49 	bl	8006d68 <prvAddCurrentTaskToDelayedList>
}
 80062d6:	bf00      	nop
 80062d8:	3710      	adds	r7, #16
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	bf00      	nop
 80062e0:	20000a88 	.word	0x20000a88

080062e4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b086      	sub	sp, #24
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	60f8      	str	r0, [r7, #12]
 80062ec:	60b9      	str	r1, [r7, #8]
 80062ee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d10b      	bne.n	800630e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80062f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062fa:	f383 8811 	msr	BASEPRI, r3
 80062fe:	f3bf 8f6f 	isb	sy
 8006302:	f3bf 8f4f 	dsb	sy
 8006306:	617b      	str	r3, [r7, #20]
}
 8006308:	bf00      	nop
 800630a:	bf00      	nop
 800630c:	e7fd      	b.n	800630a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800630e:	4b0a      	ldr	r3, [pc, #40]	@ (8006338 <vTaskPlaceOnEventListRestricted+0x54>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	3318      	adds	r3, #24
 8006314:	4619      	mov	r1, r3
 8006316:	68f8      	ldr	r0, [r7, #12]
 8006318:	f7fe fb6b 	bl	80049f2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d002      	beq.n	8006328 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006322:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006326:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006328:	6879      	ldr	r1, [r7, #4]
 800632a:	68b8      	ldr	r0, [r7, #8]
 800632c:	f000 fd1c 	bl	8006d68 <prvAddCurrentTaskToDelayedList>
	}
 8006330:	bf00      	nop
 8006332:	3718      	adds	r7, #24
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}
 8006338:	20000a88 	.word	0x20000a88

0800633c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b086      	sub	sp, #24
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	68db      	ldr	r3, [r3, #12]
 800634a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d10b      	bne.n	800636a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006352:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006356:	f383 8811 	msr	BASEPRI, r3
 800635a:	f3bf 8f6f 	isb	sy
 800635e:	f3bf 8f4f 	dsb	sy
 8006362:	60fb      	str	r3, [r7, #12]
}
 8006364:	bf00      	nop
 8006366:	bf00      	nop
 8006368:	e7fd      	b.n	8006366 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	3318      	adds	r3, #24
 800636e:	4618      	mov	r0, r3
 8006370:	f7fe fb9c 	bl	8004aac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006374:	4b1d      	ldr	r3, [pc, #116]	@ (80063ec <xTaskRemoveFromEventList+0xb0>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d11d      	bne.n	80063b8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	3304      	adds	r3, #4
 8006380:	4618      	mov	r0, r3
 8006382:	f7fe fb93 	bl	8004aac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800638a:	4b19      	ldr	r3, [pc, #100]	@ (80063f0 <xTaskRemoveFromEventList+0xb4>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	429a      	cmp	r2, r3
 8006390:	d903      	bls.n	800639a <xTaskRemoveFromEventList+0x5e>
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006396:	4a16      	ldr	r2, [pc, #88]	@ (80063f0 <xTaskRemoveFromEventList+0xb4>)
 8006398:	6013      	str	r3, [r2, #0]
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800639e:	4613      	mov	r3, r2
 80063a0:	009b      	lsls	r3, r3, #2
 80063a2:	4413      	add	r3, r2
 80063a4:	009b      	lsls	r3, r3, #2
 80063a6:	4a13      	ldr	r2, [pc, #76]	@ (80063f4 <xTaskRemoveFromEventList+0xb8>)
 80063a8:	441a      	add	r2, r3
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	3304      	adds	r3, #4
 80063ae:	4619      	mov	r1, r3
 80063b0:	4610      	mov	r0, r2
 80063b2:	f7fe fb1e 	bl	80049f2 <vListInsertEnd>
 80063b6:	e005      	b.n	80063c4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	3318      	adds	r3, #24
 80063bc:	4619      	mov	r1, r3
 80063be:	480e      	ldr	r0, [pc, #56]	@ (80063f8 <xTaskRemoveFromEventList+0xbc>)
 80063c0:	f7fe fb17 	bl	80049f2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063c8:	4b0c      	ldr	r3, [pc, #48]	@ (80063fc <xTaskRemoveFromEventList+0xc0>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063ce:	429a      	cmp	r2, r3
 80063d0:	d905      	bls.n	80063de <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80063d2:	2301      	movs	r3, #1
 80063d4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80063d6:	4b0a      	ldr	r3, [pc, #40]	@ (8006400 <xTaskRemoveFromEventList+0xc4>)
 80063d8:	2201      	movs	r2, #1
 80063da:	601a      	str	r2, [r3, #0]
 80063dc:	e001      	b.n	80063e2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80063de:	2300      	movs	r3, #0
 80063e0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80063e2:	697b      	ldr	r3, [r7, #20]
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3718      	adds	r7, #24
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}
 80063ec:	20000f84 	.word	0x20000f84
 80063f0:	20000f64 	.word	0x20000f64
 80063f4:	20000a8c 	.word	0x20000a8c
 80063f8:	20000f1c 	.word	0x20000f1c
 80063fc:	20000a88 	.word	0x20000a88
 8006400:	20000f70 	.word	0x20000f70

08006404 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006404:	b480      	push	{r7}
 8006406:	b083      	sub	sp, #12
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800640c:	4b06      	ldr	r3, [pc, #24]	@ (8006428 <vTaskInternalSetTimeOutState+0x24>)
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006414:	4b05      	ldr	r3, [pc, #20]	@ (800642c <vTaskInternalSetTimeOutState+0x28>)
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	605a      	str	r2, [r3, #4]
}
 800641c:	bf00      	nop
 800641e:	370c      	adds	r7, #12
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr
 8006428:	20000f74 	.word	0x20000f74
 800642c:	20000f60 	.word	0x20000f60

08006430 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b088      	sub	sp, #32
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d10b      	bne.n	8006458 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006444:	f383 8811 	msr	BASEPRI, r3
 8006448:	f3bf 8f6f 	isb	sy
 800644c:	f3bf 8f4f 	dsb	sy
 8006450:	613b      	str	r3, [r7, #16]
}
 8006452:	bf00      	nop
 8006454:	bf00      	nop
 8006456:	e7fd      	b.n	8006454 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d10b      	bne.n	8006476 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800645e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006462:	f383 8811 	msr	BASEPRI, r3
 8006466:	f3bf 8f6f 	isb	sy
 800646a:	f3bf 8f4f 	dsb	sy
 800646e:	60fb      	str	r3, [r7, #12]
}
 8006470:	bf00      	nop
 8006472:	bf00      	nop
 8006474:	e7fd      	b.n	8006472 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006476:	f001 f9d7 	bl	8007828 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800647a:	4b1d      	ldr	r3, [pc, #116]	@ (80064f0 <xTaskCheckForTimeOut+0xc0>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	69ba      	ldr	r2, [r7, #24]
 8006486:	1ad3      	subs	r3, r2, r3
 8006488:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006492:	d102      	bne.n	800649a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006494:	2300      	movs	r3, #0
 8006496:	61fb      	str	r3, [r7, #28]
 8006498:	e023      	b.n	80064e2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	4b15      	ldr	r3, [pc, #84]	@ (80064f4 <xTaskCheckForTimeOut+0xc4>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d007      	beq.n	80064b6 <xTaskCheckForTimeOut+0x86>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	69ba      	ldr	r2, [r7, #24]
 80064ac:	429a      	cmp	r2, r3
 80064ae:	d302      	bcc.n	80064b6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80064b0:	2301      	movs	r3, #1
 80064b2:	61fb      	str	r3, [r7, #28]
 80064b4:	e015      	b.n	80064e2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	697a      	ldr	r2, [r7, #20]
 80064bc:	429a      	cmp	r2, r3
 80064be:	d20b      	bcs.n	80064d8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	1ad2      	subs	r2, r2, r3
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f7ff ff99 	bl	8006404 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80064d2:	2300      	movs	r3, #0
 80064d4:	61fb      	str	r3, [r7, #28]
 80064d6:	e004      	b.n	80064e2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	2200      	movs	r2, #0
 80064dc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80064de:	2301      	movs	r3, #1
 80064e0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80064e2:	f001 f9d3 	bl	800788c <vPortExitCritical>

	return xReturn;
 80064e6:	69fb      	ldr	r3, [r7, #28]
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3720      	adds	r7, #32
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}
 80064f0:	20000f60 	.word	0x20000f60
 80064f4:	20000f74 	.word	0x20000f74

080064f8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80064f8:	b480      	push	{r7}
 80064fa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80064fc:	4b03      	ldr	r3, [pc, #12]	@ (800650c <vTaskMissedYield+0x14>)
 80064fe:	2201      	movs	r2, #1
 8006500:	601a      	str	r2, [r3, #0]
}
 8006502:	bf00      	nop
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr
 800650c:	20000f70 	.word	0x20000f70

08006510 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b082      	sub	sp, #8
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006518:	f000 f896 	bl	8006648 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800651c:	4b06      	ldr	r3, [pc, #24]	@ (8006538 <prvIdleTask+0x28>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	2b01      	cmp	r3, #1
 8006522:	d9f9      	bls.n	8006518 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006524:	4b05      	ldr	r3, [pc, #20]	@ (800653c <prvIdleTask+0x2c>)
 8006526:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800652a:	601a      	str	r2, [r3, #0]
 800652c:	f3bf 8f4f 	dsb	sy
 8006530:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006534:	e7f0      	b.n	8006518 <prvIdleTask+0x8>
 8006536:	bf00      	nop
 8006538:	20000a8c 	.word	0x20000a8c
 800653c:	e000ed04 	.word	0xe000ed04

08006540 <vTaskSetThreadLocalStoragePointer>:
/*-----------------------------------------------------------*/

#if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )

	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue )
	{
 8006540:	b480      	push	{r7}
 8006542:	b087      	sub	sp, #28
 8006544:	af00      	add	r7, sp, #0
 8006546:	60f8      	str	r0, [r7, #12]
 8006548:	60b9      	str	r1, [r7, #8]
 800654a:	607a      	str	r2, [r7, #4]
	TCB_t *pxTCB;

		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	2b09      	cmp	r3, #9
 8006550:	dc0d      	bgt.n	800656e <vTaskSetThreadLocalStoragePointer+0x2e>
		{
			pxTCB = prvGetTCBFromHandle( xTaskToSet );
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d102      	bne.n	800655e <vTaskSetThreadLocalStoragePointer+0x1e>
 8006558:	4b08      	ldr	r3, [pc, #32]	@ (800657c <vTaskSetThreadLocalStoragePointer+0x3c>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	e000      	b.n	8006560 <vTaskSetThreadLocalStoragePointer+0x20>
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	617b      	str	r3, [r7, #20]
			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	68ba      	ldr	r2, [r7, #8]
 8006566:	3216      	adds	r2, #22
 8006568:	6879      	ldr	r1, [r7, #4]
 800656a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		}
	}
 800656e:	bf00      	nop
 8006570:	371c      	adds	r7, #28
 8006572:	46bd      	mov	sp, r7
 8006574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006578:	4770      	bx	lr
 800657a:	bf00      	nop
 800657c:	20000a88 	.word	0x20000a88

08006580 <pvTaskGetThreadLocalStoragePointer>:
/*-----------------------------------------------------------*/

#if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )

	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
	{
 8006580:	b480      	push	{r7}
 8006582:	b085      	sub	sp, #20
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	6039      	str	r1, [r7, #0]
	void *pvReturn = NULL;
 800658a:	2300      	movs	r3, #0
 800658c:	60fb      	str	r3, [r7, #12]
	TCB_t *pxTCB;

		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	2b09      	cmp	r3, #9
 8006592:	dc0e      	bgt.n	80065b2 <pvTaskGetThreadLocalStoragePointer+0x32>
		{
			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d102      	bne.n	80065a0 <pvTaskGetThreadLocalStoragePointer+0x20>
 800659a:	4b0a      	ldr	r3, [pc, #40]	@ (80065c4 <pvTaskGetThreadLocalStoragePointer+0x44>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	e000      	b.n	80065a2 <pvTaskGetThreadLocalStoragePointer+0x22>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	60bb      	str	r3, [r7, #8]
			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	683a      	ldr	r2, [r7, #0]
 80065a8:	3216      	adds	r2, #22
 80065aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065ae:	60fb      	str	r3, [r7, #12]
 80065b0:	e001      	b.n	80065b6 <pvTaskGetThreadLocalStoragePointer+0x36>
		}
		else
		{
			pvReturn = NULL;
 80065b2:	2300      	movs	r3, #0
 80065b4:	60fb      	str	r3, [r7, #12]
		}

		return pvReturn;
 80065b6:	68fb      	ldr	r3, [r7, #12]
	}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3714      	adds	r7, #20
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr
 80065c4:	20000a88 	.word	0x20000a88

080065c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b082      	sub	sp, #8
 80065cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80065ce:	2300      	movs	r3, #0
 80065d0:	607b      	str	r3, [r7, #4]
 80065d2:	e00c      	b.n	80065ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80065d4:	687a      	ldr	r2, [r7, #4]
 80065d6:	4613      	mov	r3, r2
 80065d8:	009b      	lsls	r3, r3, #2
 80065da:	4413      	add	r3, r2
 80065dc:	009b      	lsls	r3, r3, #2
 80065de:	4a12      	ldr	r2, [pc, #72]	@ (8006628 <prvInitialiseTaskLists+0x60>)
 80065e0:	4413      	add	r3, r2
 80065e2:	4618      	mov	r0, r3
 80065e4:	f7fe f9d8 	bl	8004998 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	3301      	adds	r3, #1
 80065ec:	607b      	str	r3, [r7, #4]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2b37      	cmp	r3, #55	@ 0x37
 80065f2:	d9ef      	bls.n	80065d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80065f4:	480d      	ldr	r0, [pc, #52]	@ (800662c <prvInitialiseTaskLists+0x64>)
 80065f6:	f7fe f9cf 	bl	8004998 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80065fa:	480d      	ldr	r0, [pc, #52]	@ (8006630 <prvInitialiseTaskLists+0x68>)
 80065fc:	f7fe f9cc 	bl	8004998 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006600:	480c      	ldr	r0, [pc, #48]	@ (8006634 <prvInitialiseTaskLists+0x6c>)
 8006602:	f7fe f9c9 	bl	8004998 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006606:	480c      	ldr	r0, [pc, #48]	@ (8006638 <prvInitialiseTaskLists+0x70>)
 8006608:	f7fe f9c6 	bl	8004998 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800660c:	480b      	ldr	r0, [pc, #44]	@ (800663c <prvInitialiseTaskLists+0x74>)
 800660e:	f7fe f9c3 	bl	8004998 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006612:	4b0b      	ldr	r3, [pc, #44]	@ (8006640 <prvInitialiseTaskLists+0x78>)
 8006614:	4a05      	ldr	r2, [pc, #20]	@ (800662c <prvInitialiseTaskLists+0x64>)
 8006616:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006618:	4b0a      	ldr	r3, [pc, #40]	@ (8006644 <prvInitialiseTaskLists+0x7c>)
 800661a:	4a05      	ldr	r2, [pc, #20]	@ (8006630 <prvInitialiseTaskLists+0x68>)
 800661c:	601a      	str	r2, [r3, #0]
}
 800661e:	bf00      	nop
 8006620:	3708      	adds	r7, #8
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}
 8006626:	bf00      	nop
 8006628:	20000a8c 	.word	0x20000a8c
 800662c:	20000eec 	.word	0x20000eec
 8006630:	20000f00 	.word	0x20000f00
 8006634:	20000f1c 	.word	0x20000f1c
 8006638:	20000f30 	.word	0x20000f30
 800663c:	20000f48 	.word	0x20000f48
 8006640:	20000f14 	.word	0x20000f14
 8006644:	20000f18 	.word	0x20000f18

08006648 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b082      	sub	sp, #8
 800664c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800664e:	e019      	b.n	8006684 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006650:	f001 f8ea 	bl	8007828 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006654:	4b10      	ldr	r3, [pc, #64]	@ (8006698 <prvCheckTasksWaitingTermination+0x50>)
 8006656:	68db      	ldr	r3, [r3, #12]
 8006658:	68db      	ldr	r3, [r3, #12]
 800665a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	3304      	adds	r3, #4
 8006660:	4618      	mov	r0, r3
 8006662:	f7fe fa23 	bl	8004aac <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006666:	4b0d      	ldr	r3, [pc, #52]	@ (800669c <prvCheckTasksWaitingTermination+0x54>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	3b01      	subs	r3, #1
 800666c:	4a0b      	ldr	r2, [pc, #44]	@ (800669c <prvCheckTasksWaitingTermination+0x54>)
 800666e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006670:	4b0b      	ldr	r3, [pc, #44]	@ (80066a0 <prvCheckTasksWaitingTermination+0x58>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	3b01      	subs	r3, #1
 8006676:	4a0a      	ldr	r2, [pc, #40]	@ (80066a0 <prvCheckTasksWaitingTermination+0x58>)
 8006678:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800667a:	f001 f907 	bl	800788c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 f810 	bl	80066a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006684:	4b06      	ldr	r3, [pc, #24]	@ (80066a0 <prvCheckTasksWaitingTermination+0x58>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d1e1      	bne.n	8006650 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800668c:	bf00      	nop
 800668e:	bf00      	nop
 8006690:	3708      	adds	r7, #8
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}
 8006696:	bf00      	nop
 8006698:	20000f30 	.word	0x20000f30
 800669c:	20000f5c 	.word	0x20000f5c
 80066a0:	20000f44 	.word	0x20000f44

080066a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b084      	sub	sp, #16
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	3384      	adds	r3, #132	@ 0x84
 80066b0:	4618      	mov	r0, r3
 80066b2:	f001 fdb3 	bl	800821c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d108      	bne.n	80066d2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066c4:	4618      	mov	r0, r3
 80066c6:	f001 fa9f 	bl	8007c08 <vPortFree>
				vPortFree( pxTCB );
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f001 fa9c 	bl	8007c08 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80066d0:	e019      	b.n	8006706 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d103      	bne.n	80066e4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f001 fa93 	bl	8007c08 <vPortFree>
	}
 80066e2:	e010      	b.n	8006706 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 80066ea:	2b02      	cmp	r3, #2
 80066ec:	d00b      	beq.n	8006706 <prvDeleteTCB+0x62>
	__asm volatile
 80066ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066f2:	f383 8811 	msr	BASEPRI, r3
 80066f6:	f3bf 8f6f 	isb	sy
 80066fa:	f3bf 8f4f 	dsb	sy
 80066fe:	60fb      	str	r3, [r7, #12]
}
 8006700:	bf00      	nop
 8006702:	bf00      	nop
 8006704:	e7fd      	b.n	8006702 <prvDeleteTCB+0x5e>
	}
 8006706:	bf00      	nop
 8006708:	3710      	adds	r7, #16
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
	...

08006710 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006710:	b480      	push	{r7}
 8006712:	b083      	sub	sp, #12
 8006714:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006716:	4b0c      	ldr	r3, [pc, #48]	@ (8006748 <prvResetNextTaskUnblockTime+0x38>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d104      	bne.n	800672a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006720:	4b0a      	ldr	r3, [pc, #40]	@ (800674c <prvResetNextTaskUnblockTime+0x3c>)
 8006722:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006726:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006728:	e008      	b.n	800673c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800672a:	4b07      	ldr	r3, [pc, #28]	@ (8006748 <prvResetNextTaskUnblockTime+0x38>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	68db      	ldr	r3, [r3, #12]
 8006730:	68db      	ldr	r3, [r3, #12]
 8006732:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	4a04      	ldr	r2, [pc, #16]	@ (800674c <prvResetNextTaskUnblockTime+0x3c>)
 800673a:	6013      	str	r3, [r2, #0]
}
 800673c:	bf00      	nop
 800673e:	370c      	adds	r7, #12
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr
 8006748:	20000f14 	.word	0x20000f14
 800674c:	20000f7c 	.word	0x20000f7c

08006750 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8006750:	b480      	push	{r7}
 8006752:	b083      	sub	sp, #12
 8006754:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8006756:	4b05      	ldr	r3, [pc, #20]	@ (800676c <xTaskGetCurrentTaskHandle+0x1c>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800675c:	687b      	ldr	r3, [r7, #4]
	}
 800675e:	4618      	mov	r0, r3
 8006760:	370c      	adds	r7, #12
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr
 800676a:	bf00      	nop
 800676c:	20000a88 	.word	0x20000a88

08006770 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006770:	b480      	push	{r7}
 8006772:	b083      	sub	sp, #12
 8006774:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006776:	4b0b      	ldr	r3, [pc, #44]	@ (80067a4 <xTaskGetSchedulerState+0x34>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d102      	bne.n	8006784 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800677e:	2301      	movs	r3, #1
 8006780:	607b      	str	r3, [r7, #4]
 8006782:	e008      	b.n	8006796 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006784:	4b08      	ldr	r3, [pc, #32]	@ (80067a8 <xTaskGetSchedulerState+0x38>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d102      	bne.n	8006792 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800678c:	2302      	movs	r3, #2
 800678e:	607b      	str	r3, [r7, #4]
 8006790:	e001      	b.n	8006796 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006792:	2300      	movs	r3, #0
 8006794:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006796:	687b      	ldr	r3, [r7, #4]
	}
 8006798:	4618      	mov	r0, r3
 800679a:	370c      	adds	r7, #12
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr
 80067a4:	20000f68 	.word	0x20000f68
 80067a8:	20000f84 	.word	0x20000f84

080067ac <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b084      	sub	sp, #16
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80067b8:	2300      	movs	r3, #0
 80067ba:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d051      	beq.n	8006866 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067c6:	4b2a      	ldr	r3, [pc, #168]	@ (8006870 <xTaskPriorityInherit+0xc4>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d241      	bcs.n	8006854 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	699b      	ldr	r3, [r3, #24]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	db06      	blt.n	80067e6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067d8:	4b25      	ldr	r3, [pc, #148]	@ (8006870 <xTaskPriorityInherit+0xc4>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067de:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	6959      	ldr	r1, [r3, #20]
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067ee:	4613      	mov	r3, r2
 80067f0:	009b      	lsls	r3, r3, #2
 80067f2:	4413      	add	r3, r2
 80067f4:	009b      	lsls	r3, r3, #2
 80067f6:	4a1f      	ldr	r2, [pc, #124]	@ (8006874 <xTaskPriorityInherit+0xc8>)
 80067f8:	4413      	add	r3, r2
 80067fa:	4299      	cmp	r1, r3
 80067fc:	d122      	bne.n	8006844 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	3304      	adds	r3, #4
 8006802:	4618      	mov	r0, r3
 8006804:	f7fe f952 	bl	8004aac <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006808:	4b19      	ldr	r3, [pc, #100]	@ (8006870 <xTaskPriorityInherit+0xc4>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006816:	4b18      	ldr	r3, [pc, #96]	@ (8006878 <xTaskPriorityInherit+0xcc>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	429a      	cmp	r2, r3
 800681c:	d903      	bls.n	8006826 <xTaskPriorityInherit+0x7a>
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006822:	4a15      	ldr	r2, [pc, #84]	@ (8006878 <xTaskPriorityInherit+0xcc>)
 8006824:	6013      	str	r3, [r2, #0]
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800682a:	4613      	mov	r3, r2
 800682c:	009b      	lsls	r3, r3, #2
 800682e:	4413      	add	r3, r2
 8006830:	009b      	lsls	r3, r3, #2
 8006832:	4a10      	ldr	r2, [pc, #64]	@ (8006874 <xTaskPriorityInherit+0xc8>)
 8006834:	441a      	add	r2, r3
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	3304      	adds	r3, #4
 800683a:	4619      	mov	r1, r3
 800683c:	4610      	mov	r0, r2
 800683e:	f7fe f8d8 	bl	80049f2 <vListInsertEnd>
 8006842:	e004      	b.n	800684e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006844:	4b0a      	ldr	r3, [pc, #40]	@ (8006870 <xTaskPriorityInherit+0xc4>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800684e:	2301      	movs	r3, #1
 8006850:	60fb      	str	r3, [r7, #12]
 8006852:	e008      	b.n	8006866 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006858:	4b05      	ldr	r3, [pc, #20]	@ (8006870 <xTaskPriorityInherit+0xc4>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800685e:	429a      	cmp	r2, r3
 8006860:	d201      	bcs.n	8006866 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006862:	2301      	movs	r3, #1
 8006864:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006866:	68fb      	ldr	r3, [r7, #12]
	}
 8006868:	4618      	mov	r0, r3
 800686a:	3710      	adds	r7, #16
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}
 8006870:	20000a88 	.word	0x20000a88
 8006874:	20000a8c 	.word	0x20000a8c
 8006878:	20000f64 	.word	0x20000f64

0800687c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800687c:	b580      	push	{r7, lr}
 800687e:	b086      	sub	sp, #24
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006888:	2300      	movs	r3, #0
 800688a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d058      	beq.n	8006944 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006892:	4b2f      	ldr	r3, [pc, #188]	@ (8006950 <xTaskPriorityDisinherit+0xd4>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	693a      	ldr	r2, [r7, #16]
 8006898:	429a      	cmp	r2, r3
 800689a:	d00b      	beq.n	80068b4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800689c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068a0:	f383 8811 	msr	BASEPRI, r3
 80068a4:	f3bf 8f6f 	isb	sy
 80068a8:	f3bf 8f4f 	dsb	sy
 80068ac:	60fb      	str	r3, [r7, #12]
}
 80068ae:	bf00      	nop
 80068b0:	bf00      	nop
 80068b2:	e7fd      	b.n	80068b0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d10b      	bne.n	80068d4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80068bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068c0:	f383 8811 	msr	BASEPRI, r3
 80068c4:	f3bf 8f6f 	isb	sy
 80068c8:	f3bf 8f4f 	dsb	sy
 80068cc:	60bb      	str	r3, [r7, #8]
}
 80068ce:	bf00      	nop
 80068d0:	bf00      	nop
 80068d2:	e7fd      	b.n	80068d0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068d8:	1e5a      	subs	r2, r3, #1
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	655a      	str	r2, [r3, #84]	@ 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d02c      	beq.n	8006944 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d128      	bne.n	8006944 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	3304      	adds	r3, #4
 80068f6:	4618      	mov	r0, r3
 80068f8:	f7fe f8d8 	bl	8004aac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006908:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006914:	4b0f      	ldr	r3, [pc, #60]	@ (8006954 <xTaskPriorityDisinherit+0xd8>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	429a      	cmp	r2, r3
 800691a:	d903      	bls.n	8006924 <xTaskPriorityDisinherit+0xa8>
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006920:	4a0c      	ldr	r2, [pc, #48]	@ (8006954 <xTaskPriorityDisinherit+0xd8>)
 8006922:	6013      	str	r3, [r2, #0]
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006928:	4613      	mov	r3, r2
 800692a:	009b      	lsls	r3, r3, #2
 800692c:	4413      	add	r3, r2
 800692e:	009b      	lsls	r3, r3, #2
 8006930:	4a09      	ldr	r2, [pc, #36]	@ (8006958 <xTaskPriorityDisinherit+0xdc>)
 8006932:	441a      	add	r2, r3
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	3304      	adds	r3, #4
 8006938:	4619      	mov	r1, r3
 800693a:	4610      	mov	r0, r2
 800693c:	f7fe f859 	bl	80049f2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006940:	2301      	movs	r3, #1
 8006942:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006944:	697b      	ldr	r3, [r7, #20]
	}
 8006946:	4618      	mov	r0, r3
 8006948:	3718      	adds	r7, #24
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
 800694e:	bf00      	nop
 8006950:	20000a88 	.word	0x20000a88
 8006954:	20000f64 	.word	0x20000f64
 8006958:	20000a8c 	.word	0x20000a8c

0800695c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800695c:	b580      	push	{r7, lr}
 800695e:	b088      	sub	sp, #32
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800696a:	2301      	movs	r3, #1
 800696c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d06c      	beq.n	8006a4e <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006974:	69bb      	ldr	r3, [r7, #24]
 8006976:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006978:	2b00      	cmp	r3, #0
 800697a:	d10b      	bne.n	8006994 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800697c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006980:	f383 8811 	msr	BASEPRI, r3
 8006984:	f3bf 8f6f 	isb	sy
 8006988:	f3bf 8f4f 	dsb	sy
 800698c:	60fb      	str	r3, [r7, #12]
}
 800698e:	bf00      	nop
 8006990:	bf00      	nop
 8006992:	e7fd      	b.n	8006990 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006994:	69bb      	ldr	r3, [r7, #24]
 8006996:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006998:	683a      	ldr	r2, [r7, #0]
 800699a:	429a      	cmp	r2, r3
 800699c:	d902      	bls.n	80069a4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	61fb      	str	r3, [r7, #28]
 80069a2:	e002      	b.n	80069aa <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80069a4:	69bb      	ldr	r3, [r7, #24]
 80069a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069a8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80069aa:	69bb      	ldr	r3, [r7, #24]
 80069ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069ae:	69fa      	ldr	r2, [r7, #28]
 80069b0:	429a      	cmp	r2, r3
 80069b2:	d04c      	beq.n	8006a4e <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80069b4:	69bb      	ldr	r3, [r7, #24]
 80069b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069b8:	697a      	ldr	r2, [r7, #20]
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d147      	bne.n	8006a4e <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80069be:	4b26      	ldr	r3, [pc, #152]	@ (8006a58 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	69ba      	ldr	r2, [r7, #24]
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d10b      	bne.n	80069e0 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80069c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069cc:	f383 8811 	msr	BASEPRI, r3
 80069d0:	f3bf 8f6f 	isb	sy
 80069d4:	f3bf 8f4f 	dsb	sy
 80069d8:	60bb      	str	r3, [r7, #8]
}
 80069da:	bf00      	nop
 80069dc:	bf00      	nop
 80069de:	e7fd      	b.n	80069dc <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80069e0:	69bb      	ldr	r3, [r7, #24]
 80069e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069e4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80069e6:	69bb      	ldr	r3, [r7, #24]
 80069e8:	69fa      	ldr	r2, [r7, #28]
 80069ea:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80069ec:	69bb      	ldr	r3, [r7, #24]
 80069ee:	699b      	ldr	r3, [r3, #24]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	db04      	blt.n	80069fe <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069f4:	69fb      	ldr	r3, [r7, #28]
 80069f6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80069fa:	69bb      	ldr	r3, [r7, #24]
 80069fc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80069fe:	69bb      	ldr	r3, [r7, #24]
 8006a00:	6959      	ldr	r1, [r3, #20]
 8006a02:	693a      	ldr	r2, [r7, #16]
 8006a04:	4613      	mov	r3, r2
 8006a06:	009b      	lsls	r3, r3, #2
 8006a08:	4413      	add	r3, r2
 8006a0a:	009b      	lsls	r3, r3, #2
 8006a0c:	4a13      	ldr	r2, [pc, #76]	@ (8006a5c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006a0e:	4413      	add	r3, r2
 8006a10:	4299      	cmp	r1, r3
 8006a12:	d11c      	bne.n	8006a4e <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a14:	69bb      	ldr	r3, [r7, #24]
 8006a16:	3304      	adds	r3, #4
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f7fe f847 	bl	8004aac <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006a1e:	69bb      	ldr	r3, [r7, #24]
 8006a20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a22:	4b0f      	ldr	r3, [pc, #60]	@ (8006a60 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d903      	bls.n	8006a32 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8006a2a:	69bb      	ldr	r3, [r7, #24]
 8006a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a2e:	4a0c      	ldr	r2, [pc, #48]	@ (8006a60 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006a30:	6013      	str	r3, [r2, #0]
 8006a32:	69bb      	ldr	r3, [r7, #24]
 8006a34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a36:	4613      	mov	r3, r2
 8006a38:	009b      	lsls	r3, r3, #2
 8006a3a:	4413      	add	r3, r2
 8006a3c:	009b      	lsls	r3, r3, #2
 8006a3e:	4a07      	ldr	r2, [pc, #28]	@ (8006a5c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006a40:	441a      	add	r2, r3
 8006a42:	69bb      	ldr	r3, [r7, #24]
 8006a44:	3304      	adds	r3, #4
 8006a46:	4619      	mov	r1, r3
 8006a48:	4610      	mov	r0, r2
 8006a4a:	f7fd ffd2 	bl	80049f2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006a4e:	bf00      	nop
 8006a50:	3720      	adds	r7, #32
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
 8006a56:	bf00      	nop
 8006a58:	20000a88 	.word	0x20000a88
 8006a5c:	20000a8c 	.word	0x20000a8c
 8006a60:	20000f64 	.word	0x20000f64

08006a64 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006a64:	b480      	push	{r7}
 8006a66:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006a68:	4b07      	ldr	r3, [pc, #28]	@ (8006a88 <pvTaskIncrementMutexHeldCount+0x24>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d004      	beq.n	8006a7a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006a70:	4b05      	ldr	r3, [pc, #20]	@ (8006a88 <pvTaskIncrementMutexHeldCount+0x24>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006a76:	3201      	adds	r2, #1
 8006a78:	655a      	str	r2, [r3, #84]	@ 0x54
		}

		return pxCurrentTCB;
 8006a7a:	4b03      	ldr	r3, [pc, #12]	@ (8006a88 <pvTaskIncrementMutexHeldCount+0x24>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
	}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	46bd      	mov	sp, r7
 8006a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a86:	4770      	bx	lr
 8006a88:	20000a88 	.word	0x20000a88

08006a8c <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b084      	sub	sp, #16
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8006a96:	f000 fec7 	bl	8007828 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8006a9a:	4b20      	ldr	r3, [pc, #128]	@ (8006b1c <ulTaskNotifyTake+0x90>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d113      	bne.n	8006ace <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8006aa6:	4b1d      	ldr	r3, [pc, #116]	@ (8006b1c <ulTaskNotifyTake+0x90>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4

				if( xTicksToWait > ( TickType_t ) 0 )
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d00b      	beq.n	8006ace <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006ab6:	2101      	movs	r1, #1
 8006ab8:	6838      	ldr	r0, [r7, #0]
 8006aba:	f000 f955 	bl	8006d68 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8006abe:	4b18      	ldr	r3, [pc, #96]	@ (8006b20 <ulTaskNotifyTake+0x94>)
 8006ac0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ac4:	601a      	str	r2, [r3, #0]
 8006ac6:	f3bf 8f4f 	dsb	sy
 8006aca:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8006ace:	f000 fedd 	bl	800788c <vPortExitCritical>

		taskENTER_CRITICAL();
 8006ad2:	f000 fea9 	bl	8007828 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8006ad6:	4b11      	ldr	r3, [pc, #68]	@ (8006b1c <ulTaskNotifyTake+0x90>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8006ade:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d00e      	beq.n	8006b04 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d005      	beq.n	8006af8 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8006aec:	4b0b      	ldr	r3, [pc, #44]	@ (8006b1c <ulTaskNotifyTake+0x90>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	2200      	movs	r2, #0
 8006af2:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8006af6:	e005      	b.n	8006b04 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8006af8:	4b08      	ldr	r3, [pc, #32]	@ (8006b1c <ulTaskNotifyTake+0x90>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	68fa      	ldr	r2, [r7, #12]
 8006afe:	3a01      	subs	r2, #1
 8006b00:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006b04:	4b05      	ldr	r3, [pc, #20]	@ (8006b1c <ulTaskNotifyTake+0x90>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4
		}
		taskEXIT_CRITICAL();
 8006b0e:	f000 febd 	bl	800788c <vPortExitCritical>

		return ulReturn;
 8006b12:	68fb      	ldr	r3, [r7, #12]
	}
 8006b14:	4618      	mov	r0, r3
 8006b16:	3710      	adds	r7, #16
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}
 8006b1c:	20000a88 	.word	0x20000a88
 8006b20:	e000ed04 	.word	0xe000ed04

08006b24 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b086      	sub	sp, #24
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	60f8      	str	r0, [r7, #12]
 8006b2c:	60b9      	str	r1, [r7, #8]
 8006b2e:	607a      	str	r2, [r7, #4]
 8006b30:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8006b32:	f000 fe79 	bl	8007828 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8006b36:	4b29      	ldr	r3, [pc, #164]	@ (8006bdc <xTaskNotifyWait+0xb8>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f893 30d4 	ldrb.w	r3, [r3, #212]	@ 0xd4
 8006b3e:	b2db      	uxtb	r3, r3
 8006b40:	2b02      	cmp	r3, #2
 8006b42:	d01c      	beq.n	8006b7e <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8006b44:	4b25      	ldr	r3, [pc, #148]	@ (8006bdc <xTaskNotifyWait+0xb8>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f8d3 10d0 	ldr.w	r1, [r3, #208]	@ 0xd0
 8006b4c:	68fa      	ldr	r2, [r7, #12]
 8006b4e:	43d2      	mvns	r2, r2
 8006b50:	400a      	ands	r2, r1
 8006b52:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8006b56:	4b21      	ldr	r3, [pc, #132]	@ (8006bdc <xTaskNotifyWait+0xb8>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4

				if( xTicksToWait > ( TickType_t ) 0 )
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d00b      	beq.n	8006b7e <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006b66:	2101      	movs	r1, #1
 8006b68:	6838      	ldr	r0, [r7, #0]
 8006b6a:	f000 f8fd 	bl	8006d68 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8006b6e:	4b1c      	ldr	r3, [pc, #112]	@ (8006be0 <xTaskNotifyWait+0xbc>)
 8006b70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b74:	601a      	str	r2, [r3, #0]
 8006b76:	f3bf 8f4f 	dsb	sy
 8006b7a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8006b7e:	f000 fe85 	bl	800788c <vPortExitCritical>

		taskENTER_CRITICAL();
 8006b82:	f000 fe51 	bl	8007828 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d005      	beq.n	8006b98 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8006b8c:	4b13      	ldr	r3, [pc, #76]	@ (8006bdc <xTaskNotifyWait+0xb8>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8006b98:	4b10      	ldr	r3, [pc, #64]	@ (8006bdc <xTaskNotifyWait+0xb8>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f893 30d4 	ldrb.w	r3, [r3, #212]	@ 0xd4
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	2b02      	cmp	r3, #2
 8006ba4:	d002      	beq.n	8006bac <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	617b      	str	r3, [r7, #20]
 8006baa:	e00a      	b.n	8006bc2 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8006bac:	4b0b      	ldr	r3, [pc, #44]	@ (8006bdc <xTaskNotifyWait+0xb8>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f8d3 10d0 	ldr.w	r1, [r3, #208]	@ 0xd0
 8006bb4:	68ba      	ldr	r2, [r7, #8]
 8006bb6:	43d2      	mvns	r2, r2
 8006bb8:	400a      	ands	r2, r1
 8006bba:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
				xReturn = pdTRUE;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006bc2:	4b06      	ldr	r3, [pc, #24]	@ (8006bdc <xTaskNotifyWait+0xb8>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4
		}
		taskEXIT_CRITICAL();
 8006bcc:	f000 fe5e 	bl	800788c <vPortExitCritical>

		return xReturn;
 8006bd0:	697b      	ldr	r3, [r7, #20]
	}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3718      	adds	r7, #24
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
 8006bda:	bf00      	nop
 8006bdc:	20000a88 	.word	0x20000a88
 8006be0:	e000ed04 	.word	0xe000ed04

08006be4 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b08a      	sub	sp, #40	@ 0x28
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	60f8      	str	r0, [r7, #12]
 8006bec:	60b9      	str	r1, [r7, #8]
 8006bee:	603b      	str	r3, [r7, #0]
 8006bf0:	4613      	mov	r3, r2
 8006bf2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d10b      	bne.n	8006c16 <xTaskGenericNotify+0x32>
	__asm volatile
 8006bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c02:	f383 8811 	msr	BASEPRI, r3
 8006c06:	f3bf 8f6f 	isb	sy
 8006c0a:	f3bf 8f4f 	dsb	sy
 8006c0e:	61bb      	str	r3, [r7, #24]
}
 8006c10:	bf00      	nop
 8006c12:	bf00      	nop
 8006c14:	e7fd      	b.n	8006c12 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8006c1a:	f000 fe05 	bl	8007828 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d004      	beq.n	8006c2e <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8006c24:	6a3b      	ldr	r3, [r7, #32]
 8006c26:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8006c2e:	6a3b      	ldr	r3, [r7, #32]
 8006c30:	f893 30d4 	ldrb.w	r3, [r3, #212]	@ 0xd4
 8006c34:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006c36:	6a3b      	ldr	r3, [r7, #32]
 8006c38:	2202      	movs	r2, #2
 8006c3a:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4

			switch( eAction )
 8006c3e:	79fb      	ldrb	r3, [r7, #7]
 8006c40:	2b04      	cmp	r3, #4
 8006c42:	d82e      	bhi.n	8006ca2 <xTaskGenericNotify+0xbe>
 8006c44:	a201      	add	r2, pc, #4	@ (adr r2, 8006c4c <xTaskGenericNotify+0x68>)
 8006c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c4a:	bf00      	nop
 8006c4c:	08006cc7 	.word	0x08006cc7
 8006c50:	08006c61 	.word	0x08006c61
 8006c54:	08006c73 	.word	0x08006c73
 8006c58:	08006c83 	.word	0x08006c83
 8006c5c:	08006c8d 	.word	0x08006c8d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8006c60:	6a3b      	ldr	r3, [r7, #32]
 8006c62:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	431a      	orrs	r2, r3
 8006c6a:	6a3b      	ldr	r3, [r7, #32]
 8006c6c:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
					break;
 8006c70:	e02c      	b.n	8006ccc <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8006c72:	6a3b      	ldr	r3, [r7, #32]
 8006c74:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8006c78:	1c5a      	adds	r2, r3, #1
 8006c7a:	6a3b      	ldr	r3, [r7, #32]
 8006c7c:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
					break;
 8006c80:	e024      	b.n	8006ccc <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8006c82:	6a3b      	ldr	r3, [r7, #32]
 8006c84:	68ba      	ldr	r2, [r7, #8]
 8006c86:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
					break;
 8006c8a:	e01f      	b.n	8006ccc <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006c8c:	7ffb      	ldrb	r3, [r7, #31]
 8006c8e:	2b02      	cmp	r3, #2
 8006c90:	d004      	beq.n	8006c9c <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8006c92:	6a3b      	ldr	r3, [r7, #32]
 8006c94:	68ba      	ldr	r2, [r7, #8]
 8006c96:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8006c9a:	e017      	b.n	8006ccc <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8006ca0:	e014      	b.n	8006ccc <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8006ca2:	6a3b      	ldr	r3, [r7, #32]
 8006ca4:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8006ca8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006cac:	d00d      	beq.n	8006cca <xTaskGenericNotify+0xe6>
	__asm volatile
 8006cae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cb2:	f383 8811 	msr	BASEPRI, r3
 8006cb6:	f3bf 8f6f 	isb	sy
 8006cba:	f3bf 8f4f 	dsb	sy
 8006cbe:	617b      	str	r3, [r7, #20]
}
 8006cc0:	bf00      	nop
 8006cc2:	bf00      	nop
 8006cc4:	e7fd      	b.n	8006cc2 <xTaskGenericNotify+0xde>
					break;
 8006cc6:	bf00      	nop
 8006cc8:	e000      	b.n	8006ccc <xTaskGenericNotify+0xe8>

					break;
 8006cca:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006ccc:	7ffb      	ldrb	r3, [r7, #31]
 8006cce:	2b01      	cmp	r3, #1
 8006cd0:	d13b      	bne.n	8006d4a <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006cd2:	6a3b      	ldr	r3, [r7, #32]
 8006cd4:	3304      	adds	r3, #4
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f7fd fee8 	bl	8004aac <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8006cdc:	6a3b      	ldr	r3, [r7, #32]
 8006cde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ce0:	4b1d      	ldr	r3, [pc, #116]	@ (8006d58 <xTaskGenericNotify+0x174>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d903      	bls.n	8006cf0 <xTaskGenericNotify+0x10c>
 8006ce8:	6a3b      	ldr	r3, [r7, #32]
 8006cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cec:	4a1a      	ldr	r2, [pc, #104]	@ (8006d58 <xTaskGenericNotify+0x174>)
 8006cee:	6013      	str	r3, [r2, #0]
 8006cf0:	6a3b      	ldr	r3, [r7, #32]
 8006cf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cf4:	4613      	mov	r3, r2
 8006cf6:	009b      	lsls	r3, r3, #2
 8006cf8:	4413      	add	r3, r2
 8006cfa:	009b      	lsls	r3, r3, #2
 8006cfc:	4a17      	ldr	r2, [pc, #92]	@ (8006d5c <xTaskGenericNotify+0x178>)
 8006cfe:	441a      	add	r2, r3
 8006d00:	6a3b      	ldr	r3, [r7, #32]
 8006d02:	3304      	adds	r3, #4
 8006d04:	4619      	mov	r1, r3
 8006d06:	4610      	mov	r0, r2
 8006d08:	f7fd fe73 	bl	80049f2 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006d0c:	6a3b      	ldr	r3, [r7, #32]
 8006d0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d00b      	beq.n	8006d2c <xTaskGenericNotify+0x148>
	__asm volatile
 8006d14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d18:	f383 8811 	msr	BASEPRI, r3
 8006d1c:	f3bf 8f6f 	isb	sy
 8006d20:	f3bf 8f4f 	dsb	sy
 8006d24:	613b      	str	r3, [r7, #16]
}
 8006d26:	bf00      	nop
 8006d28:	bf00      	nop
 8006d2a:	e7fd      	b.n	8006d28 <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006d2c:	6a3b      	ldr	r3, [r7, #32]
 8006d2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d30:	4b0b      	ldr	r3, [pc, #44]	@ (8006d60 <xTaskGenericNotify+0x17c>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d907      	bls.n	8006d4a <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8006d3a:	4b0a      	ldr	r3, [pc, #40]	@ (8006d64 <xTaskGenericNotify+0x180>)
 8006d3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d40:	601a      	str	r2, [r3, #0]
 8006d42:	f3bf 8f4f 	dsb	sy
 8006d46:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8006d4a:	f000 fd9f 	bl	800788c <vPortExitCritical>

		return xReturn;
 8006d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3728      	adds	r7, #40	@ 0x28
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}
 8006d58:	20000f64 	.word	0x20000f64
 8006d5c:	20000a8c 	.word	0x20000a8c
 8006d60:	20000a88 	.word	0x20000a88
 8006d64:	e000ed04 	.word	0xe000ed04

08006d68 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b084      	sub	sp, #16
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006d72:	4b21      	ldr	r3, [pc, #132]	@ (8006df8 <prvAddCurrentTaskToDelayedList+0x90>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d78:	4b20      	ldr	r3, [pc, #128]	@ (8006dfc <prvAddCurrentTaskToDelayedList+0x94>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	3304      	adds	r3, #4
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f7fd fe94 	bl	8004aac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006d8a:	d10a      	bne.n	8006da2 <prvAddCurrentTaskToDelayedList+0x3a>
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d007      	beq.n	8006da2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d92:	4b1a      	ldr	r3, [pc, #104]	@ (8006dfc <prvAddCurrentTaskToDelayedList+0x94>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	3304      	adds	r3, #4
 8006d98:	4619      	mov	r1, r3
 8006d9a:	4819      	ldr	r0, [pc, #100]	@ (8006e00 <prvAddCurrentTaskToDelayedList+0x98>)
 8006d9c:	f7fd fe29 	bl	80049f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006da0:	e026      	b.n	8006df0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006da2:	68fa      	ldr	r2, [r7, #12]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	4413      	add	r3, r2
 8006da8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006daa:	4b14      	ldr	r3, [pc, #80]	@ (8006dfc <prvAddCurrentTaskToDelayedList+0x94>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	68ba      	ldr	r2, [r7, #8]
 8006db0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006db2:	68ba      	ldr	r2, [r7, #8]
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	429a      	cmp	r2, r3
 8006db8:	d209      	bcs.n	8006dce <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006dba:	4b12      	ldr	r3, [pc, #72]	@ (8006e04 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	4b0f      	ldr	r3, [pc, #60]	@ (8006dfc <prvAddCurrentTaskToDelayedList+0x94>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	3304      	adds	r3, #4
 8006dc4:	4619      	mov	r1, r3
 8006dc6:	4610      	mov	r0, r2
 8006dc8:	f7fd fe37 	bl	8004a3a <vListInsert>
}
 8006dcc:	e010      	b.n	8006df0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006dce:	4b0e      	ldr	r3, [pc, #56]	@ (8006e08 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	4b0a      	ldr	r3, [pc, #40]	@ (8006dfc <prvAddCurrentTaskToDelayedList+0x94>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	3304      	adds	r3, #4
 8006dd8:	4619      	mov	r1, r3
 8006dda:	4610      	mov	r0, r2
 8006ddc:	f7fd fe2d 	bl	8004a3a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006de0:	4b0a      	ldr	r3, [pc, #40]	@ (8006e0c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	68ba      	ldr	r2, [r7, #8]
 8006de6:	429a      	cmp	r2, r3
 8006de8:	d202      	bcs.n	8006df0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006dea:	4a08      	ldr	r2, [pc, #32]	@ (8006e0c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	6013      	str	r3, [r2, #0]
}
 8006df0:	bf00      	nop
 8006df2:	3710      	adds	r7, #16
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}
 8006df8:	20000f60 	.word	0x20000f60
 8006dfc:	20000a88 	.word	0x20000a88
 8006e00:	20000f48 	.word	0x20000f48
 8006e04:	20000f18 	.word	0x20000f18
 8006e08:	20000f14 	.word	0x20000f14
 8006e0c:	20000f7c 	.word	0x20000f7c

08006e10 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b08a      	sub	sp, #40	@ 0x28
 8006e14:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006e16:	2300      	movs	r3, #0
 8006e18:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006e1a:	f000 fb71 	bl	8007500 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006e1e:	4b1d      	ldr	r3, [pc, #116]	@ (8006e94 <xTimerCreateTimerTask+0x84>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d021      	beq.n	8006e6a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006e26:	2300      	movs	r3, #0
 8006e28:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006e2e:	1d3a      	adds	r2, r7, #4
 8006e30:	f107 0108 	add.w	r1, r7, #8
 8006e34:	f107 030c 	add.w	r3, r7, #12
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f7fd fd93 	bl	8004964 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006e3e:	6879      	ldr	r1, [r7, #4]
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	68fa      	ldr	r2, [r7, #12]
 8006e44:	9202      	str	r2, [sp, #8]
 8006e46:	9301      	str	r3, [sp, #4]
 8006e48:	2302      	movs	r3, #2
 8006e4a:	9300      	str	r3, [sp, #0]
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	460a      	mov	r2, r1
 8006e50:	4911      	ldr	r1, [pc, #68]	@ (8006e98 <xTimerCreateTimerTask+0x88>)
 8006e52:	4812      	ldr	r0, [pc, #72]	@ (8006e9c <xTimerCreateTimerTask+0x8c>)
 8006e54:	f7fe fd42 	bl	80058dc <xTaskCreateStatic>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	4a11      	ldr	r2, [pc, #68]	@ (8006ea0 <xTimerCreateTimerTask+0x90>)
 8006e5c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006e5e:	4b10      	ldr	r3, [pc, #64]	@ (8006ea0 <xTimerCreateTimerTask+0x90>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d001      	beq.n	8006e6a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006e66:	2301      	movs	r3, #1
 8006e68:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d10b      	bne.n	8006e88 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006e70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e74:	f383 8811 	msr	BASEPRI, r3
 8006e78:	f3bf 8f6f 	isb	sy
 8006e7c:	f3bf 8f4f 	dsb	sy
 8006e80:	613b      	str	r3, [r7, #16]
}
 8006e82:	bf00      	nop
 8006e84:	bf00      	nop
 8006e86:	e7fd      	b.n	8006e84 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006e88:	697b      	ldr	r3, [r7, #20]
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3718      	adds	r7, #24
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}
 8006e92:	bf00      	nop
 8006e94:	20000fc0 	.word	0x20000fc0
 8006e98:	08008c20 	.word	0x08008c20
 8006e9c:	08007099 	.word	0x08007099
 8006ea0:	20000fc4 	.word	0x20000fc4

08006ea4 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b088      	sub	sp, #32
 8006ea8:	af02      	add	r7, sp, #8
 8006eaa:	60f8      	str	r0, [r7, #12]
 8006eac:	60b9      	str	r1, [r7, #8]
 8006eae:	607a      	str	r2, [r7, #4]
 8006eb0:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8006eb2:	202c      	movs	r0, #44	@ 0x2c
 8006eb4:	f000 fdda 	bl	8007a6c <pvPortMalloc>
 8006eb8:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d00d      	beq.n	8006edc <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	9301      	str	r3, [sp, #4]
 8006ecc:	6a3b      	ldr	r3, [r7, #32]
 8006ece:	9300      	str	r3, [sp, #0]
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	687a      	ldr	r2, [r7, #4]
 8006ed4:	68b9      	ldr	r1, [r7, #8]
 8006ed6:	68f8      	ldr	r0, [r7, #12]
 8006ed8:	f000 f805 	bl	8006ee6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8006edc:	697b      	ldr	r3, [r7, #20]
	}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3718      	adds	r7, #24
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}

08006ee6 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8006ee6:	b580      	push	{r7, lr}
 8006ee8:	b086      	sub	sp, #24
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	60f8      	str	r0, [r7, #12]
 8006eee:	60b9      	str	r1, [r7, #8]
 8006ef0:	607a      	str	r2, [r7, #4]
 8006ef2:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d10b      	bne.n	8006f12 <prvInitialiseNewTimer+0x2c>
	__asm volatile
 8006efa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006efe:	f383 8811 	msr	BASEPRI, r3
 8006f02:	f3bf 8f6f 	isb	sy
 8006f06:	f3bf 8f4f 	dsb	sy
 8006f0a:	617b      	str	r3, [r7, #20]
}
 8006f0c:	bf00      	nop
 8006f0e:	bf00      	nop
 8006f10:	e7fd      	b.n	8006f0e <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8006f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d01e      	beq.n	8006f56 <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8006f18:	f000 faf2 	bl	8007500 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8006f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f1e:	68fa      	ldr	r2, [r7, #12]
 8006f20:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8006f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f24:	68ba      	ldr	r2, [r7, #8]
 8006f26:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8006f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f2a:	683a      	ldr	r2, [r7, #0]
 8006f2c:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8006f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f30:	6a3a      	ldr	r2, [r7, #32]
 8006f32:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8006f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f36:	3304      	adds	r3, #4
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f7fd fd4d 	bl	80049d8 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d008      	beq.n	8006f56 <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8006f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f46:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006f4a:	f043 0304 	orr.w	r3, r3, #4
 8006f4e:	b2da      	uxtb	r2, r3
 8006f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f52:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8006f56:	bf00      	nop
 8006f58:	3718      	adds	r7, #24
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}
	...

08006f60 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b08a      	sub	sp, #40	@ 0x28
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	60f8      	str	r0, [r7, #12]
 8006f68:	60b9      	str	r1, [r7, #8]
 8006f6a:	607a      	str	r2, [r7, #4]
 8006f6c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d10b      	bne.n	8006f90 <xTimerGenericCommand+0x30>
	__asm volatile
 8006f78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f7c:	f383 8811 	msr	BASEPRI, r3
 8006f80:	f3bf 8f6f 	isb	sy
 8006f84:	f3bf 8f4f 	dsb	sy
 8006f88:	623b      	str	r3, [r7, #32]
}
 8006f8a:	bf00      	nop
 8006f8c:	bf00      	nop
 8006f8e:	e7fd      	b.n	8006f8c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006f90:	4b19      	ldr	r3, [pc, #100]	@ (8006ff8 <xTimerGenericCommand+0x98>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d02a      	beq.n	8006fee <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	2b05      	cmp	r3, #5
 8006fa8:	dc18      	bgt.n	8006fdc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006faa:	f7ff fbe1 	bl	8006770 <xTaskGetSchedulerState>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	2b02      	cmp	r3, #2
 8006fb2:	d109      	bne.n	8006fc8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006fb4:	4b10      	ldr	r3, [pc, #64]	@ (8006ff8 <xTimerGenericCommand+0x98>)
 8006fb6:	6818      	ldr	r0, [r3, #0]
 8006fb8:	f107 0110 	add.w	r1, r7, #16
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006fc0:	f7fd fee4 	bl	8004d8c <xQueueGenericSend>
 8006fc4:	6278      	str	r0, [r7, #36]	@ 0x24
 8006fc6:	e012      	b.n	8006fee <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006fc8:	4b0b      	ldr	r3, [pc, #44]	@ (8006ff8 <xTimerGenericCommand+0x98>)
 8006fca:	6818      	ldr	r0, [r3, #0]
 8006fcc:	f107 0110 	add.w	r1, r7, #16
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	f7fd feda 	bl	8004d8c <xQueueGenericSend>
 8006fd8:	6278      	str	r0, [r7, #36]	@ 0x24
 8006fda:	e008      	b.n	8006fee <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006fdc:	4b06      	ldr	r3, [pc, #24]	@ (8006ff8 <xTimerGenericCommand+0x98>)
 8006fde:	6818      	ldr	r0, [r3, #0]
 8006fe0:	f107 0110 	add.w	r1, r7, #16
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	683a      	ldr	r2, [r7, #0]
 8006fe8:	f7fd ffd2 	bl	8004f90 <xQueueGenericSendFromISR>
 8006fec:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3728      	adds	r7, #40	@ 0x28
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}
 8006ff8:	20000fc0 	.word	0x20000fc0

08006ffc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b088      	sub	sp, #32
 8007000:	af02      	add	r7, sp, #8
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007006:	4b23      	ldr	r3, [pc, #140]	@ (8007094 <prvProcessExpiredTimer+0x98>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	68db      	ldr	r3, [r3, #12]
 800700c:	68db      	ldr	r3, [r3, #12]
 800700e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	3304      	adds	r3, #4
 8007014:	4618      	mov	r0, r3
 8007016:	f7fd fd49 	bl	8004aac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007020:	f003 0304 	and.w	r3, r3, #4
 8007024:	2b00      	cmp	r3, #0
 8007026:	d023      	beq.n	8007070 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	699a      	ldr	r2, [r3, #24]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	18d1      	adds	r1, r2, r3
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	683a      	ldr	r2, [r7, #0]
 8007034:	6978      	ldr	r0, [r7, #20]
 8007036:	f000 f8d5 	bl	80071e4 <prvInsertTimerInActiveList>
 800703a:	4603      	mov	r3, r0
 800703c:	2b00      	cmp	r3, #0
 800703e:	d020      	beq.n	8007082 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007040:	2300      	movs	r3, #0
 8007042:	9300      	str	r3, [sp, #0]
 8007044:	2300      	movs	r3, #0
 8007046:	687a      	ldr	r2, [r7, #4]
 8007048:	2100      	movs	r1, #0
 800704a:	6978      	ldr	r0, [r7, #20]
 800704c:	f7ff ff88 	bl	8006f60 <xTimerGenericCommand>
 8007050:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d114      	bne.n	8007082 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800705c:	f383 8811 	msr	BASEPRI, r3
 8007060:	f3bf 8f6f 	isb	sy
 8007064:	f3bf 8f4f 	dsb	sy
 8007068:	60fb      	str	r3, [r7, #12]
}
 800706a:	bf00      	nop
 800706c:	bf00      	nop
 800706e:	e7fd      	b.n	800706c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007076:	f023 0301 	bic.w	r3, r3, #1
 800707a:	b2da      	uxtb	r2, r3
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	6a1b      	ldr	r3, [r3, #32]
 8007086:	6978      	ldr	r0, [r7, #20]
 8007088:	4798      	blx	r3
}
 800708a:	bf00      	nop
 800708c:	3718      	adds	r7, #24
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}
 8007092:	bf00      	nop
 8007094:	20000fb8 	.word	0x20000fb8

08007098 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b084      	sub	sp, #16
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80070a0:	f107 0308 	add.w	r3, r7, #8
 80070a4:	4618      	mov	r0, r3
 80070a6:	f000 f859 	bl	800715c <prvGetNextExpireTime>
 80070aa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	4619      	mov	r1, r3
 80070b0:	68f8      	ldr	r0, [r7, #12]
 80070b2:	f000 f805 	bl	80070c0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80070b6:	f000 f8d7 	bl	8007268 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80070ba:	bf00      	nop
 80070bc:	e7f0      	b.n	80070a0 <prvTimerTask+0x8>
	...

080070c0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b084      	sub	sp, #16
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80070ca:	f7fe feed 	bl	8005ea8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80070ce:	f107 0308 	add.w	r3, r7, #8
 80070d2:	4618      	mov	r0, r3
 80070d4:	f000 f866 	bl	80071a4 <prvSampleTimeNow>
 80070d8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d130      	bne.n	8007142 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d10a      	bne.n	80070fc <prvProcessTimerOrBlockTask+0x3c>
 80070e6:	687a      	ldr	r2, [r7, #4]
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	429a      	cmp	r2, r3
 80070ec:	d806      	bhi.n	80070fc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80070ee:	f7fe fee9 	bl	8005ec4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80070f2:	68f9      	ldr	r1, [r7, #12]
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f7ff ff81 	bl	8006ffc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80070fa:	e024      	b.n	8007146 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d008      	beq.n	8007114 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007102:	4b13      	ldr	r3, [pc, #76]	@ (8007150 <prvProcessTimerOrBlockTask+0x90>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d101      	bne.n	8007110 <prvProcessTimerOrBlockTask+0x50>
 800710c:	2301      	movs	r3, #1
 800710e:	e000      	b.n	8007112 <prvProcessTimerOrBlockTask+0x52>
 8007110:	2300      	movs	r3, #0
 8007112:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007114:	4b0f      	ldr	r3, [pc, #60]	@ (8007154 <prvProcessTimerOrBlockTask+0x94>)
 8007116:	6818      	ldr	r0, [r3, #0]
 8007118:	687a      	ldr	r2, [r7, #4]
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	1ad3      	subs	r3, r2, r3
 800711e:	683a      	ldr	r2, [r7, #0]
 8007120:	4619      	mov	r1, r3
 8007122:	f7fe fba7 	bl	8005874 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007126:	f7fe fecd 	bl	8005ec4 <xTaskResumeAll>
 800712a:	4603      	mov	r3, r0
 800712c:	2b00      	cmp	r3, #0
 800712e:	d10a      	bne.n	8007146 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007130:	4b09      	ldr	r3, [pc, #36]	@ (8007158 <prvProcessTimerOrBlockTask+0x98>)
 8007132:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007136:	601a      	str	r2, [r3, #0]
 8007138:	f3bf 8f4f 	dsb	sy
 800713c:	f3bf 8f6f 	isb	sy
}
 8007140:	e001      	b.n	8007146 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007142:	f7fe febf 	bl	8005ec4 <xTaskResumeAll>
}
 8007146:	bf00      	nop
 8007148:	3710      	adds	r7, #16
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}
 800714e:	bf00      	nop
 8007150:	20000fbc 	.word	0x20000fbc
 8007154:	20000fc0 	.word	0x20000fc0
 8007158:	e000ed04 	.word	0xe000ed04

0800715c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800715c:	b480      	push	{r7}
 800715e:	b085      	sub	sp, #20
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007164:	4b0e      	ldr	r3, [pc, #56]	@ (80071a0 <prvGetNextExpireTime+0x44>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d101      	bne.n	8007172 <prvGetNextExpireTime+0x16>
 800716e:	2201      	movs	r2, #1
 8007170:	e000      	b.n	8007174 <prvGetNextExpireTime+0x18>
 8007172:	2200      	movs	r2, #0
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d105      	bne.n	800718c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007180:	4b07      	ldr	r3, [pc, #28]	@ (80071a0 <prvGetNextExpireTime+0x44>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	68db      	ldr	r3, [r3, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	60fb      	str	r3, [r7, #12]
 800718a:	e001      	b.n	8007190 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800718c:	2300      	movs	r3, #0
 800718e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007190:	68fb      	ldr	r3, [r7, #12]
}
 8007192:	4618      	mov	r0, r3
 8007194:	3714      	adds	r7, #20
 8007196:	46bd      	mov	sp, r7
 8007198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719c:	4770      	bx	lr
 800719e:	bf00      	nop
 80071a0:	20000fb8 	.word	0x20000fb8

080071a4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b084      	sub	sp, #16
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80071ac:	f7fe ff28 	bl	8006000 <xTaskGetTickCount>
 80071b0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80071b2:	4b0b      	ldr	r3, [pc, #44]	@ (80071e0 <prvSampleTimeNow+0x3c>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	68fa      	ldr	r2, [r7, #12]
 80071b8:	429a      	cmp	r2, r3
 80071ba:	d205      	bcs.n	80071c8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80071bc:	f000 f93a 	bl	8007434 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2201      	movs	r2, #1
 80071c4:	601a      	str	r2, [r3, #0]
 80071c6:	e002      	b.n	80071ce <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2200      	movs	r2, #0
 80071cc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80071ce:	4a04      	ldr	r2, [pc, #16]	@ (80071e0 <prvSampleTimeNow+0x3c>)
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80071d4:	68fb      	ldr	r3, [r7, #12]
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3710      	adds	r7, #16
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}
 80071de:	bf00      	nop
 80071e0:	20000fc8 	.word	0x20000fc8

080071e4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b086      	sub	sp, #24
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	60f8      	str	r0, [r7, #12]
 80071ec:	60b9      	str	r1, [r7, #8]
 80071ee:	607a      	str	r2, [r7, #4]
 80071f0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80071f2:	2300      	movs	r3, #0
 80071f4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	68ba      	ldr	r2, [r7, #8]
 80071fa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	68fa      	ldr	r2, [r7, #12]
 8007200:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007202:	68ba      	ldr	r2, [r7, #8]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	429a      	cmp	r2, r3
 8007208:	d812      	bhi.n	8007230 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800720a:	687a      	ldr	r2, [r7, #4]
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	1ad2      	subs	r2, r2, r3
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	699b      	ldr	r3, [r3, #24]
 8007214:	429a      	cmp	r2, r3
 8007216:	d302      	bcc.n	800721e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007218:	2301      	movs	r3, #1
 800721a:	617b      	str	r3, [r7, #20]
 800721c:	e01b      	b.n	8007256 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800721e:	4b10      	ldr	r3, [pc, #64]	@ (8007260 <prvInsertTimerInActiveList+0x7c>)
 8007220:	681a      	ldr	r2, [r3, #0]
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	3304      	adds	r3, #4
 8007226:	4619      	mov	r1, r3
 8007228:	4610      	mov	r0, r2
 800722a:	f7fd fc06 	bl	8004a3a <vListInsert>
 800722e:	e012      	b.n	8007256 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007230:	687a      	ldr	r2, [r7, #4]
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	429a      	cmp	r2, r3
 8007236:	d206      	bcs.n	8007246 <prvInsertTimerInActiveList+0x62>
 8007238:	68ba      	ldr	r2, [r7, #8]
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	429a      	cmp	r2, r3
 800723e:	d302      	bcc.n	8007246 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007240:	2301      	movs	r3, #1
 8007242:	617b      	str	r3, [r7, #20]
 8007244:	e007      	b.n	8007256 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007246:	4b07      	ldr	r3, [pc, #28]	@ (8007264 <prvInsertTimerInActiveList+0x80>)
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	3304      	adds	r3, #4
 800724e:	4619      	mov	r1, r3
 8007250:	4610      	mov	r0, r2
 8007252:	f7fd fbf2 	bl	8004a3a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007256:	697b      	ldr	r3, [r7, #20]
}
 8007258:	4618      	mov	r0, r3
 800725a:	3718      	adds	r7, #24
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}
 8007260:	20000fbc 	.word	0x20000fbc
 8007264:	20000fb8 	.word	0x20000fb8

08007268 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b08e      	sub	sp, #56	@ 0x38
 800726c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800726e:	e0ce      	b.n	800740e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2b00      	cmp	r3, #0
 8007274:	da19      	bge.n	80072aa <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007276:	1d3b      	adds	r3, r7, #4
 8007278:	3304      	adds	r3, #4
 800727a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800727c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800727e:	2b00      	cmp	r3, #0
 8007280:	d10b      	bne.n	800729a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007286:	f383 8811 	msr	BASEPRI, r3
 800728a:	f3bf 8f6f 	isb	sy
 800728e:	f3bf 8f4f 	dsb	sy
 8007292:	61fb      	str	r3, [r7, #28]
}
 8007294:	bf00      	nop
 8007296:	bf00      	nop
 8007298:	e7fd      	b.n	8007296 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800729a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80072a0:	6850      	ldr	r0, [r2, #4]
 80072a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80072a4:	6892      	ldr	r2, [r2, #8]
 80072a6:	4611      	mov	r1, r2
 80072a8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	f2c0 80ae 	blt.w	800740e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80072b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072b8:	695b      	ldr	r3, [r3, #20]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d004      	beq.n	80072c8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80072be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072c0:	3304      	adds	r3, #4
 80072c2:	4618      	mov	r0, r3
 80072c4:	f7fd fbf2 	bl	8004aac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80072c8:	463b      	mov	r3, r7
 80072ca:	4618      	mov	r0, r3
 80072cc:	f7ff ff6a 	bl	80071a4 <prvSampleTimeNow>
 80072d0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2b09      	cmp	r3, #9
 80072d6:	f200 8097 	bhi.w	8007408 <prvProcessReceivedCommands+0x1a0>
 80072da:	a201      	add	r2, pc, #4	@ (adr r2, 80072e0 <prvProcessReceivedCommands+0x78>)
 80072dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072e0:	08007309 	.word	0x08007309
 80072e4:	08007309 	.word	0x08007309
 80072e8:	08007309 	.word	0x08007309
 80072ec:	0800737f 	.word	0x0800737f
 80072f0:	08007393 	.word	0x08007393
 80072f4:	080073df 	.word	0x080073df
 80072f8:	08007309 	.word	0x08007309
 80072fc:	08007309 	.word	0x08007309
 8007300:	0800737f 	.word	0x0800737f
 8007304:	08007393 	.word	0x08007393
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800730a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800730e:	f043 0301 	orr.w	r3, r3, #1
 8007312:	b2da      	uxtb	r2, r3
 8007314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007316:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800731a:	68ba      	ldr	r2, [r7, #8]
 800731c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800731e:	699b      	ldr	r3, [r3, #24]
 8007320:	18d1      	adds	r1, r2, r3
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007326:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007328:	f7ff ff5c 	bl	80071e4 <prvInsertTimerInActiveList>
 800732c:	4603      	mov	r3, r0
 800732e:	2b00      	cmp	r3, #0
 8007330:	d06c      	beq.n	800740c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007334:	6a1b      	ldr	r3, [r3, #32]
 8007336:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007338:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800733a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800733c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007340:	f003 0304 	and.w	r3, r3, #4
 8007344:	2b00      	cmp	r3, #0
 8007346:	d061      	beq.n	800740c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007348:	68ba      	ldr	r2, [r7, #8]
 800734a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800734c:	699b      	ldr	r3, [r3, #24]
 800734e:	441a      	add	r2, r3
 8007350:	2300      	movs	r3, #0
 8007352:	9300      	str	r3, [sp, #0]
 8007354:	2300      	movs	r3, #0
 8007356:	2100      	movs	r1, #0
 8007358:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800735a:	f7ff fe01 	bl	8006f60 <xTimerGenericCommand>
 800735e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007360:	6a3b      	ldr	r3, [r7, #32]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d152      	bne.n	800740c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8007366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800736a:	f383 8811 	msr	BASEPRI, r3
 800736e:	f3bf 8f6f 	isb	sy
 8007372:	f3bf 8f4f 	dsb	sy
 8007376:	61bb      	str	r3, [r7, #24]
}
 8007378:	bf00      	nop
 800737a:	bf00      	nop
 800737c:	e7fd      	b.n	800737a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800737e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007380:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007384:	f023 0301 	bic.w	r3, r3, #1
 8007388:	b2da      	uxtb	r2, r3
 800738a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800738c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007390:	e03d      	b.n	800740e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007394:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007398:	f043 0301 	orr.w	r3, r3, #1
 800739c:	b2da      	uxtb	r2, r3
 800739e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073a0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80073a4:	68ba      	ldr	r2, [r7, #8]
 80073a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073a8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80073aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073ac:	699b      	ldr	r3, [r3, #24]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d10b      	bne.n	80073ca <prvProcessReceivedCommands+0x162>
	__asm volatile
 80073b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073b6:	f383 8811 	msr	BASEPRI, r3
 80073ba:	f3bf 8f6f 	isb	sy
 80073be:	f3bf 8f4f 	dsb	sy
 80073c2:	617b      	str	r3, [r7, #20]
}
 80073c4:	bf00      	nop
 80073c6:	bf00      	nop
 80073c8:	e7fd      	b.n	80073c6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80073ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073cc:	699a      	ldr	r2, [r3, #24]
 80073ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073d0:	18d1      	adds	r1, r2, r3
 80073d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80073d8:	f7ff ff04 	bl	80071e4 <prvInsertTimerInActiveList>
					break;
 80073dc:	e017      	b.n	800740e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80073de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80073e4:	f003 0302 	and.w	r3, r3, #2
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d103      	bne.n	80073f4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80073ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80073ee:	f000 fc0b 	bl	8007c08 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80073f2:	e00c      	b.n	800740e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80073f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073f6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80073fa:	f023 0301 	bic.w	r3, r3, #1
 80073fe:	b2da      	uxtb	r2, r3
 8007400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007402:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007406:	e002      	b.n	800740e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007408:	bf00      	nop
 800740a:	e000      	b.n	800740e <prvProcessReceivedCommands+0x1a6>
					break;
 800740c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800740e:	4b08      	ldr	r3, [pc, #32]	@ (8007430 <prvProcessReceivedCommands+0x1c8>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	1d39      	adds	r1, r7, #4
 8007414:	2200      	movs	r2, #0
 8007416:	4618      	mov	r0, r3
 8007418:	f7fd fee8 	bl	80051ec <xQueueReceive>
 800741c:	4603      	mov	r3, r0
 800741e:	2b00      	cmp	r3, #0
 8007420:	f47f af26 	bne.w	8007270 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007424:	bf00      	nop
 8007426:	bf00      	nop
 8007428:	3730      	adds	r7, #48	@ 0x30
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}
 800742e:	bf00      	nop
 8007430:	20000fc0 	.word	0x20000fc0

08007434 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b088      	sub	sp, #32
 8007438:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800743a:	e049      	b.n	80074d0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800743c:	4b2e      	ldr	r3, [pc, #184]	@ (80074f8 <prvSwitchTimerLists+0xc4>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	68db      	ldr	r3, [r3, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007446:	4b2c      	ldr	r3, [pc, #176]	@ (80074f8 <prvSwitchTimerLists+0xc4>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	68db      	ldr	r3, [r3, #12]
 800744c:	68db      	ldr	r3, [r3, #12]
 800744e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	3304      	adds	r3, #4
 8007454:	4618      	mov	r0, r3
 8007456:	f7fd fb29 	bl	8004aac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	6a1b      	ldr	r3, [r3, #32]
 800745e:	68f8      	ldr	r0, [r7, #12]
 8007460:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007468:	f003 0304 	and.w	r3, r3, #4
 800746c:	2b00      	cmp	r3, #0
 800746e:	d02f      	beq.n	80074d0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	699b      	ldr	r3, [r3, #24]
 8007474:	693a      	ldr	r2, [r7, #16]
 8007476:	4413      	add	r3, r2
 8007478:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800747a:	68ba      	ldr	r2, [r7, #8]
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	429a      	cmp	r2, r3
 8007480:	d90e      	bls.n	80074a0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	68ba      	ldr	r2, [r7, #8]
 8007486:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	68fa      	ldr	r2, [r7, #12]
 800748c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800748e:	4b1a      	ldr	r3, [pc, #104]	@ (80074f8 <prvSwitchTimerLists+0xc4>)
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	3304      	adds	r3, #4
 8007496:	4619      	mov	r1, r3
 8007498:	4610      	mov	r0, r2
 800749a:	f7fd face 	bl	8004a3a <vListInsert>
 800749e:	e017      	b.n	80074d0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80074a0:	2300      	movs	r3, #0
 80074a2:	9300      	str	r3, [sp, #0]
 80074a4:	2300      	movs	r3, #0
 80074a6:	693a      	ldr	r2, [r7, #16]
 80074a8:	2100      	movs	r1, #0
 80074aa:	68f8      	ldr	r0, [r7, #12]
 80074ac:	f7ff fd58 	bl	8006f60 <xTimerGenericCommand>
 80074b0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d10b      	bne.n	80074d0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80074b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074bc:	f383 8811 	msr	BASEPRI, r3
 80074c0:	f3bf 8f6f 	isb	sy
 80074c4:	f3bf 8f4f 	dsb	sy
 80074c8:	603b      	str	r3, [r7, #0]
}
 80074ca:	bf00      	nop
 80074cc:	bf00      	nop
 80074ce:	e7fd      	b.n	80074cc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80074d0:	4b09      	ldr	r3, [pc, #36]	@ (80074f8 <prvSwitchTimerLists+0xc4>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d1b0      	bne.n	800743c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80074da:	4b07      	ldr	r3, [pc, #28]	@ (80074f8 <prvSwitchTimerLists+0xc4>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80074e0:	4b06      	ldr	r3, [pc, #24]	@ (80074fc <prvSwitchTimerLists+0xc8>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a04      	ldr	r2, [pc, #16]	@ (80074f8 <prvSwitchTimerLists+0xc4>)
 80074e6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80074e8:	4a04      	ldr	r2, [pc, #16]	@ (80074fc <prvSwitchTimerLists+0xc8>)
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	6013      	str	r3, [r2, #0]
}
 80074ee:	bf00      	nop
 80074f0:	3718      	adds	r7, #24
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}
 80074f6:	bf00      	nop
 80074f8:	20000fb8 	.word	0x20000fb8
 80074fc:	20000fbc 	.word	0x20000fbc

08007500 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b082      	sub	sp, #8
 8007504:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007506:	f000 f98f 	bl	8007828 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800750a:	4b15      	ldr	r3, [pc, #84]	@ (8007560 <prvCheckForValidListAndQueue+0x60>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d120      	bne.n	8007554 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007512:	4814      	ldr	r0, [pc, #80]	@ (8007564 <prvCheckForValidListAndQueue+0x64>)
 8007514:	f7fd fa40 	bl	8004998 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007518:	4813      	ldr	r0, [pc, #76]	@ (8007568 <prvCheckForValidListAndQueue+0x68>)
 800751a:	f7fd fa3d 	bl	8004998 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800751e:	4b13      	ldr	r3, [pc, #76]	@ (800756c <prvCheckForValidListAndQueue+0x6c>)
 8007520:	4a10      	ldr	r2, [pc, #64]	@ (8007564 <prvCheckForValidListAndQueue+0x64>)
 8007522:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007524:	4b12      	ldr	r3, [pc, #72]	@ (8007570 <prvCheckForValidListAndQueue+0x70>)
 8007526:	4a10      	ldr	r2, [pc, #64]	@ (8007568 <prvCheckForValidListAndQueue+0x68>)
 8007528:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800752a:	2300      	movs	r3, #0
 800752c:	9300      	str	r3, [sp, #0]
 800752e:	4b11      	ldr	r3, [pc, #68]	@ (8007574 <prvCheckForValidListAndQueue+0x74>)
 8007530:	4a11      	ldr	r2, [pc, #68]	@ (8007578 <prvCheckForValidListAndQueue+0x78>)
 8007532:	2110      	movs	r1, #16
 8007534:	200a      	movs	r0, #10
 8007536:	f7fd fb4d 	bl	8004bd4 <xQueueGenericCreateStatic>
 800753a:	4603      	mov	r3, r0
 800753c:	4a08      	ldr	r2, [pc, #32]	@ (8007560 <prvCheckForValidListAndQueue+0x60>)
 800753e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007540:	4b07      	ldr	r3, [pc, #28]	@ (8007560 <prvCheckForValidListAndQueue+0x60>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d005      	beq.n	8007554 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007548:	4b05      	ldr	r3, [pc, #20]	@ (8007560 <prvCheckForValidListAndQueue+0x60>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	490b      	ldr	r1, [pc, #44]	@ (800757c <prvCheckForValidListAndQueue+0x7c>)
 800754e:	4618      	mov	r0, r3
 8007550:	f7fe f966 	bl	8005820 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007554:	f000 f99a 	bl	800788c <vPortExitCritical>
}
 8007558:	bf00      	nop
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}
 800755e:	bf00      	nop
 8007560:	20000fc0 	.word	0x20000fc0
 8007564:	20000f90 	.word	0x20000f90
 8007568:	20000fa4 	.word	0x20000fa4
 800756c:	20000fb8 	.word	0x20000fb8
 8007570:	20000fbc 	.word	0x20000fbc
 8007574:	2000106c 	.word	0x2000106c
 8007578:	20000fcc 	.word	0x20000fcc
 800757c:	08008c28 	.word	0x08008c28

08007580 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b086      	sub	sp, #24
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d10b      	bne.n	80075aa <pvTimerGetTimerID+0x2a>
	__asm volatile
 8007592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007596:	f383 8811 	msr	BASEPRI, r3
 800759a:	f3bf 8f6f 	isb	sy
 800759e:	f3bf 8f4f 	dsb	sy
 80075a2:	60fb      	str	r3, [r7, #12]
}
 80075a4:	bf00      	nop
 80075a6:	bf00      	nop
 80075a8:	e7fd      	b.n	80075a6 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 80075aa:	f000 f93d 	bl	8007828 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	69db      	ldr	r3, [r3, #28]
 80075b2:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 80075b4:	f000 f96a 	bl	800788c <vPortExitCritical>

	return pvReturn;
 80075b8:	693b      	ldr	r3, [r7, #16]
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3718      	adds	r7, #24
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}
	...

080075c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80075c4:	b480      	push	{r7}
 80075c6:	b085      	sub	sp, #20
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	60b9      	str	r1, [r7, #8]
 80075ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	3b04      	subs	r3, #4
 80075d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80075dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	3b04      	subs	r3, #4
 80075e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	f023 0201 	bic.w	r2, r3, #1
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	3b04      	subs	r3, #4
 80075f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80075f4:	4a0c      	ldr	r2, [pc, #48]	@ (8007628 <pxPortInitialiseStack+0x64>)
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	3b14      	subs	r3, #20
 80075fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007600:	687a      	ldr	r2, [r7, #4]
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	3b04      	subs	r3, #4
 800760a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f06f 0202 	mvn.w	r2, #2
 8007612:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	3b20      	subs	r3, #32
 8007618:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800761a:	68fb      	ldr	r3, [r7, #12]
}
 800761c:	4618      	mov	r0, r3
 800761e:	3714      	adds	r7, #20
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr
 8007628:	0800762d 	.word	0x0800762d

0800762c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800762c:	b480      	push	{r7}
 800762e:	b085      	sub	sp, #20
 8007630:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007632:	2300      	movs	r3, #0
 8007634:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007636:	4b13      	ldr	r3, [pc, #76]	@ (8007684 <prvTaskExitError+0x58>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800763e:	d00b      	beq.n	8007658 <prvTaskExitError+0x2c>
	__asm volatile
 8007640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007644:	f383 8811 	msr	BASEPRI, r3
 8007648:	f3bf 8f6f 	isb	sy
 800764c:	f3bf 8f4f 	dsb	sy
 8007650:	60fb      	str	r3, [r7, #12]
}
 8007652:	bf00      	nop
 8007654:	bf00      	nop
 8007656:	e7fd      	b.n	8007654 <prvTaskExitError+0x28>
	__asm volatile
 8007658:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800765c:	f383 8811 	msr	BASEPRI, r3
 8007660:	f3bf 8f6f 	isb	sy
 8007664:	f3bf 8f4f 	dsb	sy
 8007668:	60bb      	str	r3, [r7, #8]
}
 800766a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800766c:	bf00      	nop
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d0fc      	beq.n	800766e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007674:	bf00      	nop
 8007676:	bf00      	nop
 8007678:	3714      	adds	r7, #20
 800767a:	46bd      	mov	sp, r7
 800767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007680:	4770      	bx	lr
 8007682:	bf00      	nop
 8007684:	2000000c 	.word	0x2000000c
	...

08007690 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007690:	4b07      	ldr	r3, [pc, #28]	@ (80076b0 <pxCurrentTCBConst2>)
 8007692:	6819      	ldr	r1, [r3, #0]
 8007694:	6808      	ldr	r0, [r1, #0]
 8007696:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800769a:	f380 8809 	msr	PSP, r0
 800769e:	f3bf 8f6f 	isb	sy
 80076a2:	f04f 0000 	mov.w	r0, #0
 80076a6:	f380 8811 	msr	BASEPRI, r0
 80076aa:	4770      	bx	lr
 80076ac:	f3af 8000 	nop.w

080076b0 <pxCurrentTCBConst2>:
 80076b0:	20000a88 	.word	0x20000a88
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80076b4:	bf00      	nop
 80076b6:	bf00      	nop

080076b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80076b8:	4808      	ldr	r0, [pc, #32]	@ (80076dc <prvPortStartFirstTask+0x24>)
 80076ba:	6800      	ldr	r0, [r0, #0]
 80076bc:	6800      	ldr	r0, [r0, #0]
 80076be:	f380 8808 	msr	MSP, r0
 80076c2:	f04f 0000 	mov.w	r0, #0
 80076c6:	f380 8814 	msr	CONTROL, r0
 80076ca:	b662      	cpsie	i
 80076cc:	b661      	cpsie	f
 80076ce:	f3bf 8f4f 	dsb	sy
 80076d2:	f3bf 8f6f 	isb	sy
 80076d6:	df00      	svc	0
 80076d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80076da:	bf00      	nop
 80076dc:	e000ed08 	.word	0xe000ed08

080076e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b086      	sub	sp, #24
 80076e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80076e6:	4b47      	ldr	r3, [pc, #284]	@ (8007804 <xPortStartScheduler+0x124>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a47      	ldr	r2, [pc, #284]	@ (8007808 <xPortStartScheduler+0x128>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d10b      	bne.n	8007708 <xPortStartScheduler+0x28>
	__asm volatile
 80076f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076f4:	f383 8811 	msr	BASEPRI, r3
 80076f8:	f3bf 8f6f 	isb	sy
 80076fc:	f3bf 8f4f 	dsb	sy
 8007700:	60fb      	str	r3, [r7, #12]
}
 8007702:	bf00      	nop
 8007704:	bf00      	nop
 8007706:	e7fd      	b.n	8007704 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007708:	4b3e      	ldr	r3, [pc, #248]	@ (8007804 <xPortStartScheduler+0x124>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a3f      	ldr	r2, [pc, #252]	@ (800780c <xPortStartScheduler+0x12c>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d10b      	bne.n	800772a <xPortStartScheduler+0x4a>
	__asm volatile
 8007712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007716:	f383 8811 	msr	BASEPRI, r3
 800771a:	f3bf 8f6f 	isb	sy
 800771e:	f3bf 8f4f 	dsb	sy
 8007722:	613b      	str	r3, [r7, #16]
}
 8007724:	bf00      	nop
 8007726:	bf00      	nop
 8007728:	e7fd      	b.n	8007726 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800772a:	4b39      	ldr	r3, [pc, #228]	@ (8007810 <xPortStartScheduler+0x130>)
 800772c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	781b      	ldrb	r3, [r3, #0]
 8007732:	b2db      	uxtb	r3, r3
 8007734:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	22ff      	movs	r2, #255	@ 0xff
 800773a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	781b      	ldrb	r3, [r3, #0]
 8007740:	b2db      	uxtb	r3, r3
 8007742:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007744:	78fb      	ldrb	r3, [r7, #3]
 8007746:	b2db      	uxtb	r3, r3
 8007748:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800774c:	b2da      	uxtb	r2, r3
 800774e:	4b31      	ldr	r3, [pc, #196]	@ (8007814 <xPortStartScheduler+0x134>)
 8007750:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007752:	4b31      	ldr	r3, [pc, #196]	@ (8007818 <xPortStartScheduler+0x138>)
 8007754:	2207      	movs	r2, #7
 8007756:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007758:	e009      	b.n	800776e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800775a:	4b2f      	ldr	r3, [pc, #188]	@ (8007818 <xPortStartScheduler+0x138>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	3b01      	subs	r3, #1
 8007760:	4a2d      	ldr	r2, [pc, #180]	@ (8007818 <xPortStartScheduler+0x138>)
 8007762:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007764:	78fb      	ldrb	r3, [r7, #3]
 8007766:	b2db      	uxtb	r3, r3
 8007768:	005b      	lsls	r3, r3, #1
 800776a:	b2db      	uxtb	r3, r3
 800776c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800776e:	78fb      	ldrb	r3, [r7, #3]
 8007770:	b2db      	uxtb	r3, r3
 8007772:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007776:	2b80      	cmp	r3, #128	@ 0x80
 8007778:	d0ef      	beq.n	800775a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800777a:	4b27      	ldr	r3, [pc, #156]	@ (8007818 <xPortStartScheduler+0x138>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f1c3 0307 	rsb	r3, r3, #7
 8007782:	2b04      	cmp	r3, #4
 8007784:	d00b      	beq.n	800779e <xPortStartScheduler+0xbe>
	__asm volatile
 8007786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800778a:	f383 8811 	msr	BASEPRI, r3
 800778e:	f3bf 8f6f 	isb	sy
 8007792:	f3bf 8f4f 	dsb	sy
 8007796:	60bb      	str	r3, [r7, #8]
}
 8007798:	bf00      	nop
 800779a:	bf00      	nop
 800779c:	e7fd      	b.n	800779a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800779e:	4b1e      	ldr	r3, [pc, #120]	@ (8007818 <xPortStartScheduler+0x138>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	021b      	lsls	r3, r3, #8
 80077a4:	4a1c      	ldr	r2, [pc, #112]	@ (8007818 <xPortStartScheduler+0x138>)
 80077a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80077a8:	4b1b      	ldr	r3, [pc, #108]	@ (8007818 <xPortStartScheduler+0x138>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80077b0:	4a19      	ldr	r2, [pc, #100]	@ (8007818 <xPortStartScheduler+0x138>)
 80077b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	b2da      	uxtb	r2, r3
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80077bc:	4b17      	ldr	r3, [pc, #92]	@ (800781c <xPortStartScheduler+0x13c>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a16      	ldr	r2, [pc, #88]	@ (800781c <xPortStartScheduler+0x13c>)
 80077c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80077c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80077c8:	4b14      	ldr	r3, [pc, #80]	@ (800781c <xPortStartScheduler+0x13c>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a13      	ldr	r2, [pc, #76]	@ (800781c <xPortStartScheduler+0x13c>)
 80077ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80077d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80077d4:	f000 f8da 	bl	800798c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80077d8:	4b11      	ldr	r3, [pc, #68]	@ (8007820 <xPortStartScheduler+0x140>)
 80077da:	2200      	movs	r2, #0
 80077dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80077de:	f000 f8f9 	bl	80079d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80077e2:	4b10      	ldr	r3, [pc, #64]	@ (8007824 <xPortStartScheduler+0x144>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a0f      	ldr	r2, [pc, #60]	@ (8007824 <xPortStartScheduler+0x144>)
 80077e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80077ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80077ee:	f7ff ff63 	bl	80076b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80077f2:	f7fe fccf 	bl	8006194 <vTaskSwitchContext>
	prvTaskExitError();
 80077f6:	f7ff ff19 	bl	800762c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80077fa:	2300      	movs	r3, #0
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3718      	adds	r7, #24
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}
 8007804:	e000ed00 	.word	0xe000ed00
 8007808:	410fc271 	.word	0x410fc271
 800780c:	410fc270 	.word	0x410fc270
 8007810:	e000e400 	.word	0xe000e400
 8007814:	200010bc 	.word	0x200010bc
 8007818:	200010c0 	.word	0x200010c0
 800781c:	e000ed20 	.word	0xe000ed20
 8007820:	2000000c 	.word	0x2000000c
 8007824:	e000ef34 	.word	0xe000ef34

08007828 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007828:	b480      	push	{r7}
 800782a:	b083      	sub	sp, #12
 800782c:	af00      	add	r7, sp, #0
	__asm volatile
 800782e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007832:	f383 8811 	msr	BASEPRI, r3
 8007836:	f3bf 8f6f 	isb	sy
 800783a:	f3bf 8f4f 	dsb	sy
 800783e:	607b      	str	r3, [r7, #4]
}
 8007840:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007842:	4b10      	ldr	r3, [pc, #64]	@ (8007884 <vPortEnterCritical+0x5c>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	3301      	adds	r3, #1
 8007848:	4a0e      	ldr	r2, [pc, #56]	@ (8007884 <vPortEnterCritical+0x5c>)
 800784a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800784c:	4b0d      	ldr	r3, [pc, #52]	@ (8007884 <vPortEnterCritical+0x5c>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	2b01      	cmp	r3, #1
 8007852:	d110      	bne.n	8007876 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007854:	4b0c      	ldr	r3, [pc, #48]	@ (8007888 <vPortEnterCritical+0x60>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	b2db      	uxtb	r3, r3
 800785a:	2b00      	cmp	r3, #0
 800785c:	d00b      	beq.n	8007876 <vPortEnterCritical+0x4e>
	__asm volatile
 800785e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007862:	f383 8811 	msr	BASEPRI, r3
 8007866:	f3bf 8f6f 	isb	sy
 800786a:	f3bf 8f4f 	dsb	sy
 800786e:	603b      	str	r3, [r7, #0]
}
 8007870:	bf00      	nop
 8007872:	bf00      	nop
 8007874:	e7fd      	b.n	8007872 <vPortEnterCritical+0x4a>
	}
}
 8007876:	bf00      	nop
 8007878:	370c      	adds	r7, #12
 800787a:	46bd      	mov	sp, r7
 800787c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007880:	4770      	bx	lr
 8007882:	bf00      	nop
 8007884:	2000000c 	.word	0x2000000c
 8007888:	e000ed04 	.word	0xe000ed04

0800788c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800788c:	b480      	push	{r7}
 800788e:	b083      	sub	sp, #12
 8007890:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007892:	4b12      	ldr	r3, [pc, #72]	@ (80078dc <vPortExitCritical+0x50>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d10b      	bne.n	80078b2 <vPortExitCritical+0x26>
	__asm volatile
 800789a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800789e:	f383 8811 	msr	BASEPRI, r3
 80078a2:	f3bf 8f6f 	isb	sy
 80078a6:	f3bf 8f4f 	dsb	sy
 80078aa:	607b      	str	r3, [r7, #4]
}
 80078ac:	bf00      	nop
 80078ae:	bf00      	nop
 80078b0:	e7fd      	b.n	80078ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80078b2:	4b0a      	ldr	r3, [pc, #40]	@ (80078dc <vPortExitCritical+0x50>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	3b01      	subs	r3, #1
 80078b8:	4a08      	ldr	r2, [pc, #32]	@ (80078dc <vPortExitCritical+0x50>)
 80078ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80078bc:	4b07      	ldr	r3, [pc, #28]	@ (80078dc <vPortExitCritical+0x50>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d105      	bne.n	80078d0 <vPortExitCritical+0x44>
 80078c4:	2300      	movs	r3, #0
 80078c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	f383 8811 	msr	BASEPRI, r3
}
 80078ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80078d0:	bf00      	nop
 80078d2:	370c      	adds	r7, #12
 80078d4:	46bd      	mov	sp, r7
 80078d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078da:	4770      	bx	lr
 80078dc:	2000000c 	.word	0x2000000c

080078e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80078e0:	f3ef 8009 	mrs	r0, PSP
 80078e4:	f3bf 8f6f 	isb	sy
 80078e8:	4b15      	ldr	r3, [pc, #84]	@ (8007940 <pxCurrentTCBConst>)
 80078ea:	681a      	ldr	r2, [r3, #0]
 80078ec:	f01e 0f10 	tst.w	lr, #16
 80078f0:	bf08      	it	eq
 80078f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80078f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078fa:	6010      	str	r0, [r2, #0]
 80078fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007900:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007904:	f380 8811 	msr	BASEPRI, r0
 8007908:	f3bf 8f4f 	dsb	sy
 800790c:	f3bf 8f6f 	isb	sy
 8007910:	f7fe fc40 	bl	8006194 <vTaskSwitchContext>
 8007914:	f04f 0000 	mov.w	r0, #0
 8007918:	f380 8811 	msr	BASEPRI, r0
 800791c:	bc09      	pop	{r0, r3}
 800791e:	6819      	ldr	r1, [r3, #0]
 8007920:	6808      	ldr	r0, [r1, #0]
 8007922:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007926:	f01e 0f10 	tst.w	lr, #16
 800792a:	bf08      	it	eq
 800792c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007930:	f380 8809 	msr	PSP, r0
 8007934:	f3bf 8f6f 	isb	sy
 8007938:	4770      	bx	lr
 800793a:	bf00      	nop
 800793c:	f3af 8000 	nop.w

08007940 <pxCurrentTCBConst>:
 8007940:	20000a88 	.word	0x20000a88
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007944:	bf00      	nop
 8007946:	bf00      	nop

08007948 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b082      	sub	sp, #8
 800794c:	af00      	add	r7, sp, #0
	__asm volatile
 800794e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007952:	f383 8811 	msr	BASEPRI, r3
 8007956:	f3bf 8f6f 	isb	sy
 800795a:	f3bf 8f4f 	dsb	sy
 800795e:	607b      	str	r3, [r7, #4]
}
 8007960:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007962:	f7fe fb5d 	bl	8006020 <xTaskIncrementTick>
 8007966:	4603      	mov	r3, r0
 8007968:	2b00      	cmp	r3, #0
 800796a:	d003      	beq.n	8007974 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800796c:	4b06      	ldr	r3, [pc, #24]	@ (8007988 <xPortSysTickHandler+0x40>)
 800796e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007972:	601a      	str	r2, [r3, #0]
 8007974:	2300      	movs	r3, #0
 8007976:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	f383 8811 	msr	BASEPRI, r3
}
 800797e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007980:	bf00      	nop
 8007982:	3708      	adds	r7, #8
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}
 8007988:	e000ed04 	.word	0xe000ed04

0800798c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800798c:	b480      	push	{r7}
 800798e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007990:	4b0b      	ldr	r3, [pc, #44]	@ (80079c0 <vPortSetupTimerInterrupt+0x34>)
 8007992:	2200      	movs	r2, #0
 8007994:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007996:	4b0b      	ldr	r3, [pc, #44]	@ (80079c4 <vPortSetupTimerInterrupt+0x38>)
 8007998:	2200      	movs	r2, #0
 800799a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800799c:	4b0a      	ldr	r3, [pc, #40]	@ (80079c8 <vPortSetupTimerInterrupt+0x3c>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a0a      	ldr	r2, [pc, #40]	@ (80079cc <vPortSetupTimerInterrupt+0x40>)
 80079a2:	fba2 2303 	umull	r2, r3, r2, r3
 80079a6:	099b      	lsrs	r3, r3, #6
 80079a8:	4a09      	ldr	r2, [pc, #36]	@ (80079d0 <vPortSetupTimerInterrupt+0x44>)
 80079aa:	3b01      	subs	r3, #1
 80079ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80079ae:	4b04      	ldr	r3, [pc, #16]	@ (80079c0 <vPortSetupTimerInterrupt+0x34>)
 80079b0:	2207      	movs	r2, #7
 80079b2:	601a      	str	r2, [r3, #0]
}
 80079b4:	bf00      	nop
 80079b6:	46bd      	mov	sp, r7
 80079b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079bc:	4770      	bx	lr
 80079be:	bf00      	nop
 80079c0:	e000e010 	.word	0xe000e010
 80079c4:	e000e018 	.word	0xe000e018
 80079c8:	20000000 	.word	0x20000000
 80079cc:	10624dd3 	.word	0x10624dd3
 80079d0:	e000e014 	.word	0xe000e014

080079d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80079d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80079e4 <vPortEnableVFP+0x10>
 80079d8:	6801      	ldr	r1, [r0, #0]
 80079da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80079de:	6001      	str	r1, [r0, #0]
 80079e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80079e2:	bf00      	nop
 80079e4:	e000ed88 	.word	0xe000ed88

080079e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80079e8:	b480      	push	{r7}
 80079ea:	b085      	sub	sp, #20
 80079ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80079ee:	f3ef 8305 	mrs	r3, IPSR
 80079f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	2b0f      	cmp	r3, #15
 80079f8:	d915      	bls.n	8007a26 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80079fa:	4a18      	ldr	r2, [pc, #96]	@ (8007a5c <vPortValidateInterruptPriority+0x74>)
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	4413      	add	r3, r2
 8007a00:	781b      	ldrb	r3, [r3, #0]
 8007a02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007a04:	4b16      	ldr	r3, [pc, #88]	@ (8007a60 <vPortValidateInterruptPriority+0x78>)
 8007a06:	781b      	ldrb	r3, [r3, #0]
 8007a08:	7afa      	ldrb	r2, [r7, #11]
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	d20b      	bcs.n	8007a26 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a12:	f383 8811 	msr	BASEPRI, r3
 8007a16:	f3bf 8f6f 	isb	sy
 8007a1a:	f3bf 8f4f 	dsb	sy
 8007a1e:	607b      	str	r3, [r7, #4]
}
 8007a20:	bf00      	nop
 8007a22:	bf00      	nop
 8007a24:	e7fd      	b.n	8007a22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007a26:	4b0f      	ldr	r3, [pc, #60]	@ (8007a64 <vPortValidateInterruptPriority+0x7c>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007a2e:	4b0e      	ldr	r3, [pc, #56]	@ (8007a68 <vPortValidateInterruptPriority+0x80>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	429a      	cmp	r2, r3
 8007a34:	d90b      	bls.n	8007a4e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007a36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a3a:	f383 8811 	msr	BASEPRI, r3
 8007a3e:	f3bf 8f6f 	isb	sy
 8007a42:	f3bf 8f4f 	dsb	sy
 8007a46:	603b      	str	r3, [r7, #0]
}
 8007a48:	bf00      	nop
 8007a4a:	bf00      	nop
 8007a4c:	e7fd      	b.n	8007a4a <vPortValidateInterruptPriority+0x62>
	}
 8007a4e:	bf00      	nop
 8007a50:	3714      	adds	r7, #20
 8007a52:	46bd      	mov	sp, r7
 8007a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a58:	4770      	bx	lr
 8007a5a:	bf00      	nop
 8007a5c:	e000e3f0 	.word	0xe000e3f0
 8007a60:	200010bc 	.word	0x200010bc
 8007a64:	e000ed0c 	.word	0xe000ed0c
 8007a68:	200010c0 	.word	0x200010c0

08007a6c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b08a      	sub	sp, #40	@ 0x28
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007a74:	2300      	movs	r3, #0
 8007a76:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007a78:	f7fe fa16 	bl	8005ea8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007a7c:	4b5c      	ldr	r3, [pc, #368]	@ (8007bf0 <pvPortMalloc+0x184>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d101      	bne.n	8007a88 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007a84:	f000 f924 	bl	8007cd0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007a88:	4b5a      	ldr	r3, [pc, #360]	@ (8007bf4 <pvPortMalloc+0x188>)
 8007a8a:	681a      	ldr	r2, [r3, #0]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	4013      	ands	r3, r2
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	f040 8095 	bne.w	8007bc0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d01e      	beq.n	8007ada <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007a9c:	2208      	movs	r2, #8
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	4413      	add	r3, r2
 8007aa2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f003 0307 	and.w	r3, r3, #7
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d015      	beq.n	8007ada <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f023 0307 	bic.w	r3, r3, #7
 8007ab4:	3308      	adds	r3, #8
 8007ab6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f003 0307 	and.w	r3, r3, #7
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d00b      	beq.n	8007ada <pvPortMalloc+0x6e>
	__asm volatile
 8007ac2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ac6:	f383 8811 	msr	BASEPRI, r3
 8007aca:	f3bf 8f6f 	isb	sy
 8007ace:	f3bf 8f4f 	dsb	sy
 8007ad2:	617b      	str	r3, [r7, #20]
}
 8007ad4:	bf00      	nop
 8007ad6:	bf00      	nop
 8007ad8:	e7fd      	b.n	8007ad6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d06f      	beq.n	8007bc0 <pvPortMalloc+0x154>
 8007ae0:	4b45      	ldr	r3, [pc, #276]	@ (8007bf8 <pvPortMalloc+0x18c>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	687a      	ldr	r2, [r7, #4]
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	d86a      	bhi.n	8007bc0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007aea:	4b44      	ldr	r3, [pc, #272]	@ (8007bfc <pvPortMalloc+0x190>)
 8007aec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007aee:	4b43      	ldr	r3, [pc, #268]	@ (8007bfc <pvPortMalloc+0x190>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007af4:	e004      	b.n	8007b00 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007af8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b02:	685b      	ldr	r3, [r3, #4]
 8007b04:	687a      	ldr	r2, [r7, #4]
 8007b06:	429a      	cmp	r2, r3
 8007b08:	d903      	bls.n	8007b12 <pvPortMalloc+0xa6>
 8007b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d1f1      	bne.n	8007af6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007b12:	4b37      	ldr	r3, [pc, #220]	@ (8007bf0 <pvPortMalloc+0x184>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b18:	429a      	cmp	r2, r3
 8007b1a:	d051      	beq.n	8007bc0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007b1c:	6a3b      	ldr	r3, [r7, #32]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	2208      	movs	r2, #8
 8007b22:	4413      	add	r3, r2
 8007b24:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b28:	681a      	ldr	r2, [r3, #0]
 8007b2a:	6a3b      	ldr	r3, [r7, #32]
 8007b2c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b30:	685a      	ldr	r2, [r3, #4]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	1ad2      	subs	r2, r2, r3
 8007b36:	2308      	movs	r3, #8
 8007b38:	005b      	lsls	r3, r3, #1
 8007b3a:	429a      	cmp	r2, r3
 8007b3c:	d920      	bls.n	8007b80 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007b3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	4413      	add	r3, r2
 8007b44:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b46:	69bb      	ldr	r3, [r7, #24]
 8007b48:	f003 0307 	and.w	r3, r3, #7
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d00b      	beq.n	8007b68 <pvPortMalloc+0xfc>
	__asm volatile
 8007b50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b54:	f383 8811 	msr	BASEPRI, r3
 8007b58:	f3bf 8f6f 	isb	sy
 8007b5c:	f3bf 8f4f 	dsb	sy
 8007b60:	613b      	str	r3, [r7, #16]
}
 8007b62:	bf00      	nop
 8007b64:	bf00      	nop
 8007b66:	e7fd      	b.n	8007b64 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b6a:	685a      	ldr	r2, [r3, #4]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	1ad2      	subs	r2, r2, r3
 8007b70:	69bb      	ldr	r3, [r7, #24]
 8007b72:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b76:	687a      	ldr	r2, [r7, #4]
 8007b78:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007b7a:	69b8      	ldr	r0, [r7, #24]
 8007b7c:	f000 f90a 	bl	8007d94 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007b80:	4b1d      	ldr	r3, [pc, #116]	@ (8007bf8 <pvPortMalloc+0x18c>)
 8007b82:	681a      	ldr	r2, [r3, #0]
 8007b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b86:	685b      	ldr	r3, [r3, #4]
 8007b88:	1ad3      	subs	r3, r2, r3
 8007b8a:	4a1b      	ldr	r2, [pc, #108]	@ (8007bf8 <pvPortMalloc+0x18c>)
 8007b8c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007b8e:	4b1a      	ldr	r3, [pc, #104]	@ (8007bf8 <pvPortMalloc+0x18c>)
 8007b90:	681a      	ldr	r2, [r3, #0]
 8007b92:	4b1b      	ldr	r3, [pc, #108]	@ (8007c00 <pvPortMalloc+0x194>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	429a      	cmp	r2, r3
 8007b98:	d203      	bcs.n	8007ba2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007b9a:	4b17      	ldr	r3, [pc, #92]	@ (8007bf8 <pvPortMalloc+0x18c>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4a18      	ldr	r2, [pc, #96]	@ (8007c00 <pvPortMalloc+0x194>)
 8007ba0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ba4:	685a      	ldr	r2, [r3, #4]
 8007ba6:	4b13      	ldr	r3, [pc, #76]	@ (8007bf4 <pvPortMalloc+0x188>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	431a      	orrs	r2, r3
 8007bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007bb6:	4b13      	ldr	r3, [pc, #76]	@ (8007c04 <pvPortMalloc+0x198>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	3301      	adds	r3, #1
 8007bbc:	4a11      	ldr	r2, [pc, #68]	@ (8007c04 <pvPortMalloc+0x198>)
 8007bbe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007bc0:	f7fe f980 	bl	8005ec4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007bc4:	69fb      	ldr	r3, [r7, #28]
 8007bc6:	f003 0307 	and.w	r3, r3, #7
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d00b      	beq.n	8007be6 <pvPortMalloc+0x17a>
	__asm volatile
 8007bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bd2:	f383 8811 	msr	BASEPRI, r3
 8007bd6:	f3bf 8f6f 	isb	sy
 8007bda:	f3bf 8f4f 	dsb	sy
 8007bde:	60fb      	str	r3, [r7, #12]
}
 8007be0:	bf00      	nop
 8007be2:	bf00      	nop
 8007be4:	e7fd      	b.n	8007be2 <pvPortMalloc+0x176>
	return pvReturn;
 8007be6:	69fb      	ldr	r3, [r7, #28]
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	3728      	adds	r7, #40	@ 0x28
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}
 8007bf0:	20004ccc 	.word	0x20004ccc
 8007bf4:	20004ce0 	.word	0x20004ce0
 8007bf8:	20004cd0 	.word	0x20004cd0
 8007bfc:	20004cc4 	.word	0x20004cc4
 8007c00:	20004cd4 	.word	0x20004cd4
 8007c04:	20004cd8 	.word	0x20004cd8

08007c08 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b086      	sub	sp, #24
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d04f      	beq.n	8007cba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007c1a:	2308      	movs	r3, #8
 8007c1c:	425b      	negs	r3, r3
 8007c1e:	697a      	ldr	r2, [r7, #20]
 8007c20:	4413      	add	r3, r2
 8007c22:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007c28:	693b      	ldr	r3, [r7, #16]
 8007c2a:	685a      	ldr	r2, [r3, #4]
 8007c2c:	4b25      	ldr	r3, [pc, #148]	@ (8007cc4 <vPortFree+0xbc>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4013      	ands	r3, r2
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d10b      	bne.n	8007c4e <vPortFree+0x46>
	__asm volatile
 8007c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c3a:	f383 8811 	msr	BASEPRI, r3
 8007c3e:	f3bf 8f6f 	isb	sy
 8007c42:	f3bf 8f4f 	dsb	sy
 8007c46:	60fb      	str	r3, [r7, #12]
}
 8007c48:	bf00      	nop
 8007c4a:	bf00      	nop
 8007c4c:	e7fd      	b.n	8007c4a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d00b      	beq.n	8007c6e <vPortFree+0x66>
	__asm volatile
 8007c56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c5a:	f383 8811 	msr	BASEPRI, r3
 8007c5e:	f3bf 8f6f 	isb	sy
 8007c62:	f3bf 8f4f 	dsb	sy
 8007c66:	60bb      	str	r3, [r7, #8]
}
 8007c68:	bf00      	nop
 8007c6a:	bf00      	nop
 8007c6c:	e7fd      	b.n	8007c6a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007c6e:	693b      	ldr	r3, [r7, #16]
 8007c70:	685a      	ldr	r2, [r3, #4]
 8007c72:	4b14      	ldr	r3, [pc, #80]	@ (8007cc4 <vPortFree+0xbc>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4013      	ands	r3, r2
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d01e      	beq.n	8007cba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d11a      	bne.n	8007cba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007c84:	693b      	ldr	r3, [r7, #16]
 8007c86:	685a      	ldr	r2, [r3, #4]
 8007c88:	4b0e      	ldr	r3, [pc, #56]	@ (8007cc4 <vPortFree+0xbc>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	43db      	mvns	r3, r3
 8007c8e:	401a      	ands	r2, r3
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007c94:	f7fe f908 	bl	8005ea8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	685a      	ldr	r2, [r3, #4]
 8007c9c:	4b0a      	ldr	r3, [pc, #40]	@ (8007cc8 <vPortFree+0xc0>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4413      	add	r3, r2
 8007ca2:	4a09      	ldr	r2, [pc, #36]	@ (8007cc8 <vPortFree+0xc0>)
 8007ca4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007ca6:	6938      	ldr	r0, [r7, #16]
 8007ca8:	f000 f874 	bl	8007d94 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007cac:	4b07      	ldr	r3, [pc, #28]	@ (8007ccc <vPortFree+0xc4>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	3301      	adds	r3, #1
 8007cb2:	4a06      	ldr	r2, [pc, #24]	@ (8007ccc <vPortFree+0xc4>)
 8007cb4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007cb6:	f7fe f905 	bl	8005ec4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007cba:	bf00      	nop
 8007cbc:	3718      	adds	r7, #24
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}
 8007cc2:	bf00      	nop
 8007cc4:	20004ce0 	.word	0x20004ce0
 8007cc8:	20004cd0 	.word	0x20004cd0
 8007ccc:	20004cdc 	.word	0x20004cdc

08007cd0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b085      	sub	sp, #20
 8007cd4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007cd6:	f643 33ff 	movw	r3, #15359	@ 0x3bff
 8007cda:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007cdc:	4b27      	ldr	r3, [pc, #156]	@ (8007d7c <prvHeapInit+0xac>)
 8007cde:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f003 0307 	and.w	r3, r3, #7
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d00c      	beq.n	8007d04 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	3307      	adds	r3, #7
 8007cee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	f023 0307 	bic.w	r3, r3, #7
 8007cf6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007cf8:	68ba      	ldr	r2, [r7, #8]
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	1ad3      	subs	r3, r2, r3
 8007cfe:	4a1f      	ldr	r2, [pc, #124]	@ (8007d7c <prvHeapInit+0xac>)
 8007d00:	4413      	add	r3, r2
 8007d02:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007d08:	4a1d      	ldr	r2, [pc, #116]	@ (8007d80 <prvHeapInit+0xb0>)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007d0e:	4b1c      	ldr	r3, [pc, #112]	@ (8007d80 <prvHeapInit+0xb0>)
 8007d10:	2200      	movs	r2, #0
 8007d12:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	68ba      	ldr	r2, [r7, #8]
 8007d18:	4413      	add	r3, r2
 8007d1a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007d1c:	2208      	movs	r2, #8
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	1a9b      	subs	r3, r3, r2
 8007d22:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f023 0307 	bic.w	r3, r3, #7
 8007d2a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	4a15      	ldr	r2, [pc, #84]	@ (8007d84 <prvHeapInit+0xb4>)
 8007d30:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007d32:	4b14      	ldr	r3, [pc, #80]	@ (8007d84 <prvHeapInit+0xb4>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	2200      	movs	r2, #0
 8007d38:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007d3a:	4b12      	ldr	r3, [pc, #72]	@ (8007d84 <prvHeapInit+0xb4>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	68fa      	ldr	r2, [r7, #12]
 8007d4a:	1ad2      	subs	r2, r2, r3
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007d50:	4b0c      	ldr	r3, [pc, #48]	@ (8007d84 <prvHeapInit+0xb4>)
 8007d52:	681a      	ldr	r2, [r3, #0]
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	685b      	ldr	r3, [r3, #4]
 8007d5c:	4a0a      	ldr	r2, [pc, #40]	@ (8007d88 <prvHeapInit+0xb8>)
 8007d5e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	4a09      	ldr	r2, [pc, #36]	@ (8007d8c <prvHeapInit+0xbc>)
 8007d66:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007d68:	4b09      	ldr	r3, [pc, #36]	@ (8007d90 <prvHeapInit+0xc0>)
 8007d6a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007d6e:	601a      	str	r2, [r3, #0]
}
 8007d70:	bf00      	nop
 8007d72:	3714      	adds	r7, #20
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr
 8007d7c:	200010c4 	.word	0x200010c4
 8007d80:	20004cc4 	.word	0x20004cc4
 8007d84:	20004ccc 	.word	0x20004ccc
 8007d88:	20004cd4 	.word	0x20004cd4
 8007d8c:	20004cd0 	.word	0x20004cd0
 8007d90:	20004ce0 	.word	0x20004ce0

08007d94 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007d94:	b480      	push	{r7}
 8007d96:	b085      	sub	sp, #20
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007d9c:	4b28      	ldr	r3, [pc, #160]	@ (8007e40 <prvInsertBlockIntoFreeList+0xac>)
 8007d9e:	60fb      	str	r3, [r7, #12]
 8007da0:	e002      	b.n	8007da8 <prvInsertBlockIntoFreeList+0x14>
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	60fb      	str	r3, [r7, #12]
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	687a      	ldr	r2, [r7, #4]
 8007dae:	429a      	cmp	r2, r3
 8007db0:	d8f7      	bhi.n	8007da2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	68ba      	ldr	r2, [r7, #8]
 8007dbc:	4413      	add	r3, r2
 8007dbe:	687a      	ldr	r2, [r7, #4]
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d108      	bne.n	8007dd6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	685a      	ldr	r2, [r3, #4]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	441a      	add	r2, r3
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	68ba      	ldr	r2, [r7, #8]
 8007de0:	441a      	add	r2, r3
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	429a      	cmp	r2, r3
 8007de8:	d118      	bne.n	8007e1c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681a      	ldr	r2, [r3, #0]
 8007dee:	4b15      	ldr	r3, [pc, #84]	@ (8007e44 <prvInsertBlockIntoFreeList+0xb0>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	429a      	cmp	r2, r3
 8007df4:	d00d      	beq.n	8007e12 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	685a      	ldr	r2, [r3, #4]
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	441a      	add	r2, r3
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	681a      	ldr	r2, [r3, #0]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	601a      	str	r2, [r3, #0]
 8007e10:	e008      	b.n	8007e24 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007e12:	4b0c      	ldr	r3, [pc, #48]	@ (8007e44 <prvInsertBlockIntoFreeList+0xb0>)
 8007e14:	681a      	ldr	r2, [r3, #0]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	601a      	str	r2, [r3, #0]
 8007e1a:	e003      	b.n	8007e24 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681a      	ldr	r2, [r3, #0]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007e24:	68fa      	ldr	r2, [r7, #12]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	429a      	cmp	r2, r3
 8007e2a:	d002      	beq.n	8007e32 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	687a      	ldr	r2, [r7, #4]
 8007e30:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e32:	bf00      	nop
 8007e34:	3714      	adds	r7, #20
 8007e36:	46bd      	mov	sp, r7
 8007e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3c:	4770      	bx	lr
 8007e3e:	bf00      	nop
 8007e40:	20004cc4 	.word	0x20004cc4
 8007e44:	20004ccc 	.word	0x20004ccc

08007e48 <swapfunc>:
 8007e48:	2b02      	cmp	r3, #2
 8007e4a:	b510      	push	{r4, lr}
 8007e4c:	d00a      	beq.n	8007e64 <swapfunc+0x1c>
 8007e4e:	0892      	lsrs	r2, r2, #2
 8007e50:	3a01      	subs	r2, #1
 8007e52:	6803      	ldr	r3, [r0, #0]
 8007e54:	680c      	ldr	r4, [r1, #0]
 8007e56:	f840 4b04 	str.w	r4, [r0], #4
 8007e5a:	2a00      	cmp	r2, #0
 8007e5c:	f841 3b04 	str.w	r3, [r1], #4
 8007e60:	dcf6      	bgt.n	8007e50 <swapfunc+0x8>
 8007e62:	bd10      	pop	{r4, pc}
 8007e64:	4402      	add	r2, r0
 8007e66:	780c      	ldrb	r4, [r1, #0]
 8007e68:	7803      	ldrb	r3, [r0, #0]
 8007e6a:	f800 4b01 	strb.w	r4, [r0], #1
 8007e6e:	f801 3b01 	strb.w	r3, [r1], #1
 8007e72:	1a13      	subs	r3, r2, r0
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	dcf6      	bgt.n	8007e66 <swapfunc+0x1e>
 8007e78:	e7f3      	b.n	8007e62 <swapfunc+0x1a>

08007e7a <med3.constprop.0>:
 8007e7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e7c:	460f      	mov	r7, r1
 8007e7e:	4616      	mov	r6, r2
 8007e80:	4604      	mov	r4, r0
 8007e82:	461d      	mov	r5, r3
 8007e84:	4798      	blx	r3
 8007e86:	2800      	cmp	r0, #0
 8007e88:	4631      	mov	r1, r6
 8007e8a:	4638      	mov	r0, r7
 8007e8c:	da0c      	bge.n	8007ea8 <med3.constprop.0+0x2e>
 8007e8e:	47a8      	blx	r5
 8007e90:	2800      	cmp	r0, #0
 8007e92:	da02      	bge.n	8007e9a <med3.constprop.0+0x20>
 8007e94:	463c      	mov	r4, r7
 8007e96:	4620      	mov	r0, r4
 8007e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e9a:	4631      	mov	r1, r6
 8007e9c:	4620      	mov	r0, r4
 8007e9e:	47a8      	blx	r5
 8007ea0:	2800      	cmp	r0, #0
 8007ea2:	daf8      	bge.n	8007e96 <med3.constprop.0+0x1c>
 8007ea4:	4634      	mov	r4, r6
 8007ea6:	e7f6      	b.n	8007e96 <med3.constprop.0+0x1c>
 8007ea8:	47a8      	blx	r5
 8007eaa:	2800      	cmp	r0, #0
 8007eac:	dcf2      	bgt.n	8007e94 <med3.constprop.0+0x1a>
 8007eae:	4631      	mov	r1, r6
 8007eb0:	4620      	mov	r0, r4
 8007eb2:	47a8      	blx	r5
 8007eb4:	2800      	cmp	r0, #0
 8007eb6:	daf5      	bge.n	8007ea4 <med3.constprop.0+0x2a>
 8007eb8:	e7ed      	b.n	8007e96 <med3.constprop.0+0x1c>

08007eba <qsort>:
 8007eba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ebe:	b095      	sub	sp, #84	@ 0x54
 8007ec0:	4607      	mov	r7, r0
 8007ec2:	9300      	str	r3, [sp, #0]
 8007ec4:	ea40 0302 	orr.w	r3, r0, r2
 8007ec8:	079b      	lsls	r3, r3, #30
 8007eca:	4615      	mov	r5, r2
 8007ecc:	d118      	bne.n	8007f00 <qsort+0x46>
 8007ece:	f1b2 0804 	subs.w	r8, r2, #4
 8007ed2:	bf18      	it	ne
 8007ed4:	f04f 0801 	movne.w	r8, #1
 8007ed8:	2300      	movs	r3, #0
 8007eda:	9301      	str	r3, [sp, #4]
 8007edc:	fb05 f401 	mul.w	r4, r5, r1
 8007ee0:	193b      	adds	r3, r7, r4
 8007ee2:	2906      	cmp	r1, #6
 8007ee4:	eb07 0b05 	add.w	fp, r7, r5
 8007ee8:	9302      	str	r3, [sp, #8]
 8007eea:	d828      	bhi.n	8007f3e <qsort+0x84>
 8007eec:	9b02      	ldr	r3, [sp, #8]
 8007eee:	459b      	cmp	fp, r3
 8007ef0:	d310      	bcc.n	8007f14 <qsort+0x5a>
 8007ef2:	9b01      	ldr	r3, [sp, #4]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	f040 8117 	bne.w	8008128 <qsort+0x26e>
 8007efa:	b015      	add	sp, #84	@ 0x54
 8007efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f00:	f04f 0802 	mov.w	r8, #2
 8007f04:	e7e8      	b.n	8007ed8 <qsort+0x1e>
 8007f06:	4643      	mov	r3, r8
 8007f08:	462a      	mov	r2, r5
 8007f0a:	4631      	mov	r1, r6
 8007f0c:	4620      	mov	r0, r4
 8007f0e:	f7ff ff9b 	bl	8007e48 <swapfunc>
 8007f12:	e00f      	b.n	8007f34 <qsort+0x7a>
 8007f14:	465c      	mov	r4, fp
 8007f16:	e00e      	b.n	8007f36 <qsort+0x7c>
 8007f18:	1b66      	subs	r6, r4, r5
 8007f1a:	9b00      	ldr	r3, [sp, #0]
 8007f1c:	4621      	mov	r1, r4
 8007f1e:	4630      	mov	r0, r6
 8007f20:	4798      	blx	r3
 8007f22:	2800      	cmp	r0, #0
 8007f24:	dd09      	ble.n	8007f3a <qsort+0x80>
 8007f26:	f1b8 0f00 	cmp.w	r8, #0
 8007f2a:	d1ec      	bne.n	8007f06 <qsort+0x4c>
 8007f2c:	6823      	ldr	r3, [r4, #0]
 8007f2e:	6832      	ldr	r2, [r6, #0]
 8007f30:	6022      	str	r2, [r4, #0]
 8007f32:	6033      	str	r3, [r6, #0]
 8007f34:	4634      	mov	r4, r6
 8007f36:	42a7      	cmp	r7, r4
 8007f38:	d3ee      	bcc.n	8007f18 <qsort+0x5e>
 8007f3a:	44ab      	add	fp, r5
 8007f3c:	e7d6      	b.n	8007eec <qsort+0x32>
 8007f3e:	ea4f 0951 	mov.w	r9, r1, lsr #1
 8007f42:	1b64      	subs	r4, r4, r5
 8007f44:	2907      	cmp	r1, #7
 8007f46:	fb05 7909 	mla	r9, r5, r9, r7
 8007f4a:	443c      	add	r4, r7
 8007f4c:	d021      	beq.n	8007f92 <qsort+0xd8>
 8007f4e:	2928      	cmp	r1, #40	@ 0x28
 8007f50:	d944      	bls.n	8007fdc <qsort+0x122>
 8007f52:	08ce      	lsrs	r6, r1, #3
 8007f54:	436e      	muls	r6, r5
 8007f56:	9b00      	ldr	r3, [sp, #0]
 8007f58:	eb07 0246 	add.w	r2, r7, r6, lsl #1
 8007f5c:	19b9      	adds	r1, r7, r6
 8007f5e:	4638      	mov	r0, r7
 8007f60:	f7ff ff8b 	bl	8007e7a <med3.constprop.0>
 8007f64:	4649      	mov	r1, r9
 8007f66:	eb09 0206 	add.w	r2, r9, r6
 8007f6a:	9b00      	ldr	r3, [sp, #0]
 8007f6c:	4682      	mov	sl, r0
 8007f6e:	1b88      	subs	r0, r1, r6
 8007f70:	f7ff ff83 	bl	8007e7a <med3.constprop.0>
 8007f74:	4622      	mov	r2, r4
 8007f76:	9b00      	ldr	r3, [sp, #0]
 8007f78:	4681      	mov	r9, r0
 8007f7a:	1ba1      	subs	r1, r4, r6
 8007f7c:	eba4 0046 	sub.w	r0, r4, r6, lsl #1
 8007f80:	f7ff ff7b 	bl	8007e7a <med3.constprop.0>
 8007f84:	4602      	mov	r2, r0
 8007f86:	4649      	mov	r1, r9
 8007f88:	9b00      	ldr	r3, [sp, #0]
 8007f8a:	4650      	mov	r0, sl
 8007f8c:	f7ff ff75 	bl	8007e7a <med3.constprop.0>
 8007f90:	4681      	mov	r9, r0
 8007f92:	f1b8 0f00 	cmp.w	r8, #0
 8007f96:	d124      	bne.n	8007fe2 <qsort+0x128>
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	f8d9 2000 	ldr.w	r2, [r9]
 8007f9e:	603a      	str	r2, [r7, #0]
 8007fa0:	f8c9 3000 	str.w	r3, [r9]
 8007fa4:	46d9      	mov	r9, fp
 8007fa6:	46a2      	mov	sl, r4
 8007fa8:	465e      	mov	r6, fp
 8007faa:	2300      	movs	r3, #0
 8007fac:	45a1      	cmp	r9, r4
 8007fae:	d836      	bhi.n	800801e <qsort+0x164>
 8007fb0:	9303      	str	r3, [sp, #12]
 8007fb2:	4639      	mov	r1, r7
 8007fb4:	9b00      	ldr	r3, [sp, #0]
 8007fb6:	4648      	mov	r0, r9
 8007fb8:	4798      	blx	r3
 8007fba:	2800      	cmp	r0, #0
 8007fbc:	9b03      	ldr	r3, [sp, #12]
 8007fbe:	dc2c      	bgt.n	800801a <qsort+0x160>
 8007fc0:	d10a      	bne.n	8007fd8 <qsort+0x11e>
 8007fc2:	f1b8 0f00 	cmp.w	r8, #0
 8007fc6:	d113      	bne.n	8007ff0 <qsort+0x136>
 8007fc8:	6833      	ldr	r3, [r6, #0]
 8007fca:	f8d9 2000 	ldr.w	r2, [r9]
 8007fce:	6032      	str	r2, [r6, #0]
 8007fd0:	f8c9 3000 	str.w	r3, [r9]
 8007fd4:	442e      	add	r6, r5
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	44a9      	add	r9, r5
 8007fda:	e7e7      	b.n	8007fac <qsort+0xf2>
 8007fdc:	4622      	mov	r2, r4
 8007fde:	46ba      	mov	sl, r7
 8007fe0:	e7d1      	b.n	8007f86 <qsort+0xcc>
 8007fe2:	4643      	mov	r3, r8
 8007fe4:	462a      	mov	r2, r5
 8007fe6:	4649      	mov	r1, r9
 8007fe8:	4638      	mov	r0, r7
 8007fea:	f7ff ff2d 	bl	8007e48 <swapfunc>
 8007fee:	e7d9      	b.n	8007fa4 <qsort+0xea>
 8007ff0:	4643      	mov	r3, r8
 8007ff2:	462a      	mov	r2, r5
 8007ff4:	4649      	mov	r1, r9
 8007ff6:	4630      	mov	r0, r6
 8007ff8:	f7ff ff26 	bl	8007e48 <swapfunc>
 8007ffc:	e7ea      	b.n	8007fd4 <qsort+0x11a>
 8007ffe:	d10b      	bne.n	8008018 <qsort+0x15e>
 8008000:	f1b8 0f00 	cmp.w	r8, #0
 8008004:	d113      	bne.n	800802e <qsort+0x174>
 8008006:	6823      	ldr	r3, [r4, #0]
 8008008:	f8da 2000 	ldr.w	r2, [sl]
 800800c:	6022      	str	r2, [r4, #0]
 800800e:	f8ca 3000 	str.w	r3, [sl]
 8008012:	ebaa 0a05 	sub.w	sl, sl, r5
 8008016:	2301      	movs	r3, #1
 8008018:	1b64      	subs	r4, r4, r5
 800801a:	45a1      	cmp	r9, r4
 800801c:	d90e      	bls.n	800803c <qsort+0x182>
 800801e:	2b00      	cmp	r3, #0
 8008020:	d140      	bne.n	80080a4 <qsort+0x1ea>
 8008022:	9b02      	ldr	r3, [sp, #8]
 8008024:	459b      	cmp	fp, r3
 8008026:	f4bf af64 	bcs.w	8007ef2 <qsort+0x38>
 800802a:	465c      	mov	r4, fp
 800802c:	e036      	b.n	800809c <qsort+0x1e2>
 800802e:	4643      	mov	r3, r8
 8008030:	462a      	mov	r2, r5
 8008032:	4651      	mov	r1, sl
 8008034:	4620      	mov	r0, r4
 8008036:	f7ff ff07 	bl	8007e48 <swapfunc>
 800803a:	e7ea      	b.n	8008012 <qsort+0x158>
 800803c:	9303      	str	r3, [sp, #12]
 800803e:	4639      	mov	r1, r7
 8008040:	9b00      	ldr	r3, [sp, #0]
 8008042:	4620      	mov	r0, r4
 8008044:	4798      	blx	r3
 8008046:	2800      	cmp	r0, #0
 8008048:	9b03      	ldr	r3, [sp, #12]
 800804a:	dad8      	bge.n	8007ffe <qsort+0x144>
 800804c:	f1b8 0f00 	cmp.w	r8, #0
 8008050:	d107      	bne.n	8008062 <qsort+0x1a8>
 8008052:	f8d9 3000 	ldr.w	r3, [r9]
 8008056:	6822      	ldr	r2, [r4, #0]
 8008058:	f8c9 2000 	str.w	r2, [r9]
 800805c:	6023      	str	r3, [r4, #0]
 800805e:	1b64      	subs	r4, r4, r5
 8008060:	e7b9      	b.n	8007fd6 <qsort+0x11c>
 8008062:	4643      	mov	r3, r8
 8008064:	462a      	mov	r2, r5
 8008066:	4621      	mov	r1, r4
 8008068:	4648      	mov	r0, r9
 800806a:	f7ff feed 	bl	8007e48 <swapfunc>
 800806e:	e7f6      	b.n	800805e <qsort+0x1a4>
 8008070:	4643      	mov	r3, r8
 8008072:	462a      	mov	r2, r5
 8008074:	4631      	mov	r1, r6
 8008076:	4620      	mov	r0, r4
 8008078:	f7ff fee6 	bl	8007e48 <swapfunc>
 800807c:	e00d      	b.n	800809a <qsort+0x1e0>
 800807e:	1b66      	subs	r6, r4, r5
 8008080:	9b00      	ldr	r3, [sp, #0]
 8008082:	4621      	mov	r1, r4
 8008084:	4630      	mov	r0, r6
 8008086:	4798      	blx	r3
 8008088:	2800      	cmp	r0, #0
 800808a:	dd09      	ble.n	80080a0 <qsort+0x1e6>
 800808c:	f1b8 0f00 	cmp.w	r8, #0
 8008090:	d1ee      	bne.n	8008070 <qsort+0x1b6>
 8008092:	6823      	ldr	r3, [r4, #0]
 8008094:	6832      	ldr	r2, [r6, #0]
 8008096:	6022      	str	r2, [r4, #0]
 8008098:	6033      	str	r3, [r6, #0]
 800809a:	4634      	mov	r4, r6
 800809c:	42a7      	cmp	r7, r4
 800809e:	d3ee      	bcc.n	800807e <qsort+0x1c4>
 80080a0:	44ab      	add	fp, r5
 80080a2:	e7be      	b.n	8008022 <qsort+0x168>
 80080a4:	eba9 0b06 	sub.w	fp, r9, r6
 80080a8:	1bf2      	subs	r2, r6, r7
 80080aa:	455a      	cmp	r2, fp
 80080ac:	bfa8      	it	ge
 80080ae:	465a      	movge	r2, fp
 80080b0:	b12a      	cbz	r2, 80080be <qsort+0x204>
 80080b2:	4643      	mov	r3, r8
 80080b4:	eba9 0102 	sub.w	r1, r9, r2
 80080b8:	4638      	mov	r0, r7
 80080ba:	f7ff fec5 	bl	8007e48 <swapfunc>
 80080be:	9b02      	ldr	r3, [sp, #8]
 80080c0:	eba3 020a 	sub.w	r2, r3, sl
 80080c4:	ebaa 0404 	sub.w	r4, sl, r4
 80080c8:	1b52      	subs	r2, r2, r5
 80080ca:	42a2      	cmp	r2, r4
 80080cc:	bf28      	it	cs
 80080ce:	4622      	movcs	r2, r4
 80080d0:	b12a      	cbz	r2, 80080de <qsort+0x224>
 80080d2:	9902      	ldr	r1, [sp, #8]
 80080d4:	4643      	mov	r3, r8
 80080d6:	1a89      	subs	r1, r1, r2
 80080d8:	4648      	mov	r0, r9
 80080da:	f7ff feb5 	bl	8007e48 <swapfunc>
 80080de:	9b02      	ldr	r3, [sp, #8]
 80080e0:	455c      	cmp	r4, fp
 80080e2:	eba3 0604 	sub.w	r6, r3, r4
 80080e6:	d805      	bhi.n	80080f4 <qsort+0x23a>
 80080e8:	4623      	mov	r3, r4
 80080ea:	465c      	mov	r4, fp
 80080ec:	469b      	mov	fp, r3
 80080ee:	4633      	mov	r3, r6
 80080f0:	463e      	mov	r6, r7
 80080f2:	461f      	mov	r7, r3
 80080f4:	45ab      	cmp	fp, r5
 80080f6:	d920      	bls.n	800813a <qsort+0x280>
 80080f8:	fbbb f1f5 	udiv	r1, fp, r5
 80080fc:	9b01      	ldr	r3, [sp, #4]
 80080fe:	2b07      	cmp	r3, #7
 8008100:	d80b      	bhi.n	800811a <qsort+0x260>
 8008102:	fbb4 f4f5 	udiv	r4, r4, r5
 8008106:	aa14      	add	r2, sp, #80	@ 0x50
 8008108:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800810c:	f843 6c40 	str.w	r6, [r3, #-64]
 8008110:	f843 4c3c 	str.w	r4, [r3, #-60]
 8008114:	9b01      	ldr	r3, [sp, #4]
 8008116:	3301      	adds	r3, #1
 8008118:	e6df      	b.n	8007eda <qsort+0x20>
 800811a:	9b00      	ldr	r3, [sp, #0]
 800811c:	462a      	mov	r2, r5
 800811e:	4638      	mov	r0, r7
 8008120:	f7ff fecb 	bl	8007eba <qsort>
 8008124:	42ac      	cmp	r4, r5
 8008126:	d80b      	bhi.n	8008140 <qsort+0x286>
 8008128:	9b01      	ldr	r3, [sp, #4]
 800812a:	aa14      	add	r2, sp, #80	@ 0x50
 800812c:	3b01      	subs	r3, #1
 800812e:	9301      	str	r3, [sp, #4]
 8008130:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008134:	e953 7110 	ldrd	r7, r1, [r3, #-64]	@ 0x40
 8008138:	e6d0      	b.n	8007edc <qsort+0x22>
 800813a:	42ac      	cmp	r4, r5
 800813c:	f67f aed9 	bls.w	8007ef2 <qsort+0x38>
 8008140:	fbb4 f1f5 	udiv	r1, r4, r5
 8008144:	4637      	mov	r7, r6
 8008146:	e6c9      	b.n	8007edc <qsort+0x22>

08008148 <sniprintf>:
 8008148:	b40c      	push	{r2, r3}
 800814a:	b530      	push	{r4, r5, lr}
 800814c:	4b18      	ldr	r3, [pc, #96]	@ (80081b0 <sniprintf+0x68>)
 800814e:	1e0c      	subs	r4, r1, #0
 8008150:	681d      	ldr	r5, [r3, #0]
 8008152:	b09d      	sub	sp, #116	@ 0x74
 8008154:	da08      	bge.n	8008168 <sniprintf+0x20>
 8008156:	238b      	movs	r3, #139	@ 0x8b
 8008158:	602b      	str	r3, [r5, #0]
 800815a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800815e:	b01d      	add	sp, #116	@ 0x74
 8008160:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008164:	b002      	add	sp, #8
 8008166:	4770      	bx	lr
 8008168:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800816c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008170:	f04f 0300 	mov.w	r3, #0
 8008174:	931b      	str	r3, [sp, #108]	@ 0x6c
 8008176:	bf14      	ite	ne
 8008178:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800817c:	4623      	moveq	r3, r4
 800817e:	9304      	str	r3, [sp, #16]
 8008180:	9307      	str	r3, [sp, #28]
 8008182:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008186:	9002      	str	r0, [sp, #8]
 8008188:	9006      	str	r0, [sp, #24]
 800818a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800818e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008190:	ab21      	add	r3, sp, #132	@ 0x84
 8008192:	a902      	add	r1, sp, #8
 8008194:	4628      	mov	r0, r5
 8008196:	9301      	str	r3, [sp, #4]
 8008198:	f000 f952 	bl	8008440 <_svfiprintf_r>
 800819c:	1c43      	adds	r3, r0, #1
 800819e:	bfbc      	itt	lt
 80081a0:	238b      	movlt	r3, #139	@ 0x8b
 80081a2:	602b      	strlt	r3, [r5, #0]
 80081a4:	2c00      	cmp	r4, #0
 80081a6:	d0da      	beq.n	800815e <sniprintf+0x16>
 80081a8:	9b02      	ldr	r3, [sp, #8]
 80081aa:	2200      	movs	r2, #0
 80081ac:	701a      	strb	r2, [r3, #0]
 80081ae:	e7d6      	b.n	800815e <sniprintf+0x16>
 80081b0:	20000010 	.word	0x20000010

080081b4 <memset>:
 80081b4:	4402      	add	r2, r0
 80081b6:	4603      	mov	r3, r0
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d100      	bne.n	80081be <memset+0xa>
 80081bc:	4770      	bx	lr
 80081be:	f803 1b01 	strb.w	r1, [r3], #1
 80081c2:	e7f9      	b.n	80081b8 <memset+0x4>

080081c4 <__errno>:
 80081c4:	4b01      	ldr	r3, [pc, #4]	@ (80081cc <__errno+0x8>)
 80081c6:	6818      	ldr	r0, [r3, #0]
 80081c8:	4770      	bx	lr
 80081ca:	bf00      	nop
 80081cc:	20000010 	.word	0x20000010

080081d0 <__libc_init_array>:
 80081d0:	b570      	push	{r4, r5, r6, lr}
 80081d2:	4d0d      	ldr	r5, [pc, #52]	@ (8008208 <__libc_init_array+0x38>)
 80081d4:	4c0d      	ldr	r4, [pc, #52]	@ (800820c <__libc_init_array+0x3c>)
 80081d6:	1b64      	subs	r4, r4, r5
 80081d8:	10a4      	asrs	r4, r4, #2
 80081da:	2600      	movs	r6, #0
 80081dc:	42a6      	cmp	r6, r4
 80081de:	d109      	bne.n	80081f4 <__libc_init_array+0x24>
 80081e0:	4d0b      	ldr	r5, [pc, #44]	@ (8008210 <__libc_init_array+0x40>)
 80081e2:	4c0c      	ldr	r4, [pc, #48]	@ (8008214 <__libc_init_array+0x44>)
 80081e4:	f000 fcc2 	bl	8008b6c <_init>
 80081e8:	1b64      	subs	r4, r4, r5
 80081ea:	10a4      	asrs	r4, r4, #2
 80081ec:	2600      	movs	r6, #0
 80081ee:	42a6      	cmp	r6, r4
 80081f0:	d105      	bne.n	80081fe <__libc_init_array+0x2e>
 80081f2:	bd70      	pop	{r4, r5, r6, pc}
 80081f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80081f8:	4798      	blx	r3
 80081fa:	3601      	adds	r6, #1
 80081fc:	e7ee      	b.n	80081dc <__libc_init_array+0xc>
 80081fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8008202:	4798      	blx	r3
 8008204:	3601      	adds	r6, #1
 8008206:	e7f2      	b.n	80081ee <__libc_init_array+0x1e>
 8008208:	08008c8c 	.word	0x08008c8c
 800820c:	08008c8c 	.word	0x08008c8c
 8008210:	08008c8c 	.word	0x08008c8c
 8008214:	08008c90 	.word	0x08008c90

08008218 <__retarget_lock_acquire_recursive>:
 8008218:	4770      	bx	lr

0800821a <__retarget_lock_release_recursive>:
 800821a:	4770      	bx	lr

0800821c <_reclaim_reent>:
 800821c:	4b2d      	ldr	r3, [pc, #180]	@ (80082d4 <_reclaim_reent+0xb8>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4283      	cmp	r3, r0
 8008222:	b570      	push	{r4, r5, r6, lr}
 8008224:	4604      	mov	r4, r0
 8008226:	d053      	beq.n	80082d0 <_reclaim_reent+0xb4>
 8008228:	69c3      	ldr	r3, [r0, #28]
 800822a:	b31b      	cbz	r3, 8008274 <_reclaim_reent+0x58>
 800822c:	68db      	ldr	r3, [r3, #12]
 800822e:	b163      	cbz	r3, 800824a <_reclaim_reent+0x2e>
 8008230:	2500      	movs	r5, #0
 8008232:	69e3      	ldr	r3, [r4, #28]
 8008234:	68db      	ldr	r3, [r3, #12]
 8008236:	5959      	ldr	r1, [r3, r5]
 8008238:	b9b1      	cbnz	r1, 8008268 <_reclaim_reent+0x4c>
 800823a:	3504      	adds	r5, #4
 800823c:	2d80      	cmp	r5, #128	@ 0x80
 800823e:	d1f8      	bne.n	8008232 <_reclaim_reent+0x16>
 8008240:	69e3      	ldr	r3, [r4, #28]
 8008242:	4620      	mov	r0, r4
 8008244:	68d9      	ldr	r1, [r3, #12]
 8008246:	f000 f855 	bl	80082f4 <_free_r>
 800824a:	69e3      	ldr	r3, [r4, #28]
 800824c:	6819      	ldr	r1, [r3, #0]
 800824e:	b111      	cbz	r1, 8008256 <_reclaim_reent+0x3a>
 8008250:	4620      	mov	r0, r4
 8008252:	f000 f84f 	bl	80082f4 <_free_r>
 8008256:	69e3      	ldr	r3, [r4, #28]
 8008258:	689d      	ldr	r5, [r3, #8]
 800825a:	b15d      	cbz	r5, 8008274 <_reclaim_reent+0x58>
 800825c:	4629      	mov	r1, r5
 800825e:	4620      	mov	r0, r4
 8008260:	682d      	ldr	r5, [r5, #0]
 8008262:	f000 f847 	bl	80082f4 <_free_r>
 8008266:	e7f8      	b.n	800825a <_reclaim_reent+0x3e>
 8008268:	680e      	ldr	r6, [r1, #0]
 800826a:	4620      	mov	r0, r4
 800826c:	f000 f842 	bl	80082f4 <_free_r>
 8008270:	4631      	mov	r1, r6
 8008272:	e7e1      	b.n	8008238 <_reclaim_reent+0x1c>
 8008274:	6961      	ldr	r1, [r4, #20]
 8008276:	b111      	cbz	r1, 800827e <_reclaim_reent+0x62>
 8008278:	4620      	mov	r0, r4
 800827a:	f000 f83b 	bl	80082f4 <_free_r>
 800827e:	69e1      	ldr	r1, [r4, #28]
 8008280:	b111      	cbz	r1, 8008288 <_reclaim_reent+0x6c>
 8008282:	4620      	mov	r0, r4
 8008284:	f000 f836 	bl	80082f4 <_free_r>
 8008288:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800828a:	b111      	cbz	r1, 8008292 <_reclaim_reent+0x76>
 800828c:	4620      	mov	r0, r4
 800828e:	f000 f831 	bl	80082f4 <_free_r>
 8008292:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008294:	b111      	cbz	r1, 800829c <_reclaim_reent+0x80>
 8008296:	4620      	mov	r0, r4
 8008298:	f000 f82c 	bl	80082f4 <_free_r>
 800829c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800829e:	b111      	cbz	r1, 80082a6 <_reclaim_reent+0x8a>
 80082a0:	4620      	mov	r0, r4
 80082a2:	f000 f827 	bl	80082f4 <_free_r>
 80082a6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80082a8:	b111      	cbz	r1, 80082b0 <_reclaim_reent+0x94>
 80082aa:	4620      	mov	r0, r4
 80082ac:	f000 f822 	bl	80082f4 <_free_r>
 80082b0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80082b2:	b111      	cbz	r1, 80082ba <_reclaim_reent+0x9e>
 80082b4:	4620      	mov	r0, r4
 80082b6:	f000 f81d 	bl	80082f4 <_free_r>
 80082ba:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80082bc:	b111      	cbz	r1, 80082c4 <_reclaim_reent+0xa8>
 80082be:	4620      	mov	r0, r4
 80082c0:	f000 f818 	bl	80082f4 <_free_r>
 80082c4:	6a23      	ldr	r3, [r4, #32]
 80082c6:	b11b      	cbz	r3, 80082d0 <_reclaim_reent+0xb4>
 80082c8:	4620      	mov	r0, r4
 80082ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80082ce:	4718      	bx	r3
 80082d0:	bd70      	pop	{r4, r5, r6, pc}
 80082d2:	bf00      	nop
 80082d4:	20000010 	.word	0x20000010

080082d8 <memcpy>:
 80082d8:	440a      	add	r2, r1
 80082da:	4291      	cmp	r1, r2
 80082dc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80082e0:	d100      	bne.n	80082e4 <memcpy+0xc>
 80082e2:	4770      	bx	lr
 80082e4:	b510      	push	{r4, lr}
 80082e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80082ee:	4291      	cmp	r1, r2
 80082f0:	d1f9      	bne.n	80082e6 <memcpy+0xe>
 80082f2:	bd10      	pop	{r4, pc}

080082f4 <_free_r>:
 80082f4:	b538      	push	{r3, r4, r5, lr}
 80082f6:	4605      	mov	r5, r0
 80082f8:	2900      	cmp	r1, #0
 80082fa:	d041      	beq.n	8008380 <_free_r+0x8c>
 80082fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008300:	1f0c      	subs	r4, r1, #4
 8008302:	2b00      	cmp	r3, #0
 8008304:	bfb8      	it	lt
 8008306:	18e4      	addlt	r4, r4, r3
 8008308:	f000 fbc4 	bl	8008a94 <__malloc_lock>
 800830c:	4a1d      	ldr	r2, [pc, #116]	@ (8008384 <_free_r+0x90>)
 800830e:	6813      	ldr	r3, [r2, #0]
 8008310:	b933      	cbnz	r3, 8008320 <_free_r+0x2c>
 8008312:	6063      	str	r3, [r4, #4]
 8008314:	6014      	str	r4, [r2, #0]
 8008316:	4628      	mov	r0, r5
 8008318:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800831c:	f000 bbc0 	b.w	8008aa0 <__malloc_unlock>
 8008320:	42a3      	cmp	r3, r4
 8008322:	d908      	bls.n	8008336 <_free_r+0x42>
 8008324:	6820      	ldr	r0, [r4, #0]
 8008326:	1821      	adds	r1, r4, r0
 8008328:	428b      	cmp	r3, r1
 800832a:	bf01      	itttt	eq
 800832c:	6819      	ldreq	r1, [r3, #0]
 800832e:	685b      	ldreq	r3, [r3, #4]
 8008330:	1809      	addeq	r1, r1, r0
 8008332:	6021      	streq	r1, [r4, #0]
 8008334:	e7ed      	b.n	8008312 <_free_r+0x1e>
 8008336:	461a      	mov	r2, r3
 8008338:	685b      	ldr	r3, [r3, #4]
 800833a:	b10b      	cbz	r3, 8008340 <_free_r+0x4c>
 800833c:	42a3      	cmp	r3, r4
 800833e:	d9fa      	bls.n	8008336 <_free_r+0x42>
 8008340:	6811      	ldr	r1, [r2, #0]
 8008342:	1850      	adds	r0, r2, r1
 8008344:	42a0      	cmp	r0, r4
 8008346:	d10b      	bne.n	8008360 <_free_r+0x6c>
 8008348:	6820      	ldr	r0, [r4, #0]
 800834a:	4401      	add	r1, r0
 800834c:	1850      	adds	r0, r2, r1
 800834e:	4283      	cmp	r3, r0
 8008350:	6011      	str	r1, [r2, #0]
 8008352:	d1e0      	bne.n	8008316 <_free_r+0x22>
 8008354:	6818      	ldr	r0, [r3, #0]
 8008356:	685b      	ldr	r3, [r3, #4]
 8008358:	6053      	str	r3, [r2, #4]
 800835a:	4408      	add	r0, r1
 800835c:	6010      	str	r0, [r2, #0]
 800835e:	e7da      	b.n	8008316 <_free_r+0x22>
 8008360:	d902      	bls.n	8008368 <_free_r+0x74>
 8008362:	230c      	movs	r3, #12
 8008364:	602b      	str	r3, [r5, #0]
 8008366:	e7d6      	b.n	8008316 <_free_r+0x22>
 8008368:	6820      	ldr	r0, [r4, #0]
 800836a:	1821      	adds	r1, r4, r0
 800836c:	428b      	cmp	r3, r1
 800836e:	bf04      	itt	eq
 8008370:	6819      	ldreq	r1, [r3, #0]
 8008372:	685b      	ldreq	r3, [r3, #4]
 8008374:	6063      	str	r3, [r4, #4]
 8008376:	bf04      	itt	eq
 8008378:	1809      	addeq	r1, r1, r0
 800837a:	6021      	streq	r1, [r4, #0]
 800837c:	6054      	str	r4, [r2, #4]
 800837e:	e7ca      	b.n	8008316 <_free_r+0x22>
 8008380:	bd38      	pop	{r3, r4, r5, pc}
 8008382:	bf00      	nop
 8008384:	20004e28 	.word	0x20004e28

08008388 <__ssputs_r>:
 8008388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800838c:	688e      	ldr	r6, [r1, #8]
 800838e:	461f      	mov	r7, r3
 8008390:	42be      	cmp	r6, r7
 8008392:	680b      	ldr	r3, [r1, #0]
 8008394:	4682      	mov	sl, r0
 8008396:	460c      	mov	r4, r1
 8008398:	4690      	mov	r8, r2
 800839a:	d82d      	bhi.n	80083f8 <__ssputs_r+0x70>
 800839c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80083a0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80083a4:	d026      	beq.n	80083f4 <__ssputs_r+0x6c>
 80083a6:	6965      	ldr	r5, [r4, #20]
 80083a8:	6909      	ldr	r1, [r1, #16]
 80083aa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80083ae:	eba3 0901 	sub.w	r9, r3, r1
 80083b2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80083b6:	1c7b      	adds	r3, r7, #1
 80083b8:	444b      	add	r3, r9
 80083ba:	106d      	asrs	r5, r5, #1
 80083bc:	429d      	cmp	r5, r3
 80083be:	bf38      	it	cc
 80083c0:	461d      	movcc	r5, r3
 80083c2:	0553      	lsls	r3, r2, #21
 80083c4:	d527      	bpl.n	8008416 <__ssputs_r+0x8e>
 80083c6:	4629      	mov	r1, r5
 80083c8:	f000 f958 	bl	800867c <_malloc_r>
 80083cc:	4606      	mov	r6, r0
 80083ce:	b360      	cbz	r0, 800842a <__ssputs_r+0xa2>
 80083d0:	6921      	ldr	r1, [r4, #16]
 80083d2:	464a      	mov	r2, r9
 80083d4:	f7ff ff80 	bl	80082d8 <memcpy>
 80083d8:	89a3      	ldrh	r3, [r4, #12]
 80083da:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80083de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083e2:	81a3      	strh	r3, [r4, #12]
 80083e4:	6126      	str	r6, [r4, #16]
 80083e6:	6165      	str	r5, [r4, #20]
 80083e8:	444e      	add	r6, r9
 80083ea:	eba5 0509 	sub.w	r5, r5, r9
 80083ee:	6026      	str	r6, [r4, #0]
 80083f0:	60a5      	str	r5, [r4, #8]
 80083f2:	463e      	mov	r6, r7
 80083f4:	42be      	cmp	r6, r7
 80083f6:	d900      	bls.n	80083fa <__ssputs_r+0x72>
 80083f8:	463e      	mov	r6, r7
 80083fa:	6820      	ldr	r0, [r4, #0]
 80083fc:	4632      	mov	r2, r6
 80083fe:	4641      	mov	r1, r8
 8008400:	f000 fb82 	bl	8008b08 <memmove>
 8008404:	68a3      	ldr	r3, [r4, #8]
 8008406:	1b9b      	subs	r3, r3, r6
 8008408:	60a3      	str	r3, [r4, #8]
 800840a:	6823      	ldr	r3, [r4, #0]
 800840c:	4433      	add	r3, r6
 800840e:	6023      	str	r3, [r4, #0]
 8008410:	2000      	movs	r0, #0
 8008412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008416:	462a      	mov	r2, r5
 8008418:	f000 fb48 	bl	8008aac <_realloc_r>
 800841c:	4606      	mov	r6, r0
 800841e:	2800      	cmp	r0, #0
 8008420:	d1e0      	bne.n	80083e4 <__ssputs_r+0x5c>
 8008422:	6921      	ldr	r1, [r4, #16]
 8008424:	4650      	mov	r0, sl
 8008426:	f7ff ff65 	bl	80082f4 <_free_r>
 800842a:	230c      	movs	r3, #12
 800842c:	f8ca 3000 	str.w	r3, [sl]
 8008430:	89a3      	ldrh	r3, [r4, #12]
 8008432:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008436:	81a3      	strh	r3, [r4, #12]
 8008438:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800843c:	e7e9      	b.n	8008412 <__ssputs_r+0x8a>
	...

08008440 <_svfiprintf_r>:
 8008440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008444:	4698      	mov	r8, r3
 8008446:	898b      	ldrh	r3, [r1, #12]
 8008448:	061b      	lsls	r3, r3, #24
 800844a:	b09d      	sub	sp, #116	@ 0x74
 800844c:	4607      	mov	r7, r0
 800844e:	460d      	mov	r5, r1
 8008450:	4614      	mov	r4, r2
 8008452:	d510      	bpl.n	8008476 <_svfiprintf_r+0x36>
 8008454:	690b      	ldr	r3, [r1, #16]
 8008456:	b973      	cbnz	r3, 8008476 <_svfiprintf_r+0x36>
 8008458:	2140      	movs	r1, #64	@ 0x40
 800845a:	f000 f90f 	bl	800867c <_malloc_r>
 800845e:	6028      	str	r0, [r5, #0]
 8008460:	6128      	str	r0, [r5, #16]
 8008462:	b930      	cbnz	r0, 8008472 <_svfiprintf_r+0x32>
 8008464:	230c      	movs	r3, #12
 8008466:	603b      	str	r3, [r7, #0]
 8008468:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800846c:	b01d      	add	sp, #116	@ 0x74
 800846e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008472:	2340      	movs	r3, #64	@ 0x40
 8008474:	616b      	str	r3, [r5, #20]
 8008476:	2300      	movs	r3, #0
 8008478:	9309      	str	r3, [sp, #36]	@ 0x24
 800847a:	2320      	movs	r3, #32
 800847c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008480:	f8cd 800c 	str.w	r8, [sp, #12]
 8008484:	2330      	movs	r3, #48	@ 0x30
 8008486:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008624 <_svfiprintf_r+0x1e4>
 800848a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800848e:	f04f 0901 	mov.w	r9, #1
 8008492:	4623      	mov	r3, r4
 8008494:	469a      	mov	sl, r3
 8008496:	f813 2b01 	ldrb.w	r2, [r3], #1
 800849a:	b10a      	cbz	r2, 80084a0 <_svfiprintf_r+0x60>
 800849c:	2a25      	cmp	r2, #37	@ 0x25
 800849e:	d1f9      	bne.n	8008494 <_svfiprintf_r+0x54>
 80084a0:	ebba 0b04 	subs.w	fp, sl, r4
 80084a4:	d00b      	beq.n	80084be <_svfiprintf_r+0x7e>
 80084a6:	465b      	mov	r3, fp
 80084a8:	4622      	mov	r2, r4
 80084aa:	4629      	mov	r1, r5
 80084ac:	4638      	mov	r0, r7
 80084ae:	f7ff ff6b 	bl	8008388 <__ssputs_r>
 80084b2:	3001      	adds	r0, #1
 80084b4:	f000 80a7 	beq.w	8008606 <_svfiprintf_r+0x1c6>
 80084b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80084ba:	445a      	add	r2, fp
 80084bc:	9209      	str	r2, [sp, #36]	@ 0x24
 80084be:	f89a 3000 	ldrb.w	r3, [sl]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	f000 809f 	beq.w	8008606 <_svfiprintf_r+0x1c6>
 80084c8:	2300      	movs	r3, #0
 80084ca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80084ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80084d2:	f10a 0a01 	add.w	sl, sl, #1
 80084d6:	9304      	str	r3, [sp, #16]
 80084d8:	9307      	str	r3, [sp, #28]
 80084da:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80084de:	931a      	str	r3, [sp, #104]	@ 0x68
 80084e0:	4654      	mov	r4, sl
 80084e2:	2205      	movs	r2, #5
 80084e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084e8:	484e      	ldr	r0, [pc, #312]	@ (8008624 <_svfiprintf_r+0x1e4>)
 80084ea:	f7f7 fe79 	bl	80001e0 <memchr>
 80084ee:	9a04      	ldr	r2, [sp, #16]
 80084f0:	b9d8      	cbnz	r0, 800852a <_svfiprintf_r+0xea>
 80084f2:	06d0      	lsls	r0, r2, #27
 80084f4:	bf44      	itt	mi
 80084f6:	2320      	movmi	r3, #32
 80084f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80084fc:	0711      	lsls	r1, r2, #28
 80084fe:	bf44      	itt	mi
 8008500:	232b      	movmi	r3, #43	@ 0x2b
 8008502:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008506:	f89a 3000 	ldrb.w	r3, [sl]
 800850a:	2b2a      	cmp	r3, #42	@ 0x2a
 800850c:	d015      	beq.n	800853a <_svfiprintf_r+0xfa>
 800850e:	9a07      	ldr	r2, [sp, #28]
 8008510:	4654      	mov	r4, sl
 8008512:	2000      	movs	r0, #0
 8008514:	f04f 0c0a 	mov.w	ip, #10
 8008518:	4621      	mov	r1, r4
 800851a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800851e:	3b30      	subs	r3, #48	@ 0x30
 8008520:	2b09      	cmp	r3, #9
 8008522:	d94b      	bls.n	80085bc <_svfiprintf_r+0x17c>
 8008524:	b1b0      	cbz	r0, 8008554 <_svfiprintf_r+0x114>
 8008526:	9207      	str	r2, [sp, #28]
 8008528:	e014      	b.n	8008554 <_svfiprintf_r+0x114>
 800852a:	eba0 0308 	sub.w	r3, r0, r8
 800852e:	fa09 f303 	lsl.w	r3, r9, r3
 8008532:	4313      	orrs	r3, r2
 8008534:	9304      	str	r3, [sp, #16]
 8008536:	46a2      	mov	sl, r4
 8008538:	e7d2      	b.n	80084e0 <_svfiprintf_r+0xa0>
 800853a:	9b03      	ldr	r3, [sp, #12]
 800853c:	1d19      	adds	r1, r3, #4
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	9103      	str	r1, [sp, #12]
 8008542:	2b00      	cmp	r3, #0
 8008544:	bfbb      	ittet	lt
 8008546:	425b      	neglt	r3, r3
 8008548:	f042 0202 	orrlt.w	r2, r2, #2
 800854c:	9307      	strge	r3, [sp, #28]
 800854e:	9307      	strlt	r3, [sp, #28]
 8008550:	bfb8      	it	lt
 8008552:	9204      	strlt	r2, [sp, #16]
 8008554:	7823      	ldrb	r3, [r4, #0]
 8008556:	2b2e      	cmp	r3, #46	@ 0x2e
 8008558:	d10a      	bne.n	8008570 <_svfiprintf_r+0x130>
 800855a:	7863      	ldrb	r3, [r4, #1]
 800855c:	2b2a      	cmp	r3, #42	@ 0x2a
 800855e:	d132      	bne.n	80085c6 <_svfiprintf_r+0x186>
 8008560:	9b03      	ldr	r3, [sp, #12]
 8008562:	1d1a      	adds	r2, r3, #4
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	9203      	str	r2, [sp, #12]
 8008568:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800856c:	3402      	adds	r4, #2
 800856e:	9305      	str	r3, [sp, #20]
 8008570:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008634 <_svfiprintf_r+0x1f4>
 8008574:	7821      	ldrb	r1, [r4, #0]
 8008576:	2203      	movs	r2, #3
 8008578:	4650      	mov	r0, sl
 800857a:	f7f7 fe31 	bl	80001e0 <memchr>
 800857e:	b138      	cbz	r0, 8008590 <_svfiprintf_r+0x150>
 8008580:	9b04      	ldr	r3, [sp, #16]
 8008582:	eba0 000a 	sub.w	r0, r0, sl
 8008586:	2240      	movs	r2, #64	@ 0x40
 8008588:	4082      	lsls	r2, r0
 800858a:	4313      	orrs	r3, r2
 800858c:	3401      	adds	r4, #1
 800858e:	9304      	str	r3, [sp, #16]
 8008590:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008594:	4824      	ldr	r0, [pc, #144]	@ (8008628 <_svfiprintf_r+0x1e8>)
 8008596:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800859a:	2206      	movs	r2, #6
 800859c:	f7f7 fe20 	bl	80001e0 <memchr>
 80085a0:	2800      	cmp	r0, #0
 80085a2:	d036      	beq.n	8008612 <_svfiprintf_r+0x1d2>
 80085a4:	4b21      	ldr	r3, [pc, #132]	@ (800862c <_svfiprintf_r+0x1ec>)
 80085a6:	bb1b      	cbnz	r3, 80085f0 <_svfiprintf_r+0x1b0>
 80085a8:	9b03      	ldr	r3, [sp, #12]
 80085aa:	3307      	adds	r3, #7
 80085ac:	f023 0307 	bic.w	r3, r3, #7
 80085b0:	3308      	adds	r3, #8
 80085b2:	9303      	str	r3, [sp, #12]
 80085b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085b6:	4433      	add	r3, r6
 80085b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80085ba:	e76a      	b.n	8008492 <_svfiprintf_r+0x52>
 80085bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80085c0:	460c      	mov	r4, r1
 80085c2:	2001      	movs	r0, #1
 80085c4:	e7a8      	b.n	8008518 <_svfiprintf_r+0xd8>
 80085c6:	2300      	movs	r3, #0
 80085c8:	3401      	adds	r4, #1
 80085ca:	9305      	str	r3, [sp, #20]
 80085cc:	4619      	mov	r1, r3
 80085ce:	f04f 0c0a 	mov.w	ip, #10
 80085d2:	4620      	mov	r0, r4
 80085d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085d8:	3a30      	subs	r2, #48	@ 0x30
 80085da:	2a09      	cmp	r2, #9
 80085dc:	d903      	bls.n	80085e6 <_svfiprintf_r+0x1a6>
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d0c6      	beq.n	8008570 <_svfiprintf_r+0x130>
 80085e2:	9105      	str	r1, [sp, #20]
 80085e4:	e7c4      	b.n	8008570 <_svfiprintf_r+0x130>
 80085e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80085ea:	4604      	mov	r4, r0
 80085ec:	2301      	movs	r3, #1
 80085ee:	e7f0      	b.n	80085d2 <_svfiprintf_r+0x192>
 80085f0:	ab03      	add	r3, sp, #12
 80085f2:	9300      	str	r3, [sp, #0]
 80085f4:	462a      	mov	r2, r5
 80085f6:	4b0e      	ldr	r3, [pc, #56]	@ (8008630 <_svfiprintf_r+0x1f0>)
 80085f8:	a904      	add	r1, sp, #16
 80085fa:	4638      	mov	r0, r7
 80085fc:	f3af 8000 	nop.w
 8008600:	1c42      	adds	r2, r0, #1
 8008602:	4606      	mov	r6, r0
 8008604:	d1d6      	bne.n	80085b4 <_svfiprintf_r+0x174>
 8008606:	89ab      	ldrh	r3, [r5, #12]
 8008608:	065b      	lsls	r3, r3, #25
 800860a:	f53f af2d 	bmi.w	8008468 <_svfiprintf_r+0x28>
 800860e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008610:	e72c      	b.n	800846c <_svfiprintf_r+0x2c>
 8008612:	ab03      	add	r3, sp, #12
 8008614:	9300      	str	r3, [sp, #0]
 8008616:	462a      	mov	r2, r5
 8008618:	4b05      	ldr	r3, [pc, #20]	@ (8008630 <_svfiprintf_r+0x1f0>)
 800861a:	a904      	add	r1, sp, #16
 800861c:	4638      	mov	r0, r7
 800861e:	f000 f91b 	bl	8008858 <_printf_i>
 8008622:	e7ed      	b.n	8008600 <_svfiprintf_r+0x1c0>
 8008624:	08008c50 	.word	0x08008c50
 8008628:	08008c5a 	.word	0x08008c5a
 800862c:	00000000 	.word	0x00000000
 8008630:	08008389 	.word	0x08008389
 8008634:	08008c56 	.word	0x08008c56

08008638 <sbrk_aligned>:
 8008638:	b570      	push	{r4, r5, r6, lr}
 800863a:	4e0f      	ldr	r6, [pc, #60]	@ (8008678 <sbrk_aligned+0x40>)
 800863c:	460c      	mov	r4, r1
 800863e:	6831      	ldr	r1, [r6, #0]
 8008640:	4605      	mov	r5, r0
 8008642:	b911      	cbnz	r1, 800864a <sbrk_aligned+0x12>
 8008644:	f000 fa7a 	bl	8008b3c <_sbrk_r>
 8008648:	6030      	str	r0, [r6, #0]
 800864a:	4621      	mov	r1, r4
 800864c:	4628      	mov	r0, r5
 800864e:	f000 fa75 	bl	8008b3c <_sbrk_r>
 8008652:	1c43      	adds	r3, r0, #1
 8008654:	d103      	bne.n	800865e <sbrk_aligned+0x26>
 8008656:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800865a:	4620      	mov	r0, r4
 800865c:	bd70      	pop	{r4, r5, r6, pc}
 800865e:	1cc4      	adds	r4, r0, #3
 8008660:	f024 0403 	bic.w	r4, r4, #3
 8008664:	42a0      	cmp	r0, r4
 8008666:	d0f8      	beq.n	800865a <sbrk_aligned+0x22>
 8008668:	1a21      	subs	r1, r4, r0
 800866a:	4628      	mov	r0, r5
 800866c:	f000 fa66 	bl	8008b3c <_sbrk_r>
 8008670:	3001      	adds	r0, #1
 8008672:	d1f2      	bne.n	800865a <sbrk_aligned+0x22>
 8008674:	e7ef      	b.n	8008656 <sbrk_aligned+0x1e>
 8008676:	bf00      	nop
 8008678:	20004e24 	.word	0x20004e24

0800867c <_malloc_r>:
 800867c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008680:	1ccd      	adds	r5, r1, #3
 8008682:	f025 0503 	bic.w	r5, r5, #3
 8008686:	3508      	adds	r5, #8
 8008688:	2d0c      	cmp	r5, #12
 800868a:	bf38      	it	cc
 800868c:	250c      	movcc	r5, #12
 800868e:	2d00      	cmp	r5, #0
 8008690:	4606      	mov	r6, r0
 8008692:	db01      	blt.n	8008698 <_malloc_r+0x1c>
 8008694:	42a9      	cmp	r1, r5
 8008696:	d904      	bls.n	80086a2 <_malloc_r+0x26>
 8008698:	230c      	movs	r3, #12
 800869a:	6033      	str	r3, [r6, #0]
 800869c:	2000      	movs	r0, #0
 800869e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008778 <_malloc_r+0xfc>
 80086a6:	f000 f9f5 	bl	8008a94 <__malloc_lock>
 80086aa:	f8d8 3000 	ldr.w	r3, [r8]
 80086ae:	461c      	mov	r4, r3
 80086b0:	bb44      	cbnz	r4, 8008704 <_malloc_r+0x88>
 80086b2:	4629      	mov	r1, r5
 80086b4:	4630      	mov	r0, r6
 80086b6:	f7ff ffbf 	bl	8008638 <sbrk_aligned>
 80086ba:	1c43      	adds	r3, r0, #1
 80086bc:	4604      	mov	r4, r0
 80086be:	d158      	bne.n	8008772 <_malloc_r+0xf6>
 80086c0:	f8d8 4000 	ldr.w	r4, [r8]
 80086c4:	4627      	mov	r7, r4
 80086c6:	2f00      	cmp	r7, #0
 80086c8:	d143      	bne.n	8008752 <_malloc_r+0xd6>
 80086ca:	2c00      	cmp	r4, #0
 80086cc:	d04b      	beq.n	8008766 <_malloc_r+0xea>
 80086ce:	6823      	ldr	r3, [r4, #0]
 80086d0:	4639      	mov	r1, r7
 80086d2:	4630      	mov	r0, r6
 80086d4:	eb04 0903 	add.w	r9, r4, r3
 80086d8:	f000 fa30 	bl	8008b3c <_sbrk_r>
 80086dc:	4581      	cmp	r9, r0
 80086de:	d142      	bne.n	8008766 <_malloc_r+0xea>
 80086e0:	6821      	ldr	r1, [r4, #0]
 80086e2:	1a6d      	subs	r5, r5, r1
 80086e4:	4629      	mov	r1, r5
 80086e6:	4630      	mov	r0, r6
 80086e8:	f7ff ffa6 	bl	8008638 <sbrk_aligned>
 80086ec:	3001      	adds	r0, #1
 80086ee:	d03a      	beq.n	8008766 <_malloc_r+0xea>
 80086f0:	6823      	ldr	r3, [r4, #0]
 80086f2:	442b      	add	r3, r5
 80086f4:	6023      	str	r3, [r4, #0]
 80086f6:	f8d8 3000 	ldr.w	r3, [r8]
 80086fa:	685a      	ldr	r2, [r3, #4]
 80086fc:	bb62      	cbnz	r2, 8008758 <_malloc_r+0xdc>
 80086fe:	f8c8 7000 	str.w	r7, [r8]
 8008702:	e00f      	b.n	8008724 <_malloc_r+0xa8>
 8008704:	6822      	ldr	r2, [r4, #0]
 8008706:	1b52      	subs	r2, r2, r5
 8008708:	d420      	bmi.n	800874c <_malloc_r+0xd0>
 800870a:	2a0b      	cmp	r2, #11
 800870c:	d917      	bls.n	800873e <_malloc_r+0xc2>
 800870e:	1961      	adds	r1, r4, r5
 8008710:	42a3      	cmp	r3, r4
 8008712:	6025      	str	r5, [r4, #0]
 8008714:	bf18      	it	ne
 8008716:	6059      	strne	r1, [r3, #4]
 8008718:	6863      	ldr	r3, [r4, #4]
 800871a:	bf08      	it	eq
 800871c:	f8c8 1000 	streq.w	r1, [r8]
 8008720:	5162      	str	r2, [r4, r5]
 8008722:	604b      	str	r3, [r1, #4]
 8008724:	4630      	mov	r0, r6
 8008726:	f000 f9bb 	bl	8008aa0 <__malloc_unlock>
 800872a:	f104 000b 	add.w	r0, r4, #11
 800872e:	1d23      	adds	r3, r4, #4
 8008730:	f020 0007 	bic.w	r0, r0, #7
 8008734:	1ac2      	subs	r2, r0, r3
 8008736:	bf1c      	itt	ne
 8008738:	1a1b      	subne	r3, r3, r0
 800873a:	50a3      	strne	r3, [r4, r2]
 800873c:	e7af      	b.n	800869e <_malloc_r+0x22>
 800873e:	6862      	ldr	r2, [r4, #4]
 8008740:	42a3      	cmp	r3, r4
 8008742:	bf0c      	ite	eq
 8008744:	f8c8 2000 	streq.w	r2, [r8]
 8008748:	605a      	strne	r2, [r3, #4]
 800874a:	e7eb      	b.n	8008724 <_malloc_r+0xa8>
 800874c:	4623      	mov	r3, r4
 800874e:	6864      	ldr	r4, [r4, #4]
 8008750:	e7ae      	b.n	80086b0 <_malloc_r+0x34>
 8008752:	463c      	mov	r4, r7
 8008754:	687f      	ldr	r7, [r7, #4]
 8008756:	e7b6      	b.n	80086c6 <_malloc_r+0x4a>
 8008758:	461a      	mov	r2, r3
 800875a:	685b      	ldr	r3, [r3, #4]
 800875c:	42a3      	cmp	r3, r4
 800875e:	d1fb      	bne.n	8008758 <_malloc_r+0xdc>
 8008760:	2300      	movs	r3, #0
 8008762:	6053      	str	r3, [r2, #4]
 8008764:	e7de      	b.n	8008724 <_malloc_r+0xa8>
 8008766:	230c      	movs	r3, #12
 8008768:	6033      	str	r3, [r6, #0]
 800876a:	4630      	mov	r0, r6
 800876c:	f000 f998 	bl	8008aa0 <__malloc_unlock>
 8008770:	e794      	b.n	800869c <_malloc_r+0x20>
 8008772:	6005      	str	r5, [r0, #0]
 8008774:	e7d6      	b.n	8008724 <_malloc_r+0xa8>
 8008776:	bf00      	nop
 8008778:	20004e28 	.word	0x20004e28

0800877c <_printf_common>:
 800877c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008780:	4616      	mov	r6, r2
 8008782:	4698      	mov	r8, r3
 8008784:	688a      	ldr	r2, [r1, #8]
 8008786:	690b      	ldr	r3, [r1, #16]
 8008788:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800878c:	4293      	cmp	r3, r2
 800878e:	bfb8      	it	lt
 8008790:	4613      	movlt	r3, r2
 8008792:	6033      	str	r3, [r6, #0]
 8008794:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008798:	4607      	mov	r7, r0
 800879a:	460c      	mov	r4, r1
 800879c:	b10a      	cbz	r2, 80087a2 <_printf_common+0x26>
 800879e:	3301      	adds	r3, #1
 80087a0:	6033      	str	r3, [r6, #0]
 80087a2:	6823      	ldr	r3, [r4, #0]
 80087a4:	0699      	lsls	r1, r3, #26
 80087a6:	bf42      	ittt	mi
 80087a8:	6833      	ldrmi	r3, [r6, #0]
 80087aa:	3302      	addmi	r3, #2
 80087ac:	6033      	strmi	r3, [r6, #0]
 80087ae:	6825      	ldr	r5, [r4, #0]
 80087b0:	f015 0506 	ands.w	r5, r5, #6
 80087b4:	d106      	bne.n	80087c4 <_printf_common+0x48>
 80087b6:	f104 0a19 	add.w	sl, r4, #25
 80087ba:	68e3      	ldr	r3, [r4, #12]
 80087bc:	6832      	ldr	r2, [r6, #0]
 80087be:	1a9b      	subs	r3, r3, r2
 80087c0:	42ab      	cmp	r3, r5
 80087c2:	dc26      	bgt.n	8008812 <_printf_common+0x96>
 80087c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80087c8:	6822      	ldr	r2, [r4, #0]
 80087ca:	3b00      	subs	r3, #0
 80087cc:	bf18      	it	ne
 80087ce:	2301      	movne	r3, #1
 80087d0:	0692      	lsls	r2, r2, #26
 80087d2:	d42b      	bmi.n	800882c <_printf_common+0xb0>
 80087d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80087d8:	4641      	mov	r1, r8
 80087da:	4638      	mov	r0, r7
 80087dc:	47c8      	blx	r9
 80087de:	3001      	adds	r0, #1
 80087e0:	d01e      	beq.n	8008820 <_printf_common+0xa4>
 80087e2:	6823      	ldr	r3, [r4, #0]
 80087e4:	6922      	ldr	r2, [r4, #16]
 80087e6:	f003 0306 	and.w	r3, r3, #6
 80087ea:	2b04      	cmp	r3, #4
 80087ec:	bf02      	ittt	eq
 80087ee:	68e5      	ldreq	r5, [r4, #12]
 80087f0:	6833      	ldreq	r3, [r6, #0]
 80087f2:	1aed      	subeq	r5, r5, r3
 80087f4:	68a3      	ldr	r3, [r4, #8]
 80087f6:	bf0c      	ite	eq
 80087f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80087fc:	2500      	movne	r5, #0
 80087fe:	4293      	cmp	r3, r2
 8008800:	bfc4      	itt	gt
 8008802:	1a9b      	subgt	r3, r3, r2
 8008804:	18ed      	addgt	r5, r5, r3
 8008806:	2600      	movs	r6, #0
 8008808:	341a      	adds	r4, #26
 800880a:	42b5      	cmp	r5, r6
 800880c:	d11a      	bne.n	8008844 <_printf_common+0xc8>
 800880e:	2000      	movs	r0, #0
 8008810:	e008      	b.n	8008824 <_printf_common+0xa8>
 8008812:	2301      	movs	r3, #1
 8008814:	4652      	mov	r2, sl
 8008816:	4641      	mov	r1, r8
 8008818:	4638      	mov	r0, r7
 800881a:	47c8      	blx	r9
 800881c:	3001      	adds	r0, #1
 800881e:	d103      	bne.n	8008828 <_printf_common+0xac>
 8008820:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008828:	3501      	adds	r5, #1
 800882a:	e7c6      	b.n	80087ba <_printf_common+0x3e>
 800882c:	18e1      	adds	r1, r4, r3
 800882e:	1c5a      	adds	r2, r3, #1
 8008830:	2030      	movs	r0, #48	@ 0x30
 8008832:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008836:	4422      	add	r2, r4
 8008838:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800883c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008840:	3302      	adds	r3, #2
 8008842:	e7c7      	b.n	80087d4 <_printf_common+0x58>
 8008844:	2301      	movs	r3, #1
 8008846:	4622      	mov	r2, r4
 8008848:	4641      	mov	r1, r8
 800884a:	4638      	mov	r0, r7
 800884c:	47c8      	blx	r9
 800884e:	3001      	adds	r0, #1
 8008850:	d0e6      	beq.n	8008820 <_printf_common+0xa4>
 8008852:	3601      	adds	r6, #1
 8008854:	e7d9      	b.n	800880a <_printf_common+0x8e>
	...

08008858 <_printf_i>:
 8008858:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800885c:	7e0f      	ldrb	r7, [r1, #24]
 800885e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008860:	2f78      	cmp	r7, #120	@ 0x78
 8008862:	4691      	mov	r9, r2
 8008864:	4680      	mov	r8, r0
 8008866:	460c      	mov	r4, r1
 8008868:	469a      	mov	sl, r3
 800886a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800886e:	d807      	bhi.n	8008880 <_printf_i+0x28>
 8008870:	2f62      	cmp	r7, #98	@ 0x62
 8008872:	d80a      	bhi.n	800888a <_printf_i+0x32>
 8008874:	2f00      	cmp	r7, #0
 8008876:	f000 80d1 	beq.w	8008a1c <_printf_i+0x1c4>
 800887a:	2f58      	cmp	r7, #88	@ 0x58
 800887c:	f000 80b8 	beq.w	80089f0 <_printf_i+0x198>
 8008880:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008884:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008888:	e03a      	b.n	8008900 <_printf_i+0xa8>
 800888a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800888e:	2b15      	cmp	r3, #21
 8008890:	d8f6      	bhi.n	8008880 <_printf_i+0x28>
 8008892:	a101      	add	r1, pc, #4	@ (adr r1, 8008898 <_printf_i+0x40>)
 8008894:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008898:	080088f1 	.word	0x080088f1
 800889c:	08008905 	.word	0x08008905
 80088a0:	08008881 	.word	0x08008881
 80088a4:	08008881 	.word	0x08008881
 80088a8:	08008881 	.word	0x08008881
 80088ac:	08008881 	.word	0x08008881
 80088b0:	08008905 	.word	0x08008905
 80088b4:	08008881 	.word	0x08008881
 80088b8:	08008881 	.word	0x08008881
 80088bc:	08008881 	.word	0x08008881
 80088c0:	08008881 	.word	0x08008881
 80088c4:	08008a03 	.word	0x08008a03
 80088c8:	0800892f 	.word	0x0800892f
 80088cc:	080089bd 	.word	0x080089bd
 80088d0:	08008881 	.word	0x08008881
 80088d4:	08008881 	.word	0x08008881
 80088d8:	08008a25 	.word	0x08008a25
 80088dc:	08008881 	.word	0x08008881
 80088e0:	0800892f 	.word	0x0800892f
 80088e4:	08008881 	.word	0x08008881
 80088e8:	08008881 	.word	0x08008881
 80088ec:	080089c5 	.word	0x080089c5
 80088f0:	6833      	ldr	r3, [r6, #0]
 80088f2:	1d1a      	adds	r2, r3, #4
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	6032      	str	r2, [r6, #0]
 80088f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80088fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008900:	2301      	movs	r3, #1
 8008902:	e09c      	b.n	8008a3e <_printf_i+0x1e6>
 8008904:	6833      	ldr	r3, [r6, #0]
 8008906:	6820      	ldr	r0, [r4, #0]
 8008908:	1d19      	adds	r1, r3, #4
 800890a:	6031      	str	r1, [r6, #0]
 800890c:	0606      	lsls	r6, r0, #24
 800890e:	d501      	bpl.n	8008914 <_printf_i+0xbc>
 8008910:	681d      	ldr	r5, [r3, #0]
 8008912:	e003      	b.n	800891c <_printf_i+0xc4>
 8008914:	0645      	lsls	r5, r0, #25
 8008916:	d5fb      	bpl.n	8008910 <_printf_i+0xb8>
 8008918:	f9b3 5000 	ldrsh.w	r5, [r3]
 800891c:	2d00      	cmp	r5, #0
 800891e:	da03      	bge.n	8008928 <_printf_i+0xd0>
 8008920:	232d      	movs	r3, #45	@ 0x2d
 8008922:	426d      	negs	r5, r5
 8008924:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008928:	4858      	ldr	r0, [pc, #352]	@ (8008a8c <_printf_i+0x234>)
 800892a:	230a      	movs	r3, #10
 800892c:	e011      	b.n	8008952 <_printf_i+0xfa>
 800892e:	6821      	ldr	r1, [r4, #0]
 8008930:	6833      	ldr	r3, [r6, #0]
 8008932:	0608      	lsls	r0, r1, #24
 8008934:	f853 5b04 	ldr.w	r5, [r3], #4
 8008938:	d402      	bmi.n	8008940 <_printf_i+0xe8>
 800893a:	0649      	lsls	r1, r1, #25
 800893c:	bf48      	it	mi
 800893e:	b2ad      	uxthmi	r5, r5
 8008940:	2f6f      	cmp	r7, #111	@ 0x6f
 8008942:	4852      	ldr	r0, [pc, #328]	@ (8008a8c <_printf_i+0x234>)
 8008944:	6033      	str	r3, [r6, #0]
 8008946:	bf14      	ite	ne
 8008948:	230a      	movne	r3, #10
 800894a:	2308      	moveq	r3, #8
 800894c:	2100      	movs	r1, #0
 800894e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008952:	6866      	ldr	r6, [r4, #4]
 8008954:	60a6      	str	r6, [r4, #8]
 8008956:	2e00      	cmp	r6, #0
 8008958:	db05      	blt.n	8008966 <_printf_i+0x10e>
 800895a:	6821      	ldr	r1, [r4, #0]
 800895c:	432e      	orrs	r6, r5
 800895e:	f021 0104 	bic.w	r1, r1, #4
 8008962:	6021      	str	r1, [r4, #0]
 8008964:	d04b      	beq.n	80089fe <_printf_i+0x1a6>
 8008966:	4616      	mov	r6, r2
 8008968:	fbb5 f1f3 	udiv	r1, r5, r3
 800896c:	fb03 5711 	mls	r7, r3, r1, r5
 8008970:	5dc7      	ldrb	r7, [r0, r7]
 8008972:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008976:	462f      	mov	r7, r5
 8008978:	42bb      	cmp	r3, r7
 800897a:	460d      	mov	r5, r1
 800897c:	d9f4      	bls.n	8008968 <_printf_i+0x110>
 800897e:	2b08      	cmp	r3, #8
 8008980:	d10b      	bne.n	800899a <_printf_i+0x142>
 8008982:	6823      	ldr	r3, [r4, #0]
 8008984:	07df      	lsls	r7, r3, #31
 8008986:	d508      	bpl.n	800899a <_printf_i+0x142>
 8008988:	6923      	ldr	r3, [r4, #16]
 800898a:	6861      	ldr	r1, [r4, #4]
 800898c:	4299      	cmp	r1, r3
 800898e:	bfde      	ittt	le
 8008990:	2330      	movle	r3, #48	@ 0x30
 8008992:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008996:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800899a:	1b92      	subs	r2, r2, r6
 800899c:	6122      	str	r2, [r4, #16]
 800899e:	f8cd a000 	str.w	sl, [sp]
 80089a2:	464b      	mov	r3, r9
 80089a4:	aa03      	add	r2, sp, #12
 80089a6:	4621      	mov	r1, r4
 80089a8:	4640      	mov	r0, r8
 80089aa:	f7ff fee7 	bl	800877c <_printf_common>
 80089ae:	3001      	adds	r0, #1
 80089b0:	d14a      	bne.n	8008a48 <_printf_i+0x1f0>
 80089b2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80089b6:	b004      	add	sp, #16
 80089b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089bc:	6823      	ldr	r3, [r4, #0]
 80089be:	f043 0320 	orr.w	r3, r3, #32
 80089c2:	6023      	str	r3, [r4, #0]
 80089c4:	4832      	ldr	r0, [pc, #200]	@ (8008a90 <_printf_i+0x238>)
 80089c6:	2778      	movs	r7, #120	@ 0x78
 80089c8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80089cc:	6823      	ldr	r3, [r4, #0]
 80089ce:	6831      	ldr	r1, [r6, #0]
 80089d0:	061f      	lsls	r7, r3, #24
 80089d2:	f851 5b04 	ldr.w	r5, [r1], #4
 80089d6:	d402      	bmi.n	80089de <_printf_i+0x186>
 80089d8:	065f      	lsls	r7, r3, #25
 80089da:	bf48      	it	mi
 80089dc:	b2ad      	uxthmi	r5, r5
 80089de:	6031      	str	r1, [r6, #0]
 80089e0:	07d9      	lsls	r1, r3, #31
 80089e2:	bf44      	itt	mi
 80089e4:	f043 0320 	orrmi.w	r3, r3, #32
 80089e8:	6023      	strmi	r3, [r4, #0]
 80089ea:	b11d      	cbz	r5, 80089f4 <_printf_i+0x19c>
 80089ec:	2310      	movs	r3, #16
 80089ee:	e7ad      	b.n	800894c <_printf_i+0xf4>
 80089f0:	4826      	ldr	r0, [pc, #152]	@ (8008a8c <_printf_i+0x234>)
 80089f2:	e7e9      	b.n	80089c8 <_printf_i+0x170>
 80089f4:	6823      	ldr	r3, [r4, #0]
 80089f6:	f023 0320 	bic.w	r3, r3, #32
 80089fa:	6023      	str	r3, [r4, #0]
 80089fc:	e7f6      	b.n	80089ec <_printf_i+0x194>
 80089fe:	4616      	mov	r6, r2
 8008a00:	e7bd      	b.n	800897e <_printf_i+0x126>
 8008a02:	6833      	ldr	r3, [r6, #0]
 8008a04:	6825      	ldr	r5, [r4, #0]
 8008a06:	6961      	ldr	r1, [r4, #20]
 8008a08:	1d18      	adds	r0, r3, #4
 8008a0a:	6030      	str	r0, [r6, #0]
 8008a0c:	062e      	lsls	r6, r5, #24
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	d501      	bpl.n	8008a16 <_printf_i+0x1be>
 8008a12:	6019      	str	r1, [r3, #0]
 8008a14:	e002      	b.n	8008a1c <_printf_i+0x1c4>
 8008a16:	0668      	lsls	r0, r5, #25
 8008a18:	d5fb      	bpl.n	8008a12 <_printf_i+0x1ba>
 8008a1a:	8019      	strh	r1, [r3, #0]
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	6123      	str	r3, [r4, #16]
 8008a20:	4616      	mov	r6, r2
 8008a22:	e7bc      	b.n	800899e <_printf_i+0x146>
 8008a24:	6833      	ldr	r3, [r6, #0]
 8008a26:	1d1a      	adds	r2, r3, #4
 8008a28:	6032      	str	r2, [r6, #0]
 8008a2a:	681e      	ldr	r6, [r3, #0]
 8008a2c:	6862      	ldr	r2, [r4, #4]
 8008a2e:	2100      	movs	r1, #0
 8008a30:	4630      	mov	r0, r6
 8008a32:	f7f7 fbd5 	bl	80001e0 <memchr>
 8008a36:	b108      	cbz	r0, 8008a3c <_printf_i+0x1e4>
 8008a38:	1b80      	subs	r0, r0, r6
 8008a3a:	6060      	str	r0, [r4, #4]
 8008a3c:	6863      	ldr	r3, [r4, #4]
 8008a3e:	6123      	str	r3, [r4, #16]
 8008a40:	2300      	movs	r3, #0
 8008a42:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a46:	e7aa      	b.n	800899e <_printf_i+0x146>
 8008a48:	6923      	ldr	r3, [r4, #16]
 8008a4a:	4632      	mov	r2, r6
 8008a4c:	4649      	mov	r1, r9
 8008a4e:	4640      	mov	r0, r8
 8008a50:	47d0      	blx	sl
 8008a52:	3001      	adds	r0, #1
 8008a54:	d0ad      	beq.n	80089b2 <_printf_i+0x15a>
 8008a56:	6823      	ldr	r3, [r4, #0]
 8008a58:	079b      	lsls	r3, r3, #30
 8008a5a:	d413      	bmi.n	8008a84 <_printf_i+0x22c>
 8008a5c:	68e0      	ldr	r0, [r4, #12]
 8008a5e:	9b03      	ldr	r3, [sp, #12]
 8008a60:	4298      	cmp	r0, r3
 8008a62:	bfb8      	it	lt
 8008a64:	4618      	movlt	r0, r3
 8008a66:	e7a6      	b.n	80089b6 <_printf_i+0x15e>
 8008a68:	2301      	movs	r3, #1
 8008a6a:	4632      	mov	r2, r6
 8008a6c:	4649      	mov	r1, r9
 8008a6e:	4640      	mov	r0, r8
 8008a70:	47d0      	blx	sl
 8008a72:	3001      	adds	r0, #1
 8008a74:	d09d      	beq.n	80089b2 <_printf_i+0x15a>
 8008a76:	3501      	adds	r5, #1
 8008a78:	68e3      	ldr	r3, [r4, #12]
 8008a7a:	9903      	ldr	r1, [sp, #12]
 8008a7c:	1a5b      	subs	r3, r3, r1
 8008a7e:	42ab      	cmp	r3, r5
 8008a80:	dcf2      	bgt.n	8008a68 <_printf_i+0x210>
 8008a82:	e7eb      	b.n	8008a5c <_printf_i+0x204>
 8008a84:	2500      	movs	r5, #0
 8008a86:	f104 0619 	add.w	r6, r4, #25
 8008a8a:	e7f5      	b.n	8008a78 <_printf_i+0x220>
 8008a8c:	08008c61 	.word	0x08008c61
 8008a90:	08008c72 	.word	0x08008c72

08008a94 <__malloc_lock>:
 8008a94:	4801      	ldr	r0, [pc, #4]	@ (8008a9c <__malloc_lock+0x8>)
 8008a96:	f7ff bbbf 	b.w	8008218 <__retarget_lock_acquire_recursive>
 8008a9a:	bf00      	nop
 8008a9c:	20004e1c 	.word	0x20004e1c

08008aa0 <__malloc_unlock>:
 8008aa0:	4801      	ldr	r0, [pc, #4]	@ (8008aa8 <__malloc_unlock+0x8>)
 8008aa2:	f7ff bbba 	b.w	800821a <__retarget_lock_release_recursive>
 8008aa6:	bf00      	nop
 8008aa8:	20004e1c 	.word	0x20004e1c

08008aac <_realloc_r>:
 8008aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ab0:	4607      	mov	r7, r0
 8008ab2:	4614      	mov	r4, r2
 8008ab4:	460d      	mov	r5, r1
 8008ab6:	b921      	cbnz	r1, 8008ac2 <_realloc_r+0x16>
 8008ab8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008abc:	4611      	mov	r1, r2
 8008abe:	f7ff bddd 	b.w	800867c <_malloc_r>
 8008ac2:	b92a      	cbnz	r2, 8008ad0 <_realloc_r+0x24>
 8008ac4:	f7ff fc16 	bl	80082f4 <_free_r>
 8008ac8:	4625      	mov	r5, r4
 8008aca:	4628      	mov	r0, r5
 8008acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ad0:	f000 f844 	bl	8008b5c <_malloc_usable_size_r>
 8008ad4:	4284      	cmp	r4, r0
 8008ad6:	4606      	mov	r6, r0
 8008ad8:	d802      	bhi.n	8008ae0 <_realloc_r+0x34>
 8008ada:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008ade:	d8f4      	bhi.n	8008aca <_realloc_r+0x1e>
 8008ae0:	4621      	mov	r1, r4
 8008ae2:	4638      	mov	r0, r7
 8008ae4:	f7ff fdca 	bl	800867c <_malloc_r>
 8008ae8:	4680      	mov	r8, r0
 8008aea:	b908      	cbnz	r0, 8008af0 <_realloc_r+0x44>
 8008aec:	4645      	mov	r5, r8
 8008aee:	e7ec      	b.n	8008aca <_realloc_r+0x1e>
 8008af0:	42b4      	cmp	r4, r6
 8008af2:	4622      	mov	r2, r4
 8008af4:	4629      	mov	r1, r5
 8008af6:	bf28      	it	cs
 8008af8:	4632      	movcs	r2, r6
 8008afa:	f7ff fbed 	bl	80082d8 <memcpy>
 8008afe:	4629      	mov	r1, r5
 8008b00:	4638      	mov	r0, r7
 8008b02:	f7ff fbf7 	bl	80082f4 <_free_r>
 8008b06:	e7f1      	b.n	8008aec <_realloc_r+0x40>

08008b08 <memmove>:
 8008b08:	4288      	cmp	r0, r1
 8008b0a:	b510      	push	{r4, lr}
 8008b0c:	eb01 0402 	add.w	r4, r1, r2
 8008b10:	d902      	bls.n	8008b18 <memmove+0x10>
 8008b12:	4284      	cmp	r4, r0
 8008b14:	4623      	mov	r3, r4
 8008b16:	d807      	bhi.n	8008b28 <memmove+0x20>
 8008b18:	1e43      	subs	r3, r0, #1
 8008b1a:	42a1      	cmp	r1, r4
 8008b1c:	d008      	beq.n	8008b30 <memmove+0x28>
 8008b1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008b26:	e7f8      	b.n	8008b1a <memmove+0x12>
 8008b28:	4402      	add	r2, r0
 8008b2a:	4601      	mov	r1, r0
 8008b2c:	428a      	cmp	r2, r1
 8008b2e:	d100      	bne.n	8008b32 <memmove+0x2a>
 8008b30:	bd10      	pop	{r4, pc}
 8008b32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008b36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008b3a:	e7f7      	b.n	8008b2c <memmove+0x24>

08008b3c <_sbrk_r>:
 8008b3c:	b538      	push	{r3, r4, r5, lr}
 8008b3e:	4d06      	ldr	r5, [pc, #24]	@ (8008b58 <_sbrk_r+0x1c>)
 8008b40:	2300      	movs	r3, #0
 8008b42:	4604      	mov	r4, r0
 8008b44:	4608      	mov	r0, r1
 8008b46:	602b      	str	r3, [r5, #0]
 8008b48:	f7f8 fe84 	bl	8001854 <_sbrk>
 8008b4c:	1c43      	adds	r3, r0, #1
 8008b4e:	d102      	bne.n	8008b56 <_sbrk_r+0x1a>
 8008b50:	682b      	ldr	r3, [r5, #0]
 8008b52:	b103      	cbz	r3, 8008b56 <_sbrk_r+0x1a>
 8008b54:	6023      	str	r3, [r4, #0]
 8008b56:	bd38      	pop	{r3, r4, r5, pc}
 8008b58:	20004e20 	.word	0x20004e20

08008b5c <_malloc_usable_size_r>:
 8008b5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b60:	1f18      	subs	r0, r3, #4
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	bfbc      	itt	lt
 8008b66:	580b      	ldrlt	r3, [r1, r0]
 8008b68:	18c0      	addlt	r0, r0, r3
 8008b6a:	4770      	bx	lr

08008b6c <_init>:
 8008b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b6e:	bf00      	nop
 8008b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b72:	bc08      	pop	{r3}
 8008b74:	469e      	mov	lr, r3
 8008b76:	4770      	bx	lr

08008b78 <_fini>:
 8008b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b7a:	bf00      	nop
 8008b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b7e:	bc08      	pop	{r3}
 8008b80:	469e      	mov	lr, r3
 8008b82:	4770      	bx	lr
