
MST-FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a6e0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  0800a880  0800a880  0000b880  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a9c0  0800a9c0  0000c060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a9c0  0800a9c0  0000b9c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a9c8  0800a9c8  0000c060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a9c8  0800a9c8  0000b9c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a9cc  0800a9cc  0000b9cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800a9d0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004dd8  20000060  0800aa30  0000c060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004e38  0800aa30  0000ce38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a625  00000000  00000000  0000c090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a9d  00000000  00000000  000266b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015d0  00000000  00000000  0002a158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010ee  00000000  00000000  0002b728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001940b  00000000  00000000  0002c816  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017bfd  00000000  00000000  00045c21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009972e  00000000  00000000  0005d81e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f6f4c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065ec  00000000  00000000  000f6f90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  000fd57c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a868 	.word	0x0800a868

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	0800a868 	.word	0x0800a868

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bbc:	f000 b988 	b.w	8000ed0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	468e      	mov	lr, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d962      	bls.n	8000cb4 <__udivmoddi4+0xdc>
 8000bee:	fab2 f682 	clz	r6, r2
 8000bf2:	b14e      	cbz	r6, 8000c08 <__udivmoddi4+0x30>
 8000bf4:	f1c6 0320 	rsb	r3, r6, #32
 8000bf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	40b7      	lsls	r7, r6
 8000c02:	ea43 0808 	orr.w	r8, r3, r8
 8000c06:	40b4      	lsls	r4, r6
 8000c08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c0c:	fa1f fc87 	uxth.w	ip, r7
 8000c10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c14:	0c23      	lsrs	r3, r4, #16
 8000c16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c2c:	f080 80ea 	bcs.w	8000e04 <__udivmoddi4+0x22c>
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f240 80e7 	bls.w	8000e04 <__udivmoddi4+0x22c>
 8000c36:	3902      	subs	r1, #2
 8000c38:	443b      	add	r3, r7
 8000c3a:	1a9a      	subs	r2, r3, r2
 8000c3c:	b2a3      	uxth	r3, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4e:	459c      	cmp	ip, r3
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x8e>
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000c58:	f080 80d6 	bcs.w	8000e08 <__udivmoddi4+0x230>
 8000c5c:	459c      	cmp	ip, r3
 8000c5e:	f240 80d3 	bls.w	8000e08 <__udivmoddi4+0x230>
 8000c62:	443b      	add	r3, r7
 8000c64:	3802      	subs	r0, #2
 8000c66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6a:	eba3 030c 	sub.w	r3, r3, ip
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40f3      	lsrs	r3, r6
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xb6>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb0>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x14c>
 8000c96:	4573      	cmp	r3, lr
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xc8>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 8105 	bhi.w	8000eaa <__udivmoddi4+0x2d2>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4690      	mov	r8, r2
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e5      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cae:	e9c5 4800 	strd	r4, r8, [r5]
 8000cb2:	e7e2      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f000 8090 	beq.w	8000dda <__udivmoddi4+0x202>
 8000cba:	fab2 f682 	clz	r6, r2
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f040 80a4 	bne.w	8000e0c <__udivmoddi4+0x234>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	0c03      	lsrs	r3, r0, #16
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	b280      	uxth	r0, r0
 8000cce:	b2bc      	uxth	r4, r7
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cde:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x11e>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000cec:	d202      	bcs.n	8000cf4 <__udivmoddi4+0x11c>
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	f200 80e0 	bhi.w	8000eb4 <__udivmoddi4+0x2dc>
 8000cf4:	46c4      	mov	ip, r8
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d04:	fb02 f404 	mul.w	r4, r2, r4
 8000d08:	429c      	cmp	r4, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x144>
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x142>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f200 80ca 	bhi.w	8000eae <__udivmoddi4+0x2d6>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	1b1b      	subs	r3, r3, r4
 8000d1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa0e f401 	lsl.w	r4, lr, r1
 8000d34:	fa20 f306 	lsr.w	r3, r0, r6
 8000d38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	fa1f fc87 	uxth.w	ip, r7
 8000d4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x1a0>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000d6a:	f080 809c 	bcs.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f240 8099 	bls.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	eba4 040e 	sub.w	r4, r4, lr
 8000d7c:	fa1f fe83 	uxth.w	lr, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d90:	45a4      	cmp	ip, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1ce>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000d9a:	f080 8082 	bcs.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d97f      	bls.n	8000ea2 <__udivmoddi4+0x2ca>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000db2:	4564      	cmp	r4, ip
 8000db4:	4673      	mov	r3, lr
 8000db6:	46e1      	mov	r9, ip
 8000db8:	d362      	bcc.n	8000e80 <__udivmoddi4+0x2a8>
 8000dba:	d05f      	beq.n	8000e7c <__udivmoddi4+0x2a4>
 8000dbc:	b15d      	cbz	r5, 8000dd6 <__udivmoddi4+0x1fe>
 8000dbe:	ebb8 0203 	subs.w	r2, r8, r3
 8000dc2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	fa22 f301 	lsr.w	r3, r2, r1
 8000dce:	431e      	orrs	r6, r3
 8000dd0:	40cc      	lsrs	r4, r1
 8000dd2:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e74f      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000dda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dde:	0c01      	lsrs	r1, r0, #16
 8000de0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000de4:	b280      	uxth	r0, r0
 8000de6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dea:	463b      	mov	r3, r7
 8000dec:	4638      	mov	r0, r7
 8000dee:	463c      	mov	r4, r7
 8000df0:	46b8      	mov	r8, r7
 8000df2:	46be      	mov	lr, r7
 8000df4:	2620      	movs	r6, #32
 8000df6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dfa:	eba2 0208 	sub.w	r2, r2, r8
 8000dfe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e02:	e766      	b.n	8000cd2 <__udivmoddi4+0xfa>
 8000e04:	4601      	mov	r1, r0
 8000e06:	e718      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e08:	4610      	mov	r0, r2
 8000e0a:	e72c      	b.n	8000c66 <__udivmoddi4+0x8e>
 8000e0c:	f1c6 0220 	rsb	r2, r6, #32
 8000e10:	fa2e f302 	lsr.w	r3, lr, r2
 8000e14:	40b7      	lsls	r7, r6
 8000e16:	40b1      	lsls	r1, r6
 8000e18:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e20:	430a      	orrs	r2, r1
 8000e22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e26:	b2bc      	uxth	r4, r7
 8000e28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb08 f904 	mul.w	r9, r8, r4
 8000e36:	40b0      	lsls	r0, r6
 8000e38:	4589      	cmp	r9, r1
 8000e3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e3e:	b280      	uxth	r0, r0
 8000e40:	d93e      	bls.n	8000ec0 <__udivmoddi4+0x2e8>
 8000e42:	1879      	adds	r1, r7, r1
 8000e44:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000e48:	d201      	bcs.n	8000e4e <__udivmoddi4+0x276>
 8000e4a:	4589      	cmp	r9, r1
 8000e4c:	d81f      	bhi.n	8000e8e <__udivmoddi4+0x2b6>
 8000e4e:	eba1 0109 	sub.w	r1, r1, r9
 8000e52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e56:	fb09 f804 	mul.w	r8, r9, r4
 8000e5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e5e:	b292      	uxth	r2, r2
 8000e60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e64:	4542      	cmp	r2, r8
 8000e66:	d229      	bcs.n	8000ebc <__udivmoddi4+0x2e4>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000e6e:	d2c4      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e70:	4542      	cmp	r2, r8
 8000e72:	d2c2      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e74:	f1a9 0102 	sub.w	r1, r9, #2
 8000e78:	443a      	add	r2, r7
 8000e7a:	e7be      	b.n	8000dfa <__udivmoddi4+0x222>
 8000e7c:	45f0      	cmp	r8, lr
 8000e7e:	d29d      	bcs.n	8000dbc <__udivmoddi4+0x1e4>
 8000e80:	ebbe 0302 	subs.w	r3, lr, r2
 8000e84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e88:	3801      	subs	r0, #1
 8000e8a:	46e1      	mov	r9, ip
 8000e8c:	e796      	b.n	8000dbc <__udivmoddi4+0x1e4>
 8000e8e:	eba7 0909 	sub.w	r9, r7, r9
 8000e92:	4449      	add	r1, r9
 8000e94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9c:	fb09 f804 	mul.w	r8, r9, r4
 8000ea0:	e7db      	b.n	8000e5a <__udivmoddi4+0x282>
 8000ea2:	4673      	mov	r3, lr
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1ce>
 8000ea6:	4650      	mov	r0, sl
 8000ea8:	e766      	b.n	8000d78 <__udivmoddi4+0x1a0>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e6fd      	b.n	8000caa <__udivmoddi4+0xd2>
 8000eae:	443b      	add	r3, r7
 8000eb0:	3a02      	subs	r2, #2
 8000eb2:	e733      	b.n	8000d1c <__udivmoddi4+0x144>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	443b      	add	r3, r7
 8000eba:	e71c      	b.n	8000cf6 <__udivmoddi4+0x11e>
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	e79c      	b.n	8000dfa <__udivmoddi4+0x222>
 8000ec0:	eba1 0109 	sub.w	r1, r1, r9
 8000ec4:	46c4      	mov	ip, r8
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fb09 f804 	mul.w	r8, r9, r4
 8000ece:	e7c4      	b.n	8000e5a <__udivmoddi4+0x282>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <prvMSTSetupUSClock>:

#if(TESTING_STM32 == 1)
/*
 * Timer reference given from user and used by MST to count nanoseconds
 */
static float prvMSTSetupUSClock() {
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
	//set prescaler equal to MHz of clock
	//we have that f_step = 1Mhz and Tstep = 1us, this way we can count us
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000ed8:	4b0a      	ldr	r3, [pc, #40]	@ (8000f04 <prvMSTSetupUSClock+0x30>)
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	4a09      	ldr	r2, [pc, #36]	@ (8000f04 <prvMSTSetupUSClock+0x30>)
 8000ede:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000ee2:	60d3      	str	r3, [r2, #12]
	DWT->CYCCNT = 0;
 8000ee4:	4b08      	ldr	r3, [pc, #32]	@ (8000f08 <prvMSTSetupUSClock+0x34>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000eea:	4b07      	ldr	r3, [pc, #28]	@ (8000f08 <prvMSTSetupUSClock+0x34>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a06      	ldr	r2, [pc, #24]	@ (8000f08 <prvMSTSetupUSClock+0x34>)
 8000ef0:	f043 0301 	orr.w	r3, r3, #1
 8000ef4:	6013      	str	r3, [r2, #0]
}
 8000ef6:	bf00      	nop
 8000ef8:	eeb0 0a67 	vmov.f32	s0, s15
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	e000edf0 	.word	0xe000edf0
 8000f08:	e0001000 	.word	0xe0001000

08000f0c <prvMSTGetUS>:

static uint32_t prvMSTGetUS() {
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
	uint32_t outUS = (DWT->CYCCNT / (24));
 8000f12:	4b07      	ldr	r3, [pc, #28]	@ (8000f30 <prvMSTGetUS+0x24>)
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	4a07      	ldr	r2, [pc, #28]	@ (8000f34 <prvMSTGetUS+0x28>)
 8000f18:	fba2 2303 	umull	r2, r3, r2, r3
 8000f1c:	091b      	lsrs	r3, r3, #4
 8000f1e:	607b      	str	r3, [r7, #4]
	return outUS;
 8000f20:	687b      	ldr	r3, [r7, #4]
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	e0001000 	.word	0xe0001000
 8000f34:	aaaaaaab 	.word	0xaaaaaaab

08000f38 <prvPeriodicTaskCreate>:
#if(mst_schedSCHEDULING_POLICY == mst_schedSCHEDULING_EDF)
static BaseType_t prvAsmissionControlEDF(extTCB_t *);
float prvPeriodicTasksDensity = 0;
#endif

static BaseType_t prvPeriodicTaskCreate(extTCB_t *xFromTCB) {
 8000f38:	b590      	push	{r4, r7, lr}
 8000f3a:	b087      	sub	sp, #28
 8000f3c:	af02      	add	r7, sp, #8
 8000f3e:	6078      	str	r0, [r7, #4]


	if(xFromTCB->pxCreatedTask == &SporadicServerHandle){
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f44:	4a37      	ldr	r2, [pc, #220]	@ (8001024 <prvPeriodicTaskCreate+0xec>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d117      	bne.n	8000f7a <prvPeriodicTaskCreate+0x42>
		/*
		The periodic task passed is the sporadic server, it shall not
		pass the prvMSTPeriodicGenericJob but the prvMSTSporadicServerJob
		*/
	if (xTaskCreate(prvMSTSporadicGenericJob, xFromTCB->pcName,
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6999      	ldr	r1, [r3, #24]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	8b98      	ldrh	r0, [r3, #28]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6a1c      	ldr	r4, [r3, #32]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f5a:	687a      	ldr	r2, [r7, #4]
 8000f5c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8000f5e:	9201      	str	r2, [sp, #4]
 8000f60:	9300      	str	r3, [sp, #0]
 8000f62:	4623      	mov	r3, r4
 8000f64:	4602      	mov	r2, r0
 8000f66:	4830      	ldr	r0, [pc, #192]	@ (8001028 <prvPeriodicTaskCreate+0xf0>)
 8000f68:	f005 fb06 	bl	8006578 <xTaskCreate>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d101      	bne.n	8000f76 <prvPeriodicTaskCreate+0x3e>
			xFromTCB->usStackDepth, xFromTCB->pvParameters,
			xFromTCB->uxPriority, xFromTCB->pxCreatedTask) == pdPASS) {
				/*
				No need for timer since called by aperiodic/sporadic task
				*/
				return pdPASS;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e052      	b.n	800101c <prvPeriodicTaskCreate+0xe4>
			}else {
		return pdFAIL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	e050      	b.n	800101c <prvPeriodicTaskCreate+0xe4>
	}
	}else{
		/*
		Generic periodic task
		*/
	if (xTaskCreate(prvMSTPeriodicGenericJob, xFromTCB->pcName,
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6999      	ldr	r1, [r3, #24]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	8b98      	ldrh	r0, [r3, #28]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6a1c      	ldr	r4, [r3, #32]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f8a:	687a      	ldr	r2, [r7, #4]
 8000f8c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8000f8e:	9201      	str	r2, [sp, #4]
 8000f90:	9300      	str	r3, [sp, #0]
 8000f92:	4623      	mov	r3, r4
 8000f94:	4602      	mov	r2, r0
 8000f96:	4825      	ldr	r0, [pc, #148]	@ (800102c <prvPeriodicTaskCreate+0xf4>)
 8000f98:	f005 faee 	bl	8006578 <xTaskCreate>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d13b      	bne.n	800101a <prvPeriodicTaskCreate+0xe2>
		/*
		 Create the timer,
		 Handle the specific semaphore for the callback
		 */
		TimerHandle_t xTimer = xTimerCreate("generic periodic timer",
				pdMS_TO_TICKS(xFromTCB->xTaskPhase + xFromTCB->xTaskPeriod),
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000faa:	4413      	add	r3, r2
 8000fac:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000fb0:	fb02 f303 	mul.w	r3, r2, r3
		TimerHandle_t xTimer = xTimerCreate("generic periodic timer",
 8000fb4:	4a1e      	ldr	r2, [pc, #120]	@ (8001030 <prvPeriodicTaskCreate+0xf8>)
 8000fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8000fba:	0999      	lsrs	r1, r3, #6
				pdTRUE, (void*) (xFromTCB->pxCreatedTask),
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
		TimerHandle_t xTimer = xTimerCreate("generic periodic timer",
 8000fc0:	4a1c      	ldr	r2, [pc, #112]	@ (8001034 <prvPeriodicTaskCreate+0xfc>)
 8000fc2:	9200      	str	r2, [sp, #0]
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	481c      	ldr	r0, [pc, #112]	@ (8001038 <prvPeriodicTaskCreate+0x100>)
 8000fc8:	f006 fe8a 	bl	8007ce0 <xTimerCreate>
 8000fcc:	60f8      	str	r0, [r7, #12]
				prvMSTPeriodicTimerCallback);
		xFromTCB->xTaskSpecificTimer = xTimer;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	68fa      	ldr	r2, [r7, #12]
 8000fd2:	661a      	str	r2, [r3, #96]	@ 0x60
		configASSERT(xTimerStart(xTimer, 0) == pdPASS)
 8000fd4:	f005 fdcc 	bl	8006b70 <xTaskGetTickCount>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	2300      	movs	r3, #0
 8000fdc:	9300      	str	r3, [sp, #0]
 8000fde:	2300      	movs	r3, #0
 8000fe0:	2101      	movs	r1, #1
 8000fe2:	68f8      	ldr	r0, [r7, #12]
 8000fe4:	f006 feda 	bl	8007d9c <xTimerGenericCommand>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d00b      	beq.n	8001006 <prvPeriodicTaskCreate+0xce>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000ff2:	f383 8811 	msr	BASEPRI, r3
 8000ff6:	f3bf 8f6f 	isb	sy
 8000ffa:	f3bf 8f4f 	dsb	sy
 8000ffe:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001000:	bf00      	nop
 8001002:	bf00      	nop
 8001004:	e7fd      	b.n	8001002 <prvPeriodicTaskCreate+0xca>
#endif
		vTaskSetThreadLocalStoragePointer(*(xFromTCB->pxCreatedTask),
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	687a      	ldr	r2, [r7, #4]
 800100e:	2100      	movs	r1, #0
 8001010:	4618      	mov	r0, r3
 8001012:	f006 f8dd 	bl	80071d0 <vTaskSetThreadLocalStoragePointer>
				mstLOCAL_STORAGE_DATA_INDEX, xFromTCB);
		return pdPASS;
 8001016:	2301      	movs	r3, #1
 8001018:	e000      	b.n	800101c <prvPeriodicTaskCreate+0xe4>
	} else {
		return pdFAIL;
 800101a:	2300      	movs	r3, #0
	}
}
}
 800101c:	4618      	mov	r0, r3
 800101e:	3714      	adds	r7, #20
 8001020:	46bd      	mov	sp, r7
 8001022:	bd90      	pop	{r4, r7, pc}
 8001024:	20000098 	.word	0x20000098
 8001028:	080013a5 	.word	0x080013a5
 800102c:	0800114d 	.word	0x0800114d
 8001030:	10624dd3 	.word	0x10624dd3
 8001034:	08001289 	.word	0x08001289
 8001038:	0800a880 	.word	0x0800a880

0800103c <prvAddItemToxTasksList>:

/*
Adds a certain item to the generic xTaskList
*/
static BaseType_t prvAddItemToxTasksList(extTCB_t *fromTCB, BaseType_t withValue){
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
	if (vTasksListInit == pdFALSE) {
 8001046:	4b16      	ldr	r3, [pc, #88]	@ (80010a0 <prvAddItemToxTasksList+0x64>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d108      	bne.n	8001060 <prvAddItemToxTasksList+0x24>
		vTasksListInit = pdTRUE;
 800104e:	4b14      	ldr	r3, [pc, #80]	@ (80010a0 <prvAddItemToxTasksList+0x64>)
 8001050:	2201      	movs	r2, #1
 8001052:	601a      	str	r2, [r3, #0]
		vListInitialise(&xTasksList);
 8001054:	4813      	ldr	r0, [pc, #76]	@ (80010a4 <prvAddItemToxTasksList+0x68>)
 8001056:	f004 fa8d 	bl	8005574 <vListInitialise>
		xListTasksNumber = 0;
 800105a:	4b13      	ldr	r3, [pc, #76]	@ (80010a8 <prvAddItemToxTasksList+0x6c>)
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
	}
	if (!listIS_CONTAINED_WITHIN(&xTasksList, &fromTCB->pxTaskTCBListItem)) {
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	691b      	ldr	r3, [r3, #16]
 8001064:	4a0f      	ldr	r2, [pc, #60]	@ (80010a4 <prvAddItemToxTasksList+0x68>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d015      	beq.n	8001096 <prvAddItemToxTasksList+0x5a>
		vListInitialiseItem(&(fromTCB->pxTaskTCBListItem));
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4618      	mov	r0, r3
 800106e:	f004 faa1 	bl	80055b4 <vListInitialiseItem>
		listSET_LIST_ITEM_OWNER(&(fromTCB->pxTaskTCBListItem), fromTCB);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	687a      	ldr	r2, [r7, #4]
 8001076:	60da      	str	r2, [r3, #12]
		listSET_LIST_ITEM_VALUE(&(fromTCB->pxTaskTCBListItem), withValue);
 8001078:	683a      	ldr	r2, [r7, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	601a      	str	r2, [r3, #0]
		vListInsertEnd(&xTasksList, &(fromTCB->pxTaskTCBListItem));
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4619      	mov	r1, r3
 8001082:	4808      	ldr	r0, [pc, #32]	@ (80010a4 <prvAddItemToxTasksList+0x68>)
 8001084:	f004 faa3 	bl	80055ce <vListInsertEnd>
		xListTasksNumber++;
 8001088:	4b07      	ldr	r3, [pc, #28]	@ (80010a8 <prvAddItemToxTasksList+0x6c>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	3301      	adds	r3, #1
 800108e:	4a06      	ldr	r2, [pc, #24]	@ (80010a8 <prvAddItemToxTasksList+0x6c>)
 8001090:	6013      	str	r3, [r2, #0]
		return pdTRUE;
 8001092:	2301      	movs	r3, #1
 8001094:	e000      	b.n	8001098 <prvAddItemToxTasksList+0x5c>
	}
	return pdFALSE;
 8001096:	2300      	movs	r3, #0
}
 8001098:	4618      	mov	r0, r3
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	2000007c 	.word	0x2000007c
 80010a4:	20000080 	.word	0x20000080
 80010a8:	20000094 	.word	0x20000094

080010ac <vMSTPeriodicTaskCreate>:
TaskHandle_t vMSTPeriodicTaskCreate(TaskFunction_t pvJobCode,
		const char *pcName, uint16_t usStackDepth, void *pvParameters,
		UBaseType_t uxPriority, TaskHandle_t *pxCreatedTask,
		/* library-specific parameters */
		TickType_t xTaskPeriod, TickType_t xTaskDeadline, TickType_t xTaskPhase,
		TickType_t xTaskWCET) {
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b0a4      	sub	sp, #144	@ 0x90
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	603b      	str	r3, [r7, #0]
 80010b8:	4613      	mov	r3, r2
 80010ba:	80fb      	strh	r3, [r7, #6]

	/*
	 Allocate, fill extended TCB using local task storage
	 */

	xNewExtTCB = (extTCB_t*) pvPortMalloc(sizeof(extTCB_t));
 80010bc:	207c      	movs	r0, #124	@ 0x7c
 80010be:	f007 fbf5 	bl	80088ac <pvPortMalloc>
 80010c2:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
	*xNewExtTCB = (extTCB_t ) { .pvJobCode = pvJobCode, .pcName = pcName,
 80010c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80010ca:	4618      	mov	r0, r3
 80010cc:	237c      	movs	r3, #124	@ 0x7c
 80010ce:	461a      	mov	r2, r3
 80010d0:	2100      	movs	r1, #0
 80010d2:	f007 ff8f 	bl	8008ff4 <memset>
 80010d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80010da:	68fa      	ldr	r2, [r7, #12]
 80010dc:	615a      	str	r2, [r3, #20]
 80010de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80010e2:	68ba      	ldr	r2, [r7, #8]
 80010e4:	619a      	str	r2, [r3, #24]
 80010e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80010ea:	88fa      	ldrh	r2, [r7, #6]
 80010ec:	839a      	strh	r2, [r3, #28]
 80010ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80010f2:	683a      	ldr	r2, [r7, #0]
 80010f4:	621a      	str	r2, [r3, #32]
 80010f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80010fa:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80010fe:	625a      	str	r2, [r3, #36]	@ 0x24
 8001100:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001104:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8001108:	629a      	str	r2, [r3, #40]	@ 0x28
 800110a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800110e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8001112:	631a      	str	r2, [r3, #48]	@ 0x30
 8001114:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001118:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800111c:	635a      	str	r2, [r3, #52]	@ 0x34
 800111e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001122:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8001126:	639a      	str	r2, [r3, #56]	@ 0x38
 8001128:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800112c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8001130:	63da      	str	r2, [r3, #60]	@ 0x3c
#if (mst_schedSCHEDULING_POLICY == mst_schedSCHEDULING_RMS)
	/*
	If RMS we fill a list containg all the declared tasks by the user before kernel init.
	They will be reordered and properly set-up as the kernel start is called
	*/
	prvAddItemToxTasksList(xNewExtTCB, xTaskPeriod);
 8001132:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001136:	4619      	mov	r1, r3
 8001138:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 800113c:	f7ff ff7e 	bl	800103c <prvAddItemToxTasksList>
	return pdPASS;
 8001140:	2301      	movs	r3, #1
	} else {
		return pdFAIL;
	}
#endif

}
 8001142:	4618      	mov	r0, r3
 8001144:	3790      	adds	r7, #144	@ 0x90
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
	...

0800114c <prvMSTPeriodicGenericJob>:
 * mst_test_PERIODIC_METHOD 2: Uses FreeRTOS global timers to callback the task appropriately.
 *
 * @param pvParameters
 */

static void prvMSTPeriodicGenericJob(void *pvParameters) {
 800114c:	b580      	push	{r7, lr}
 800114e:	b088      	sub	sp, #32
 8001150:	af02      	add	r7, sp, #8
 8001152:	6078      	str	r0, [r7, #4]
#if(mst_test_PERIODIC_METHOD == 2)
	/*
	 Takes notification for current task
	 */
	ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8001154:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001158:	2001      	movs	r0, #1
 800115a:	f006 fbb5 	bl	80078c8 <ulTaskNotifyTake>
#endif
	/*
	 Get values about current job
	 */
	TaskHandle_t xCurrentHandle = xTaskGetCurrentTaskHandle();
 800115e:	f006 fa15 	bl	800758c <xTaskGetCurrentTaskHandle>
 8001162:	6178      	str	r0, [r7, #20]
	extTCB_t *xCurrExtTCB = (extTCB_t*) pvTaskGetThreadLocalStoragePointer(
 8001164:	2100      	movs	r1, #0
 8001166:	6978      	ldr	r0, [r7, #20]
 8001168:	f006 f852 	bl	8007210 <pvTaskGetThreadLocalStoragePointer>
 800116c:	6138      	str	r0, [r7, #16]
			xCurrentHandle, mstLOCAL_STORAGE_DATA_INDEX);
	/*
	 We assert that the TCB has been retreived, else we compromised exec
	 */
	configASSERT(xCurrExtTCB != NULL);
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d10b      	bne.n	800118c <prvMSTPeriodicGenericJob+0x40>
	__asm volatile
 8001174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001178:	f383 8811 	msr	BASEPRI, r3
 800117c:	f3bf 8f6f 	isb	sy
 8001180:	f3bf 8f4f 	dsb	sy
 8001184:	60bb      	str	r3, [r7, #8]
}
 8001186:	bf00      	nop
 8001188:	bf00      	nop
 800118a:	e7fd      	b.n	8001188 <prvMSTPeriodicGenericJob+0x3c>
	/*
	 First iteration with phase passed, change the period to not have the phase
	 */
	if (xCurrExtTCB->xTaskInitDone == pdFALSE) {
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001190:	2b00      	cmp	r3, #0
 8001192:	d11f      	bne.n	80011d4 <prvMSTPeriodicGenericJob+0x88>
		xCurrExtTCB->xTaskInitDone = pdTRUE;
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	2201      	movs	r2, #1
 8001198:	65da      	str	r2, [r3, #92]	@ 0x5c
#if(TESTING_STM32)
		//this is the us at start
		xCurrExtTCB->xUsFromIdealRelease = 0;
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	2200      	movs	r2, #0
 800119e:	665a      	str	r2, [r3, #100]	@ 0x64
		xCurrExtTCB->xUsAverageReleaseGap = 0;
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	2200      	movs	r2, #0
 80011a4:	66da      	str	r2, [r3, #108]	@ 0x6c
#endif

		if (xCurrExtTCB->xTaskPhase > 0) {
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d012      	beq.n	80011d4 <prvMSTPeriodicGenericJob+0x88>
			 If we have a phase, we should have just passed it
			 */
#if(mst_test_PERIODIC_METHOD == 1)
			vTaskDelayUntil(&(xCurrExtTCB->xPrevReleaseTime), xCurrExtTCB->xTaskPhase);
#elif(mst_test_PERIODIC_METHOD == 2)
			xTimerChangePeriod(xCurrExtTCB->xTaskSpecificTimer,
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	6e18      	ldr	r0, [r3, #96]	@ 0x60
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80011ba:	fb02 f303 	mul.w	r3, r2, r3
 80011be:	4a31      	ldr	r2, [pc, #196]	@ (8001284 <prvMSTPeriodicGenericJob+0x138>)
 80011c0:	fba2 2303 	umull	r2, r3, r2, r3
 80011c4:	099a      	lsrs	r2, r3, #6
 80011c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011ca:	9300      	str	r3, [sp, #0]
 80011cc:	2300      	movs	r3, #0
 80011ce:	2104      	movs	r1, #4
 80011d0:	f006 fde4 	bl	8007d9c <xTimerGenericCommand>
#endif
		}

	}

	xCurrExtTCB->xPrevReleaseTime = xTaskGetTickCount();
 80011d4:	f005 fccc 	bl	8006b70 <xTaskGetTickCount>
 80011d8:	4602      	mov	r2, r0
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	641a      	str	r2, [r3, #64]	@ 0x40
	for (;;) {

#if(TESTING_STM32)
		//count gap from execution if testing
#if(mst_test_PERIODIC_METHOD == 2)
		xCurrExtTCB->xNumOfIterations++;
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80011e2:	1c5a      	adds	r2, r3, #1
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	669a      	str	r2, [r3, #104]	@ 0x68
#endif
		//calculate the absolute perfect release in us
		uint32_t perfRelease = xCurrExtTCB->xTaskPhase * 1000
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
				+ xCurrExtTCB->xTaskPeriod * 1000
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
						* (xCurrExtTCB->xNumOfIterations);
 80011f0:	6939      	ldr	r1, [r7, #16]
 80011f2:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 80011f4:	fb01 f303 	mul.w	r3, r1, r3
				+ xCurrExtTCB->xTaskPeriod * 1000
 80011f8:	4413      	add	r3, r2
		uint32_t perfRelease = xCurrExtTCB->xTaskPhase * 1000
 80011fa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80011fe:	fb02 f303 	mul.w	r3, r2, r3
 8001202:	60fb      	str	r3, [r7, #12]
		//calculate the gap between perfect and absolute gap in us and update the avg
		xCurrExtTCB->xUsFromIdealRelease += prvMSTGetUS() - perfRelease;
 8001204:	f7ff fe82 	bl	8000f0c <prvMSTGetUS>
 8001208:	4602      	mov	r2, r0
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8001212:	4413      	add	r3, r2
 8001214:	461a      	mov	r2, r3
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	665a      	str	r2, [r3, #100]	@ 0x64
		if (xCurrExtTCB->xNumOfIterations > 0) {
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800121e:	2b00      	cmp	r3, #0
 8001220:	d009      	beq.n	8001236 <prvMSTPeriodicGenericJob+0xea>
			xCurrExtTCB->xUsAverageReleaseGap =
					(xCurrExtTCB->xUsFromIdealRelease)
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001226:	461a      	mov	r2, r3
							/ (xCurrExtTCB->xNumOfIterations);
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800122c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001230:	461a      	mov	r2, r3
			xCurrExtTCB->xUsAverageReleaseGap =
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	66da      	str	r2, [r3, #108]	@ 0x6c
#endif
#endif
		/*
		 Run user code
		 */
		xCurrExtTCB->xPrevStartTime = xTaskGetTickCount();
 8001236:	f005 fc9b 	bl	8006b70 <xTaskGetTickCount>
 800123a:	4602      	mov	r2, r0
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	64da      	str	r2, [r3, #76]	@ 0x4c
		xCurrExtTCB->pvJobCode(pvParameters);
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	695b      	ldr	r3, [r3, #20]
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	4798      	blx	r3
		xCurrExtTCB->xPrevFinishTime = xTaskGetTickCount();
 8001248:	f005 fc92 	bl	8006b70 <xTaskGetTickCount>
 800124c:	4602      	mov	r2, r0
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	651a      	str	r2, [r3, #80]	@ 0x50
		xCurrExtTCB->xPrevExecTime = xCurrExtTCB->xPrevFinishTime
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
				- xCurrExtTCB->xPrevStartTime;
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800125a:	1ad2      	subs	r2, r2, r3
		xCurrExtTCB->xPrevExecTime = xCurrExtTCB->xPrevFinishTime
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	645a      	str	r2, [r3, #68]	@ 0x44

		if (xCurrExtTCB->xPrevExecTime > xCurrExtTCB->xTaskDeadline) {
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001268:	429a      	cmp	r2, r3
 800126a:	d904      	bls.n	8001276 <prvMSTPeriodicGenericJob+0x12a>
			//current task got over the deadline, make notice of the event
			xCurrExtTCB->uNumOfMissedDeadlines++;
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001270:	1c5a      	adds	r2, r3, #1
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	655a      	str	r2, [r3, #84]	@ 0x54
		Update scheduler-referenced release time
		*/
		//vTaskDelay(pdMS_TO_TICKS(xCurrExtTCB->xTaskPeriod));
		vTaskDelayUntil(&(xCurrExtTCB->xPrevReleaseTime), pdMS_TO_TICKS(xCurrExtTCB->xTaskPeriod));
#elif(mst_test_PERIODIC_METHOD == 2)
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8001276:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800127a:	2001      	movs	r0, #1
 800127c:	f006 fb24 	bl	80078c8 <ulTaskNotifyTake>
	for (;;) {
 8001280:	e7ad      	b.n	80011de <prvMSTPeriodicGenericJob+0x92>
 8001282:	bf00      	nop
 8001284:	10624dd3 	.word	0x10624dd3

08001288 <prvMSTPeriodicTimerCallback>:

#if(mst_test_PERIODIC_METHOD == 2)
/*
 Using periodic timers with mutexes
 */
static void prvMSTPeriodicTimerCallback(TimerHandle_t xTimer) {
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
	/*
	 Here the callback of a certain task timer is called, it shall have the semaphore
	 as parameter
	 */
	TaskHandle_t *param = (TaskHandle_t*) pvTimerGetTimerID(xTimer);
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f007 f893 	bl	80083bc <pvTimerGetTimerID>
 8001296:	60f8      	str	r0, [r7, #12]
	prvMSTDispatch(param, true, taskTypePeriodic, false);
 8001298:	2300      	movs	r3, #0
 800129a:	2200      	movs	r2, #0
 800129c:	2101      	movs	r1, #1
 800129e:	68f8      	ldr	r0, [r7, #12]
 80012a0:	f000 fba4 	bl	80019ec <prvMSTDispatch>
}
 80012a4:	bf00      	nop
 80012a6:	3710      	adds	r7, #16
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}

080012ac <vMSTSporadicTaskCreate>:
BaseType_t vMSTSporadicTaskCreate(TaskFunction_t pvJobCode, const char *pcName,
		uint16_t usStackDepth, void *pvParameters, UBaseType_t uxPriority,
		TaskHandle_t *pxCreatedTask,
		/* library-specific parameters */
		TickType_t xTaskInterarrivalTime, TickType_t xTaskDeadline,
		TickType_t xTaskWCET) {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b0a6      	sub	sp, #152	@ 0x98
 80012b0:	af02      	add	r7, sp, #8
 80012b2:	60f8      	str	r0, [r7, #12]
 80012b4:	60b9      	str	r1, [r7, #8]
 80012b6:	603b      	str	r3, [r7, #0]
 80012b8:	4613      	mov	r3, r2
 80012ba:	80fb      	strh	r3, [r7, #6]

	extTCB_t *xNewExtTCB;
	if (xTaskCreate(prvMSTSporadicGenericJob, pcName, usStackDepth,
 80012bc:	88fa      	ldrh	r2, [r7, #6]
 80012be:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80012c2:	9301      	str	r3, [sp, #4]
 80012c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80012c8:	9300      	str	r3, [sp, #0]
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	68b9      	ldr	r1, [r7, #8]
 80012ce:	4826      	ldr	r0, [pc, #152]	@ (8001368 <vMSTSporadicTaskCreate+0xbc>)
 80012d0:	f005 f952 	bl	8006578 <xTaskCreate>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d140      	bne.n	800135c <vMSTSporadicTaskCreate+0xb0>
			pvParameters, uxPriority, pxCreatedTask) == pdPASS) {
		/*
		 Allocate, fill extended TCB using local task storage
		 */
		xNewExtTCB = (extTCB_t*) pvPortMalloc(sizeof(extTCB_t));
 80012da:	207c      	movs	r0, #124	@ 0x7c
 80012dc:	f007 fae6 	bl	80088ac <pvPortMalloc>
 80012e0:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
		*xNewExtTCB = (extTCB_t ) { .pvJobCode = pvJobCode, .pcName = pcName,
 80012e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80012e8:	4618      	mov	r0, r3
 80012ea:	237c      	movs	r3, #124	@ 0x7c
 80012ec:	461a      	mov	r2, r3
 80012ee:	2100      	movs	r1, #0
 80012f0:	f007 fe80 	bl	8008ff4 <memset>
 80012f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80012f8:	68fa      	ldr	r2, [r7, #12]
 80012fa:	615a      	str	r2, [r3, #20]
 80012fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001300:	68ba      	ldr	r2, [r7, #8]
 8001302:	619a      	str	r2, [r3, #24]
 8001304:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001308:	683a      	ldr	r2, [r7, #0]
 800130a:	621a      	str	r2, [r3, #32]
 800130c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001310:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8001314:	625a      	str	r2, [r3, #36]	@ 0x24
 8001316:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800131a:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800131e:	629a      	str	r2, [r3, #40]	@ 0x28
 8001320:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001324:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8001328:	635a      	str	r2, [r3, #52]	@ 0x34
 800132a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800132e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8001332:	671a      	str	r2, [r3, #112]	@ 0x70
						.pxCreatedTask = pxCreatedTask, .xTaskDeadline =
								xTaskDeadline, .uNumOfMissedDeadlines = 0,
						.xTaskInterarrivalTime = xTaskInterarrivalTime,
						.xJobCalled = pdFALSE, .xInterarrivalTimerRunning =
						pdFALSE };
		prvXMaxInterrarrivalTime = (xTaskInterarrivalTime > prvXMaxInterrarrivalTime) ? xTaskInterarrivalTime : prvXMaxInterrarrivalTime;
 8001334:	4b0d      	ldr	r3, [pc, #52]	@ (800136c <vMSTSporadicTaskCreate+0xc0>)
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800133c:	4293      	cmp	r3, r2
 800133e:	bf38      	it	cc
 8001340:	4613      	movcc	r3, r2
 8001342:	4a0a      	ldr	r2, [pc, #40]	@ (800136c <vMSTSporadicTaskCreate+0xc0>)
 8001344:	6013      	str	r3, [r2, #0]
		/*
		 We create the task and allocate, but we do not clear the mutex nor start the timer
		 */
		vTaskSetThreadLocalStoragePointer(*pxCreatedTask,
 8001346:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8001350:	2100      	movs	r1, #0
 8001352:	4618      	mov	r0, r3
 8001354:	f005 ff3c 	bl	80071d0 <vTaskSetThreadLocalStoragePointer>
				mstLOCAL_STORAGE_DATA_INDEX, xNewExtTCB);
		return pdPASS;
 8001358:	2301      	movs	r3, #1
 800135a:	e000      	b.n	800135e <vMSTSporadicTaskCreate+0xb2>
	} else {
		//task created unsuccesfully
		return pdFAIL;
 800135c:	2300      	movs	r3, #0
	}
}
 800135e:	4618      	mov	r0, r3
 8001360:	3790      	adds	r7, #144	@ 0x90
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	080013a5 	.word	0x080013a5
 800136c:	2000009c 	.word	0x2000009c

08001370 <getTaskRunTime>:
 *
 * @param pvParameters
 */


static BaseType_t getTaskRunTime(TaskHandle_t handle) {
 8001370:	b580      	push	{r7, lr}
 8001372:	b08c      	sub	sp, #48	@ 0x30
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
	TaskStatus_t status;
	UBaseType_t count = uxTaskGetSystemState(&status, 1, NULL);
 8001378:	f107 0308 	add.w	r3, r7, #8
 800137c:	2200      	movs	r2, #0
 800137e:	2101      	movs	r1, #1
 8001380:	4618      	mov	r0, r3
 8001382:	f005 fc05 	bl	8006b90 <uxTaskGetSystemState>
 8001386:	62f8      	str	r0, [r7, #44]	@ 0x2c
	if (count == 1 && status.xHandle == handle) {
 8001388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800138a:	2b01      	cmp	r3, #1
 800138c:	d105      	bne.n	800139a <getTaskRunTime+0x2a>
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	429a      	cmp	r2, r3
 8001394:	d101      	bne.n	800139a <getTaskRunTime+0x2a>
		return status.ulRunTimeCounter;
 8001396:	6a3b      	ldr	r3, [r7, #32]
 8001398:	e000      	b.n	800139c <getTaskRunTime+0x2c>
	}
	return 0;
 800139a:	2300      	movs	r3, #0
}
 800139c:	4618      	mov	r0, r3
 800139e:	3730      	adds	r7, #48	@ 0x30
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <prvMSTSporadicGenericJob>:
static void prvMSTSporadicGenericJob(void *pvParameters) {
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b088      	sub	sp, #32
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]

	TaskHandle_t xCurrentHandle = xTaskGetCurrentTaskHandle();
 80013ac:	f006 f8ee 	bl	800758c <xTaskGetCurrentTaskHandle>
 80013b0:	61f8      	str	r0, [r7, #28]
	extTCB_t *xCurrExtTCB = (extTCB_t*) pvTaskGetThreadLocalStoragePointer(
 80013b2:	2100      	movs	r1, #0
 80013b4:	69f8      	ldr	r0, [r7, #28]
 80013b6:	f005 ff2b 	bl	8007210 <pvTaskGetThreadLocalStoragePointer>
 80013ba:	61b8      	str	r0, [r7, #24]
			xCurrentHandle, mstLOCAL_STORAGE_DATA_INDEX);
	configASSERT(xCurrExtTCB != NULL);
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d10b      	bne.n	80013da <prvMSTSporadicGenericJob+0x36>
	__asm volatile
 80013c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80013c6:	f383 8811 	msr	BASEPRI, r3
 80013ca:	f3bf 8f6f 	isb	sy
 80013ce:	f3bf 8f4f 	dsb	sy
 80013d2:	613b      	str	r3, [r7, #16]
}
 80013d4:	bf00      	nop
 80013d6:	bf00      	nop
 80013d8:	e7fd      	b.n	80013d6 <prvMSTSporadicGenericJob+0x32>
#else
	/*
	Using a sporadic server, no handling of interarrival, only holding
	a lock on SS request
	*/
	xCurrExtTCB->xJobCalled = pdFALSE;
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	2200      	movs	r2, #0
 80013de:	679a      	str	r2, [r3, #120]	@ 0x78
	uint32_t notificationGiver;
	if (xTaskNotifyWait(0, NOTIFY_SS_REQUEST,
 80013e0:	f107 020c 	add.w	r2, r7, #12
 80013e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013e8:	2104      	movs	r1, #4
 80013ea:	2000      	movs	r0, #0
 80013ec:	f006 fab8 	bl	8007960 <xTaskNotifyWait>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d102      	bne.n	80013fc <prvMSTSporadicGenericJob+0x58>
			&notificationGiver, portMAX_DELAY) == pdPASS) {
		xCurrExtTCB->xJobCalled = pdTRUE;
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	2201      	movs	r2, #1
 80013fa:	679a      	str	r2, [r3, #120]	@ 0x78
	}
#endif


		BaseType_t actualCPUCycles = getTaskRunTime(xCurrentHandle);
 80013fc:	69f8      	ldr	r0, [r7, #28]
 80013fe:	f7ff ffb7 	bl	8001370 <getTaskRunTime>
 8001402:	6178      	str	r0, [r7, #20]
		xCurrExtTCB->xPrevStartTime = xTaskGetTickCount();
 8001404:	f005 fbb4 	bl	8006b70 <xTaskGetTickCount>
 8001408:	4602      	mov	r2, r0
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	64da      	str	r2, [r3, #76]	@ 0x4c
		xCurrExtTCB->pvJobCode(pvParameters);
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	695b      	ldr	r3, [r3, #20]
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	4798      	blx	r3
		/*
		 If periodic job is called within the task itself its no problem since the timer is going
		 */
		xCurrExtTCB->xPrevFinishTime = xTaskGetTickCount();
 8001416:	f005 fbab 	bl	8006b70 <xTaskGetTickCount>
 800141a:	4602      	mov	r2, r0
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	651a      	str	r2, [r3, #80]	@ 0x50
		/*
		The user shall have set up runtime stats appropriately:
		1 tick->1us, hence 'actualCPUCycles' is in us
		*/
		actualCPUCycles = getTaskRunTime(xCurrentHandle) - actualCPUCycles;
 8001420:	69f8      	ldr	r0, [r7, #28]
 8001422:	f7ff ffa5 	bl	8001370 <getTaskRunTime>
 8001426:	4602      	mov	r2, r0
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	617b      	str	r3, [r7, #20]
		
		//xCurrExtTCB->xPrevExecTime = xCurrExtTCB->xPrevFinishTime - xCurrExtTCB->xPrevStartTime;
		xCurrExtTCB->xPrevExecTime = actualCPUCycles;
 800142e:	697a      	ldr	r2, [r7, #20]
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	645a      	str	r2, [r3, #68]	@ 0x44
		#if mst_USE_SPORADIC_SERVER == 1
		/*
		Job over, notify sporadic server
		*/
		xTaskNotify(*(xCurrExtTCB->pxCreatedTask), NOTIFY_SS_REQUEST_DONE, eSetBits);
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001438:	6818      	ldr	r0, [r3, #0]
 800143a:	2300      	movs	r3, #0
 800143c:	2201      	movs	r2, #1
 800143e:	2108      	movs	r1, #8
 8001440:	f006 faee 	bl	8007a20 <xTaskGenericNotify>
		xCurrExtTCB->xJobCalled = pdFALSE;
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	2200      	movs	r2, #0
 8001448:	679a      	str	r2, [r3, #120]	@ 0x78
	for (;;) {
 800144a:	e7c6      	b.n	80013da <prvMSTSporadicGenericJob+0x36>

0800144c <vMSTSporadicTaskRun>:
		prvMSTDispatch(xCurrExtTCB->pxCreatedTask, false, taskTypeSporadic, false);
	#endif
	}
}

BaseType_t vMSTSporadicTaskRun(TaskHandle_t *pxTaskToRunHandle) {
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
	/*
	 We check if the task has been created. To run the sporadic task we call a dispatch
	 */
	extTCB_t *xCurrExtTCB = (extTCB_t*) pvTaskGetThreadLocalStoragePointer(
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2100      	movs	r1, #0
 800145a:	4618      	mov	r0, r3
 800145c:	f005 fed8 	bl	8007210 <pvTaskGetThreadLocalStoragePointer>
 8001460:	60f8      	str	r0, [r7, #12]
			*pxTaskToRunHandle, mstLOCAL_STORAGE_DATA_INDEX);

	if (xCurrExtTCB == NULL) {
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d101      	bne.n	800146c <vMSTSporadicTaskRun+0x20>
		return pdFAIL;
 8001468:	2300      	movs	r3, #0
 800146a:	e006      	b.n	800147a <vMSTSporadicTaskRun+0x2e>
	} else {
		prvMSTDispatch(pxTaskToRunHandle, pdTRUE, taskTypeSporadic, pdTRUE);
 800146c:	2301      	movs	r3, #1
 800146e:	2201      	movs	r2, #1
 8001470:	2101      	movs	r1, #1
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f000 faba 	bl	80019ec <prvMSTDispatch>
		return pdPASS;
 8001478:	2301      	movs	r3, #1
	}
}
 800147a:	4618      	mov	r0, r3
 800147c:	3710      	adds	r7, #16
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <prv_compare>:

#if (mst_schedSCHEDULING_POLICY == mst_schedSCHEDULING_RMS || mst_schedSCHEDULING_POLICY == mst_schedSCHEDULING_EDF)
static int prv_compare(const void *arg1, const void *arg2) {
 8001482:	b480      	push	{r7}
 8001484:	b085      	sub	sp, #20
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
 800148a:	6039      	str	r1, [r7, #0]
	extTCB_t *itm1 = *(extTCB_t**) arg1;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	60fb      	str	r3, [r7, #12]
	extTCB_t *itm2 = *(extTCB_t**) arg2;
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	60bb      	str	r3, [r7, #8]

#if mst_schedSCHEDULING_POLICY == mst_schedSCHEDULING_RMS

	if (itm1->xTaskPeriod > itm2->xTaskPeriod)
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d902      	bls.n	80014aa <prv_compare+0x28>
		return -1;
 80014a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80014a8:	e008      	b.n	80014bc <prv_compare+0x3a>
	if (itm1->xTaskPeriod < itm2->xTaskPeriod)
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d201      	bcs.n	80014ba <prv_compare+0x38>
		return 1;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e000      	b.n	80014bc <prv_compare+0x3a>
	return 0; 
 80014ba:	2300      	movs	r3, #0
	if (itm1->xTaskDeadline > itm2->xTaskDeadline)
		return 1;
	return 0; 
#endif

}
 80014bc:	4618      	mov	r0, r3
 80014be:	3714      	adds	r7, #20
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <prvComputeSporadicServerProprierties>:

static void prvComputeSporadicServerProprierties(TickType_t *tSS_Period, TickType_t *tSS_WCET){
 80014c8:	b5b0      	push	{r4, r5, r7, lr}
 80014ca:	b092      	sub	sp, #72	@ 0x48
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
	So we can evaluate:
	T_ss = C_ss_i/U_ss

	So here we try every possibility from max C_ss to min C_ss
	*/
	BaseType_t m = xTasksList.uxNumberOfItems + 1;
 80014d2:	4b5f      	ldr	r3, [pc, #380]	@ (8001650 <prvComputeSporadicServerProprierties+0x188>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	3301      	adds	r3, #1
 80014d8:	62bb      	str	r3, [r7, #40]	@ 0x28
	BaseType_t U = m * (pow(2.0, 1.0 / m) - 1.0);
 80014da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80014dc:	f7ff f822 	bl	8000524 <__aeabi_i2d>
 80014e0:	4604      	mov	r4, r0
 80014e2:	460d      	mov	r5, r1
 80014e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80014e6:	f7ff f81d 	bl	8000524 <__aeabi_i2d>
 80014ea:	4602      	mov	r2, r0
 80014ec:	460b      	mov	r3, r1
 80014ee:	f04f 0000 	mov.w	r0, #0
 80014f2:	4958      	ldr	r1, [pc, #352]	@ (8001654 <prvComputeSporadicServerProprierties+0x18c>)
 80014f4:	f7ff f9aa 	bl	800084c <__aeabi_ddiv>
 80014f8:	4602      	mov	r2, r0
 80014fa:	460b      	mov	r3, r1
 80014fc:	ec43 2b17 	vmov	d7, r2, r3
 8001500:	eeb0 1a47 	vmov.f32	s2, s14
 8001504:	eef0 1a67 	vmov.f32	s3, s15
 8001508:	ed9f 0b4f 	vldr	d0, [pc, #316]	@ 8001648 <prvComputeSporadicServerProprierties+0x180>
 800150c:	f008 fa4e 	bl	80099ac <pow>
 8001510:	ec51 0b10 	vmov	r0, r1, d0
 8001514:	f04f 0200 	mov.w	r2, #0
 8001518:	4b4e      	ldr	r3, [pc, #312]	@ (8001654 <prvComputeSporadicServerProprierties+0x18c>)
 800151a:	f7fe feb5 	bl	8000288 <__aeabi_dsub>
 800151e:	4602      	mov	r2, r0
 8001520:	460b      	mov	r3, r1
 8001522:	4620      	mov	r0, r4
 8001524:	4629      	mov	r1, r5
 8001526:	f7ff f867 	bl	80005f8 <__aeabi_dmul>
 800152a:	4602      	mov	r2, r0
 800152c:	460b      	mov	r3, r1
 800152e:	4610      	mov	r0, r2
 8001530:	4619      	mov	r1, r3
 8001532:	f7ff fb11 	bl	8000b58 <__aeabi_d2iz>
 8001536:	4603      	mov	r3, r0
 8001538:	627b      	str	r3, [r7, #36]	@ 0x24
	TickType_t min_css = 0;
 800153a:	2300      	movs	r3, #0
 800153c:	647b      	str	r3, [r7, #68]	@ 0x44
	TickType_t max_css = 0;
 800153e:	2300      	movs	r3, #0
 8001540:	643b      	str	r3, [r7, #64]	@ 0x40
	TickType_t sum_up = 0; //
 8001542:	2300      	movs	r3, #0
 8001544:	63fb      	str	r3, [r7, #60]	@ 0x3c
	ListItem_t *xItm = listGET_HEAD_ENTRY(&xTasksList); // this is xListEnd.pxNext
 8001546:	4b42      	ldr	r3, [pc, #264]	@ (8001650 <prvComputeSporadicServerProprierties+0x188>)
 8001548:	68db      	ldr	r3, [r3, #12]
 800154a:	63bb      	str	r3, [r7, #56]	@ 0x38
	for (int i = 0; i < xListTasksNumber; i++) {
 800154c:	2300      	movs	r3, #0
 800154e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001550:	e03d      	b.n	80015ce <prvComputeSporadicServerProprierties+0x106>
	    extTCB_t *xTCB = (extTCB_t *) xItm->pvOwner;
 8001552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001554:	68db      	ldr	r3, [r3, #12]
 8001556:	61fb      	str	r3, [r7, #28]
	    configASSERT(xTCB != NULL);  // Make sure we don't dereference garbage
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d10b      	bne.n	8001576 <prvComputeSporadicServerProprierties+0xae>
	__asm volatile
 800155e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001562:	f383 8811 	msr	BASEPRI, r3
 8001566:	f3bf 8f6f 	isb	sy
 800156a:	f3bf 8f4f 	dsb	sy
 800156e:	613b      	str	r3, [r7, #16]
}
 8001570:	bf00      	nop
 8001572:	bf00      	nop
 8001574:	e7fd      	b.n	8001572 <prvComputeSporadicServerProprierties+0xaa>
		TickType_t t_wcet = xTCB->xTaskWCET;
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800157a:	61bb      	str	r3, [r7, #24]
		TickType_t t_per = xTCB->xTaskPeriod;
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001580:	617b      	str	r3, [r7, #20]
		if(t_wcet > min_css){
 8001582:	69ba      	ldr	r2, [r7, #24]
 8001584:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001586:	429a      	cmp	r2, r3
 8001588:	d901      	bls.n	800158e <prvComputeSporadicServerProprierties+0xc6>
			min_css = t_wcet;
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		max_css += t_wcet;
 800158e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	4413      	add	r3, r2
 8001594:	643b      	str	r3, [r7, #64]	@ 0x40
		configASSERT(t_per > 0);
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d10b      	bne.n	80015b4 <prvComputeSporadicServerProprierties+0xec>
	__asm volatile
 800159c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80015a0:	f383 8811 	msr	BASEPRI, r3
 80015a4:	f3bf 8f6f 	isb	sy
 80015a8:	f3bf 8f4f 	dsb	sy
 80015ac:	60fb      	str	r3, [r7, #12]
}
 80015ae:	bf00      	nop
 80015b0:	bf00      	nop
 80015b2:	e7fd      	b.n	80015b0 <prvComputeSporadicServerProprierties+0xe8>
		sum_up += (t_wcet/t_per);
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80015bc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80015be:	4413      	add	r3, r2
 80015c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
	    xItm = listGET_NEXT(xItm);
 80015c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	63bb      	str	r3, [r7, #56]	@ 0x38
	for (int i = 0; i < xListTasksNumber; i++) {
 80015c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015ca:	3301      	adds	r3, #1
 80015cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80015ce:	4b22      	ldr	r3, [pc, #136]	@ (8001658 <prvComputeSporadicServerProprierties+0x190>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80015d4:	429a      	cmp	r2, r3
 80015d6:	dbbc      	blt.n	8001552 <prvComputeSporadicServerProprierties+0x8a>
	}
	TickType_t Css = max_css;
 80015d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80015da:	633b      	str	r3, [r7, #48]	@ 0x30
	TickType_t Uss = U - sum_up;
 80015dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	623b      	str	r3, [r7, #32]
	TickType_t Tss = 0;
 80015e4:	2300      	movs	r3, #0
 80015e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while(Css >= min_css ){
 80015e8:	e01b      	b.n	8001622 <prvComputeSporadicServerProprierties+0x15a>
		configASSERT(Css > 0);
 80015ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d10b      	bne.n	8001608 <prvComputeSporadicServerProprierties+0x140>
	__asm volatile
 80015f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80015f4:	f383 8811 	msr	BASEPRI, r3
 80015f8:	f3bf 8f6f 	isb	sy
 80015fc:	f3bf 8f4f 	dsb	sy
 8001600:	60bb      	str	r3, [r7, #8]
}
 8001602:	bf00      	nop
 8001604:	bf00      	nop
 8001606:	e7fd      	b.n	8001604 <prvComputeSporadicServerProprierties+0x13c>
		Tss = Css/Uss;
 8001608:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800160a:	6a3b      	ldr	r3, [r7, #32]
 800160c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001610:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if(Tss > prvXMaxInterrarrivalTime){
 8001612:	4b12      	ldr	r3, [pc, #72]	@ (800165c <prvComputeSporadicServerProprierties+0x194>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001618:	429a      	cmp	r2, r3
 800161a:	d907      	bls.n	800162c <prvComputeSporadicServerProprierties+0x164>
			//not ok tss, keep going
			Css -= 1;
 800161c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800161e:	3b01      	subs	r3, #1
 8001620:	633b      	str	r3, [r7, #48]	@ 0x30
	while(Css >= min_css ){
 8001622:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001624:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001626:	429a      	cmp	r2, r3
 8001628:	d2df      	bcs.n	80015ea <prvComputeSporadicServerProprierties+0x122>
 800162a:	e000      	b.n	800162e <prvComputeSporadicServerProprierties+0x166>
		}else{
			//ok tss
			break;
 800162c:	bf00      	nop
		}
	}
	*tSS_Period = Tss;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001632:	601a      	str	r2, [r3, #0]
	*tSS_WCET = Css;
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001638:	601a      	str	r2, [r3, #0]
}
 800163a:	bf00      	nop
 800163c:	3748      	adds	r7, #72	@ 0x48
 800163e:	46bd      	mov	sp, r7
 8001640:	bdb0      	pop	{r4, r5, r7, pc}
 8001642:	bf00      	nop
 8001644:	f3af 8000 	nop.w
 8001648:	00000000 	.word	0x00000000
 800164c:	40000000 	.word	0x40000000
 8001650:	20000080 	.word	0x20000080
 8001654:	3ff00000 	.word	0x3ff00000
 8001658:	20000094 	.word	0x20000094
 800165c:	2000009c 	.word	0x2000009c

08001660 <prvMSTGenericReplenishmentTimerCallback>:


#if (mst_USE_SPORADIC_SERVER == 1 && mst_schedSCHEDULING_POLICY == mst_schedSCHEDULING_RMS)

volatile BaseType_t SporadicServerBudget = 0;
static void prvMSTGenericReplenishmentTimerCallback(TimerHandle_t xTimer) {
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
	/*
	 Notify a sporadic task but make sure it knows it was the timer to notify, by passing a parameter
	 */
	taskENTER_CRITICAL();
 8001668:	f006 fffe 	bl	8008668 <vPortEnterCritical>
	BaseType_t param = (BaseType_t) pvTimerGetTimerID(xTimer);
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f006 fea5 	bl	80083bc <pvTimerGetTimerID>
 8001672:	4603      	mov	r3, r0
 8001674:	60fb      	str	r3, [r7, #12]
	SporadicServerBudget += param;
 8001676:	4b06      	ldr	r3, [pc, #24]	@ (8001690 <prvMSTGenericReplenishmentTimerCallback+0x30>)
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	4413      	add	r3, r2
 800167e:	4a04      	ldr	r2, [pc, #16]	@ (8001690 <prvMSTGenericReplenishmentTimerCallback+0x30>)
 8001680:	6013      	str	r3, [r2, #0]
	taskEXIT_CRITICAL();
 8001682:	f007 f823 	bl	80086cc <vPortExitCritical>
}
 8001686:	bf00      	nop
 8001688:	3710      	adds	r7, #16
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	200000a0 	.word	0x200000a0

08001694 <prvMSTSporadicServerJob>:
volatile BaseType_t isNextTaskAvailable = pdFALSE;

static void prvMSTSporadicServerJob(void *pvParameters) {
 8001694:	b580      	push	{r7, lr}
 8001696:	b08e      	sub	sp, #56	@ 0x38
 8001698:	af02      	add	r7, sp, #8
 800169a:	6078      	str	r0, [r7, #4]
	
	TaskHandle_t xCurrentHandle = xTaskGetCurrentTaskHandle();
 800169c:	f005 ff76 	bl	800758c <xTaskGetCurrentTaskHandle>
 80016a0:	62f8      	str	r0, [r7, #44]	@ 0x2c
	extTCB_t *xCurrExtTCB = (extTCB_t*) pvTaskGetThreadLocalStoragePointer(
 80016a2:	2100      	movs	r1, #0
 80016a4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80016a6:	f005 fdb3 	bl	8007210 <pvTaskGetThreadLocalStoragePointer>
 80016aa:	62b8      	str	r0, [r7, #40]	@ 0x28
			xCurrentHandle, mstLOCAL_STORAGE_DATA_INDEX);
	configASSERT(xCurrExtTCB != NULL);
 80016ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d10b      	bne.n	80016ca <prvMSTSporadicServerJob+0x36>
	__asm volatile
 80016b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80016b6:	f383 8811 	msr	BASEPRI, r3
 80016ba:	f3bf 8f6f 	isb	sy
 80016be:	f3bf 8f4f 	dsb	sy
 80016c2:	61bb      	str	r3, [r7, #24]
}
 80016c4:	bf00      	nop
 80016c6:	bf00      	nop
 80016c8:	e7fd      	b.n	80016c6 <prvMSTSporadicServerJob+0x32>
	SporadicServerBudget = xCurrExtTCB->xTaskWCET;
 80016ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016ce:	461a      	mov	r2, r3
 80016d0:	4b46      	ldr	r3, [pc, #280]	@ (80017ec <prvMSTSporadicServerJob+0x158>)
 80016d2:	601a      	str	r2, [r3, #0]
	for (;;) {
		while(SporadicServerBudget <= 0);
 80016d4:	bf00      	nop
 80016d6:	4b45      	ldr	r3, [pc, #276]	@ (80017ec <prvMSTSporadicServerJob+0x158>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	ddfb      	ble.n	80016d6 <prvMSTSporadicServerJob+0x42>
		while (listLIST_IS_EMPTY(&xTasksList));
 80016de:	bf00      	nop
 80016e0:	4b43      	ldr	r3, [pc, #268]	@ (80017f0 <prvMSTSporadicServerJob+0x15c>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d0fb      	beq.n	80016e0 <prvMSTSporadicServerJob+0x4c>
		ListItem_t *xItm = listGET_HEAD_ENTRY(&xTasksList);
 80016e8:	4b41      	ldr	r3, [pc, #260]	@ (80017f0 <prvMSTSporadicServerJob+0x15c>)
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	627b      	str	r3, [r7, #36]	@ 0x24
		extTCB_t *xTCB = (extTCB_t *) xItm->pvOwner;
 80016ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	623b      	str	r3, [r7, #32]
		if(xTCB->xJobCalled){
 80016f4:	6a3b      	ldr	r3, [r7, #32]
 80016f6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d06d      	beq.n	80017d8 <prvMSTSporadicServerJob+0x144>
			//task is running
			uint32_t notificationGiver;
			if (xTaskNotifyWait(0, NOTIFY_SS_REQUEST_DONE | NOTIFY_SS_BUDGET_FINISHED,
 80016fc:	f107 020c 	add.w	r2, r7, #12
 8001700:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001704:	2118      	movs	r1, #24
 8001706:	2000      	movs	r0, #0
 8001708:	f006 f92a 	bl	8007960 <xTaskNotifyWait>
 800170c:	4603      	mov	r3, r0
 800170e:	2b01      	cmp	r3, #1
 8001710:	d1e0      	bne.n	80016d4 <prvMSTSporadicServerJob+0x40>
					&notificationGiver, portMAX_DELAY) == pdPASS) {
				if (notificationGiver & NOTIFY_SS_REQUEST_DONE) {
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	f003 0308 	and.w	r3, r3, #8
 8001718:	2b00      	cmp	r3, #0
 800171a:	d0db      	beq.n	80016d4 <prvMSTSporadicServerJob+0x40>
					/*the Sporadic job finished, we remove budget and
					schedule replenishment. Note that xPrevExecTime considers
					only the time for which the job actually ran in us, time used
					form preempted tasks by the FreeRTOS kernel are not considered
					*/
					taskENTER_CRITICAL();
 800171c:	f006 ffa4 	bl	8008668 <vPortEnterCritical>
					SporadicServerBudget = SporadicServerBudget - xTCB->xPrevExecTime;
 8001720:	4b32      	ldr	r3, [pc, #200]	@ (80017ec <prvMSTSporadicServerJob+0x158>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	461a      	mov	r2, r3
 8001726:	6a3b      	ldr	r3, [r7, #32]
 8001728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	461a      	mov	r2, r3
 800172e:	4b2f      	ldr	r3, [pc, #188]	@ (80017ec <prvMSTSporadicServerJob+0x158>)
 8001730:	601a      	str	r2, [r3, #0]
					if(SporadicServerBudget < 0){
 8001732:	4b2e      	ldr	r3, [pc, #184]	@ (80017ec <prvMSTSporadicServerJob+0x158>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	2b00      	cmp	r3, #0
 8001738:	da02      	bge.n	8001740 <prvMSTSporadicServerJob+0xac>
						//This should never happen
						SporadicServerBudget = 0;
 800173a:	4b2c      	ldr	r3, [pc, #176]	@ (80017ec <prvMSTSporadicServerJob+0x158>)
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
					}
					/*
					Now schedule replenishment in time period + exec. time
					*/
					TimerHandle_t xTimer = xTimerCreate("replenishment timer", // Name of the timer
					pdMS_TO_TICKS(xCurrExtTCB->xTaskInterarrivalTime), // Timer period in ticks
 8001740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001742:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001744:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001748:	fb02 f303 	mul.w	r3, r2, r3
					TimerHandle_t xTimer = xTimerCreate("replenishment timer", // Name of the timer
 800174c:	4a29      	ldr	r2, [pc, #164]	@ (80017f4 <prvMSTSporadicServerJob+0x160>)
 800174e:	fba2 2303 	umull	r2, r3, r2, r3
 8001752:	0999      	lsrs	r1, r3, #6
					pdFALSE,                               // Auto-reload (periodic)
					(void*) (xTCB->xPrevExecTime), // Replenishment time as parameter
 8001754:	6a3b      	ldr	r3, [r7, #32]
 8001756:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
					TimerHandle_t xTimer = xTimerCreate("replenishment timer", // Name of the timer
 8001758:	461a      	mov	r2, r3
 800175a:	4b27      	ldr	r3, [pc, #156]	@ (80017f8 <prvMSTSporadicServerJob+0x164>)
 800175c:	9300      	str	r3, [sp, #0]
 800175e:	4613      	mov	r3, r2
 8001760:	2200      	movs	r2, #0
 8001762:	4826      	ldr	r0, [pc, #152]	@ (80017fc <prvMSTSporadicServerJob+0x168>)
 8001764:	f006 fabc 	bl	8007ce0 <xTimerCreate>
 8001768:	61f8      	str	r0, [r7, #28]
					prvMSTGenericReplenishmentTimerCallback                 // Callback function
					);
					/*
					Now remove the job and start the replenishment timer
					*/
					if (listIS_CONTAINED_WITHIN(&xTasksList, &(xTCB->pxTaskTCBListItem))) {
 800176a:	6a3b      	ldr	r3, [r7, #32]
 800176c:	691b      	ldr	r3, [r3, #16]
 800176e:	4a20      	ldr	r2, [pc, #128]	@ (80017f0 <prvMSTSporadicServerJob+0x15c>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d116      	bne.n	80017a2 <prvMSTSporadicServerJob+0x10e>
						uxListRemove(&(xTCB->pxTaskTCBListItem));
 8001774:	6a3b      	ldr	r3, [r7, #32]
 8001776:	4618      	mov	r0, r3
 8001778:	f003 ff86 	bl	8005688 <uxListRemove>
						xListTasksNumber--;
 800177c:	4b20      	ldr	r3, [pc, #128]	@ (8001800 <prvMSTSporadicServerJob+0x16c>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	3b01      	subs	r3, #1
 8001782:	4a1f      	ldr	r2, [pc, #124]	@ (8001800 <prvMSTSporadicServerJob+0x16c>)
 8001784:	6013      	str	r3, [r2, #0]
					} else {
						configASSERT(pdFALSE);
					}
					configASSERT(xTimerStart(xTimer, 0) == pdPASS)
 8001786:	f005 f9f3 	bl	8006b70 <xTaskGetTickCount>
 800178a:	4602      	mov	r2, r0
 800178c:	2300      	movs	r3, #0
 800178e:	9300      	str	r3, [sp, #0]
 8001790:	2300      	movs	r3, #0
 8001792:	2101      	movs	r1, #1
 8001794:	69f8      	ldr	r0, [r7, #28]
 8001796:	f006 fb01 	bl	8007d9c <xTimerGenericCommand>
 800179a:	4603      	mov	r3, r0
 800179c:	2b01      	cmp	r3, #1
 800179e:	d018      	beq.n	80017d2 <prvMSTSporadicServerJob+0x13e>
 80017a0:	e00b      	b.n	80017ba <prvMSTSporadicServerJob+0x126>
	__asm volatile
 80017a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80017a6:	f383 8811 	msr	BASEPRI, r3
 80017aa:	f3bf 8f6f 	isb	sy
 80017ae:	f3bf 8f4f 	dsb	sy
 80017b2:	617b      	str	r3, [r7, #20]
}
 80017b4:	bf00      	nop
						configASSERT(pdFALSE);
 80017b6:	bf00      	nop
 80017b8:	e7fd      	b.n	80017b6 <prvMSTSporadicServerJob+0x122>
	__asm volatile
 80017ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80017be:	f383 8811 	msr	BASEPRI, r3
 80017c2:	f3bf 8f6f 	isb	sy
 80017c6:	f3bf 8f4f 	dsb	sy
 80017ca:	613b      	str	r3, [r7, #16]
}
 80017cc:	bf00      	nop
					configASSERT(xTimerStart(xTimer, 0) == pdPASS)
 80017ce:	bf00      	nop
 80017d0:	e7fd      	b.n	80017ce <prvMSTSporadicServerJob+0x13a>
					taskEXIT_CRITICAL();
 80017d2:	f006 ff7b 	bl	80086cc <vPortExitCritical>
 80017d6:	e77d      	b.n	80016d4 <prvMSTSporadicServerJob+0x40>
			}
		}else{
			/*run the task by notifying a SS request
			This should put xJobCalled = pdTRUE
			*/
			xTaskNotify(*(xCurrExtTCB->pxCreatedTask), NOTIFY_SS_REQUEST, eSetBits);
 80017d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017dc:	6818      	ldr	r0, [r3, #0]
 80017de:	2300      	movs	r3, #0
 80017e0:	2201      	movs	r2, #1
 80017e2:	2104      	movs	r1, #4
 80017e4:	f006 f91c 	bl	8007a20 <xTaskGenericNotify>
	for (;;) {
 80017e8:	e774      	b.n	80016d4 <prvMSTSporadicServerJob+0x40>
 80017ea:	bf00      	nop
 80017ec:	200000a0 	.word	0x200000a0
 80017f0:	20000080 	.word	0x20000080
 80017f4:	10624dd3 	.word	0x10624dd3
 80017f8:	08001661 	.word	0x08001661
 80017fc:	0800a898 	.word	0x0800a898
 8001800:	20000094 	.word	0x20000094

08001804 <prvComputeOrderedPriorities>:
/*
 *TODO: This can be obviously optimized by using an appropriate data structure
 Now it does quicksort after getting list, we have O(n log n) in best case
 */

static BaseType_t prvComputeOrderedPriorities() {
 8001804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001808:	b090      	sub	sp, #64	@ 0x40
 800180a:	af00      	add	r7, sp, #0
 800180c:	466b      	mov	r3, sp
 800180e:	4698      	mov	r8, r3
	extTCB_t *listArray[xListTasksNumber];
 8001810:	4b55      	ldr	r3, [pc, #340]	@ (8001968 <prvComputeOrderedPriorities+0x164>)
 8001812:	681e      	ldr	r6, [r3, #0]
 8001814:	1e73      	subs	r3, r6, #1
 8001816:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001818:	4632      	mov	r2, r6
 800181a:	2300      	movs	r3, #0
 800181c:	4614      	mov	r4, r2
 800181e:	461d      	mov	r5, r3
 8001820:	f04f 0200 	mov.w	r2, #0
 8001824:	f04f 0300 	mov.w	r3, #0
 8001828:	016b      	lsls	r3, r5, #5
 800182a:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 800182e:	0162      	lsls	r2, r4, #5
 8001830:	4632      	mov	r2, r6
 8001832:	2300      	movs	r3, #0
 8001834:	4610      	mov	r0, r2
 8001836:	4619      	mov	r1, r3
 8001838:	f04f 0200 	mov.w	r2, #0
 800183c:	f04f 0300 	mov.w	r3, #0
 8001840:	014b      	lsls	r3, r1, #5
 8001842:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001846:	0142      	lsls	r2, r0, #5
 8001848:	4633      	mov	r3, r6
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	3307      	adds	r3, #7
 800184e:	08db      	lsrs	r3, r3, #3
 8001850:	00db      	lsls	r3, r3, #3
 8001852:	ebad 0d03 	sub.w	sp, sp, r3
 8001856:	466b      	mov	r3, sp
 8001858:	3303      	adds	r3, #3
 800185a:	089b      	lsrs	r3, r3, #2
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	62bb      	str	r3, [r7, #40]	@ 0x28
	//transfer linked list to array
	int i = 0;
 8001860:	2300      	movs	r3, #0
 8001862:	627b      	str	r3, [r7, #36]	@ 0x24
	//configASSERT(xTasksList.uxNumberOfItems == xListTasksNumber);
	ListItem_t *xItm = listGET_HEAD_ENTRY(&xTasksList); // this is xListEnd.pxNext
 8001864:	4b41      	ldr	r3, [pc, #260]	@ (800196c <prvComputeOrderedPriorities+0x168>)
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	63fb      	str	r3, [r7, #60]	@ 0x3c
	for (int i = 0; i < xListTasksNumber; i++) {
 800186a:	2300      	movs	r3, #0
 800186c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800186e:	e01c      	b.n	80018aa <prvComputeOrderedPriorities+0xa6>
	    extTCB_t *xTCB = (extTCB_t *) xItm->pvOwner;
 8001870:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	613b      	str	r3, [r7, #16]

	    configASSERT(xTCB != NULL);  // Make sure we don't dereference garbage
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d10b      	bne.n	8001894 <prvComputeOrderedPriorities+0x90>
	__asm volatile
 800187c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001880:	f383 8811 	msr	BASEPRI, r3
 8001884:	f3bf 8f6f 	isb	sy
 8001888:	f3bf 8f4f 	dsb	sy
 800188c:	60fb      	str	r3, [r7, #12]
}
 800188e:	bf00      	nop
 8001890:	bf00      	nop
 8001892:	e7fd      	b.n	8001890 <prvComputeOrderedPriorities+0x8c>
	    listArray[i] = xTCB;
 8001894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001896:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001898:	6939      	ldr	r1, [r7, #16]
 800189a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	    xItm = listGET_NEXT(xItm);
 800189e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	for (int i = 0; i < xListTasksNumber; i++) {
 80018a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80018a6:	3301      	adds	r3, #1
 80018a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80018aa:	4b2f      	ldr	r3, [pc, #188]	@ (8001968 <prvComputeOrderedPriorities+0x164>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80018b0:	429a      	cmp	r2, r3
 80018b2:	dbdd      	blt.n	8001870 <prvComputeOrderedPriorities+0x6c>

	}

	qsort(listArray, xListTasksNumber, sizeof(extTCB_t*), prv_compare);
 80018b4:	4b2c      	ldr	r3, [pc, #176]	@ (8001968 <prvComputeOrderedPriorities+0x164>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4619      	mov	r1, r3
 80018ba:	4b2d      	ldr	r3, [pc, #180]	@ (8001970 <prvComputeOrderedPriorities+0x16c>)
 80018bc:	2204      	movs	r2, #4
 80018be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80018c0:	f007 fa1b 	bl	8008cfa <qsort>
	UBaseType_t uxUsedPriority = prvSTARTING_PRIORITY;
 80018c4:	2305      	movs	r3, #5
 80018c6:	637b      	str	r3, [r7, #52]	@ 0x34

	for (UBaseType_t xCurrInx = 0; xCurrInx < xListTasksNumber; xCurrInx++) {
 80018c8:	2300      	movs	r3, #0
 80018ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80018cc:	e03f      	b.n	800194e <prvComputeOrderedPriorities+0x14a>
		extTCB_t *xTCB_Reference = listArray[xCurrInx];
 80018ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80018d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018d6:	623b      	str	r3, [r7, #32]
		UBaseType_t bNewPriority = uxUsedPriority++;
 80018d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018da:	1c5a      	adds	r2, r3, #1
 80018dc:	637a      	str	r2, [r7, #52]	@ 0x34
 80018de:	61fb      	str	r3, [r7, #28]
		xTCB_Reference->uxPriority = bNewPriority;
 80018e0:	6a3b      	ldr	r3, [r7, #32]
 80018e2:	69fa      	ldr	r2, [r7, #28]
 80018e4:	625a      	str	r2, [r3, #36]	@ 0x24
#if mst_schedSCHEDULING_POLICY == mst_schedSCHEDULING_RMS
		/*
		 * Here we create the periodic tasks that we saved in the list
		 */
		configASSERT(prvPeriodicTaskCreate(xTCB_Reference));
 80018e6:	6a38      	ldr	r0, [r7, #32]
 80018e8:	f7ff fb26 	bl	8000f38 <prvPeriodicTaskCreate>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d123      	bne.n	800193a <prvComputeOrderedPriorities+0x136>
	__asm volatile
 80018f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80018f6:	f383 8811 	msr	BASEPRI, r3
 80018fa:	f3bf 8f6f 	isb	sy
 80018fe:	f3bf 8f4f 	dsb	sy
 8001902:	60bb      	str	r3, [r7, #8]
}
 8001904:	bf00      	nop
 8001906:	bf00      	nop
 8001908:	e7fd      	b.n	8001906 <prvComputeOrderedPriorities+0x102>
#if mst_USE_SPORADIC_SERVER == 1
		//now the list shall be emptied and used to track sporadic jobs
		while (!listLIST_IS_EMPTY(&xTasksList)) {
			ListItem_t *pxItem = listGET_HEAD_ENTRY(&xTasksList); // first real item
 800190a:	4b18      	ldr	r3, [pc, #96]	@ (800196c <prvComputeOrderedPriorities+0x168>)
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	61bb      	str	r3, [r7, #24]
			extTCB_t *xTCB = (extTCB_t *) pxItem->pvOwner;
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	617b      	str	r3, [r7, #20]
			configASSERT(xTCB != NULL);
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d10b      	bne.n	8001934 <prvComputeOrderedPriorities+0x130>
	__asm volatile
 800191c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001920:	f383 8811 	msr	BASEPRI, r3
 8001924:	f3bf 8f6f 	isb	sy
 8001928:	f3bf 8f4f 	dsb	sy
 800192c:	607b      	str	r3, [r7, #4]
}
 800192e:	bf00      	nop
 8001930:	bf00      	nop
 8001932:	e7fd      	b.n	8001930 <prvComputeOrderedPriorities+0x12c>
			uxListRemove(pxItem); 
 8001934:	69b8      	ldr	r0, [r7, #24]
 8001936:	f003 fea7 	bl	8005688 <uxListRemove>
		while (!listLIST_IS_EMPTY(&xTasksList)) {
 800193a:	4b0c      	ldr	r3, [pc, #48]	@ (800196c <prvComputeOrderedPriorities+0x168>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d1e3      	bne.n	800190a <prvComputeOrderedPriorities+0x106>
		}
		xListTasksNumber = 0;
 8001942:	4b09      	ldr	r3, [pc, #36]	@ (8001968 <prvComputeOrderedPriorities+0x164>)
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
	for (UBaseType_t xCurrInx = 0; xCurrInx < xListTasksNumber; xCurrInx++) {
 8001948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800194a:	3301      	adds	r3, #1
 800194c:	633b      	str	r3, [r7, #48]	@ 0x30
 800194e:	4b06      	ldr	r3, [pc, #24]	@ (8001968 <prvComputeOrderedPriorities+0x164>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	461a      	mov	r2, r3
 8001954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001956:	4293      	cmp	r3, r2
 8001958:	d3b9      	bcc.n	80018ce <prvComputeOrderedPriorities+0xca>
#elif mst_schedSCHEDULING_POLICY == mst_schedSCHEDULING_EDF
		configASSERT(xTCB_Reference->pxCreatedTask != NULL);
			vTaskPrioritySet(*(xTCB_Reference->pxCreatedTask), bNewPriority);
			#endif
	}
	return pdPASS;
 800195a:	2301      	movs	r3, #1
 800195c:	46c5      	mov	sp, r8
}
 800195e:	4618      	mov	r0, r3
 8001960:	3740      	adds	r7, #64	@ 0x40
 8001962:	46bd      	mov	sp, r7
 8001964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001968:	20000094 	.word	0x20000094
 800196c:	20000080 	.word	0x20000080
 8001970:	08001483 	.word	0x08001483

08001974 <vMSTSchedulerStart>:


/*
 MST version of scheduler start
 */
void vMSTSchedulerStart(void) {
 8001974:	b580      	push	{r7, lr}
 8001976:	b08a      	sub	sp, #40	@ 0x28
 8001978:	af06      	add	r7, sp, #24
#if(TESTING_STM32 == 1)
	prvMSTSetupUSClock();
 800197a:	f7ff faab 	bl	8000ed4 <prvMSTSetupUSClock>
/*
We compute the sporadic servers WCET and Tss, how this is done is better explained in the function called
*/
	TickType_t tSS_Period;
	TickType_t tSS_WCET;
	prvComputeSporadicServerProprierties(&tSS_Period, &tSS_WCET);
 800197e:	1d3a      	adds	r2, r7, #4
 8001980:	f107 0308 	add.w	r3, r7, #8
 8001984:	4611      	mov	r1, r2
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff fd9e 	bl	80014c8 <prvComputeSporadicServerProprierties>
	/*
	The sporadic server task is created like a normal "user-space" periodic task (priority is not relevant as recomputed later for RMS)
	*/
	vMSTPeriodicTaskCreate(prvMSTSporadicServerJob, "SS", mst_SPORADIC_SERVER_STACK_SIZE, NULL, pdFALSE, SporadicServerHandle, tSS_Period, tSS_Period, 0, tSS_WCET);
 800198c:	4b14      	ldr	r3, [pc, #80]	@ (80019e0 <vMSTSchedulerStart+0x6c>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	68ba      	ldr	r2, [r7, #8]
 8001992:	68b9      	ldr	r1, [r7, #8]
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	9005      	str	r0, [sp, #20]
 8001998:	2000      	movs	r0, #0
 800199a:	9004      	str	r0, [sp, #16]
 800199c:	9103      	str	r1, [sp, #12]
 800199e:	9202      	str	r2, [sp, #8]
 80019a0:	9301      	str	r3, [sp, #4]
 80019a2:	2300      	movs	r3, #0
 80019a4:	9300      	str	r3, [sp, #0]
 80019a6:	2300      	movs	r3, #0
 80019a8:	2280      	movs	r2, #128	@ 0x80
 80019aa:	490e      	ldr	r1, [pc, #56]	@ (80019e4 <vMSTSchedulerStart+0x70>)
 80019ac:	480e      	ldr	r0, [pc, #56]	@ (80019e8 <vMSTSchedulerStart+0x74>)
 80019ae:	f7ff fb7d 	bl	80010ac <vMSTPeriodicTaskCreate>
#endif
	configASSERT(prvComputeOrderedPriorities());
 80019b2:	f7ff ff27 	bl	8001804 <prvComputeOrderedPriorities>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d10b      	bne.n	80019d4 <vMSTSchedulerStart+0x60>
	__asm volatile
 80019bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80019c0:	f383 8811 	msr	BASEPRI, r3
 80019c4:	f3bf 8f6f 	isb	sy
 80019c8:	f3bf 8f4f 	dsb	sy
 80019cc:	60fb      	str	r3, [r7, #12]
}
 80019ce:	bf00      	nop
 80019d0:	bf00      	nop
 80019d2:	e7fd      	b.n	80019d0 <vMSTSchedulerStart+0x5c>

#endif

	vTaskStartScheduler();
 80019d4:	f004 ffae 	bl	8006934 <vTaskStartScheduler>

}
 80019d8:	bf00      	nop
 80019da:	3710      	adds	r7, #16
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	20000098 	.word	0x20000098
 80019e4:	0800a8ac 	.word	0x0800a8ac
 80019e8:	08001695 	.word	0x08001695

080019ec <prvMSTDispatch>:
 * @param xOfTaskType the task can be periodic or sporadic
 * @param xFromUserRequest used for sporadic tasks. If true the user called the task to run. If false the interarrival timer asked to run the task
 */

static void prvMSTDispatch(TaskHandle_t *forTask, BaseType_t xAsCallee,
		taskType_e xOfTaskType, BaseType_t xFromUserRequest) {
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b088      	sub	sp, #32
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	603b      	str	r3, [r7, #0]
 80019f8:	4613      	mov	r3, r2
 80019fa:	71fb      	strb	r3, [r7, #7]

	if (xAsCallee == pdTRUE) {
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d138      	bne.n	8001a74 <prvMSTDispatch+0x88>
		extTCB_t *xCurrExtTCB = (extTCB_t*) pvTaskGetThreadLocalStoragePointer(
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2100      	movs	r1, #0
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f005 fc01 	bl	8007210 <pvTaskGetThreadLocalStoragePointer>
 8001a0e:	61f8      	str	r0, [r7, #28]
		}
		taskEXIT_CRITICAL();
#else
		//nothing
#endif
		switch (xOfTaskType) {
 8001a10:	79fb      	ldrb	r3, [r7, #7]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d002      	beq.n	8001a1c <prvMSTDispatch+0x30>
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d008      	beq.n	8001a2c <prvMSTDispatch+0x40>
 8001a1a:	e01e      	b.n	8001a5a <prvMSTDispatch+0x6e>
		case taskTypePeriodic:
			//run the periodic task by unlocking the semaphore
			xTaskNotifyGive(*forTask);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	6818      	ldr	r0, [r3, #0]
 8001a20:	2300      	movs	r3, #0
 8001a22:	2202      	movs	r2, #2
 8001a24:	2100      	movs	r1, #0
 8001a26:	f005 fffb 	bl	8007a20 <xTaskGenericNotify>
			break;
 8001a2a:	e023      	b.n	8001a74 <prvMSTDispatch+0x88>
		case taskTypeSporadic:
			#if (mst_USE_SPORADIC_SERVER == 1)
			/*with sporadic server we update the runnable task thread,
			the sporadic server task will handle it
			*/
			prvAddItemToxTasksList(xCurrExtTCB, xCurrExtTCB->xTaskDeadline);
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a30:	4619      	mov	r1, r3
 8001a32:	69f8      	ldr	r0, [r7, #28]
 8001a34:	f7ff fb02 	bl	800103c <prvAddItemToxTasksList>
		    configASSERT(prvComputeOrderedPriorities());
 8001a38:	f7ff fee4 	bl	8001804 <prvComputeOrderedPriorities>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d117      	bne.n	8001a72 <prvMSTDispatch+0x86>
	__asm volatile
 8001a42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001a46:	f383 8811 	msr	BASEPRI, r3
 8001a4a:	f3bf 8f6f 	isb	sy
 8001a4e:	f3bf 8f4f 	dsb	sy
 8001a52:	61bb      	str	r3, [r7, #24]
}
 8001a54:	bf00      	nop
 8001a56:	bf00      	nop
 8001a58:	e7fd      	b.n	8001a56 <prvMSTDispatch+0x6a>
	__asm volatile
 8001a5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001a5e:	f383 8811 	msr	BASEPRI, r3
 8001a62:	f3bf 8f6f 	isb	sy
 8001a66:	f3bf 8f4f 	dsb	sy
 8001a6a:	617b      	str	r3, [r7, #20]
}
 8001a6c:	bf00      	nop
				xTaskNotify(*forTask, NOTIFY_INTERARRIVAL_TIMER, eSetBits);
			}
			#endif
			break;
		default:
			configASSERT(pdFALSE)
 8001a6e:	bf00      	nop
 8001a70:	e7fd      	b.n	8001a6e <prvMSTDispatch+0x82>
			break;
 8001a72:	bf00      	nop
    taskEXIT_CRITICAL();

#endif
	}

}
 8001a74:	bf00      	nop
 8001a76:	3720      	adds	r7, #32
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
	ulStatsTimerTicks = 0;
 8001a80:	4b03      	ldr	r3, [pc, #12]	@ (8001a90 <configureTimerForRunTimeStats+0x14>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim10);
 8001a86:	4803      	ldr	r0, [pc, #12]	@ (8001a94 <configureTimerForRunTimeStats+0x18>)
 8001a88:	f002 f8ec 	bl	8003c64 <HAL_TIM_Base_Start_IT>
}
 8001a8c:	bf00      	nop
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	200000a4 	.word	0x200000a4
 8001a94:	200000f0 	.word	0x200000f0

08001a98 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
return ulStatsTimerTicks;
 8001a9c:	4b03      	ldr	r3, [pc, #12]	@ (8001aac <getRunTimeCounterValue+0x14>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	200000a4 	.word	0x200000a4

08001ab0 <MSTTask1>:
TaskHandle_t Task1Handle;
TaskHandle_t Task2Handle;
TaskHandle_t Task3Handle;
TaskHandle_t Task4Handle;

void MSTTask1(void *pvParameters) {
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
	if (xSemaphoreTake(xBinarySemUART2, portMAX_DELAY) == pdTRUE) {
 8001ab8:	4b10      	ldr	r3, [pc, #64]	@ (8001afc <MSTTask1+0x4c>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f004 fa63 	bl	8005f8c <xQueueSemaphoreTake>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d113      	bne.n	8001af4 <MSTTask1+0x44>
		length = snprintf((char*) transmit, sizeof(transmit), "Task1\n");
 8001acc:	4a0c      	ldr	r2, [pc, #48]	@ (8001b00 <MSTTask1+0x50>)
 8001ace:	2114      	movs	r1, #20
 8001ad0:	480c      	ldr	r0, [pc, #48]	@ (8001b04 <MSTTask1+0x54>)
 8001ad2:	f007 fa59 	bl	8008f88 <sniprintf>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	4a0b      	ldr	r2, [pc, #44]	@ (8001b08 <MSTTask1+0x58>)
 8001ada:	6013      	str	r3, [r2, #0]
		HAL_Delay(300);
 8001adc:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001ae0:	f000 fd5a 	bl	8002598 <HAL_Delay>
		HAL_UART_Transmit_DMA(&huart2, transmit, length);
 8001ae4:	4b08      	ldr	r3, [pc, #32]	@ (8001b08 <MSTTask1+0x58>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	461a      	mov	r2, r3
 8001aec:	4905      	ldr	r1, [pc, #20]	@ (8001b04 <MSTTask1+0x54>)
 8001aee:	4807      	ldr	r0, [pc, #28]	@ (8001b0c <MSTTask1+0x5c>)
 8001af0:	f002 fcf2 	bl	80044d8 <HAL_UART_Transmit_DMA>
	}
}
 8001af4:	bf00      	nop
 8001af6:	3708      	adds	r7, #8
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	20000228 	.word	0x20000228
 8001b00:	0800a8b0 	.word	0x0800a8b0
 8001b04:	2000022c 	.word	0x2000022c
 8001b08:	20000240 	.word	0x20000240
 8001b0c:	20000180 	.word	0x20000180

08001b10 <MSTTask2>:

void MSTTask2(void *pvParameters) {
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
	vMSTSporadicTaskRun(&Task3Handle);
 8001b18:	4811      	ldr	r0, [pc, #68]	@ (8001b60 <MSTTask2+0x50>)
 8001b1a:	f7ff fc97 	bl	800144c <vMSTSporadicTaskRun>
	vMSTSporadicTaskRun(&Task4Handle);
 8001b1e:	4811      	ldr	r0, [pc, #68]	@ (8001b64 <MSTTask2+0x54>)
 8001b20:	f7ff fc94 	bl	800144c <vMSTSporadicTaskRun>
	if (xSemaphoreTake(xBinarySemUART2, portMAX_DELAY) == pdTRUE) {
 8001b24:	4b10      	ldr	r3, [pc, #64]	@ (8001b68 <MSTTask2+0x58>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f004 fa2d 	bl	8005f8c <xQueueSemaphoreTake>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d10f      	bne.n	8001b58 <MSTTask2+0x48>
		length = snprintf((char*) transmit, sizeof(transmit), "Task2\n");
 8001b38:	4a0c      	ldr	r2, [pc, #48]	@ (8001b6c <MSTTask2+0x5c>)
 8001b3a:	2114      	movs	r1, #20
 8001b3c:	480c      	ldr	r0, [pc, #48]	@ (8001b70 <MSTTask2+0x60>)
 8001b3e:	f007 fa23 	bl	8008f88 <sniprintf>
 8001b42:	4603      	mov	r3, r0
 8001b44:	4a0b      	ldr	r2, [pc, #44]	@ (8001b74 <MSTTask2+0x64>)
 8001b46:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit_DMA(&huart2, transmit, length);
 8001b48:	4b0a      	ldr	r3, [pc, #40]	@ (8001b74 <MSTTask2+0x64>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	461a      	mov	r2, r3
 8001b50:	4907      	ldr	r1, [pc, #28]	@ (8001b70 <MSTTask2+0x60>)
 8001b52:	4809      	ldr	r0, [pc, #36]	@ (8001b78 <MSTTask2+0x68>)
 8001b54:	f002 fcc0 	bl	80044d8 <HAL_UART_Transmit_DMA>
	}
}
 8001b58:	bf00      	nop
 8001b5a:	3708      	adds	r7, #8
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	2000024c 	.word	0x2000024c
 8001b64:	20000250 	.word	0x20000250
 8001b68:	20000228 	.word	0x20000228
 8001b6c:	0800a8b8 	.word	0x0800a8b8
 8001b70:	2000022c 	.word	0x2000022c
 8001b74:	20000240 	.word	0x20000240
 8001b78:	20000180 	.word	0x20000180

08001b7c <MSTTask3>:

void MSTTask3(void *pvParameters) {
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
	if (xSemaphoreTake(xBinarySemUART2, portMAX_DELAY) == pdTRUE) {
 8001b84:	4b0e      	ldr	r3, [pc, #56]	@ (8001bc0 <MSTTask3+0x44>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f004 f9fd 	bl	8005f8c <xQueueSemaphoreTake>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d10f      	bne.n	8001bb8 <MSTTask3+0x3c>
		length = snprintf((char*) transmit, sizeof(transmit), "SPORADIC1\n");
 8001b98:	4a0a      	ldr	r2, [pc, #40]	@ (8001bc4 <MSTTask3+0x48>)
 8001b9a:	2114      	movs	r1, #20
 8001b9c:	480a      	ldr	r0, [pc, #40]	@ (8001bc8 <MSTTask3+0x4c>)
 8001b9e:	f007 f9f3 	bl	8008f88 <sniprintf>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	4a09      	ldr	r2, [pc, #36]	@ (8001bcc <MSTTask3+0x50>)
 8001ba6:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit_DMA(&huart2, transmit, length);
 8001ba8:	4b08      	ldr	r3, [pc, #32]	@ (8001bcc <MSTTask3+0x50>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	461a      	mov	r2, r3
 8001bb0:	4905      	ldr	r1, [pc, #20]	@ (8001bc8 <MSTTask3+0x4c>)
 8001bb2:	4807      	ldr	r0, [pc, #28]	@ (8001bd0 <MSTTask3+0x54>)
 8001bb4:	f002 fc90 	bl	80044d8 <HAL_UART_Transmit_DMA>
	}
}
 8001bb8:	bf00      	nop
 8001bba:	3708      	adds	r7, #8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	20000228 	.word	0x20000228
 8001bc4:	0800a8c0 	.word	0x0800a8c0
 8001bc8:	2000022c 	.word	0x2000022c
 8001bcc:	20000240 	.word	0x20000240
 8001bd0:	20000180 	.word	0x20000180

08001bd4 <MSTTask4>:

void MSTTask4(void *pvParameters) {
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
	if (xSemaphoreTake(xBinarySemUART2, portMAX_DELAY) == pdTRUE) {
 8001bdc:	4b0e      	ldr	r3, [pc, #56]	@ (8001c18 <MSTTask4+0x44>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001be4:	4618      	mov	r0, r3
 8001be6:	f004 f9d1 	bl	8005f8c <xQueueSemaphoreTake>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d10f      	bne.n	8001c10 <MSTTask4+0x3c>
		length = snprintf((char*) transmit, sizeof(transmit), "SPORADIC2\n");
 8001bf0:	4a0a      	ldr	r2, [pc, #40]	@ (8001c1c <MSTTask4+0x48>)
 8001bf2:	2114      	movs	r1, #20
 8001bf4:	480a      	ldr	r0, [pc, #40]	@ (8001c20 <MSTTask4+0x4c>)
 8001bf6:	f007 f9c7 	bl	8008f88 <sniprintf>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	4a09      	ldr	r2, [pc, #36]	@ (8001c24 <MSTTask4+0x50>)
 8001bfe:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit_DMA(&huart2, transmit, length);
 8001c00:	4b08      	ldr	r3, [pc, #32]	@ (8001c24 <MSTTask4+0x50>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	461a      	mov	r2, r3
 8001c08:	4905      	ldr	r1, [pc, #20]	@ (8001c20 <MSTTask4+0x4c>)
 8001c0a:	4807      	ldr	r0, [pc, #28]	@ (8001c28 <MSTTask4+0x54>)
 8001c0c:	f002 fc64 	bl	80044d8 <HAL_UART_Transmit_DMA>
	}
}
 8001c10:	bf00      	nop
 8001c12:	3708      	adds	r7, #8
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	20000228 	.word	0x20000228
 8001c1c:	0800a8cc 	.word	0x0800a8cc
 8001c20:	2000022c 	.word	0x2000022c
 8001c24:	20000240 	.word	0x20000240
 8001c28:	20000180 	.word	0x20000180

08001c2c <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
	if (huart == &huart2) {
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	4a08      	ldr	r2, [pc, #32]	@ (8001c58 <HAL_UART_TxCpltCallback+0x2c>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d109      	bne.n	8001c50 <HAL_UART_TxCpltCallback+0x24>
		//free sem
		BaseType_t xHigherPr = pdFALSE;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	60fb      	str	r3, [r7, #12]
		xSemaphoreGiveFromISR(xBinarySemUART2, &xHigherPr);
 8001c40:	4b06      	ldr	r3, [pc, #24]	@ (8001c5c <HAL_UART_TxCpltCallback+0x30>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f107 020c 	add.w	r2, r7, #12
 8001c48:	4611      	mov	r1, r2
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f004 f82c 	bl	8005ca8 <xQueueGiveFromISR>
	}
}
 8001c50:	bf00      	nop
 8001c52:	3710      	adds	r7, #16
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	20000180 	.word	0x20000180
 8001c5c:	20000228 	.word	0x20000228

08001c60 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b086      	sub	sp, #24
 8001c64:	af06      	add	r7, sp, #24
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001c66:	f000 fc55 	bl	8002514 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001c6a:	f000 f889 	bl	8001d80 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001c6e:	f000 f9d3 	bl	8002018 <MX_GPIO_Init>
	MX_DMA_Init();
 8001c72:	f000 f9b1 	bl	8001fd8 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8001c76:	f000 f985 	bl	8001f84 <MX_USART2_UART_Init>
	MX_USART1_UART_Init();
 8001c7a:	f000 f959 	bl	8001f30 <MX_USART1_UART_Init>
	MX_TIM10_Init();
 8001c7e:	f000 f935 	bl	8001eec <MX_TIM10_Init>
	MX_TIM2_Init();
 8001c82:	f000 f8e7 	bl	8001e54 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */

	xBinarySemUART2 = xSemaphoreCreateBinary();
 8001c86:	2203      	movs	r2, #3
 8001c88:	2100      	movs	r1, #0
 8001c8a:	2001      	movs	r0, #1
 8001c8c:	f003 fe0d 	bl	80058aa <xQueueGenericCreate>
 8001c90:	4603      	mov	r3, r0
 8001c92:	4a2e      	ldr	r2, [pc, #184]	@ (8001d4c <main+0xec>)
 8001c94:	6013      	str	r3, [r2, #0]
	xSemaphoreGive(xBinarySemUART2);
 8001c96:	4b2d      	ldr	r3, [pc, #180]	@ (8001d4c <main+0xec>)
 8001c98:	6818      	ldr	r0, [r3, #0]
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	f003 fe62 	bl	8005968 <xQueueGenericSend>

	vMSTPeriodicTaskCreate(MSTTask1,                  // Function to execute
 8001ca4:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8001ca8:	9305      	str	r3, [sp, #20]
 8001caa:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001cae:	9304      	str	r3, [sp, #16]
 8001cb0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001cb4:	9303      	str	r3, [sp, #12]
 8001cb6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001cba:	9302      	str	r3, [sp, #8]
 8001cbc:	4b24      	ldr	r3, [pc, #144]	@ (8001d50 <main+0xf0>)
 8001cbe:	9301      	str	r3, [sp, #4]
 8001cc0:	2305      	movs	r3, #5
 8001cc2:	9300      	str	r3, [sp, #0]
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	2280      	movs	r2, #128	@ 0x80
 8001cc8:	4922      	ldr	r1, [pc, #136]	@ (8001d54 <main+0xf4>)
 8001cca:	4823      	ldr	r0, [pc, #140]	@ (8001d58 <main+0xf8>)
 8001ccc:	f7ff f9ee 	bl	80010ac <vMSTPeriodicTaskCreate>
	                       500,                       //deadline
	                       500,                       //phase
	                       300                        //WCET
	                      );

	vMSTPeriodicTaskCreate(MSTTask2, "2",
 8001cd0:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8001cd4:	9305      	str	r3, [sp, #20]
 8001cd6:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001cda:	9304      	str	r3, [sp, #16]
 8001cdc:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8001ce0:	9303      	str	r3, [sp, #12]
 8001ce2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ce6:	9302      	str	r3, [sp, #8]
 8001ce8:	4b1c      	ldr	r3, [pc, #112]	@ (8001d5c <main+0xfc>)
 8001cea:	9301      	str	r3, [sp, #4]
 8001cec:	2302      	movs	r3, #2
 8001cee:	9300      	str	r3, [sp, #0]
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	2280      	movs	r2, #128	@ 0x80
 8001cf4:	491a      	ldr	r1, [pc, #104]	@ (8001d60 <main+0x100>)
 8001cf6:	481b      	ldr	r0, [pc, #108]	@ (8001d64 <main+0x104>)
 8001cf8:	f7ff f9d8 	bl	80010ac <vMSTPeriodicTaskCreate>
	                       configMINIMAL_STACK_SIZE,
	                       NULL, 2, &Task2Handle, 1000, 300, 10000, 300);

	vMSTSporadicTaskCreate(MSTTask3, "3",
 8001cfc:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8001d00:	9304      	str	r3, [sp, #16]
 8001d02:	23c8      	movs	r3, #200	@ 0xc8
 8001d04:	9303      	str	r3, [sp, #12]
 8001d06:	2301      	movs	r3, #1
 8001d08:	9302      	str	r3, [sp, #8]
 8001d0a:	4b17      	ldr	r3, [pc, #92]	@ (8001d68 <main+0x108>)
 8001d0c:	9301      	str	r3, [sp, #4]
 8001d0e:	2301      	movs	r3, #1
 8001d10:	9300      	str	r3, [sp, #0]
 8001d12:	2300      	movs	r3, #0
 8001d14:	2280      	movs	r2, #128	@ 0x80
 8001d16:	4915      	ldr	r1, [pc, #84]	@ (8001d6c <main+0x10c>)
 8001d18:	4815      	ldr	r0, [pc, #84]	@ (8001d70 <main+0x110>)
 8001d1a:	f7ff fac7 	bl	80012ac <vMSTSporadicTaskCreate>
	                       configMINIMAL_STACK_SIZE,
	                       NULL, 1, &Task3Handle, 1,
	                       200, 300);
	vMSTSporadicTaskCreate(MSTTask4, "4",
 8001d1e:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8001d22:	9304      	str	r3, [sp, #16]
 8001d24:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8001d28:	9303      	str	r3, [sp, #12]
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	9302      	str	r3, [sp, #8]
 8001d2e:	4b11      	ldr	r3, [pc, #68]	@ (8001d74 <main+0x114>)
 8001d30:	9301      	str	r3, [sp, #4]
 8001d32:	2301      	movs	r3, #1
 8001d34:	9300      	str	r3, [sp, #0]
 8001d36:	2300      	movs	r3, #0
 8001d38:	2280      	movs	r2, #128	@ 0x80
 8001d3a:	490f      	ldr	r1, [pc, #60]	@ (8001d78 <main+0x118>)
 8001d3c:	480f      	ldr	r0, [pc, #60]	@ (8001d7c <main+0x11c>)
 8001d3e:	f7ff fab5 	bl	80012ac <vMSTSporadicTaskCreate>
		                   configMINIMAL_STACK_SIZE,
		                   NULL, 1, &Task4Handle, 1,
		                   300, 300);

	vMSTSchedulerStart();
 8001d42:	f7ff fe17 	bl	8001974 <vMSTSchedulerStart>

	//shall never arrive here
	for (;;)
 8001d46:	bf00      	nop
 8001d48:	e7fd      	b.n	8001d46 <main+0xe6>
 8001d4a:	bf00      	nop
 8001d4c:	20000228 	.word	0x20000228
 8001d50:	20000244 	.word	0x20000244
 8001d54:	0800a8d8 	.word	0x0800a8d8
 8001d58:	08001ab1 	.word	0x08001ab1
 8001d5c:	20000248 	.word	0x20000248
 8001d60:	0800a8dc 	.word	0x0800a8dc
 8001d64:	08001b11 	.word	0x08001b11
 8001d68:	2000024c 	.word	0x2000024c
 8001d6c:	0800a8e0 	.word	0x0800a8e0
 8001d70:	08001b7d 	.word	0x08001b7d
 8001d74:	20000250 	.word	0x20000250
 8001d78:	0800a8e4 	.word	0x0800a8e4
 8001d7c:	08001bd5 	.word	0x08001bd5

08001d80 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b094      	sub	sp, #80	@ 0x50
 8001d84:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001d86:	f107 0320 	add.w	r3, r7, #32
 8001d8a:	2230      	movs	r2, #48	@ 0x30
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f007 f930 	bl	8008ff4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001d94:	f107 030c 	add.w	r3, r7, #12
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	605a      	str	r2, [r3, #4]
 8001d9e:	609a      	str	r2, [r3, #8]
 8001da0:	60da      	str	r2, [r3, #12]
 8001da2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001da4:	2300      	movs	r3, #0
 8001da6:	60bb      	str	r3, [r7, #8]
 8001da8:	4b28      	ldr	r3, [pc, #160]	@ (8001e4c <SystemClock_Config+0xcc>)
 8001daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dac:	4a27      	ldr	r2, [pc, #156]	@ (8001e4c <SystemClock_Config+0xcc>)
 8001dae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001db2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001db4:	4b25      	ldr	r3, [pc, #148]	@ (8001e4c <SystemClock_Config+0xcc>)
 8001db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dbc:	60bb      	str	r3, [r7, #8]
 8001dbe:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	607b      	str	r3, [r7, #4]
 8001dc4:	4b22      	ldr	r3, [pc, #136]	@ (8001e50 <SystemClock_Config+0xd0>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001dcc:	4a20      	ldr	r2, [pc, #128]	@ (8001e50 <SystemClock_Config+0xd0>)
 8001dce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001dd2:	6013      	str	r3, [r2, #0]
 8001dd4:	4b1e      	ldr	r3, [pc, #120]	@ (8001e50 <SystemClock_Config+0xd0>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001ddc:	607b      	str	r3, [r7, #4]
 8001dde:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001de0:	2302      	movs	r3, #2
 8001de2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001de4:	2301      	movs	r3, #1
 8001de6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001de8:	2310      	movs	r3, #16
 8001dea:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dec:	2302      	movs	r3, #2
 8001dee:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001df0:	2300      	movs	r3, #0
 8001df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 8001df4:	2310      	movs	r3, #16
 8001df6:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 192;
 8001df8:	23c0      	movs	r3, #192	@ 0xc0
 8001dfa:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 8001dfc:	2308      	movs	r3, #8
 8001dfe:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001e00:	2304      	movs	r3, #4
 8001e02:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001e04:	f107 0320 	add.w	r3, r7, #32
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f001 fa51 	bl	80032b0 <HAL_RCC_OscConfig>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <SystemClock_Config+0x98>
		Error_Handler();
 8001e14:	f000 f92c 	bl	8002070 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001e18:	230f      	movs	r3, #15
 8001e1a:	60fb      	str	r3, [r7, #12]
	                              | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e20:	2300      	movs	r3, #0
 8001e22:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e24:	2300      	movs	r3, #0
 8001e26:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001e2c:	f107 030c 	add.w	r3, r7, #12
 8001e30:	2100      	movs	r1, #0
 8001e32:	4618      	mov	r0, r3
 8001e34:	f001 fcb4 	bl	80037a0 <HAL_RCC_ClockConfig>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <SystemClock_Config+0xc2>
		Error_Handler();
 8001e3e:	f000 f917 	bl	8002070 <Error_Handler>
	}
}
 8001e42:	bf00      	nop
 8001e44:	3750      	adds	r7, #80	@ 0x50
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	40007000 	.word	0x40007000

08001e54 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001e5a:	f107 0308 	add.w	r3, r7, #8
 8001e5e:	2200      	movs	r2, #0
 8001e60:	601a      	str	r2, [r3, #0]
 8001e62:	605a      	str	r2, [r3, #4]
 8001e64:	609a      	str	r2, [r3, #8]
 8001e66:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001e68:	463b      	mov	r3, r7
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	601a      	str	r2, [r3, #0]
 8001e6e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001e70:	4b1d      	ldr	r3, [pc, #116]	@ (8001ee8 <MX_TIM2_Init+0x94>)
 8001e72:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001e76:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 24 - 1;
 8001e78:	4b1b      	ldr	r3, [pc, #108]	@ (8001ee8 <MX_TIM2_Init+0x94>)
 8001e7a:	2217      	movs	r2, #23
 8001e7c:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e7e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ee8 <MX_TIM2_Init+0x94>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 8001e84:	4b18      	ldr	r3, [pc, #96]	@ (8001ee8 <MX_TIM2_Init+0x94>)
 8001e86:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001e8a:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e8c:	4b16      	ldr	r3, [pc, #88]	@ (8001ee8 <MX_TIM2_Init+0x94>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e92:	4b15      	ldr	r3, [pc, #84]	@ (8001ee8 <MX_TIM2_Init+0x94>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001e98:	4813      	ldr	r0, [pc, #76]	@ (8001ee8 <MX_TIM2_Init+0x94>)
 8001e9a:	f001 fe93 	bl	8003bc4 <HAL_TIM_Base_Init>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <MX_TIM2_Init+0x54>
		Error_Handler();
 8001ea4:	f000 f8e4 	bl	8002070 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ea8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001eac:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8001eae:	f107 0308 	add.w	r3, r7, #8
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	480c      	ldr	r0, [pc, #48]	@ (8001ee8 <MX_TIM2_Init+0x94>)
 8001eb6:	f002 f827 	bl	8003f08 <HAL_TIM_ConfigClockSource>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <MX_TIM2_Init+0x70>
		Error_Handler();
 8001ec0:	f000 f8d6 	bl	8002070 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001ecc:	463b      	mov	r3, r7
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4805      	ldr	r0, [pc, #20]	@ (8001ee8 <MX_TIM2_Init+0x94>)
 8001ed2:	f002 fa2f 	bl	8004334 <HAL_TIMEx_MasterConfigSynchronization>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <MX_TIM2_Init+0x8c>
	        != HAL_OK) {
		Error_Handler();
 8001edc:	f000 f8c8 	bl	8002070 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8001ee0:	bf00      	nop
 8001ee2:	3718      	adds	r7, #24
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	200000a8 	.word	0x200000a8

08001eec <MX_TIM10_Init>:
/**
 * @brief TIM10 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM10_Init(void) {
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
	/* USER CODE END TIM10_Init 0 */

	/* USER CODE BEGIN TIM10_Init 1 */

	/* USER CODE END TIM10_Init 1 */
	htim10.Instance = TIM10;
 8001ef0:	4b0d      	ldr	r3, [pc, #52]	@ (8001f28 <MX_TIM10_Init+0x3c>)
 8001ef2:	4a0e      	ldr	r2, [pc, #56]	@ (8001f2c <MX_TIM10_Init+0x40>)
 8001ef4:	601a      	str	r2, [r3, #0]
	htim10.Init.Prescaler = 15;
 8001ef6:	4b0c      	ldr	r3, [pc, #48]	@ (8001f28 <MX_TIM10_Init+0x3c>)
 8001ef8:	220f      	movs	r2, #15
 8001efa:	605a      	str	r2, [r3, #4]
	htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001efc:	4b0a      	ldr	r3, [pc, #40]	@ (8001f28 <MX_TIM10_Init+0x3c>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	609a      	str	r2, [r3, #8]
	htim10.Init.Period = 99;
 8001f02:	4b09      	ldr	r3, [pc, #36]	@ (8001f28 <MX_TIM10_Init+0x3c>)
 8001f04:	2263      	movs	r2, #99	@ 0x63
 8001f06:	60da      	str	r2, [r3, #12]
	htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f08:	4b07      	ldr	r3, [pc, #28]	@ (8001f28 <MX_TIM10_Init+0x3c>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	611a      	str	r2, [r3, #16]
	htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f0e:	4b06      	ldr	r3, [pc, #24]	@ (8001f28 <MX_TIM10_Init+0x3c>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim10) != HAL_OK) {
 8001f14:	4804      	ldr	r0, [pc, #16]	@ (8001f28 <MX_TIM10_Init+0x3c>)
 8001f16:	f001 fe55 	bl	8003bc4 <HAL_TIM_Base_Init>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <MX_TIM10_Init+0x38>
		Error_Handler();
 8001f20:	f000 f8a6 	bl	8002070 <Error_Handler>
	}
	/* USER CODE BEGIN TIM10_Init 2 */

	/* USER CODE END TIM10_Init 2 */

}
 8001f24:	bf00      	nop
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	200000f0 	.word	0x200000f0
 8001f2c:	40014400 	.word	0x40014400

08001f30 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001f34:	4b11      	ldr	r3, [pc, #68]	@ (8001f7c <MX_USART1_UART_Init+0x4c>)
 8001f36:	4a12      	ldr	r2, [pc, #72]	@ (8001f80 <MX_USART1_UART_Init+0x50>)
 8001f38:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001f3a:	4b10      	ldr	r3, [pc, #64]	@ (8001f7c <MX_USART1_UART_Init+0x4c>)
 8001f3c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f40:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f42:	4b0e      	ldr	r3, [pc, #56]	@ (8001f7c <MX_USART1_UART_Init+0x4c>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001f48:	4b0c      	ldr	r3, [pc, #48]	@ (8001f7c <MX_USART1_UART_Init+0x4c>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001f4e:	4b0b      	ldr	r3, [pc, #44]	@ (8001f7c <MX_USART1_UART_Init+0x4c>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001f54:	4b09      	ldr	r3, [pc, #36]	@ (8001f7c <MX_USART1_UART_Init+0x4c>)
 8001f56:	220c      	movs	r2, #12
 8001f58:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f5a:	4b08      	ldr	r3, [pc, #32]	@ (8001f7c <MX_USART1_UART_Init+0x4c>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f60:	4b06      	ldr	r3, [pc, #24]	@ (8001f7c <MX_USART1_UART_Init+0x4c>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001f66:	4805      	ldr	r0, [pc, #20]	@ (8001f7c <MX_USART1_UART_Init+0x4c>)
 8001f68:	f002 fa66 	bl	8004438 <HAL_UART_Init>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8001f72:	f000 f87d 	bl	8002070 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001f76:	bf00      	nop
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	20000138 	.word	0x20000138
 8001f80:	40011000 	.word	0x40011000

08001f84 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001f88:	4b11      	ldr	r3, [pc, #68]	@ (8001fd0 <MX_USART2_UART_Init+0x4c>)
 8001f8a:	4a12      	ldr	r2, [pc, #72]	@ (8001fd4 <MX_USART2_UART_Init+0x50>)
 8001f8c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 8001f8e:	4b10      	ldr	r3, [pc, #64]	@ (8001fd0 <MX_USART2_UART_Init+0x4c>)
 8001f90:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001f94:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f96:	4b0e      	ldr	r3, [pc, #56]	@ (8001fd0 <MX_USART2_UART_Init+0x4c>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001f9c:	4b0c      	ldr	r3, [pc, #48]	@ (8001fd0 <MX_USART2_UART_Init+0x4c>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001fa2:	4b0b      	ldr	r3, [pc, #44]	@ (8001fd0 <MX_USART2_UART_Init+0x4c>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001fa8:	4b09      	ldr	r3, [pc, #36]	@ (8001fd0 <MX_USART2_UART_Init+0x4c>)
 8001faa:	220c      	movs	r2, #12
 8001fac:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fae:	4b08      	ldr	r3, [pc, #32]	@ (8001fd0 <MX_USART2_UART_Init+0x4c>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fb4:	4b06      	ldr	r3, [pc, #24]	@ (8001fd0 <MX_USART2_UART_Init+0x4c>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001fba:	4805      	ldr	r0, [pc, #20]	@ (8001fd0 <MX_USART2_UART_Init+0x4c>)
 8001fbc:	f002 fa3c 	bl	8004438 <HAL_UART_Init>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8001fc6:	f000 f853 	bl	8002070 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001fca:	bf00      	nop
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	20000180 	.word	0x20000180
 8001fd4:	40004400 	.word	0x40004400

08001fd8 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001fde:	2300      	movs	r3, #0
 8001fe0:	607b      	str	r3, [r7, #4]
 8001fe2:	4b0c      	ldr	r3, [pc, #48]	@ (8002014 <MX_DMA_Init+0x3c>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe6:	4a0b      	ldr	r2, [pc, #44]	@ (8002014 <MX_DMA_Init+0x3c>)
 8001fe8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001fec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fee:	4b09      	ldr	r3, [pc, #36]	@ (8002014 <MX_DMA_Init+0x3c>)
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ff6:	607b      	str	r3, [r7, #4]
 8001ff8:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	2105      	movs	r1, #5
 8001ffe:	2011      	movs	r0, #17
 8002000:	f000 fba6 	bl	8002750 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002004:	2011      	movs	r0, #17
 8002006:	f000 fbbf 	bl	8002788 <HAL_NVIC_EnableIRQ>

}
 800200a:	bf00      	nop
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	40023800 	.word	0x40023800

08002018 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800201e:	2300      	movs	r3, #0
 8002020:	607b      	str	r3, [r7, #4]
 8002022:	4b09      	ldr	r3, [pc, #36]	@ (8002048 <MX_GPIO_Init+0x30>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002026:	4a08      	ldr	r2, [pc, #32]	@ (8002048 <MX_GPIO_Init+0x30>)
 8002028:	f043 0301 	orr.w	r3, r3, #1
 800202c:	6313      	str	r3, [r2, #48]	@ 0x30
 800202e:	4b06      	ldr	r3, [pc, #24]	@ (8002048 <MX_GPIO_Init+0x30>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	607b      	str	r3, [r7, #4]
 8002038:	687b      	ldr	r3, [r7, #4]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800203a:	bf00      	nop
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	40023800 	.word	0x40023800

0800204c <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM9) {
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a04      	ldr	r2, [pc, #16]	@ (800206c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d101      	bne.n	8002062 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800205e:	f000 fa7b 	bl	8002558 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8002062:	bf00      	nop
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	40014000 	.word	0x40014000

08002070 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002074:	b672      	cpsid	i
}
 8002076:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002078:	bf00      	nop
 800207a:	e7fd      	b.n	8002078 <Error_Handler+0x8>

0800207c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002082:	2300      	movs	r3, #0
 8002084:	607b      	str	r3, [r7, #4]
 8002086:	4b12      	ldr	r3, [pc, #72]	@ (80020d0 <HAL_MspInit+0x54>)
 8002088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800208a:	4a11      	ldr	r2, [pc, #68]	@ (80020d0 <HAL_MspInit+0x54>)
 800208c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002090:	6453      	str	r3, [r2, #68]	@ 0x44
 8002092:	4b0f      	ldr	r3, [pc, #60]	@ (80020d0 <HAL_MspInit+0x54>)
 8002094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002096:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800209a:	607b      	str	r3, [r7, #4]
 800209c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800209e:	2300      	movs	r3, #0
 80020a0:	603b      	str	r3, [r7, #0]
 80020a2:	4b0b      	ldr	r3, [pc, #44]	@ (80020d0 <HAL_MspInit+0x54>)
 80020a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a6:	4a0a      	ldr	r2, [pc, #40]	@ (80020d0 <HAL_MspInit+0x54>)
 80020a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80020ae:	4b08      	ldr	r3, [pc, #32]	@ (80020d0 <HAL_MspInit+0x54>)
 80020b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020b6:	603b      	str	r3, [r7, #0]
 80020b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80020ba:	2200      	movs	r2, #0
 80020bc:	210f      	movs	r1, #15
 80020be:	f06f 0001 	mvn.w	r0, #1
 80020c2:	f000 fb45 	bl	8002750 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020c6:	bf00      	nop
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	40023800 	.word	0x40023800

080020d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020e4:	d10e      	bne.n	8002104 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020e6:	2300      	movs	r3, #0
 80020e8:	60fb      	str	r3, [r7, #12]
 80020ea:	4b16      	ldr	r3, [pc, #88]	@ (8002144 <HAL_TIM_Base_MspInit+0x70>)
 80020ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ee:	4a15      	ldr	r2, [pc, #84]	@ (8002144 <HAL_TIM_Base_MspInit+0x70>)
 80020f0:	f043 0301 	orr.w	r3, r3, #1
 80020f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80020f6:	4b13      	ldr	r3, [pc, #76]	@ (8002144 <HAL_TIM_Base_MspInit+0x70>)
 80020f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	60fb      	str	r3, [r7, #12]
 8002100:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8002102:	e01a      	b.n	800213a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM10)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a0f      	ldr	r2, [pc, #60]	@ (8002148 <HAL_TIM_Base_MspInit+0x74>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d115      	bne.n	800213a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800210e:	2300      	movs	r3, #0
 8002110:	60bb      	str	r3, [r7, #8]
 8002112:	4b0c      	ldr	r3, [pc, #48]	@ (8002144 <HAL_TIM_Base_MspInit+0x70>)
 8002114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002116:	4a0b      	ldr	r2, [pc, #44]	@ (8002144 <HAL_TIM_Base_MspInit+0x70>)
 8002118:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800211c:	6453      	str	r3, [r2, #68]	@ 0x44
 800211e:	4b09      	ldr	r3, [pc, #36]	@ (8002144 <HAL_TIM_Base_MspInit+0x70>)
 8002120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002122:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002126:	60bb      	str	r3, [r7, #8]
 8002128:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 800212a:	2200      	movs	r2, #0
 800212c:	2105      	movs	r1, #5
 800212e:	2019      	movs	r0, #25
 8002130:	f000 fb0e 	bl	8002750 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002134:	2019      	movs	r0, #25
 8002136:	f000 fb27 	bl	8002788 <HAL_NVIC_EnableIRQ>
}
 800213a:	bf00      	nop
 800213c:	3710      	adds	r7, #16
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	40023800 	.word	0x40023800
 8002148:	40014400 	.word	0x40014400

0800214c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b08c      	sub	sp, #48	@ 0x30
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002154:	f107 031c 	add.w	r3, r7, #28
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	605a      	str	r2, [r3, #4]
 800215e:	609a      	str	r2, [r3, #8]
 8002160:	60da      	str	r2, [r3, #12]
 8002162:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a4d      	ldr	r2, [pc, #308]	@ (80022a0 <HAL_UART_MspInit+0x154>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d12d      	bne.n	80021ca <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800216e:	2300      	movs	r3, #0
 8002170:	61bb      	str	r3, [r7, #24]
 8002172:	4b4c      	ldr	r3, [pc, #304]	@ (80022a4 <HAL_UART_MspInit+0x158>)
 8002174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002176:	4a4b      	ldr	r2, [pc, #300]	@ (80022a4 <HAL_UART_MspInit+0x158>)
 8002178:	f043 0310 	orr.w	r3, r3, #16
 800217c:	6453      	str	r3, [r2, #68]	@ 0x44
 800217e:	4b49      	ldr	r3, [pc, #292]	@ (80022a4 <HAL_UART_MspInit+0x158>)
 8002180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002182:	f003 0310 	and.w	r3, r3, #16
 8002186:	61bb      	str	r3, [r7, #24]
 8002188:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800218a:	2300      	movs	r3, #0
 800218c:	617b      	str	r3, [r7, #20]
 800218e:	4b45      	ldr	r3, [pc, #276]	@ (80022a4 <HAL_UART_MspInit+0x158>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002192:	4a44      	ldr	r2, [pc, #272]	@ (80022a4 <HAL_UART_MspInit+0x158>)
 8002194:	f043 0301 	orr.w	r3, r3, #1
 8002198:	6313      	str	r3, [r2, #48]	@ 0x30
 800219a:	4b42      	ldr	r3, [pc, #264]	@ (80022a4 <HAL_UART_MspInit+0x158>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	617b      	str	r3, [r7, #20]
 80021a4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80021a6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80021aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ac:	2302      	movs	r3, #2
 80021ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b0:	2300      	movs	r3, #0
 80021b2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021b4:	2303      	movs	r3, #3
 80021b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80021b8:	2307      	movs	r3, #7
 80021ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021bc:	f107 031c 	add.w	r3, r7, #28
 80021c0:	4619      	mov	r1, r3
 80021c2:	4839      	ldr	r0, [pc, #228]	@ (80022a8 <HAL_UART_MspInit+0x15c>)
 80021c4:	f000 fef0 	bl	8002fa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80021c8:	e066      	b.n	8002298 <HAL_UART_MspInit+0x14c>
  else if(huart->Instance==USART2)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a37      	ldr	r2, [pc, #220]	@ (80022ac <HAL_UART_MspInit+0x160>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d161      	bne.n	8002298 <HAL_UART_MspInit+0x14c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80021d4:	2300      	movs	r3, #0
 80021d6:	613b      	str	r3, [r7, #16]
 80021d8:	4b32      	ldr	r3, [pc, #200]	@ (80022a4 <HAL_UART_MspInit+0x158>)
 80021da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021dc:	4a31      	ldr	r2, [pc, #196]	@ (80022a4 <HAL_UART_MspInit+0x158>)
 80021de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80021e4:	4b2f      	ldr	r3, [pc, #188]	@ (80022a4 <HAL_UART_MspInit+0x158>)
 80021e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ec:	613b      	str	r3, [r7, #16]
 80021ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021f0:	2300      	movs	r3, #0
 80021f2:	60fb      	str	r3, [r7, #12]
 80021f4:	4b2b      	ldr	r3, [pc, #172]	@ (80022a4 <HAL_UART_MspInit+0x158>)
 80021f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f8:	4a2a      	ldr	r2, [pc, #168]	@ (80022a4 <HAL_UART_MspInit+0x158>)
 80021fa:	f043 0301 	orr.w	r3, r3, #1
 80021fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8002200:	4b28      	ldr	r3, [pc, #160]	@ (80022a4 <HAL_UART_MspInit+0x158>)
 8002202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002204:	f003 0301 	and.w	r3, r3, #1
 8002208:	60fb      	str	r3, [r7, #12]
 800220a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800220c:	230c      	movs	r3, #12
 800220e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002210:	2302      	movs	r3, #2
 8002212:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002214:	2300      	movs	r3, #0
 8002216:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002218:	2303      	movs	r3, #3
 800221a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800221c:	2307      	movs	r3, #7
 800221e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002220:	f107 031c 	add.w	r3, r7, #28
 8002224:	4619      	mov	r1, r3
 8002226:	4820      	ldr	r0, [pc, #128]	@ (80022a8 <HAL_UART_MspInit+0x15c>)
 8002228:	f000 febe 	bl	8002fa8 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800222c:	4b20      	ldr	r3, [pc, #128]	@ (80022b0 <HAL_UART_MspInit+0x164>)
 800222e:	4a21      	ldr	r2, [pc, #132]	@ (80022b4 <HAL_UART_MspInit+0x168>)
 8002230:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002232:	4b1f      	ldr	r3, [pc, #124]	@ (80022b0 <HAL_UART_MspInit+0x164>)
 8002234:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002238:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800223a:	4b1d      	ldr	r3, [pc, #116]	@ (80022b0 <HAL_UART_MspInit+0x164>)
 800223c:	2240      	movs	r2, #64	@ 0x40
 800223e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002240:	4b1b      	ldr	r3, [pc, #108]	@ (80022b0 <HAL_UART_MspInit+0x164>)
 8002242:	2200      	movs	r2, #0
 8002244:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002246:	4b1a      	ldr	r3, [pc, #104]	@ (80022b0 <HAL_UART_MspInit+0x164>)
 8002248:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800224c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800224e:	4b18      	ldr	r3, [pc, #96]	@ (80022b0 <HAL_UART_MspInit+0x164>)
 8002250:	2200      	movs	r2, #0
 8002252:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002254:	4b16      	ldr	r3, [pc, #88]	@ (80022b0 <HAL_UART_MspInit+0x164>)
 8002256:	2200      	movs	r2, #0
 8002258:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800225a:	4b15      	ldr	r3, [pc, #84]	@ (80022b0 <HAL_UART_MspInit+0x164>)
 800225c:	2200      	movs	r2, #0
 800225e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002260:	4b13      	ldr	r3, [pc, #76]	@ (80022b0 <HAL_UART_MspInit+0x164>)
 8002262:	2200      	movs	r2, #0
 8002264:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002266:	4b12      	ldr	r3, [pc, #72]	@ (80022b0 <HAL_UART_MspInit+0x164>)
 8002268:	2200      	movs	r2, #0
 800226a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800226c:	4810      	ldr	r0, [pc, #64]	@ (80022b0 <HAL_UART_MspInit+0x164>)
 800226e:	f000 fa99 	bl	80027a4 <HAL_DMA_Init>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <HAL_UART_MspInit+0x130>
      Error_Handler();
 8002278:	f7ff fefa 	bl	8002070 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4a0c      	ldr	r2, [pc, #48]	@ (80022b0 <HAL_UART_MspInit+0x164>)
 8002280:	639a      	str	r2, [r3, #56]	@ 0x38
 8002282:	4a0b      	ldr	r2, [pc, #44]	@ (80022b0 <HAL_UART_MspInit+0x164>)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002288:	2200      	movs	r2, #0
 800228a:	2105      	movs	r1, #5
 800228c:	2026      	movs	r0, #38	@ 0x26
 800228e:	f000 fa5f 	bl	8002750 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002292:	2026      	movs	r0, #38	@ 0x26
 8002294:	f000 fa78 	bl	8002788 <HAL_NVIC_EnableIRQ>
}
 8002298:	bf00      	nop
 800229a:	3730      	adds	r7, #48	@ 0x30
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	40011000 	.word	0x40011000
 80022a4:	40023800 	.word	0x40023800
 80022a8:	40020000 	.word	0x40020000
 80022ac:	40004400 	.word	0x40004400
 80022b0:	200001c8 	.word	0x200001c8
 80022b4:	400260a0 	.word	0x400260a0

080022b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b08c      	sub	sp, #48	@ 0x30
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80022c0:	2300      	movs	r3, #0
 80022c2:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80022c4:	2300      	movs	r3, #0
 80022c6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 80022c8:	2300      	movs	r3, #0
 80022ca:	60bb      	str	r3, [r7, #8]
 80022cc:	4b2e      	ldr	r3, [pc, #184]	@ (8002388 <HAL_InitTick+0xd0>)
 80022ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022d0:	4a2d      	ldr	r2, [pc, #180]	@ (8002388 <HAL_InitTick+0xd0>)
 80022d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022d6:	6453      	str	r3, [r2, #68]	@ 0x44
 80022d8:	4b2b      	ldr	r3, [pc, #172]	@ (8002388 <HAL_InitTick+0xd0>)
 80022da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022e0:	60bb      	str	r3, [r7, #8]
 80022e2:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80022e4:	f107 020c 	add.w	r2, r7, #12
 80022e8:	f107 0310 	add.w	r3, r7, #16
 80022ec:	4611      	mov	r1, r2
 80022ee:	4618      	mov	r0, r3
 80022f0:	f001 fc36 	bl	8003b60 <HAL_RCC_GetClockConfig>
  /* Compute TIM9 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80022f4:	f001 fc20 	bl	8003b38 <HAL_RCC_GetPCLK2Freq>
 80022f8:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80022fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022fc:	4a23      	ldr	r2, [pc, #140]	@ (800238c <HAL_InitTick+0xd4>)
 80022fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002302:	0c9b      	lsrs	r3, r3, #18
 8002304:	3b01      	subs	r3, #1
 8002306:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8002308:	4b21      	ldr	r3, [pc, #132]	@ (8002390 <HAL_InitTick+0xd8>)
 800230a:	4a22      	ldr	r2, [pc, #136]	@ (8002394 <HAL_InitTick+0xdc>)
 800230c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 800230e:	4b20      	ldr	r3, [pc, #128]	@ (8002390 <HAL_InitTick+0xd8>)
 8002310:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002314:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 8002316:	4a1e      	ldr	r2, [pc, #120]	@ (8002390 <HAL_InitTick+0xd8>)
 8002318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800231a:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 800231c:	4b1c      	ldr	r3, [pc, #112]	@ (8002390 <HAL_InitTick+0xd8>)
 800231e:	2200      	movs	r2, #0
 8002320:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002322:	4b1b      	ldr	r3, [pc, #108]	@ (8002390 <HAL_InitTick+0xd8>)
 8002324:	2200      	movs	r2, #0
 8002326:	609a      	str	r2, [r3, #8]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002328:	4b19      	ldr	r3, [pc, #100]	@ (8002390 <HAL_InitTick+0xd8>)
 800232a:	2200      	movs	r2, #0
 800232c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim9);
 800232e:	4818      	ldr	r0, [pc, #96]	@ (8002390 <HAL_InitTick+0xd8>)
 8002330:	f001 fc48 	bl	8003bc4 <HAL_TIM_Base_Init>
 8002334:	4603      	mov	r3, r0
 8002336:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800233a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800233e:	2b00      	cmp	r3, #0
 8002340:	d11b      	bne.n	800237a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim9);
 8002342:	4813      	ldr	r0, [pc, #76]	@ (8002390 <HAL_InitTick+0xd8>)
 8002344:	f001 fc8e 	bl	8003c64 <HAL_TIM_Base_Start_IT>
 8002348:	4603      	mov	r3, r0
 800234a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800234e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002352:	2b00      	cmp	r3, #0
 8002354:	d111      	bne.n	800237a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM9 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002356:	2018      	movs	r0, #24
 8002358:	f000 fa16 	bl	8002788 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2b0f      	cmp	r3, #15
 8002360:	d808      	bhi.n	8002374 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority, 0U);
 8002362:	2200      	movs	r2, #0
 8002364:	6879      	ldr	r1, [r7, #4]
 8002366:	2018      	movs	r0, #24
 8002368:	f000 f9f2 	bl	8002750 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800236c:	4a0a      	ldr	r2, [pc, #40]	@ (8002398 <HAL_InitTick+0xe0>)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6013      	str	r3, [r2, #0]
 8002372:	e002      	b.n	800237a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800237a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800237e:	4618      	mov	r0, r3
 8002380:	3730      	adds	r7, #48	@ 0x30
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	40023800 	.word	0x40023800
 800238c:	431bde83 	.word	0x431bde83
 8002390:	20000254 	.word	0x20000254
 8002394:	40014000 	.word	0x40014000
 8002398:	20000004 	.word	0x20000004

0800239c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80023a0:	bf00      	nop
 80023a2:	e7fd      	b.n	80023a0 <NMI_Handler+0x4>

080023a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023a8:	bf00      	nop
 80023aa:	e7fd      	b.n	80023a8 <HardFault_Handler+0x4>

080023ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023b0:	bf00      	nop
 80023b2:	e7fd      	b.n	80023b0 <MemManage_Handler+0x4>

080023b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023b8:	bf00      	nop
 80023ba:	e7fd      	b.n	80023b8 <BusFault_Handler+0x4>

080023bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023c0:	bf00      	nop
 80023c2:	e7fd      	b.n	80023c0 <UsageFault_Handler+0x4>

080023c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023c8:	bf00      	nop
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
	...

080023d4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80023d8:	4802      	ldr	r0, [pc, #8]	@ (80023e4 <DMA1_Stream6_IRQHandler+0x10>)
 80023da:	f000 fb7b 	bl	8002ad4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80023de:	bf00      	nop
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	200001c8 	.word	0x200001c8

080023e8 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 80023ec:	4802      	ldr	r0, [pc, #8]	@ (80023f8 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80023ee:	f001 fc9b 	bl	8003d28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80023f2:	bf00      	nop
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	20000254 	.word	0x20000254

080023fc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	ulStatsTimerTicks++;
 8002400:	4b04      	ldr	r3, [pc, #16]	@ (8002414 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	3301      	adds	r3, #1
 8002406:	4a03      	ldr	r2, [pc, #12]	@ (8002414 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8002408:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 800240a:	4803      	ldr	r0, [pc, #12]	@ (8002418 <TIM1_UP_TIM10_IRQHandler+0x1c>)
 800240c:	f001 fc8c 	bl	8003d28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002410:	bf00      	nop
 8002412:	bd80      	pop	{r7, pc}
 8002414:	200000a4 	.word	0x200000a4
 8002418:	200000f0 	.word	0x200000f0

0800241c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002420:	4802      	ldr	r0, [pc, #8]	@ (800242c <USART2_IRQHandler+0x10>)
 8002422:	f002 f8c9 	bl	80045b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002426:	bf00      	nop
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	20000180 	.word	0x20000180

08002430 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b086      	sub	sp, #24
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002438:	4a14      	ldr	r2, [pc, #80]	@ (800248c <_sbrk+0x5c>)
 800243a:	4b15      	ldr	r3, [pc, #84]	@ (8002490 <_sbrk+0x60>)
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002444:	4b13      	ldr	r3, [pc, #76]	@ (8002494 <_sbrk+0x64>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d102      	bne.n	8002452 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800244c:	4b11      	ldr	r3, [pc, #68]	@ (8002494 <_sbrk+0x64>)
 800244e:	4a12      	ldr	r2, [pc, #72]	@ (8002498 <_sbrk+0x68>)
 8002450:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002452:	4b10      	ldr	r3, [pc, #64]	@ (8002494 <_sbrk+0x64>)
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4413      	add	r3, r2
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	429a      	cmp	r2, r3
 800245e:	d207      	bcs.n	8002470 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002460:	f006 fdd0 	bl	8009004 <__errno>
 8002464:	4603      	mov	r3, r0
 8002466:	220c      	movs	r2, #12
 8002468:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800246a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800246e:	e009      	b.n	8002484 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002470:	4b08      	ldr	r3, [pc, #32]	@ (8002494 <_sbrk+0x64>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002476:	4b07      	ldr	r3, [pc, #28]	@ (8002494 <_sbrk+0x64>)
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4413      	add	r3, r2
 800247e:	4a05      	ldr	r2, [pc, #20]	@ (8002494 <_sbrk+0x64>)
 8002480:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002482:	68fb      	ldr	r3, [r7, #12]
}
 8002484:	4618      	mov	r0, r3
 8002486:	3718      	adds	r7, #24
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	20018000 	.word	0x20018000
 8002490:	00000400 	.word	0x00000400
 8002494:	2000029c 	.word	0x2000029c
 8002498:	20004e38 	.word	0x20004e38

0800249c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024a0:	4b06      	ldr	r3, [pc, #24]	@ (80024bc <SystemInit+0x20>)
 80024a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024a6:	4a05      	ldr	r2, [pc, #20]	@ (80024bc <SystemInit+0x20>)
 80024a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80024ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024b0:	bf00      	nop
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	e000ed00 	.word	0xe000ed00

080024c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80024c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80024f8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80024c4:	f7ff ffea 	bl	800249c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024c8:	480c      	ldr	r0, [pc, #48]	@ (80024fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80024ca:	490d      	ldr	r1, [pc, #52]	@ (8002500 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80024cc:	4a0d      	ldr	r2, [pc, #52]	@ (8002504 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80024ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024d0:	e002      	b.n	80024d8 <LoopCopyDataInit>

080024d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024d6:	3304      	adds	r3, #4

080024d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024dc:	d3f9      	bcc.n	80024d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024de:	4a0a      	ldr	r2, [pc, #40]	@ (8002508 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80024e0:	4c0a      	ldr	r4, [pc, #40]	@ (800250c <LoopFillZerobss+0x22>)
  movs r3, #0
 80024e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024e4:	e001      	b.n	80024ea <LoopFillZerobss>

080024e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024e8:	3204      	adds	r2, #4

080024ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024ec:	d3fb      	bcc.n	80024e6 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80024ee:	f006 fd8f 	bl	8009010 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024f2:	f7ff fbb5 	bl	8001c60 <main>
  bx  lr    
 80024f6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80024f8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80024fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002500:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8002504:	0800a9d0 	.word	0x0800a9d0
  ldr r2, =_sbss
 8002508:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800250c:	20004e38 	.word	0x20004e38

08002510 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002510:	e7fe      	b.n	8002510 <ADC_IRQHandler>
	...

08002514 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002518:	4b0e      	ldr	r3, [pc, #56]	@ (8002554 <HAL_Init+0x40>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a0d      	ldr	r2, [pc, #52]	@ (8002554 <HAL_Init+0x40>)
 800251e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002522:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002524:	4b0b      	ldr	r3, [pc, #44]	@ (8002554 <HAL_Init+0x40>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a0a      	ldr	r2, [pc, #40]	@ (8002554 <HAL_Init+0x40>)
 800252a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800252e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002530:	4b08      	ldr	r3, [pc, #32]	@ (8002554 <HAL_Init+0x40>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a07      	ldr	r2, [pc, #28]	@ (8002554 <HAL_Init+0x40>)
 8002536:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800253a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800253c:	2003      	movs	r0, #3
 800253e:	f000 f8fc 	bl	800273a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002542:	200f      	movs	r0, #15
 8002544:	f7ff feb8 	bl	80022b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002548:	f7ff fd98 	bl	800207c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	40023c00 	.word	0x40023c00

08002558 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800255c:	4b06      	ldr	r3, [pc, #24]	@ (8002578 <HAL_IncTick+0x20>)
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	461a      	mov	r2, r3
 8002562:	4b06      	ldr	r3, [pc, #24]	@ (800257c <HAL_IncTick+0x24>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4413      	add	r3, r2
 8002568:	4a04      	ldr	r2, [pc, #16]	@ (800257c <HAL_IncTick+0x24>)
 800256a:	6013      	str	r3, [r2, #0]
}
 800256c:	bf00      	nop
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	20000008 	.word	0x20000008
 800257c:	200002a0 	.word	0x200002a0

08002580 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  return uwTick;
 8002584:	4b03      	ldr	r3, [pc, #12]	@ (8002594 <HAL_GetTick+0x14>)
 8002586:	681b      	ldr	r3, [r3, #0]
}
 8002588:	4618      	mov	r0, r3
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	200002a0 	.word	0x200002a0

08002598 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025a0:	f7ff ffee 	bl	8002580 <HAL_GetTick>
 80025a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80025b0:	d005      	beq.n	80025be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025b2:	4b0a      	ldr	r3, [pc, #40]	@ (80025dc <HAL_Delay+0x44>)
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	461a      	mov	r2, r3
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	4413      	add	r3, r2
 80025bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80025be:	bf00      	nop
 80025c0:	f7ff ffde 	bl	8002580 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	68fa      	ldr	r2, [r7, #12]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d8f7      	bhi.n	80025c0 <HAL_Delay+0x28>
  {
  }
}
 80025d0:	bf00      	nop
 80025d2:	bf00      	nop
 80025d4:	3710      	adds	r7, #16
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	20000008 	.word	0x20000008

080025e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b085      	sub	sp, #20
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f003 0307 	and.w	r3, r3, #7
 80025ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002624 <__NVIC_SetPriorityGrouping+0x44>)
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025f6:	68ba      	ldr	r2, [r7, #8]
 80025f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80025fc:	4013      	ands	r3, r2
 80025fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002608:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800260c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002610:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002612:	4a04      	ldr	r2, [pc, #16]	@ (8002624 <__NVIC_SetPriorityGrouping+0x44>)
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	60d3      	str	r3, [r2, #12]
}
 8002618:	bf00      	nop
 800261a:	3714      	adds	r7, #20
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr
 8002624:	e000ed00 	.word	0xe000ed00

08002628 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800262c:	4b04      	ldr	r3, [pc, #16]	@ (8002640 <__NVIC_GetPriorityGrouping+0x18>)
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	0a1b      	lsrs	r3, r3, #8
 8002632:	f003 0307 	and.w	r3, r3, #7
}
 8002636:	4618      	mov	r0, r3
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	e000ed00 	.word	0xe000ed00

08002644 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	4603      	mov	r3, r0
 800264c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800264e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002652:	2b00      	cmp	r3, #0
 8002654:	db0b      	blt.n	800266e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002656:	79fb      	ldrb	r3, [r7, #7]
 8002658:	f003 021f 	and.w	r2, r3, #31
 800265c:	4907      	ldr	r1, [pc, #28]	@ (800267c <__NVIC_EnableIRQ+0x38>)
 800265e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002662:	095b      	lsrs	r3, r3, #5
 8002664:	2001      	movs	r0, #1
 8002666:	fa00 f202 	lsl.w	r2, r0, r2
 800266a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800266e:	bf00      	nop
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	e000e100 	.word	0xe000e100

08002680 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	4603      	mov	r3, r0
 8002688:	6039      	str	r1, [r7, #0]
 800268a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800268c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002690:	2b00      	cmp	r3, #0
 8002692:	db0a      	blt.n	80026aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	b2da      	uxtb	r2, r3
 8002698:	490c      	ldr	r1, [pc, #48]	@ (80026cc <__NVIC_SetPriority+0x4c>)
 800269a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269e:	0112      	lsls	r2, r2, #4
 80026a0:	b2d2      	uxtb	r2, r2
 80026a2:	440b      	add	r3, r1
 80026a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026a8:	e00a      	b.n	80026c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	b2da      	uxtb	r2, r3
 80026ae:	4908      	ldr	r1, [pc, #32]	@ (80026d0 <__NVIC_SetPriority+0x50>)
 80026b0:	79fb      	ldrb	r3, [r7, #7]
 80026b2:	f003 030f 	and.w	r3, r3, #15
 80026b6:	3b04      	subs	r3, #4
 80026b8:	0112      	lsls	r2, r2, #4
 80026ba:	b2d2      	uxtb	r2, r2
 80026bc:	440b      	add	r3, r1
 80026be:	761a      	strb	r2, [r3, #24]
}
 80026c0:	bf00      	nop
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr
 80026cc:	e000e100 	.word	0xe000e100
 80026d0:	e000ed00 	.word	0xe000ed00

080026d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b089      	sub	sp, #36	@ 0x24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f003 0307 	and.w	r3, r3, #7
 80026e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	f1c3 0307 	rsb	r3, r3, #7
 80026ee:	2b04      	cmp	r3, #4
 80026f0:	bf28      	it	cs
 80026f2:	2304      	movcs	r3, #4
 80026f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	3304      	adds	r3, #4
 80026fa:	2b06      	cmp	r3, #6
 80026fc:	d902      	bls.n	8002704 <NVIC_EncodePriority+0x30>
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	3b03      	subs	r3, #3
 8002702:	e000      	b.n	8002706 <NVIC_EncodePriority+0x32>
 8002704:	2300      	movs	r3, #0
 8002706:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002708:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	43da      	mvns	r2, r3
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	401a      	ands	r2, r3
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800271c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	fa01 f303 	lsl.w	r3, r1, r3
 8002726:	43d9      	mvns	r1, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800272c:	4313      	orrs	r3, r2
         );
}
 800272e:	4618      	mov	r0, r3
 8002730:	3724      	adds	r7, #36	@ 0x24
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr

0800273a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	b082      	sub	sp, #8
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f7ff ff4c 	bl	80025e0 <__NVIC_SetPriorityGrouping>
}
 8002748:	bf00      	nop
 800274a:	3708      	adds	r7, #8
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002750:	b580      	push	{r7, lr}
 8002752:	b086      	sub	sp, #24
 8002754:	af00      	add	r7, sp, #0
 8002756:	4603      	mov	r3, r0
 8002758:	60b9      	str	r1, [r7, #8]
 800275a:	607a      	str	r2, [r7, #4]
 800275c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800275e:	2300      	movs	r3, #0
 8002760:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002762:	f7ff ff61 	bl	8002628 <__NVIC_GetPriorityGrouping>
 8002766:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	68b9      	ldr	r1, [r7, #8]
 800276c:	6978      	ldr	r0, [r7, #20]
 800276e:	f7ff ffb1 	bl	80026d4 <NVIC_EncodePriority>
 8002772:	4602      	mov	r2, r0
 8002774:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002778:	4611      	mov	r1, r2
 800277a:	4618      	mov	r0, r3
 800277c:	f7ff ff80 	bl	8002680 <__NVIC_SetPriority>
}
 8002780:	bf00      	nop
 8002782:	3718      	adds	r7, #24
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	4603      	mov	r3, r0
 8002790:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002796:	4618      	mov	r0, r3
 8002798:	f7ff ff54 	bl	8002644 <__NVIC_EnableIRQ>
}
 800279c:	bf00      	nop
 800279e:	3708      	adds	r7, #8
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b086      	sub	sp, #24
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80027ac:	2300      	movs	r3, #0
 80027ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80027b0:	f7ff fee6 	bl	8002580 <HAL_GetTick>
 80027b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d101      	bne.n	80027c0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e099      	b.n	80028f4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2202      	movs	r2, #2
 80027c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f022 0201 	bic.w	r2, r2, #1
 80027de:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027e0:	e00f      	b.n	8002802 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027e2:	f7ff fecd 	bl	8002580 <HAL_GetTick>
 80027e6:	4602      	mov	r2, r0
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	2b05      	cmp	r3, #5
 80027ee:	d908      	bls.n	8002802 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2220      	movs	r2, #32
 80027f4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2203      	movs	r2, #3
 80027fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e078      	b.n	80028f4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0301 	and.w	r3, r3, #1
 800280c:	2b00      	cmp	r3, #0
 800280e:	d1e8      	bne.n	80027e2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002818:	697a      	ldr	r2, [r7, #20]
 800281a:	4b38      	ldr	r3, [pc, #224]	@ (80028fc <HAL_DMA_Init+0x158>)
 800281c:	4013      	ands	r3, r2
 800281e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685a      	ldr	r2, [r3, #4]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800282e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	691b      	ldr	r3, [r3, #16]
 8002834:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800283a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	699b      	ldr	r3, [r3, #24]
 8002840:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002846:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6a1b      	ldr	r3, [r3, #32]
 800284c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800284e:	697a      	ldr	r2, [r7, #20]
 8002850:	4313      	orrs	r3, r2
 8002852:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002858:	2b04      	cmp	r3, #4
 800285a:	d107      	bne.n	800286c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002864:	4313      	orrs	r3, r2
 8002866:	697a      	ldr	r2, [r7, #20]
 8002868:	4313      	orrs	r3, r2
 800286a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	697a      	ldr	r2, [r7, #20]
 8002872:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	695b      	ldr	r3, [r3, #20]
 800287a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	f023 0307 	bic.w	r3, r3, #7
 8002882:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002888:	697a      	ldr	r2, [r7, #20]
 800288a:	4313      	orrs	r3, r2
 800288c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002892:	2b04      	cmp	r3, #4
 8002894:	d117      	bne.n	80028c6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800289a:	697a      	ldr	r2, [r7, #20]
 800289c:	4313      	orrs	r3, r2
 800289e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d00e      	beq.n	80028c6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f000 fb01 	bl	8002eb0 <DMA_CheckFifoParam>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d008      	beq.n	80028c6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2240      	movs	r2, #64	@ 0x40
 80028b8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2201      	movs	r2, #1
 80028be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80028c2:	2301      	movs	r3, #1
 80028c4:	e016      	b.n	80028f4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	697a      	ldr	r2, [r7, #20]
 80028cc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f000 fab8 	bl	8002e44 <DMA_CalcBaseAndBitshift>
 80028d4:	4603      	mov	r3, r0
 80028d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028dc:	223f      	movs	r2, #63	@ 0x3f
 80028de:	409a      	lsls	r2, r3
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2201      	movs	r2, #1
 80028ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3718      	adds	r7, #24
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	f010803f 	.word	0xf010803f

08002900 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b086      	sub	sp, #24
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
 800290c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800290e:	2300      	movs	r3, #0
 8002910:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002916:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800291e:	2b01      	cmp	r3, #1
 8002920:	d101      	bne.n	8002926 <HAL_DMA_Start_IT+0x26>
 8002922:	2302      	movs	r3, #2
 8002924:	e040      	b.n	80029a8 <HAL_DMA_Start_IT+0xa8>
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2201      	movs	r2, #1
 800292a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002934:	b2db      	uxtb	r3, r3
 8002936:	2b01      	cmp	r3, #1
 8002938:	d12f      	bne.n	800299a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2202      	movs	r2, #2
 800293e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2200      	movs	r2, #0
 8002946:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	68b9      	ldr	r1, [r7, #8]
 800294e:	68f8      	ldr	r0, [r7, #12]
 8002950:	f000 fa4a 	bl	8002de8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002958:	223f      	movs	r2, #63	@ 0x3f
 800295a:	409a      	lsls	r2, r3
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f042 0216 	orr.w	r2, r2, #22
 800296e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002974:	2b00      	cmp	r3, #0
 8002976:	d007      	beq.n	8002988 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f042 0208 	orr.w	r2, r2, #8
 8002986:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f042 0201 	orr.w	r2, r2, #1
 8002996:	601a      	str	r2, [r3, #0]
 8002998:	e005      	b.n	80029a6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80029a2:	2302      	movs	r3, #2
 80029a4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80029a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3718      	adds	r7, #24
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029bc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80029be:	f7ff fddf 	bl	8002580 <HAL_GetTick>
 80029c2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d008      	beq.n	80029e2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2280      	movs	r2, #128	@ 0x80
 80029d4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e052      	b.n	8002a88 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f022 0216 	bic.w	r2, r2, #22
 80029f0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	695a      	ldr	r2, [r3, #20]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a00:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d103      	bne.n	8002a12 <HAL_DMA_Abort+0x62>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d007      	beq.n	8002a22 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f022 0208 	bic.w	r2, r2, #8
 8002a20:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f022 0201 	bic.w	r2, r2, #1
 8002a30:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a32:	e013      	b.n	8002a5c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a34:	f7ff fda4 	bl	8002580 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b05      	cmp	r3, #5
 8002a40:	d90c      	bls.n	8002a5c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2220      	movs	r2, #32
 8002a46:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2203      	movs	r2, #3
 8002a4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	e015      	b.n	8002a88 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1e4      	bne.n	8002a34 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a6e:	223f      	movs	r2, #63	@ 0x3f
 8002a70:	409a      	lsls	r2, r3
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2201      	movs	r2, #1
 8002a7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3710      	adds	r7, #16
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d004      	beq.n	8002aae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2280      	movs	r2, #128	@ 0x80
 8002aa8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e00c      	b.n	8002ac8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2205      	movs	r2, #5
 8002ab2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f022 0201 	bic.w	r2, r2, #1
 8002ac4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002ac6:	2300      	movs	r3, #0
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b086      	sub	sp, #24
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002adc:	2300      	movs	r3, #0
 8002ade:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ae0:	4b8e      	ldr	r3, [pc, #568]	@ (8002d1c <HAL_DMA_IRQHandler+0x248>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a8e      	ldr	r2, [pc, #568]	@ (8002d20 <HAL_DMA_IRQHandler+0x24c>)
 8002ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aea:	0a9b      	lsrs	r3, r3, #10
 8002aec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002af2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002afe:	2208      	movs	r2, #8
 8002b00:	409a      	lsls	r2, r3
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	4013      	ands	r3, r2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d01a      	beq.n	8002b40 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0304 	and.w	r3, r3, #4
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d013      	beq.n	8002b40 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f022 0204 	bic.w	r2, r2, #4
 8002b26:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b2c:	2208      	movs	r2, #8
 8002b2e:	409a      	lsls	r2, r3
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b38:	f043 0201 	orr.w	r2, r3, #1
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b44:	2201      	movs	r2, #1
 8002b46:	409a      	lsls	r2, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d012      	beq.n	8002b76 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	695b      	ldr	r3, [r3, #20]
 8002b56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00b      	beq.n	8002b76 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b62:	2201      	movs	r2, #1
 8002b64:	409a      	lsls	r2, r3
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b6e:	f043 0202 	orr.w	r2, r3, #2
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b7a:	2204      	movs	r2, #4
 8002b7c:	409a      	lsls	r2, r3
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	4013      	ands	r3, r2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d012      	beq.n	8002bac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0302 	and.w	r3, r3, #2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d00b      	beq.n	8002bac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b98:	2204      	movs	r2, #4
 8002b9a:	409a      	lsls	r2, r3
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ba4:	f043 0204 	orr.w	r2, r3, #4
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bb0:	2210      	movs	r2, #16
 8002bb2:	409a      	lsls	r2, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d043      	beq.n	8002c44 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0308 	and.w	r3, r3, #8
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d03c      	beq.n	8002c44 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bce:	2210      	movs	r2, #16
 8002bd0:	409a      	lsls	r2, r3
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d018      	beq.n	8002c16 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d108      	bne.n	8002c04 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d024      	beq.n	8002c44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	4798      	blx	r3
 8002c02:	e01f      	b.n	8002c44 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d01b      	beq.n	8002c44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	4798      	blx	r3
 8002c14:	e016      	b.n	8002c44 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d107      	bne.n	8002c34 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f022 0208 	bic.w	r2, r2, #8
 8002c32:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d003      	beq.n	8002c44 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c48:	2220      	movs	r2, #32
 8002c4a:	409a      	lsls	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	4013      	ands	r3, r2
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f000 808f 	beq.w	8002d74 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0310 	and.w	r3, r3, #16
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	f000 8087 	beq.w	8002d74 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c6a:	2220      	movs	r2, #32
 8002c6c:	409a      	lsls	r2, r3
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2b05      	cmp	r3, #5
 8002c7c:	d136      	bne.n	8002cec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f022 0216 	bic.w	r2, r2, #22
 8002c8c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	695a      	ldr	r2, [r3, #20]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c9c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d103      	bne.n	8002cae <HAL_DMA_IRQHandler+0x1da>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d007      	beq.n	8002cbe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f022 0208 	bic.w	r2, r2, #8
 8002cbc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cc2:	223f      	movs	r2, #63	@ 0x3f
 8002cc4:	409a      	lsls	r2, r3
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2201      	movs	r2, #1
 8002cce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d07e      	beq.n	8002de0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	4798      	blx	r3
        }
        return;
 8002cea:	e079      	b.n	8002de0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d01d      	beq.n	8002d36 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d10d      	bne.n	8002d24 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d031      	beq.n	8002d74 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	4798      	blx	r3
 8002d18:	e02c      	b.n	8002d74 <HAL_DMA_IRQHandler+0x2a0>
 8002d1a:	bf00      	nop
 8002d1c:	20000000 	.word	0x20000000
 8002d20:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d023      	beq.n	8002d74 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	4798      	blx	r3
 8002d34:	e01e      	b.n	8002d74 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d10f      	bne.n	8002d64 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f022 0210 	bic.w	r2, r2, #16
 8002d52:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d003      	beq.n	8002d74 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d032      	beq.n	8002de2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d80:	f003 0301 	and.w	r3, r3, #1
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d022      	beq.n	8002dce <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2205      	movs	r2, #5
 8002d8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f022 0201 	bic.w	r2, r2, #1
 8002d9e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	3301      	adds	r3, #1
 8002da4:	60bb      	str	r3, [r7, #8]
 8002da6:	697a      	ldr	r2, [r7, #20]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d307      	bcc.n	8002dbc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d1f2      	bne.n	8002da0 <HAL_DMA_IRQHandler+0x2cc>
 8002dba:	e000      	b.n	8002dbe <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002dbc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d005      	beq.n	8002de2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	4798      	blx	r3
 8002dde:	e000      	b.n	8002de2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002de0:	bf00      	nop
    }
  }
}
 8002de2:	3718      	adds	r7, #24
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b085      	sub	sp, #20
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	607a      	str	r2, [r7, #4]
 8002df4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002e04:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	683a      	ldr	r2, [r7, #0]
 8002e0c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	2b40      	cmp	r3, #64	@ 0x40
 8002e14:	d108      	bne.n	8002e28 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68ba      	ldr	r2, [r7, #8]
 8002e24:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002e26:	e007      	b.n	8002e38 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68ba      	ldr	r2, [r7, #8]
 8002e2e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	60da      	str	r2, [r3, #12]
}
 8002e38:	bf00      	nop
 8002e3a:	3714      	adds	r7, #20
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b085      	sub	sp, #20
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	3b10      	subs	r3, #16
 8002e54:	4a14      	ldr	r2, [pc, #80]	@ (8002ea8 <DMA_CalcBaseAndBitshift+0x64>)
 8002e56:	fba2 2303 	umull	r2, r3, r2, r3
 8002e5a:	091b      	lsrs	r3, r3, #4
 8002e5c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e5e:	4a13      	ldr	r2, [pc, #76]	@ (8002eac <DMA_CalcBaseAndBitshift+0x68>)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	4413      	add	r3, r2
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	461a      	mov	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2b03      	cmp	r3, #3
 8002e70:	d909      	bls.n	8002e86 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002e7a:	f023 0303 	bic.w	r3, r3, #3
 8002e7e:	1d1a      	adds	r2, r3, #4
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	659a      	str	r2, [r3, #88]	@ 0x58
 8002e84:	e007      	b.n	8002e96 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002e8e:	f023 0303 	bic.w	r3, r3, #3
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3714      	adds	r7, #20
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	aaaaaaab 	.word	0xaaaaaaab
 8002eac:	0800a940 	.word	0x0800a940

08002eb0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b085      	sub	sp, #20
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ec0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d11f      	bne.n	8002f0a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	2b03      	cmp	r3, #3
 8002ece:	d856      	bhi.n	8002f7e <DMA_CheckFifoParam+0xce>
 8002ed0:	a201      	add	r2, pc, #4	@ (adr r2, 8002ed8 <DMA_CheckFifoParam+0x28>)
 8002ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ed6:	bf00      	nop
 8002ed8:	08002ee9 	.word	0x08002ee9
 8002edc:	08002efb 	.word	0x08002efb
 8002ee0:	08002ee9 	.word	0x08002ee9
 8002ee4:	08002f7f 	.word	0x08002f7f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d046      	beq.n	8002f82 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ef8:	e043      	b.n	8002f82 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002efe:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002f02:	d140      	bne.n	8002f86 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f08:	e03d      	b.n	8002f86 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f12:	d121      	bne.n	8002f58 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	2b03      	cmp	r3, #3
 8002f18:	d837      	bhi.n	8002f8a <DMA_CheckFifoParam+0xda>
 8002f1a:	a201      	add	r2, pc, #4	@ (adr r2, 8002f20 <DMA_CheckFifoParam+0x70>)
 8002f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f20:	08002f31 	.word	0x08002f31
 8002f24:	08002f37 	.word	0x08002f37
 8002f28:	08002f31 	.word	0x08002f31
 8002f2c:	08002f49 	.word	0x08002f49
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	73fb      	strb	r3, [r7, #15]
      break;
 8002f34:	e030      	b.n	8002f98 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f3a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d025      	beq.n	8002f8e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f46:	e022      	b.n	8002f8e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f4c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002f50:	d11f      	bne.n	8002f92 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002f56:	e01c      	b.n	8002f92 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d903      	bls.n	8002f66 <DMA_CheckFifoParam+0xb6>
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	2b03      	cmp	r3, #3
 8002f62:	d003      	beq.n	8002f6c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002f64:	e018      	b.n	8002f98 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	73fb      	strb	r3, [r7, #15]
      break;
 8002f6a:	e015      	b.n	8002f98 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f70:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d00e      	beq.n	8002f96 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	73fb      	strb	r3, [r7, #15]
      break;
 8002f7c:	e00b      	b.n	8002f96 <DMA_CheckFifoParam+0xe6>
      break;
 8002f7e:	bf00      	nop
 8002f80:	e00a      	b.n	8002f98 <DMA_CheckFifoParam+0xe8>
      break;
 8002f82:	bf00      	nop
 8002f84:	e008      	b.n	8002f98 <DMA_CheckFifoParam+0xe8>
      break;
 8002f86:	bf00      	nop
 8002f88:	e006      	b.n	8002f98 <DMA_CheckFifoParam+0xe8>
      break;
 8002f8a:	bf00      	nop
 8002f8c:	e004      	b.n	8002f98 <DMA_CheckFifoParam+0xe8>
      break;
 8002f8e:	bf00      	nop
 8002f90:	e002      	b.n	8002f98 <DMA_CheckFifoParam+0xe8>
      break;   
 8002f92:	bf00      	nop
 8002f94:	e000      	b.n	8002f98 <DMA_CheckFifoParam+0xe8>
      break;
 8002f96:	bf00      	nop
    }
  } 
  
  return status; 
 8002f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3714      	adds	r7, #20
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop

08002fa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b089      	sub	sp, #36	@ 0x24
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	61fb      	str	r3, [r7, #28]
 8002fc2:	e159      	b.n	8003278 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fcc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	697a      	ldr	r2, [r7, #20]
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	f040 8148 	bne.w	8003272 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f003 0303 	and.w	r3, r3, #3
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d005      	beq.n	8002ffa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d130      	bne.n	800305c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	2203      	movs	r2, #3
 8003006:	fa02 f303 	lsl.w	r3, r2, r3
 800300a:	43db      	mvns	r3, r3
 800300c:	69ba      	ldr	r2, [r7, #24]
 800300e:	4013      	ands	r3, r2
 8003010:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	68da      	ldr	r2, [r3, #12]
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	005b      	lsls	r3, r3, #1
 800301a:	fa02 f303 	lsl.w	r3, r2, r3
 800301e:	69ba      	ldr	r2, [r7, #24]
 8003020:	4313      	orrs	r3, r2
 8003022:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	69ba      	ldr	r2, [r7, #24]
 8003028:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003030:	2201      	movs	r2, #1
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	fa02 f303 	lsl.w	r3, r2, r3
 8003038:	43db      	mvns	r3, r3
 800303a:	69ba      	ldr	r2, [r7, #24]
 800303c:	4013      	ands	r3, r2
 800303e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	091b      	lsrs	r3, r3, #4
 8003046:	f003 0201 	and.w	r2, r3, #1
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	fa02 f303 	lsl.w	r3, r2, r3
 8003050:	69ba      	ldr	r2, [r7, #24]
 8003052:	4313      	orrs	r3, r2
 8003054:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f003 0303 	and.w	r3, r3, #3
 8003064:	2b03      	cmp	r3, #3
 8003066:	d017      	beq.n	8003098 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	2203      	movs	r2, #3
 8003074:	fa02 f303 	lsl.w	r3, r2, r3
 8003078:	43db      	mvns	r3, r3
 800307a:	69ba      	ldr	r2, [r7, #24]
 800307c:	4013      	ands	r3, r2
 800307e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	689a      	ldr	r2, [r3, #8]
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	005b      	lsls	r3, r3, #1
 8003088:	fa02 f303 	lsl.w	r3, r2, r3
 800308c:	69ba      	ldr	r2, [r7, #24]
 800308e:	4313      	orrs	r3, r2
 8003090:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f003 0303 	and.w	r3, r3, #3
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d123      	bne.n	80030ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	08da      	lsrs	r2, r3, #3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	3208      	adds	r2, #8
 80030ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	f003 0307 	and.w	r3, r3, #7
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	220f      	movs	r2, #15
 80030bc:	fa02 f303 	lsl.w	r3, r2, r3
 80030c0:	43db      	mvns	r3, r3
 80030c2:	69ba      	ldr	r2, [r7, #24]
 80030c4:	4013      	ands	r3, r2
 80030c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	691a      	ldr	r2, [r3, #16]
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	f003 0307 	and.w	r3, r3, #7
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	69ba      	ldr	r2, [r7, #24]
 80030da:	4313      	orrs	r3, r2
 80030dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	08da      	lsrs	r2, r3, #3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	3208      	adds	r2, #8
 80030e6:	69b9      	ldr	r1, [r7, #24]
 80030e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	005b      	lsls	r3, r3, #1
 80030f6:	2203      	movs	r2, #3
 80030f8:	fa02 f303 	lsl.w	r3, r2, r3
 80030fc:	43db      	mvns	r3, r3
 80030fe:	69ba      	ldr	r2, [r7, #24]
 8003100:	4013      	ands	r3, r2
 8003102:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f003 0203 	and.w	r2, r3, #3
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	fa02 f303 	lsl.w	r3, r2, r3
 8003114:	69ba      	ldr	r2, [r7, #24]
 8003116:	4313      	orrs	r3, r2
 8003118:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	69ba      	ldr	r2, [r7, #24]
 800311e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003128:	2b00      	cmp	r3, #0
 800312a:	f000 80a2 	beq.w	8003272 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800312e:	2300      	movs	r3, #0
 8003130:	60fb      	str	r3, [r7, #12]
 8003132:	4b57      	ldr	r3, [pc, #348]	@ (8003290 <HAL_GPIO_Init+0x2e8>)
 8003134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003136:	4a56      	ldr	r2, [pc, #344]	@ (8003290 <HAL_GPIO_Init+0x2e8>)
 8003138:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800313c:	6453      	str	r3, [r2, #68]	@ 0x44
 800313e:	4b54      	ldr	r3, [pc, #336]	@ (8003290 <HAL_GPIO_Init+0x2e8>)
 8003140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003142:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003146:	60fb      	str	r3, [r7, #12]
 8003148:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800314a:	4a52      	ldr	r2, [pc, #328]	@ (8003294 <HAL_GPIO_Init+0x2ec>)
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	089b      	lsrs	r3, r3, #2
 8003150:	3302      	adds	r3, #2
 8003152:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003156:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	f003 0303 	and.w	r3, r3, #3
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	220f      	movs	r2, #15
 8003162:	fa02 f303 	lsl.w	r3, r2, r3
 8003166:	43db      	mvns	r3, r3
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	4013      	ands	r3, r2
 800316c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a49      	ldr	r2, [pc, #292]	@ (8003298 <HAL_GPIO_Init+0x2f0>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d019      	beq.n	80031aa <HAL_GPIO_Init+0x202>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a48      	ldr	r2, [pc, #288]	@ (800329c <HAL_GPIO_Init+0x2f4>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d013      	beq.n	80031a6 <HAL_GPIO_Init+0x1fe>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a47      	ldr	r2, [pc, #284]	@ (80032a0 <HAL_GPIO_Init+0x2f8>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d00d      	beq.n	80031a2 <HAL_GPIO_Init+0x1fa>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a46      	ldr	r2, [pc, #280]	@ (80032a4 <HAL_GPIO_Init+0x2fc>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d007      	beq.n	800319e <HAL_GPIO_Init+0x1f6>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a45      	ldr	r2, [pc, #276]	@ (80032a8 <HAL_GPIO_Init+0x300>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d101      	bne.n	800319a <HAL_GPIO_Init+0x1f2>
 8003196:	2304      	movs	r3, #4
 8003198:	e008      	b.n	80031ac <HAL_GPIO_Init+0x204>
 800319a:	2307      	movs	r3, #7
 800319c:	e006      	b.n	80031ac <HAL_GPIO_Init+0x204>
 800319e:	2303      	movs	r3, #3
 80031a0:	e004      	b.n	80031ac <HAL_GPIO_Init+0x204>
 80031a2:	2302      	movs	r3, #2
 80031a4:	e002      	b.n	80031ac <HAL_GPIO_Init+0x204>
 80031a6:	2301      	movs	r3, #1
 80031a8:	e000      	b.n	80031ac <HAL_GPIO_Init+0x204>
 80031aa:	2300      	movs	r3, #0
 80031ac:	69fa      	ldr	r2, [r7, #28]
 80031ae:	f002 0203 	and.w	r2, r2, #3
 80031b2:	0092      	lsls	r2, r2, #2
 80031b4:	4093      	lsls	r3, r2
 80031b6:	69ba      	ldr	r2, [r7, #24]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031bc:	4935      	ldr	r1, [pc, #212]	@ (8003294 <HAL_GPIO_Init+0x2ec>)
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	089b      	lsrs	r3, r3, #2
 80031c2:	3302      	adds	r3, #2
 80031c4:	69ba      	ldr	r2, [r7, #24]
 80031c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031ca:	4b38      	ldr	r3, [pc, #224]	@ (80032ac <HAL_GPIO_Init+0x304>)
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	43db      	mvns	r3, r3
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	4013      	ands	r3, r2
 80031d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d003      	beq.n	80031ee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80031e6:	69ba      	ldr	r2, [r7, #24]
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031ee:	4a2f      	ldr	r2, [pc, #188]	@ (80032ac <HAL_GPIO_Init+0x304>)
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031f4:	4b2d      	ldr	r3, [pc, #180]	@ (80032ac <HAL_GPIO_Init+0x304>)
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	43db      	mvns	r3, r3
 80031fe:	69ba      	ldr	r2, [r7, #24]
 8003200:	4013      	ands	r3, r2
 8003202:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d003      	beq.n	8003218 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	4313      	orrs	r3, r2
 8003216:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003218:	4a24      	ldr	r2, [pc, #144]	@ (80032ac <HAL_GPIO_Init+0x304>)
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800321e:	4b23      	ldr	r3, [pc, #140]	@ (80032ac <HAL_GPIO_Init+0x304>)
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	43db      	mvns	r3, r3
 8003228:	69ba      	ldr	r2, [r7, #24]
 800322a:	4013      	ands	r3, r2
 800322c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d003      	beq.n	8003242 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800323a:	69ba      	ldr	r2, [r7, #24]
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	4313      	orrs	r3, r2
 8003240:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003242:	4a1a      	ldr	r2, [pc, #104]	@ (80032ac <HAL_GPIO_Init+0x304>)
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003248:	4b18      	ldr	r3, [pc, #96]	@ (80032ac <HAL_GPIO_Init+0x304>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	43db      	mvns	r3, r3
 8003252:	69ba      	ldr	r2, [r7, #24]
 8003254:	4013      	ands	r3, r2
 8003256:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d003      	beq.n	800326c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003264:	69ba      	ldr	r2, [r7, #24]
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	4313      	orrs	r3, r2
 800326a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800326c:	4a0f      	ldr	r2, [pc, #60]	@ (80032ac <HAL_GPIO_Init+0x304>)
 800326e:	69bb      	ldr	r3, [r7, #24]
 8003270:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	3301      	adds	r3, #1
 8003276:	61fb      	str	r3, [r7, #28]
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	2b0f      	cmp	r3, #15
 800327c:	f67f aea2 	bls.w	8002fc4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003280:	bf00      	nop
 8003282:	bf00      	nop
 8003284:	3724      	adds	r7, #36	@ 0x24
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	40023800 	.word	0x40023800
 8003294:	40013800 	.word	0x40013800
 8003298:	40020000 	.word	0x40020000
 800329c:	40020400 	.word	0x40020400
 80032a0:	40020800 	.word	0x40020800
 80032a4:	40020c00 	.word	0x40020c00
 80032a8:	40021000 	.word	0x40021000
 80032ac:	40013c00 	.word	0x40013c00

080032b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b086      	sub	sp, #24
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d101      	bne.n	80032c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e267      	b.n	8003792 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d075      	beq.n	80033ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80032ce:	4b88      	ldr	r3, [pc, #544]	@ (80034f0 <HAL_RCC_OscConfig+0x240>)
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f003 030c 	and.w	r3, r3, #12
 80032d6:	2b04      	cmp	r3, #4
 80032d8:	d00c      	beq.n	80032f4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032da:	4b85      	ldr	r3, [pc, #532]	@ (80034f0 <HAL_RCC_OscConfig+0x240>)
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80032e2:	2b08      	cmp	r3, #8
 80032e4:	d112      	bne.n	800330c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032e6:	4b82      	ldr	r3, [pc, #520]	@ (80034f0 <HAL_RCC_OscConfig+0x240>)
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80032f2:	d10b      	bne.n	800330c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032f4:	4b7e      	ldr	r3, [pc, #504]	@ (80034f0 <HAL_RCC_OscConfig+0x240>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d05b      	beq.n	80033b8 <HAL_RCC_OscConfig+0x108>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d157      	bne.n	80033b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e242      	b.n	8003792 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003314:	d106      	bne.n	8003324 <HAL_RCC_OscConfig+0x74>
 8003316:	4b76      	ldr	r3, [pc, #472]	@ (80034f0 <HAL_RCC_OscConfig+0x240>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a75      	ldr	r2, [pc, #468]	@ (80034f0 <HAL_RCC_OscConfig+0x240>)
 800331c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003320:	6013      	str	r3, [r2, #0]
 8003322:	e01d      	b.n	8003360 <HAL_RCC_OscConfig+0xb0>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800332c:	d10c      	bne.n	8003348 <HAL_RCC_OscConfig+0x98>
 800332e:	4b70      	ldr	r3, [pc, #448]	@ (80034f0 <HAL_RCC_OscConfig+0x240>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a6f      	ldr	r2, [pc, #444]	@ (80034f0 <HAL_RCC_OscConfig+0x240>)
 8003334:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003338:	6013      	str	r3, [r2, #0]
 800333a:	4b6d      	ldr	r3, [pc, #436]	@ (80034f0 <HAL_RCC_OscConfig+0x240>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a6c      	ldr	r2, [pc, #432]	@ (80034f0 <HAL_RCC_OscConfig+0x240>)
 8003340:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003344:	6013      	str	r3, [r2, #0]
 8003346:	e00b      	b.n	8003360 <HAL_RCC_OscConfig+0xb0>
 8003348:	4b69      	ldr	r3, [pc, #420]	@ (80034f0 <HAL_RCC_OscConfig+0x240>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a68      	ldr	r2, [pc, #416]	@ (80034f0 <HAL_RCC_OscConfig+0x240>)
 800334e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003352:	6013      	str	r3, [r2, #0]
 8003354:	4b66      	ldr	r3, [pc, #408]	@ (80034f0 <HAL_RCC_OscConfig+0x240>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a65      	ldr	r2, [pc, #404]	@ (80034f0 <HAL_RCC_OscConfig+0x240>)
 800335a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800335e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d013      	beq.n	8003390 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003368:	f7ff f90a 	bl	8002580 <HAL_GetTick>
 800336c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800336e:	e008      	b.n	8003382 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003370:	f7ff f906 	bl	8002580 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	2b64      	cmp	r3, #100	@ 0x64
 800337c:	d901      	bls.n	8003382 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e207      	b.n	8003792 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003382:	4b5b      	ldr	r3, [pc, #364]	@ (80034f0 <HAL_RCC_OscConfig+0x240>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d0f0      	beq.n	8003370 <HAL_RCC_OscConfig+0xc0>
 800338e:	e014      	b.n	80033ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003390:	f7ff f8f6 	bl	8002580 <HAL_GetTick>
 8003394:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003396:	e008      	b.n	80033aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003398:	f7ff f8f2 	bl	8002580 <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b64      	cmp	r3, #100	@ 0x64
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e1f3      	b.n	8003792 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033aa:	4b51      	ldr	r3, [pc, #324]	@ (80034f0 <HAL_RCC_OscConfig+0x240>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d1f0      	bne.n	8003398 <HAL_RCC_OscConfig+0xe8>
 80033b6:	e000      	b.n	80033ba <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d063      	beq.n	800348e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80033c6:	4b4a      	ldr	r3, [pc, #296]	@ (80034f0 <HAL_RCC_OscConfig+0x240>)
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f003 030c 	and.w	r3, r3, #12
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00b      	beq.n	80033ea <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033d2:	4b47      	ldr	r3, [pc, #284]	@ (80034f0 <HAL_RCC_OscConfig+0x240>)
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80033da:	2b08      	cmp	r3, #8
 80033dc:	d11c      	bne.n	8003418 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033de:	4b44      	ldr	r3, [pc, #272]	@ (80034f0 <HAL_RCC_OscConfig+0x240>)
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d116      	bne.n	8003418 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ea:	4b41      	ldr	r3, [pc, #260]	@ (80034f0 <HAL_RCC_OscConfig+0x240>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d005      	beq.n	8003402 <HAL_RCC_OscConfig+0x152>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d001      	beq.n	8003402 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e1c7      	b.n	8003792 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003402:	4b3b      	ldr	r3, [pc, #236]	@ (80034f0 <HAL_RCC_OscConfig+0x240>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	00db      	lsls	r3, r3, #3
 8003410:	4937      	ldr	r1, [pc, #220]	@ (80034f0 <HAL_RCC_OscConfig+0x240>)
 8003412:	4313      	orrs	r3, r2
 8003414:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003416:	e03a      	b.n	800348e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d020      	beq.n	8003462 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003420:	4b34      	ldr	r3, [pc, #208]	@ (80034f4 <HAL_RCC_OscConfig+0x244>)
 8003422:	2201      	movs	r2, #1
 8003424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003426:	f7ff f8ab 	bl	8002580 <HAL_GetTick>
 800342a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800342c:	e008      	b.n	8003440 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800342e:	f7ff f8a7 	bl	8002580 <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	2b02      	cmp	r3, #2
 800343a:	d901      	bls.n	8003440 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e1a8      	b.n	8003792 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003440:	4b2b      	ldr	r3, [pc, #172]	@ (80034f0 <HAL_RCC_OscConfig+0x240>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0302 	and.w	r3, r3, #2
 8003448:	2b00      	cmp	r3, #0
 800344a:	d0f0      	beq.n	800342e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800344c:	4b28      	ldr	r3, [pc, #160]	@ (80034f0 <HAL_RCC_OscConfig+0x240>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	691b      	ldr	r3, [r3, #16]
 8003458:	00db      	lsls	r3, r3, #3
 800345a:	4925      	ldr	r1, [pc, #148]	@ (80034f0 <HAL_RCC_OscConfig+0x240>)
 800345c:	4313      	orrs	r3, r2
 800345e:	600b      	str	r3, [r1, #0]
 8003460:	e015      	b.n	800348e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003462:	4b24      	ldr	r3, [pc, #144]	@ (80034f4 <HAL_RCC_OscConfig+0x244>)
 8003464:	2200      	movs	r2, #0
 8003466:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003468:	f7ff f88a 	bl	8002580 <HAL_GetTick>
 800346c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800346e:	e008      	b.n	8003482 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003470:	f7ff f886 	bl	8002580 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	2b02      	cmp	r3, #2
 800347c:	d901      	bls.n	8003482 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e187      	b.n	8003792 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003482:	4b1b      	ldr	r3, [pc, #108]	@ (80034f0 <HAL_RCC_OscConfig+0x240>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0302 	and.w	r3, r3, #2
 800348a:	2b00      	cmp	r3, #0
 800348c:	d1f0      	bne.n	8003470 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0308 	and.w	r3, r3, #8
 8003496:	2b00      	cmp	r3, #0
 8003498:	d036      	beq.n	8003508 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	695b      	ldr	r3, [r3, #20]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d016      	beq.n	80034d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034a2:	4b15      	ldr	r3, [pc, #84]	@ (80034f8 <HAL_RCC_OscConfig+0x248>)
 80034a4:	2201      	movs	r2, #1
 80034a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034a8:	f7ff f86a 	bl	8002580 <HAL_GetTick>
 80034ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034ae:	e008      	b.n	80034c2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034b0:	f7ff f866 	bl	8002580 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d901      	bls.n	80034c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e167      	b.n	8003792 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034c2:	4b0b      	ldr	r3, [pc, #44]	@ (80034f0 <HAL_RCC_OscConfig+0x240>)
 80034c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d0f0      	beq.n	80034b0 <HAL_RCC_OscConfig+0x200>
 80034ce:	e01b      	b.n	8003508 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034d0:	4b09      	ldr	r3, [pc, #36]	@ (80034f8 <HAL_RCC_OscConfig+0x248>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034d6:	f7ff f853 	bl	8002580 <HAL_GetTick>
 80034da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034dc:	e00e      	b.n	80034fc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034de:	f7ff f84f 	bl	8002580 <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d907      	bls.n	80034fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	e150      	b.n	8003792 <HAL_RCC_OscConfig+0x4e2>
 80034f0:	40023800 	.word	0x40023800
 80034f4:	42470000 	.word	0x42470000
 80034f8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034fc:	4b88      	ldr	r3, [pc, #544]	@ (8003720 <HAL_RCC_OscConfig+0x470>)
 80034fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003500:	f003 0302 	and.w	r3, r3, #2
 8003504:	2b00      	cmp	r3, #0
 8003506:	d1ea      	bne.n	80034de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0304 	and.w	r3, r3, #4
 8003510:	2b00      	cmp	r3, #0
 8003512:	f000 8097 	beq.w	8003644 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003516:	2300      	movs	r3, #0
 8003518:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800351a:	4b81      	ldr	r3, [pc, #516]	@ (8003720 <HAL_RCC_OscConfig+0x470>)
 800351c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800351e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d10f      	bne.n	8003546 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003526:	2300      	movs	r3, #0
 8003528:	60bb      	str	r3, [r7, #8]
 800352a:	4b7d      	ldr	r3, [pc, #500]	@ (8003720 <HAL_RCC_OscConfig+0x470>)
 800352c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800352e:	4a7c      	ldr	r2, [pc, #496]	@ (8003720 <HAL_RCC_OscConfig+0x470>)
 8003530:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003534:	6413      	str	r3, [r2, #64]	@ 0x40
 8003536:	4b7a      	ldr	r3, [pc, #488]	@ (8003720 <HAL_RCC_OscConfig+0x470>)
 8003538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800353a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800353e:	60bb      	str	r3, [r7, #8]
 8003540:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003542:	2301      	movs	r3, #1
 8003544:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003546:	4b77      	ldr	r3, [pc, #476]	@ (8003724 <HAL_RCC_OscConfig+0x474>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800354e:	2b00      	cmp	r3, #0
 8003550:	d118      	bne.n	8003584 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003552:	4b74      	ldr	r3, [pc, #464]	@ (8003724 <HAL_RCC_OscConfig+0x474>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a73      	ldr	r2, [pc, #460]	@ (8003724 <HAL_RCC_OscConfig+0x474>)
 8003558:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800355c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800355e:	f7ff f80f 	bl	8002580 <HAL_GetTick>
 8003562:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003564:	e008      	b.n	8003578 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003566:	f7ff f80b 	bl	8002580 <HAL_GetTick>
 800356a:	4602      	mov	r2, r0
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	2b02      	cmp	r3, #2
 8003572:	d901      	bls.n	8003578 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e10c      	b.n	8003792 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003578:	4b6a      	ldr	r3, [pc, #424]	@ (8003724 <HAL_RCC_OscConfig+0x474>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003580:	2b00      	cmp	r3, #0
 8003582:	d0f0      	beq.n	8003566 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	2b01      	cmp	r3, #1
 800358a:	d106      	bne.n	800359a <HAL_RCC_OscConfig+0x2ea>
 800358c:	4b64      	ldr	r3, [pc, #400]	@ (8003720 <HAL_RCC_OscConfig+0x470>)
 800358e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003590:	4a63      	ldr	r2, [pc, #396]	@ (8003720 <HAL_RCC_OscConfig+0x470>)
 8003592:	f043 0301 	orr.w	r3, r3, #1
 8003596:	6713      	str	r3, [r2, #112]	@ 0x70
 8003598:	e01c      	b.n	80035d4 <HAL_RCC_OscConfig+0x324>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	2b05      	cmp	r3, #5
 80035a0:	d10c      	bne.n	80035bc <HAL_RCC_OscConfig+0x30c>
 80035a2:	4b5f      	ldr	r3, [pc, #380]	@ (8003720 <HAL_RCC_OscConfig+0x470>)
 80035a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035a6:	4a5e      	ldr	r2, [pc, #376]	@ (8003720 <HAL_RCC_OscConfig+0x470>)
 80035a8:	f043 0304 	orr.w	r3, r3, #4
 80035ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80035ae:	4b5c      	ldr	r3, [pc, #368]	@ (8003720 <HAL_RCC_OscConfig+0x470>)
 80035b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035b2:	4a5b      	ldr	r2, [pc, #364]	@ (8003720 <HAL_RCC_OscConfig+0x470>)
 80035b4:	f043 0301 	orr.w	r3, r3, #1
 80035b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80035ba:	e00b      	b.n	80035d4 <HAL_RCC_OscConfig+0x324>
 80035bc:	4b58      	ldr	r3, [pc, #352]	@ (8003720 <HAL_RCC_OscConfig+0x470>)
 80035be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035c0:	4a57      	ldr	r2, [pc, #348]	@ (8003720 <HAL_RCC_OscConfig+0x470>)
 80035c2:	f023 0301 	bic.w	r3, r3, #1
 80035c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80035c8:	4b55      	ldr	r3, [pc, #340]	@ (8003720 <HAL_RCC_OscConfig+0x470>)
 80035ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035cc:	4a54      	ldr	r2, [pc, #336]	@ (8003720 <HAL_RCC_OscConfig+0x470>)
 80035ce:	f023 0304 	bic.w	r3, r3, #4
 80035d2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d015      	beq.n	8003608 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035dc:	f7fe ffd0 	bl	8002580 <HAL_GetTick>
 80035e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035e2:	e00a      	b.n	80035fa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035e4:	f7fe ffcc 	bl	8002580 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e0cb      	b.n	8003792 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035fa:	4b49      	ldr	r3, [pc, #292]	@ (8003720 <HAL_RCC_OscConfig+0x470>)
 80035fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b00      	cmp	r3, #0
 8003604:	d0ee      	beq.n	80035e4 <HAL_RCC_OscConfig+0x334>
 8003606:	e014      	b.n	8003632 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003608:	f7fe ffba 	bl	8002580 <HAL_GetTick>
 800360c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800360e:	e00a      	b.n	8003626 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003610:	f7fe ffb6 	bl	8002580 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800361e:	4293      	cmp	r3, r2
 8003620:	d901      	bls.n	8003626 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e0b5      	b.n	8003792 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003626:	4b3e      	ldr	r3, [pc, #248]	@ (8003720 <HAL_RCC_OscConfig+0x470>)
 8003628:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800362a:	f003 0302 	and.w	r3, r3, #2
 800362e:	2b00      	cmp	r3, #0
 8003630:	d1ee      	bne.n	8003610 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003632:	7dfb      	ldrb	r3, [r7, #23]
 8003634:	2b01      	cmp	r3, #1
 8003636:	d105      	bne.n	8003644 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003638:	4b39      	ldr	r3, [pc, #228]	@ (8003720 <HAL_RCC_OscConfig+0x470>)
 800363a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800363c:	4a38      	ldr	r2, [pc, #224]	@ (8003720 <HAL_RCC_OscConfig+0x470>)
 800363e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003642:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	2b00      	cmp	r3, #0
 800364a:	f000 80a1 	beq.w	8003790 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800364e:	4b34      	ldr	r3, [pc, #208]	@ (8003720 <HAL_RCC_OscConfig+0x470>)
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f003 030c 	and.w	r3, r3, #12
 8003656:	2b08      	cmp	r3, #8
 8003658:	d05c      	beq.n	8003714 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	699b      	ldr	r3, [r3, #24]
 800365e:	2b02      	cmp	r3, #2
 8003660:	d141      	bne.n	80036e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003662:	4b31      	ldr	r3, [pc, #196]	@ (8003728 <HAL_RCC_OscConfig+0x478>)
 8003664:	2200      	movs	r2, #0
 8003666:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003668:	f7fe ff8a 	bl	8002580 <HAL_GetTick>
 800366c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800366e:	e008      	b.n	8003682 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003670:	f7fe ff86 	bl	8002580 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b02      	cmp	r3, #2
 800367c:	d901      	bls.n	8003682 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e087      	b.n	8003792 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003682:	4b27      	ldr	r3, [pc, #156]	@ (8003720 <HAL_RCC_OscConfig+0x470>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d1f0      	bne.n	8003670 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	69da      	ldr	r2, [r3, #28]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a1b      	ldr	r3, [r3, #32]
 8003696:	431a      	orrs	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800369c:	019b      	lsls	r3, r3, #6
 800369e:	431a      	orrs	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036a4:	085b      	lsrs	r3, r3, #1
 80036a6:	3b01      	subs	r3, #1
 80036a8:	041b      	lsls	r3, r3, #16
 80036aa:	431a      	orrs	r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036b0:	061b      	lsls	r3, r3, #24
 80036b2:	491b      	ldr	r1, [pc, #108]	@ (8003720 <HAL_RCC_OscConfig+0x470>)
 80036b4:	4313      	orrs	r3, r2
 80036b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036b8:	4b1b      	ldr	r3, [pc, #108]	@ (8003728 <HAL_RCC_OscConfig+0x478>)
 80036ba:	2201      	movs	r2, #1
 80036bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036be:	f7fe ff5f 	bl	8002580 <HAL_GetTick>
 80036c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036c4:	e008      	b.n	80036d8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036c6:	f7fe ff5b 	bl	8002580 <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d901      	bls.n	80036d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e05c      	b.n	8003792 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036d8:	4b11      	ldr	r3, [pc, #68]	@ (8003720 <HAL_RCC_OscConfig+0x470>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d0f0      	beq.n	80036c6 <HAL_RCC_OscConfig+0x416>
 80036e4:	e054      	b.n	8003790 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036e6:	4b10      	ldr	r3, [pc, #64]	@ (8003728 <HAL_RCC_OscConfig+0x478>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ec:	f7fe ff48 	bl	8002580 <HAL_GetTick>
 80036f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036f2:	e008      	b.n	8003706 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036f4:	f7fe ff44 	bl	8002580 <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d901      	bls.n	8003706 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e045      	b.n	8003792 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003706:	4b06      	ldr	r3, [pc, #24]	@ (8003720 <HAL_RCC_OscConfig+0x470>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d1f0      	bne.n	80036f4 <HAL_RCC_OscConfig+0x444>
 8003712:	e03d      	b.n	8003790 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	699b      	ldr	r3, [r3, #24]
 8003718:	2b01      	cmp	r3, #1
 800371a:	d107      	bne.n	800372c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e038      	b.n	8003792 <HAL_RCC_OscConfig+0x4e2>
 8003720:	40023800 	.word	0x40023800
 8003724:	40007000 	.word	0x40007000
 8003728:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800372c:	4b1b      	ldr	r3, [pc, #108]	@ (800379c <HAL_RCC_OscConfig+0x4ec>)
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	699b      	ldr	r3, [r3, #24]
 8003736:	2b01      	cmp	r3, #1
 8003738:	d028      	beq.n	800378c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003744:	429a      	cmp	r2, r3
 8003746:	d121      	bne.n	800378c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003752:	429a      	cmp	r2, r3
 8003754:	d11a      	bne.n	800378c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003756:	68fa      	ldr	r2, [r7, #12]
 8003758:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800375c:	4013      	ands	r3, r2
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003762:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003764:	4293      	cmp	r3, r2
 8003766:	d111      	bne.n	800378c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003772:	085b      	lsrs	r3, r3, #1
 8003774:	3b01      	subs	r3, #1
 8003776:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003778:	429a      	cmp	r2, r3
 800377a:	d107      	bne.n	800378c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003786:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003788:	429a      	cmp	r2, r3
 800378a:	d001      	beq.n	8003790 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e000      	b.n	8003792 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	3718      	adds	r7, #24
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	40023800 	.word	0x40023800

080037a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d101      	bne.n	80037b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e0cc      	b.n	800394e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037b4:	4b68      	ldr	r3, [pc, #416]	@ (8003958 <HAL_RCC_ClockConfig+0x1b8>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0307 	and.w	r3, r3, #7
 80037bc:	683a      	ldr	r2, [r7, #0]
 80037be:	429a      	cmp	r2, r3
 80037c0:	d90c      	bls.n	80037dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037c2:	4b65      	ldr	r3, [pc, #404]	@ (8003958 <HAL_RCC_ClockConfig+0x1b8>)
 80037c4:	683a      	ldr	r2, [r7, #0]
 80037c6:	b2d2      	uxtb	r2, r2
 80037c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ca:	4b63      	ldr	r3, [pc, #396]	@ (8003958 <HAL_RCC_ClockConfig+0x1b8>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0307 	and.w	r3, r3, #7
 80037d2:	683a      	ldr	r2, [r7, #0]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d001      	beq.n	80037dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e0b8      	b.n	800394e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0302 	and.w	r3, r3, #2
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d020      	beq.n	800382a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0304 	and.w	r3, r3, #4
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d005      	beq.n	8003800 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037f4:	4b59      	ldr	r3, [pc, #356]	@ (800395c <HAL_RCC_ClockConfig+0x1bc>)
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	4a58      	ldr	r2, [pc, #352]	@ (800395c <HAL_RCC_ClockConfig+0x1bc>)
 80037fa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80037fe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0308 	and.w	r3, r3, #8
 8003808:	2b00      	cmp	r3, #0
 800380a:	d005      	beq.n	8003818 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800380c:	4b53      	ldr	r3, [pc, #332]	@ (800395c <HAL_RCC_ClockConfig+0x1bc>)
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	4a52      	ldr	r2, [pc, #328]	@ (800395c <HAL_RCC_ClockConfig+0x1bc>)
 8003812:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003816:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003818:	4b50      	ldr	r3, [pc, #320]	@ (800395c <HAL_RCC_ClockConfig+0x1bc>)
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	494d      	ldr	r1, [pc, #308]	@ (800395c <HAL_RCC_ClockConfig+0x1bc>)
 8003826:	4313      	orrs	r3, r2
 8003828:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0301 	and.w	r3, r3, #1
 8003832:	2b00      	cmp	r3, #0
 8003834:	d044      	beq.n	80038c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	2b01      	cmp	r3, #1
 800383c:	d107      	bne.n	800384e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800383e:	4b47      	ldr	r3, [pc, #284]	@ (800395c <HAL_RCC_ClockConfig+0x1bc>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d119      	bne.n	800387e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e07f      	b.n	800394e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	2b02      	cmp	r3, #2
 8003854:	d003      	beq.n	800385e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800385a:	2b03      	cmp	r3, #3
 800385c:	d107      	bne.n	800386e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800385e:	4b3f      	ldr	r3, [pc, #252]	@ (800395c <HAL_RCC_ClockConfig+0x1bc>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d109      	bne.n	800387e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e06f      	b.n	800394e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800386e:	4b3b      	ldr	r3, [pc, #236]	@ (800395c <HAL_RCC_ClockConfig+0x1bc>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0302 	and.w	r3, r3, #2
 8003876:	2b00      	cmp	r3, #0
 8003878:	d101      	bne.n	800387e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e067      	b.n	800394e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800387e:	4b37      	ldr	r3, [pc, #220]	@ (800395c <HAL_RCC_ClockConfig+0x1bc>)
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	f023 0203 	bic.w	r2, r3, #3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	4934      	ldr	r1, [pc, #208]	@ (800395c <HAL_RCC_ClockConfig+0x1bc>)
 800388c:	4313      	orrs	r3, r2
 800388e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003890:	f7fe fe76 	bl	8002580 <HAL_GetTick>
 8003894:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003896:	e00a      	b.n	80038ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003898:	f7fe fe72 	bl	8002580 <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d901      	bls.n	80038ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e04f      	b.n	800394e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ae:	4b2b      	ldr	r3, [pc, #172]	@ (800395c <HAL_RCC_ClockConfig+0x1bc>)
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	f003 020c 	and.w	r2, r3, #12
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	429a      	cmp	r2, r3
 80038be:	d1eb      	bne.n	8003898 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038c0:	4b25      	ldr	r3, [pc, #148]	@ (8003958 <HAL_RCC_ClockConfig+0x1b8>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0307 	and.w	r3, r3, #7
 80038c8:	683a      	ldr	r2, [r7, #0]
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d20c      	bcs.n	80038e8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ce:	4b22      	ldr	r3, [pc, #136]	@ (8003958 <HAL_RCC_ClockConfig+0x1b8>)
 80038d0:	683a      	ldr	r2, [r7, #0]
 80038d2:	b2d2      	uxtb	r2, r2
 80038d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038d6:	4b20      	ldr	r3, [pc, #128]	@ (8003958 <HAL_RCC_ClockConfig+0x1b8>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0307 	and.w	r3, r3, #7
 80038de:	683a      	ldr	r2, [r7, #0]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d001      	beq.n	80038e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e032      	b.n	800394e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0304 	and.w	r3, r3, #4
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d008      	beq.n	8003906 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038f4:	4b19      	ldr	r3, [pc, #100]	@ (800395c <HAL_RCC_ClockConfig+0x1bc>)
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	4916      	ldr	r1, [pc, #88]	@ (800395c <HAL_RCC_ClockConfig+0x1bc>)
 8003902:	4313      	orrs	r3, r2
 8003904:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0308 	and.w	r3, r3, #8
 800390e:	2b00      	cmp	r3, #0
 8003910:	d009      	beq.n	8003926 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003912:	4b12      	ldr	r3, [pc, #72]	@ (800395c <HAL_RCC_ClockConfig+0x1bc>)
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	00db      	lsls	r3, r3, #3
 8003920:	490e      	ldr	r1, [pc, #56]	@ (800395c <HAL_RCC_ClockConfig+0x1bc>)
 8003922:	4313      	orrs	r3, r2
 8003924:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003926:	f000 f821 	bl	800396c <HAL_RCC_GetSysClockFreq>
 800392a:	4602      	mov	r2, r0
 800392c:	4b0b      	ldr	r3, [pc, #44]	@ (800395c <HAL_RCC_ClockConfig+0x1bc>)
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	091b      	lsrs	r3, r3, #4
 8003932:	f003 030f 	and.w	r3, r3, #15
 8003936:	490a      	ldr	r1, [pc, #40]	@ (8003960 <HAL_RCC_ClockConfig+0x1c0>)
 8003938:	5ccb      	ldrb	r3, [r1, r3]
 800393a:	fa22 f303 	lsr.w	r3, r2, r3
 800393e:	4a09      	ldr	r2, [pc, #36]	@ (8003964 <HAL_RCC_ClockConfig+0x1c4>)
 8003940:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003942:	4b09      	ldr	r3, [pc, #36]	@ (8003968 <HAL_RCC_ClockConfig+0x1c8>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4618      	mov	r0, r3
 8003948:	f7fe fcb6 	bl	80022b8 <HAL_InitTick>

  return HAL_OK;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	40023c00 	.word	0x40023c00
 800395c:	40023800 	.word	0x40023800
 8003960:	0800a928 	.word	0x0800a928
 8003964:	20000000 	.word	0x20000000
 8003968:	20000004 	.word	0x20000004

0800396c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800396c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003970:	b090      	sub	sp, #64	@ 0x40
 8003972:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003974:	2300      	movs	r3, #0
 8003976:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003978:	2300      	movs	r3, #0
 800397a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800397c:	2300      	movs	r3, #0
 800397e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003980:	2300      	movs	r3, #0
 8003982:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003984:	4b59      	ldr	r3, [pc, #356]	@ (8003aec <HAL_RCC_GetSysClockFreq+0x180>)
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f003 030c 	and.w	r3, r3, #12
 800398c:	2b08      	cmp	r3, #8
 800398e:	d00d      	beq.n	80039ac <HAL_RCC_GetSysClockFreq+0x40>
 8003990:	2b08      	cmp	r3, #8
 8003992:	f200 80a1 	bhi.w	8003ad8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003996:	2b00      	cmp	r3, #0
 8003998:	d002      	beq.n	80039a0 <HAL_RCC_GetSysClockFreq+0x34>
 800399a:	2b04      	cmp	r3, #4
 800399c:	d003      	beq.n	80039a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800399e:	e09b      	b.n	8003ad8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039a0:	4b53      	ldr	r3, [pc, #332]	@ (8003af0 <HAL_RCC_GetSysClockFreq+0x184>)
 80039a2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80039a4:	e09b      	b.n	8003ade <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039a6:	4b53      	ldr	r3, [pc, #332]	@ (8003af4 <HAL_RCC_GetSysClockFreq+0x188>)
 80039a8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80039aa:	e098      	b.n	8003ade <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039ac:	4b4f      	ldr	r3, [pc, #316]	@ (8003aec <HAL_RCC_GetSysClockFreq+0x180>)
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80039b4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039b6:	4b4d      	ldr	r3, [pc, #308]	@ (8003aec <HAL_RCC_GetSysClockFreq+0x180>)
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d028      	beq.n	8003a14 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039c2:	4b4a      	ldr	r3, [pc, #296]	@ (8003aec <HAL_RCC_GetSysClockFreq+0x180>)
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	099b      	lsrs	r3, r3, #6
 80039c8:	2200      	movs	r2, #0
 80039ca:	623b      	str	r3, [r7, #32]
 80039cc:	627a      	str	r2, [r7, #36]	@ 0x24
 80039ce:	6a3b      	ldr	r3, [r7, #32]
 80039d0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80039d4:	2100      	movs	r1, #0
 80039d6:	4b47      	ldr	r3, [pc, #284]	@ (8003af4 <HAL_RCC_GetSysClockFreq+0x188>)
 80039d8:	fb03 f201 	mul.w	r2, r3, r1
 80039dc:	2300      	movs	r3, #0
 80039de:	fb00 f303 	mul.w	r3, r0, r3
 80039e2:	4413      	add	r3, r2
 80039e4:	4a43      	ldr	r2, [pc, #268]	@ (8003af4 <HAL_RCC_GetSysClockFreq+0x188>)
 80039e6:	fba0 1202 	umull	r1, r2, r0, r2
 80039ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80039ec:	460a      	mov	r2, r1
 80039ee:	62ba      	str	r2, [r7, #40]	@ 0x28
 80039f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80039f2:	4413      	add	r3, r2
 80039f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039f8:	2200      	movs	r2, #0
 80039fa:	61bb      	str	r3, [r7, #24]
 80039fc:	61fa      	str	r2, [r7, #28]
 80039fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a02:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003a06:	f7fd f8cf 	bl	8000ba8 <__aeabi_uldivmod>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	4613      	mov	r3, r2
 8003a10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a12:	e053      	b.n	8003abc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a14:	4b35      	ldr	r3, [pc, #212]	@ (8003aec <HAL_RCC_GetSysClockFreq+0x180>)
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	099b      	lsrs	r3, r3, #6
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	613b      	str	r3, [r7, #16]
 8003a1e:	617a      	str	r2, [r7, #20]
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003a26:	f04f 0b00 	mov.w	fp, #0
 8003a2a:	4652      	mov	r2, sl
 8003a2c:	465b      	mov	r3, fp
 8003a2e:	f04f 0000 	mov.w	r0, #0
 8003a32:	f04f 0100 	mov.w	r1, #0
 8003a36:	0159      	lsls	r1, r3, #5
 8003a38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a3c:	0150      	lsls	r0, r2, #5
 8003a3e:	4602      	mov	r2, r0
 8003a40:	460b      	mov	r3, r1
 8003a42:	ebb2 080a 	subs.w	r8, r2, sl
 8003a46:	eb63 090b 	sbc.w	r9, r3, fp
 8003a4a:	f04f 0200 	mov.w	r2, #0
 8003a4e:	f04f 0300 	mov.w	r3, #0
 8003a52:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003a56:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003a5a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003a5e:	ebb2 0408 	subs.w	r4, r2, r8
 8003a62:	eb63 0509 	sbc.w	r5, r3, r9
 8003a66:	f04f 0200 	mov.w	r2, #0
 8003a6a:	f04f 0300 	mov.w	r3, #0
 8003a6e:	00eb      	lsls	r3, r5, #3
 8003a70:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a74:	00e2      	lsls	r2, r4, #3
 8003a76:	4614      	mov	r4, r2
 8003a78:	461d      	mov	r5, r3
 8003a7a:	eb14 030a 	adds.w	r3, r4, sl
 8003a7e:	603b      	str	r3, [r7, #0]
 8003a80:	eb45 030b 	adc.w	r3, r5, fp
 8003a84:	607b      	str	r3, [r7, #4]
 8003a86:	f04f 0200 	mov.w	r2, #0
 8003a8a:	f04f 0300 	mov.w	r3, #0
 8003a8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a92:	4629      	mov	r1, r5
 8003a94:	028b      	lsls	r3, r1, #10
 8003a96:	4621      	mov	r1, r4
 8003a98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a9c:	4621      	mov	r1, r4
 8003a9e:	028a      	lsls	r2, r1, #10
 8003aa0:	4610      	mov	r0, r2
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	60bb      	str	r3, [r7, #8]
 8003aaa:	60fa      	str	r2, [r7, #12]
 8003aac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ab0:	f7fd f87a 	bl	8000ba8 <__aeabi_uldivmod>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	460b      	mov	r3, r1
 8003ab8:	4613      	mov	r3, r2
 8003aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003abc:	4b0b      	ldr	r3, [pc, #44]	@ (8003aec <HAL_RCC_GetSysClockFreq+0x180>)
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	0c1b      	lsrs	r3, r3, #16
 8003ac2:	f003 0303 	and.w	r3, r3, #3
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	005b      	lsls	r3, r3, #1
 8003aca:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003acc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003ace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003ad6:	e002      	b.n	8003ade <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ad8:	4b05      	ldr	r3, [pc, #20]	@ (8003af0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003ada:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003adc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3740      	adds	r7, #64	@ 0x40
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003aea:	bf00      	nop
 8003aec:	40023800 	.word	0x40023800
 8003af0:	00f42400 	.word	0x00f42400
 8003af4:	017d7840 	.word	0x017d7840

08003af8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003af8:	b480      	push	{r7}
 8003afa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003afc:	4b03      	ldr	r3, [pc, #12]	@ (8003b0c <HAL_RCC_GetHCLKFreq+0x14>)
 8003afe:	681b      	ldr	r3, [r3, #0]
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	20000000 	.word	0x20000000

08003b10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b14:	f7ff fff0 	bl	8003af8 <HAL_RCC_GetHCLKFreq>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	4b05      	ldr	r3, [pc, #20]	@ (8003b30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	0a9b      	lsrs	r3, r3, #10
 8003b20:	f003 0307 	and.w	r3, r3, #7
 8003b24:	4903      	ldr	r1, [pc, #12]	@ (8003b34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b26:	5ccb      	ldrb	r3, [r1, r3]
 8003b28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	40023800 	.word	0x40023800
 8003b34:	0800a938 	.word	0x0800a938

08003b38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b3c:	f7ff ffdc 	bl	8003af8 <HAL_RCC_GetHCLKFreq>
 8003b40:	4602      	mov	r2, r0
 8003b42:	4b05      	ldr	r3, [pc, #20]	@ (8003b58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	0b5b      	lsrs	r3, r3, #13
 8003b48:	f003 0307 	and.w	r3, r3, #7
 8003b4c:	4903      	ldr	r1, [pc, #12]	@ (8003b5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b4e:	5ccb      	ldrb	r3, [r1, r3]
 8003b50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	40023800 	.word	0x40023800
 8003b5c:	0800a938 	.word	0x0800a938

08003b60 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	220f      	movs	r2, #15
 8003b6e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003b70:	4b12      	ldr	r3, [pc, #72]	@ (8003bbc <HAL_RCC_GetClockConfig+0x5c>)
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	f003 0203 	and.w	r2, r3, #3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003b7c:	4b0f      	ldr	r3, [pc, #60]	@ (8003bbc <HAL_RCC_GetClockConfig+0x5c>)
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003b88:	4b0c      	ldr	r3, [pc, #48]	@ (8003bbc <HAL_RCC_GetClockConfig+0x5c>)
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003b94:	4b09      	ldr	r3, [pc, #36]	@ (8003bbc <HAL_RCC_GetClockConfig+0x5c>)
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	08db      	lsrs	r3, r3, #3
 8003b9a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003ba2:	4b07      	ldr	r3, [pc, #28]	@ (8003bc0 <HAL_RCC_GetClockConfig+0x60>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0207 	and.w	r2, r3, #7
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	601a      	str	r2, [r3, #0]
}
 8003bae:	bf00      	nop
 8003bb0:	370c      	adds	r7, #12
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	40023800 	.word	0x40023800
 8003bc0:	40023c00 	.word	0x40023c00

08003bc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d101      	bne.n	8003bd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e041      	b.n	8003c5a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d106      	bne.n	8003bf0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f7fe fa72 	bl	80020d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2202      	movs	r2, #2
 8003bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	3304      	adds	r3, #4
 8003c00:	4619      	mov	r1, r3
 8003c02:	4610      	mov	r0, r2
 8003c04:	f000 fa70 	bl	80040e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3708      	adds	r7, #8
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
	...

08003c64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b085      	sub	sp, #20
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d001      	beq.n	8003c7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e044      	b.n	8003d06 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2202      	movs	r2, #2
 8003c80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68da      	ldr	r2, [r3, #12]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f042 0201 	orr.w	r2, r2, #1
 8003c92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a1e      	ldr	r2, [pc, #120]	@ (8003d14 <HAL_TIM_Base_Start_IT+0xb0>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d018      	beq.n	8003cd0 <HAL_TIM_Base_Start_IT+0x6c>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ca6:	d013      	beq.n	8003cd0 <HAL_TIM_Base_Start_IT+0x6c>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a1a      	ldr	r2, [pc, #104]	@ (8003d18 <HAL_TIM_Base_Start_IT+0xb4>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d00e      	beq.n	8003cd0 <HAL_TIM_Base_Start_IT+0x6c>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a19      	ldr	r2, [pc, #100]	@ (8003d1c <HAL_TIM_Base_Start_IT+0xb8>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d009      	beq.n	8003cd0 <HAL_TIM_Base_Start_IT+0x6c>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a17      	ldr	r2, [pc, #92]	@ (8003d20 <HAL_TIM_Base_Start_IT+0xbc>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d004      	beq.n	8003cd0 <HAL_TIM_Base_Start_IT+0x6c>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a16      	ldr	r2, [pc, #88]	@ (8003d24 <HAL_TIM_Base_Start_IT+0xc0>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d111      	bne.n	8003cf4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f003 0307 	and.w	r3, r3, #7
 8003cda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2b06      	cmp	r3, #6
 8003ce0:	d010      	beq.n	8003d04 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f042 0201 	orr.w	r2, r2, #1
 8003cf0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cf2:	e007      	b.n	8003d04 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f042 0201 	orr.w	r2, r2, #1
 8003d02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3714      	adds	r7, #20
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop
 8003d14:	40010000 	.word	0x40010000
 8003d18:	40000400 	.word	0x40000400
 8003d1c:	40000800 	.word	0x40000800
 8003d20:	40000c00 	.word	0x40000c00
 8003d24:	40014000 	.word	0x40014000

08003d28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	f003 0302 	and.w	r3, r3, #2
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d020      	beq.n	8003d8c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f003 0302 	and.w	r3, r3, #2
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d01b      	beq.n	8003d8c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f06f 0202 	mvn.w	r2, #2
 8003d5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2201      	movs	r2, #1
 8003d62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	699b      	ldr	r3, [r3, #24]
 8003d6a:	f003 0303 	and.w	r3, r3, #3
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d003      	beq.n	8003d7a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f000 f999 	bl	80040aa <HAL_TIM_IC_CaptureCallback>
 8003d78:	e005      	b.n	8003d86 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f000 f98b 	bl	8004096 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f000 f99c 	bl	80040be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	f003 0304 	and.w	r3, r3, #4
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d020      	beq.n	8003dd8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f003 0304 	and.w	r3, r3, #4
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d01b      	beq.n	8003dd8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f06f 0204 	mvn.w	r2, #4
 8003da8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2202      	movs	r2, #2
 8003dae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	699b      	ldr	r3, [r3, #24]
 8003db6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d003      	beq.n	8003dc6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f000 f973 	bl	80040aa <HAL_TIM_IC_CaptureCallback>
 8003dc4:	e005      	b.n	8003dd2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f000 f965 	bl	8004096 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f000 f976 	bl	80040be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	f003 0308 	and.w	r3, r3, #8
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d020      	beq.n	8003e24 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f003 0308 	and.w	r3, r3, #8
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d01b      	beq.n	8003e24 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f06f 0208 	mvn.w	r2, #8
 8003df4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2204      	movs	r2, #4
 8003dfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	69db      	ldr	r3, [r3, #28]
 8003e02:	f003 0303 	and.w	r3, r3, #3
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d003      	beq.n	8003e12 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 f94d 	bl	80040aa <HAL_TIM_IC_CaptureCallback>
 8003e10:	e005      	b.n	8003e1e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 f93f 	bl	8004096 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f000 f950 	bl	80040be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	f003 0310 	and.w	r3, r3, #16
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d020      	beq.n	8003e70 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	f003 0310 	and.w	r3, r3, #16
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d01b      	beq.n	8003e70 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f06f 0210 	mvn.w	r2, #16
 8003e40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2208      	movs	r2, #8
 8003e46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	69db      	ldr	r3, [r3, #28]
 8003e4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d003      	beq.n	8003e5e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f000 f927 	bl	80040aa <HAL_TIM_IC_CaptureCallback>
 8003e5c:	e005      	b.n	8003e6a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 f919 	bl	8004096 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f000 f92a 	bl	80040be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d00c      	beq.n	8003e94 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f003 0301 	and.w	r3, r3, #1
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d007      	beq.n	8003e94 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f06f 0201 	mvn.w	r2, #1
 8003e8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f7fe f8dc 	bl	800204c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00c      	beq.n	8003eb8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d007      	beq.n	8003eb8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003eb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 fab6 	bl	8004424 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00c      	beq.n	8003edc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d007      	beq.n	8003edc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003ed4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 f8fb 	bl	80040d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	f003 0320 	and.w	r3, r3, #32
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d00c      	beq.n	8003f00 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f003 0320 	and.w	r3, r3, #32
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d007      	beq.n	8003f00 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f06f 0220 	mvn.w	r2, #32
 8003ef8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 fa88 	bl	8004410 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f00:	bf00      	nop
 8003f02:	3710      	adds	r7, #16
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f12:	2300      	movs	r3, #0
 8003f14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d101      	bne.n	8003f24 <HAL_TIM_ConfigClockSource+0x1c>
 8003f20:	2302      	movs	r3, #2
 8003f22:	e0b4      	b.n	800408e <HAL_TIM_ConfigClockSource+0x186>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2202      	movs	r2, #2
 8003f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003f42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68ba      	ldr	r2, [r7, #8]
 8003f52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f5c:	d03e      	beq.n	8003fdc <HAL_TIM_ConfigClockSource+0xd4>
 8003f5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f62:	f200 8087 	bhi.w	8004074 <HAL_TIM_ConfigClockSource+0x16c>
 8003f66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f6a:	f000 8086 	beq.w	800407a <HAL_TIM_ConfigClockSource+0x172>
 8003f6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f72:	d87f      	bhi.n	8004074 <HAL_TIM_ConfigClockSource+0x16c>
 8003f74:	2b70      	cmp	r3, #112	@ 0x70
 8003f76:	d01a      	beq.n	8003fae <HAL_TIM_ConfigClockSource+0xa6>
 8003f78:	2b70      	cmp	r3, #112	@ 0x70
 8003f7a:	d87b      	bhi.n	8004074 <HAL_TIM_ConfigClockSource+0x16c>
 8003f7c:	2b60      	cmp	r3, #96	@ 0x60
 8003f7e:	d050      	beq.n	8004022 <HAL_TIM_ConfigClockSource+0x11a>
 8003f80:	2b60      	cmp	r3, #96	@ 0x60
 8003f82:	d877      	bhi.n	8004074 <HAL_TIM_ConfigClockSource+0x16c>
 8003f84:	2b50      	cmp	r3, #80	@ 0x50
 8003f86:	d03c      	beq.n	8004002 <HAL_TIM_ConfigClockSource+0xfa>
 8003f88:	2b50      	cmp	r3, #80	@ 0x50
 8003f8a:	d873      	bhi.n	8004074 <HAL_TIM_ConfigClockSource+0x16c>
 8003f8c:	2b40      	cmp	r3, #64	@ 0x40
 8003f8e:	d058      	beq.n	8004042 <HAL_TIM_ConfigClockSource+0x13a>
 8003f90:	2b40      	cmp	r3, #64	@ 0x40
 8003f92:	d86f      	bhi.n	8004074 <HAL_TIM_ConfigClockSource+0x16c>
 8003f94:	2b30      	cmp	r3, #48	@ 0x30
 8003f96:	d064      	beq.n	8004062 <HAL_TIM_ConfigClockSource+0x15a>
 8003f98:	2b30      	cmp	r3, #48	@ 0x30
 8003f9a:	d86b      	bhi.n	8004074 <HAL_TIM_ConfigClockSource+0x16c>
 8003f9c:	2b20      	cmp	r3, #32
 8003f9e:	d060      	beq.n	8004062 <HAL_TIM_ConfigClockSource+0x15a>
 8003fa0:	2b20      	cmp	r3, #32
 8003fa2:	d867      	bhi.n	8004074 <HAL_TIM_ConfigClockSource+0x16c>
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d05c      	beq.n	8004062 <HAL_TIM_ConfigClockSource+0x15a>
 8003fa8:	2b10      	cmp	r3, #16
 8003faa:	d05a      	beq.n	8004062 <HAL_TIM_ConfigClockSource+0x15a>
 8003fac:	e062      	b.n	8004074 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003fbe:	f000 f999 	bl	80042f4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003fd0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	68ba      	ldr	r2, [r7, #8]
 8003fd8:	609a      	str	r2, [r3, #8]
      break;
 8003fda:	e04f      	b.n	800407c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003fec:	f000 f982 	bl	80042f4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	689a      	ldr	r2, [r3, #8]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003ffe:	609a      	str	r2, [r3, #8]
      break;
 8004000:	e03c      	b.n	800407c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800400e:	461a      	mov	r2, r3
 8004010:	f000 f8f6 	bl	8004200 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	2150      	movs	r1, #80	@ 0x50
 800401a:	4618      	mov	r0, r3
 800401c:	f000 f94f 	bl	80042be <TIM_ITRx_SetConfig>
      break;
 8004020:	e02c      	b.n	800407c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800402e:	461a      	mov	r2, r3
 8004030:	f000 f915 	bl	800425e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2160      	movs	r1, #96	@ 0x60
 800403a:	4618      	mov	r0, r3
 800403c:	f000 f93f 	bl	80042be <TIM_ITRx_SetConfig>
      break;
 8004040:	e01c      	b.n	800407c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800404e:	461a      	mov	r2, r3
 8004050:	f000 f8d6 	bl	8004200 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2140      	movs	r1, #64	@ 0x40
 800405a:	4618      	mov	r0, r3
 800405c:	f000 f92f 	bl	80042be <TIM_ITRx_SetConfig>
      break;
 8004060:	e00c      	b.n	800407c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4619      	mov	r1, r3
 800406c:	4610      	mov	r0, r2
 800406e:	f000 f926 	bl	80042be <TIM_ITRx_SetConfig>
      break;
 8004072:	e003      	b.n	800407c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	73fb      	strb	r3, [r7, #15]
      break;
 8004078:	e000      	b.n	800407c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800407a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800408c:	7bfb      	ldrb	r3, [r7, #15]
}
 800408e:	4618      	mov	r0, r3
 8004090:	3710      	adds	r7, #16
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}

08004096 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004096:	b480      	push	{r7}
 8004098:	b083      	sub	sp, #12
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800409e:	bf00      	nop
 80040a0:	370c      	adds	r7, #12
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr

080040aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80040aa:	b480      	push	{r7}
 80040ac:	b083      	sub	sp, #12
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80040b2:	bf00      	nop
 80040b4:	370c      	adds	r7, #12
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr

080040be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040be:	b480      	push	{r7}
 80040c0:	b083      	sub	sp, #12
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040c6:	bf00      	nop
 80040c8:	370c      	adds	r7, #12
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr

080040d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040d2:	b480      	push	{r7}
 80040d4:	b083      	sub	sp, #12
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80040da:	bf00      	nop
 80040dc:	370c      	adds	r7, #12
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
	...

080040e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b085      	sub	sp, #20
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	4a3a      	ldr	r2, [pc, #232]	@ (80041e4 <TIM_Base_SetConfig+0xfc>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d00f      	beq.n	8004120 <TIM_Base_SetConfig+0x38>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004106:	d00b      	beq.n	8004120 <TIM_Base_SetConfig+0x38>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4a37      	ldr	r2, [pc, #220]	@ (80041e8 <TIM_Base_SetConfig+0x100>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d007      	beq.n	8004120 <TIM_Base_SetConfig+0x38>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4a36      	ldr	r2, [pc, #216]	@ (80041ec <TIM_Base_SetConfig+0x104>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d003      	beq.n	8004120 <TIM_Base_SetConfig+0x38>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a35      	ldr	r2, [pc, #212]	@ (80041f0 <TIM_Base_SetConfig+0x108>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d108      	bne.n	8004132 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004126:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	68fa      	ldr	r2, [r7, #12]
 800412e:	4313      	orrs	r3, r2
 8004130:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a2b      	ldr	r2, [pc, #172]	@ (80041e4 <TIM_Base_SetConfig+0xfc>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d01b      	beq.n	8004172 <TIM_Base_SetConfig+0x8a>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004140:	d017      	beq.n	8004172 <TIM_Base_SetConfig+0x8a>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a28      	ldr	r2, [pc, #160]	@ (80041e8 <TIM_Base_SetConfig+0x100>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d013      	beq.n	8004172 <TIM_Base_SetConfig+0x8a>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a27      	ldr	r2, [pc, #156]	@ (80041ec <TIM_Base_SetConfig+0x104>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d00f      	beq.n	8004172 <TIM_Base_SetConfig+0x8a>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a26      	ldr	r2, [pc, #152]	@ (80041f0 <TIM_Base_SetConfig+0x108>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d00b      	beq.n	8004172 <TIM_Base_SetConfig+0x8a>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a25      	ldr	r2, [pc, #148]	@ (80041f4 <TIM_Base_SetConfig+0x10c>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d007      	beq.n	8004172 <TIM_Base_SetConfig+0x8a>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a24      	ldr	r2, [pc, #144]	@ (80041f8 <TIM_Base_SetConfig+0x110>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d003      	beq.n	8004172 <TIM_Base_SetConfig+0x8a>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a23      	ldr	r2, [pc, #140]	@ (80041fc <TIM_Base_SetConfig+0x114>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d108      	bne.n	8004184 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004178:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	4313      	orrs	r3, r2
 8004182:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	695b      	ldr	r3, [r3, #20]
 800418e:	4313      	orrs	r3, r2
 8004190:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	68fa      	ldr	r2, [r7, #12]
 8004196:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	689a      	ldr	r2, [r3, #8]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a0e      	ldr	r2, [pc, #56]	@ (80041e4 <TIM_Base_SetConfig+0xfc>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d103      	bne.n	80041b8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	691a      	ldr	r2, [r3, #16]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	f003 0301 	and.w	r3, r3, #1
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d105      	bne.n	80041d6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	f023 0201 	bic.w	r2, r3, #1
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	611a      	str	r2, [r3, #16]
  }
}
 80041d6:	bf00      	nop
 80041d8:	3714      	adds	r7, #20
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	40010000 	.word	0x40010000
 80041e8:	40000400 	.word	0x40000400
 80041ec:	40000800 	.word	0x40000800
 80041f0:	40000c00 	.word	0x40000c00
 80041f4:	40014000 	.word	0x40014000
 80041f8:	40014400 	.word	0x40014400
 80041fc:	40014800 	.word	0x40014800

08004200 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004200:	b480      	push	{r7}
 8004202:	b087      	sub	sp, #28
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6a1b      	ldr	r3, [r3, #32]
 8004210:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6a1b      	ldr	r3, [r3, #32]
 8004216:	f023 0201 	bic.w	r2, r3, #1
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	699b      	ldr	r3, [r3, #24]
 8004222:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800422a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	011b      	lsls	r3, r3, #4
 8004230:	693a      	ldr	r2, [r7, #16]
 8004232:	4313      	orrs	r3, r2
 8004234:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	f023 030a 	bic.w	r3, r3, #10
 800423c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800423e:	697a      	ldr	r2, [r7, #20]
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	4313      	orrs	r3, r2
 8004244:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	693a      	ldr	r2, [r7, #16]
 800424a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	697a      	ldr	r2, [r7, #20]
 8004250:	621a      	str	r2, [r3, #32]
}
 8004252:	bf00      	nop
 8004254:	371c      	adds	r7, #28
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr

0800425e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800425e:	b480      	push	{r7}
 8004260:	b087      	sub	sp, #28
 8004262:	af00      	add	r7, sp, #0
 8004264:	60f8      	str	r0, [r7, #12]
 8004266:	60b9      	str	r1, [r7, #8]
 8004268:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	6a1b      	ldr	r3, [r3, #32]
 800426e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6a1b      	ldr	r3, [r3, #32]
 8004274:	f023 0210 	bic.w	r2, r3, #16
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	699b      	ldr	r3, [r3, #24]
 8004280:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004288:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	031b      	lsls	r3, r3, #12
 800428e:	693a      	ldr	r2, [r7, #16]
 8004290:	4313      	orrs	r3, r2
 8004292:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800429a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	011b      	lsls	r3, r3, #4
 80042a0:	697a      	ldr	r2, [r7, #20]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	693a      	ldr	r2, [r7, #16]
 80042aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	697a      	ldr	r2, [r7, #20]
 80042b0:	621a      	str	r2, [r3, #32]
}
 80042b2:	bf00      	nop
 80042b4:	371c      	adds	r7, #28
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr

080042be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80042be:	b480      	push	{r7}
 80042c0:	b085      	sub	sp, #20
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
 80042c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042d6:	683a      	ldr	r2, [r7, #0]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	4313      	orrs	r3, r2
 80042dc:	f043 0307 	orr.w	r3, r3, #7
 80042e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	68fa      	ldr	r2, [r7, #12]
 80042e6:	609a      	str	r2, [r3, #8]
}
 80042e8:	bf00      	nop
 80042ea:	3714      	adds	r7, #20
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b087      	sub	sp, #28
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	607a      	str	r2, [r7, #4]
 8004300:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800430e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	021a      	lsls	r2, r3, #8
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	431a      	orrs	r2, r3
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	4313      	orrs	r3, r2
 800431c:	697a      	ldr	r2, [r7, #20]
 800431e:	4313      	orrs	r3, r2
 8004320:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	697a      	ldr	r2, [r7, #20]
 8004326:	609a      	str	r2, [r3, #8]
}
 8004328:	bf00      	nop
 800432a:	371c      	adds	r7, #28
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004334:	b480      	push	{r7}
 8004336:	b085      	sub	sp, #20
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004344:	2b01      	cmp	r3, #1
 8004346:	d101      	bne.n	800434c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004348:	2302      	movs	r3, #2
 800434a:	e050      	b.n	80043ee <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2202      	movs	r2, #2
 8004358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004372:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	68fa      	ldr	r2, [r7, #12]
 800437a:	4313      	orrs	r3, r2
 800437c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	68fa      	ldr	r2, [r7, #12]
 8004384:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a1c      	ldr	r2, [pc, #112]	@ (80043fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d018      	beq.n	80043c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004398:	d013      	beq.n	80043c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a18      	ldr	r2, [pc, #96]	@ (8004400 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d00e      	beq.n	80043c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a16      	ldr	r2, [pc, #88]	@ (8004404 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d009      	beq.n	80043c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a15      	ldr	r2, [pc, #84]	@ (8004408 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d004      	beq.n	80043c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a13      	ldr	r2, [pc, #76]	@ (800440c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d10c      	bne.n	80043dc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80043c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	68ba      	ldr	r2, [r7, #8]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	68ba      	ldr	r2, [r7, #8]
 80043da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3714      	adds	r7, #20
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	40010000 	.word	0x40010000
 8004400:	40000400 	.word	0x40000400
 8004404:	40000800 	.word	0x40000800
 8004408:	40000c00 	.word	0x40000c00
 800440c:	40014000 	.word	0x40014000

08004410 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004418:	bf00      	nop
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800442c:	bf00      	nop
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d101      	bne.n	800444a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e042      	b.n	80044d0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004450:	b2db      	uxtb	r3, r3
 8004452:	2b00      	cmp	r3, #0
 8004454:	d106      	bne.n	8004464 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f7fd fe74 	bl	800214c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2224      	movs	r2, #36	@ 0x24
 8004468:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	68da      	ldr	r2, [r3, #12]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800447a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f000 fdc1 	bl	8005004 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	691a      	ldr	r2, [r3, #16]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004490:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	695a      	ldr	r2, [r3, #20]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80044a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	68da      	ldr	r2, [r3, #12]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80044b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2220      	movs	r2, #32
 80044bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2220      	movs	r2, #32
 80044c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3708      	adds	r7, #8
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b08c      	sub	sp, #48	@ 0x30
 80044dc:	af00      	add	r7, sp, #0
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	60b9      	str	r1, [r7, #8]
 80044e2:	4613      	mov	r3, r2
 80044e4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	2b20      	cmp	r3, #32
 80044f0:	d156      	bne.n	80045a0 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d002      	beq.n	80044fe <HAL_UART_Transmit_DMA+0x26>
 80044f8:	88fb      	ldrh	r3, [r7, #6]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d101      	bne.n	8004502 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e04f      	b.n	80045a2 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8004502:	68ba      	ldr	r2, [r7, #8]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	88fa      	ldrh	r2, [r7, #6]
 800450c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	88fa      	ldrh	r2, [r7, #6]
 8004512:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2200      	movs	r2, #0
 8004518:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2221      	movs	r2, #33	@ 0x21
 800451e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004526:	4a21      	ldr	r2, [pc, #132]	@ (80045ac <HAL_UART_Transmit_DMA+0xd4>)
 8004528:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800452e:	4a20      	ldr	r2, [pc, #128]	@ (80045b0 <HAL_UART_Transmit_DMA+0xd8>)
 8004530:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004536:	4a1f      	ldr	r2, [pc, #124]	@ (80045b4 <HAL_UART_Transmit_DMA+0xdc>)
 8004538:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800453e:	2200      	movs	r2, #0
 8004540:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8004542:	f107 0308 	add.w	r3, r7, #8
 8004546:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800454c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800454e:	6819      	ldr	r1, [r3, #0]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	3304      	adds	r3, #4
 8004556:	461a      	mov	r2, r3
 8004558:	88fb      	ldrh	r3, [r7, #6]
 800455a:	f7fe f9d1 	bl	8002900 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004566:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	3314      	adds	r3, #20
 800456e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004570:	69bb      	ldr	r3, [r7, #24]
 8004572:	e853 3f00 	ldrex	r3, [r3]
 8004576:	617b      	str	r3, [r7, #20]
   return(result);
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800457e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	3314      	adds	r3, #20
 8004586:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004588:	627a      	str	r2, [r7, #36]	@ 0x24
 800458a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800458c:	6a39      	ldr	r1, [r7, #32]
 800458e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004590:	e841 2300 	strex	r3, r2, [r1]
 8004594:	61fb      	str	r3, [r7, #28]
   return(result);
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d1e5      	bne.n	8004568 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800459c:	2300      	movs	r3, #0
 800459e:	e000      	b.n	80045a2 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80045a0:	2302      	movs	r3, #2
  }
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3730      	adds	r7, #48	@ 0x30
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	08004b31 	.word	0x08004b31
 80045b0:	08004bcb 	.word	0x08004bcb
 80045b4:	08004be7 	.word	0x08004be7

080045b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b0ba      	sub	sp, #232	@ 0xe8
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	695b      	ldr	r3, [r3, #20]
 80045da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80045de:	2300      	movs	r3, #0
 80045e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80045e4:	2300      	movs	r3, #0
 80045e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80045ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045ee:	f003 030f 	and.w	r3, r3, #15
 80045f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80045f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d10f      	bne.n	800461e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80045fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004602:	f003 0320 	and.w	r3, r3, #32
 8004606:	2b00      	cmp	r3, #0
 8004608:	d009      	beq.n	800461e <HAL_UART_IRQHandler+0x66>
 800460a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800460e:	f003 0320 	and.w	r3, r3, #32
 8004612:	2b00      	cmp	r3, #0
 8004614:	d003      	beq.n	800461e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 fc36 	bl	8004e88 <UART_Receive_IT>
      return;
 800461c:	e25b      	b.n	8004ad6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800461e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004622:	2b00      	cmp	r3, #0
 8004624:	f000 80de 	beq.w	80047e4 <HAL_UART_IRQHandler+0x22c>
 8004628:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800462c:	f003 0301 	and.w	r3, r3, #1
 8004630:	2b00      	cmp	r3, #0
 8004632:	d106      	bne.n	8004642 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004634:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004638:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800463c:	2b00      	cmp	r3, #0
 800463e:	f000 80d1 	beq.w	80047e4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004646:	f003 0301 	and.w	r3, r3, #1
 800464a:	2b00      	cmp	r3, #0
 800464c:	d00b      	beq.n	8004666 <HAL_UART_IRQHandler+0xae>
 800464e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004652:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004656:	2b00      	cmp	r3, #0
 8004658:	d005      	beq.n	8004666 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800465e:	f043 0201 	orr.w	r2, r3, #1
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800466a:	f003 0304 	and.w	r3, r3, #4
 800466e:	2b00      	cmp	r3, #0
 8004670:	d00b      	beq.n	800468a <HAL_UART_IRQHandler+0xd2>
 8004672:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004676:	f003 0301 	and.w	r3, r3, #1
 800467a:	2b00      	cmp	r3, #0
 800467c:	d005      	beq.n	800468a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004682:	f043 0202 	orr.w	r2, r3, #2
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800468a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800468e:	f003 0302 	and.w	r3, r3, #2
 8004692:	2b00      	cmp	r3, #0
 8004694:	d00b      	beq.n	80046ae <HAL_UART_IRQHandler+0xf6>
 8004696:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800469a:	f003 0301 	and.w	r3, r3, #1
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d005      	beq.n	80046ae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046a6:	f043 0204 	orr.w	r2, r3, #4
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80046ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046b2:	f003 0308 	and.w	r3, r3, #8
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d011      	beq.n	80046de <HAL_UART_IRQHandler+0x126>
 80046ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046be:	f003 0320 	and.w	r3, r3, #32
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d105      	bne.n	80046d2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80046c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80046ca:	f003 0301 	and.w	r3, r3, #1
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d005      	beq.n	80046de <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046d6:	f043 0208 	orr.w	r2, r3, #8
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	f000 81f2 	beq.w	8004acc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80046e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046ec:	f003 0320 	and.w	r3, r3, #32
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d008      	beq.n	8004706 <HAL_UART_IRQHandler+0x14e>
 80046f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046f8:	f003 0320 	and.w	r3, r3, #32
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d002      	beq.n	8004706 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f000 fbc1 	bl	8004e88 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	695b      	ldr	r3, [r3, #20]
 800470c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004710:	2b40      	cmp	r3, #64	@ 0x40
 8004712:	bf0c      	ite	eq
 8004714:	2301      	moveq	r3, #1
 8004716:	2300      	movne	r3, #0
 8004718:	b2db      	uxtb	r3, r3
 800471a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004722:	f003 0308 	and.w	r3, r3, #8
 8004726:	2b00      	cmp	r3, #0
 8004728:	d103      	bne.n	8004732 <HAL_UART_IRQHandler+0x17a>
 800472a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800472e:	2b00      	cmp	r3, #0
 8004730:	d04f      	beq.n	80047d2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 fac9 	bl	8004cca <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	695b      	ldr	r3, [r3, #20]
 800473e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004742:	2b40      	cmp	r3, #64	@ 0x40
 8004744:	d141      	bne.n	80047ca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	3314      	adds	r3, #20
 800474c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004750:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004754:	e853 3f00 	ldrex	r3, [r3]
 8004758:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800475c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004760:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004764:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	3314      	adds	r3, #20
 800476e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004772:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004776:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800477a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800477e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004782:	e841 2300 	strex	r3, r2, [r1]
 8004786:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800478a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d1d9      	bne.n	8004746 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004796:	2b00      	cmp	r3, #0
 8004798:	d013      	beq.n	80047c2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800479e:	4a7e      	ldr	r2, [pc, #504]	@ (8004998 <HAL_UART_IRQHandler+0x3e0>)
 80047a0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047a6:	4618      	mov	r0, r3
 80047a8:	f7fe f972 	bl	8002a90 <HAL_DMA_Abort_IT>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d016      	beq.n	80047e0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80047bc:	4610      	mov	r0, r2
 80047be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047c0:	e00e      	b.n	80047e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 f99e 	bl	8004b04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047c8:	e00a      	b.n	80047e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f000 f99a 	bl	8004b04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047d0:	e006      	b.n	80047e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 f996 	bl	8004b04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80047de:	e175      	b.n	8004acc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047e0:	bf00      	nop
    return;
 80047e2:	e173      	b.n	8004acc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	f040 814f 	bne.w	8004a8c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80047ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047f2:	f003 0310 	and.w	r3, r3, #16
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	f000 8148 	beq.w	8004a8c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80047fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004800:	f003 0310 	and.w	r3, r3, #16
 8004804:	2b00      	cmp	r3, #0
 8004806:	f000 8141 	beq.w	8004a8c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800480a:	2300      	movs	r3, #0
 800480c:	60bb      	str	r3, [r7, #8]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	60bb      	str	r3, [r7, #8]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	60bb      	str	r3, [r7, #8]
 800481e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	695b      	ldr	r3, [r3, #20]
 8004826:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800482a:	2b40      	cmp	r3, #64	@ 0x40
 800482c:	f040 80b6 	bne.w	800499c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800483c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004840:	2b00      	cmp	r3, #0
 8004842:	f000 8145 	beq.w	8004ad0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800484a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800484e:	429a      	cmp	r2, r3
 8004850:	f080 813e 	bcs.w	8004ad0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800485a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004860:	69db      	ldr	r3, [r3, #28]
 8004862:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004866:	f000 8088 	beq.w	800497a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	330c      	adds	r3, #12
 8004870:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004874:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004878:	e853 3f00 	ldrex	r3, [r3]
 800487c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004880:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004884:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004888:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	330c      	adds	r3, #12
 8004892:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004896:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800489a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800489e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80048a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80048a6:	e841 2300 	strex	r3, r2, [r1]
 80048aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80048ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d1d9      	bne.n	800486a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	3314      	adds	r3, #20
 80048bc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80048c0:	e853 3f00 	ldrex	r3, [r3]
 80048c4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80048c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80048c8:	f023 0301 	bic.w	r3, r3, #1
 80048cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	3314      	adds	r3, #20
 80048d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80048da:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80048de:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80048e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80048e6:	e841 2300 	strex	r3, r2, [r1]
 80048ea:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80048ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d1e1      	bne.n	80048b6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	3314      	adds	r3, #20
 80048f8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80048fc:	e853 3f00 	ldrex	r3, [r3]
 8004900:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004902:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004904:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004908:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	3314      	adds	r3, #20
 8004912:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004916:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004918:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800491a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800491c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800491e:	e841 2300 	strex	r3, r2, [r1]
 8004922:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004924:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004926:	2b00      	cmp	r3, #0
 8004928:	d1e3      	bne.n	80048f2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2220      	movs	r2, #32
 800492e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	330c      	adds	r3, #12
 800493e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004940:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004942:	e853 3f00 	ldrex	r3, [r3]
 8004946:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004948:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800494a:	f023 0310 	bic.w	r3, r3, #16
 800494e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	330c      	adds	r3, #12
 8004958:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800495c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800495e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004960:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004962:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004964:	e841 2300 	strex	r3, r2, [r1]
 8004968:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800496a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800496c:	2b00      	cmp	r3, #0
 800496e:	d1e3      	bne.n	8004938 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004974:	4618      	mov	r0, r3
 8004976:	f7fe f81b 	bl	80029b0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2202      	movs	r2, #2
 800497e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004988:	b29b      	uxth	r3, r3
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	b29b      	uxth	r3, r3
 800498e:	4619      	mov	r1, r3
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f000 f8c1 	bl	8004b18 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004996:	e09b      	b.n	8004ad0 <HAL_UART_IRQHandler+0x518>
 8004998:	08004d91 	.word	0x08004d91
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	f000 808e 	beq.w	8004ad4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80049b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80049bc:	2b00      	cmp	r3, #0
 80049be:	f000 8089 	beq.w	8004ad4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	330c      	adds	r3, #12
 80049c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049cc:	e853 3f00 	ldrex	r3, [r3]
 80049d0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80049d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80049d8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	330c      	adds	r3, #12
 80049e2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80049e6:	647a      	str	r2, [r7, #68]	@ 0x44
 80049e8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80049ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80049ee:	e841 2300 	strex	r3, r2, [r1]
 80049f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80049f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d1e3      	bne.n	80049c2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	3314      	adds	r3, #20
 8004a00:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a04:	e853 3f00 	ldrex	r3, [r3]
 8004a08:	623b      	str	r3, [r7, #32]
   return(result);
 8004a0a:	6a3b      	ldr	r3, [r7, #32]
 8004a0c:	f023 0301 	bic.w	r3, r3, #1
 8004a10:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	3314      	adds	r3, #20
 8004a1a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004a1e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004a20:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a22:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a26:	e841 2300 	strex	r3, r2, [r1]
 8004a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d1e3      	bne.n	80049fa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2220      	movs	r2, #32
 8004a36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	330c      	adds	r3, #12
 8004a46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	e853 3f00 	ldrex	r3, [r3]
 8004a4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f023 0310 	bic.w	r3, r3, #16
 8004a56:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	330c      	adds	r3, #12
 8004a60:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004a64:	61fa      	str	r2, [r7, #28]
 8004a66:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a68:	69b9      	ldr	r1, [r7, #24]
 8004a6a:	69fa      	ldr	r2, [r7, #28]
 8004a6c:	e841 2300 	strex	r3, r2, [r1]
 8004a70:	617b      	str	r3, [r7, #20]
   return(result);
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d1e3      	bne.n	8004a40 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2202      	movs	r2, #2
 8004a7c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a7e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004a82:	4619      	mov	r1, r3
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f000 f847 	bl	8004b18 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a8a:	e023      	b.n	8004ad4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004a8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d009      	beq.n	8004aac <HAL_UART_IRQHandler+0x4f4>
 8004a98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d003      	beq.n	8004aac <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f000 f987 	bl	8004db8 <UART_Transmit_IT>
    return;
 8004aaa:	e014      	b.n	8004ad6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004aac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ab0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d00e      	beq.n	8004ad6 <HAL_UART_IRQHandler+0x51e>
 8004ab8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004abc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d008      	beq.n	8004ad6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f000 f9c7 	bl	8004e58 <UART_EndTransmit_IT>
    return;
 8004aca:	e004      	b.n	8004ad6 <HAL_UART_IRQHandler+0x51e>
    return;
 8004acc:	bf00      	nop
 8004ace:	e002      	b.n	8004ad6 <HAL_UART_IRQHandler+0x51e>
      return;
 8004ad0:	bf00      	nop
 8004ad2:	e000      	b.n	8004ad6 <HAL_UART_IRQHandler+0x51e>
      return;
 8004ad4:	bf00      	nop
  }
}
 8004ad6:	37e8      	adds	r7, #232	@ 0xe8
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}

08004adc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004ae4:	bf00      	nop
 8004ae6:	370c      	adds	r7, #12
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004af8:	bf00      	nop
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004b0c:	bf00      	nop
 8004b0e:	370c      	adds	r7, #12
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	460b      	mov	r3, r1
 8004b22:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b24:	bf00      	nop
 8004b26:	370c      	adds	r7, #12
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr

08004b30 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b090      	sub	sp, #64	@ 0x40
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d137      	bne.n	8004bbc <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8004b4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b4e:	2200      	movs	r2, #0
 8004b50:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004b52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	3314      	adds	r3, #20
 8004b58:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b5c:	e853 3f00 	ldrex	r3, [r3]
 8004b60:	623b      	str	r3, [r7, #32]
   return(result);
 8004b62:	6a3b      	ldr	r3, [r7, #32]
 8004b64:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b68:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004b6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	3314      	adds	r3, #20
 8004b70:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004b72:	633a      	str	r2, [r7, #48]	@ 0x30
 8004b74:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b7a:	e841 2300 	strex	r3, r2, [r1]
 8004b7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004b80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d1e5      	bne.n	8004b52 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004b86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	330c      	adds	r3, #12
 8004b8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	e853 3f00 	ldrex	r3, [r3]
 8004b94:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	330c      	adds	r3, #12
 8004ba4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004ba6:	61fa      	str	r2, [r7, #28]
 8004ba8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004baa:	69b9      	ldr	r1, [r7, #24]
 8004bac:	69fa      	ldr	r2, [r7, #28]
 8004bae:	e841 2300 	strex	r3, r2, [r1]
 8004bb2:	617b      	str	r3, [r7, #20]
   return(result);
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d1e5      	bne.n	8004b86 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004bba:	e002      	b.n	8004bc2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004bbc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004bbe:	f7fd f835 	bl	8001c2c <HAL_UART_TxCpltCallback>
}
 8004bc2:	bf00      	nop
 8004bc4:	3740      	adds	r7, #64	@ 0x40
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}

08004bca <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004bca:	b580      	push	{r7, lr}
 8004bcc:	b084      	sub	sp, #16
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bd6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004bd8:	68f8      	ldr	r0, [r7, #12]
 8004bda:	f7ff ff7f 	bl	8004adc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004bde:	bf00      	nop
 8004be0:	3710      	adds	r7, #16
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}

08004be6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004be6:	b580      	push	{r7, lr}
 8004be8:	b084      	sub	sp, #16
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bf6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	695b      	ldr	r3, [r3, #20]
 8004bfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c02:	2b80      	cmp	r3, #128	@ 0x80
 8004c04:	bf0c      	ite	eq
 8004c06:	2301      	moveq	r3, #1
 8004c08:	2300      	movne	r3, #0
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	2b21      	cmp	r3, #33	@ 0x21
 8004c18:	d108      	bne.n	8004c2c <UART_DMAError+0x46>
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d005      	beq.n	8004c2c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	2200      	movs	r2, #0
 8004c24:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8004c26:	68b8      	ldr	r0, [r7, #8]
 8004c28:	f000 f827 	bl	8004c7a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	695b      	ldr	r3, [r3, #20]
 8004c32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c36:	2b40      	cmp	r3, #64	@ 0x40
 8004c38:	bf0c      	ite	eq
 8004c3a:	2301      	moveq	r3, #1
 8004c3c:	2300      	movne	r3, #0
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	2b22      	cmp	r3, #34	@ 0x22
 8004c4c:	d108      	bne.n	8004c60 <UART_DMAError+0x7a>
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d005      	beq.n	8004c60 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	2200      	movs	r2, #0
 8004c58:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8004c5a:	68b8      	ldr	r0, [r7, #8]
 8004c5c:	f000 f835 	bl	8004cca <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c64:	f043 0210 	orr.w	r2, r3, #16
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c6c:	68b8      	ldr	r0, [r7, #8]
 8004c6e:	f7ff ff49 	bl	8004b04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c72:	bf00      	nop
 8004c74:	3710      	adds	r7, #16
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}

08004c7a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004c7a:	b480      	push	{r7}
 8004c7c:	b089      	sub	sp, #36	@ 0x24
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	330c      	adds	r3, #12
 8004c88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	e853 3f00 	ldrex	r3, [r3]
 8004c90:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004c98:	61fb      	str	r3, [r7, #28]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	330c      	adds	r3, #12
 8004ca0:	69fa      	ldr	r2, [r7, #28]
 8004ca2:	61ba      	str	r2, [r7, #24]
 8004ca4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca6:	6979      	ldr	r1, [r7, #20]
 8004ca8:	69ba      	ldr	r2, [r7, #24]
 8004caa:	e841 2300 	strex	r3, r2, [r1]
 8004cae:	613b      	str	r3, [r7, #16]
   return(result);
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d1e5      	bne.n	8004c82 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2220      	movs	r2, #32
 8004cba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8004cbe:	bf00      	nop
 8004cc0:	3724      	adds	r7, #36	@ 0x24
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr

08004cca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cca:	b480      	push	{r7}
 8004ccc:	b095      	sub	sp, #84	@ 0x54
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	330c      	adds	r3, #12
 8004cd8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cdc:	e853 3f00 	ldrex	r3, [r3]
 8004ce0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ce4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ce8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	330c      	adds	r3, #12
 8004cf0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004cf2:	643a      	str	r2, [r7, #64]	@ 0x40
 8004cf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004cf8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004cfa:	e841 2300 	strex	r3, r2, [r1]
 8004cfe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004d00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d1e5      	bne.n	8004cd2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	3314      	adds	r3, #20
 8004d0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d0e:	6a3b      	ldr	r3, [r7, #32]
 8004d10:	e853 3f00 	ldrex	r3, [r3]
 8004d14:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	f023 0301 	bic.w	r3, r3, #1
 8004d1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	3314      	adds	r3, #20
 8004d24:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d26:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d28:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d2a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d2e:	e841 2300 	strex	r3, r2, [r1]
 8004d32:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d1e5      	bne.n	8004d06 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d119      	bne.n	8004d76 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	330c      	adds	r3, #12
 8004d48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	e853 3f00 	ldrex	r3, [r3]
 8004d50:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	f023 0310 	bic.w	r3, r3, #16
 8004d58:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	330c      	adds	r3, #12
 8004d60:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d62:	61ba      	str	r2, [r7, #24]
 8004d64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d66:	6979      	ldr	r1, [r7, #20]
 8004d68:	69ba      	ldr	r2, [r7, #24]
 8004d6a:	e841 2300 	strex	r3, r2, [r1]
 8004d6e:	613b      	str	r3, [r7, #16]
   return(result);
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d1e5      	bne.n	8004d42 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2220      	movs	r2, #32
 8004d7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004d84:	bf00      	nop
 8004d86:	3754      	adds	r7, #84	@ 0x54
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b084      	sub	sp, #16
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d9c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2200      	movs	r2, #0
 8004da2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2200      	movs	r2, #0
 8004da8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004daa:	68f8      	ldr	r0, [r7, #12]
 8004dac:	f7ff feaa 	bl	8004b04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004db0:	bf00      	nop
 8004db2:	3710      	adds	r7, #16
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b085      	sub	sp, #20
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	2b21      	cmp	r3, #33	@ 0x21
 8004dca:	d13e      	bne.n	8004e4a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dd4:	d114      	bne.n	8004e00 <UART_Transmit_IT+0x48>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d110      	bne.n	8004e00 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a1b      	ldr	r3, [r3, #32]
 8004de2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	881b      	ldrh	r3, [r3, #0]
 8004de8:	461a      	mov	r2, r3
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004df2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6a1b      	ldr	r3, [r3, #32]
 8004df8:	1c9a      	adds	r2, r3, #2
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	621a      	str	r2, [r3, #32]
 8004dfe:	e008      	b.n	8004e12 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6a1b      	ldr	r3, [r3, #32]
 8004e04:	1c59      	adds	r1, r3, #1
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	6211      	str	r1, [r2, #32]
 8004e0a:	781a      	ldrb	r2, [r3, #0]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	3b01      	subs	r3, #1
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	4619      	mov	r1, r3
 8004e20:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d10f      	bne.n	8004e46 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	68da      	ldr	r2, [r3, #12]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004e34:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	68da      	ldr	r2, [r3, #12]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e44:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004e46:	2300      	movs	r3, #0
 8004e48:	e000      	b.n	8004e4c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004e4a:	2302      	movs	r3, #2
  }
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3714      	adds	r7, #20
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr

08004e58 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b082      	sub	sp, #8
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68da      	ldr	r2, [r3, #12]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e6e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2220      	movs	r2, #32
 8004e74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f7fc fed7 	bl	8001c2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004e7e:	2300      	movs	r3, #0
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3708      	adds	r7, #8
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}

08004e88 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b08c      	sub	sp, #48	@ 0x30
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	2b22      	cmp	r3, #34	@ 0x22
 8004e9a:	f040 80ae 	bne.w	8004ffa <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ea6:	d117      	bne.n	8004ed8 <UART_Receive_IT+0x50>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	691b      	ldr	r3, [r3, #16]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d113      	bne.n	8004ed8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eb8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ec6:	b29a      	uxth	r2, r3
 8004ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eca:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ed0:	1c9a      	adds	r2, r3, #2
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	629a      	str	r2, [r3, #40]	@ 0x28
 8004ed6:	e026      	b.n	8004f26 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004edc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004eea:	d007      	beq.n	8004efc <UART_Receive_IT+0x74>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d10a      	bne.n	8004f0a <UART_Receive_IT+0x82>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	691b      	ldr	r3, [r3, #16]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d106      	bne.n	8004f0a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	b2da      	uxtb	r2, r3
 8004f04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f06:	701a      	strb	r2, [r3, #0]
 8004f08:	e008      	b.n	8004f1c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f16:	b2da      	uxtb	r2, r3
 8004f18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f1a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f20:	1c5a      	adds	r2, r3, #1
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	4619      	mov	r1, r3
 8004f34:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d15d      	bne.n	8004ff6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	68da      	ldr	r2, [r3, #12]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f022 0220 	bic.w	r2, r2, #32
 8004f48:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	68da      	ldr	r2, [r3, #12]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004f58:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	695a      	ldr	r2, [r3, #20]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f022 0201 	bic.w	r2, r2, #1
 8004f68:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2220      	movs	r2, #32
 8004f6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d135      	bne.n	8004fec <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	330c      	adds	r3, #12
 8004f8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	e853 3f00 	ldrex	r3, [r3]
 8004f94:	613b      	str	r3, [r7, #16]
   return(result);
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	f023 0310 	bic.w	r3, r3, #16
 8004f9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	330c      	adds	r3, #12
 8004fa4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fa6:	623a      	str	r2, [r7, #32]
 8004fa8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004faa:	69f9      	ldr	r1, [r7, #28]
 8004fac:	6a3a      	ldr	r2, [r7, #32]
 8004fae:	e841 2300 	strex	r3, r2, [r1]
 8004fb2:	61bb      	str	r3, [r7, #24]
   return(result);
 8004fb4:	69bb      	ldr	r3, [r7, #24]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d1e5      	bne.n	8004f86 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 0310 	and.w	r3, r3, #16
 8004fc4:	2b10      	cmp	r3, #16
 8004fc6:	d10a      	bne.n	8004fde <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004fc8:	2300      	movs	r3, #0
 8004fca:	60fb      	str	r3, [r7, #12]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	60fb      	str	r3, [r7, #12]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	60fb      	str	r3, [r7, #12]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004fe2:	4619      	mov	r1, r3
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f7ff fd97 	bl	8004b18 <HAL_UARTEx_RxEventCallback>
 8004fea:	e002      	b.n	8004ff2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f7ff fd7f 	bl	8004af0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	e002      	b.n	8004ffc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	e000      	b.n	8004ffc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004ffa:	2302      	movs	r3, #2
  }
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3730      	adds	r7, #48	@ 0x30
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005004:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005008:	b0c0      	sub	sp, #256	@ 0x100
 800500a:	af00      	add	r7, sp, #0
 800500c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	691b      	ldr	r3, [r3, #16]
 8005018:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800501c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005020:	68d9      	ldr	r1, [r3, #12]
 8005022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	ea40 0301 	orr.w	r3, r0, r1
 800502c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800502e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005032:	689a      	ldr	r2, [r3, #8]
 8005034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005038:	691b      	ldr	r3, [r3, #16]
 800503a:	431a      	orrs	r2, r3
 800503c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005040:	695b      	ldr	r3, [r3, #20]
 8005042:	431a      	orrs	r2, r3
 8005044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005048:	69db      	ldr	r3, [r3, #28]
 800504a:	4313      	orrs	r3, r2
 800504c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800505c:	f021 010c 	bic.w	r1, r1, #12
 8005060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800506a:	430b      	orrs	r3, r1
 800506c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800506e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	695b      	ldr	r3, [r3, #20]
 8005076:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800507a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800507e:	6999      	ldr	r1, [r3, #24]
 8005080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	ea40 0301 	orr.w	r3, r0, r1
 800508a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800508c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	4b8f      	ldr	r3, [pc, #572]	@ (80052d0 <UART_SetConfig+0x2cc>)
 8005094:	429a      	cmp	r2, r3
 8005096:	d005      	beq.n	80050a4 <UART_SetConfig+0xa0>
 8005098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	4b8d      	ldr	r3, [pc, #564]	@ (80052d4 <UART_SetConfig+0x2d0>)
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d104      	bne.n	80050ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80050a4:	f7fe fd48 	bl	8003b38 <HAL_RCC_GetPCLK2Freq>
 80050a8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80050ac:	e003      	b.n	80050b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80050ae:	f7fe fd2f 	bl	8003b10 <HAL_RCC_GetPCLK1Freq>
 80050b2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050ba:	69db      	ldr	r3, [r3, #28]
 80050bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050c0:	f040 810c 	bne.w	80052dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80050c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050c8:	2200      	movs	r2, #0
 80050ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80050ce:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80050d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80050d6:	4622      	mov	r2, r4
 80050d8:	462b      	mov	r3, r5
 80050da:	1891      	adds	r1, r2, r2
 80050dc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80050de:	415b      	adcs	r3, r3
 80050e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80050e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80050e6:	4621      	mov	r1, r4
 80050e8:	eb12 0801 	adds.w	r8, r2, r1
 80050ec:	4629      	mov	r1, r5
 80050ee:	eb43 0901 	adc.w	r9, r3, r1
 80050f2:	f04f 0200 	mov.w	r2, #0
 80050f6:	f04f 0300 	mov.w	r3, #0
 80050fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80050fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005102:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005106:	4690      	mov	r8, r2
 8005108:	4699      	mov	r9, r3
 800510a:	4623      	mov	r3, r4
 800510c:	eb18 0303 	adds.w	r3, r8, r3
 8005110:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005114:	462b      	mov	r3, r5
 8005116:	eb49 0303 	adc.w	r3, r9, r3
 800511a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800511e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800512a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800512e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005132:	460b      	mov	r3, r1
 8005134:	18db      	adds	r3, r3, r3
 8005136:	653b      	str	r3, [r7, #80]	@ 0x50
 8005138:	4613      	mov	r3, r2
 800513a:	eb42 0303 	adc.w	r3, r2, r3
 800513e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005140:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005144:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005148:	f7fb fd2e 	bl	8000ba8 <__aeabi_uldivmod>
 800514c:	4602      	mov	r2, r0
 800514e:	460b      	mov	r3, r1
 8005150:	4b61      	ldr	r3, [pc, #388]	@ (80052d8 <UART_SetConfig+0x2d4>)
 8005152:	fba3 2302 	umull	r2, r3, r3, r2
 8005156:	095b      	lsrs	r3, r3, #5
 8005158:	011c      	lsls	r4, r3, #4
 800515a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800515e:	2200      	movs	r2, #0
 8005160:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005164:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005168:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800516c:	4642      	mov	r2, r8
 800516e:	464b      	mov	r3, r9
 8005170:	1891      	adds	r1, r2, r2
 8005172:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005174:	415b      	adcs	r3, r3
 8005176:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005178:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800517c:	4641      	mov	r1, r8
 800517e:	eb12 0a01 	adds.w	sl, r2, r1
 8005182:	4649      	mov	r1, r9
 8005184:	eb43 0b01 	adc.w	fp, r3, r1
 8005188:	f04f 0200 	mov.w	r2, #0
 800518c:	f04f 0300 	mov.w	r3, #0
 8005190:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005194:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005198:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800519c:	4692      	mov	sl, r2
 800519e:	469b      	mov	fp, r3
 80051a0:	4643      	mov	r3, r8
 80051a2:	eb1a 0303 	adds.w	r3, sl, r3
 80051a6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80051aa:	464b      	mov	r3, r9
 80051ac:	eb4b 0303 	adc.w	r3, fp, r3
 80051b0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80051b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80051c0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80051c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80051c8:	460b      	mov	r3, r1
 80051ca:	18db      	adds	r3, r3, r3
 80051cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80051ce:	4613      	mov	r3, r2
 80051d0:	eb42 0303 	adc.w	r3, r2, r3
 80051d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80051d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80051da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80051de:	f7fb fce3 	bl	8000ba8 <__aeabi_uldivmod>
 80051e2:	4602      	mov	r2, r0
 80051e4:	460b      	mov	r3, r1
 80051e6:	4611      	mov	r1, r2
 80051e8:	4b3b      	ldr	r3, [pc, #236]	@ (80052d8 <UART_SetConfig+0x2d4>)
 80051ea:	fba3 2301 	umull	r2, r3, r3, r1
 80051ee:	095b      	lsrs	r3, r3, #5
 80051f0:	2264      	movs	r2, #100	@ 0x64
 80051f2:	fb02 f303 	mul.w	r3, r2, r3
 80051f6:	1acb      	subs	r3, r1, r3
 80051f8:	00db      	lsls	r3, r3, #3
 80051fa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80051fe:	4b36      	ldr	r3, [pc, #216]	@ (80052d8 <UART_SetConfig+0x2d4>)
 8005200:	fba3 2302 	umull	r2, r3, r3, r2
 8005204:	095b      	lsrs	r3, r3, #5
 8005206:	005b      	lsls	r3, r3, #1
 8005208:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800520c:	441c      	add	r4, r3
 800520e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005212:	2200      	movs	r2, #0
 8005214:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005218:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800521c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005220:	4642      	mov	r2, r8
 8005222:	464b      	mov	r3, r9
 8005224:	1891      	adds	r1, r2, r2
 8005226:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005228:	415b      	adcs	r3, r3
 800522a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800522c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005230:	4641      	mov	r1, r8
 8005232:	1851      	adds	r1, r2, r1
 8005234:	6339      	str	r1, [r7, #48]	@ 0x30
 8005236:	4649      	mov	r1, r9
 8005238:	414b      	adcs	r3, r1
 800523a:	637b      	str	r3, [r7, #52]	@ 0x34
 800523c:	f04f 0200 	mov.w	r2, #0
 8005240:	f04f 0300 	mov.w	r3, #0
 8005244:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005248:	4659      	mov	r1, fp
 800524a:	00cb      	lsls	r3, r1, #3
 800524c:	4651      	mov	r1, sl
 800524e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005252:	4651      	mov	r1, sl
 8005254:	00ca      	lsls	r2, r1, #3
 8005256:	4610      	mov	r0, r2
 8005258:	4619      	mov	r1, r3
 800525a:	4603      	mov	r3, r0
 800525c:	4642      	mov	r2, r8
 800525e:	189b      	adds	r3, r3, r2
 8005260:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005264:	464b      	mov	r3, r9
 8005266:	460a      	mov	r2, r1
 8005268:	eb42 0303 	adc.w	r3, r2, r3
 800526c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800527c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005280:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005284:	460b      	mov	r3, r1
 8005286:	18db      	adds	r3, r3, r3
 8005288:	62bb      	str	r3, [r7, #40]	@ 0x28
 800528a:	4613      	mov	r3, r2
 800528c:	eb42 0303 	adc.w	r3, r2, r3
 8005290:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005292:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005296:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800529a:	f7fb fc85 	bl	8000ba8 <__aeabi_uldivmod>
 800529e:	4602      	mov	r2, r0
 80052a0:	460b      	mov	r3, r1
 80052a2:	4b0d      	ldr	r3, [pc, #52]	@ (80052d8 <UART_SetConfig+0x2d4>)
 80052a4:	fba3 1302 	umull	r1, r3, r3, r2
 80052a8:	095b      	lsrs	r3, r3, #5
 80052aa:	2164      	movs	r1, #100	@ 0x64
 80052ac:	fb01 f303 	mul.w	r3, r1, r3
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	00db      	lsls	r3, r3, #3
 80052b4:	3332      	adds	r3, #50	@ 0x32
 80052b6:	4a08      	ldr	r2, [pc, #32]	@ (80052d8 <UART_SetConfig+0x2d4>)
 80052b8:	fba2 2303 	umull	r2, r3, r2, r3
 80052bc:	095b      	lsrs	r3, r3, #5
 80052be:	f003 0207 	and.w	r2, r3, #7
 80052c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4422      	add	r2, r4
 80052ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80052cc:	e106      	b.n	80054dc <UART_SetConfig+0x4d8>
 80052ce:	bf00      	nop
 80052d0:	40011000 	.word	0x40011000
 80052d4:	40011400 	.word	0x40011400
 80052d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052e0:	2200      	movs	r2, #0
 80052e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80052e6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80052ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80052ee:	4642      	mov	r2, r8
 80052f0:	464b      	mov	r3, r9
 80052f2:	1891      	adds	r1, r2, r2
 80052f4:	6239      	str	r1, [r7, #32]
 80052f6:	415b      	adcs	r3, r3
 80052f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80052fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80052fe:	4641      	mov	r1, r8
 8005300:	1854      	adds	r4, r2, r1
 8005302:	4649      	mov	r1, r9
 8005304:	eb43 0501 	adc.w	r5, r3, r1
 8005308:	f04f 0200 	mov.w	r2, #0
 800530c:	f04f 0300 	mov.w	r3, #0
 8005310:	00eb      	lsls	r3, r5, #3
 8005312:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005316:	00e2      	lsls	r2, r4, #3
 8005318:	4614      	mov	r4, r2
 800531a:	461d      	mov	r5, r3
 800531c:	4643      	mov	r3, r8
 800531e:	18e3      	adds	r3, r4, r3
 8005320:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005324:	464b      	mov	r3, r9
 8005326:	eb45 0303 	adc.w	r3, r5, r3
 800532a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800532e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800533a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800533e:	f04f 0200 	mov.w	r2, #0
 8005342:	f04f 0300 	mov.w	r3, #0
 8005346:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800534a:	4629      	mov	r1, r5
 800534c:	008b      	lsls	r3, r1, #2
 800534e:	4621      	mov	r1, r4
 8005350:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005354:	4621      	mov	r1, r4
 8005356:	008a      	lsls	r2, r1, #2
 8005358:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800535c:	f7fb fc24 	bl	8000ba8 <__aeabi_uldivmod>
 8005360:	4602      	mov	r2, r0
 8005362:	460b      	mov	r3, r1
 8005364:	4b60      	ldr	r3, [pc, #384]	@ (80054e8 <UART_SetConfig+0x4e4>)
 8005366:	fba3 2302 	umull	r2, r3, r3, r2
 800536a:	095b      	lsrs	r3, r3, #5
 800536c:	011c      	lsls	r4, r3, #4
 800536e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005372:	2200      	movs	r2, #0
 8005374:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005378:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800537c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005380:	4642      	mov	r2, r8
 8005382:	464b      	mov	r3, r9
 8005384:	1891      	adds	r1, r2, r2
 8005386:	61b9      	str	r1, [r7, #24]
 8005388:	415b      	adcs	r3, r3
 800538a:	61fb      	str	r3, [r7, #28]
 800538c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005390:	4641      	mov	r1, r8
 8005392:	1851      	adds	r1, r2, r1
 8005394:	6139      	str	r1, [r7, #16]
 8005396:	4649      	mov	r1, r9
 8005398:	414b      	adcs	r3, r1
 800539a:	617b      	str	r3, [r7, #20]
 800539c:	f04f 0200 	mov.w	r2, #0
 80053a0:	f04f 0300 	mov.w	r3, #0
 80053a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80053a8:	4659      	mov	r1, fp
 80053aa:	00cb      	lsls	r3, r1, #3
 80053ac:	4651      	mov	r1, sl
 80053ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053b2:	4651      	mov	r1, sl
 80053b4:	00ca      	lsls	r2, r1, #3
 80053b6:	4610      	mov	r0, r2
 80053b8:	4619      	mov	r1, r3
 80053ba:	4603      	mov	r3, r0
 80053bc:	4642      	mov	r2, r8
 80053be:	189b      	adds	r3, r3, r2
 80053c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80053c4:	464b      	mov	r3, r9
 80053c6:	460a      	mov	r2, r1
 80053c8:	eb42 0303 	adc.w	r3, r2, r3
 80053cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80053d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80053da:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80053dc:	f04f 0200 	mov.w	r2, #0
 80053e0:	f04f 0300 	mov.w	r3, #0
 80053e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80053e8:	4649      	mov	r1, r9
 80053ea:	008b      	lsls	r3, r1, #2
 80053ec:	4641      	mov	r1, r8
 80053ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053f2:	4641      	mov	r1, r8
 80053f4:	008a      	lsls	r2, r1, #2
 80053f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80053fa:	f7fb fbd5 	bl	8000ba8 <__aeabi_uldivmod>
 80053fe:	4602      	mov	r2, r0
 8005400:	460b      	mov	r3, r1
 8005402:	4611      	mov	r1, r2
 8005404:	4b38      	ldr	r3, [pc, #224]	@ (80054e8 <UART_SetConfig+0x4e4>)
 8005406:	fba3 2301 	umull	r2, r3, r3, r1
 800540a:	095b      	lsrs	r3, r3, #5
 800540c:	2264      	movs	r2, #100	@ 0x64
 800540e:	fb02 f303 	mul.w	r3, r2, r3
 8005412:	1acb      	subs	r3, r1, r3
 8005414:	011b      	lsls	r3, r3, #4
 8005416:	3332      	adds	r3, #50	@ 0x32
 8005418:	4a33      	ldr	r2, [pc, #204]	@ (80054e8 <UART_SetConfig+0x4e4>)
 800541a:	fba2 2303 	umull	r2, r3, r2, r3
 800541e:	095b      	lsrs	r3, r3, #5
 8005420:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005424:	441c      	add	r4, r3
 8005426:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800542a:	2200      	movs	r2, #0
 800542c:	673b      	str	r3, [r7, #112]	@ 0x70
 800542e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005430:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005434:	4642      	mov	r2, r8
 8005436:	464b      	mov	r3, r9
 8005438:	1891      	adds	r1, r2, r2
 800543a:	60b9      	str	r1, [r7, #8]
 800543c:	415b      	adcs	r3, r3
 800543e:	60fb      	str	r3, [r7, #12]
 8005440:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005444:	4641      	mov	r1, r8
 8005446:	1851      	adds	r1, r2, r1
 8005448:	6039      	str	r1, [r7, #0]
 800544a:	4649      	mov	r1, r9
 800544c:	414b      	adcs	r3, r1
 800544e:	607b      	str	r3, [r7, #4]
 8005450:	f04f 0200 	mov.w	r2, #0
 8005454:	f04f 0300 	mov.w	r3, #0
 8005458:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800545c:	4659      	mov	r1, fp
 800545e:	00cb      	lsls	r3, r1, #3
 8005460:	4651      	mov	r1, sl
 8005462:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005466:	4651      	mov	r1, sl
 8005468:	00ca      	lsls	r2, r1, #3
 800546a:	4610      	mov	r0, r2
 800546c:	4619      	mov	r1, r3
 800546e:	4603      	mov	r3, r0
 8005470:	4642      	mov	r2, r8
 8005472:	189b      	adds	r3, r3, r2
 8005474:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005476:	464b      	mov	r3, r9
 8005478:	460a      	mov	r2, r1
 800547a:	eb42 0303 	adc.w	r3, r2, r3
 800547e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	2200      	movs	r2, #0
 8005488:	663b      	str	r3, [r7, #96]	@ 0x60
 800548a:	667a      	str	r2, [r7, #100]	@ 0x64
 800548c:	f04f 0200 	mov.w	r2, #0
 8005490:	f04f 0300 	mov.w	r3, #0
 8005494:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005498:	4649      	mov	r1, r9
 800549a:	008b      	lsls	r3, r1, #2
 800549c:	4641      	mov	r1, r8
 800549e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054a2:	4641      	mov	r1, r8
 80054a4:	008a      	lsls	r2, r1, #2
 80054a6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80054aa:	f7fb fb7d 	bl	8000ba8 <__aeabi_uldivmod>
 80054ae:	4602      	mov	r2, r0
 80054b0:	460b      	mov	r3, r1
 80054b2:	4b0d      	ldr	r3, [pc, #52]	@ (80054e8 <UART_SetConfig+0x4e4>)
 80054b4:	fba3 1302 	umull	r1, r3, r3, r2
 80054b8:	095b      	lsrs	r3, r3, #5
 80054ba:	2164      	movs	r1, #100	@ 0x64
 80054bc:	fb01 f303 	mul.w	r3, r1, r3
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	011b      	lsls	r3, r3, #4
 80054c4:	3332      	adds	r3, #50	@ 0x32
 80054c6:	4a08      	ldr	r2, [pc, #32]	@ (80054e8 <UART_SetConfig+0x4e4>)
 80054c8:	fba2 2303 	umull	r2, r3, r2, r3
 80054cc:	095b      	lsrs	r3, r3, #5
 80054ce:	f003 020f 	and.w	r2, r3, #15
 80054d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4422      	add	r2, r4
 80054da:	609a      	str	r2, [r3, #8]
}
 80054dc:	bf00      	nop
 80054de:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80054e2:	46bd      	mov	sp, r7
 80054e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054e8:	51eb851f 	.word	0x51eb851f

080054ec <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80054ec:	b580      	push	{r7, lr}
 80054ee:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80054f0:	4b05      	ldr	r3, [pc, #20]	@ (8005508 <SysTick_Handler+0x1c>)
 80054f2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80054f4:	f002 f85a 	bl	80075ac <xTaskGetSchedulerState>
 80054f8:	4603      	mov	r3, r0
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d001      	beq.n	8005502 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80054fe:	f003 f943 	bl	8008788 <xPortSysTickHandler>
  }
}
 8005502:	bf00      	nop
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	e000e010 	.word	0xe000e010

0800550c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800550c:	b480      	push	{r7}
 800550e:	b085      	sub	sp, #20
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	4a07      	ldr	r2, [pc, #28]	@ (8005538 <vApplicationGetIdleTaskMemory+0x2c>)
 800551c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	4a06      	ldr	r2, [pc, #24]	@ (800553c <vApplicationGetIdleTaskMemory+0x30>)
 8005522:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2280      	movs	r2, #128	@ 0x80
 8005528:	601a      	str	r2, [r3, #0]
}
 800552a:	bf00      	nop
 800552c:	3714      	adds	r7, #20
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr
 8005536:	bf00      	nop
 8005538:	200002a4 	.word	0x200002a4
 800553c:	2000037c 	.word	0x2000037c

08005540 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005540:	b480      	push	{r7}
 8005542:	b085      	sub	sp, #20
 8005544:	af00      	add	r7, sp, #0
 8005546:	60f8      	str	r0, [r7, #12]
 8005548:	60b9      	str	r1, [r7, #8]
 800554a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	4a07      	ldr	r2, [pc, #28]	@ (800556c <vApplicationGetTimerTaskMemory+0x2c>)
 8005550:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	4a06      	ldr	r2, [pc, #24]	@ (8005570 <vApplicationGetTimerTaskMemory+0x30>)
 8005556:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800555e:	601a      	str	r2, [r3, #0]
}
 8005560:	bf00      	nop
 8005562:	3714      	adds	r7, #20
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr
 800556c:	2000057c 	.word	0x2000057c
 8005570:	20000654 	.word	0x20000654

08005574 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f103 0208 	add.w	r2, r3, #8
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800558c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f103 0208 	add.w	r2, r3, #8
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f103 0208 	add.w	r2, r3, #8
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80055a8:	bf00      	nop
 80055aa:	370c      	adds	r7, #12
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr

080055b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80055b4:	b480      	push	{r7}
 80055b6:	b083      	sub	sp, #12
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2200      	movs	r2, #0
 80055c0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80055c2:	bf00      	nop
 80055c4:	370c      	adds	r7, #12
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr

080055ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80055ce:	b480      	push	{r7}
 80055d0:	b085      	sub	sp, #20
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
 80055d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	68fa      	ldr	r2, [r7, #12]
 80055e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	689a      	ldr	r2, [r3, #8]
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	683a      	ldr	r2, [r7, #0]
 80055f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	683a      	ldr	r2, [r7, #0]
 80055f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	1c5a      	adds	r2, r3, #1
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	601a      	str	r2, [r3, #0]
}
 800560a:	bf00      	nop
 800560c:	3714      	adds	r7, #20
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr

08005616 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005616:	b480      	push	{r7}
 8005618:	b085      	sub	sp, #20
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
 800561e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800562c:	d103      	bne.n	8005636 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	691b      	ldr	r3, [r3, #16]
 8005632:	60fb      	str	r3, [r7, #12]
 8005634:	e00c      	b.n	8005650 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	3308      	adds	r3, #8
 800563a:	60fb      	str	r3, [r7, #12]
 800563c:	e002      	b.n	8005644 <vListInsert+0x2e>
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	60fb      	str	r3, [r7, #12]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68ba      	ldr	r2, [r7, #8]
 800564c:	429a      	cmp	r2, r3
 800564e:	d2f6      	bcs.n	800563e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	685a      	ldr	r2, [r3, #4]
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	683a      	ldr	r2, [r7, #0]
 800565e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	68fa      	ldr	r2, [r7, #12]
 8005664:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	683a      	ldr	r2, [r7, #0]
 800566a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	1c5a      	adds	r2, r3, #1
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	601a      	str	r2, [r3, #0]
}
 800567c:	bf00      	nop
 800567e:	3714      	adds	r7, #20
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005688:	b480      	push	{r7}
 800568a:	b085      	sub	sp, #20
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	691b      	ldr	r3, [r3, #16]
 8005694:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	6892      	ldr	r2, [r2, #8]
 800569e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	6852      	ldr	r2, [r2, #4]
 80056a8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d103      	bne.n	80056bc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	689a      	ldr	r2, [r3, #8]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2200      	movs	r2, #0
 80056c0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	1e5a      	subs	r2, r3, #1
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3714      	adds	r7, #20
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d10b      	bne.n	8005708 <xQueueGenericReset+0x2c>
	__asm volatile
 80056f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056f4:	f383 8811 	msr	BASEPRI, r3
 80056f8:	f3bf 8f6f 	isb	sy
 80056fc:	f3bf 8f4f 	dsb	sy
 8005700:	60bb      	str	r3, [r7, #8]
}
 8005702:	bf00      	nop
 8005704:	bf00      	nop
 8005706:	e7fd      	b.n	8005704 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005708:	f002 ffae 	bl	8008668 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005714:	68f9      	ldr	r1, [r7, #12]
 8005716:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005718:	fb01 f303 	mul.w	r3, r1, r3
 800571c:	441a      	add	r2, r3
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2200      	movs	r2, #0
 8005726:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005738:	3b01      	subs	r3, #1
 800573a:	68f9      	ldr	r1, [r7, #12]
 800573c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800573e:	fb01 f303 	mul.w	r3, r1, r3
 8005742:	441a      	add	r2, r3
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	22ff      	movs	r2, #255	@ 0xff
 800574c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	22ff      	movs	r2, #255	@ 0xff
 8005754:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d114      	bne.n	8005788 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d01a      	beq.n	800579c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	3310      	adds	r3, #16
 800576a:	4618      	mov	r0, r3
 800576c:	f001 fc2e 	bl	8006fcc <xTaskRemoveFromEventList>
 8005770:	4603      	mov	r3, r0
 8005772:	2b00      	cmp	r3, #0
 8005774:	d012      	beq.n	800579c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005776:	4b0d      	ldr	r3, [pc, #52]	@ (80057ac <xQueueGenericReset+0xd0>)
 8005778:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800577c:	601a      	str	r2, [r3, #0]
 800577e:	f3bf 8f4f 	dsb	sy
 8005782:	f3bf 8f6f 	isb	sy
 8005786:	e009      	b.n	800579c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	3310      	adds	r3, #16
 800578c:	4618      	mov	r0, r3
 800578e:	f7ff fef1 	bl	8005574 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	3324      	adds	r3, #36	@ 0x24
 8005796:	4618      	mov	r0, r3
 8005798:	f7ff feec 	bl	8005574 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800579c:	f002 ff96 	bl	80086cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80057a0:	2301      	movs	r3, #1
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3710      	adds	r7, #16
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	bf00      	nop
 80057ac:	e000ed04 	.word	0xe000ed04

080057b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b08e      	sub	sp, #56	@ 0x38
 80057b4:	af02      	add	r7, sp, #8
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	60b9      	str	r1, [r7, #8]
 80057ba:	607a      	str	r2, [r7, #4]
 80057bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d10b      	bne.n	80057dc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80057c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057c8:	f383 8811 	msr	BASEPRI, r3
 80057cc:	f3bf 8f6f 	isb	sy
 80057d0:	f3bf 8f4f 	dsb	sy
 80057d4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80057d6:	bf00      	nop
 80057d8:	bf00      	nop
 80057da:	e7fd      	b.n	80057d8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d10b      	bne.n	80057fa <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80057e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057e6:	f383 8811 	msr	BASEPRI, r3
 80057ea:	f3bf 8f6f 	isb	sy
 80057ee:	f3bf 8f4f 	dsb	sy
 80057f2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80057f4:	bf00      	nop
 80057f6:	bf00      	nop
 80057f8:	e7fd      	b.n	80057f6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d002      	beq.n	8005806 <xQueueGenericCreateStatic+0x56>
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d001      	beq.n	800580a <xQueueGenericCreateStatic+0x5a>
 8005806:	2301      	movs	r3, #1
 8005808:	e000      	b.n	800580c <xQueueGenericCreateStatic+0x5c>
 800580a:	2300      	movs	r3, #0
 800580c:	2b00      	cmp	r3, #0
 800580e:	d10b      	bne.n	8005828 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005814:	f383 8811 	msr	BASEPRI, r3
 8005818:	f3bf 8f6f 	isb	sy
 800581c:	f3bf 8f4f 	dsb	sy
 8005820:	623b      	str	r3, [r7, #32]
}
 8005822:	bf00      	nop
 8005824:	bf00      	nop
 8005826:	e7fd      	b.n	8005824 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d102      	bne.n	8005834 <xQueueGenericCreateStatic+0x84>
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d101      	bne.n	8005838 <xQueueGenericCreateStatic+0x88>
 8005834:	2301      	movs	r3, #1
 8005836:	e000      	b.n	800583a <xQueueGenericCreateStatic+0x8a>
 8005838:	2300      	movs	r3, #0
 800583a:	2b00      	cmp	r3, #0
 800583c:	d10b      	bne.n	8005856 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800583e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005842:	f383 8811 	msr	BASEPRI, r3
 8005846:	f3bf 8f6f 	isb	sy
 800584a:	f3bf 8f4f 	dsb	sy
 800584e:	61fb      	str	r3, [r7, #28]
}
 8005850:	bf00      	nop
 8005852:	bf00      	nop
 8005854:	e7fd      	b.n	8005852 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005856:	2350      	movs	r3, #80	@ 0x50
 8005858:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	2b50      	cmp	r3, #80	@ 0x50
 800585e:	d00b      	beq.n	8005878 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005864:	f383 8811 	msr	BASEPRI, r3
 8005868:	f3bf 8f6f 	isb	sy
 800586c:	f3bf 8f4f 	dsb	sy
 8005870:	61bb      	str	r3, [r7, #24]
}
 8005872:	bf00      	nop
 8005874:	bf00      	nop
 8005876:	e7fd      	b.n	8005874 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005878:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800587e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005880:	2b00      	cmp	r3, #0
 8005882:	d00d      	beq.n	80058a0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005886:	2201      	movs	r2, #1
 8005888:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800588c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005892:	9300      	str	r3, [sp, #0]
 8005894:	4613      	mov	r3, r2
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	68b9      	ldr	r1, [r7, #8]
 800589a:	68f8      	ldr	r0, [r7, #12]
 800589c:	f000 f840 	bl	8005920 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80058a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3730      	adds	r7, #48	@ 0x30
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}

080058aa <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80058aa:	b580      	push	{r7, lr}
 80058ac:	b08a      	sub	sp, #40	@ 0x28
 80058ae:	af02      	add	r7, sp, #8
 80058b0:	60f8      	str	r0, [r7, #12]
 80058b2:	60b9      	str	r1, [r7, #8]
 80058b4:	4613      	mov	r3, r2
 80058b6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d10b      	bne.n	80058d6 <xQueueGenericCreate+0x2c>
	__asm volatile
 80058be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058c2:	f383 8811 	msr	BASEPRI, r3
 80058c6:	f3bf 8f6f 	isb	sy
 80058ca:	f3bf 8f4f 	dsb	sy
 80058ce:	613b      	str	r3, [r7, #16]
}
 80058d0:	bf00      	nop
 80058d2:	bf00      	nop
 80058d4:	e7fd      	b.n	80058d2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	68ba      	ldr	r2, [r7, #8]
 80058da:	fb02 f303 	mul.w	r3, r2, r3
 80058de:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	3350      	adds	r3, #80	@ 0x50
 80058e4:	4618      	mov	r0, r3
 80058e6:	f002 ffe1 	bl	80088ac <pvPortMalloc>
 80058ea:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80058ec:	69bb      	ldr	r3, [r7, #24]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d011      	beq.n	8005916 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80058f2:	69bb      	ldr	r3, [r7, #24]
 80058f4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	3350      	adds	r3, #80	@ 0x50
 80058fa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80058fc:	69bb      	ldr	r3, [r7, #24]
 80058fe:	2200      	movs	r2, #0
 8005900:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005904:	79fa      	ldrb	r2, [r7, #7]
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	9300      	str	r3, [sp, #0]
 800590a:	4613      	mov	r3, r2
 800590c:	697a      	ldr	r2, [r7, #20]
 800590e:	68b9      	ldr	r1, [r7, #8]
 8005910:	68f8      	ldr	r0, [r7, #12]
 8005912:	f000 f805 	bl	8005920 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005916:	69bb      	ldr	r3, [r7, #24]
	}
 8005918:	4618      	mov	r0, r3
 800591a:	3720      	adds	r7, #32
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b084      	sub	sp, #16
 8005924:	af00      	add	r7, sp, #0
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	60b9      	str	r1, [r7, #8]
 800592a:	607a      	str	r2, [r7, #4]
 800592c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d103      	bne.n	800593c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005934:	69bb      	ldr	r3, [r7, #24]
 8005936:	69ba      	ldr	r2, [r7, #24]
 8005938:	601a      	str	r2, [r3, #0]
 800593a:	e002      	b.n	8005942 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800593c:	69bb      	ldr	r3, [r7, #24]
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005942:	69bb      	ldr	r3, [r7, #24]
 8005944:	68fa      	ldr	r2, [r7, #12]
 8005946:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005948:	69bb      	ldr	r3, [r7, #24]
 800594a:	68ba      	ldr	r2, [r7, #8]
 800594c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800594e:	2101      	movs	r1, #1
 8005950:	69b8      	ldr	r0, [r7, #24]
 8005952:	f7ff fec3 	bl	80056dc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005956:	69bb      	ldr	r3, [r7, #24]
 8005958:	78fa      	ldrb	r2, [r7, #3]
 800595a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800595e:	bf00      	nop
 8005960:	3710      	adds	r7, #16
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
	...

08005968 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b08e      	sub	sp, #56	@ 0x38
 800596c:	af00      	add	r7, sp, #0
 800596e:	60f8      	str	r0, [r7, #12]
 8005970:	60b9      	str	r1, [r7, #8]
 8005972:	607a      	str	r2, [r7, #4]
 8005974:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005976:	2300      	movs	r3, #0
 8005978:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800597e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005980:	2b00      	cmp	r3, #0
 8005982:	d10b      	bne.n	800599c <xQueueGenericSend+0x34>
	__asm volatile
 8005984:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005988:	f383 8811 	msr	BASEPRI, r3
 800598c:	f3bf 8f6f 	isb	sy
 8005990:	f3bf 8f4f 	dsb	sy
 8005994:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005996:	bf00      	nop
 8005998:	bf00      	nop
 800599a:	e7fd      	b.n	8005998 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d103      	bne.n	80059aa <xQueueGenericSend+0x42>
 80059a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d101      	bne.n	80059ae <xQueueGenericSend+0x46>
 80059aa:	2301      	movs	r3, #1
 80059ac:	e000      	b.n	80059b0 <xQueueGenericSend+0x48>
 80059ae:	2300      	movs	r3, #0
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d10b      	bne.n	80059cc <xQueueGenericSend+0x64>
	__asm volatile
 80059b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059b8:	f383 8811 	msr	BASEPRI, r3
 80059bc:	f3bf 8f6f 	isb	sy
 80059c0:	f3bf 8f4f 	dsb	sy
 80059c4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80059c6:	bf00      	nop
 80059c8:	bf00      	nop
 80059ca:	e7fd      	b.n	80059c8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	2b02      	cmp	r3, #2
 80059d0:	d103      	bne.n	80059da <xQueueGenericSend+0x72>
 80059d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d101      	bne.n	80059de <xQueueGenericSend+0x76>
 80059da:	2301      	movs	r3, #1
 80059dc:	e000      	b.n	80059e0 <xQueueGenericSend+0x78>
 80059de:	2300      	movs	r3, #0
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d10b      	bne.n	80059fc <xQueueGenericSend+0x94>
	__asm volatile
 80059e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059e8:	f383 8811 	msr	BASEPRI, r3
 80059ec:	f3bf 8f6f 	isb	sy
 80059f0:	f3bf 8f4f 	dsb	sy
 80059f4:	623b      	str	r3, [r7, #32]
}
 80059f6:	bf00      	nop
 80059f8:	bf00      	nop
 80059fa:	e7fd      	b.n	80059f8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80059fc:	f001 fdd6 	bl	80075ac <xTaskGetSchedulerState>
 8005a00:	4603      	mov	r3, r0
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d102      	bne.n	8005a0c <xQueueGenericSend+0xa4>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d101      	bne.n	8005a10 <xQueueGenericSend+0xa8>
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e000      	b.n	8005a12 <xQueueGenericSend+0xaa>
 8005a10:	2300      	movs	r3, #0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d10b      	bne.n	8005a2e <xQueueGenericSend+0xc6>
	__asm volatile
 8005a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a1a:	f383 8811 	msr	BASEPRI, r3
 8005a1e:	f3bf 8f6f 	isb	sy
 8005a22:	f3bf 8f4f 	dsb	sy
 8005a26:	61fb      	str	r3, [r7, #28]
}
 8005a28:	bf00      	nop
 8005a2a:	bf00      	nop
 8005a2c:	e7fd      	b.n	8005a2a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a2e:	f002 fe1b 	bl	8008668 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d302      	bcc.n	8005a44 <xQueueGenericSend+0xdc>
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	2b02      	cmp	r3, #2
 8005a42:	d129      	bne.n	8005a98 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005a44:	683a      	ldr	r2, [r7, #0]
 8005a46:	68b9      	ldr	r1, [r7, #8]
 8005a48:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005a4a:	f000 fbc7 	bl	80061dc <prvCopyDataToQueue>
 8005a4e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d010      	beq.n	8005a7a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a5a:	3324      	adds	r3, #36	@ 0x24
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f001 fab5 	bl	8006fcc <xTaskRemoveFromEventList>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d013      	beq.n	8005a90 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005a68:	4b3f      	ldr	r3, [pc, #252]	@ (8005b68 <xQueueGenericSend+0x200>)
 8005a6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a6e:	601a      	str	r2, [r3, #0]
 8005a70:	f3bf 8f4f 	dsb	sy
 8005a74:	f3bf 8f6f 	isb	sy
 8005a78:	e00a      	b.n	8005a90 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005a7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d007      	beq.n	8005a90 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005a80:	4b39      	ldr	r3, [pc, #228]	@ (8005b68 <xQueueGenericSend+0x200>)
 8005a82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a86:	601a      	str	r2, [r3, #0]
 8005a88:	f3bf 8f4f 	dsb	sy
 8005a8c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005a90:	f002 fe1c 	bl	80086cc <vPortExitCritical>
				return pdPASS;
 8005a94:	2301      	movs	r3, #1
 8005a96:	e063      	b.n	8005b60 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d103      	bne.n	8005aa6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a9e:	f002 fe15 	bl	80086cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	e05c      	b.n	8005b60 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005aa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d106      	bne.n	8005aba <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005aac:	f107 0314 	add.w	r3, r7, #20
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f001 faef 	bl	8007094 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005aba:	f002 fe07 	bl	80086cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005abe:	f000 ffab 	bl	8006a18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005ac2:	f002 fdd1 	bl	8008668 <vPortEnterCritical>
 8005ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ac8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005acc:	b25b      	sxtb	r3, r3
 8005ace:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005ad2:	d103      	bne.n	8005adc <xQueueGenericSend+0x174>
 8005ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ade:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005ae2:	b25b      	sxtb	r3, r3
 8005ae4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005ae8:	d103      	bne.n	8005af2 <xQueueGenericSend+0x18a>
 8005aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aec:	2200      	movs	r2, #0
 8005aee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005af2:	f002 fdeb 	bl	80086cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005af6:	1d3a      	adds	r2, r7, #4
 8005af8:	f107 0314 	add.w	r3, r7, #20
 8005afc:	4611      	mov	r1, r2
 8005afe:	4618      	mov	r0, r3
 8005b00:	f001 fade 	bl	80070c0 <xTaskCheckForTimeOut>
 8005b04:	4603      	mov	r3, r0
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d124      	bne.n	8005b54 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005b0a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005b0c:	f000 fc5e 	bl	80063cc <prvIsQueueFull>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d018      	beq.n	8005b48 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b18:	3310      	adds	r3, #16
 8005b1a:	687a      	ldr	r2, [r7, #4]
 8005b1c:	4611      	mov	r1, r2
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f001 fa02 	bl	8006f28 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005b24:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005b26:	f000 fbe9 	bl	80062fc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005b2a:	f000 ff83 	bl	8006a34 <xTaskResumeAll>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	f47f af7c 	bne.w	8005a2e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005b36:	4b0c      	ldr	r3, [pc, #48]	@ (8005b68 <xQueueGenericSend+0x200>)
 8005b38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b3c:	601a      	str	r2, [r3, #0]
 8005b3e:	f3bf 8f4f 	dsb	sy
 8005b42:	f3bf 8f6f 	isb	sy
 8005b46:	e772      	b.n	8005a2e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005b48:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005b4a:	f000 fbd7 	bl	80062fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b4e:	f000 ff71 	bl	8006a34 <xTaskResumeAll>
 8005b52:	e76c      	b.n	8005a2e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005b54:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005b56:	f000 fbd1 	bl	80062fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b5a:	f000 ff6b 	bl	8006a34 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005b5e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3738      	adds	r7, #56	@ 0x38
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}
 8005b68:	e000ed04 	.word	0xe000ed04

08005b6c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b090      	sub	sp, #64	@ 0x40
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	60b9      	str	r1, [r7, #8]
 8005b76:	607a      	str	r2, [r7, #4]
 8005b78:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005b7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d10b      	bne.n	8005b9c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005b84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b88:	f383 8811 	msr	BASEPRI, r3
 8005b8c:	f3bf 8f6f 	isb	sy
 8005b90:	f3bf 8f4f 	dsb	sy
 8005b94:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005b96:	bf00      	nop
 8005b98:	bf00      	nop
 8005b9a:	e7fd      	b.n	8005b98 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d103      	bne.n	8005baa <xQueueGenericSendFromISR+0x3e>
 8005ba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d101      	bne.n	8005bae <xQueueGenericSendFromISR+0x42>
 8005baa:	2301      	movs	r3, #1
 8005bac:	e000      	b.n	8005bb0 <xQueueGenericSendFromISR+0x44>
 8005bae:	2300      	movs	r3, #0
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d10b      	bne.n	8005bcc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005bb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bb8:	f383 8811 	msr	BASEPRI, r3
 8005bbc:	f3bf 8f6f 	isb	sy
 8005bc0:	f3bf 8f4f 	dsb	sy
 8005bc4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005bc6:	bf00      	nop
 8005bc8:	bf00      	nop
 8005bca:	e7fd      	b.n	8005bc8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	2b02      	cmp	r3, #2
 8005bd0:	d103      	bne.n	8005bda <xQueueGenericSendFromISR+0x6e>
 8005bd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d101      	bne.n	8005bde <xQueueGenericSendFromISR+0x72>
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e000      	b.n	8005be0 <xQueueGenericSendFromISR+0x74>
 8005bde:	2300      	movs	r3, #0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d10b      	bne.n	8005bfc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005be4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005be8:	f383 8811 	msr	BASEPRI, r3
 8005bec:	f3bf 8f6f 	isb	sy
 8005bf0:	f3bf 8f4f 	dsb	sy
 8005bf4:	623b      	str	r3, [r7, #32]
}
 8005bf6:	bf00      	nop
 8005bf8:	bf00      	nop
 8005bfa:	e7fd      	b.n	8005bf8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005bfc:	f002 fe14 	bl	8008828 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005c00:	f3ef 8211 	mrs	r2, BASEPRI
 8005c04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c08:	f383 8811 	msr	BASEPRI, r3
 8005c0c:	f3bf 8f6f 	isb	sy
 8005c10:	f3bf 8f4f 	dsb	sy
 8005c14:	61fa      	str	r2, [r7, #28]
 8005c16:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005c18:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005c1a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005c1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c1e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d302      	bcc.n	8005c2e <xQueueGenericSendFromISR+0xc2>
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	2b02      	cmp	r3, #2
 8005c2c:	d12f      	bne.n	8005c8e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005c2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c30:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005c34:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005c3e:	683a      	ldr	r2, [r7, #0]
 8005c40:	68b9      	ldr	r1, [r7, #8]
 8005c42:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005c44:	f000 faca 	bl	80061dc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005c48:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005c4c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c50:	d112      	bne.n	8005c78 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d016      	beq.n	8005c88 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c5c:	3324      	adds	r3, #36	@ 0x24
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f001 f9b4 	bl	8006fcc <xTaskRemoveFromEventList>
 8005c64:	4603      	mov	r3, r0
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d00e      	beq.n	8005c88 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d00b      	beq.n	8005c88 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2201      	movs	r2, #1
 8005c74:	601a      	str	r2, [r3, #0]
 8005c76:	e007      	b.n	8005c88 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005c78:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005c7c:	3301      	adds	r3, #1
 8005c7e:	b2db      	uxtb	r3, r3
 8005c80:	b25a      	sxtb	r2, r3
 8005c82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005c8c:	e001      	b.n	8005c92 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c94:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005c9c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005c9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3740      	adds	r7, #64	@ 0x40
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}

08005ca8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b08e      	sub	sp, #56	@ 0x38
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d10b      	bne.n	8005cd4 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8005cbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cc0:	f383 8811 	msr	BASEPRI, r3
 8005cc4:	f3bf 8f6f 	isb	sy
 8005cc8:	f3bf 8f4f 	dsb	sy
 8005ccc:	623b      	str	r3, [r7, #32]
}
 8005cce:	bf00      	nop
 8005cd0:	bf00      	nop
 8005cd2:	e7fd      	b.n	8005cd0 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d00b      	beq.n	8005cf4 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8005cdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ce0:	f383 8811 	msr	BASEPRI, r3
 8005ce4:	f3bf 8f6f 	isb	sy
 8005ce8:	f3bf 8f4f 	dsb	sy
 8005cec:	61fb      	str	r3, [r7, #28]
}
 8005cee:	bf00      	nop
 8005cf0:	bf00      	nop
 8005cf2:	e7fd      	b.n	8005cf0 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005cf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d103      	bne.n	8005d04 <xQueueGiveFromISR+0x5c>
 8005cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d101      	bne.n	8005d08 <xQueueGiveFromISR+0x60>
 8005d04:	2301      	movs	r3, #1
 8005d06:	e000      	b.n	8005d0a <xQueueGiveFromISR+0x62>
 8005d08:	2300      	movs	r3, #0
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d10b      	bne.n	8005d26 <xQueueGiveFromISR+0x7e>
	__asm volatile
 8005d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d12:	f383 8811 	msr	BASEPRI, r3
 8005d16:	f3bf 8f6f 	isb	sy
 8005d1a:	f3bf 8f4f 	dsb	sy
 8005d1e:	61bb      	str	r3, [r7, #24]
}
 8005d20:	bf00      	nop
 8005d22:	bf00      	nop
 8005d24:	e7fd      	b.n	8005d22 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005d26:	f002 fd7f 	bl	8008828 <vPortValidateInterruptPriority>
	__asm volatile
 8005d2a:	f3ef 8211 	mrs	r2, BASEPRI
 8005d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d32:	f383 8811 	msr	BASEPRI, r3
 8005d36:	f3bf 8f6f 	isb	sy
 8005d3a:	f3bf 8f4f 	dsb	sy
 8005d3e:	617a      	str	r2, [r7, #20]
 8005d40:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005d42:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005d44:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d4a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d50:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d22b      	bcs.n	8005dae <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d58:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005d5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d62:	1c5a      	adds	r2, r3, #1
 8005d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d66:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005d68:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005d6c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005d70:	d112      	bne.n	8005d98 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d016      	beq.n	8005da8 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d7c:	3324      	adds	r3, #36	@ 0x24
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f001 f924 	bl	8006fcc <xTaskRemoveFromEventList>
 8005d84:	4603      	mov	r3, r0
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d00e      	beq.n	8005da8 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d00b      	beq.n	8005da8 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	2201      	movs	r2, #1
 8005d94:	601a      	str	r2, [r3, #0]
 8005d96:	e007      	b.n	8005da8 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005d98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005d9c:	3301      	adds	r3, #1
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	b25a      	sxtb	r2, r3
 8005da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005da4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005da8:	2301      	movs	r3, #1
 8005daa:	637b      	str	r3, [r7, #52]	@ 0x34
 8005dac:	e001      	b.n	8005db2 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005dae:	2300      	movs	r3, #0
 8005db0:	637b      	str	r3, [r7, #52]	@ 0x34
 8005db2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005db4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f383 8811 	msr	BASEPRI, r3
}
 8005dbc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005dbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3738      	adds	r7, #56	@ 0x38
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}

08005dc8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b08c      	sub	sp, #48	@ 0x30
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	60f8      	str	r0, [r7, #12]
 8005dd0:	60b9      	str	r1, [r7, #8]
 8005dd2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005ddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d10b      	bne.n	8005dfa <xQueueReceive+0x32>
	__asm volatile
 8005de2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005de6:	f383 8811 	msr	BASEPRI, r3
 8005dea:	f3bf 8f6f 	isb	sy
 8005dee:	f3bf 8f4f 	dsb	sy
 8005df2:	623b      	str	r3, [r7, #32]
}
 8005df4:	bf00      	nop
 8005df6:	bf00      	nop
 8005df8:	e7fd      	b.n	8005df6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d103      	bne.n	8005e08 <xQueueReceive+0x40>
 8005e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d101      	bne.n	8005e0c <xQueueReceive+0x44>
 8005e08:	2301      	movs	r3, #1
 8005e0a:	e000      	b.n	8005e0e <xQueueReceive+0x46>
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d10b      	bne.n	8005e2a <xQueueReceive+0x62>
	__asm volatile
 8005e12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e16:	f383 8811 	msr	BASEPRI, r3
 8005e1a:	f3bf 8f6f 	isb	sy
 8005e1e:	f3bf 8f4f 	dsb	sy
 8005e22:	61fb      	str	r3, [r7, #28]
}
 8005e24:	bf00      	nop
 8005e26:	bf00      	nop
 8005e28:	e7fd      	b.n	8005e26 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005e2a:	f001 fbbf 	bl	80075ac <xTaskGetSchedulerState>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d102      	bne.n	8005e3a <xQueueReceive+0x72>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d101      	bne.n	8005e3e <xQueueReceive+0x76>
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e000      	b.n	8005e40 <xQueueReceive+0x78>
 8005e3e:	2300      	movs	r3, #0
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d10b      	bne.n	8005e5c <xQueueReceive+0x94>
	__asm volatile
 8005e44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e48:	f383 8811 	msr	BASEPRI, r3
 8005e4c:	f3bf 8f6f 	isb	sy
 8005e50:	f3bf 8f4f 	dsb	sy
 8005e54:	61bb      	str	r3, [r7, #24]
}
 8005e56:	bf00      	nop
 8005e58:	bf00      	nop
 8005e5a:	e7fd      	b.n	8005e58 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005e5c:	f002 fc04 	bl	8008668 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e64:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d01f      	beq.n	8005eac <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005e6c:	68b9      	ldr	r1, [r7, #8]
 8005e6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e70:	f000 fa1e 	bl	80062b0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e76:	1e5a      	subs	r2, r3, #1
 8005e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e7a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e7e:	691b      	ldr	r3, [r3, #16]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d00f      	beq.n	8005ea4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e86:	3310      	adds	r3, #16
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f001 f89f 	bl	8006fcc <xTaskRemoveFromEventList>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d007      	beq.n	8005ea4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005e94:	4b3c      	ldr	r3, [pc, #240]	@ (8005f88 <xQueueReceive+0x1c0>)
 8005e96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e9a:	601a      	str	r2, [r3, #0]
 8005e9c:	f3bf 8f4f 	dsb	sy
 8005ea0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005ea4:	f002 fc12 	bl	80086cc <vPortExitCritical>
				return pdPASS;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	e069      	b.n	8005f80 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d103      	bne.n	8005eba <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005eb2:	f002 fc0b 	bl	80086cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	e062      	b.n	8005f80 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005eba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d106      	bne.n	8005ece <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005ec0:	f107 0310 	add.w	r3, r7, #16
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f001 f8e5 	bl	8007094 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005ece:	f002 fbfd 	bl	80086cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005ed2:	f000 fda1 	bl	8006a18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005ed6:	f002 fbc7 	bl	8008668 <vPortEnterCritical>
 8005eda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005edc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005ee0:	b25b      	sxtb	r3, r3
 8005ee2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005ee6:	d103      	bne.n	8005ef0 <xQueueReceive+0x128>
 8005ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eea:	2200      	movs	r2, #0
 8005eec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ef2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005ef6:	b25b      	sxtb	r3, r3
 8005ef8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005efc:	d103      	bne.n	8005f06 <xQueueReceive+0x13e>
 8005efe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f00:	2200      	movs	r2, #0
 8005f02:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005f06:	f002 fbe1 	bl	80086cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005f0a:	1d3a      	adds	r2, r7, #4
 8005f0c:	f107 0310 	add.w	r3, r7, #16
 8005f10:	4611      	mov	r1, r2
 8005f12:	4618      	mov	r0, r3
 8005f14:	f001 f8d4 	bl	80070c0 <xTaskCheckForTimeOut>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d123      	bne.n	8005f66 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f20:	f000 fa3e 	bl	80063a0 <prvIsQueueEmpty>
 8005f24:	4603      	mov	r3, r0
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d017      	beq.n	8005f5a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005f2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f2c:	3324      	adds	r3, #36	@ 0x24
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	4611      	mov	r1, r2
 8005f32:	4618      	mov	r0, r3
 8005f34:	f000 fff8 	bl	8006f28 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005f38:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f3a:	f000 f9df 	bl	80062fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005f3e:	f000 fd79 	bl	8006a34 <xTaskResumeAll>
 8005f42:	4603      	mov	r3, r0
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d189      	bne.n	8005e5c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005f48:	4b0f      	ldr	r3, [pc, #60]	@ (8005f88 <xQueueReceive+0x1c0>)
 8005f4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f4e:	601a      	str	r2, [r3, #0]
 8005f50:	f3bf 8f4f 	dsb	sy
 8005f54:	f3bf 8f6f 	isb	sy
 8005f58:	e780      	b.n	8005e5c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005f5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f5c:	f000 f9ce 	bl	80062fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005f60:	f000 fd68 	bl	8006a34 <xTaskResumeAll>
 8005f64:	e77a      	b.n	8005e5c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005f66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f68:	f000 f9c8 	bl	80062fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005f6c:	f000 fd62 	bl	8006a34 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f70:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f72:	f000 fa15 	bl	80063a0 <prvIsQueueEmpty>
 8005f76:	4603      	mov	r3, r0
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	f43f af6f 	beq.w	8005e5c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005f7e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3730      	adds	r7, #48	@ 0x30
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}
 8005f88:	e000ed04 	.word	0xe000ed04

08005f8c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b08e      	sub	sp, #56	@ 0x38
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005f96:	2300      	movs	r3, #0
 8005f98:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005fa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d10b      	bne.n	8005fc0 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8005fa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fac:	f383 8811 	msr	BASEPRI, r3
 8005fb0:	f3bf 8f6f 	isb	sy
 8005fb4:	f3bf 8f4f 	dsb	sy
 8005fb8:	623b      	str	r3, [r7, #32]
}
 8005fba:	bf00      	nop
 8005fbc:	bf00      	nop
 8005fbe:	e7fd      	b.n	8005fbc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005fc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d00b      	beq.n	8005fe0 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8005fc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fcc:	f383 8811 	msr	BASEPRI, r3
 8005fd0:	f3bf 8f6f 	isb	sy
 8005fd4:	f3bf 8f4f 	dsb	sy
 8005fd8:	61fb      	str	r3, [r7, #28]
}
 8005fda:	bf00      	nop
 8005fdc:	bf00      	nop
 8005fde:	e7fd      	b.n	8005fdc <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005fe0:	f001 fae4 	bl	80075ac <xTaskGetSchedulerState>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d102      	bne.n	8005ff0 <xQueueSemaphoreTake+0x64>
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d101      	bne.n	8005ff4 <xQueueSemaphoreTake+0x68>
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	e000      	b.n	8005ff6 <xQueueSemaphoreTake+0x6a>
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d10b      	bne.n	8006012 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8005ffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ffe:	f383 8811 	msr	BASEPRI, r3
 8006002:	f3bf 8f6f 	isb	sy
 8006006:	f3bf 8f4f 	dsb	sy
 800600a:	61bb      	str	r3, [r7, #24]
}
 800600c:	bf00      	nop
 800600e:	bf00      	nop
 8006010:	e7fd      	b.n	800600e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006012:	f002 fb29 	bl	8008668 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006018:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800601a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800601c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800601e:	2b00      	cmp	r3, #0
 8006020:	d024      	beq.n	800606c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006024:	1e5a      	subs	r2, r3, #1
 8006026:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006028:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800602a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d104      	bne.n	800603c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006032:	f001 fc35 	bl	80078a0 <pvTaskIncrementMutexHeldCount>
 8006036:	4602      	mov	r2, r0
 8006038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800603a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800603c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800603e:	691b      	ldr	r3, [r3, #16]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d00f      	beq.n	8006064 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006046:	3310      	adds	r3, #16
 8006048:	4618      	mov	r0, r3
 800604a:	f000 ffbf 	bl	8006fcc <xTaskRemoveFromEventList>
 800604e:	4603      	mov	r3, r0
 8006050:	2b00      	cmp	r3, #0
 8006052:	d007      	beq.n	8006064 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006054:	4b54      	ldr	r3, [pc, #336]	@ (80061a8 <xQueueSemaphoreTake+0x21c>)
 8006056:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800605a:	601a      	str	r2, [r3, #0]
 800605c:	f3bf 8f4f 	dsb	sy
 8006060:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006064:	f002 fb32 	bl	80086cc <vPortExitCritical>
				return pdPASS;
 8006068:	2301      	movs	r3, #1
 800606a:	e098      	b.n	800619e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d112      	bne.n	8006098 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006074:	2b00      	cmp	r3, #0
 8006076:	d00b      	beq.n	8006090 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8006078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800607c:	f383 8811 	msr	BASEPRI, r3
 8006080:	f3bf 8f6f 	isb	sy
 8006084:	f3bf 8f4f 	dsb	sy
 8006088:	617b      	str	r3, [r7, #20]
}
 800608a:	bf00      	nop
 800608c:	bf00      	nop
 800608e:	e7fd      	b.n	800608c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006090:	f002 fb1c 	bl	80086cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006094:	2300      	movs	r3, #0
 8006096:	e082      	b.n	800619e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006098:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800609a:	2b00      	cmp	r3, #0
 800609c:	d106      	bne.n	80060ac <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800609e:	f107 030c 	add.w	r3, r7, #12
 80060a2:	4618      	mov	r0, r3
 80060a4:	f000 fff6 	bl	8007094 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80060a8:	2301      	movs	r3, #1
 80060aa:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80060ac:	f002 fb0e 	bl	80086cc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80060b0:	f000 fcb2 	bl	8006a18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80060b4:	f002 fad8 	bl	8008668 <vPortEnterCritical>
 80060b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060ba:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80060be:	b25b      	sxtb	r3, r3
 80060c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80060c4:	d103      	bne.n	80060ce <xQueueSemaphoreTake+0x142>
 80060c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060c8:	2200      	movs	r2, #0
 80060ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80060ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80060d4:	b25b      	sxtb	r3, r3
 80060d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80060da:	d103      	bne.n	80060e4 <xQueueSemaphoreTake+0x158>
 80060dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060de:	2200      	movs	r2, #0
 80060e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80060e4:	f002 faf2 	bl	80086cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80060e8:	463a      	mov	r2, r7
 80060ea:	f107 030c 	add.w	r3, r7, #12
 80060ee:	4611      	mov	r1, r2
 80060f0:	4618      	mov	r0, r3
 80060f2:	f000 ffe5 	bl	80070c0 <xTaskCheckForTimeOut>
 80060f6:	4603      	mov	r3, r0
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d132      	bne.n	8006162 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80060fc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80060fe:	f000 f94f 	bl	80063a0 <prvIsQueueEmpty>
 8006102:	4603      	mov	r3, r0
 8006104:	2b00      	cmp	r3, #0
 8006106:	d026      	beq.n	8006156 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d109      	bne.n	8006124 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8006110:	f002 faaa 	bl	8008668 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006114:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	4618      	mov	r0, r3
 800611a:	f001 fa65 	bl	80075e8 <xTaskPriorityInherit>
 800611e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8006120:	f002 fad4 	bl	80086cc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006126:	3324      	adds	r3, #36	@ 0x24
 8006128:	683a      	ldr	r2, [r7, #0]
 800612a:	4611      	mov	r1, r2
 800612c:	4618      	mov	r0, r3
 800612e:	f000 fefb 	bl	8006f28 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006132:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006134:	f000 f8e2 	bl	80062fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006138:	f000 fc7c 	bl	8006a34 <xTaskResumeAll>
 800613c:	4603      	mov	r3, r0
 800613e:	2b00      	cmp	r3, #0
 8006140:	f47f af67 	bne.w	8006012 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8006144:	4b18      	ldr	r3, [pc, #96]	@ (80061a8 <xQueueSemaphoreTake+0x21c>)
 8006146:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800614a:	601a      	str	r2, [r3, #0]
 800614c:	f3bf 8f4f 	dsb	sy
 8006150:	f3bf 8f6f 	isb	sy
 8006154:	e75d      	b.n	8006012 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006156:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006158:	f000 f8d0 	bl	80062fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800615c:	f000 fc6a 	bl	8006a34 <xTaskResumeAll>
 8006160:	e757      	b.n	8006012 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006162:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006164:	f000 f8ca 	bl	80062fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006168:	f000 fc64 	bl	8006a34 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800616c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800616e:	f000 f917 	bl	80063a0 <prvIsQueueEmpty>
 8006172:	4603      	mov	r3, r0
 8006174:	2b00      	cmp	r3, #0
 8006176:	f43f af4c 	beq.w	8006012 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800617a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800617c:	2b00      	cmp	r3, #0
 800617e:	d00d      	beq.n	800619c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8006180:	f002 fa72 	bl	8008668 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006184:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006186:	f000 f811 	bl	80061ac <prvGetDisinheritPriorityAfterTimeout>
 800618a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800618c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006192:	4618      	mov	r0, r3
 8006194:	f001 fb00 	bl	8007798 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006198:	f002 fa98 	bl	80086cc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800619c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3738      	adds	r7, #56	@ 0x38
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	bf00      	nop
 80061a8:	e000ed04 	.word	0xe000ed04

080061ac <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80061ac:	b480      	push	{r7}
 80061ae:	b085      	sub	sp, #20
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d006      	beq.n	80061ca <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80061c6:	60fb      	str	r3, [r7, #12]
 80061c8:	e001      	b.n	80061ce <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80061ca:	2300      	movs	r3, #0
 80061cc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80061ce:	68fb      	ldr	r3, [r7, #12]
	}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3714      	adds	r7, #20
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr

080061dc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b086      	sub	sp, #24
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	60f8      	str	r0, [r7, #12]
 80061e4:	60b9      	str	r1, [r7, #8]
 80061e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80061e8:	2300      	movs	r3, #0
 80061ea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061f0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d10d      	bne.n	8006216 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d14d      	bne.n	800629e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	4618      	mov	r0, r3
 8006208:	f001 fa56 	bl	80076b8 <xTaskPriorityDisinherit>
 800620c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2200      	movs	r2, #0
 8006212:	609a      	str	r2, [r3, #8]
 8006214:	e043      	b.n	800629e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d119      	bne.n	8006250 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6858      	ldr	r0, [r3, #4]
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006224:	461a      	mov	r2, r3
 8006226:	68b9      	ldr	r1, [r7, #8]
 8006228:	f002 ff76 	bl	8009118 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	685a      	ldr	r2, [r3, #4]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006234:	441a      	add	r2, r3
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	685a      	ldr	r2, [r3, #4]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	429a      	cmp	r2, r3
 8006244:	d32b      	bcc.n	800629e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	605a      	str	r2, [r3, #4]
 800624e:	e026      	b.n	800629e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	68d8      	ldr	r0, [r3, #12]
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006258:	461a      	mov	r2, r3
 800625a:	68b9      	ldr	r1, [r7, #8]
 800625c:	f002 ff5c 	bl	8009118 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	68da      	ldr	r2, [r3, #12]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006268:	425b      	negs	r3, r3
 800626a:	441a      	add	r2, r3
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	68da      	ldr	r2, [r3, #12]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	429a      	cmp	r2, r3
 800627a:	d207      	bcs.n	800628c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	689a      	ldr	r2, [r3, #8]
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006284:	425b      	negs	r3, r3
 8006286:	441a      	add	r2, r3
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2b02      	cmp	r3, #2
 8006290:	d105      	bne.n	800629e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d002      	beq.n	800629e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	3b01      	subs	r3, #1
 800629c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	1c5a      	adds	r2, r3, #1
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80062a6:	697b      	ldr	r3, [r7, #20]
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3718      	adds	r7, #24
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}

080062b0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b082      	sub	sp, #8
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d018      	beq.n	80062f4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	68da      	ldr	r2, [r3, #12]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062ca:	441a      	add	r2, r3
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	68da      	ldr	r2, [r3, #12]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	429a      	cmp	r2, r3
 80062da:	d303      	bcc.n	80062e4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	68d9      	ldr	r1, [r3, #12]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062ec:	461a      	mov	r2, r3
 80062ee:	6838      	ldr	r0, [r7, #0]
 80062f0:	f002 ff12 	bl	8009118 <memcpy>
	}
}
 80062f4:	bf00      	nop
 80062f6:	3708      	adds	r7, #8
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}

080062fc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b084      	sub	sp, #16
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006304:	f002 f9b0 	bl	8008668 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800630e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006310:	e011      	b.n	8006336 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006316:	2b00      	cmp	r3, #0
 8006318:	d012      	beq.n	8006340 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	3324      	adds	r3, #36	@ 0x24
 800631e:	4618      	mov	r0, r3
 8006320:	f000 fe54 	bl	8006fcc <xTaskRemoveFromEventList>
 8006324:	4603      	mov	r3, r0
 8006326:	2b00      	cmp	r3, #0
 8006328:	d001      	beq.n	800632e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800632a:	f000 ff2d 	bl	8007188 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800632e:	7bfb      	ldrb	r3, [r7, #15]
 8006330:	3b01      	subs	r3, #1
 8006332:	b2db      	uxtb	r3, r3
 8006334:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006336:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800633a:	2b00      	cmp	r3, #0
 800633c:	dce9      	bgt.n	8006312 <prvUnlockQueue+0x16>
 800633e:	e000      	b.n	8006342 <prvUnlockQueue+0x46>
					break;
 8006340:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	22ff      	movs	r2, #255	@ 0xff
 8006346:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800634a:	f002 f9bf 	bl	80086cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800634e:	f002 f98b 	bl	8008668 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006358:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800635a:	e011      	b.n	8006380 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	691b      	ldr	r3, [r3, #16]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d012      	beq.n	800638a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	3310      	adds	r3, #16
 8006368:	4618      	mov	r0, r3
 800636a:	f000 fe2f 	bl	8006fcc <xTaskRemoveFromEventList>
 800636e:	4603      	mov	r3, r0
 8006370:	2b00      	cmp	r3, #0
 8006372:	d001      	beq.n	8006378 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006374:	f000 ff08 	bl	8007188 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006378:	7bbb      	ldrb	r3, [r7, #14]
 800637a:	3b01      	subs	r3, #1
 800637c:	b2db      	uxtb	r3, r3
 800637e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006380:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006384:	2b00      	cmp	r3, #0
 8006386:	dce9      	bgt.n	800635c <prvUnlockQueue+0x60>
 8006388:	e000      	b.n	800638c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800638a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	22ff      	movs	r2, #255	@ 0xff
 8006390:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006394:	f002 f99a 	bl	80086cc <vPortExitCritical>
}
 8006398:	bf00      	nop
 800639a:	3710      	adds	r7, #16
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}

080063a0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b084      	sub	sp, #16
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80063a8:	f002 f95e 	bl	8008668 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d102      	bne.n	80063ba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80063b4:	2301      	movs	r3, #1
 80063b6:	60fb      	str	r3, [r7, #12]
 80063b8:	e001      	b.n	80063be <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80063ba:	2300      	movs	r3, #0
 80063bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80063be:	f002 f985 	bl	80086cc <vPortExitCritical>

	return xReturn;
 80063c2:	68fb      	ldr	r3, [r7, #12]
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3710      	adds	r7, #16
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b084      	sub	sp, #16
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80063d4:	f002 f948 	bl	8008668 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d102      	bne.n	80063ea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80063e4:	2301      	movs	r3, #1
 80063e6:	60fb      	str	r3, [r7, #12]
 80063e8:	e001      	b.n	80063ee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80063ea:	2300      	movs	r3, #0
 80063ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80063ee:	f002 f96d 	bl	80086cc <vPortExitCritical>

	return xReturn;
 80063f2:	68fb      	ldr	r3, [r7, #12]
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3710      	adds	r7, #16
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}

080063fc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80063fc:	b480      	push	{r7}
 80063fe:	b085      	sub	sp, #20
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006406:	2300      	movs	r3, #0
 8006408:	60fb      	str	r3, [r7, #12]
 800640a:	e014      	b.n	8006436 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800640c:	4a0f      	ldr	r2, [pc, #60]	@ (800644c <vQueueAddToRegistry+0x50>)
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d10b      	bne.n	8006430 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006418:	490c      	ldr	r1, [pc, #48]	@ (800644c <vQueueAddToRegistry+0x50>)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	683a      	ldr	r2, [r7, #0]
 800641e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006422:	4a0a      	ldr	r2, [pc, #40]	@ (800644c <vQueueAddToRegistry+0x50>)
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	00db      	lsls	r3, r3, #3
 8006428:	4413      	add	r3, r2
 800642a:	687a      	ldr	r2, [r7, #4]
 800642c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800642e:	e006      	b.n	800643e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	3301      	adds	r3, #1
 8006434:	60fb      	str	r3, [r7, #12]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2b07      	cmp	r3, #7
 800643a:	d9e7      	bls.n	800640c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800643c:	bf00      	nop
 800643e:	bf00      	nop
 8006440:	3714      	adds	r7, #20
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr
 800644a:	bf00      	nop
 800644c:	20000a54 	.word	0x20000a54

08006450 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006450:	b580      	push	{r7, lr}
 8006452:	b086      	sub	sp, #24
 8006454:	af00      	add	r7, sp, #0
 8006456:	60f8      	str	r0, [r7, #12]
 8006458:	60b9      	str	r1, [r7, #8]
 800645a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006460:	f002 f902 	bl	8008668 <vPortEnterCritical>
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800646a:	b25b      	sxtb	r3, r3
 800646c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006470:	d103      	bne.n	800647a <vQueueWaitForMessageRestricted+0x2a>
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	2200      	movs	r2, #0
 8006476:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006480:	b25b      	sxtb	r3, r3
 8006482:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006486:	d103      	bne.n	8006490 <vQueueWaitForMessageRestricted+0x40>
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	2200      	movs	r2, #0
 800648c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006490:	f002 f91c 	bl	80086cc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006498:	2b00      	cmp	r3, #0
 800649a:	d106      	bne.n	80064aa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	3324      	adds	r3, #36	@ 0x24
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	68b9      	ldr	r1, [r7, #8]
 80064a4:	4618      	mov	r0, r3
 80064a6:	f000 fd65 	bl	8006f74 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80064aa:	6978      	ldr	r0, [r7, #20]
 80064ac:	f7ff ff26 	bl	80062fc <prvUnlockQueue>
	}
 80064b0:	bf00      	nop
 80064b2:	3718      	adds	r7, #24
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b08e      	sub	sp, #56	@ 0x38
 80064bc:	af04      	add	r7, sp, #16
 80064be:	60f8      	str	r0, [r7, #12]
 80064c0:	60b9      	str	r1, [r7, #8]
 80064c2:	607a      	str	r2, [r7, #4]
 80064c4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80064c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d10b      	bne.n	80064e4 <xTaskCreateStatic+0x2c>
	__asm volatile
 80064cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064d0:	f383 8811 	msr	BASEPRI, r3
 80064d4:	f3bf 8f6f 	isb	sy
 80064d8:	f3bf 8f4f 	dsb	sy
 80064dc:	623b      	str	r3, [r7, #32]
}
 80064de:	bf00      	nop
 80064e0:	bf00      	nop
 80064e2:	e7fd      	b.n	80064e0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80064e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d10b      	bne.n	8006502 <xTaskCreateStatic+0x4a>
	__asm volatile
 80064ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064ee:	f383 8811 	msr	BASEPRI, r3
 80064f2:	f3bf 8f6f 	isb	sy
 80064f6:	f3bf 8f4f 	dsb	sy
 80064fa:	61fb      	str	r3, [r7, #28]
}
 80064fc:	bf00      	nop
 80064fe:	bf00      	nop
 8006500:	e7fd      	b.n	80064fe <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006502:	23d8      	movs	r3, #216	@ 0xd8
 8006504:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	2bd8      	cmp	r3, #216	@ 0xd8
 800650a:	d00b      	beq.n	8006524 <xTaskCreateStatic+0x6c>
	__asm volatile
 800650c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006510:	f383 8811 	msr	BASEPRI, r3
 8006514:	f3bf 8f6f 	isb	sy
 8006518:	f3bf 8f4f 	dsb	sy
 800651c:	61bb      	str	r3, [r7, #24]
}
 800651e:	bf00      	nop
 8006520:	bf00      	nop
 8006522:	e7fd      	b.n	8006520 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006524:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006528:	2b00      	cmp	r3, #0
 800652a:	d01e      	beq.n	800656a <xTaskCreateStatic+0xb2>
 800652c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800652e:	2b00      	cmp	r3, #0
 8006530:	d01b      	beq.n	800656a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006534:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006538:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800653a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800653c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800653e:	2202      	movs	r2, #2
 8006540:	f883 20d5 	strb.w	r2, [r3, #213]	@ 0xd5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006544:	2300      	movs	r3, #0
 8006546:	9303      	str	r3, [sp, #12]
 8006548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800654a:	9302      	str	r3, [sp, #8]
 800654c:	f107 0314 	add.w	r3, r7, #20
 8006550:	9301      	str	r3, [sp, #4]
 8006552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006554:	9300      	str	r3, [sp, #0]
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	68b9      	ldr	r1, [r7, #8]
 800655c:	68f8      	ldr	r0, [r7, #12]
 800655e:	f000 f851 	bl	8006604 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006562:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006564:	f000 f90e 	bl	8006784 <prvAddNewTaskToReadyList>
 8006568:	e001      	b.n	800656e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800656a:	2300      	movs	r3, #0
 800656c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800656e:	697b      	ldr	r3, [r7, #20]
	}
 8006570:	4618      	mov	r0, r3
 8006572:	3728      	adds	r7, #40	@ 0x28
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}

08006578 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006578:	b580      	push	{r7, lr}
 800657a:	b08c      	sub	sp, #48	@ 0x30
 800657c:	af04      	add	r7, sp, #16
 800657e:	60f8      	str	r0, [r7, #12]
 8006580:	60b9      	str	r1, [r7, #8]
 8006582:	603b      	str	r3, [r7, #0]
 8006584:	4613      	mov	r3, r2
 8006586:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006588:	88fb      	ldrh	r3, [r7, #6]
 800658a:	009b      	lsls	r3, r3, #2
 800658c:	4618      	mov	r0, r3
 800658e:	f002 f98d 	bl	80088ac <pvPortMalloc>
 8006592:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d00e      	beq.n	80065b8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800659a:	20d8      	movs	r0, #216	@ 0xd8
 800659c:	f002 f986 	bl	80088ac <pvPortMalloc>
 80065a0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80065a2:	69fb      	ldr	r3, [r7, #28]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d003      	beq.n	80065b0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80065a8:	69fb      	ldr	r3, [r7, #28]
 80065aa:	697a      	ldr	r2, [r7, #20]
 80065ac:	631a      	str	r2, [r3, #48]	@ 0x30
 80065ae:	e005      	b.n	80065bc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80065b0:	6978      	ldr	r0, [r7, #20]
 80065b2:	f002 fa49 	bl	8008a48 <vPortFree>
 80065b6:	e001      	b.n	80065bc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80065b8:	2300      	movs	r3, #0
 80065ba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80065bc:	69fb      	ldr	r3, [r7, #28]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d017      	beq.n	80065f2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80065c2:	69fb      	ldr	r3, [r7, #28]
 80065c4:	2200      	movs	r2, #0
 80065c6:	f883 20d5 	strb.w	r2, [r3, #213]	@ 0xd5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80065ca:	88fa      	ldrh	r2, [r7, #6]
 80065cc:	2300      	movs	r3, #0
 80065ce:	9303      	str	r3, [sp, #12]
 80065d0:	69fb      	ldr	r3, [r7, #28]
 80065d2:	9302      	str	r3, [sp, #8]
 80065d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065d6:	9301      	str	r3, [sp, #4]
 80065d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065da:	9300      	str	r3, [sp, #0]
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	68b9      	ldr	r1, [r7, #8]
 80065e0:	68f8      	ldr	r0, [r7, #12]
 80065e2:	f000 f80f 	bl	8006604 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80065e6:	69f8      	ldr	r0, [r7, #28]
 80065e8:	f000 f8cc 	bl	8006784 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80065ec:	2301      	movs	r3, #1
 80065ee:	61bb      	str	r3, [r7, #24]
 80065f0:	e002      	b.n	80065f8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80065f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80065f6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80065f8:	69bb      	ldr	r3, [r7, #24]
	}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3720      	adds	r7, #32
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}
	...

08006604 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b088      	sub	sp, #32
 8006608:	af00      	add	r7, sp, #0
 800660a:	60f8      	str	r0, [r7, #12]
 800660c:	60b9      	str	r1, [r7, #8]
 800660e:	607a      	str	r2, [r7, #4]
 8006610:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006614:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	461a      	mov	r2, r3
 800661c:	21a5      	movs	r1, #165	@ 0xa5
 800661e:	f002 fce9 	bl	8008ff4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006624:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800662c:	3b01      	subs	r3, #1
 800662e:	009b      	lsls	r3, r3, #2
 8006630:	4413      	add	r3, r2
 8006632:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006634:	69bb      	ldr	r3, [r7, #24]
 8006636:	f023 0307 	bic.w	r3, r3, #7
 800663a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800663c:	69bb      	ldr	r3, [r7, #24]
 800663e:	f003 0307 	and.w	r3, r3, #7
 8006642:	2b00      	cmp	r3, #0
 8006644:	d00b      	beq.n	800665e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800664a:	f383 8811 	msr	BASEPRI, r3
 800664e:	f3bf 8f6f 	isb	sy
 8006652:	f3bf 8f4f 	dsb	sy
 8006656:	617b      	str	r3, [r7, #20]
}
 8006658:	bf00      	nop
 800665a:	bf00      	nop
 800665c:	e7fd      	b.n	800665a <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800665e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006660:	69ba      	ldr	r2, [r7, #24]
 8006662:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d01f      	beq.n	80066aa <prvInitialiseNewTask+0xa6>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800666a:	2300      	movs	r3, #0
 800666c:	61fb      	str	r3, [r7, #28]
 800666e:	e012      	b.n	8006696 <prvInitialiseNewTask+0x92>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006670:	68ba      	ldr	r2, [r7, #8]
 8006672:	69fb      	ldr	r3, [r7, #28]
 8006674:	4413      	add	r3, r2
 8006676:	7819      	ldrb	r1, [r3, #0]
 8006678:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800667a:	69fb      	ldr	r3, [r7, #28]
 800667c:	4413      	add	r3, r2
 800667e:	3334      	adds	r3, #52	@ 0x34
 8006680:	460a      	mov	r2, r1
 8006682:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006684:	68ba      	ldr	r2, [r7, #8]
 8006686:	69fb      	ldr	r3, [r7, #28]
 8006688:	4413      	add	r3, r2
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d006      	beq.n	800669e <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006690:	69fb      	ldr	r3, [r7, #28]
 8006692:	3301      	adds	r3, #1
 8006694:	61fb      	str	r3, [r7, #28]
 8006696:	69fb      	ldr	r3, [r7, #28]
 8006698:	2b0f      	cmp	r3, #15
 800669a:	d9e9      	bls.n	8006670 <prvInitialiseNewTask+0x6c>
 800669c:	e000      	b.n	80066a0 <prvInitialiseNewTask+0x9c>
			{
				break;
 800669e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80066a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066a2:	2200      	movs	r2, #0
 80066a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80066a8:	e003      	b.n	80066b2 <prvInitialiseNewTask+0xae>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80066aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ac:	2200      	movs	r2, #0
 80066ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80066b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066b4:	2b37      	cmp	r3, #55	@ 0x37
 80066b6:	d901      	bls.n	80066bc <prvInitialiseNewTask+0xb8>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80066b8:	2337      	movs	r3, #55	@ 0x37
 80066ba:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80066bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80066c0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80066c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80066c6:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->uxMutexesHeld = 0;
 80066c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ca:	2200      	movs	r2, #0
 80066cc:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80066ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066d0:	3304      	adds	r3, #4
 80066d2:	4618      	mov	r0, r3
 80066d4:	f7fe ff6e 	bl	80055b4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80066d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066da:	3318      	adds	r3, #24
 80066dc:	4618      	mov	r0, r3
 80066de:	f7fe ff69 	bl	80055b4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80066e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066e6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066ea:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80066ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066f0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80066f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066f6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 80066f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066fa:	2200      	movs	r2, #0
 80066fc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	}
	#endif

	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
	{
		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 8006700:	2300      	movs	r3, #0
 8006702:	61fb      	str	r3, [r7, #28]
 8006704:	e008      	b.n	8006718 <prvInitialiseNewTask+0x114>
		{
			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 8006706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006708:	69fa      	ldr	r2, [r7, #28]
 800670a:	3216      	adds	r2, #22
 800670c:	2100      	movs	r1, #0
 800670e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 8006712:	69fb      	ldr	r3, [r7, #28]
 8006714:	3301      	adds	r3, #1
 8006716:	61fb      	str	r3, [r7, #28]
 8006718:	69fb      	ldr	r3, [r7, #28]
 800671a:	2b09      	cmp	r3, #9
 800671c:	d9f3      	bls.n	8006706 <prvInitialiseNewTask+0x102>
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800671e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006720:	2200      	movs	r2, #0
 8006722:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006728:	2200      	movs	r2, #0
 800672a:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800672e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006730:	3384      	adds	r3, #132	@ 0x84
 8006732:	224c      	movs	r2, #76	@ 0x4c
 8006734:	2100      	movs	r1, #0
 8006736:	4618      	mov	r0, r3
 8006738:	f002 fc5c 	bl	8008ff4 <memset>
 800673c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800673e:	4a0e      	ldr	r2, [pc, #56]	@ (8006778 <prvInitialiseNewTask+0x174>)
 8006740:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8006744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006746:	4a0d      	ldr	r2, [pc, #52]	@ (800677c <prvInitialiseNewTask+0x178>)
 8006748:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 800674c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800674e:	4a0c      	ldr	r2, [pc, #48]	@ (8006780 <prvInitialiseNewTask+0x17c>)
 8006750:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006754:	683a      	ldr	r2, [r7, #0]
 8006756:	68f9      	ldr	r1, [r7, #12]
 8006758:	69b8      	ldr	r0, [r7, #24]
 800675a:	f001 fe51 	bl	8008400 <pxPortInitialiseStack>
 800675e:	4602      	mov	r2, r0
 8006760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006762:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006766:	2b00      	cmp	r3, #0
 8006768:	d002      	beq.n	8006770 <prvInitialiseNewTask+0x16c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800676a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800676c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800676e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006770:	bf00      	nop
 8006772:	3720      	adds	r7, #32
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}
 8006778:	20004cf0 	.word	0x20004cf0
 800677c:	20004d58 	.word	0x20004d58
 8006780:	20004dc0 	.word	0x20004dc0

08006784 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b082      	sub	sp, #8
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800678c:	f001 ff6c 	bl	8008668 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006790:	4b2d      	ldr	r3, [pc, #180]	@ (8006848 <prvAddNewTaskToReadyList+0xc4>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	3301      	adds	r3, #1
 8006796:	4a2c      	ldr	r2, [pc, #176]	@ (8006848 <prvAddNewTaskToReadyList+0xc4>)
 8006798:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800679a:	4b2c      	ldr	r3, [pc, #176]	@ (800684c <prvAddNewTaskToReadyList+0xc8>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d109      	bne.n	80067b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80067a2:	4a2a      	ldr	r2, [pc, #168]	@ (800684c <prvAddNewTaskToReadyList+0xc8>)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80067a8:	4b27      	ldr	r3, [pc, #156]	@ (8006848 <prvAddNewTaskToReadyList+0xc4>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d110      	bne.n	80067d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80067b0:	f000 fd52 	bl	8007258 <prvInitialiseTaskLists>
 80067b4:	e00d      	b.n	80067d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80067b6:	4b26      	ldr	r3, [pc, #152]	@ (8006850 <prvAddNewTaskToReadyList+0xcc>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d109      	bne.n	80067d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80067be:	4b23      	ldr	r3, [pc, #140]	@ (800684c <prvAddNewTaskToReadyList+0xc8>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d802      	bhi.n	80067d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80067cc:	4a1f      	ldr	r2, [pc, #124]	@ (800684c <prvAddNewTaskToReadyList+0xc8>)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80067d2:	4b20      	ldr	r3, [pc, #128]	@ (8006854 <prvAddNewTaskToReadyList+0xd0>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	3301      	adds	r3, #1
 80067d8:	4a1e      	ldr	r2, [pc, #120]	@ (8006854 <prvAddNewTaskToReadyList+0xd0>)
 80067da:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80067dc:	4b1d      	ldr	r3, [pc, #116]	@ (8006854 <prvAddNewTaskToReadyList+0xd0>)
 80067de:	681a      	ldr	r2, [r3, #0]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	649a      	str	r2, [r3, #72]	@ 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067e8:	4b1b      	ldr	r3, [pc, #108]	@ (8006858 <prvAddNewTaskToReadyList+0xd4>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	429a      	cmp	r2, r3
 80067ee:	d903      	bls.n	80067f8 <prvAddNewTaskToReadyList+0x74>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067f4:	4a18      	ldr	r2, [pc, #96]	@ (8006858 <prvAddNewTaskToReadyList+0xd4>)
 80067f6:	6013      	str	r3, [r2, #0]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067fc:	4613      	mov	r3, r2
 80067fe:	009b      	lsls	r3, r3, #2
 8006800:	4413      	add	r3, r2
 8006802:	009b      	lsls	r3, r3, #2
 8006804:	4a15      	ldr	r2, [pc, #84]	@ (800685c <prvAddNewTaskToReadyList+0xd8>)
 8006806:	441a      	add	r2, r3
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	3304      	adds	r3, #4
 800680c:	4619      	mov	r1, r3
 800680e:	4610      	mov	r0, r2
 8006810:	f7fe fedd 	bl	80055ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006814:	f001 ff5a 	bl	80086cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006818:	4b0d      	ldr	r3, [pc, #52]	@ (8006850 <prvAddNewTaskToReadyList+0xcc>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d00e      	beq.n	800683e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006820:	4b0a      	ldr	r3, [pc, #40]	@ (800684c <prvAddNewTaskToReadyList+0xc8>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800682a:	429a      	cmp	r2, r3
 800682c:	d207      	bcs.n	800683e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800682e:	4b0c      	ldr	r3, [pc, #48]	@ (8006860 <prvAddNewTaskToReadyList+0xdc>)
 8006830:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006834:	601a      	str	r2, [r3, #0]
 8006836:	f3bf 8f4f 	dsb	sy
 800683a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800683e:	bf00      	nop
 8006840:	3708      	adds	r7, #8
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}
 8006846:	bf00      	nop
 8006848:	20000f68 	.word	0x20000f68
 800684c:	20000a94 	.word	0x20000a94
 8006850:	20000f74 	.word	0x20000f74
 8006854:	20000f84 	.word	0x20000f84
 8006858:	20000f70 	.word	0x20000f70
 800685c:	20000a98 	.word	0x20000a98
 8006860:	e000ed04 	.word	0xe000ed04

08006864 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8006864:	b580      	push	{r7, lr}
 8006866:	b088      	sub	sp, #32
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8006870:	69bb      	ldr	r3, [r7, #24]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d10b      	bne.n	800688e <eTaskGetState+0x2a>
	__asm volatile
 8006876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800687a:	f383 8811 	msr	BASEPRI, r3
 800687e:	f3bf 8f6f 	isb	sy
 8006882:	f3bf 8f4f 	dsb	sy
 8006886:	60bb      	str	r3, [r7, #8]
}
 8006888:	bf00      	nop
 800688a:	bf00      	nop
 800688c:	e7fd      	b.n	800688a <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 800688e:	4b24      	ldr	r3, [pc, #144]	@ (8006920 <eTaskGetState+0xbc>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	69ba      	ldr	r2, [r7, #24]
 8006894:	429a      	cmp	r2, r3
 8006896:	d102      	bne.n	800689e <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8006898:	2300      	movs	r3, #0
 800689a:	77fb      	strb	r3, [r7, #31]
 800689c:	e03a      	b.n	8006914 <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 800689e:	f001 fee3 	bl	8008668 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 80068a2:	69bb      	ldr	r3, [r7, #24]
 80068a4:	695b      	ldr	r3, [r3, #20]
 80068a6:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 80068a8:	4b1e      	ldr	r3, [pc, #120]	@ (8006924 <eTaskGetState+0xc0>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 80068ae:	4b1e      	ldr	r3, [pc, #120]	@ (8006928 <eTaskGetState+0xc4>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 80068b4:	f001 ff0a 	bl	80086cc <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 80068b8:	697a      	ldr	r2, [r7, #20]
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	429a      	cmp	r2, r3
 80068be:	d003      	beq.n	80068c8 <eTaskGetState+0x64>
 80068c0:	697a      	ldr	r2, [r7, #20]
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d102      	bne.n	80068ce <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 80068c8:	2302      	movs	r3, #2
 80068ca:	77fb      	strb	r3, [r7, #31]
 80068cc:	e022      	b.n	8006914 <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	4a16      	ldr	r2, [pc, #88]	@ (800692c <eTaskGetState+0xc8>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d112      	bne.n	80068fc <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 80068d6:	69bb      	ldr	r3, [r7, #24]
 80068d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d10b      	bne.n	80068f6 <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80068de:	69bb      	ldr	r3, [r7, #24]
 80068e0:	f893 30d4 	ldrb.w	r3, [r3, #212]	@ 0xd4
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	d102      	bne.n	80068f0 <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 80068ea:	2302      	movs	r3, #2
 80068ec:	77fb      	strb	r3, [r7, #31]
 80068ee:	e011      	b.n	8006914 <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 80068f0:	2303      	movs	r3, #3
 80068f2:	77fb      	strb	r3, [r7, #31]
 80068f4:	e00e      	b.n	8006914 <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 80068f6:	2302      	movs	r3, #2
 80068f8:	77fb      	strb	r3, [r7, #31]
 80068fa:	e00b      	b.n	8006914 <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	4a0c      	ldr	r2, [pc, #48]	@ (8006930 <eTaskGetState+0xcc>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d002      	beq.n	800690a <eTaskGetState+0xa6>
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d102      	bne.n	8006910 <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800690a:	2304      	movs	r3, #4
 800690c:	77fb      	strb	r3, [r7, #31]
 800690e:	e001      	b.n	8006914 <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8006910:	2301      	movs	r3, #1
 8006912:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8006914:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8006916:	4618      	mov	r0, r3
 8006918:	3720      	adds	r7, #32
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}
 800691e:	bf00      	nop
 8006920:	20000a94 	.word	0x20000a94
 8006924:	20000f20 	.word	0x20000f20
 8006928:	20000f24 	.word	0x20000f24
 800692c:	20000f54 	.word	0x20000f54
 8006930:	20000f3c 	.word	0x20000f3c

08006934 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b08a      	sub	sp, #40	@ 0x28
 8006938:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800693a:	2300      	movs	r3, #0
 800693c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800693e:	2300      	movs	r3, #0
 8006940:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006942:	463a      	mov	r2, r7
 8006944:	1d39      	adds	r1, r7, #4
 8006946:	f107 0308 	add.w	r3, r7, #8
 800694a:	4618      	mov	r0, r3
 800694c:	f7fe fdde 	bl	800550c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006950:	6839      	ldr	r1, [r7, #0]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	68ba      	ldr	r2, [r7, #8]
 8006956:	9202      	str	r2, [sp, #8]
 8006958:	9301      	str	r3, [sp, #4]
 800695a:	2300      	movs	r3, #0
 800695c:	9300      	str	r3, [sp, #0]
 800695e:	2300      	movs	r3, #0
 8006960:	460a      	mov	r2, r1
 8006962:	4925      	ldr	r1, [pc, #148]	@ (80069f8 <vTaskStartScheduler+0xc4>)
 8006964:	4825      	ldr	r0, [pc, #148]	@ (80069fc <vTaskStartScheduler+0xc8>)
 8006966:	f7ff fda7 	bl	80064b8 <xTaskCreateStatic>
 800696a:	4603      	mov	r3, r0
 800696c:	4a24      	ldr	r2, [pc, #144]	@ (8006a00 <vTaskStartScheduler+0xcc>)
 800696e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006970:	4b23      	ldr	r3, [pc, #140]	@ (8006a00 <vTaskStartScheduler+0xcc>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d002      	beq.n	800697e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006978:	2301      	movs	r3, #1
 800697a:	617b      	str	r3, [r7, #20]
 800697c:	e001      	b.n	8006982 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800697e:	2300      	movs	r3, #0
 8006980:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	2b01      	cmp	r3, #1
 8006986:	d102      	bne.n	800698e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006988:	f001 f960 	bl	8007c4c <xTimerCreateTimerTask>
 800698c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	2b01      	cmp	r3, #1
 8006992:	d11d      	bne.n	80069d0 <vTaskStartScheduler+0x9c>
	__asm volatile
 8006994:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006998:	f383 8811 	msr	BASEPRI, r3
 800699c:	f3bf 8f6f 	isb	sy
 80069a0:	f3bf 8f4f 	dsb	sy
 80069a4:	613b      	str	r3, [r7, #16]
}
 80069a6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80069a8:	4b16      	ldr	r3, [pc, #88]	@ (8006a04 <vTaskStartScheduler+0xd0>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	3384      	adds	r3, #132	@ 0x84
 80069ae:	4a16      	ldr	r2, [pc, #88]	@ (8006a08 <vTaskStartScheduler+0xd4>)
 80069b0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80069b2:	4b16      	ldr	r3, [pc, #88]	@ (8006a0c <vTaskStartScheduler+0xd8>)
 80069b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80069b8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80069ba:	4b15      	ldr	r3, [pc, #84]	@ (8006a10 <vTaskStartScheduler+0xdc>)
 80069bc:	2201      	movs	r2, #1
 80069be:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80069c0:	4b14      	ldr	r3, [pc, #80]	@ (8006a14 <vTaskStartScheduler+0xe0>)
 80069c2:	2200      	movs	r2, #0
 80069c4:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80069c6:	f7fb f859 	bl	8001a7c <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80069ca:	f001 fda9 	bl	8008520 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80069ce:	e00f      	b.n	80069f0 <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80069d6:	d10b      	bne.n	80069f0 <vTaskStartScheduler+0xbc>
	__asm volatile
 80069d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069dc:	f383 8811 	msr	BASEPRI, r3
 80069e0:	f3bf 8f6f 	isb	sy
 80069e4:	f3bf 8f4f 	dsb	sy
 80069e8:	60fb      	str	r3, [r7, #12]
}
 80069ea:	bf00      	nop
 80069ec:	bf00      	nop
 80069ee:	e7fd      	b.n	80069ec <vTaskStartScheduler+0xb8>
}
 80069f0:	bf00      	nop
 80069f2:	3718      	adds	r7, #24
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}
 80069f8:	0800a8e8 	.word	0x0800a8e8
 80069fc:	080071a1 	.word	0x080071a1
 8006a00:	20000f8c 	.word	0x20000f8c
 8006a04:	20000a94 	.word	0x20000a94
 8006a08:	20000010 	.word	0x20000010
 8006a0c:	20000f88 	.word	0x20000f88
 8006a10:	20000f74 	.word	0x20000f74
 8006a14:	20000f6c 	.word	0x20000f6c

08006a18 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006a18:	b480      	push	{r7}
 8006a1a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006a1c:	4b04      	ldr	r3, [pc, #16]	@ (8006a30 <vTaskSuspendAll+0x18>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	3301      	adds	r3, #1
 8006a22:	4a03      	ldr	r2, [pc, #12]	@ (8006a30 <vTaskSuspendAll+0x18>)
 8006a24:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006a26:	bf00      	nop
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr
 8006a30:	20000f90 	.word	0x20000f90

08006a34 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b084      	sub	sp, #16
 8006a38:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006a42:	4b42      	ldr	r3, [pc, #264]	@ (8006b4c <xTaskResumeAll+0x118>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d10b      	bne.n	8006a62 <xTaskResumeAll+0x2e>
	__asm volatile
 8006a4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a4e:	f383 8811 	msr	BASEPRI, r3
 8006a52:	f3bf 8f6f 	isb	sy
 8006a56:	f3bf 8f4f 	dsb	sy
 8006a5a:	603b      	str	r3, [r7, #0]
}
 8006a5c:	bf00      	nop
 8006a5e:	bf00      	nop
 8006a60:	e7fd      	b.n	8006a5e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006a62:	f001 fe01 	bl	8008668 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006a66:	4b39      	ldr	r3, [pc, #228]	@ (8006b4c <xTaskResumeAll+0x118>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	3b01      	subs	r3, #1
 8006a6c:	4a37      	ldr	r2, [pc, #220]	@ (8006b4c <xTaskResumeAll+0x118>)
 8006a6e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a70:	4b36      	ldr	r3, [pc, #216]	@ (8006b4c <xTaskResumeAll+0x118>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d162      	bne.n	8006b3e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006a78:	4b35      	ldr	r3, [pc, #212]	@ (8006b50 <xTaskResumeAll+0x11c>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d05e      	beq.n	8006b3e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006a80:	e02f      	b.n	8006ae2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a82:	4b34      	ldr	r3, [pc, #208]	@ (8006b54 <xTaskResumeAll+0x120>)
 8006a84:	68db      	ldr	r3, [r3, #12]
 8006a86:	68db      	ldr	r3, [r3, #12]
 8006a88:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	3318      	adds	r3, #24
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f7fe fdfa 	bl	8005688 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	3304      	adds	r3, #4
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f7fe fdf5 	bl	8005688 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006aa2:	4b2d      	ldr	r3, [pc, #180]	@ (8006b58 <xTaskResumeAll+0x124>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	d903      	bls.n	8006ab2 <xTaskResumeAll+0x7e>
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aae:	4a2a      	ldr	r2, [pc, #168]	@ (8006b58 <xTaskResumeAll+0x124>)
 8006ab0:	6013      	str	r3, [r2, #0]
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ab6:	4613      	mov	r3, r2
 8006ab8:	009b      	lsls	r3, r3, #2
 8006aba:	4413      	add	r3, r2
 8006abc:	009b      	lsls	r3, r3, #2
 8006abe:	4a27      	ldr	r2, [pc, #156]	@ (8006b5c <xTaskResumeAll+0x128>)
 8006ac0:	441a      	add	r2, r3
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	3304      	adds	r3, #4
 8006ac6:	4619      	mov	r1, r3
 8006ac8:	4610      	mov	r0, r2
 8006aca:	f7fe fd80 	bl	80055ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ad2:	4b23      	ldr	r3, [pc, #140]	@ (8006b60 <xTaskResumeAll+0x12c>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	d302      	bcc.n	8006ae2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006adc:	4b21      	ldr	r3, [pc, #132]	@ (8006b64 <xTaskResumeAll+0x130>)
 8006ade:	2201      	movs	r2, #1
 8006ae0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ae2:	4b1c      	ldr	r3, [pc, #112]	@ (8006b54 <xTaskResumeAll+0x120>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d1cb      	bne.n	8006a82 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d001      	beq.n	8006af4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006af0:	f000 fd2c 	bl	800754c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006af4:	4b1c      	ldr	r3, [pc, #112]	@ (8006b68 <xTaskResumeAll+0x134>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d010      	beq.n	8006b22 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006b00:	f000 f8d6 	bl	8006cb0 <xTaskIncrementTick>
 8006b04:	4603      	mov	r3, r0
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d002      	beq.n	8006b10 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006b0a:	4b16      	ldr	r3, [pc, #88]	@ (8006b64 <xTaskResumeAll+0x130>)
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	3b01      	subs	r3, #1
 8006b14:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d1f1      	bne.n	8006b00 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006b1c:	4b12      	ldr	r3, [pc, #72]	@ (8006b68 <xTaskResumeAll+0x134>)
 8006b1e:	2200      	movs	r2, #0
 8006b20:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006b22:	4b10      	ldr	r3, [pc, #64]	@ (8006b64 <xTaskResumeAll+0x130>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d009      	beq.n	8006b3e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006b2e:	4b0f      	ldr	r3, [pc, #60]	@ (8006b6c <xTaskResumeAll+0x138>)
 8006b30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b34:	601a      	str	r2, [r3, #0]
 8006b36:	f3bf 8f4f 	dsb	sy
 8006b3a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006b3e:	f001 fdc5 	bl	80086cc <vPortExitCritical>

	return xAlreadyYielded;
 8006b42:	68bb      	ldr	r3, [r7, #8]
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3710      	adds	r7, #16
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}
 8006b4c:	20000f90 	.word	0x20000f90
 8006b50:	20000f68 	.word	0x20000f68
 8006b54:	20000f28 	.word	0x20000f28
 8006b58:	20000f70 	.word	0x20000f70
 8006b5c:	20000a98 	.word	0x20000a98
 8006b60:	20000a94 	.word	0x20000a94
 8006b64:	20000f7c 	.word	0x20000f7c
 8006b68:	20000f78 	.word	0x20000f78
 8006b6c:	e000ed04 	.word	0xe000ed04

08006b70 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006b70:	b480      	push	{r7}
 8006b72:	b083      	sub	sp, #12
 8006b74:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006b76:	4b05      	ldr	r3, [pc, #20]	@ (8006b8c <xTaskGetTickCount+0x1c>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006b7c:	687b      	ldr	r3, [r7, #4]
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	370c      	adds	r7, #12
 8006b82:	46bd      	mov	sp, r7
 8006b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b88:	4770      	bx	lr
 8006b8a:	bf00      	nop
 8006b8c:	20000f6c 	.word	0x20000f6c

08006b90 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b086      	sub	sp, #24
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	60f8      	str	r0, [r7, #12]
 8006b98:	60b9      	str	r1, [r7, #8]
 8006b9a:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	617b      	str	r3, [r7, #20]
 8006ba0:	2338      	movs	r3, #56	@ 0x38
 8006ba2:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 8006ba4:	f7ff ff38 	bl	8006a18 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 8006ba8:	4b3b      	ldr	r3, [pc, #236]	@ (8006c98 <uxTaskGetSystemState+0x108>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	68ba      	ldr	r2, [r7, #8]
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	d36a      	bcc.n	8006c88 <uxTaskGetSystemState+0xf8>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	3b01      	subs	r3, #1
 8006bb6:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 8006bb8:	697a      	ldr	r2, [r7, #20]
 8006bba:	4613      	mov	r3, r2
 8006bbc:	00db      	lsls	r3, r3, #3
 8006bbe:	4413      	add	r3, r2
 8006bc0:	009b      	lsls	r3, r3, #2
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	1898      	adds	r0, r3, r2
 8006bc8:	693a      	ldr	r2, [r7, #16]
 8006bca:	4613      	mov	r3, r2
 8006bcc:	009b      	lsls	r3, r3, #2
 8006bce:	4413      	add	r3, r2
 8006bd0:	009b      	lsls	r3, r3, #2
 8006bd2:	4a32      	ldr	r2, [pc, #200]	@ (8006c9c <uxTaskGetSystemState+0x10c>)
 8006bd4:	4413      	add	r3, r2
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	4619      	mov	r1, r3
 8006bda:	f000 fc13 	bl	8007404 <prvListTasksWithinSingleList>
 8006bde:	4602      	mov	r2, r0
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	4413      	add	r3, r2
 8006be4:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d1e2      	bne.n	8006bb2 <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 8006bec:	697a      	ldr	r2, [r7, #20]
 8006bee:	4613      	mov	r3, r2
 8006bf0:	00db      	lsls	r3, r3, #3
 8006bf2:	4413      	add	r3, r2
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	4413      	add	r3, r2
 8006bfc:	4a28      	ldr	r2, [pc, #160]	@ (8006ca0 <uxTaskGetSystemState+0x110>)
 8006bfe:	6811      	ldr	r1, [r2, #0]
 8006c00:	2202      	movs	r2, #2
 8006c02:	4618      	mov	r0, r3
 8006c04:	f000 fbfe 	bl	8007404 <prvListTasksWithinSingleList>
 8006c08:	4602      	mov	r2, r0
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	4413      	add	r3, r2
 8006c0e:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8006c10:	697a      	ldr	r2, [r7, #20]
 8006c12:	4613      	mov	r3, r2
 8006c14:	00db      	lsls	r3, r3, #3
 8006c16:	4413      	add	r3, r2
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	4413      	add	r3, r2
 8006c20:	4a20      	ldr	r2, [pc, #128]	@ (8006ca4 <uxTaskGetSystemState+0x114>)
 8006c22:	6811      	ldr	r1, [r2, #0]
 8006c24:	2202      	movs	r2, #2
 8006c26:	4618      	mov	r0, r3
 8006c28:	f000 fbec 	bl	8007404 <prvListTasksWithinSingleList>
 8006c2c:	4602      	mov	r2, r0
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	4413      	add	r3, r2
 8006c32:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8006c34:	697a      	ldr	r2, [r7, #20]
 8006c36:	4613      	mov	r3, r2
 8006c38:	00db      	lsls	r3, r3, #3
 8006c3a:	4413      	add	r3, r2
 8006c3c:	009b      	lsls	r3, r3, #2
 8006c3e:	461a      	mov	r2, r3
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	4413      	add	r3, r2
 8006c44:	2204      	movs	r2, #4
 8006c46:	4918      	ldr	r1, [pc, #96]	@ (8006ca8 <uxTaskGetSystemState+0x118>)
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f000 fbdb 	bl	8007404 <prvListTasksWithinSingleList>
 8006c4e:	4602      	mov	r2, r0
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	4413      	add	r3, r2
 8006c54:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 8006c56:	697a      	ldr	r2, [r7, #20]
 8006c58:	4613      	mov	r3, r2
 8006c5a:	00db      	lsls	r3, r3, #3
 8006c5c:	4413      	add	r3, r2
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	461a      	mov	r2, r3
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	4413      	add	r3, r2
 8006c66:	2203      	movs	r2, #3
 8006c68:	4910      	ldr	r1, [pc, #64]	@ (8006cac <uxTaskGetSystemState+0x11c>)
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f000 fbca 	bl	8007404 <prvListTasksWithinSingleList>
 8006c70:	4602      	mov	r2, r0
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	4413      	add	r3, r2
 8006c76:	617b      	str	r3, [r7, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1)
				{
					if( pulTotalRunTime != NULL )
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d004      	beq.n	8006c88 <uxTaskGetSystemState+0xf8>
					{
						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
						#else
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8006c7e:	f7fa ff0b 	bl	8001a98 <getRunTimeCounterValue>
 8006c82:	4602      	mov	r2, r0
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 8006c88:	f7ff fed4 	bl	8006a34 <xTaskResumeAll>

		return uxTask;
 8006c8c:	697b      	ldr	r3, [r7, #20]
	}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3718      	adds	r7, #24
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	bf00      	nop
 8006c98:	20000f68 	.word	0x20000f68
 8006c9c:	20000a98 	.word	0x20000a98
 8006ca0:	20000f20 	.word	0x20000f20
 8006ca4:	20000f24 	.word	0x20000f24
 8006ca8:	20000f3c 	.word	0x20000f3c
 8006cac:	20000f54 	.word	0x20000f54

08006cb0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b086      	sub	sp, #24
 8006cb4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006cba:	4b4f      	ldr	r3, [pc, #316]	@ (8006df8 <xTaskIncrementTick+0x148>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	f040 8090 	bne.w	8006de4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006cc4:	4b4d      	ldr	r3, [pc, #308]	@ (8006dfc <xTaskIncrementTick+0x14c>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	3301      	adds	r3, #1
 8006cca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006ccc:	4a4b      	ldr	r2, [pc, #300]	@ (8006dfc <xTaskIncrementTick+0x14c>)
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d121      	bne.n	8006d1c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006cd8:	4b49      	ldr	r3, [pc, #292]	@ (8006e00 <xTaskIncrementTick+0x150>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d00b      	beq.n	8006cfa <xTaskIncrementTick+0x4a>
	__asm volatile
 8006ce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ce6:	f383 8811 	msr	BASEPRI, r3
 8006cea:	f3bf 8f6f 	isb	sy
 8006cee:	f3bf 8f4f 	dsb	sy
 8006cf2:	603b      	str	r3, [r7, #0]
}
 8006cf4:	bf00      	nop
 8006cf6:	bf00      	nop
 8006cf8:	e7fd      	b.n	8006cf6 <xTaskIncrementTick+0x46>
 8006cfa:	4b41      	ldr	r3, [pc, #260]	@ (8006e00 <xTaskIncrementTick+0x150>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	60fb      	str	r3, [r7, #12]
 8006d00:	4b40      	ldr	r3, [pc, #256]	@ (8006e04 <xTaskIncrementTick+0x154>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a3e      	ldr	r2, [pc, #248]	@ (8006e00 <xTaskIncrementTick+0x150>)
 8006d06:	6013      	str	r3, [r2, #0]
 8006d08:	4a3e      	ldr	r2, [pc, #248]	@ (8006e04 <xTaskIncrementTick+0x154>)
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	6013      	str	r3, [r2, #0]
 8006d0e:	4b3e      	ldr	r3, [pc, #248]	@ (8006e08 <xTaskIncrementTick+0x158>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	3301      	adds	r3, #1
 8006d14:	4a3c      	ldr	r2, [pc, #240]	@ (8006e08 <xTaskIncrementTick+0x158>)
 8006d16:	6013      	str	r3, [r2, #0]
 8006d18:	f000 fc18 	bl	800754c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006d1c:	4b3b      	ldr	r3, [pc, #236]	@ (8006e0c <xTaskIncrementTick+0x15c>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	693a      	ldr	r2, [r7, #16]
 8006d22:	429a      	cmp	r2, r3
 8006d24:	d349      	bcc.n	8006dba <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d26:	4b36      	ldr	r3, [pc, #216]	@ (8006e00 <xTaskIncrementTick+0x150>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d104      	bne.n	8006d3a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d30:	4b36      	ldr	r3, [pc, #216]	@ (8006e0c <xTaskIncrementTick+0x15c>)
 8006d32:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006d36:	601a      	str	r2, [r3, #0]
					break;
 8006d38:	e03f      	b.n	8006dba <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d3a:	4b31      	ldr	r3, [pc, #196]	@ (8006e00 <xTaskIncrementTick+0x150>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	68db      	ldr	r3, [r3, #12]
 8006d40:	68db      	ldr	r3, [r3, #12]
 8006d42:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006d4a:	693a      	ldr	r2, [r7, #16]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d203      	bcs.n	8006d5a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006d52:	4a2e      	ldr	r2, [pc, #184]	@ (8006e0c <xTaskIncrementTick+0x15c>)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006d58:	e02f      	b.n	8006dba <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	3304      	adds	r3, #4
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f7fe fc92 	bl	8005688 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d004      	beq.n	8006d76 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	3318      	adds	r3, #24
 8006d70:	4618      	mov	r0, r3
 8006d72:	f7fe fc89 	bl	8005688 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d7a:	4b25      	ldr	r3, [pc, #148]	@ (8006e10 <xTaskIncrementTick+0x160>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	d903      	bls.n	8006d8a <xTaskIncrementTick+0xda>
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d86:	4a22      	ldr	r2, [pc, #136]	@ (8006e10 <xTaskIncrementTick+0x160>)
 8006d88:	6013      	str	r3, [r2, #0]
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d8e:	4613      	mov	r3, r2
 8006d90:	009b      	lsls	r3, r3, #2
 8006d92:	4413      	add	r3, r2
 8006d94:	009b      	lsls	r3, r3, #2
 8006d96:	4a1f      	ldr	r2, [pc, #124]	@ (8006e14 <xTaskIncrementTick+0x164>)
 8006d98:	441a      	add	r2, r3
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	3304      	adds	r3, #4
 8006d9e:	4619      	mov	r1, r3
 8006da0:	4610      	mov	r0, r2
 8006da2:	f7fe fc14 	bl	80055ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006daa:	4b1b      	ldr	r3, [pc, #108]	@ (8006e18 <xTaskIncrementTick+0x168>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d3b8      	bcc.n	8006d26 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006db4:	2301      	movs	r3, #1
 8006db6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006db8:	e7b5      	b.n	8006d26 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006dba:	4b17      	ldr	r3, [pc, #92]	@ (8006e18 <xTaskIncrementTick+0x168>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dc0:	4914      	ldr	r1, [pc, #80]	@ (8006e14 <xTaskIncrementTick+0x164>)
 8006dc2:	4613      	mov	r3, r2
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	4413      	add	r3, r2
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	440b      	add	r3, r1
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d901      	bls.n	8006dd6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006dd6:	4b11      	ldr	r3, [pc, #68]	@ (8006e1c <xTaskIncrementTick+0x16c>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d007      	beq.n	8006dee <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8006dde:	2301      	movs	r3, #1
 8006de0:	617b      	str	r3, [r7, #20]
 8006de2:	e004      	b.n	8006dee <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006de4:	4b0e      	ldr	r3, [pc, #56]	@ (8006e20 <xTaskIncrementTick+0x170>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	3301      	adds	r3, #1
 8006dea:	4a0d      	ldr	r2, [pc, #52]	@ (8006e20 <xTaskIncrementTick+0x170>)
 8006dec:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006dee:	697b      	ldr	r3, [r7, #20]
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3718      	adds	r7, #24
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}
 8006df8:	20000f90 	.word	0x20000f90
 8006dfc:	20000f6c 	.word	0x20000f6c
 8006e00:	20000f20 	.word	0x20000f20
 8006e04:	20000f24 	.word	0x20000f24
 8006e08:	20000f80 	.word	0x20000f80
 8006e0c:	20000f88 	.word	0x20000f88
 8006e10:	20000f70 	.word	0x20000f70
 8006e14:	20000a98 	.word	0x20000a98
 8006e18:	20000a94 	.word	0x20000a94
 8006e1c:	20000f7c 	.word	0x20000f7c
 8006e20:	20000f78 	.word	0x20000f78

08006e24 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b084      	sub	sp, #16
 8006e28:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006e2a:	4b37      	ldr	r3, [pc, #220]	@ (8006f08 <vTaskSwitchContext+0xe4>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d003      	beq.n	8006e3a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006e32:	4b36      	ldr	r3, [pc, #216]	@ (8006f0c <vTaskSwitchContext+0xe8>)
 8006e34:	2201      	movs	r2, #1
 8006e36:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006e38:	e062      	b.n	8006f00 <vTaskSwitchContext+0xdc>
		xYieldPending = pdFALSE;
 8006e3a:	4b34      	ldr	r3, [pc, #208]	@ (8006f0c <vTaskSwitchContext+0xe8>)
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8006e40:	f7fa fe2a 	bl	8001a98 <getRunTimeCounterValue>
 8006e44:	4603      	mov	r3, r0
 8006e46:	4a32      	ldr	r2, [pc, #200]	@ (8006f10 <vTaskSwitchContext+0xec>)
 8006e48:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8006e4a:	4b31      	ldr	r3, [pc, #196]	@ (8006f10 <vTaskSwitchContext+0xec>)
 8006e4c:	681a      	ldr	r2, [r3, #0]
 8006e4e:	4b31      	ldr	r3, [pc, #196]	@ (8006f14 <vTaskSwitchContext+0xf0>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d90b      	bls.n	8006e6e <vTaskSwitchContext+0x4a>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8006e56:	4b30      	ldr	r3, [pc, #192]	@ (8006f18 <vTaskSwitchContext+0xf4>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
 8006e5e:	4a2c      	ldr	r2, [pc, #176]	@ (8006f10 <vTaskSwitchContext+0xec>)
 8006e60:	6810      	ldr	r0, [r2, #0]
 8006e62:	4a2c      	ldr	r2, [pc, #176]	@ (8006f14 <vTaskSwitchContext+0xf0>)
 8006e64:	6812      	ldr	r2, [r2, #0]
 8006e66:	1a82      	subs	r2, r0, r2
 8006e68:	440a      	add	r2, r1
 8006e6a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
			ulTaskSwitchedInTime = ulTotalRunTime;
 8006e6e:	4b28      	ldr	r3, [pc, #160]	@ (8006f10 <vTaskSwitchContext+0xec>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a28      	ldr	r2, [pc, #160]	@ (8006f14 <vTaskSwitchContext+0xf0>)
 8006e74:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e76:	4b29      	ldr	r3, [pc, #164]	@ (8006f1c <vTaskSwitchContext+0xf8>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	60fb      	str	r3, [r7, #12]
 8006e7c:	e011      	b.n	8006ea2 <vTaskSwitchContext+0x7e>
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d10b      	bne.n	8006e9c <vTaskSwitchContext+0x78>
	__asm volatile
 8006e84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e88:	f383 8811 	msr	BASEPRI, r3
 8006e8c:	f3bf 8f6f 	isb	sy
 8006e90:	f3bf 8f4f 	dsb	sy
 8006e94:	607b      	str	r3, [r7, #4]
}
 8006e96:	bf00      	nop
 8006e98:	bf00      	nop
 8006e9a:	e7fd      	b.n	8006e98 <vTaskSwitchContext+0x74>
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	3b01      	subs	r3, #1
 8006ea0:	60fb      	str	r3, [r7, #12]
 8006ea2:	491f      	ldr	r1, [pc, #124]	@ (8006f20 <vTaskSwitchContext+0xfc>)
 8006ea4:	68fa      	ldr	r2, [r7, #12]
 8006ea6:	4613      	mov	r3, r2
 8006ea8:	009b      	lsls	r3, r3, #2
 8006eaa:	4413      	add	r3, r2
 8006eac:	009b      	lsls	r3, r3, #2
 8006eae:	440b      	add	r3, r1
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d0e3      	beq.n	8006e7e <vTaskSwitchContext+0x5a>
 8006eb6:	68fa      	ldr	r2, [r7, #12]
 8006eb8:	4613      	mov	r3, r2
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	4413      	add	r3, r2
 8006ebe:	009b      	lsls	r3, r3, #2
 8006ec0:	4a17      	ldr	r2, [pc, #92]	@ (8006f20 <vTaskSwitchContext+0xfc>)
 8006ec2:	4413      	add	r3, r2
 8006ec4:	60bb      	str	r3, [r7, #8]
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	685a      	ldr	r2, [r3, #4]
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	605a      	str	r2, [r3, #4]
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	685a      	ldr	r2, [r3, #4]
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	3308      	adds	r3, #8
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d104      	bne.n	8006ee6 <vTaskSwitchContext+0xc2>
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	685a      	ldr	r2, [r3, #4]
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	605a      	str	r2, [r3, #4]
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	68db      	ldr	r3, [r3, #12]
 8006eec:	4a0a      	ldr	r2, [pc, #40]	@ (8006f18 <vTaskSwitchContext+0xf4>)
 8006eee:	6013      	str	r3, [r2, #0]
 8006ef0:	4a0a      	ldr	r2, [pc, #40]	@ (8006f1c <vTaskSwitchContext+0xf8>)
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006ef6:	4b08      	ldr	r3, [pc, #32]	@ (8006f18 <vTaskSwitchContext+0xf4>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	3384      	adds	r3, #132	@ 0x84
 8006efc:	4a09      	ldr	r2, [pc, #36]	@ (8006f24 <vTaskSwitchContext+0x100>)
 8006efe:	6013      	str	r3, [r2, #0]
}
 8006f00:	bf00      	nop
 8006f02:	3710      	adds	r7, #16
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}
 8006f08:	20000f90 	.word	0x20000f90
 8006f0c:	20000f7c 	.word	0x20000f7c
 8006f10:	20000f98 	.word	0x20000f98
 8006f14:	20000f94 	.word	0x20000f94
 8006f18:	20000a94 	.word	0x20000a94
 8006f1c:	20000f70 	.word	0x20000f70
 8006f20:	20000a98 	.word	0x20000a98
 8006f24:	20000010 	.word	0x20000010

08006f28 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b084      	sub	sp, #16
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d10b      	bne.n	8006f50 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006f38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f3c:	f383 8811 	msr	BASEPRI, r3
 8006f40:	f3bf 8f6f 	isb	sy
 8006f44:	f3bf 8f4f 	dsb	sy
 8006f48:	60fb      	str	r3, [r7, #12]
}
 8006f4a:	bf00      	nop
 8006f4c:	bf00      	nop
 8006f4e:	e7fd      	b.n	8006f4c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006f50:	4b07      	ldr	r3, [pc, #28]	@ (8006f70 <vTaskPlaceOnEventList+0x48>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	3318      	adds	r3, #24
 8006f56:	4619      	mov	r1, r3
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f7fe fb5c 	bl	8005616 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006f5e:	2101      	movs	r1, #1
 8006f60:	6838      	ldr	r0, [r7, #0]
 8006f62:	f000 fe1f 	bl	8007ba4 <prvAddCurrentTaskToDelayedList>
}
 8006f66:	bf00      	nop
 8006f68:	3710      	adds	r7, #16
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop
 8006f70:	20000a94 	.word	0x20000a94

08006f74 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b086      	sub	sp, #24
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	60f8      	str	r0, [r7, #12]
 8006f7c:	60b9      	str	r1, [r7, #8]
 8006f7e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d10b      	bne.n	8006f9e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006f86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f8a:	f383 8811 	msr	BASEPRI, r3
 8006f8e:	f3bf 8f6f 	isb	sy
 8006f92:	f3bf 8f4f 	dsb	sy
 8006f96:	617b      	str	r3, [r7, #20]
}
 8006f98:	bf00      	nop
 8006f9a:	bf00      	nop
 8006f9c:	e7fd      	b.n	8006f9a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006f9e:	4b0a      	ldr	r3, [pc, #40]	@ (8006fc8 <vTaskPlaceOnEventListRestricted+0x54>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	3318      	adds	r3, #24
 8006fa4:	4619      	mov	r1, r3
 8006fa6:	68f8      	ldr	r0, [r7, #12]
 8006fa8:	f7fe fb11 	bl	80055ce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d002      	beq.n	8006fb8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006fb2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006fb6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006fb8:	6879      	ldr	r1, [r7, #4]
 8006fba:	68b8      	ldr	r0, [r7, #8]
 8006fbc:	f000 fdf2 	bl	8007ba4 <prvAddCurrentTaskToDelayedList>
	}
 8006fc0:	bf00      	nop
 8006fc2:	3718      	adds	r7, #24
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}
 8006fc8:	20000a94 	.word	0x20000a94

08006fcc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b086      	sub	sp, #24
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	68db      	ldr	r3, [r3, #12]
 8006fd8:	68db      	ldr	r3, [r3, #12]
 8006fda:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d10b      	bne.n	8006ffa <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006fe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fe6:	f383 8811 	msr	BASEPRI, r3
 8006fea:	f3bf 8f6f 	isb	sy
 8006fee:	f3bf 8f4f 	dsb	sy
 8006ff2:	60fb      	str	r3, [r7, #12]
}
 8006ff4:	bf00      	nop
 8006ff6:	bf00      	nop
 8006ff8:	e7fd      	b.n	8006ff6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	3318      	adds	r3, #24
 8006ffe:	4618      	mov	r0, r3
 8007000:	f7fe fb42 	bl	8005688 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007004:	4b1d      	ldr	r3, [pc, #116]	@ (800707c <xTaskRemoveFromEventList+0xb0>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d11d      	bne.n	8007048 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	3304      	adds	r3, #4
 8007010:	4618      	mov	r0, r3
 8007012:	f7fe fb39 	bl	8005688 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800701a:	4b19      	ldr	r3, [pc, #100]	@ (8007080 <xTaskRemoveFromEventList+0xb4>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	429a      	cmp	r2, r3
 8007020:	d903      	bls.n	800702a <xTaskRemoveFromEventList+0x5e>
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007026:	4a16      	ldr	r2, [pc, #88]	@ (8007080 <xTaskRemoveFromEventList+0xb4>)
 8007028:	6013      	str	r3, [r2, #0]
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800702e:	4613      	mov	r3, r2
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	4413      	add	r3, r2
 8007034:	009b      	lsls	r3, r3, #2
 8007036:	4a13      	ldr	r2, [pc, #76]	@ (8007084 <xTaskRemoveFromEventList+0xb8>)
 8007038:	441a      	add	r2, r3
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	3304      	adds	r3, #4
 800703e:	4619      	mov	r1, r3
 8007040:	4610      	mov	r0, r2
 8007042:	f7fe fac4 	bl	80055ce <vListInsertEnd>
 8007046:	e005      	b.n	8007054 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	3318      	adds	r3, #24
 800704c:	4619      	mov	r1, r3
 800704e:	480e      	ldr	r0, [pc, #56]	@ (8007088 <xTaskRemoveFromEventList+0xbc>)
 8007050:	f7fe fabd 	bl	80055ce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007058:	4b0c      	ldr	r3, [pc, #48]	@ (800708c <xTaskRemoveFromEventList+0xc0>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800705e:	429a      	cmp	r2, r3
 8007060:	d905      	bls.n	800706e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007062:	2301      	movs	r3, #1
 8007064:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007066:	4b0a      	ldr	r3, [pc, #40]	@ (8007090 <xTaskRemoveFromEventList+0xc4>)
 8007068:	2201      	movs	r2, #1
 800706a:	601a      	str	r2, [r3, #0]
 800706c:	e001      	b.n	8007072 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800706e:	2300      	movs	r3, #0
 8007070:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007072:	697b      	ldr	r3, [r7, #20]
}
 8007074:	4618      	mov	r0, r3
 8007076:	3718      	adds	r7, #24
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}
 800707c:	20000f90 	.word	0x20000f90
 8007080:	20000f70 	.word	0x20000f70
 8007084:	20000a98 	.word	0x20000a98
 8007088:	20000f28 	.word	0x20000f28
 800708c:	20000a94 	.word	0x20000a94
 8007090:	20000f7c 	.word	0x20000f7c

08007094 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007094:	b480      	push	{r7}
 8007096:	b083      	sub	sp, #12
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800709c:	4b06      	ldr	r3, [pc, #24]	@ (80070b8 <vTaskInternalSetTimeOutState+0x24>)
 800709e:	681a      	ldr	r2, [r3, #0]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80070a4:	4b05      	ldr	r3, [pc, #20]	@ (80070bc <vTaskInternalSetTimeOutState+0x28>)
 80070a6:	681a      	ldr	r2, [r3, #0]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	605a      	str	r2, [r3, #4]
}
 80070ac:	bf00      	nop
 80070ae:	370c      	adds	r7, #12
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr
 80070b8:	20000f80 	.word	0x20000f80
 80070bc:	20000f6c 	.word	0x20000f6c

080070c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b088      	sub	sp, #32
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d10b      	bne.n	80070e8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80070d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070d4:	f383 8811 	msr	BASEPRI, r3
 80070d8:	f3bf 8f6f 	isb	sy
 80070dc:	f3bf 8f4f 	dsb	sy
 80070e0:	613b      	str	r3, [r7, #16]
}
 80070e2:	bf00      	nop
 80070e4:	bf00      	nop
 80070e6:	e7fd      	b.n	80070e4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d10b      	bne.n	8007106 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80070ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070f2:	f383 8811 	msr	BASEPRI, r3
 80070f6:	f3bf 8f6f 	isb	sy
 80070fa:	f3bf 8f4f 	dsb	sy
 80070fe:	60fb      	str	r3, [r7, #12]
}
 8007100:	bf00      	nop
 8007102:	bf00      	nop
 8007104:	e7fd      	b.n	8007102 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007106:	f001 faaf 	bl	8008668 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800710a:	4b1d      	ldr	r3, [pc, #116]	@ (8007180 <xTaskCheckForTimeOut+0xc0>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	69ba      	ldr	r2, [r7, #24]
 8007116:	1ad3      	subs	r3, r2, r3
 8007118:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007122:	d102      	bne.n	800712a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007124:	2300      	movs	r3, #0
 8007126:	61fb      	str	r3, [r7, #28]
 8007128:	e023      	b.n	8007172 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681a      	ldr	r2, [r3, #0]
 800712e:	4b15      	ldr	r3, [pc, #84]	@ (8007184 <xTaskCheckForTimeOut+0xc4>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	429a      	cmp	r2, r3
 8007134:	d007      	beq.n	8007146 <xTaskCheckForTimeOut+0x86>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	69ba      	ldr	r2, [r7, #24]
 800713c:	429a      	cmp	r2, r3
 800713e:	d302      	bcc.n	8007146 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007140:	2301      	movs	r3, #1
 8007142:	61fb      	str	r3, [r7, #28]
 8007144:	e015      	b.n	8007172 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	697a      	ldr	r2, [r7, #20]
 800714c:	429a      	cmp	r2, r3
 800714e:	d20b      	bcs.n	8007168 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	681a      	ldr	r2, [r3, #0]
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	1ad2      	subs	r2, r2, r3
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f7ff ff99 	bl	8007094 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007162:	2300      	movs	r3, #0
 8007164:	61fb      	str	r3, [r7, #28]
 8007166:	e004      	b.n	8007172 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	2200      	movs	r2, #0
 800716c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800716e:	2301      	movs	r3, #1
 8007170:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007172:	f001 faab 	bl	80086cc <vPortExitCritical>

	return xReturn;
 8007176:	69fb      	ldr	r3, [r7, #28]
}
 8007178:	4618      	mov	r0, r3
 800717a:	3720      	adds	r7, #32
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}
 8007180:	20000f6c 	.word	0x20000f6c
 8007184:	20000f80 	.word	0x20000f80

08007188 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007188:	b480      	push	{r7}
 800718a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800718c:	4b03      	ldr	r3, [pc, #12]	@ (800719c <vTaskMissedYield+0x14>)
 800718e:	2201      	movs	r2, #1
 8007190:	601a      	str	r2, [r3, #0]
}
 8007192:	bf00      	nop
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr
 800719c:	20000f7c 	.word	0x20000f7c

080071a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b082      	sub	sp, #8
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80071a8:	f000 f896 	bl	80072d8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80071ac:	4b06      	ldr	r3, [pc, #24]	@ (80071c8 <prvIdleTask+0x28>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d9f9      	bls.n	80071a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80071b4:	4b05      	ldr	r3, [pc, #20]	@ (80071cc <prvIdleTask+0x2c>)
 80071b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80071ba:	601a      	str	r2, [r3, #0]
 80071bc:	f3bf 8f4f 	dsb	sy
 80071c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80071c4:	e7f0      	b.n	80071a8 <prvIdleTask+0x8>
 80071c6:	bf00      	nop
 80071c8:	20000a98 	.word	0x20000a98
 80071cc:	e000ed04 	.word	0xe000ed04

080071d0 <vTaskSetThreadLocalStoragePointer>:
/*-----------------------------------------------------------*/

#if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )

	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue )
	{
 80071d0:	b480      	push	{r7}
 80071d2:	b087      	sub	sp, #28
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	60f8      	str	r0, [r7, #12]
 80071d8:	60b9      	str	r1, [r7, #8]
 80071da:	607a      	str	r2, [r7, #4]
	TCB_t *pxTCB;

		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	2b09      	cmp	r3, #9
 80071e0:	dc0d      	bgt.n	80071fe <vTaskSetThreadLocalStoragePointer+0x2e>
		{
			pxTCB = prvGetTCBFromHandle( xTaskToSet );
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d102      	bne.n	80071ee <vTaskSetThreadLocalStoragePointer+0x1e>
 80071e8:	4b08      	ldr	r3, [pc, #32]	@ (800720c <vTaskSetThreadLocalStoragePointer+0x3c>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	e000      	b.n	80071f0 <vTaskSetThreadLocalStoragePointer+0x20>
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	617b      	str	r3, [r7, #20]
			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	68ba      	ldr	r2, [r7, #8]
 80071f6:	3216      	adds	r2, #22
 80071f8:	6879      	ldr	r1, [r7, #4]
 80071fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		}
	}
 80071fe:	bf00      	nop
 8007200:	371c      	adds	r7, #28
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr
 800720a:	bf00      	nop
 800720c:	20000a94 	.word	0x20000a94

08007210 <pvTaskGetThreadLocalStoragePointer>:
/*-----------------------------------------------------------*/

#if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )

	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
	{
 8007210:	b480      	push	{r7}
 8007212:	b085      	sub	sp, #20
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
 8007218:	6039      	str	r1, [r7, #0]
	void *pvReturn = NULL;
 800721a:	2300      	movs	r3, #0
 800721c:	60fb      	str	r3, [r7, #12]
	TCB_t *pxTCB;

		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	2b09      	cmp	r3, #9
 8007222:	dc0e      	bgt.n	8007242 <pvTaskGetThreadLocalStoragePointer+0x32>
		{
			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d102      	bne.n	8007230 <pvTaskGetThreadLocalStoragePointer+0x20>
 800722a:	4b0a      	ldr	r3, [pc, #40]	@ (8007254 <pvTaskGetThreadLocalStoragePointer+0x44>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	e000      	b.n	8007232 <pvTaskGetThreadLocalStoragePointer+0x22>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	60bb      	str	r3, [r7, #8]
			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	683a      	ldr	r2, [r7, #0]
 8007238:	3216      	adds	r2, #22
 800723a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800723e:	60fb      	str	r3, [r7, #12]
 8007240:	e001      	b.n	8007246 <pvTaskGetThreadLocalStoragePointer+0x36>
		}
		else
		{
			pvReturn = NULL;
 8007242:	2300      	movs	r3, #0
 8007244:	60fb      	str	r3, [r7, #12]
		}

		return pvReturn;
 8007246:	68fb      	ldr	r3, [r7, #12]
	}
 8007248:	4618      	mov	r0, r3
 800724a:	3714      	adds	r7, #20
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr
 8007254:	20000a94 	.word	0x20000a94

08007258 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b082      	sub	sp, #8
 800725c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800725e:	2300      	movs	r3, #0
 8007260:	607b      	str	r3, [r7, #4]
 8007262:	e00c      	b.n	800727e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007264:	687a      	ldr	r2, [r7, #4]
 8007266:	4613      	mov	r3, r2
 8007268:	009b      	lsls	r3, r3, #2
 800726a:	4413      	add	r3, r2
 800726c:	009b      	lsls	r3, r3, #2
 800726e:	4a12      	ldr	r2, [pc, #72]	@ (80072b8 <prvInitialiseTaskLists+0x60>)
 8007270:	4413      	add	r3, r2
 8007272:	4618      	mov	r0, r3
 8007274:	f7fe f97e 	bl	8005574 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	3301      	adds	r3, #1
 800727c:	607b      	str	r3, [r7, #4]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2b37      	cmp	r3, #55	@ 0x37
 8007282:	d9ef      	bls.n	8007264 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007284:	480d      	ldr	r0, [pc, #52]	@ (80072bc <prvInitialiseTaskLists+0x64>)
 8007286:	f7fe f975 	bl	8005574 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800728a:	480d      	ldr	r0, [pc, #52]	@ (80072c0 <prvInitialiseTaskLists+0x68>)
 800728c:	f7fe f972 	bl	8005574 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007290:	480c      	ldr	r0, [pc, #48]	@ (80072c4 <prvInitialiseTaskLists+0x6c>)
 8007292:	f7fe f96f 	bl	8005574 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007296:	480c      	ldr	r0, [pc, #48]	@ (80072c8 <prvInitialiseTaskLists+0x70>)
 8007298:	f7fe f96c 	bl	8005574 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800729c:	480b      	ldr	r0, [pc, #44]	@ (80072cc <prvInitialiseTaskLists+0x74>)
 800729e:	f7fe f969 	bl	8005574 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80072a2:	4b0b      	ldr	r3, [pc, #44]	@ (80072d0 <prvInitialiseTaskLists+0x78>)
 80072a4:	4a05      	ldr	r2, [pc, #20]	@ (80072bc <prvInitialiseTaskLists+0x64>)
 80072a6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80072a8:	4b0a      	ldr	r3, [pc, #40]	@ (80072d4 <prvInitialiseTaskLists+0x7c>)
 80072aa:	4a05      	ldr	r2, [pc, #20]	@ (80072c0 <prvInitialiseTaskLists+0x68>)
 80072ac:	601a      	str	r2, [r3, #0]
}
 80072ae:	bf00      	nop
 80072b0:	3708      	adds	r7, #8
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}
 80072b6:	bf00      	nop
 80072b8:	20000a98 	.word	0x20000a98
 80072bc:	20000ef8 	.word	0x20000ef8
 80072c0:	20000f0c 	.word	0x20000f0c
 80072c4:	20000f28 	.word	0x20000f28
 80072c8:	20000f3c 	.word	0x20000f3c
 80072cc:	20000f54 	.word	0x20000f54
 80072d0:	20000f20 	.word	0x20000f20
 80072d4:	20000f24 	.word	0x20000f24

080072d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b082      	sub	sp, #8
 80072dc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80072de:	e019      	b.n	8007314 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80072e0:	f001 f9c2 	bl	8008668 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072e4:	4b10      	ldr	r3, [pc, #64]	@ (8007328 <prvCheckTasksWaitingTermination+0x50>)
 80072e6:	68db      	ldr	r3, [r3, #12]
 80072e8:	68db      	ldr	r3, [r3, #12]
 80072ea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	3304      	adds	r3, #4
 80072f0:	4618      	mov	r0, r3
 80072f2:	f7fe f9c9 	bl	8005688 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80072f6:	4b0d      	ldr	r3, [pc, #52]	@ (800732c <prvCheckTasksWaitingTermination+0x54>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	3b01      	subs	r3, #1
 80072fc:	4a0b      	ldr	r2, [pc, #44]	@ (800732c <prvCheckTasksWaitingTermination+0x54>)
 80072fe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007300:	4b0b      	ldr	r3, [pc, #44]	@ (8007330 <prvCheckTasksWaitingTermination+0x58>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	3b01      	subs	r3, #1
 8007306:	4a0a      	ldr	r2, [pc, #40]	@ (8007330 <prvCheckTasksWaitingTermination+0x58>)
 8007308:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800730a:	f001 f9df 	bl	80086cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 f8e6 	bl	80074e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007314:	4b06      	ldr	r3, [pc, #24]	@ (8007330 <prvCheckTasksWaitingTermination+0x58>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d1e1      	bne.n	80072e0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800731c:	bf00      	nop
 800731e:	bf00      	nop
 8007320:	3708      	adds	r7, #8
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
 8007326:	bf00      	nop
 8007328:	20000f3c 	.word	0x20000f3c
 800732c:	20000f68 	.word	0x20000f68
 8007330:	20000f50 	.word	0x20000f50

08007334 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 8007334:	b580      	push	{r7, lr}
 8007336:	b086      	sub	sp, #24
 8007338:	af00      	add	r7, sp, #0
 800733a:	60f8      	str	r0, [r7, #12]
 800733c:	60b9      	str	r1, [r7, #8]
 800733e:	607a      	str	r2, [r7, #4]
 8007340:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d102      	bne.n	800734e <vTaskGetInfo+0x1a>
 8007348:	4b2d      	ldr	r3, [pc, #180]	@ (8007400 <vTaskGetInfo+0xcc>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	e000      	b.n	8007350 <vTaskGetInfo+0x1c>
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	697a      	ldr	r2, [r7, #20]
 8007356:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	615a      	str	r2, [r3, #20]
		}
		#endif

		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 800738c:	78fb      	ldrb	r3, [r7, #3]
 800738e:	2b05      	cmp	r3, #5
 8007390:	d01a      	beq.n	80073c8 <vTaskGetInfo+0x94>
		{
			if( pxTCB == pxCurrentTCB )
 8007392:	4b1b      	ldr	r3, [pc, #108]	@ (8007400 <vTaskGetInfo+0xcc>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	697a      	ldr	r2, [r7, #20]
 8007398:	429a      	cmp	r2, r3
 800739a:	d103      	bne.n	80073a4 <vTaskGetInfo+0x70>
			{
				pxTaskStatus->eCurrentState = eRunning;
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	2200      	movs	r2, #0
 80073a0:	731a      	strb	r2, [r3, #12]
 80073a2:	e018      	b.n	80073d6 <vTaskGetInfo+0xa2>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	78fa      	ldrb	r2, [r7, #3]
 80073a8:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 80073aa:	78fb      	ldrb	r3, [r7, #3]
 80073ac:	2b03      	cmp	r3, #3
 80073ae:	d112      	bne.n	80073d6 <vTaskGetInfo+0xa2>
					{
						vTaskSuspendAll();
 80073b0:	f7ff fb32 	bl	8006a18 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d002      	beq.n	80073c2 <vTaskGetInfo+0x8e>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	2202      	movs	r2, #2
 80073c0:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 80073c2:	f7ff fb37 	bl	8006a34 <xTaskResumeAll>
 80073c6:	e006      	b.n	80073d6 <vTaskGetInfo+0xa2>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 80073c8:	6978      	ldr	r0, [r7, #20]
 80073ca:	f7ff fa4b 	bl	8006864 <eTaskGetState>
 80073ce:	4603      	mov	r3, r0
 80073d0:	461a      	mov	r2, r3
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d009      	beq.n	80073f0 <vTaskGetInfo+0xbc>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073e0:	4618      	mov	r0, r3
 80073e2:	f000 f861 	bl	80074a8 <prvTaskCheckFreeStackSpace>
 80073e6:	4603      	mov	r3, r0
 80073e8:	461a      	mov	r2, r3
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 80073ee:	e002      	b.n	80073f6 <vTaskGetInfo+0xc2>
			pxTaskStatus->usStackHighWaterMark = 0;
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	2200      	movs	r2, #0
 80073f4:	841a      	strh	r2, [r3, #32]
	}
 80073f6:	bf00      	nop
 80073f8:	3718      	adds	r7, #24
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}
 80073fe:	bf00      	nop
 8007400:	20000a94 	.word	0x20000a94

08007404 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 8007404:	b580      	push	{r7, lr}
 8007406:	b08a      	sub	sp, #40	@ 0x28
 8007408:	af00      	add	r7, sp, #0
 800740a:	60f8      	str	r0, [r7, #12]
 800740c:	60b9      	str	r1, [r7, #8]
 800740e:	4613      	mov	r3, r2
 8007410:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 8007412:	2300      	movs	r3, #0
 8007414:	627b      	str	r3, [r7, #36]	@ 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d03f      	beq.n	800749e <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	623b      	str	r3, [r7, #32]
 8007422:	6a3b      	ldr	r3, [r7, #32]
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	685a      	ldr	r2, [r3, #4]
 8007428:	6a3b      	ldr	r3, [r7, #32]
 800742a:	605a      	str	r2, [r3, #4]
 800742c:	6a3b      	ldr	r3, [r7, #32]
 800742e:	685a      	ldr	r2, [r3, #4]
 8007430:	6a3b      	ldr	r3, [r7, #32]
 8007432:	3308      	adds	r3, #8
 8007434:	429a      	cmp	r2, r3
 8007436:	d104      	bne.n	8007442 <prvListTasksWithinSingleList+0x3e>
 8007438:	6a3b      	ldr	r3, [r7, #32]
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	685a      	ldr	r2, [r3, #4]
 800743e:	6a3b      	ldr	r3, [r7, #32]
 8007440:	605a      	str	r2, [r3, #4]
 8007442:	6a3b      	ldr	r3, [r7, #32]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	68db      	ldr	r3, [r3, #12]
 8007448:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	61bb      	str	r3, [r7, #24]
 800744e:	69bb      	ldr	r3, [r7, #24]
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	685a      	ldr	r2, [r3, #4]
 8007454:	69bb      	ldr	r3, [r7, #24]
 8007456:	605a      	str	r2, [r3, #4]
 8007458:	69bb      	ldr	r3, [r7, #24]
 800745a:	685a      	ldr	r2, [r3, #4]
 800745c:	69bb      	ldr	r3, [r7, #24]
 800745e:	3308      	adds	r3, #8
 8007460:	429a      	cmp	r2, r3
 8007462:	d104      	bne.n	800746e <prvListTasksWithinSingleList+0x6a>
 8007464:	69bb      	ldr	r3, [r7, #24]
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	685a      	ldr	r2, [r3, #4]
 800746a:	69bb      	ldr	r3, [r7, #24]
 800746c:	605a      	str	r2, [r3, #4]
 800746e:	69bb      	ldr	r3, [r7, #24]
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	68db      	ldr	r3, [r3, #12]
 8007474:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 8007476:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007478:	4613      	mov	r3, r2
 800747a:	00db      	lsls	r3, r3, #3
 800747c:	4413      	add	r3, r2
 800747e:	009b      	lsls	r3, r3, #2
 8007480:	461a      	mov	r2, r3
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	1899      	adds	r1, r3, r2
 8007486:	79fb      	ldrb	r3, [r7, #7]
 8007488:	2201      	movs	r2, #1
 800748a:	6978      	ldr	r0, [r7, #20]
 800748c:	f7ff ff52 	bl	8007334 <vTaskGetInfo>
				uxTask++;
 8007490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007492:	3301      	adds	r3, #1
 8007494:	627b      	str	r3, [r7, #36]	@ 0x24
			} while( pxNextTCB != pxFirstTCB );
 8007496:	697a      	ldr	r2, [r7, #20]
 8007498:	69fb      	ldr	r3, [r7, #28]
 800749a:	429a      	cmp	r2, r3
 800749c:	d1d5      	bne.n	800744a <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 800749e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3728      	adds	r7, #40	@ 0x28
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}

080074a8 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 80074a8:	b480      	push	{r7}
 80074aa:	b085      	sub	sp, #20
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 80074b0:	2300      	movs	r3, #0
 80074b2:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80074b4:	e005      	b.n	80074c2 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	3301      	adds	r3, #1
 80074ba:	607b      	str	r3, [r7, #4]
			ulCount++;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	3301      	adds	r3, #1
 80074c0:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	781b      	ldrb	r3, [r3, #0]
 80074c6:	2ba5      	cmp	r3, #165	@ 0xa5
 80074c8:	d0f5      	beq.n	80074b6 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	089b      	lsrs	r3, r3, #2
 80074ce:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	b29b      	uxth	r3, r3
	}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3714      	adds	r7, #20
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr

080074e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b084      	sub	sp, #16
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	3384      	adds	r3, #132	@ 0x84
 80074ec:	4618      	mov	r0, r3
 80074ee:	f001 fdb5 	bl	800905c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d108      	bne.n	800750e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007500:	4618      	mov	r0, r3
 8007502:	f001 faa1 	bl	8008a48 <vPortFree>
				vPortFree( pxTCB );
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f001 fa9e 	bl	8008a48 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800750c:	e019      	b.n	8007542 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 8007514:	2b01      	cmp	r3, #1
 8007516:	d103      	bne.n	8007520 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f001 fa95 	bl	8008a48 <vPortFree>
	}
 800751e:	e010      	b.n	8007542 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 8007526:	2b02      	cmp	r3, #2
 8007528:	d00b      	beq.n	8007542 <prvDeleteTCB+0x62>
	__asm volatile
 800752a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800752e:	f383 8811 	msr	BASEPRI, r3
 8007532:	f3bf 8f6f 	isb	sy
 8007536:	f3bf 8f4f 	dsb	sy
 800753a:	60fb      	str	r3, [r7, #12]
}
 800753c:	bf00      	nop
 800753e:	bf00      	nop
 8007540:	e7fd      	b.n	800753e <prvDeleteTCB+0x5e>
	}
 8007542:	bf00      	nop
 8007544:	3710      	adds	r7, #16
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}
	...

0800754c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800754c:	b480      	push	{r7}
 800754e:	b083      	sub	sp, #12
 8007550:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007552:	4b0c      	ldr	r3, [pc, #48]	@ (8007584 <prvResetNextTaskUnblockTime+0x38>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d104      	bne.n	8007566 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800755c:	4b0a      	ldr	r3, [pc, #40]	@ (8007588 <prvResetNextTaskUnblockTime+0x3c>)
 800755e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007562:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007564:	e008      	b.n	8007578 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007566:	4b07      	ldr	r3, [pc, #28]	@ (8007584 <prvResetNextTaskUnblockTime+0x38>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	68db      	ldr	r3, [r3, #12]
 800756c:	68db      	ldr	r3, [r3, #12]
 800756e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	4a04      	ldr	r2, [pc, #16]	@ (8007588 <prvResetNextTaskUnblockTime+0x3c>)
 8007576:	6013      	str	r3, [r2, #0]
}
 8007578:	bf00      	nop
 800757a:	370c      	adds	r7, #12
 800757c:	46bd      	mov	sp, r7
 800757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007582:	4770      	bx	lr
 8007584:	20000f20 	.word	0x20000f20
 8007588:	20000f88 	.word	0x20000f88

0800758c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800758c:	b480      	push	{r7}
 800758e:	b083      	sub	sp, #12
 8007590:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8007592:	4b05      	ldr	r3, [pc, #20]	@ (80075a8 <xTaskGetCurrentTaskHandle+0x1c>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	607b      	str	r3, [r7, #4]

		return xReturn;
 8007598:	687b      	ldr	r3, [r7, #4]
	}
 800759a:	4618      	mov	r0, r3
 800759c:	370c      	adds	r7, #12
 800759e:	46bd      	mov	sp, r7
 80075a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a4:	4770      	bx	lr
 80075a6:	bf00      	nop
 80075a8:	20000a94 	.word	0x20000a94

080075ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80075ac:	b480      	push	{r7}
 80075ae:	b083      	sub	sp, #12
 80075b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80075b2:	4b0b      	ldr	r3, [pc, #44]	@ (80075e0 <xTaskGetSchedulerState+0x34>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d102      	bne.n	80075c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80075ba:	2301      	movs	r3, #1
 80075bc:	607b      	str	r3, [r7, #4]
 80075be:	e008      	b.n	80075d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075c0:	4b08      	ldr	r3, [pc, #32]	@ (80075e4 <xTaskGetSchedulerState+0x38>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d102      	bne.n	80075ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80075c8:	2302      	movs	r3, #2
 80075ca:	607b      	str	r3, [r7, #4]
 80075cc:	e001      	b.n	80075d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80075ce:	2300      	movs	r3, #0
 80075d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80075d2:	687b      	ldr	r3, [r7, #4]
	}
 80075d4:	4618      	mov	r0, r3
 80075d6:	370c      	adds	r7, #12
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr
 80075e0:	20000f74 	.word	0x20000f74
 80075e4:	20000f90 	.word	0x20000f90

080075e8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b084      	sub	sp, #16
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80075f4:	2300      	movs	r3, #0
 80075f6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d051      	beq.n	80076a2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007602:	4b2a      	ldr	r3, [pc, #168]	@ (80076ac <xTaskPriorityInherit+0xc4>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007608:	429a      	cmp	r2, r3
 800760a:	d241      	bcs.n	8007690 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	699b      	ldr	r3, [r3, #24]
 8007610:	2b00      	cmp	r3, #0
 8007612:	db06      	blt.n	8007622 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007614:	4b25      	ldr	r3, [pc, #148]	@ (80076ac <xTaskPriorityInherit+0xc4>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800761a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	6959      	ldr	r1, [r3, #20]
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800762a:	4613      	mov	r3, r2
 800762c:	009b      	lsls	r3, r3, #2
 800762e:	4413      	add	r3, r2
 8007630:	009b      	lsls	r3, r3, #2
 8007632:	4a1f      	ldr	r2, [pc, #124]	@ (80076b0 <xTaskPriorityInherit+0xc8>)
 8007634:	4413      	add	r3, r2
 8007636:	4299      	cmp	r1, r3
 8007638:	d122      	bne.n	8007680 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	3304      	adds	r3, #4
 800763e:	4618      	mov	r0, r3
 8007640:	f7fe f822 	bl	8005688 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007644:	4b19      	ldr	r3, [pc, #100]	@ (80076ac <xTaskPriorityInherit+0xc4>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007652:	4b18      	ldr	r3, [pc, #96]	@ (80076b4 <xTaskPriorityInherit+0xcc>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	429a      	cmp	r2, r3
 8007658:	d903      	bls.n	8007662 <xTaskPriorityInherit+0x7a>
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800765e:	4a15      	ldr	r2, [pc, #84]	@ (80076b4 <xTaskPriorityInherit+0xcc>)
 8007660:	6013      	str	r3, [r2, #0]
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007666:	4613      	mov	r3, r2
 8007668:	009b      	lsls	r3, r3, #2
 800766a:	4413      	add	r3, r2
 800766c:	009b      	lsls	r3, r3, #2
 800766e:	4a10      	ldr	r2, [pc, #64]	@ (80076b0 <xTaskPriorityInherit+0xc8>)
 8007670:	441a      	add	r2, r3
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	3304      	adds	r3, #4
 8007676:	4619      	mov	r1, r3
 8007678:	4610      	mov	r0, r2
 800767a:	f7fd ffa8 	bl	80055ce <vListInsertEnd>
 800767e:	e004      	b.n	800768a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007680:	4b0a      	ldr	r3, [pc, #40]	@ (80076ac <xTaskPriorityInherit+0xc4>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800768a:	2301      	movs	r3, #1
 800768c:	60fb      	str	r3, [r7, #12]
 800768e:	e008      	b.n	80076a2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007694:	4b05      	ldr	r3, [pc, #20]	@ (80076ac <xTaskPriorityInherit+0xc4>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800769a:	429a      	cmp	r2, r3
 800769c:	d201      	bcs.n	80076a2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800769e:	2301      	movs	r3, #1
 80076a0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80076a2:	68fb      	ldr	r3, [r7, #12]
	}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3710      	adds	r7, #16
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}
 80076ac:	20000a94 	.word	0x20000a94
 80076b0:	20000a98 	.word	0x20000a98
 80076b4:	20000f70 	.word	0x20000f70

080076b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b086      	sub	sp, #24
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80076c4:	2300      	movs	r3, #0
 80076c6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d058      	beq.n	8007780 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80076ce:	4b2f      	ldr	r3, [pc, #188]	@ (800778c <xTaskPriorityDisinherit+0xd4>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	693a      	ldr	r2, [r7, #16]
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d00b      	beq.n	80076f0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80076d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076dc:	f383 8811 	msr	BASEPRI, r3
 80076e0:	f3bf 8f6f 	isb	sy
 80076e4:	f3bf 8f4f 	dsb	sy
 80076e8:	60fb      	str	r3, [r7, #12]
}
 80076ea:	bf00      	nop
 80076ec:	bf00      	nop
 80076ee:	e7fd      	b.n	80076ec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d10b      	bne.n	8007710 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80076f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076fc:	f383 8811 	msr	BASEPRI, r3
 8007700:	f3bf 8f6f 	isb	sy
 8007704:	f3bf 8f4f 	dsb	sy
 8007708:	60bb      	str	r3, [r7, #8]
}
 800770a:	bf00      	nop
 800770c:	bf00      	nop
 800770e:	e7fd      	b.n	800770c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007714:	1e5a      	subs	r2, r3, #1
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	655a      	str	r2, [r3, #84]	@ 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007722:	429a      	cmp	r2, r3
 8007724:	d02c      	beq.n	8007780 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800772a:	2b00      	cmp	r3, #0
 800772c:	d128      	bne.n	8007780 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	3304      	adds	r3, #4
 8007732:	4618      	mov	r0, r3
 8007734:	f7fd ffa8 	bl	8005688 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800773c:	693b      	ldr	r3, [r7, #16]
 800773e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007744:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007750:	4b0f      	ldr	r3, [pc, #60]	@ (8007790 <xTaskPriorityDisinherit+0xd8>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	429a      	cmp	r2, r3
 8007756:	d903      	bls.n	8007760 <xTaskPriorityDisinherit+0xa8>
 8007758:	693b      	ldr	r3, [r7, #16]
 800775a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800775c:	4a0c      	ldr	r2, [pc, #48]	@ (8007790 <xTaskPriorityDisinherit+0xd8>)
 800775e:	6013      	str	r3, [r2, #0]
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007764:	4613      	mov	r3, r2
 8007766:	009b      	lsls	r3, r3, #2
 8007768:	4413      	add	r3, r2
 800776a:	009b      	lsls	r3, r3, #2
 800776c:	4a09      	ldr	r2, [pc, #36]	@ (8007794 <xTaskPriorityDisinherit+0xdc>)
 800776e:	441a      	add	r2, r3
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	3304      	adds	r3, #4
 8007774:	4619      	mov	r1, r3
 8007776:	4610      	mov	r0, r2
 8007778:	f7fd ff29 	bl	80055ce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800777c:	2301      	movs	r3, #1
 800777e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007780:	697b      	ldr	r3, [r7, #20]
	}
 8007782:	4618      	mov	r0, r3
 8007784:	3718      	adds	r7, #24
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}
 800778a:	bf00      	nop
 800778c:	20000a94 	.word	0x20000a94
 8007790:	20000f70 	.word	0x20000f70
 8007794:	20000a98 	.word	0x20000a98

08007798 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007798:	b580      	push	{r7, lr}
 800779a:	b088      	sub	sp, #32
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80077a6:	2301      	movs	r3, #1
 80077a8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d06c      	beq.n	800788a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80077b0:	69bb      	ldr	r3, [r7, #24]
 80077b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d10b      	bne.n	80077d0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80077b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077bc:	f383 8811 	msr	BASEPRI, r3
 80077c0:	f3bf 8f6f 	isb	sy
 80077c4:	f3bf 8f4f 	dsb	sy
 80077c8:	60fb      	str	r3, [r7, #12]
}
 80077ca:	bf00      	nop
 80077cc:	bf00      	nop
 80077ce:	e7fd      	b.n	80077cc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80077d0:	69bb      	ldr	r3, [r7, #24]
 80077d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077d4:	683a      	ldr	r2, [r7, #0]
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d902      	bls.n	80077e0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	61fb      	str	r3, [r7, #28]
 80077de:	e002      	b.n	80077e6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80077e0:	69bb      	ldr	r3, [r7, #24]
 80077e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077e4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80077e6:	69bb      	ldr	r3, [r7, #24]
 80077e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077ea:	69fa      	ldr	r2, [r7, #28]
 80077ec:	429a      	cmp	r2, r3
 80077ee:	d04c      	beq.n	800788a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80077f0:	69bb      	ldr	r3, [r7, #24]
 80077f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077f4:	697a      	ldr	r2, [r7, #20]
 80077f6:	429a      	cmp	r2, r3
 80077f8:	d147      	bne.n	800788a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80077fa:	4b26      	ldr	r3, [pc, #152]	@ (8007894 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	69ba      	ldr	r2, [r7, #24]
 8007800:	429a      	cmp	r2, r3
 8007802:	d10b      	bne.n	800781c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8007804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007808:	f383 8811 	msr	BASEPRI, r3
 800780c:	f3bf 8f6f 	isb	sy
 8007810:	f3bf 8f4f 	dsb	sy
 8007814:	60bb      	str	r3, [r7, #8]
}
 8007816:	bf00      	nop
 8007818:	bf00      	nop
 800781a:	e7fd      	b.n	8007818 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800781c:	69bb      	ldr	r3, [r7, #24]
 800781e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007820:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007822:	69bb      	ldr	r3, [r7, #24]
 8007824:	69fa      	ldr	r2, [r7, #28]
 8007826:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007828:	69bb      	ldr	r3, [r7, #24]
 800782a:	699b      	ldr	r3, [r3, #24]
 800782c:	2b00      	cmp	r3, #0
 800782e:	db04      	blt.n	800783a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007830:	69fb      	ldr	r3, [r7, #28]
 8007832:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007836:	69bb      	ldr	r3, [r7, #24]
 8007838:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800783a:	69bb      	ldr	r3, [r7, #24]
 800783c:	6959      	ldr	r1, [r3, #20]
 800783e:	693a      	ldr	r2, [r7, #16]
 8007840:	4613      	mov	r3, r2
 8007842:	009b      	lsls	r3, r3, #2
 8007844:	4413      	add	r3, r2
 8007846:	009b      	lsls	r3, r3, #2
 8007848:	4a13      	ldr	r2, [pc, #76]	@ (8007898 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800784a:	4413      	add	r3, r2
 800784c:	4299      	cmp	r1, r3
 800784e:	d11c      	bne.n	800788a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007850:	69bb      	ldr	r3, [r7, #24]
 8007852:	3304      	adds	r3, #4
 8007854:	4618      	mov	r0, r3
 8007856:	f7fd ff17 	bl	8005688 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800785a:	69bb      	ldr	r3, [r7, #24]
 800785c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800785e:	4b0f      	ldr	r3, [pc, #60]	@ (800789c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	429a      	cmp	r2, r3
 8007864:	d903      	bls.n	800786e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8007866:	69bb      	ldr	r3, [r7, #24]
 8007868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800786a:	4a0c      	ldr	r2, [pc, #48]	@ (800789c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800786c:	6013      	str	r3, [r2, #0]
 800786e:	69bb      	ldr	r3, [r7, #24]
 8007870:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007872:	4613      	mov	r3, r2
 8007874:	009b      	lsls	r3, r3, #2
 8007876:	4413      	add	r3, r2
 8007878:	009b      	lsls	r3, r3, #2
 800787a:	4a07      	ldr	r2, [pc, #28]	@ (8007898 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800787c:	441a      	add	r2, r3
 800787e:	69bb      	ldr	r3, [r7, #24]
 8007880:	3304      	adds	r3, #4
 8007882:	4619      	mov	r1, r3
 8007884:	4610      	mov	r0, r2
 8007886:	f7fd fea2 	bl	80055ce <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800788a:	bf00      	nop
 800788c:	3720      	adds	r7, #32
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}
 8007892:	bf00      	nop
 8007894:	20000a94 	.word	0x20000a94
 8007898:	20000a98 	.word	0x20000a98
 800789c:	20000f70 	.word	0x20000f70

080078a0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80078a0:	b480      	push	{r7}
 80078a2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80078a4:	4b07      	ldr	r3, [pc, #28]	@ (80078c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d004      	beq.n	80078b6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80078ac:	4b05      	ldr	r3, [pc, #20]	@ (80078c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80078b2:	3201      	adds	r2, #1
 80078b4:	655a      	str	r2, [r3, #84]	@ 0x54
		}

		return pxCurrentTCB;
 80078b6:	4b03      	ldr	r3, [pc, #12]	@ (80078c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80078b8:	681b      	ldr	r3, [r3, #0]
	}
 80078ba:	4618      	mov	r0, r3
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr
 80078c4:	20000a94 	.word	0x20000a94

080078c8 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b084      	sub	sp, #16
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
 80078d0:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 80078d2:	f000 fec9 	bl	8008668 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80078d6:	4b20      	ldr	r3, [pc, #128]	@ (8007958 <ulTaskNotifyTake+0x90>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d113      	bne.n	800790a <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80078e2:	4b1d      	ldr	r3, [pc, #116]	@ (8007958 <ulTaskNotifyTake+0x90>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	2201      	movs	r2, #1
 80078e8:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4

				if( xTicksToWait > ( TickType_t ) 0 )
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d00b      	beq.n	800790a <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80078f2:	2101      	movs	r1, #1
 80078f4:	6838      	ldr	r0, [r7, #0]
 80078f6:	f000 f955 	bl	8007ba4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80078fa:	4b18      	ldr	r3, [pc, #96]	@ (800795c <ulTaskNotifyTake+0x94>)
 80078fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007900:	601a      	str	r2, [r3, #0]
 8007902:	f3bf 8f4f 	dsb	sy
 8007906:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800790a:	f000 fedf 	bl	80086cc <vPortExitCritical>

		taskENTER_CRITICAL();
 800790e:	f000 feab 	bl	8008668 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8007912:	4b11      	ldr	r3, [pc, #68]	@ (8007958 <ulTaskNotifyTake+0x90>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800791a:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d00e      	beq.n	8007940 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d005      	beq.n	8007934 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8007928:	4b0b      	ldr	r3, [pc, #44]	@ (8007958 <ulTaskNotifyTake+0x90>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	2200      	movs	r2, #0
 800792e:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8007932:	e005      	b.n	8007940 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8007934:	4b08      	ldr	r3, [pc, #32]	@ (8007958 <ulTaskNotifyTake+0x90>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	68fa      	ldr	r2, [r7, #12]
 800793a:	3a01      	subs	r2, #1
 800793c:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007940:	4b05      	ldr	r3, [pc, #20]	@ (8007958 <ulTaskNotifyTake+0x90>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	2200      	movs	r2, #0
 8007946:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4
		}
		taskEXIT_CRITICAL();
 800794a:	f000 febf 	bl	80086cc <vPortExitCritical>

		return ulReturn;
 800794e:	68fb      	ldr	r3, [r7, #12]
	}
 8007950:	4618      	mov	r0, r3
 8007952:	3710      	adds	r7, #16
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}
 8007958:	20000a94 	.word	0x20000a94
 800795c:	e000ed04 	.word	0xe000ed04

08007960 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8007960:	b580      	push	{r7, lr}
 8007962:	b086      	sub	sp, #24
 8007964:	af00      	add	r7, sp, #0
 8007966:	60f8      	str	r0, [r7, #12]
 8007968:	60b9      	str	r1, [r7, #8]
 800796a:	607a      	str	r2, [r7, #4]
 800796c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800796e:	f000 fe7b 	bl	8008668 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8007972:	4b29      	ldr	r3, [pc, #164]	@ (8007a18 <xTaskNotifyWait+0xb8>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f893 30d4 	ldrb.w	r3, [r3, #212]	@ 0xd4
 800797a:	b2db      	uxtb	r3, r3
 800797c:	2b02      	cmp	r3, #2
 800797e:	d01c      	beq.n	80079ba <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8007980:	4b25      	ldr	r3, [pc, #148]	@ (8007a18 <xTaskNotifyWait+0xb8>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f8d3 10d0 	ldr.w	r1, [r3, #208]	@ 0xd0
 8007988:	68fa      	ldr	r2, [r7, #12]
 800798a:	43d2      	mvns	r2, r2
 800798c:	400a      	ands	r2, r1
 800798e:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8007992:	4b21      	ldr	r3, [pc, #132]	@ (8007a18 <xTaskNotifyWait+0xb8>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	2201      	movs	r2, #1
 8007998:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4

				if( xTicksToWait > ( TickType_t ) 0 )
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d00b      	beq.n	80079ba <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80079a2:	2101      	movs	r1, #1
 80079a4:	6838      	ldr	r0, [r7, #0]
 80079a6:	f000 f8fd 	bl	8007ba4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80079aa:	4b1c      	ldr	r3, [pc, #112]	@ (8007a1c <xTaskNotifyWait+0xbc>)
 80079ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80079b0:	601a      	str	r2, [r3, #0]
 80079b2:	f3bf 8f4f 	dsb	sy
 80079b6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80079ba:	f000 fe87 	bl	80086cc <vPortExitCritical>

		taskENTER_CRITICAL();
 80079be:	f000 fe53 	bl	8008668 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d005      	beq.n	80079d4 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80079c8:	4b13      	ldr	r3, [pc, #76]	@ (8007a18 <xTaskNotifyWait+0xb8>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80079d4:	4b10      	ldr	r3, [pc, #64]	@ (8007a18 <xTaskNotifyWait+0xb8>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f893 30d4 	ldrb.w	r3, [r3, #212]	@ 0xd4
 80079dc:	b2db      	uxtb	r3, r3
 80079de:	2b02      	cmp	r3, #2
 80079e0:	d002      	beq.n	80079e8 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80079e2:	2300      	movs	r3, #0
 80079e4:	617b      	str	r3, [r7, #20]
 80079e6:	e00a      	b.n	80079fe <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80079e8:	4b0b      	ldr	r3, [pc, #44]	@ (8007a18 <xTaskNotifyWait+0xb8>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f8d3 10d0 	ldr.w	r1, [r3, #208]	@ 0xd0
 80079f0:	68ba      	ldr	r2, [r7, #8]
 80079f2:	43d2      	mvns	r2, r2
 80079f4:	400a      	ands	r2, r1
 80079f6:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
				xReturn = pdTRUE;
 80079fa:	2301      	movs	r3, #1
 80079fc:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80079fe:	4b06      	ldr	r3, [pc, #24]	@ (8007a18 <xTaskNotifyWait+0xb8>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	2200      	movs	r2, #0
 8007a04:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4
		}
		taskEXIT_CRITICAL();
 8007a08:	f000 fe60 	bl	80086cc <vPortExitCritical>

		return xReturn;
 8007a0c:	697b      	ldr	r3, [r7, #20]
	}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3718      	adds	r7, #24
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}
 8007a16:	bf00      	nop
 8007a18:	20000a94 	.word	0x20000a94
 8007a1c:	e000ed04 	.word	0xe000ed04

08007a20 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b08a      	sub	sp, #40	@ 0x28
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	60f8      	str	r0, [r7, #12]
 8007a28:	60b9      	str	r1, [r7, #8]
 8007a2a:	603b      	str	r3, [r7, #0]
 8007a2c:	4613      	mov	r3, r2
 8007a2e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8007a30:	2301      	movs	r3, #1
 8007a32:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d10b      	bne.n	8007a52 <xTaskGenericNotify+0x32>
	__asm volatile
 8007a3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a3e:	f383 8811 	msr	BASEPRI, r3
 8007a42:	f3bf 8f6f 	isb	sy
 8007a46:	f3bf 8f4f 	dsb	sy
 8007a4a:	61bb      	str	r3, [r7, #24]
}
 8007a4c:	bf00      	nop
 8007a4e:	bf00      	nop
 8007a50:	e7fd      	b.n	8007a4e <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8007a56:	f000 fe07 	bl	8008668 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d004      	beq.n	8007a6a <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8007a60:	6a3b      	ldr	r3, [r7, #32]
 8007a62:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8007a6a:	6a3b      	ldr	r3, [r7, #32]
 8007a6c:	f893 30d4 	ldrb.w	r3, [r3, #212]	@ 0xd4
 8007a70:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8007a72:	6a3b      	ldr	r3, [r7, #32]
 8007a74:	2202      	movs	r2, #2
 8007a76:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4

			switch( eAction )
 8007a7a:	79fb      	ldrb	r3, [r7, #7]
 8007a7c:	2b04      	cmp	r3, #4
 8007a7e:	d82e      	bhi.n	8007ade <xTaskGenericNotify+0xbe>
 8007a80:	a201      	add	r2, pc, #4	@ (adr r2, 8007a88 <xTaskGenericNotify+0x68>)
 8007a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a86:	bf00      	nop
 8007a88:	08007b03 	.word	0x08007b03
 8007a8c:	08007a9d 	.word	0x08007a9d
 8007a90:	08007aaf 	.word	0x08007aaf
 8007a94:	08007abf 	.word	0x08007abf
 8007a98:	08007ac9 	.word	0x08007ac9
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8007a9c:	6a3b      	ldr	r3, [r7, #32]
 8007a9e:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	431a      	orrs	r2, r3
 8007aa6:	6a3b      	ldr	r3, [r7, #32]
 8007aa8:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
					break;
 8007aac:	e02c      	b.n	8007b08 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8007aae:	6a3b      	ldr	r3, [r7, #32]
 8007ab0:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8007ab4:	1c5a      	adds	r2, r3, #1
 8007ab6:	6a3b      	ldr	r3, [r7, #32]
 8007ab8:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
					break;
 8007abc:	e024      	b.n	8007b08 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8007abe:	6a3b      	ldr	r3, [r7, #32]
 8007ac0:	68ba      	ldr	r2, [r7, #8]
 8007ac2:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
					break;
 8007ac6:	e01f      	b.n	8007b08 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8007ac8:	7ffb      	ldrb	r3, [r7, #31]
 8007aca:	2b02      	cmp	r3, #2
 8007acc:	d004      	beq.n	8007ad8 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8007ace:	6a3b      	ldr	r3, [r7, #32]
 8007ad0:	68ba      	ldr	r2, [r7, #8]
 8007ad2:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8007ad6:	e017      	b.n	8007b08 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8007adc:	e014      	b.n	8007b08 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8007ade:	6a3b      	ldr	r3, [r7, #32]
 8007ae0:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8007ae4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007ae8:	d00d      	beq.n	8007b06 <xTaskGenericNotify+0xe6>
	__asm volatile
 8007aea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aee:	f383 8811 	msr	BASEPRI, r3
 8007af2:	f3bf 8f6f 	isb	sy
 8007af6:	f3bf 8f4f 	dsb	sy
 8007afa:	617b      	str	r3, [r7, #20]
}
 8007afc:	bf00      	nop
 8007afe:	bf00      	nop
 8007b00:	e7fd      	b.n	8007afe <xTaskGenericNotify+0xde>
					break;
 8007b02:	bf00      	nop
 8007b04:	e000      	b.n	8007b08 <xTaskGenericNotify+0xe8>

					break;
 8007b06:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007b08:	7ffb      	ldrb	r3, [r7, #31]
 8007b0a:	2b01      	cmp	r3, #1
 8007b0c:	d13b      	bne.n	8007b86 <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b0e:	6a3b      	ldr	r3, [r7, #32]
 8007b10:	3304      	adds	r3, #4
 8007b12:	4618      	mov	r0, r3
 8007b14:	f7fd fdb8 	bl	8005688 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8007b18:	6a3b      	ldr	r3, [r7, #32]
 8007b1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b1c:	4b1d      	ldr	r3, [pc, #116]	@ (8007b94 <xTaskGenericNotify+0x174>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	429a      	cmp	r2, r3
 8007b22:	d903      	bls.n	8007b2c <xTaskGenericNotify+0x10c>
 8007b24:	6a3b      	ldr	r3, [r7, #32]
 8007b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b28:	4a1a      	ldr	r2, [pc, #104]	@ (8007b94 <xTaskGenericNotify+0x174>)
 8007b2a:	6013      	str	r3, [r2, #0]
 8007b2c:	6a3b      	ldr	r3, [r7, #32]
 8007b2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b30:	4613      	mov	r3, r2
 8007b32:	009b      	lsls	r3, r3, #2
 8007b34:	4413      	add	r3, r2
 8007b36:	009b      	lsls	r3, r3, #2
 8007b38:	4a17      	ldr	r2, [pc, #92]	@ (8007b98 <xTaskGenericNotify+0x178>)
 8007b3a:	441a      	add	r2, r3
 8007b3c:	6a3b      	ldr	r3, [r7, #32]
 8007b3e:	3304      	adds	r3, #4
 8007b40:	4619      	mov	r1, r3
 8007b42:	4610      	mov	r0, r2
 8007b44:	f7fd fd43 	bl	80055ce <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007b48:	6a3b      	ldr	r3, [r7, #32]
 8007b4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d00b      	beq.n	8007b68 <xTaskGenericNotify+0x148>
	__asm volatile
 8007b50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b54:	f383 8811 	msr	BASEPRI, r3
 8007b58:	f3bf 8f6f 	isb	sy
 8007b5c:	f3bf 8f4f 	dsb	sy
 8007b60:	613b      	str	r3, [r7, #16]
}
 8007b62:	bf00      	nop
 8007b64:	bf00      	nop
 8007b66:	e7fd      	b.n	8007b64 <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007b68:	6a3b      	ldr	r3, [r7, #32]
 8007b6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8007b9c <xTaskGenericNotify+0x17c>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b72:	429a      	cmp	r2, r3
 8007b74:	d907      	bls.n	8007b86 <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8007b76:	4b0a      	ldr	r3, [pc, #40]	@ (8007ba0 <xTaskGenericNotify+0x180>)
 8007b78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b7c:	601a      	str	r2, [r3, #0]
 8007b7e:	f3bf 8f4f 	dsb	sy
 8007b82:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007b86:	f000 fda1 	bl	80086cc <vPortExitCritical>

		return xReturn;
 8007b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3728      	adds	r7, #40	@ 0x28
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}
 8007b94:	20000f70 	.word	0x20000f70
 8007b98:	20000a98 	.word	0x20000a98
 8007b9c:	20000a94 	.word	0x20000a94
 8007ba0:	e000ed04 	.word	0xe000ed04

08007ba4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b084      	sub	sp, #16
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007bae:	4b21      	ldr	r3, [pc, #132]	@ (8007c34 <prvAddCurrentTaskToDelayedList+0x90>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007bb4:	4b20      	ldr	r3, [pc, #128]	@ (8007c38 <prvAddCurrentTaskToDelayedList+0x94>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	3304      	adds	r3, #4
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f7fd fd64 	bl	8005688 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007bc6:	d10a      	bne.n	8007bde <prvAddCurrentTaskToDelayedList+0x3a>
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d007      	beq.n	8007bde <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007bce:	4b1a      	ldr	r3, [pc, #104]	@ (8007c38 <prvAddCurrentTaskToDelayedList+0x94>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	3304      	adds	r3, #4
 8007bd4:	4619      	mov	r1, r3
 8007bd6:	4819      	ldr	r0, [pc, #100]	@ (8007c3c <prvAddCurrentTaskToDelayedList+0x98>)
 8007bd8:	f7fd fcf9 	bl	80055ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007bdc:	e026      	b.n	8007c2c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007bde:	68fa      	ldr	r2, [r7, #12]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	4413      	add	r3, r2
 8007be4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007be6:	4b14      	ldr	r3, [pc, #80]	@ (8007c38 <prvAddCurrentTaskToDelayedList+0x94>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	68ba      	ldr	r2, [r7, #8]
 8007bec:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007bee:	68ba      	ldr	r2, [r7, #8]
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	429a      	cmp	r2, r3
 8007bf4:	d209      	bcs.n	8007c0a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007bf6:	4b12      	ldr	r3, [pc, #72]	@ (8007c40 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007bf8:	681a      	ldr	r2, [r3, #0]
 8007bfa:	4b0f      	ldr	r3, [pc, #60]	@ (8007c38 <prvAddCurrentTaskToDelayedList+0x94>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	3304      	adds	r3, #4
 8007c00:	4619      	mov	r1, r3
 8007c02:	4610      	mov	r0, r2
 8007c04:	f7fd fd07 	bl	8005616 <vListInsert>
}
 8007c08:	e010      	b.n	8007c2c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c0a:	4b0e      	ldr	r3, [pc, #56]	@ (8007c44 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007c0c:	681a      	ldr	r2, [r3, #0]
 8007c0e:	4b0a      	ldr	r3, [pc, #40]	@ (8007c38 <prvAddCurrentTaskToDelayedList+0x94>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	3304      	adds	r3, #4
 8007c14:	4619      	mov	r1, r3
 8007c16:	4610      	mov	r0, r2
 8007c18:	f7fd fcfd 	bl	8005616 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007c1c:	4b0a      	ldr	r3, [pc, #40]	@ (8007c48 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	68ba      	ldr	r2, [r7, #8]
 8007c22:	429a      	cmp	r2, r3
 8007c24:	d202      	bcs.n	8007c2c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007c26:	4a08      	ldr	r2, [pc, #32]	@ (8007c48 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	6013      	str	r3, [r2, #0]
}
 8007c2c:	bf00      	nop
 8007c2e:	3710      	adds	r7, #16
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}
 8007c34:	20000f6c 	.word	0x20000f6c
 8007c38:	20000a94 	.word	0x20000a94
 8007c3c:	20000f54 	.word	0x20000f54
 8007c40:	20000f24 	.word	0x20000f24
 8007c44:	20000f20 	.word	0x20000f20
 8007c48:	20000f88 	.word	0x20000f88

08007c4c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b08a      	sub	sp, #40	@ 0x28
 8007c50:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007c52:	2300      	movs	r3, #0
 8007c54:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007c56:	f000 fb71 	bl	800833c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007c5a:	4b1d      	ldr	r3, [pc, #116]	@ (8007cd0 <xTimerCreateTimerTask+0x84>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d021      	beq.n	8007ca6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007c62:	2300      	movs	r3, #0
 8007c64:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007c66:	2300      	movs	r3, #0
 8007c68:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007c6a:	1d3a      	adds	r2, r7, #4
 8007c6c:	f107 0108 	add.w	r1, r7, #8
 8007c70:	f107 030c 	add.w	r3, r7, #12
 8007c74:	4618      	mov	r0, r3
 8007c76:	f7fd fc63 	bl	8005540 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007c7a:	6879      	ldr	r1, [r7, #4]
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	68fa      	ldr	r2, [r7, #12]
 8007c80:	9202      	str	r2, [sp, #8]
 8007c82:	9301      	str	r3, [sp, #4]
 8007c84:	2302      	movs	r3, #2
 8007c86:	9300      	str	r3, [sp, #0]
 8007c88:	2300      	movs	r3, #0
 8007c8a:	460a      	mov	r2, r1
 8007c8c:	4911      	ldr	r1, [pc, #68]	@ (8007cd4 <xTimerCreateTimerTask+0x88>)
 8007c8e:	4812      	ldr	r0, [pc, #72]	@ (8007cd8 <xTimerCreateTimerTask+0x8c>)
 8007c90:	f7fe fc12 	bl	80064b8 <xTaskCreateStatic>
 8007c94:	4603      	mov	r3, r0
 8007c96:	4a11      	ldr	r2, [pc, #68]	@ (8007cdc <xTimerCreateTimerTask+0x90>)
 8007c98:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007c9a:	4b10      	ldr	r3, [pc, #64]	@ (8007cdc <xTimerCreateTimerTask+0x90>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d001      	beq.n	8007ca6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d10b      	bne.n	8007cc4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007cac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cb0:	f383 8811 	msr	BASEPRI, r3
 8007cb4:	f3bf 8f6f 	isb	sy
 8007cb8:	f3bf 8f4f 	dsb	sy
 8007cbc:	613b      	str	r3, [r7, #16]
}
 8007cbe:	bf00      	nop
 8007cc0:	bf00      	nop
 8007cc2:	e7fd      	b.n	8007cc0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007cc4:	697b      	ldr	r3, [r7, #20]
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3718      	adds	r7, #24
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}
 8007cce:	bf00      	nop
 8007cd0:	20000fcc 	.word	0x20000fcc
 8007cd4:	0800a918 	.word	0x0800a918
 8007cd8:	08007ed5 	.word	0x08007ed5
 8007cdc:	20000fd0 	.word	0x20000fd0

08007ce0 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b088      	sub	sp, #32
 8007ce4:	af02      	add	r7, sp, #8
 8007ce6:	60f8      	str	r0, [r7, #12]
 8007ce8:	60b9      	str	r1, [r7, #8]
 8007cea:	607a      	str	r2, [r7, #4]
 8007cec:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8007cee:	202c      	movs	r0, #44	@ 0x2c
 8007cf0:	f000 fddc 	bl	80088ac <pvPortMalloc>
 8007cf4:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d00d      	beq.n	8007d18 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007d04:	697b      	ldr	r3, [r7, #20]
 8007d06:	9301      	str	r3, [sp, #4]
 8007d08:	6a3b      	ldr	r3, [r7, #32]
 8007d0a:	9300      	str	r3, [sp, #0]
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	687a      	ldr	r2, [r7, #4]
 8007d10:	68b9      	ldr	r1, [r7, #8]
 8007d12:	68f8      	ldr	r0, [r7, #12]
 8007d14:	f000 f805 	bl	8007d22 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8007d18:	697b      	ldr	r3, [r7, #20]
	}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3718      	adds	r7, #24
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}

08007d22 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8007d22:	b580      	push	{r7, lr}
 8007d24:	b086      	sub	sp, #24
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	60f8      	str	r0, [r7, #12]
 8007d2a:	60b9      	str	r1, [r7, #8]
 8007d2c:	607a      	str	r2, [r7, #4]
 8007d2e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d10b      	bne.n	8007d4e <prvInitialiseNewTimer+0x2c>
	__asm volatile
 8007d36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d3a:	f383 8811 	msr	BASEPRI, r3
 8007d3e:	f3bf 8f6f 	isb	sy
 8007d42:	f3bf 8f4f 	dsb	sy
 8007d46:	617b      	str	r3, [r7, #20]
}
 8007d48:	bf00      	nop
 8007d4a:	bf00      	nop
 8007d4c:	e7fd      	b.n	8007d4a <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8007d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d01e      	beq.n	8007d92 <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8007d54:	f000 faf2 	bl	800833c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8007d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d5a:	68fa      	ldr	r2, [r7, #12]
 8007d5c:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8007d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d60:	68ba      	ldr	r2, [r7, #8]
 8007d62:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8007d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d66:	683a      	ldr	r2, [r7, #0]
 8007d68:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8007d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d6c:	6a3a      	ldr	r2, [r7, #32]
 8007d6e:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8007d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d72:	3304      	adds	r3, #4
 8007d74:	4618      	mov	r0, r3
 8007d76:	f7fd fc1d 	bl	80055b4 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d008      	beq.n	8007d92 <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8007d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d82:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007d86:	f043 0304 	orr.w	r3, r3, #4
 8007d8a:	b2da      	uxtb	r2, r3
 8007d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d8e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8007d92:	bf00      	nop
 8007d94:	3718      	adds	r7, #24
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}
	...

08007d9c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b08a      	sub	sp, #40	@ 0x28
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	60f8      	str	r0, [r7, #12]
 8007da4:	60b9      	str	r1, [r7, #8]
 8007da6:	607a      	str	r2, [r7, #4]
 8007da8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007daa:	2300      	movs	r3, #0
 8007dac:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d10b      	bne.n	8007dcc <xTimerGenericCommand+0x30>
	__asm volatile
 8007db4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007db8:	f383 8811 	msr	BASEPRI, r3
 8007dbc:	f3bf 8f6f 	isb	sy
 8007dc0:	f3bf 8f4f 	dsb	sy
 8007dc4:	623b      	str	r3, [r7, #32]
}
 8007dc6:	bf00      	nop
 8007dc8:	bf00      	nop
 8007dca:	e7fd      	b.n	8007dc8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007dcc:	4b19      	ldr	r3, [pc, #100]	@ (8007e34 <xTimerGenericCommand+0x98>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d02a      	beq.n	8007e2a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	2b05      	cmp	r3, #5
 8007de4:	dc18      	bgt.n	8007e18 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007de6:	f7ff fbe1 	bl	80075ac <xTaskGetSchedulerState>
 8007dea:	4603      	mov	r3, r0
 8007dec:	2b02      	cmp	r3, #2
 8007dee:	d109      	bne.n	8007e04 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007df0:	4b10      	ldr	r3, [pc, #64]	@ (8007e34 <xTimerGenericCommand+0x98>)
 8007df2:	6818      	ldr	r0, [r3, #0]
 8007df4:	f107 0110 	add.w	r1, r7, #16
 8007df8:	2300      	movs	r3, #0
 8007dfa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007dfc:	f7fd fdb4 	bl	8005968 <xQueueGenericSend>
 8007e00:	6278      	str	r0, [r7, #36]	@ 0x24
 8007e02:	e012      	b.n	8007e2a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007e04:	4b0b      	ldr	r3, [pc, #44]	@ (8007e34 <xTimerGenericCommand+0x98>)
 8007e06:	6818      	ldr	r0, [r3, #0]
 8007e08:	f107 0110 	add.w	r1, r7, #16
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	2200      	movs	r2, #0
 8007e10:	f7fd fdaa 	bl	8005968 <xQueueGenericSend>
 8007e14:	6278      	str	r0, [r7, #36]	@ 0x24
 8007e16:	e008      	b.n	8007e2a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007e18:	4b06      	ldr	r3, [pc, #24]	@ (8007e34 <xTimerGenericCommand+0x98>)
 8007e1a:	6818      	ldr	r0, [r3, #0]
 8007e1c:	f107 0110 	add.w	r1, r7, #16
 8007e20:	2300      	movs	r3, #0
 8007e22:	683a      	ldr	r2, [r7, #0]
 8007e24:	f7fd fea2 	bl	8005b6c <xQueueGenericSendFromISR>
 8007e28:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3728      	adds	r7, #40	@ 0x28
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}
 8007e34:	20000fcc 	.word	0x20000fcc

08007e38 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b088      	sub	sp, #32
 8007e3c:	af02      	add	r7, sp, #8
 8007e3e:	6078      	str	r0, [r7, #4]
 8007e40:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e42:	4b23      	ldr	r3, [pc, #140]	@ (8007ed0 <prvProcessExpiredTimer+0x98>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	68db      	ldr	r3, [r3, #12]
 8007e48:	68db      	ldr	r3, [r3, #12]
 8007e4a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	3304      	adds	r3, #4
 8007e50:	4618      	mov	r0, r3
 8007e52:	f7fd fc19 	bl	8005688 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007e5c:	f003 0304 	and.w	r3, r3, #4
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d023      	beq.n	8007eac <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	699a      	ldr	r2, [r3, #24]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	18d1      	adds	r1, r2, r3
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	683a      	ldr	r2, [r7, #0]
 8007e70:	6978      	ldr	r0, [r7, #20]
 8007e72:	f000 f8d5 	bl	8008020 <prvInsertTimerInActiveList>
 8007e76:	4603      	mov	r3, r0
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d020      	beq.n	8007ebe <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	9300      	str	r3, [sp, #0]
 8007e80:	2300      	movs	r3, #0
 8007e82:	687a      	ldr	r2, [r7, #4]
 8007e84:	2100      	movs	r1, #0
 8007e86:	6978      	ldr	r0, [r7, #20]
 8007e88:	f7ff ff88 	bl	8007d9c <xTimerGenericCommand>
 8007e8c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d114      	bne.n	8007ebe <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007e94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e98:	f383 8811 	msr	BASEPRI, r3
 8007e9c:	f3bf 8f6f 	isb	sy
 8007ea0:	f3bf 8f4f 	dsb	sy
 8007ea4:	60fb      	str	r3, [r7, #12]
}
 8007ea6:	bf00      	nop
 8007ea8:	bf00      	nop
 8007eaa:	e7fd      	b.n	8007ea8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007eb2:	f023 0301 	bic.w	r3, r3, #1
 8007eb6:	b2da      	uxtb	r2, r3
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	6a1b      	ldr	r3, [r3, #32]
 8007ec2:	6978      	ldr	r0, [r7, #20]
 8007ec4:	4798      	blx	r3
}
 8007ec6:	bf00      	nop
 8007ec8:	3718      	adds	r7, #24
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}
 8007ece:	bf00      	nop
 8007ed0:	20000fc4 	.word	0x20000fc4

08007ed4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b084      	sub	sp, #16
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007edc:	f107 0308 	add.w	r3, r7, #8
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f000 f859 	bl	8007f98 <prvGetNextExpireTime>
 8007ee6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	4619      	mov	r1, r3
 8007eec:	68f8      	ldr	r0, [r7, #12]
 8007eee:	f000 f805 	bl	8007efc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007ef2:	f000 f8d7 	bl	80080a4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007ef6:	bf00      	nop
 8007ef8:	e7f0      	b.n	8007edc <prvTimerTask+0x8>
	...

08007efc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b084      	sub	sp, #16
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
 8007f04:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007f06:	f7fe fd87 	bl	8006a18 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007f0a:	f107 0308 	add.w	r3, r7, #8
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f000 f866 	bl	8007fe0 <prvSampleTimeNow>
 8007f14:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d130      	bne.n	8007f7e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d10a      	bne.n	8007f38 <prvProcessTimerOrBlockTask+0x3c>
 8007f22:	687a      	ldr	r2, [r7, #4]
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	429a      	cmp	r2, r3
 8007f28:	d806      	bhi.n	8007f38 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007f2a:	f7fe fd83 	bl	8006a34 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007f2e:	68f9      	ldr	r1, [r7, #12]
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f7ff ff81 	bl	8007e38 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007f36:	e024      	b.n	8007f82 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d008      	beq.n	8007f50 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007f3e:	4b13      	ldr	r3, [pc, #76]	@ (8007f8c <prvProcessTimerOrBlockTask+0x90>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d101      	bne.n	8007f4c <prvProcessTimerOrBlockTask+0x50>
 8007f48:	2301      	movs	r3, #1
 8007f4a:	e000      	b.n	8007f4e <prvProcessTimerOrBlockTask+0x52>
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007f50:	4b0f      	ldr	r3, [pc, #60]	@ (8007f90 <prvProcessTimerOrBlockTask+0x94>)
 8007f52:	6818      	ldr	r0, [r3, #0]
 8007f54:	687a      	ldr	r2, [r7, #4]
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	1ad3      	subs	r3, r2, r3
 8007f5a:	683a      	ldr	r2, [r7, #0]
 8007f5c:	4619      	mov	r1, r3
 8007f5e:	f7fe fa77 	bl	8006450 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007f62:	f7fe fd67 	bl	8006a34 <xTaskResumeAll>
 8007f66:	4603      	mov	r3, r0
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d10a      	bne.n	8007f82 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007f6c:	4b09      	ldr	r3, [pc, #36]	@ (8007f94 <prvProcessTimerOrBlockTask+0x98>)
 8007f6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f72:	601a      	str	r2, [r3, #0]
 8007f74:	f3bf 8f4f 	dsb	sy
 8007f78:	f3bf 8f6f 	isb	sy
}
 8007f7c:	e001      	b.n	8007f82 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007f7e:	f7fe fd59 	bl	8006a34 <xTaskResumeAll>
}
 8007f82:	bf00      	nop
 8007f84:	3710      	adds	r7, #16
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}
 8007f8a:	bf00      	nop
 8007f8c:	20000fc8 	.word	0x20000fc8
 8007f90:	20000fcc 	.word	0x20000fcc
 8007f94:	e000ed04 	.word	0xe000ed04

08007f98 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b085      	sub	sp, #20
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007fa0:	4b0e      	ldr	r3, [pc, #56]	@ (8007fdc <prvGetNextExpireTime+0x44>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d101      	bne.n	8007fae <prvGetNextExpireTime+0x16>
 8007faa:	2201      	movs	r2, #1
 8007fac:	e000      	b.n	8007fb0 <prvGetNextExpireTime+0x18>
 8007fae:	2200      	movs	r2, #0
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d105      	bne.n	8007fc8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007fbc:	4b07      	ldr	r3, [pc, #28]	@ (8007fdc <prvGetNextExpireTime+0x44>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	68db      	ldr	r3, [r3, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	60fb      	str	r3, [r7, #12]
 8007fc6:	e001      	b.n	8007fcc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3714      	adds	r7, #20
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd8:	4770      	bx	lr
 8007fda:	bf00      	nop
 8007fdc:	20000fc4 	.word	0x20000fc4

08007fe0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b084      	sub	sp, #16
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007fe8:	f7fe fdc2 	bl	8006b70 <xTaskGetTickCount>
 8007fec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007fee:	4b0b      	ldr	r3, [pc, #44]	@ (800801c <prvSampleTimeNow+0x3c>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	68fa      	ldr	r2, [r7, #12]
 8007ff4:	429a      	cmp	r2, r3
 8007ff6:	d205      	bcs.n	8008004 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007ff8:	f000 f93a 	bl	8008270 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2201      	movs	r2, #1
 8008000:	601a      	str	r2, [r3, #0]
 8008002:	e002      	b.n	800800a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2200      	movs	r2, #0
 8008008:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800800a:	4a04      	ldr	r2, [pc, #16]	@ (800801c <prvSampleTimeNow+0x3c>)
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008010:	68fb      	ldr	r3, [r7, #12]
}
 8008012:	4618      	mov	r0, r3
 8008014:	3710      	adds	r7, #16
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}
 800801a:	bf00      	nop
 800801c:	20000fd4 	.word	0x20000fd4

08008020 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b086      	sub	sp, #24
 8008024:	af00      	add	r7, sp, #0
 8008026:	60f8      	str	r0, [r7, #12]
 8008028:	60b9      	str	r1, [r7, #8]
 800802a:	607a      	str	r2, [r7, #4]
 800802c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800802e:	2300      	movs	r3, #0
 8008030:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	68ba      	ldr	r2, [r7, #8]
 8008036:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	68fa      	ldr	r2, [r7, #12]
 800803c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800803e:	68ba      	ldr	r2, [r7, #8]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	429a      	cmp	r2, r3
 8008044:	d812      	bhi.n	800806c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008046:	687a      	ldr	r2, [r7, #4]
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	1ad2      	subs	r2, r2, r3
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	699b      	ldr	r3, [r3, #24]
 8008050:	429a      	cmp	r2, r3
 8008052:	d302      	bcc.n	800805a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008054:	2301      	movs	r3, #1
 8008056:	617b      	str	r3, [r7, #20]
 8008058:	e01b      	b.n	8008092 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800805a:	4b10      	ldr	r3, [pc, #64]	@ (800809c <prvInsertTimerInActiveList+0x7c>)
 800805c:	681a      	ldr	r2, [r3, #0]
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	3304      	adds	r3, #4
 8008062:	4619      	mov	r1, r3
 8008064:	4610      	mov	r0, r2
 8008066:	f7fd fad6 	bl	8005616 <vListInsert>
 800806a:	e012      	b.n	8008092 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800806c:	687a      	ldr	r2, [r7, #4]
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	429a      	cmp	r2, r3
 8008072:	d206      	bcs.n	8008082 <prvInsertTimerInActiveList+0x62>
 8008074:	68ba      	ldr	r2, [r7, #8]
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	429a      	cmp	r2, r3
 800807a:	d302      	bcc.n	8008082 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800807c:	2301      	movs	r3, #1
 800807e:	617b      	str	r3, [r7, #20]
 8008080:	e007      	b.n	8008092 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008082:	4b07      	ldr	r3, [pc, #28]	@ (80080a0 <prvInsertTimerInActiveList+0x80>)
 8008084:	681a      	ldr	r2, [r3, #0]
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	3304      	adds	r3, #4
 800808a:	4619      	mov	r1, r3
 800808c:	4610      	mov	r0, r2
 800808e:	f7fd fac2 	bl	8005616 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008092:	697b      	ldr	r3, [r7, #20]
}
 8008094:	4618      	mov	r0, r3
 8008096:	3718      	adds	r7, #24
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}
 800809c:	20000fc8 	.word	0x20000fc8
 80080a0:	20000fc4 	.word	0x20000fc4

080080a4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b08e      	sub	sp, #56	@ 0x38
 80080a8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80080aa:	e0ce      	b.n	800824a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	da19      	bge.n	80080e6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80080b2:	1d3b      	adds	r3, r7, #4
 80080b4:	3304      	adds	r3, #4
 80080b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80080b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d10b      	bne.n	80080d6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80080be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080c2:	f383 8811 	msr	BASEPRI, r3
 80080c6:	f3bf 8f6f 	isb	sy
 80080ca:	f3bf 8f4f 	dsb	sy
 80080ce:	61fb      	str	r3, [r7, #28]
}
 80080d0:	bf00      	nop
 80080d2:	bf00      	nop
 80080d4:	e7fd      	b.n	80080d2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80080d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80080dc:	6850      	ldr	r0, [r2, #4]
 80080de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80080e0:	6892      	ldr	r2, [r2, #8]
 80080e2:	4611      	mov	r1, r2
 80080e4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	f2c0 80ae 	blt.w	800824a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80080f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080f4:	695b      	ldr	r3, [r3, #20]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d004      	beq.n	8008104 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80080fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080fc:	3304      	adds	r3, #4
 80080fe:	4618      	mov	r0, r3
 8008100:	f7fd fac2 	bl	8005688 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008104:	463b      	mov	r3, r7
 8008106:	4618      	mov	r0, r3
 8008108:	f7ff ff6a 	bl	8007fe0 <prvSampleTimeNow>
 800810c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2b09      	cmp	r3, #9
 8008112:	f200 8097 	bhi.w	8008244 <prvProcessReceivedCommands+0x1a0>
 8008116:	a201      	add	r2, pc, #4	@ (adr r2, 800811c <prvProcessReceivedCommands+0x78>)
 8008118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800811c:	08008145 	.word	0x08008145
 8008120:	08008145 	.word	0x08008145
 8008124:	08008145 	.word	0x08008145
 8008128:	080081bb 	.word	0x080081bb
 800812c:	080081cf 	.word	0x080081cf
 8008130:	0800821b 	.word	0x0800821b
 8008134:	08008145 	.word	0x08008145
 8008138:	08008145 	.word	0x08008145
 800813c:	080081bb 	.word	0x080081bb
 8008140:	080081cf 	.word	0x080081cf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008146:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800814a:	f043 0301 	orr.w	r3, r3, #1
 800814e:	b2da      	uxtb	r2, r3
 8008150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008152:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008156:	68ba      	ldr	r2, [r7, #8]
 8008158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800815a:	699b      	ldr	r3, [r3, #24]
 800815c:	18d1      	adds	r1, r2, r3
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008162:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008164:	f7ff ff5c 	bl	8008020 <prvInsertTimerInActiveList>
 8008168:	4603      	mov	r3, r0
 800816a:	2b00      	cmp	r3, #0
 800816c:	d06c      	beq.n	8008248 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800816e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008170:	6a1b      	ldr	r3, [r3, #32]
 8008172:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008174:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008176:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008178:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800817c:	f003 0304 	and.w	r3, r3, #4
 8008180:	2b00      	cmp	r3, #0
 8008182:	d061      	beq.n	8008248 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008184:	68ba      	ldr	r2, [r7, #8]
 8008186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008188:	699b      	ldr	r3, [r3, #24]
 800818a:	441a      	add	r2, r3
 800818c:	2300      	movs	r3, #0
 800818e:	9300      	str	r3, [sp, #0]
 8008190:	2300      	movs	r3, #0
 8008192:	2100      	movs	r1, #0
 8008194:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008196:	f7ff fe01 	bl	8007d9c <xTimerGenericCommand>
 800819a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800819c:	6a3b      	ldr	r3, [r7, #32]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d152      	bne.n	8008248 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80081a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081a6:	f383 8811 	msr	BASEPRI, r3
 80081aa:	f3bf 8f6f 	isb	sy
 80081ae:	f3bf 8f4f 	dsb	sy
 80081b2:	61bb      	str	r3, [r7, #24]
}
 80081b4:	bf00      	nop
 80081b6:	bf00      	nop
 80081b8:	e7fd      	b.n	80081b6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80081ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80081c0:	f023 0301 	bic.w	r3, r3, #1
 80081c4:	b2da      	uxtb	r2, r3
 80081c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081c8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80081cc:	e03d      	b.n	800824a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80081ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80081d4:	f043 0301 	orr.w	r3, r3, #1
 80081d8:	b2da      	uxtb	r2, r3
 80081da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081dc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80081e0:	68ba      	ldr	r2, [r7, #8]
 80081e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081e4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80081e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081e8:	699b      	ldr	r3, [r3, #24]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d10b      	bne.n	8008206 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80081ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081f2:	f383 8811 	msr	BASEPRI, r3
 80081f6:	f3bf 8f6f 	isb	sy
 80081fa:	f3bf 8f4f 	dsb	sy
 80081fe:	617b      	str	r3, [r7, #20]
}
 8008200:	bf00      	nop
 8008202:	bf00      	nop
 8008204:	e7fd      	b.n	8008202 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008208:	699a      	ldr	r2, [r3, #24]
 800820a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800820c:	18d1      	adds	r1, r2, r3
 800820e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008210:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008212:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008214:	f7ff ff04 	bl	8008020 <prvInsertTimerInActiveList>
					break;
 8008218:	e017      	b.n	800824a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800821a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800821c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008220:	f003 0302 	and.w	r3, r3, #2
 8008224:	2b00      	cmp	r3, #0
 8008226:	d103      	bne.n	8008230 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008228:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800822a:	f000 fc0d 	bl	8008a48 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800822e:	e00c      	b.n	800824a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008232:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008236:	f023 0301 	bic.w	r3, r3, #1
 800823a:	b2da      	uxtb	r2, r3
 800823c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800823e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008242:	e002      	b.n	800824a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8008244:	bf00      	nop
 8008246:	e000      	b.n	800824a <prvProcessReceivedCommands+0x1a6>
					break;
 8008248:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800824a:	4b08      	ldr	r3, [pc, #32]	@ (800826c <prvProcessReceivedCommands+0x1c8>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	1d39      	adds	r1, r7, #4
 8008250:	2200      	movs	r2, #0
 8008252:	4618      	mov	r0, r3
 8008254:	f7fd fdb8 	bl	8005dc8 <xQueueReceive>
 8008258:	4603      	mov	r3, r0
 800825a:	2b00      	cmp	r3, #0
 800825c:	f47f af26 	bne.w	80080ac <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008260:	bf00      	nop
 8008262:	bf00      	nop
 8008264:	3730      	adds	r7, #48	@ 0x30
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}
 800826a:	bf00      	nop
 800826c:	20000fcc 	.word	0x20000fcc

08008270 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b088      	sub	sp, #32
 8008274:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008276:	e049      	b.n	800830c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008278:	4b2e      	ldr	r3, [pc, #184]	@ (8008334 <prvSwitchTimerLists+0xc4>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	68db      	ldr	r3, [r3, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008282:	4b2c      	ldr	r3, [pc, #176]	@ (8008334 <prvSwitchTimerLists+0xc4>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	68db      	ldr	r3, [r3, #12]
 8008288:	68db      	ldr	r3, [r3, #12]
 800828a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	3304      	adds	r3, #4
 8008290:	4618      	mov	r0, r3
 8008292:	f7fd f9f9 	bl	8005688 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	6a1b      	ldr	r3, [r3, #32]
 800829a:	68f8      	ldr	r0, [r7, #12]
 800829c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80082a4:	f003 0304 	and.w	r3, r3, #4
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d02f      	beq.n	800830c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	699b      	ldr	r3, [r3, #24]
 80082b0:	693a      	ldr	r2, [r7, #16]
 80082b2:	4413      	add	r3, r2
 80082b4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80082b6:	68ba      	ldr	r2, [r7, #8]
 80082b8:	693b      	ldr	r3, [r7, #16]
 80082ba:	429a      	cmp	r2, r3
 80082bc:	d90e      	bls.n	80082dc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	68ba      	ldr	r2, [r7, #8]
 80082c2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	68fa      	ldr	r2, [r7, #12]
 80082c8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80082ca:	4b1a      	ldr	r3, [pc, #104]	@ (8008334 <prvSwitchTimerLists+0xc4>)
 80082cc:	681a      	ldr	r2, [r3, #0]
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	3304      	adds	r3, #4
 80082d2:	4619      	mov	r1, r3
 80082d4:	4610      	mov	r0, r2
 80082d6:	f7fd f99e 	bl	8005616 <vListInsert>
 80082da:	e017      	b.n	800830c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80082dc:	2300      	movs	r3, #0
 80082de:	9300      	str	r3, [sp, #0]
 80082e0:	2300      	movs	r3, #0
 80082e2:	693a      	ldr	r2, [r7, #16]
 80082e4:	2100      	movs	r1, #0
 80082e6:	68f8      	ldr	r0, [r7, #12]
 80082e8:	f7ff fd58 	bl	8007d9c <xTimerGenericCommand>
 80082ec:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d10b      	bne.n	800830c <prvSwitchTimerLists+0x9c>
	__asm volatile
 80082f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082f8:	f383 8811 	msr	BASEPRI, r3
 80082fc:	f3bf 8f6f 	isb	sy
 8008300:	f3bf 8f4f 	dsb	sy
 8008304:	603b      	str	r3, [r7, #0]
}
 8008306:	bf00      	nop
 8008308:	bf00      	nop
 800830a:	e7fd      	b.n	8008308 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800830c:	4b09      	ldr	r3, [pc, #36]	@ (8008334 <prvSwitchTimerLists+0xc4>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d1b0      	bne.n	8008278 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008316:	4b07      	ldr	r3, [pc, #28]	@ (8008334 <prvSwitchTimerLists+0xc4>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800831c:	4b06      	ldr	r3, [pc, #24]	@ (8008338 <prvSwitchTimerLists+0xc8>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4a04      	ldr	r2, [pc, #16]	@ (8008334 <prvSwitchTimerLists+0xc4>)
 8008322:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008324:	4a04      	ldr	r2, [pc, #16]	@ (8008338 <prvSwitchTimerLists+0xc8>)
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	6013      	str	r3, [r2, #0]
}
 800832a:	bf00      	nop
 800832c:	3718      	adds	r7, #24
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}
 8008332:	bf00      	nop
 8008334:	20000fc4 	.word	0x20000fc4
 8008338:	20000fc8 	.word	0x20000fc8

0800833c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b082      	sub	sp, #8
 8008340:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008342:	f000 f991 	bl	8008668 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008346:	4b15      	ldr	r3, [pc, #84]	@ (800839c <prvCheckForValidListAndQueue+0x60>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d120      	bne.n	8008390 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800834e:	4814      	ldr	r0, [pc, #80]	@ (80083a0 <prvCheckForValidListAndQueue+0x64>)
 8008350:	f7fd f910 	bl	8005574 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008354:	4813      	ldr	r0, [pc, #76]	@ (80083a4 <prvCheckForValidListAndQueue+0x68>)
 8008356:	f7fd f90d 	bl	8005574 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800835a:	4b13      	ldr	r3, [pc, #76]	@ (80083a8 <prvCheckForValidListAndQueue+0x6c>)
 800835c:	4a10      	ldr	r2, [pc, #64]	@ (80083a0 <prvCheckForValidListAndQueue+0x64>)
 800835e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008360:	4b12      	ldr	r3, [pc, #72]	@ (80083ac <prvCheckForValidListAndQueue+0x70>)
 8008362:	4a10      	ldr	r2, [pc, #64]	@ (80083a4 <prvCheckForValidListAndQueue+0x68>)
 8008364:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008366:	2300      	movs	r3, #0
 8008368:	9300      	str	r3, [sp, #0]
 800836a:	4b11      	ldr	r3, [pc, #68]	@ (80083b0 <prvCheckForValidListAndQueue+0x74>)
 800836c:	4a11      	ldr	r2, [pc, #68]	@ (80083b4 <prvCheckForValidListAndQueue+0x78>)
 800836e:	2110      	movs	r1, #16
 8008370:	200a      	movs	r0, #10
 8008372:	f7fd fa1d 	bl	80057b0 <xQueueGenericCreateStatic>
 8008376:	4603      	mov	r3, r0
 8008378:	4a08      	ldr	r2, [pc, #32]	@ (800839c <prvCheckForValidListAndQueue+0x60>)
 800837a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800837c:	4b07      	ldr	r3, [pc, #28]	@ (800839c <prvCheckForValidListAndQueue+0x60>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d005      	beq.n	8008390 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008384:	4b05      	ldr	r3, [pc, #20]	@ (800839c <prvCheckForValidListAndQueue+0x60>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	490b      	ldr	r1, [pc, #44]	@ (80083b8 <prvCheckForValidListAndQueue+0x7c>)
 800838a:	4618      	mov	r0, r3
 800838c:	f7fe f836 	bl	80063fc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008390:	f000 f99c 	bl	80086cc <vPortExitCritical>
}
 8008394:	bf00      	nop
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}
 800839a:	bf00      	nop
 800839c:	20000fcc 	.word	0x20000fcc
 80083a0:	20000f9c 	.word	0x20000f9c
 80083a4:	20000fb0 	.word	0x20000fb0
 80083a8:	20000fc4 	.word	0x20000fc4
 80083ac:	20000fc8 	.word	0x20000fc8
 80083b0:	20001078 	.word	0x20001078
 80083b4:	20000fd8 	.word	0x20000fd8
 80083b8:	0800a920 	.word	0x0800a920

080083bc <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b086      	sub	sp, #24
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d10b      	bne.n	80083e6 <pvTimerGetTimerID+0x2a>
	__asm volatile
 80083ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083d2:	f383 8811 	msr	BASEPRI, r3
 80083d6:	f3bf 8f6f 	isb	sy
 80083da:	f3bf 8f4f 	dsb	sy
 80083de:	60fb      	str	r3, [r7, #12]
}
 80083e0:	bf00      	nop
 80083e2:	bf00      	nop
 80083e4:	e7fd      	b.n	80083e2 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 80083e6:	f000 f93f 	bl	8008668 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	69db      	ldr	r3, [r3, #28]
 80083ee:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 80083f0:	f000 f96c 	bl	80086cc <vPortExitCritical>

	return pvReturn;
 80083f4:	693b      	ldr	r3, [r7, #16]
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3718      	adds	r7, #24
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}
	...

08008400 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008400:	b480      	push	{r7}
 8008402:	b085      	sub	sp, #20
 8008404:	af00      	add	r7, sp, #0
 8008406:	60f8      	str	r0, [r7, #12]
 8008408:	60b9      	str	r1, [r7, #8]
 800840a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	3b04      	subs	r3, #4
 8008410:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008418:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	3b04      	subs	r3, #4
 800841e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	f023 0201 	bic.w	r2, r3, #1
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	3b04      	subs	r3, #4
 800842e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008430:	4a0c      	ldr	r2, [pc, #48]	@ (8008464 <pxPortInitialiseStack+0x64>)
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	3b14      	subs	r3, #20
 800843a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800843c:	687a      	ldr	r2, [r7, #4]
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	3b04      	subs	r3, #4
 8008446:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	f06f 0202 	mvn.w	r2, #2
 800844e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	3b20      	subs	r3, #32
 8008454:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008456:	68fb      	ldr	r3, [r7, #12]
}
 8008458:	4618      	mov	r0, r3
 800845a:	3714      	adds	r7, #20
 800845c:	46bd      	mov	sp, r7
 800845e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008462:	4770      	bx	lr
 8008464:	08008469 	.word	0x08008469

08008468 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008468:	b480      	push	{r7}
 800846a:	b085      	sub	sp, #20
 800846c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800846e:	2300      	movs	r3, #0
 8008470:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008472:	4b13      	ldr	r3, [pc, #76]	@ (80084c0 <prvTaskExitError+0x58>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800847a:	d00b      	beq.n	8008494 <prvTaskExitError+0x2c>
	__asm volatile
 800847c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008480:	f383 8811 	msr	BASEPRI, r3
 8008484:	f3bf 8f6f 	isb	sy
 8008488:	f3bf 8f4f 	dsb	sy
 800848c:	60fb      	str	r3, [r7, #12]
}
 800848e:	bf00      	nop
 8008490:	bf00      	nop
 8008492:	e7fd      	b.n	8008490 <prvTaskExitError+0x28>
	__asm volatile
 8008494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008498:	f383 8811 	msr	BASEPRI, r3
 800849c:	f3bf 8f6f 	isb	sy
 80084a0:	f3bf 8f4f 	dsb	sy
 80084a4:	60bb      	str	r3, [r7, #8]
}
 80084a6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80084a8:	bf00      	nop
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d0fc      	beq.n	80084aa <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80084b0:	bf00      	nop
 80084b2:	bf00      	nop
 80084b4:	3714      	adds	r7, #20
 80084b6:	46bd      	mov	sp, r7
 80084b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084bc:	4770      	bx	lr
 80084be:	bf00      	nop
 80084c0:	2000000c 	.word	0x2000000c
	...

080084d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80084d0:	4b07      	ldr	r3, [pc, #28]	@ (80084f0 <pxCurrentTCBConst2>)
 80084d2:	6819      	ldr	r1, [r3, #0]
 80084d4:	6808      	ldr	r0, [r1, #0]
 80084d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084da:	f380 8809 	msr	PSP, r0
 80084de:	f3bf 8f6f 	isb	sy
 80084e2:	f04f 0000 	mov.w	r0, #0
 80084e6:	f380 8811 	msr	BASEPRI, r0
 80084ea:	4770      	bx	lr
 80084ec:	f3af 8000 	nop.w

080084f0 <pxCurrentTCBConst2>:
 80084f0:	20000a94 	.word	0x20000a94
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80084f4:	bf00      	nop
 80084f6:	bf00      	nop

080084f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80084f8:	4808      	ldr	r0, [pc, #32]	@ (800851c <prvPortStartFirstTask+0x24>)
 80084fa:	6800      	ldr	r0, [r0, #0]
 80084fc:	6800      	ldr	r0, [r0, #0]
 80084fe:	f380 8808 	msr	MSP, r0
 8008502:	f04f 0000 	mov.w	r0, #0
 8008506:	f380 8814 	msr	CONTROL, r0
 800850a:	b662      	cpsie	i
 800850c:	b661      	cpsie	f
 800850e:	f3bf 8f4f 	dsb	sy
 8008512:	f3bf 8f6f 	isb	sy
 8008516:	df00      	svc	0
 8008518:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800851a:	bf00      	nop
 800851c:	e000ed08 	.word	0xe000ed08

08008520 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b086      	sub	sp, #24
 8008524:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008526:	4b47      	ldr	r3, [pc, #284]	@ (8008644 <xPortStartScheduler+0x124>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4a47      	ldr	r2, [pc, #284]	@ (8008648 <xPortStartScheduler+0x128>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d10b      	bne.n	8008548 <xPortStartScheduler+0x28>
	__asm volatile
 8008530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008534:	f383 8811 	msr	BASEPRI, r3
 8008538:	f3bf 8f6f 	isb	sy
 800853c:	f3bf 8f4f 	dsb	sy
 8008540:	60fb      	str	r3, [r7, #12]
}
 8008542:	bf00      	nop
 8008544:	bf00      	nop
 8008546:	e7fd      	b.n	8008544 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008548:	4b3e      	ldr	r3, [pc, #248]	@ (8008644 <xPortStartScheduler+0x124>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	4a3f      	ldr	r2, [pc, #252]	@ (800864c <xPortStartScheduler+0x12c>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d10b      	bne.n	800856a <xPortStartScheduler+0x4a>
	__asm volatile
 8008552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008556:	f383 8811 	msr	BASEPRI, r3
 800855a:	f3bf 8f6f 	isb	sy
 800855e:	f3bf 8f4f 	dsb	sy
 8008562:	613b      	str	r3, [r7, #16]
}
 8008564:	bf00      	nop
 8008566:	bf00      	nop
 8008568:	e7fd      	b.n	8008566 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800856a:	4b39      	ldr	r3, [pc, #228]	@ (8008650 <xPortStartScheduler+0x130>)
 800856c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	781b      	ldrb	r3, [r3, #0]
 8008572:	b2db      	uxtb	r3, r3
 8008574:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	22ff      	movs	r2, #255	@ 0xff
 800857a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800857c:	697b      	ldr	r3, [r7, #20]
 800857e:	781b      	ldrb	r3, [r3, #0]
 8008580:	b2db      	uxtb	r3, r3
 8008582:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008584:	78fb      	ldrb	r3, [r7, #3]
 8008586:	b2db      	uxtb	r3, r3
 8008588:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800858c:	b2da      	uxtb	r2, r3
 800858e:	4b31      	ldr	r3, [pc, #196]	@ (8008654 <xPortStartScheduler+0x134>)
 8008590:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008592:	4b31      	ldr	r3, [pc, #196]	@ (8008658 <xPortStartScheduler+0x138>)
 8008594:	2207      	movs	r2, #7
 8008596:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008598:	e009      	b.n	80085ae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800859a:	4b2f      	ldr	r3, [pc, #188]	@ (8008658 <xPortStartScheduler+0x138>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	3b01      	subs	r3, #1
 80085a0:	4a2d      	ldr	r2, [pc, #180]	@ (8008658 <xPortStartScheduler+0x138>)
 80085a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80085a4:	78fb      	ldrb	r3, [r7, #3]
 80085a6:	b2db      	uxtb	r3, r3
 80085a8:	005b      	lsls	r3, r3, #1
 80085aa:	b2db      	uxtb	r3, r3
 80085ac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80085ae:	78fb      	ldrb	r3, [r7, #3]
 80085b0:	b2db      	uxtb	r3, r3
 80085b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085b6:	2b80      	cmp	r3, #128	@ 0x80
 80085b8:	d0ef      	beq.n	800859a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80085ba:	4b27      	ldr	r3, [pc, #156]	@ (8008658 <xPortStartScheduler+0x138>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f1c3 0307 	rsb	r3, r3, #7
 80085c2:	2b04      	cmp	r3, #4
 80085c4:	d00b      	beq.n	80085de <xPortStartScheduler+0xbe>
	__asm volatile
 80085c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085ca:	f383 8811 	msr	BASEPRI, r3
 80085ce:	f3bf 8f6f 	isb	sy
 80085d2:	f3bf 8f4f 	dsb	sy
 80085d6:	60bb      	str	r3, [r7, #8]
}
 80085d8:	bf00      	nop
 80085da:	bf00      	nop
 80085dc:	e7fd      	b.n	80085da <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80085de:	4b1e      	ldr	r3, [pc, #120]	@ (8008658 <xPortStartScheduler+0x138>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	021b      	lsls	r3, r3, #8
 80085e4:	4a1c      	ldr	r2, [pc, #112]	@ (8008658 <xPortStartScheduler+0x138>)
 80085e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80085e8:	4b1b      	ldr	r3, [pc, #108]	@ (8008658 <xPortStartScheduler+0x138>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80085f0:	4a19      	ldr	r2, [pc, #100]	@ (8008658 <xPortStartScheduler+0x138>)
 80085f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	b2da      	uxtb	r2, r3
 80085f8:	697b      	ldr	r3, [r7, #20]
 80085fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80085fc:	4b17      	ldr	r3, [pc, #92]	@ (800865c <xPortStartScheduler+0x13c>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4a16      	ldr	r2, [pc, #88]	@ (800865c <xPortStartScheduler+0x13c>)
 8008602:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008606:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008608:	4b14      	ldr	r3, [pc, #80]	@ (800865c <xPortStartScheduler+0x13c>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4a13      	ldr	r2, [pc, #76]	@ (800865c <xPortStartScheduler+0x13c>)
 800860e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008612:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008614:	f000 f8da 	bl	80087cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008618:	4b11      	ldr	r3, [pc, #68]	@ (8008660 <xPortStartScheduler+0x140>)
 800861a:	2200      	movs	r2, #0
 800861c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800861e:	f000 f8f9 	bl	8008814 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008622:	4b10      	ldr	r3, [pc, #64]	@ (8008664 <xPortStartScheduler+0x144>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	4a0f      	ldr	r2, [pc, #60]	@ (8008664 <xPortStartScheduler+0x144>)
 8008628:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800862c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800862e:	f7ff ff63 	bl	80084f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008632:	f7fe fbf7 	bl	8006e24 <vTaskSwitchContext>
	prvTaskExitError();
 8008636:	f7ff ff17 	bl	8008468 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800863a:	2300      	movs	r3, #0
}
 800863c:	4618      	mov	r0, r3
 800863e:	3718      	adds	r7, #24
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}
 8008644:	e000ed00 	.word	0xe000ed00
 8008648:	410fc271 	.word	0x410fc271
 800864c:	410fc270 	.word	0x410fc270
 8008650:	e000e400 	.word	0xe000e400
 8008654:	200010c8 	.word	0x200010c8
 8008658:	200010cc 	.word	0x200010cc
 800865c:	e000ed20 	.word	0xe000ed20
 8008660:	2000000c 	.word	0x2000000c
 8008664:	e000ef34 	.word	0xe000ef34

08008668 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008668:	b480      	push	{r7}
 800866a:	b083      	sub	sp, #12
 800866c:	af00      	add	r7, sp, #0
	__asm volatile
 800866e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008672:	f383 8811 	msr	BASEPRI, r3
 8008676:	f3bf 8f6f 	isb	sy
 800867a:	f3bf 8f4f 	dsb	sy
 800867e:	607b      	str	r3, [r7, #4]
}
 8008680:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008682:	4b10      	ldr	r3, [pc, #64]	@ (80086c4 <vPortEnterCritical+0x5c>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	3301      	adds	r3, #1
 8008688:	4a0e      	ldr	r2, [pc, #56]	@ (80086c4 <vPortEnterCritical+0x5c>)
 800868a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800868c:	4b0d      	ldr	r3, [pc, #52]	@ (80086c4 <vPortEnterCritical+0x5c>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	2b01      	cmp	r3, #1
 8008692:	d110      	bne.n	80086b6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008694:	4b0c      	ldr	r3, [pc, #48]	@ (80086c8 <vPortEnterCritical+0x60>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	b2db      	uxtb	r3, r3
 800869a:	2b00      	cmp	r3, #0
 800869c:	d00b      	beq.n	80086b6 <vPortEnterCritical+0x4e>
	__asm volatile
 800869e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086a2:	f383 8811 	msr	BASEPRI, r3
 80086a6:	f3bf 8f6f 	isb	sy
 80086aa:	f3bf 8f4f 	dsb	sy
 80086ae:	603b      	str	r3, [r7, #0]
}
 80086b0:	bf00      	nop
 80086b2:	bf00      	nop
 80086b4:	e7fd      	b.n	80086b2 <vPortEnterCritical+0x4a>
	}
}
 80086b6:	bf00      	nop
 80086b8:	370c      	adds	r7, #12
 80086ba:	46bd      	mov	sp, r7
 80086bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c0:	4770      	bx	lr
 80086c2:	bf00      	nop
 80086c4:	2000000c 	.word	0x2000000c
 80086c8:	e000ed04 	.word	0xe000ed04

080086cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80086cc:	b480      	push	{r7}
 80086ce:	b083      	sub	sp, #12
 80086d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80086d2:	4b12      	ldr	r3, [pc, #72]	@ (800871c <vPortExitCritical+0x50>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d10b      	bne.n	80086f2 <vPortExitCritical+0x26>
	__asm volatile
 80086da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086de:	f383 8811 	msr	BASEPRI, r3
 80086e2:	f3bf 8f6f 	isb	sy
 80086e6:	f3bf 8f4f 	dsb	sy
 80086ea:	607b      	str	r3, [r7, #4]
}
 80086ec:	bf00      	nop
 80086ee:	bf00      	nop
 80086f0:	e7fd      	b.n	80086ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80086f2:	4b0a      	ldr	r3, [pc, #40]	@ (800871c <vPortExitCritical+0x50>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	3b01      	subs	r3, #1
 80086f8:	4a08      	ldr	r2, [pc, #32]	@ (800871c <vPortExitCritical+0x50>)
 80086fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80086fc:	4b07      	ldr	r3, [pc, #28]	@ (800871c <vPortExitCritical+0x50>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d105      	bne.n	8008710 <vPortExitCritical+0x44>
 8008704:	2300      	movs	r3, #0
 8008706:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	f383 8811 	msr	BASEPRI, r3
}
 800870e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008710:	bf00      	nop
 8008712:	370c      	adds	r7, #12
 8008714:	46bd      	mov	sp, r7
 8008716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871a:	4770      	bx	lr
 800871c:	2000000c 	.word	0x2000000c

08008720 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008720:	f3ef 8009 	mrs	r0, PSP
 8008724:	f3bf 8f6f 	isb	sy
 8008728:	4b15      	ldr	r3, [pc, #84]	@ (8008780 <pxCurrentTCBConst>)
 800872a:	681a      	ldr	r2, [r3, #0]
 800872c:	f01e 0f10 	tst.w	lr, #16
 8008730:	bf08      	it	eq
 8008732:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008736:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800873a:	6010      	str	r0, [r2, #0]
 800873c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008740:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008744:	f380 8811 	msr	BASEPRI, r0
 8008748:	f3bf 8f4f 	dsb	sy
 800874c:	f3bf 8f6f 	isb	sy
 8008750:	f7fe fb68 	bl	8006e24 <vTaskSwitchContext>
 8008754:	f04f 0000 	mov.w	r0, #0
 8008758:	f380 8811 	msr	BASEPRI, r0
 800875c:	bc09      	pop	{r0, r3}
 800875e:	6819      	ldr	r1, [r3, #0]
 8008760:	6808      	ldr	r0, [r1, #0]
 8008762:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008766:	f01e 0f10 	tst.w	lr, #16
 800876a:	bf08      	it	eq
 800876c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008770:	f380 8809 	msr	PSP, r0
 8008774:	f3bf 8f6f 	isb	sy
 8008778:	4770      	bx	lr
 800877a:	bf00      	nop
 800877c:	f3af 8000 	nop.w

08008780 <pxCurrentTCBConst>:
 8008780:	20000a94 	.word	0x20000a94
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008784:	bf00      	nop
 8008786:	bf00      	nop

08008788 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b082      	sub	sp, #8
 800878c:	af00      	add	r7, sp, #0
	__asm volatile
 800878e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008792:	f383 8811 	msr	BASEPRI, r3
 8008796:	f3bf 8f6f 	isb	sy
 800879a:	f3bf 8f4f 	dsb	sy
 800879e:	607b      	str	r3, [r7, #4]
}
 80087a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80087a2:	f7fe fa85 	bl	8006cb0 <xTaskIncrementTick>
 80087a6:	4603      	mov	r3, r0
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d003      	beq.n	80087b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80087ac:	4b06      	ldr	r3, [pc, #24]	@ (80087c8 <xPortSysTickHandler+0x40>)
 80087ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80087b2:	601a      	str	r2, [r3, #0]
 80087b4:	2300      	movs	r3, #0
 80087b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	f383 8811 	msr	BASEPRI, r3
}
 80087be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80087c0:	bf00      	nop
 80087c2:	3708      	adds	r7, #8
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}
 80087c8:	e000ed04 	.word	0xe000ed04

080087cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80087cc:	b480      	push	{r7}
 80087ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80087d0:	4b0b      	ldr	r3, [pc, #44]	@ (8008800 <vPortSetupTimerInterrupt+0x34>)
 80087d2:	2200      	movs	r2, #0
 80087d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80087d6:	4b0b      	ldr	r3, [pc, #44]	@ (8008804 <vPortSetupTimerInterrupt+0x38>)
 80087d8:	2200      	movs	r2, #0
 80087da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80087dc:	4b0a      	ldr	r3, [pc, #40]	@ (8008808 <vPortSetupTimerInterrupt+0x3c>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a0a      	ldr	r2, [pc, #40]	@ (800880c <vPortSetupTimerInterrupt+0x40>)
 80087e2:	fba2 2303 	umull	r2, r3, r2, r3
 80087e6:	099b      	lsrs	r3, r3, #6
 80087e8:	4a09      	ldr	r2, [pc, #36]	@ (8008810 <vPortSetupTimerInterrupt+0x44>)
 80087ea:	3b01      	subs	r3, #1
 80087ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80087ee:	4b04      	ldr	r3, [pc, #16]	@ (8008800 <vPortSetupTimerInterrupt+0x34>)
 80087f0:	2207      	movs	r2, #7
 80087f2:	601a      	str	r2, [r3, #0]
}
 80087f4:	bf00      	nop
 80087f6:	46bd      	mov	sp, r7
 80087f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fc:	4770      	bx	lr
 80087fe:	bf00      	nop
 8008800:	e000e010 	.word	0xe000e010
 8008804:	e000e018 	.word	0xe000e018
 8008808:	20000000 	.word	0x20000000
 800880c:	10624dd3 	.word	0x10624dd3
 8008810:	e000e014 	.word	0xe000e014

08008814 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008814:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008824 <vPortEnableVFP+0x10>
 8008818:	6801      	ldr	r1, [r0, #0]
 800881a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800881e:	6001      	str	r1, [r0, #0]
 8008820:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008822:	bf00      	nop
 8008824:	e000ed88 	.word	0xe000ed88

08008828 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008828:	b480      	push	{r7}
 800882a:	b085      	sub	sp, #20
 800882c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800882e:	f3ef 8305 	mrs	r3, IPSR
 8008832:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	2b0f      	cmp	r3, #15
 8008838:	d915      	bls.n	8008866 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800883a:	4a18      	ldr	r2, [pc, #96]	@ (800889c <vPortValidateInterruptPriority+0x74>)
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	4413      	add	r3, r2
 8008840:	781b      	ldrb	r3, [r3, #0]
 8008842:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008844:	4b16      	ldr	r3, [pc, #88]	@ (80088a0 <vPortValidateInterruptPriority+0x78>)
 8008846:	781b      	ldrb	r3, [r3, #0]
 8008848:	7afa      	ldrb	r2, [r7, #11]
 800884a:	429a      	cmp	r2, r3
 800884c:	d20b      	bcs.n	8008866 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800884e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008852:	f383 8811 	msr	BASEPRI, r3
 8008856:	f3bf 8f6f 	isb	sy
 800885a:	f3bf 8f4f 	dsb	sy
 800885e:	607b      	str	r3, [r7, #4]
}
 8008860:	bf00      	nop
 8008862:	bf00      	nop
 8008864:	e7fd      	b.n	8008862 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008866:	4b0f      	ldr	r3, [pc, #60]	@ (80088a4 <vPortValidateInterruptPriority+0x7c>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800886e:	4b0e      	ldr	r3, [pc, #56]	@ (80088a8 <vPortValidateInterruptPriority+0x80>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	429a      	cmp	r2, r3
 8008874:	d90b      	bls.n	800888e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800887a:	f383 8811 	msr	BASEPRI, r3
 800887e:	f3bf 8f6f 	isb	sy
 8008882:	f3bf 8f4f 	dsb	sy
 8008886:	603b      	str	r3, [r7, #0]
}
 8008888:	bf00      	nop
 800888a:	bf00      	nop
 800888c:	e7fd      	b.n	800888a <vPortValidateInterruptPriority+0x62>
	}
 800888e:	bf00      	nop
 8008890:	3714      	adds	r7, #20
 8008892:	46bd      	mov	sp, r7
 8008894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008898:	4770      	bx	lr
 800889a:	bf00      	nop
 800889c:	e000e3f0 	.word	0xe000e3f0
 80088a0:	200010c8 	.word	0x200010c8
 80088a4:	e000ed0c 	.word	0xe000ed0c
 80088a8:	200010cc 	.word	0x200010cc

080088ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b08a      	sub	sp, #40	@ 0x28
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80088b4:	2300      	movs	r3, #0
 80088b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80088b8:	f7fe f8ae 	bl	8006a18 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80088bc:	4b5c      	ldr	r3, [pc, #368]	@ (8008a30 <pvPortMalloc+0x184>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d101      	bne.n	80088c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80088c4:	f000 f924 	bl	8008b10 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80088c8:	4b5a      	ldr	r3, [pc, #360]	@ (8008a34 <pvPortMalloc+0x188>)
 80088ca:	681a      	ldr	r2, [r3, #0]
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	4013      	ands	r3, r2
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	f040 8095 	bne.w	8008a00 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d01e      	beq.n	800891a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80088dc:	2208      	movs	r2, #8
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	4413      	add	r3, r2
 80088e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f003 0307 	and.w	r3, r3, #7
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d015      	beq.n	800891a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f023 0307 	bic.w	r3, r3, #7
 80088f4:	3308      	adds	r3, #8
 80088f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f003 0307 	and.w	r3, r3, #7
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d00b      	beq.n	800891a <pvPortMalloc+0x6e>
	__asm volatile
 8008902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008906:	f383 8811 	msr	BASEPRI, r3
 800890a:	f3bf 8f6f 	isb	sy
 800890e:	f3bf 8f4f 	dsb	sy
 8008912:	617b      	str	r3, [r7, #20]
}
 8008914:	bf00      	nop
 8008916:	bf00      	nop
 8008918:	e7fd      	b.n	8008916 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d06f      	beq.n	8008a00 <pvPortMalloc+0x154>
 8008920:	4b45      	ldr	r3, [pc, #276]	@ (8008a38 <pvPortMalloc+0x18c>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	687a      	ldr	r2, [r7, #4]
 8008926:	429a      	cmp	r2, r3
 8008928:	d86a      	bhi.n	8008a00 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800892a:	4b44      	ldr	r3, [pc, #272]	@ (8008a3c <pvPortMalloc+0x190>)
 800892c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800892e:	4b43      	ldr	r3, [pc, #268]	@ (8008a3c <pvPortMalloc+0x190>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008934:	e004      	b.n	8008940 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008938:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800893a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008942:	685b      	ldr	r3, [r3, #4]
 8008944:	687a      	ldr	r2, [r7, #4]
 8008946:	429a      	cmp	r2, r3
 8008948:	d903      	bls.n	8008952 <pvPortMalloc+0xa6>
 800894a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d1f1      	bne.n	8008936 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008952:	4b37      	ldr	r3, [pc, #220]	@ (8008a30 <pvPortMalloc+0x184>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008958:	429a      	cmp	r2, r3
 800895a:	d051      	beq.n	8008a00 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800895c:	6a3b      	ldr	r3, [r7, #32]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	2208      	movs	r2, #8
 8008962:	4413      	add	r3, r2
 8008964:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008968:	681a      	ldr	r2, [r3, #0]
 800896a:	6a3b      	ldr	r3, [r7, #32]
 800896c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800896e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008970:	685a      	ldr	r2, [r3, #4]
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	1ad2      	subs	r2, r2, r3
 8008976:	2308      	movs	r3, #8
 8008978:	005b      	lsls	r3, r3, #1
 800897a:	429a      	cmp	r2, r3
 800897c:	d920      	bls.n	80089c0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800897e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	4413      	add	r3, r2
 8008984:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008986:	69bb      	ldr	r3, [r7, #24]
 8008988:	f003 0307 	and.w	r3, r3, #7
 800898c:	2b00      	cmp	r3, #0
 800898e:	d00b      	beq.n	80089a8 <pvPortMalloc+0xfc>
	__asm volatile
 8008990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008994:	f383 8811 	msr	BASEPRI, r3
 8008998:	f3bf 8f6f 	isb	sy
 800899c:	f3bf 8f4f 	dsb	sy
 80089a0:	613b      	str	r3, [r7, #16]
}
 80089a2:	bf00      	nop
 80089a4:	bf00      	nop
 80089a6:	e7fd      	b.n	80089a4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80089a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089aa:	685a      	ldr	r2, [r3, #4]
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	1ad2      	subs	r2, r2, r3
 80089b0:	69bb      	ldr	r3, [r7, #24]
 80089b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80089b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089b6:	687a      	ldr	r2, [r7, #4]
 80089b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80089ba:	69b8      	ldr	r0, [r7, #24]
 80089bc:	f000 f90a 	bl	8008bd4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80089c0:	4b1d      	ldr	r3, [pc, #116]	@ (8008a38 <pvPortMalloc+0x18c>)
 80089c2:	681a      	ldr	r2, [r3, #0]
 80089c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089c6:	685b      	ldr	r3, [r3, #4]
 80089c8:	1ad3      	subs	r3, r2, r3
 80089ca:	4a1b      	ldr	r2, [pc, #108]	@ (8008a38 <pvPortMalloc+0x18c>)
 80089cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80089ce:	4b1a      	ldr	r3, [pc, #104]	@ (8008a38 <pvPortMalloc+0x18c>)
 80089d0:	681a      	ldr	r2, [r3, #0]
 80089d2:	4b1b      	ldr	r3, [pc, #108]	@ (8008a40 <pvPortMalloc+0x194>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	429a      	cmp	r2, r3
 80089d8:	d203      	bcs.n	80089e2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80089da:	4b17      	ldr	r3, [pc, #92]	@ (8008a38 <pvPortMalloc+0x18c>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	4a18      	ldr	r2, [pc, #96]	@ (8008a40 <pvPortMalloc+0x194>)
 80089e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80089e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089e4:	685a      	ldr	r2, [r3, #4]
 80089e6:	4b13      	ldr	r3, [pc, #76]	@ (8008a34 <pvPortMalloc+0x188>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	431a      	orrs	r2, r3
 80089ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80089f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089f2:	2200      	movs	r2, #0
 80089f4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80089f6:	4b13      	ldr	r3, [pc, #76]	@ (8008a44 <pvPortMalloc+0x198>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	3301      	adds	r3, #1
 80089fc:	4a11      	ldr	r2, [pc, #68]	@ (8008a44 <pvPortMalloc+0x198>)
 80089fe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008a00:	f7fe f818 	bl	8006a34 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a04:	69fb      	ldr	r3, [r7, #28]
 8008a06:	f003 0307 	and.w	r3, r3, #7
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d00b      	beq.n	8008a26 <pvPortMalloc+0x17a>
	__asm volatile
 8008a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a12:	f383 8811 	msr	BASEPRI, r3
 8008a16:	f3bf 8f6f 	isb	sy
 8008a1a:	f3bf 8f4f 	dsb	sy
 8008a1e:	60fb      	str	r3, [r7, #12]
}
 8008a20:	bf00      	nop
 8008a22:	bf00      	nop
 8008a24:	e7fd      	b.n	8008a22 <pvPortMalloc+0x176>
	return pvReturn;
 8008a26:	69fb      	ldr	r3, [r7, #28]
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3728      	adds	r7, #40	@ 0x28
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}
 8008a30:	20004cd8 	.word	0x20004cd8
 8008a34:	20004cec 	.word	0x20004cec
 8008a38:	20004cdc 	.word	0x20004cdc
 8008a3c:	20004cd0 	.word	0x20004cd0
 8008a40:	20004ce0 	.word	0x20004ce0
 8008a44:	20004ce4 	.word	0x20004ce4

08008a48 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b086      	sub	sp, #24
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d04f      	beq.n	8008afa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008a5a:	2308      	movs	r3, #8
 8008a5c:	425b      	negs	r3, r3
 8008a5e:	697a      	ldr	r2, [r7, #20]
 8008a60:	4413      	add	r3, r2
 8008a62:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008a64:	697b      	ldr	r3, [r7, #20]
 8008a66:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008a68:	693b      	ldr	r3, [r7, #16]
 8008a6a:	685a      	ldr	r2, [r3, #4]
 8008a6c:	4b25      	ldr	r3, [pc, #148]	@ (8008b04 <vPortFree+0xbc>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	4013      	ands	r3, r2
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d10b      	bne.n	8008a8e <vPortFree+0x46>
	__asm volatile
 8008a76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a7a:	f383 8811 	msr	BASEPRI, r3
 8008a7e:	f3bf 8f6f 	isb	sy
 8008a82:	f3bf 8f4f 	dsb	sy
 8008a86:	60fb      	str	r3, [r7, #12]
}
 8008a88:	bf00      	nop
 8008a8a:	bf00      	nop
 8008a8c:	e7fd      	b.n	8008a8a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008a8e:	693b      	ldr	r3, [r7, #16]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d00b      	beq.n	8008aae <vPortFree+0x66>
	__asm volatile
 8008a96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a9a:	f383 8811 	msr	BASEPRI, r3
 8008a9e:	f3bf 8f6f 	isb	sy
 8008aa2:	f3bf 8f4f 	dsb	sy
 8008aa6:	60bb      	str	r3, [r7, #8]
}
 8008aa8:	bf00      	nop
 8008aaa:	bf00      	nop
 8008aac:	e7fd      	b.n	8008aaa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008aae:	693b      	ldr	r3, [r7, #16]
 8008ab0:	685a      	ldr	r2, [r3, #4]
 8008ab2:	4b14      	ldr	r3, [pc, #80]	@ (8008b04 <vPortFree+0xbc>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	4013      	ands	r3, r2
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d01e      	beq.n	8008afa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d11a      	bne.n	8008afa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	685a      	ldr	r2, [r3, #4]
 8008ac8:	4b0e      	ldr	r3, [pc, #56]	@ (8008b04 <vPortFree+0xbc>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	43db      	mvns	r3, r3
 8008ace:	401a      	ands	r2, r3
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008ad4:	f7fd ffa0 	bl	8006a18 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008ad8:	693b      	ldr	r3, [r7, #16]
 8008ada:	685a      	ldr	r2, [r3, #4]
 8008adc:	4b0a      	ldr	r3, [pc, #40]	@ (8008b08 <vPortFree+0xc0>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4413      	add	r3, r2
 8008ae2:	4a09      	ldr	r2, [pc, #36]	@ (8008b08 <vPortFree+0xc0>)
 8008ae4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008ae6:	6938      	ldr	r0, [r7, #16]
 8008ae8:	f000 f874 	bl	8008bd4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008aec:	4b07      	ldr	r3, [pc, #28]	@ (8008b0c <vPortFree+0xc4>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	3301      	adds	r3, #1
 8008af2:	4a06      	ldr	r2, [pc, #24]	@ (8008b0c <vPortFree+0xc4>)
 8008af4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008af6:	f7fd ff9d 	bl	8006a34 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008afa:	bf00      	nop
 8008afc:	3718      	adds	r7, #24
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}
 8008b02:	bf00      	nop
 8008b04:	20004cec 	.word	0x20004cec
 8008b08:	20004cdc 	.word	0x20004cdc
 8008b0c:	20004ce8 	.word	0x20004ce8

08008b10 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008b10:	b480      	push	{r7}
 8008b12:	b085      	sub	sp, #20
 8008b14:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008b16:	f643 33ff 	movw	r3, #15359	@ 0x3bff
 8008b1a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008b1c:	4b27      	ldr	r3, [pc, #156]	@ (8008bbc <prvHeapInit+0xac>)
 8008b1e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	f003 0307 	and.w	r3, r3, #7
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d00c      	beq.n	8008b44 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	3307      	adds	r3, #7
 8008b2e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	f023 0307 	bic.w	r3, r3, #7
 8008b36:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008b38:	68ba      	ldr	r2, [r7, #8]
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	1ad3      	subs	r3, r2, r3
 8008b3e:	4a1f      	ldr	r2, [pc, #124]	@ (8008bbc <prvHeapInit+0xac>)
 8008b40:	4413      	add	r3, r2
 8008b42:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008b48:	4a1d      	ldr	r2, [pc, #116]	@ (8008bc0 <prvHeapInit+0xb0>)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008b4e:	4b1c      	ldr	r3, [pc, #112]	@ (8008bc0 <prvHeapInit+0xb0>)
 8008b50:	2200      	movs	r2, #0
 8008b52:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	68ba      	ldr	r2, [r7, #8]
 8008b58:	4413      	add	r3, r2
 8008b5a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008b5c:	2208      	movs	r2, #8
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	1a9b      	subs	r3, r3, r2
 8008b62:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	f023 0307 	bic.w	r3, r3, #7
 8008b6a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	4a15      	ldr	r2, [pc, #84]	@ (8008bc4 <prvHeapInit+0xb4>)
 8008b70:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008b72:	4b14      	ldr	r3, [pc, #80]	@ (8008bc4 <prvHeapInit+0xb4>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	2200      	movs	r2, #0
 8008b78:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008b7a:	4b12      	ldr	r3, [pc, #72]	@ (8008bc4 <prvHeapInit+0xb4>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	2200      	movs	r2, #0
 8008b80:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	68fa      	ldr	r2, [r7, #12]
 8008b8a:	1ad2      	subs	r2, r2, r3
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008b90:	4b0c      	ldr	r3, [pc, #48]	@ (8008bc4 <prvHeapInit+0xb4>)
 8008b92:	681a      	ldr	r2, [r3, #0]
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	685b      	ldr	r3, [r3, #4]
 8008b9c:	4a0a      	ldr	r2, [pc, #40]	@ (8008bc8 <prvHeapInit+0xb8>)
 8008b9e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	685b      	ldr	r3, [r3, #4]
 8008ba4:	4a09      	ldr	r2, [pc, #36]	@ (8008bcc <prvHeapInit+0xbc>)
 8008ba6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008ba8:	4b09      	ldr	r3, [pc, #36]	@ (8008bd0 <prvHeapInit+0xc0>)
 8008baa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008bae:	601a      	str	r2, [r3, #0]
}
 8008bb0:	bf00      	nop
 8008bb2:	3714      	adds	r7, #20
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bba:	4770      	bx	lr
 8008bbc:	200010d0 	.word	0x200010d0
 8008bc0:	20004cd0 	.word	0x20004cd0
 8008bc4:	20004cd8 	.word	0x20004cd8
 8008bc8:	20004ce0 	.word	0x20004ce0
 8008bcc:	20004cdc 	.word	0x20004cdc
 8008bd0:	20004cec 	.word	0x20004cec

08008bd4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b085      	sub	sp, #20
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008bdc:	4b28      	ldr	r3, [pc, #160]	@ (8008c80 <prvInsertBlockIntoFreeList+0xac>)
 8008bde:	60fb      	str	r3, [r7, #12]
 8008be0:	e002      	b.n	8008be8 <prvInsertBlockIntoFreeList+0x14>
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	60fb      	str	r3, [r7, #12]
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	687a      	ldr	r2, [r7, #4]
 8008bee:	429a      	cmp	r2, r3
 8008bf0:	d8f7      	bhi.n	8008be2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	685b      	ldr	r3, [r3, #4]
 8008bfa:	68ba      	ldr	r2, [r7, #8]
 8008bfc:	4413      	add	r3, r2
 8008bfe:	687a      	ldr	r2, [r7, #4]
 8008c00:	429a      	cmp	r2, r3
 8008c02:	d108      	bne.n	8008c16 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	685a      	ldr	r2, [r3, #4]
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	685b      	ldr	r3, [r3, #4]
 8008c0c:	441a      	add	r2, r3
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	685b      	ldr	r3, [r3, #4]
 8008c1e:	68ba      	ldr	r2, [r7, #8]
 8008c20:	441a      	add	r2, r3
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	429a      	cmp	r2, r3
 8008c28:	d118      	bne.n	8008c5c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681a      	ldr	r2, [r3, #0]
 8008c2e:	4b15      	ldr	r3, [pc, #84]	@ (8008c84 <prvInsertBlockIntoFreeList+0xb0>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	429a      	cmp	r2, r3
 8008c34:	d00d      	beq.n	8008c52 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	685a      	ldr	r2, [r3, #4]
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	685b      	ldr	r3, [r3, #4]
 8008c40:	441a      	add	r2, r3
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	681a      	ldr	r2, [r3, #0]
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	601a      	str	r2, [r3, #0]
 8008c50:	e008      	b.n	8008c64 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008c52:	4b0c      	ldr	r3, [pc, #48]	@ (8008c84 <prvInsertBlockIntoFreeList+0xb0>)
 8008c54:	681a      	ldr	r2, [r3, #0]
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	601a      	str	r2, [r3, #0]
 8008c5a:	e003      	b.n	8008c64 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	681a      	ldr	r2, [r3, #0]
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008c64:	68fa      	ldr	r2, [r7, #12]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	d002      	beq.n	8008c72 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	687a      	ldr	r2, [r7, #4]
 8008c70:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c72:	bf00      	nop
 8008c74:	3714      	adds	r7, #20
 8008c76:	46bd      	mov	sp, r7
 8008c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7c:	4770      	bx	lr
 8008c7e:	bf00      	nop
 8008c80:	20004cd0 	.word	0x20004cd0
 8008c84:	20004cd8 	.word	0x20004cd8

08008c88 <swapfunc>:
 8008c88:	2b02      	cmp	r3, #2
 8008c8a:	b510      	push	{r4, lr}
 8008c8c:	d00a      	beq.n	8008ca4 <swapfunc+0x1c>
 8008c8e:	0892      	lsrs	r2, r2, #2
 8008c90:	3a01      	subs	r2, #1
 8008c92:	6803      	ldr	r3, [r0, #0]
 8008c94:	680c      	ldr	r4, [r1, #0]
 8008c96:	f840 4b04 	str.w	r4, [r0], #4
 8008c9a:	2a00      	cmp	r2, #0
 8008c9c:	f841 3b04 	str.w	r3, [r1], #4
 8008ca0:	dcf6      	bgt.n	8008c90 <swapfunc+0x8>
 8008ca2:	bd10      	pop	{r4, pc}
 8008ca4:	4402      	add	r2, r0
 8008ca6:	780c      	ldrb	r4, [r1, #0]
 8008ca8:	7803      	ldrb	r3, [r0, #0]
 8008caa:	f800 4b01 	strb.w	r4, [r0], #1
 8008cae:	f801 3b01 	strb.w	r3, [r1], #1
 8008cb2:	1a13      	subs	r3, r2, r0
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	dcf6      	bgt.n	8008ca6 <swapfunc+0x1e>
 8008cb8:	e7f3      	b.n	8008ca2 <swapfunc+0x1a>

08008cba <med3.constprop.0>:
 8008cba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cbc:	460f      	mov	r7, r1
 8008cbe:	4616      	mov	r6, r2
 8008cc0:	4604      	mov	r4, r0
 8008cc2:	461d      	mov	r5, r3
 8008cc4:	4798      	blx	r3
 8008cc6:	2800      	cmp	r0, #0
 8008cc8:	4631      	mov	r1, r6
 8008cca:	4638      	mov	r0, r7
 8008ccc:	da0c      	bge.n	8008ce8 <med3.constprop.0+0x2e>
 8008cce:	47a8      	blx	r5
 8008cd0:	2800      	cmp	r0, #0
 8008cd2:	da02      	bge.n	8008cda <med3.constprop.0+0x20>
 8008cd4:	463c      	mov	r4, r7
 8008cd6:	4620      	mov	r0, r4
 8008cd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008cda:	4631      	mov	r1, r6
 8008cdc:	4620      	mov	r0, r4
 8008cde:	47a8      	blx	r5
 8008ce0:	2800      	cmp	r0, #0
 8008ce2:	daf8      	bge.n	8008cd6 <med3.constprop.0+0x1c>
 8008ce4:	4634      	mov	r4, r6
 8008ce6:	e7f6      	b.n	8008cd6 <med3.constprop.0+0x1c>
 8008ce8:	47a8      	blx	r5
 8008cea:	2800      	cmp	r0, #0
 8008cec:	dcf2      	bgt.n	8008cd4 <med3.constprop.0+0x1a>
 8008cee:	4631      	mov	r1, r6
 8008cf0:	4620      	mov	r0, r4
 8008cf2:	47a8      	blx	r5
 8008cf4:	2800      	cmp	r0, #0
 8008cf6:	daf5      	bge.n	8008ce4 <med3.constprop.0+0x2a>
 8008cf8:	e7ed      	b.n	8008cd6 <med3.constprop.0+0x1c>

08008cfa <qsort>:
 8008cfa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cfe:	b095      	sub	sp, #84	@ 0x54
 8008d00:	4607      	mov	r7, r0
 8008d02:	9300      	str	r3, [sp, #0]
 8008d04:	ea40 0302 	orr.w	r3, r0, r2
 8008d08:	079b      	lsls	r3, r3, #30
 8008d0a:	4615      	mov	r5, r2
 8008d0c:	d118      	bne.n	8008d40 <qsort+0x46>
 8008d0e:	f1b2 0804 	subs.w	r8, r2, #4
 8008d12:	bf18      	it	ne
 8008d14:	f04f 0801 	movne.w	r8, #1
 8008d18:	2300      	movs	r3, #0
 8008d1a:	9301      	str	r3, [sp, #4]
 8008d1c:	fb05 f401 	mul.w	r4, r5, r1
 8008d20:	193b      	adds	r3, r7, r4
 8008d22:	2906      	cmp	r1, #6
 8008d24:	eb07 0b05 	add.w	fp, r7, r5
 8008d28:	9302      	str	r3, [sp, #8]
 8008d2a:	d828      	bhi.n	8008d7e <qsort+0x84>
 8008d2c:	9b02      	ldr	r3, [sp, #8]
 8008d2e:	459b      	cmp	fp, r3
 8008d30:	d310      	bcc.n	8008d54 <qsort+0x5a>
 8008d32:	9b01      	ldr	r3, [sp, #4]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	f040 8117 	bne.w	8008f68 <qsort+0x26e>
 8008d3a:	b015      	add	sp, #84	@ 0x54
 8008d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d40:	f04f 0802 	mov.w	r8, #2
 8008d44:	e7e8      	b.n	8008d18 <qsort+0x1e>
 8008d46:	4643      	mov	r3, r8
 8008d48:	462a      	mov	r2, r5
 8008d4a:	4631      	mov	r1, r6
 8008d4c:	4620      	mov	r0, r4
 8008d4e:	f7ff ff9b 	bl	8008c88 <swapfunc>
 8008d52:	e00f      	b.n	8008d74 <qsort+0x7a>
 8008d54:	465c      	mov	r4, fp
 8008d56:	e00e      	b.n	8008d76 <qsort+0x7c>
 8008d58:	1b66      	subs	r6, r4, r5
 8008d5a:	9b00      	ldr	r3, [sp, #0]
 8008d5c:	4621      	mov	r1, r4
 8008d5e:	4630      	mov	r0, r6
 8008d60:	4798      	blx	r3
 8008d62:	2800      	cmp	r0, #0
 8008d64:	dd09      	ble.n	8008d7a <qsort+0x80>
 8008d66:	f1b8 0f00 	cmp.w	r8, #0
 8008d6a:	d1ec      	bne.n	8008d46 <qsort+0x4c>
 8008d6c:	6823      	ldr	r3, [r4, #0]
 8008d6e:	6832      	ldr	r2, [r6, #0]
 8008d70:	6022      	str	r2, [r4, #0]
 8008d72:	6033      	str	r3, [r6, #0]
 8008d74:	4634      	mov	r4, r6
 8008d76:	42a7      	cmp	r7, r4
 8008d78:	d3ee      	bcc.n	8008d58 <qsort+0x5e>
 8008d7a:	44ab      	add	fp, r5
 8008d7c:	e7d6      	b.n	8008d2c <qsort+0x32>
 8008d7e:	ea4f 0951 	mov.w	r9, r1, lsr #1
 8008d82:	1b64      	subs	r4, r4, r5
 8008d84:	2907      	cmp	r1, #7
 8008d86:	fb05 7909 	mla	r9, r5, r9, r7
 8008d8a:	443c      	add	r4, r7
 8008d8c:	d021      	beq.n	8008dd2 <qsort+0xd8>
 8008d8e:	2928      	cmp	r1, #40	@ 0x28
 8008d90:	d944      	bls.n	8008e1c <qsort+0x122>
 8008d92:	08ce      	lsrs	r6, r1, #3
 8008d94:	436e      	muls	r6, r5
 8008d96:	9b00      	ldr	r3, [sp, #0]
 8008d98:	eb07 0246 	add.w	r2, r7, r6, lsl #1
 8008d9c:	19b9      	adds	r1, r7, r6
 8008d9e:	4638      	mov	r0, r7
 8008da0:	f7ff ff8b 	bl	8008cba <med3.constprop.0>
 8008da4:	4649      	mov	r1, r9
 8008da6:	eb09 0206 	add.w	r2, r9, r6
 8008daa:	9b00      	ldr	r3, [sp, #0]
 8008dac:	4682      	mov	sl, r0
 8008dae:	1b88      	subs	r0, r1, r6
 8008db0:	f7ff ff83 	bl	8008cba <med3.constprop.0>
 8008db4:	4622      	mov	r2, r4
 8008db6:	9b00      	ldr	r3, [sp, #0]
 8008db8:	4681      	mov	r9, r0
 8008dba:	1ba1      	subs	r1, r4, r6
 8008dbc:	eba4 0046 	sub.w	r0, r4, r6, lsl #1
 8008dc0:	f7ff ff7b 	bl	8008cba <med3.constprop.0>
 8008dc4:	4602      	mov	r2, r0
 8008dc6:	4649      	mov	r1, r9
 8008dc8:	9b00      	ldr	r3, [sp, #0]
 8008dca:	4650      	mov	r0, sl
 8008dcc:	f7ff ff75 	bl	8008cba <med3.constprop.0>
 8008dd0:	4681      	mov	r9, r0
 8008dd2:	f1b8 0f00 	cmp.w	r8, #0
 8008dd6:	d124      	bne.n	8008e22 <qsort+0x128>
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	f8d9 2000 	ldr.w	r2, [r9]
 8008dde:	603a      	str	r2, [r7, #0]
 8008de0:	f8c9 3000 	str.w	r3, [r9]
 8008de4:	46d9      	mov	r9, fp
 8008de6:	46a2      	mov	sl, r4
 8008de8:	465e      	mov	r6, fp
 8008dea:	2300      	movs	r3, #0
 8008dec:	45a1      	cmp	r9, r4
 8008dee:	d836      	bhi.n	8008e5e <qsort+0x164>
 8008df0:	9303      	str	r3, [sp, #12]
 8008df2:	4639      	mov	r1, r7
 8008df4:	9b00      	ldr	r3, [sp, #0]
 8008df6:	4648      	mov	r0, r9
 8008df8:	4798      	blx	r3
 8008dfa:	2800      	cmp	r0, #0
 8008dfc:	9b03      	ldr	r3, [sp, #12]
 8008dfe:	dc2c      	bgt.n	8008e5a <qsort+0x160>
 8008e00:	d10a      	bne.n	8008e18 <qsort+0x11e>
 8008e02:	f1b8 0f00 	cmp.w	r8, #0
 8008e06:	d113      	bne.n	8008e30 <qsort+0x136>
 8008e08:	6833      	ldr	r3, [r6, #0]
 8008e0a:	f8d9 2000 	ldr.w	r2, [r9]
 8008e0e:	6032      	str	r2, [r6, #0]
 8008e10:	f8c9 3000 	str.w	r3, [r9]
 8008e14:	442e      	add	r6, r5
 8008e16:	2301      	movs	r3, #1
 8008e18:	44a9      	add	r9, r5
 8008e1a:	e7e7      	b.n	8008dec <qsort+0xf2>
 8008e1c:	4622      	mov	r2, r4
 8008e1e:	46ba      	mov	sl, r7
 8008e20:	e7d1      	b.n	8008dc6 <qsort+0xcc>
 8008e22:	4643      	mov	r3, r8
 8008e24:	462a      	mov	r2, r5
 8008e26:	4649      	mov	r1, r9
 8008e28:	4638      	mov	r0, r7
 8008e2a:	f7ff ff2d 	bl	8008c88 <swapfunc>
 8008e2e:	e7d9      	b.n	8008de4 <qsort+0xea>
 8008e30:	4643      	mov	r3, r8
 8008e32:	462a      	mov	r2, r5
 8008e34:	4649      	mov	r1, r9
 8008e36:	4630      	mov	r0, r6
 8008e38:	f7ff ff26 	bl	8008c88 <swapfunc>
 8008e3c:	e7ea      	b.n	8008e14 <qsort+0x11a>
 8008e3e:	d10b      	bne.n	8008e58 <qsort+0x15e>
 8008e40:	f1b8 0f00 	cmp.w	r8, #0
 8008e44:	d113      	bne.n	8008e6e <qsort+0x174>
 8008e46:	6823      	ldr	r3, [r4, #0]
 8008e48:	f8da 2000 	ldr.w	r2, [sl]
 8008e4c:	6022      	str	r2, [r4, #0]
 8008e4e:	f8ca 3000 	str.w	r3, [sl]
 8008e52:	ebaa 0a05 	sub.w	sl, sl, r5
 8008e56:	2301      	movs	r3, #1
 8008e58:	1b64      	subs	r4, r4, r5
 8008e5a:	45a1      	cmp	r9, r4
 8008e5c:	d90e      	bls.n	8008e7c <qsort+0x182>
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d140      	bne.n	8008ee4 <qsort+0x1ea>
 8008e62:	9b02      	ldr	r3, [sp, #8]
 8008e64:	459b      	cmp	fp, r3
 8008e66:	f4bf af64 	bcs.w	8008d32 <qsort+0x38>
 8008e6a:	465c      	mov	r4, fp
 8008e6c:	e036      	b.n	8008edc <qsort+0x1e2>
 8008e6e:	4643      	mov	r3, r8
 8008e70:	462a      	mov	r2, r5
 8008e72:	4651      	mov	r1, sl
 8008e74:	4620      	mov	r0, r4
 8008e76:	f7ff ff07 	bl	8008c88 <swapfunc>
 8008e7a:	e7ea      	b.n	8008e52 <qsort+0x158>
 8008e7c:	9303      	str	r3, [sp, #12]
 8008e7e:	4639      	mov	r1, r7
 8008e80:	9b00      	ldr	r3, [sp, #0]
 8008e82:	4620      	mov	r0, r4
 8008e84:	4798      	blx	r3
 8008e86:	2800      	cmp	r0, #0
 8008e88:	9b03      	ldr	r3, [sp, #12]
 8008e8a:	dad8      	bge.n	8008e3e <qsort+0x144>
 8008e8c:	f1b8 0f00 	cmp.w	r8, #0
 8008e90:	d107      	bne.n	8008ea2 <qsort+0x1a8>
 8008e92:	f8d9 3000 	ldr.w	r3, [r9]
 8008e96:	6822      	ldr	r2, [r4, #0]
 8008e98:	f8c9 2000 	str.w	r2, [r9]
 8008e9c:	6023      	str	r3, [r4, #0]
 8008e9e:	1b64      	subs	r4, r4, r5
 8008ea0:	e7b9      	b.n	8008e16 <qsort+0x11c>
 8008ea2:	4643      	mov	r3, r8
 8008ea4:	462a      	mov	r2, r5
 8008ea6:	4621      	mov	r1, r4
 8008ea8:	4648      	mov	r0, r9
 8008eaa:	f7ff feed 	bl	8008c88 <swapfunc>
 8008eae:	e7f6      	b.n	8008e9e <qsort+0x1a4>
 8008eb0:	4643      	mov	r3, r8
 8008eb2:	462a      	mov	r2, r5
 8008eb4:	4631      	mov	r1, r6
 8008eb6:	4620      	mov	r0, r4
 8008eb8:	f7ff fee6 	bl	8008c88 <swapfunc>
 8008ebc:	e00d      	b.n	8008eda <qsort+0x1e0>
 8008ebe:	1b66      	subs	r6, r4, r5
 8008ec0:	9b00      	ldr	r3, [sp, #0]
 8008ec2:	4621      	mov	r1, r4
 8008ec4:	4630      	mov	r0, r6
 8008ec6:	4798      	blx	r3
 8008ec8:	2800      	cmp	r0, #0
 8008eca:	dd09      	ble.n	8008ee0 <qsort+0x1e6>
 8008ecc:	f1b8 0f00 	cmp.w	r8, #0
 8008ed0:	d1ee      	bne.n	8008eb0 <qsort+0x1b6>
 8008ed2:	6823      	ldr	r3, [r4, #0]
 8008ed4:	6832      	ldr	r2, [r6, #0]
 8008ed6:	6022      	str	r2, [r4, #0]
 8008ed8:	6033      	str	r3, [r6, #0]
 8008eda:	4634      	mov	r4, r6
 8008edc:	42a7      	cmp	r7, r4
 8008ede:	d3ee      	bcc.n	8008ebe <qsort+0x1c4>
 8008ee0:	44ab      	add	fp, r5
 8008ee2:	e7be      	b.n	8008e62 <qsort+0x168>
 8008ee4:	eba9 0b06 	sub.w	fp, r9, r6
 8008ee8:	1bf2      	subs	r2, r6, r7
 8008eea:	455a      	cmp	r2, fp
 8008eec:	bfa8      	it	ge
 8008eee:	465a      	movge	r2, fp
 8008ef0:	b12a      	cbz	r2, 8008efe <qsort+0x204>
 8008ef2:	4643      	mov	r3, r8
 8008ef4:	eba9 0102 	sub.w	r1, r9, r2
 8008ef8:	4638      	mov	r0, r7
 8008efa:	f7ff fec5 	bl	8008c88 <swapfunc>
 8008efe:	9b02      	ldr	r3, [sp, #8]
 8008f00:	eba3 020a 	sub.w	r2, r3, sl
 8008f04:	ebaa 0404 	sub.w	r4, sl, r4
 8008f08:	1b52      	subs	r2, r2, r5
 8008f0a:	42a2      	cmp	r2, r4
 8008f0c:	bf28      	it	cs
 8008f0e:	4622      	movcs	r2, r4
 8008f10:	b12a      	cbz	r2, 8008f1e <qsort+0x224>
 8008f12:	9902      	ldr	r1, [sp, #8]
 8008f14:	4643      	mov	r3, r8
 8008f16:	1a89      	subs	r1, r1, r2
 8008f18:	4648      	mov	r0, r9
 8008f1a:	f7ff feb5 	bl	8008c88 <swapfunc>
 8008f1e:	9b02      	ldr	r3, [sp, #8]
 8008f20:	455c      	cmp	r4, fp
 8008f22:	eba3 0604 	sub.w	r6, r3, r4
 8008f26:	d805      	bhi.n	8008f34 <qsort+0x23a>
 8008f28:	4623      	mov	r3, r4
 8008f2a:	465c      	mov	r4, fp
 8008f2c:	469b      	mov	fp, r3
 8008f2e:	4633      	mov	r3, r6
 8008f30:	463e      	mov	r6, r7
 8008f32:	461f      	mov	r7, r3
 8008f34:	45ab      	cmp	fp, r5
 8008f36:	d920      	bls.n	8008f7a <qsort+0x280>
 8008f38:	fbbb f1f5 	udiv	r1, fp, r5
 8008f3c:	9b01      	ldr	r3, [sp, #4]
 8008f3e:	2b07      	cmp	r3, #7
 8008f40:	d80b      	bhi.n	8008f5a <qsort+0x260>
 8008f42:	fbb4 f4f5 	udiv	r4, r4, r5
 8008f46:	aa14      	add	r2, sp, #80	@ 0x50
 8008f48:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008f4c:	f843 6c40 	str.w	r6, [r3, #-64]
 8008f50:	f843 4c3c 	str.w	r4, [r3, #-60]
 8008f54:	9b01      	ldr	r3, [sp, #4]
 8008f56:	3301      	adds	r3, #1
 8008f58:	e6df      	b.n	8008d1a <qsort+0x20>
 8008f5a:	9b00      	ldr	r3, [sp, #0]
 8008f5c:	462a      	mov	r2, r5
 8008f5e:	4638      	mov	r0, r7
 8008f60:	f7ff fecb 	bl	8008cfa <qsort>
 8008f64:	42ac      	cmp	r4, r5
 8008f66:	d80b      	bhi.n	8008f80 <qsort+0x286>
 8008f68:	9b01      	ldr	r3, [sp, #4]
 8008f6a:	aa14      	add	r2, sp, #80	@ 0x50
 8008f6c:	3b01      	subs	r3, #1
 8008f6e:	9301      	str	r3, [sp, #4]
 8008f70:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008f74:	e953 7110 	ldrd	r7, r1, [r3, #-64]	@ 0x40
 8008f78:	e6d0      	b.n	8008d1c <qsort+0x22>
 8008f7a:	42ac      	cmp	r4, r5
 8008f7c:	f67f aed9 	bls.w	8008d32 <qsort+0x38>
 8008f80:	fbb4 f1f5 	udiv	r1, r4, r5
 8008f84:	4637      	mov	r7, r6
 8008f86:	e6c9      	b.n	8008d1c <qsort+0x22>

08008f88 <sniprintf>:
 8008f88:	b40c      	push	{r2, r3}
 8008f8a:	b530      	push	{r4, r5, lr}
 8008f8c:	4b18      	ldr	r3, [pc, #96]	@ (8008ff0 <sniprintf+0x68>)
 8008f8e:	1e0c      	subs	r4, r1, #0
 8008f90:	681d      	ldr	r5, [r3, #0]
 8008f92:	b09d      	sub	sp, #116	@ 0x74
 8008f94:	da08      	bge.n	8008fa8 <sniprintf+0x20>
 8008f96:	238b      	movs	r3, #139	@ 0x8b
 8008f98:	602b      	str	r3, [r5, #0]
 8008f9a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008f9e:	b01d      	add	sp, #116	@ 0x74
 8008fa0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008fa4:	b002      	add	sp, #8
 8008fa6:	4770      	bx	lr
 8008fa8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008fac:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008fb0:	f04f 0300 	mov.w	r3, #0
 8008fb4:	931b      	str	r3, [sp, #108]	@ 0x6c
 8008fb6:	bf14      	ite	ne
 8008fb8:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8008fbc:	4623      	moveq	r3, r4
 8008fbe:	9304      	str	r3, [sp, #16]
 8008fc0:	9307      	str	r3, [sp, #28]
 8008fc2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008fc6:	9002      	str	r0, [sp, #8]
 8008fc8:	9006      	str	r0, [sp, #24]
 8008fca:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008fce:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008fd0:	ab21      	add	r3, sp, #132	@ 0x84
 8008fd2:	a902      	add	r1, sp, #8
 8008fd4:	4628      	mov	r0, r5
 8008fd6:	9301      	str	r3, [sp, #4]
 8008fd8:	f000 f952 	bl	8009280 <_svfiprintf_r>
 8008fdc:	1c43      	adds	r3, r0, #1
 8008fde:	bfbc      	itt	lt
 8008fe0:	238b      	movlt	r3, #139	@ 0x8b
 8008fe2:	602b      	strlt	r3, [r5, #0]
 8008fe4:	2c00      	cmp	r4, #0
 8008fe6:	d0da      	beq.n	8008f9e <sniprintf+0x16>
 8008fe8:	9b02      	ldr	r3, [sp, #8]
 8008fea:	2200      	movs	r2, #0
 8008fec:	701a      	strb	r2, [r3, #0]
 8008fee:	e7d6      	b.n	8008f9e <sniprintf+0x16>
 8008ff0:	20000010 	.word	0x20000010

08008ff4 <memset>:
 8008ff4:	4402      	add	r2, r0
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	d100      	bne.n	8008ffe <memset+0xa>
 8008ffc:	4770      	bx	lr
 8008ffe:	f803 1b01 	strb.w	r1, [r3], #1
 8009002:	e7f9      	b.n	8008ff8 <memset+0x4>

08009004 <__errno>:
 8009004:	4b01      	ldr	r3, [pc, #4]	@ (800900c <__errno+0x8>)
 8009006:	6818      	ldr	r0, [r3, #0]
 8009008:	4770      	bx	lr
 800900a:	bf00      	nop
 800900c:	20000010 	.word	0x20000010

08009010 <__libc_init_array>:
 8009010:	b570      	push	{r4, r5, r6, lr}
 8009012:	4d0d      	ldr	r5, [pc, #52]	@ (8009048 <__libc_init_array+0x38>)
 8009014:	4c0d      	ldr	r4, [pc, #52]	@ (800904c <__libc_init_array+0x3c>)
 8009016:	1b64      	subs	r4, r4, r5
 8009018:	10a4      	asrs	r4, r4, #2
 800901a:	2600      	movs	r6, #0
 800901c:	42a6      	cmp	r6, r4
 800901e:	d109      	bne.n	8009034 <__libc_init_array+0x24>
 8009020:	4d0b      	ldr	r5, [pc, #44]	@ (8009050 <__libc_init_array+0x40>)
 8009022:	4c0c      	ldr	r4, [pc, #48]	@ (8009054 <__libc_init_array+0x44>)
 8009024:	f001 fc20 	bl	800a868 <_init>
 8009028:	1b64      	subs	r4, r4, r5
 800902a:	10a4      	asrs	r4, r4, #2
 800902c:	2600      	movs	r6, #0
 800902e:	42a6      	cmp	r6, r4
 8009030:	d105      	bne.n	800903e <__libc_init_array+0x2e>
 8009032:	bd70      	pop	{r4, r5, r6, pc}
 8009034:	f855 3b04 	ldr.w	r3, [r5], #4
 8009038:	4798      	blx	r3
 800903a:	3601      	adds	r6, #1
 800903c:	e7ee      	b.n	800901c <__libc_init_array+0xc>
 800903e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009042:	4798      	blx	r3
 8009044:	3601      	adds	r6, #1
 8009046:	e7f2      	b.n	800902e <__libc_init_array+0x1e>
 8009048:	0800a9c8 	.word	0x0800a9c8
 800904c:	0800a9c8 	.word	0x0800a9c8
 8009050:	0800a9c8 	.word	0x0800a9c8
 8009054:	0800a9cc 	.word	0x0800a9cc

08009058 <__retarget_lock_acquire_recursive>:
 8009058:	4770      	bx	lr

0800905a <__retarget_lock_release_recursive>:
 800905a:	4770      	bx	lr

0800905c <_reclaim_reent>:
 800905c:	4b2d      	ldr	r3, [pc, #180]	@ (8009114 <_reclaim_reent+0xb8>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	4283      	cmp	r3, r0
 8009062:	b570      	push	{r4, r5, r6, lr}
 8009064:	4604      	mov	r4, r0
 8009066:	d053      	beq.n	8009110 <_reclaim_reent+0xb4>
 8009068:	69c3      	ldr	r3, [r0, #28]
 800906a:	b31b      	cbz	r3, 80090b4 <_reclaim_reent+0x58>
 800906c:	68db      	ldr	r3, [r3, #12]
 800906e:	b163      	cbz	r3, 800908a <_reclaim_reent+0x2e>
 8009070:	2500      	movs	r5, #0
 8009072:	69e3      	ldr	r3, [r4, #28]
 8009074:	68db      	ldr	r3, [r3, #12]
 8009076:	5959      	ldr	r1, [r3, r5]
 8009078:	b9b1      	cbnz	r1, 80090a8 <_reclaim_reent+0x4c>
 800907a:	3504      	adds	r5, #4
 800907c:	2d80      	cmp	r5, #128	@ 0x80
 800907e:	d1f8      	bne.n	8009072 <_reclaim_reent+0x16>
 8009080:	69e3      	ldr	r3, [r4, #28]
 8009082:	4620      	mov	r0, r4
 8009084:	68d9      	ldr	r1, [r3, #12]
 8009086:	f000 f855 	bl	8009134 <_free_r>
 800908a:	69e3      	ldr	r3, [r4, #28]
 800908c:	6819      	ldr	r1, [r3, #0]
 800908e:	b111      	cbz	r1, 8009096 <_reclaim_reent+0x3a>
 8009090:	4620      	mov	r0, r4
 8009092:	f000 f84f 	bl	8009134 <_free_r>
 8009096:	69e3      	ldr	r3, [r4, #28]
 8009098:	689d      	ldr	r5, [r3, #8]
 800909a:	b15d      	cbz	r5, 80090b4 <_reclaim_reent+0x58>
 800909c:	4629      	mov	r1, r5
 800909e:	4620      	mov	r0, r4
 80090a0:	682d      	ldr	r5, [r5, #0]
 80090a2:	f000 f847 	bl	8009134 <_free_r>
 80090a6:	e7f8      	b.n	800909a <_reclaim_reent+0x3e>
 80090a8:	680e      	ldr	r6, [r1, #0]
 80090aa:	4620      	mov	r0, r4
 80090ac:	f000 f842 	bl	8009134 <_free_r>
 80090b0:	4631      	mov	r1, r6
 80090b2:	e7e1      	b.n	8009078 <_reclaim_reent+0x1c>
 80090b4:	6961      	ldr	r1, [r4, #20]
 80090b6:	b111      	cbz	r1, 80090be <_reclaim_reent+0x62>
 80090b8:	4620      	mov	r0, r4
 80090ba:	f000 f83b 	bl	8009134 <_free_r>
 80090be:	69e1      	ldr	r1, [r4, #28]
 80090c0:	b111      	cbz	r1, 80090c8 <_reclaim_reent+0x6c>
 80090c2:	4620      	mov	r0, r4
 80090c4:	f000 f836 	bl	8009134 <_free_r>
 80090c8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80090ca:	b111      	cbz	r1, 80090d2 <_reclaim_reent+0x76>
 80090cc:	4620      	mov	r0, r4
 80090ce:	f000 f831 	bl	8009134 <_free_r>
 80090d2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80090d4:	b111      	cbz	r1, 80090dc <_reclaim_reent+0x80>
 80090d6:	4620      	mov	r0, r4
 80090d8:	f000 f82c 	bl	8009134 <_free_r>
 80090dc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80090de:	b111      	cbz	r1, 80090e6 <_reclaim_reent+0x8a>
 80090e0:	4620      	mov	r0, r4
 80090e2:	f000 f827 	bl	8009134 <_free_r>
 80090e6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80090e8:	b111      	cbz	r1, 80090f0 <_reclaim_reent+0x94>
 80090ea:	4620      	mov	r0, r4
 80090ec:	f000 f822 	bl	8009134 <_free_r>
 80090f0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80090f2:	b111      	cbz	r1, 80090fa <_reclaim_reent+0x9e>
 80090f4:	4620      	mov	r0, r4
 80090f6:	f000 f81d 	bl	8009134 <_free_r>
 80090fa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80090fc:	b111      	cbz	r1, 8009104 <_reclaim_reent+0xa8>
 80090fe:	4620      	mov	r0, r4
 8009100:	f000 f818 	bl	8009134 <_free_r>
 8009104:	6a23      	ldr	r3, [r4, #32]
 8009106:	b11b      	cbz	r3, 8009110 <_reclaim_reent+0xb4>
 8009108:	4620      	mov	r0, r4
 800910a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800910e:	4718      	bx	r3
 8009110:	bd70      	pop	{r4, r5, r6, pc}
 8009112:	bf00      	nop
 8009114:	20000010 	.word	0x20000010

08009118 <memcpy>:
 8009118:	440a      	add	r2, r1
 800911a:	4291      	cmp	r1, r2
 800911c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8009120:	d100      	bne.n	8009124 <memcpy+0xc>
 8009122:	4770      	bx	lr
 8009124:	b510      	push	{r4, lr}
 8009126:	f811 4b01 	ldrb.w	r4, [r1], #1
 800912a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800912e:	4291      	cmp	r1, r2
 8009130:	d1f9      	bne.n	8009126 <memcpy+0xe>
 8009132:	bd10      	pop	{r4, pc}

08009134 <_free_r>:
 8009134:	b538      	push	{r3, r4, r5, lr}
 8009136:	4605      	mov	r5, r0
 8009138:	2900      	cmp	r1, #0
 800913a:	d041      	beq.n	80091c0 <_free_r+0x8c>
 800913c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009140:	1f0c      	subs	r4, r1, #4
 8009142:	2b00      	cmp	r3, #0
 8009144:	bfb8      	it	lt
 8009146:	18e4      	addlt	r4, r4, r3
 8009148:	f000 fbc4 	bl	80098d4 <__malloc_lock>
 800914c:	4a1d      	ldr	r2, [pc, #116]	@ (80091c4 <_free_r+0x90>)
 800914e:	6813      	ldr	r3, [r2, #0]
 8009150:	b933      	cbnz	r3, 8009160 <_free_r+0x2c>
 8009152:	6063      	str	r3, [r4, #4]
 8009154:	6014      	str	r4, [r2, #0]
 8009156:	4628      	mov	r0, r5
 8009158:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800915c:	f000 bbc0 	b.w	80098e0 <__malloc_unlock>
 8009160:	42a3      	cmp	r3, r4
 8009162:	d908      	bls.n	8009176 <_free_r+0x42>
 8009164:	6820      	ldr	r0, [r4, #0]
 8009166:	1821      	adds	r1, r4, r0
 8009168:	428b      	cmp	r3, r1
 800916a:	bf01      	itttt	eq
 800916c:	6819      	ldreq	r1, [r3, #0]
 800916e:	685b      	ldreq	r3, [r3, #4]
 8009170:	1809      	addeq	r1, r1, r0
 8009172:	6021      	streq	r1, [r4, #0]
 8009174:	e7ed      	b.n	8009152 <_free_r+0x1e>
 8009176:	461a      	mov	r2, r3
 8009178:	685b      	ldr	r3, [r3, #4]
 800917a:	b10b      	cbz	r3, 8009180 <_free_r+0x4c>
 800917c:	42a3      	cmp	r3, r4
 800917e:	d9fa      	bls.n	8009176 <_free_r+0x42>
 8009180:	6811      	ldr	r1, [r2, #0]
 8009182:	1850      	adds	r0, r2, r1
 8009184:	42a0      	cmp	r0, r4
 8009186:	d10b      	bne.n	80091a0 <_free_r+0x6c>
 8009188:	6820      	ldr	r0, [r4, #0]
 800918a:	4401      	add	r1, r0
 800918c:	1850      	adds	r0, r2, r1
 800918e:	4283      	cmp	r3, r0
 8009190:	6011      	str	r1, [r2, #0]
 8009192:	d1e0      	bne.n	8009156 <_free_r+0x22>
 8009194:	6818      	ldr	r0, [r3, #0]
 8009196:	685b      	ldr	r3, [r3, #4]
 8009198:	6053      	str	r3, [r2, #4]
 800919a:	4408      	add	r0, r1
 800919c:	6010      	str	r0, [r2, #0]
 800919e:	e7da      	b.n	8009156 <_free_r+0x22>
 80091a0:	d902      	bls.n	80091a8 <_free_r+0x74>
 80091a2:	230c      	movs	r3, #12
 80091a4:	602b      	str	r3, [r5, #0]
 80091a6:	e7d6      	b.n	8009156 <_free_r+0x22>
 80091a8:	6820      	ldr	r0, [r4, #0]
 80091aa:	1821      	adds	r1, r4, r0
 80091ac:	428b      	cmp	r3, r1
 80091ae:	bf04      	itt	eq
 80091b0:	6819      	ldreq	r1, [r3, #0]
 80091b2:	685b      	ldreq	r3, [r3, #4]
 80091b4:	6063      	str	r3, [r4, #4]
 80091b6:	bf04      	itt	eq
 80091b8:	1809      	addeq	r1, r1, r0
 80091ba:	6021      	streq	r1, [r4, #0]
 80091bc:	6054      	str	r4, [r2, #4]
 80091be:	e7ca      	b.n	8009156 <_free_r+0x22>
 80091c0:	bd38      	pop	{r3, r4, r5, pc}
 80091c2:	bf00      	nop
 80091c4:	20004e34 	.word	0x20004e34

080091c8 <__ssputs_r>:
 80091c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091cc:	688e      	ldr	r6, [r1, #8]
 80091ce:	461f      	mov	r7, r3
 80091d0:	42be      	cmp	r6, r7
 80091d2:	680b      	ldr	r3, [r1, #0]
 80091d4:	4682      	mov	sl, r0
 80091d6:	460c      	mov	r4, r1
 80091d8:	4690      	mov	r8, r2
 80091da:	d82d      	bhi.n	8009238 <__ssputs_r+0x70>
 80091dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80091e0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80091e4:	d026      	beq.n	8009234 <__ssputs_r+0x6c>
 80091e6:	6965      	ldr	r5, [r4, #20]
 80091e8:	6909      	ldr	r1, [r1, #16]
 80091ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80091ee:	eba3 0901 	sub.w	r9, r3, r1
 80091f2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80091f6:	1c7b      	adds	r3, r7, #1
 80091f8:	444b      	add	r3, r9
 80091fa:	106d      	asrs	r5, r5, #1
 80091fc:	429d      	cmp	r5, r3
 80091fe:	bf38      	it	cc
 8009200:	461d      	movcc	r5, r3
 8009202:	0553      	lsls	r3, r2, #21
 8009204:	d527      	bpl.n	8009256 <__ssputs_r+0x8e>
 8009206:	4629      	mov	r1, r5
 8009208:	f000 f958 	bl	80094bc <_malloc_r>
 800920c:	4606      	mov	r6, r0
 800920e:	b360      	cbz	r0, 800926a <__ssputs_r+0xa2>
 8009210:	6921      	ldr	r1, [r4, #16]
 8009212:	464a      	mov	r2, r9
 8009214:	f7ff ff80 	bl	8009118 <memcpy>
 8009218:	89a3      	ldrh	r3, [r4, #12]
 800921a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800921e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009222:	81a3      	strh	r3, [r4, #12]
 8009224:	6126      	str	r6, [r4, #16]
 8009226:	6165      	str	r5, [r4, #20]
 8009228:	444e      	add	r6, r9
 800922a:	eba5 0509 	sub.w	r5, r5, r9
 800922e:	6026      	str	r6, [r4, #0]
 8009230:	60a5      	str	r5, [r4, #8]
 8009232:	463e      	mov	r6, r7
 8009234:	42be      	cmp	r6, r7
 8009236:	d900      	bls.n	800923a <__ssputs_r+0x72>
 8009238:	463e      	mov	r6, r7
 800923a:	6820      	ldr	r0, [r4, #0]
 800923c:	4632      	mov	r2, r6
 800923e:	4641      	mov	r1, r8
 8009240:	f000 fb82 	bl	8009948 <memmove>
 8009244:	68a3      	ldr	r3, [r4, #8]
 8009246:	1b9b      	subs	r3, r3, r6
 8009248:	60a3      	str	r3, [r4, #8]
 800924a:	6823      	ldr	r3, [r4, #0]
 800924c:	4433      	add	r3, r6
 800924e:	6023      	str	r3, [r4, #0]
 8009250:	2000      	movs	r0, #0
 8009252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009256:	462a      	mov	r2, r5
 8009258:	f000 fb48 	bl	80098ec <_realloc_r>
 800925c:	4606      	mov	r6, r0
 800925e:	2800      	cmp	r0, #0
 8009260:	d1e0      	bne.n	8009224 <__ssputs_r+0x5c>
 8009262:	6921      	ldr	r1, [r4, #16]
 8009264:	4650      	mov	r0, sl
 8009266:	f7ff ff65 	bl	8009134 <_free_r>
 800926a:	230c      	movs	r3, #12
 800926c:	f8ca 3000 	str.w	r3, [sl]
 8009270:	89a3      	ldrh	r3, [r4, #12]
 8009272:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009276:	81a3      	strh	r3, [r4, #12]
 8009278:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800927c:	e7e9      	b.n	8009252 <__ssputs_r+0x8a>
	...

08009280 <_svfiprintf_r>:
 8009280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009284:	4698      	mov	r8, r3
 8009286:	898b      	ldrh	r3, [r1, #12]
 8009288:	061b      	lsls	r3, r3, #24
 800928a:	b09d      	sub	sp, #116	@ 0x74
 800928c:	4607      	mov	r7, r0
 800928e:	460d      	mov	r5, r1
 8009290:	4614      	mov	r4, r2
 8009292:	d510      	bpl.n	80092b6 <_svfiprintf_r+0x36>
 8009294:	690b      	ldr	r3, [r1, #16]
 8009296:	b973      	cbnz	r3, 80092b6 <_svfiprintf_r+0x36>
 8009298:	2140      	movs	r1, #64	@ 0x40
 800929a:	f000 f90f 	bl	80094bc <_malloc_r>
 800929e:	6028      	str	r0, [r5, #0]
 80092a0:	6128      	str	r0, [r5, #16]
 80092a2:	b930      	cbnz	r0, 80092b2 <_svfiprintf_r+0x32>
 80092a4:	230c      	movs	r3, #12
 80092a6:	603b      	str	r3, [r7, #0]
 80092a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80092ac:	b01d      	add	sp, #116	@ 0x74
 80092ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092b2:	2340      	movs	r3, #64	@ 0x40
 80092b4:	616b      	str	r3, [r5, #20]
 80092b6:	2300      	movs	r3, #0
 80092b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80092ba:	2320      	movs	r3, #32
 80092bc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80092c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80092c4:	2330      	movs	r3, #48	@ 0x30
 80092c6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009464 <_svfiprintf_r+0x1e4>
 80092ca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80092ce:	f04f 0901 	mov.w	r9, #1
 80092d2:	4623      	mov	r3, r4
 80092d4:	469a      	mov	sl, r3
 80092d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092da:	b10a      	cbz	r2, 80092e0 <_svfiprintf_r+0x60>
 80092dc:	2a25      	cmp	r2, #37	@ 0x25
 80092de:	d1f9      	bne.n	80092d4 <_svfiprintf_r+0x54>
 80092e0:	ebba 0b04 	subs.w	fp, sl, r4
 80092e4:	d00b      	beq.n	80092fe <_svfiprintf_r+0x7e>
 80092e6:	465b      	mov	r3, fp
 80092e8:	4622      	mov	r2, r4
 80092ea:	4629      	mov	r1, r5
 80092ec:	4638      	mov	r0, r7
 80092ee:	f7ff ff6b 	bl	80091c8 <__ssputs_r>
 80092f2:	3001      	adds	r0, #1
 80092f4:	f000 80a7 	beq.w	8009446 <_svfiprintf_r+0x1c6>
 80092f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80092fa:	445a      	add	r2, fp
 80092fc:	9209      	str	r2, [sp, #36]	@ 0x24
 80092fe:	f89a 3000 	ldrb.w	r3, [sl]
 8009302:	2b00      	cmp	r3, #0
 8009304:	f000 809f 	beq.w	8009446 <_svfiprintf_r+0x1c6>
 8009308:	2300      	movs	r3, #0
 800930a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800930e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009312:	f10a 0a01 	add.w	sl, sl, #1
 8009316:	9304      	str	r3, [sp, #16]
 8009318:	9307      	str	r3, [sp, #28]
 800931a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800931e:	931a      	str	r3, [sp, #104]	@ 0x68
 8009320:	4654      	mov	r4, sl
 8009322:	2205      	movs	r2, #5
 8009324:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009328:	484e      	ldr	r0, [pc, #312]	@ (8009464 <_svfiprintf_r+0x1e4>)
 800932a:	f7f6 ff59 	bl	80001e0 <memchr>
 800932e:	9a04      	ldr	r2, [sp, #16]
 8009330:	b9d8      	cbnz	r0, 800936a <_svfiprintf_r+0xea>
 8009332:	06d0      	lsls	r0, r2, #27
 8009334:	bf44      	itt	mi
 8009336:	2320      	movmi	r3, #32
 8009338:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800933c:	0711      	lsls	r1, r2, #28
 800933e:	bf44      	itt	mi
 8009340:	232b      	movmi	r3, #43	@ 0x2b
 8009342:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009346:	f89a 3000 	ldrb.w	r3, [sl]
 800934a:	2b2a      	cmp	r3, #42	@ 0x2a
 800934c:	d015      	beq.n	800937a <_svfiprintf_r+0xfa>
 800934e:	9a07      	ldr	r2, [sp, #28]
 8009350:	4654      	mov	r4, sl
 8009352:	2000      	movs	r0, #0
 8009354:	f04f 0c0a 	mov.w	ip, #10
 8009358:	4621      	mov	r1, r4
 800935a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800935e:	3b30      	subs	r3, #48	@ 0x30
 8009360:	2b09      	cmp	r3, #9
 8009362:	d94b      	bls.n	80093fc <_svfiprintf_r+0x17c>
 8009364:	b1b0      	cbz	r0, 8009394 <_svfiprintf_r+0x114>
 8009366:	9207      	str	r2, [sp, #28]
 8009368:	e014      	b.n	8009394 <_svfiprintf_r+0x114>
 800936a:	eba0 0308 	sub.w	r3, r0, r8
 800936e:	fa09 f303 	lsl.w	r3, r9, r3
 8009372:	4313      	orrs	r3, r2
 8009374:	9304      	str	r3, [sp, #16]
 8009376:	46a2      	mov	sl, r4
 8009378:	e7d2      	b.n	8009320 <_svfiprintf_r+0xa0>
 800937a:	9b03      	ldr	r3, [sp, #12]
 800937c:	1d19      	adds	r1, r3, #4
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	9103      	str	r1, [sp, #12]
 8009382:	2b00      	cmp	r3, #0
 8009384:	bfbb      	ittet	lt
 8009386:	425b      	neglt	r3, r3
 8009388:	f042 0202 	orrlt.w	r2, r2, #2
 800938c:	9307      	strge	r3, [sp, #28]
 800938e:	9307      	strlt	r3, [sp, #28]
 8009390:	bfb8      	it	lt
 8009392:	9204      	strlt	r2, [sp, #16]
 8009394:	7823      	ldrb	r3, [r4, #0]
 8009396:	2b2e      	cmp	r3, #46	@ 0x2e
 8009398:	d10a      	bne.n	80093b0 <_svfiprintf_r+0x130>
 800939a:	7863      	ldrb	r3, [r4, #1]
 800939c:	2b2a      	cmp	r3, #42	@ 0x2a
 800939e:	d132      	bne.n	8009406 <_svfiprintf_r+0x186>
 80093a0:	9b03      	ldr	r3, [sp, #12]
 80093a2:	1d1a      	adds	r2, r3, #4
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	9203      	str	r2, [sp, #12]
 80093a8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80093ac:	3402      	adds	r4, #2
 80093ae:	9305      	str	r3, [sp, #20]
 80093b0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009474 <_svfiprintf_r+0x1f4>
 80093b4:	7821      	ldrb	r1, [r4, #0]
 80093b6:	2203      	movs	r2, #3
 80093b8:	4650      	mov	r0, sl
 80093ba:	f7f6 ff11 	bl	80001e0 <memchr>
 80093be:	b138      	cbz	r0, 80093d0 <_svfiprintf_r+0x150>
 80093c0:	9b04      	ldr	r3, [sp, #16]
 80093c2:	eba0 000a 	sub.w	r0, r0, sl
 80093c6:	2240      	movs	r2, #64	@ 0x40
 80093c8:	4082      	lsls	r2, r0
 80093ca:	4313      	orrs	r3, r2
 80093cc:	3401      	adds	r4, #1
 80093ce:	9304      	str	r3, [sp, #16]
 80093d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093d4:	4824      	ldr	r0, [pc, #144]	@ (8009468 <_svfiprintf_r+0x1e8>)
 80093d6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80093da:	2206      	movs	r2, #6
 80093dc:	f7f6 ff00 	bl	80001e0 <memchr>
 80093e0:	2800      	cmp	r0, #0
 80093e2:	d036      	beq.n	8009452 <_svfiprintf_r+0x1d2>
 80093e4:	4b21      	ldr	r3, [pc, #132]	@ (800946c <_svfiprintf_r+0x1ec>)
 80093e6:	bb1b      	cbnz	r3, 8009430 <_svfiprintf_r+0x1b0>
 80093e8:	9b03      	ldr	r3, [sp, #12]
 80093ea:	3307      	adds	r3, #7
 80093ec:	f023 0307 	bic.w	r3, r3, #7
 80093f0:	3308      	adds	r3, #8
 80093f2:	9303      	str	r3, [sp, #12]
 80093f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093f6:	4433      	add	r3, r6
 80093f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80093fa:	e76a      	b.n	80092d2 <_svfiprintf_r+0x52>
 80093fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8009400:	460c      	mov	r4, r1
 8009402:	2001      	movs	r0, #1
 8009404:	e7a8      	b.n	8009358 <_svfiprintf_r+0xd8>
 8009406:	2300      	movs	r3, #0
 8009408:	3401      	adds	r4, #1
 800940a:	9305      	str	r3, [sp, #20]
 800940c:	4619      	mov	r1, r3
 800940e:	f04f 0c0a 	mov.w	ip, #10
 8009412:	4620      	mov	r0, r4
 8009414:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009418:	3a30      	subs	r2, #48	@ 0x30
 800941a:	2a09      	cmp	r2, #9
 800941c:	d903      	bls.n	8009426 <_svfiprintf_r+0x1a6>
 800941e:	2b00      	cmp	r3, #0
 8009420:	d0c6      	beq.n	80093b0 <_svfiprintf_r+0x130>
 8009422:	9105      	str	r1, [sp, #20]
 8009424:	e7c4      	b.n	80093b0 <_svfiprintf_r+0x130>
 8009426:	fb0c 2101 	mla	r1, ip, r1, r2
 800942a:	4604      	mov	r4, r0
 800942c:	2301      	movs	r3, #1
 800942e:	e7f0      	b.n	8009412 <_svfiprintf_r+0x192>
 8009430:	ab03      	add	r3, sp, #12
 8009432:	9300      	str	r3, [sp, #0]
 8009434:	462a      	mov	r2, r5
 8009436:	4b0e      	ldr	r3, [pc, #56]	@ (8009470 <_svfiprintf_r+0x1f0>)
 8009438:	a904      	add	r1, sp, #16
 800943a:	4638      	mov	r0, r7
 800943c:	f3af 8000 	nop.w
 8009440:	1c42      	adds	r2, r0, #1
 8009442:	4606      	mov	r6, r0
 8009444:	d1d6      	bne.n	80093f4 <_svfiprintf_r+0x174>
 8009446:	89ab      	ldrh	r3, [r5, #12]
 8009448:	065b      	lsls	r3, r3, #25
 800944a:	f53f af2d 	bmi.w	80092a8 <_svfiprintf_r+0x28>
 800944e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009450:	e72c      	b.n	80092ac <_svfiprintf_r+0x2c>
 8009452:	ab03      	add	r3, sp, #12
 8009454:	9300      	str	r3, [sp, #0]
 8009456:	462a      	mov	r2, r5
 8009458:	4b05      	ldr	r3, [pc, #20]	@ (8009470 <_svfiprintf_r+0x1f0>)
 800945a:	a904      	add	r1, sp, #16
 800945c:	4638      	mov	r0, r7
 800945e:	f000 f91b 	bl	8009698 <_printf_i>
 8009462:	e7ed      	b.n	8009440 <_svfiprintf_r+0x1c0>
 8009464:	0800a948 	.word	0x0800a948
 8009468:	0800a952 	.word	0x0800a952
 800946c:	00000000 	.word	0x00000000
 8009470:	080091c9 	.word	0x080091c9
 8009474:	0800a94e 	.word	0x0800a94e

08009478 <sbrk_aligned>:
 8009478:	b570      	push	{r4, r5, r6, lr}
 800947a:	4e0f      	ldr	r6, [pc, #60]	@ (80094b8 <sbrk_aligned+0x40>)
 800947c:	460c      	mov	r4, r1
 800947e:	6831      	ldr	r1, [r6, #0]
 8009480:	4605      	mov	r5, r0
 8009482:	b911      	cbnz	r1, 800948a <sbrk_aligned+0x12>
 8009484:	f000 fa7a 	bl	800997c <_sbrk_r>
 8009488:	6030      	str	r0, [r6, #0]
 800948a:	4621      	mov	r1, r4
 800948c:	4628      	mov	r0, r5
 800948e:	f000 fa75 	bl	800997c <_sbrk_r>
 8009492:	1c43      	adds	r3, r0, #1
 8009494:	d103      	bne.n	800949e <sbrk_aligned+0x26>
 8009496:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800949a:	4620      	mov	r0, r4
 800949c:	bd70      	pop	{r4, r5, r6, pc}
 800949e:	1cc4      	adds	r4, r0, #3
 80094a0:	f024 0403 	bic.w	r4, r4, #3
 80094a4:	42a0      	cmp	r0, r4
 80094a6:	d0f8      	beq.n	800949a <sbrk_aligned+0x22>
 80094a8:	1a21      	subs	r1, r4, r0
 80094aa:	4628      	mov	r0, r5
 80094ac:	f000 fa66 	bl	800997c <_sbrk_r>
 80094b0:	3001      	adds	r0, #1
 80094b2:	d1f2      	bne.n	800949a <sbrk_aligned+0x22>
 80094b4:	e7ef      	b.n	8009496 <sbrk_aligned+0x1e>
 80094b6:	bf00      	nop
 80094b8:	20004e30 	.word	0x20004e30

080094bc <_malloc_r>:
 80094bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094c0:	1ccd      	adds	r5, r1, #3
 80094c2:	f025 0503 	bic.w	r5, r5, #3
 80094c6:	3508      	adds	r5, #8
 80094c8:	2d0c      	cmp	r5, #12
 80094ca:	bf38      	it	cc
 80094cc:	250c      	movcc	r5, #12
 80094ce:	2d00      	cmp	r5, #0
 80094d0:	4606      	mov	r6, r0
 80094d2:	db01      	blt.n	80094d8 <_malloc_r+0x1c>
 80094d4:	42a9      	cmp	r1, r5
 80094d6:	d904      	bls.n	80094e2 <_malloc_r+0x26>
 80094d8:	230c      	movs	r3, #12
 80094da:	6033      	str	r3, [r6, #0]
 80094dc:	2000      	movs	r0, #0
 80094de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80095b8 <_malloc_r+0xfc>
 80094e6:	f000 f9f5 	bl	80098d4 <__malloc_lock>
 80094ea:	f8d8 3000 	ldr.w	r3, [r8]
 80094ee:	461c      	mov	r4, r3
 80094f0:	bb44      	cbnz	r4, 8009544 <_malloc_r+0x88>
 80094f2:	4629      	mov	r1, r5
 80094f4:	4630      	mov	r0, r6
 80094f6:	f7ff ffbf 	bl	8009478 <sbrk_aligned>
 80094fa:	1c43      	adds	r3, r0, #1
 80094fc:	4604      	mov	r4, r0
 80094fe:	d158      	bne.n	80095b2 <_malloc_r+0xf6>
 8009500:	f8d8 4000 	ldr.w	r4, [r8]
 8009504:	4627      	mov	r7, r4
 8009506:	2f00      	cmp	r7, #0
 8009508:	d143      	bne.n	8009592 <_malloc_r+0xd6>
 800950a:	2c00      	cmp	r4, #0
 800950c:	d04b      	beq.n	80095a6 <_malloc_r+0xea>
 800950e:	6823      	ldr	r3, [r4, #0]
 8009510:	4639      	mov	r1, r7
 8009512:	4630      	mov	r0, r6
 8009514:	eb04 0903 	add.w	r9, r4, r3
 8009518:	f000 fa30 	bl	800997c <_sbrk_r>
 800951c:	4581      	cmp	r9, r0
 800951e:	d142      	bne.n	80095a6 <_malloc_r+0xea>
 8009520:	6821      	ldr	r1, [r4, #0]
 8009522:	1a6d      	subs	r5, r5, r1
 8009524:	4629      	mov	r1, r5
 8009526:	4630      	mov	r0, r6
 8009528:	f7ff ffa6 	bl	8009478 <sbrk_aligned>
 800952c:	3001      	adds	r0, #1
 800952e:	d03a      	beq.n	80095a6 <_malloc_r+0xea>
 8009530:	6823      	ldr	r3, [r4, #0]
 8009532:	442b      	add	r3, r5
 8009534:	6023      	str	r3, [r4, #0]
 8009536:	f8d8 3000 	ldr.w	r3, [r8]
 800953a:	685a      	ldr	r2, [r3, #4]
 800953c:	bb62      	cbnz	r2, 8009598 <_malloc_r+0xdc>
 800953e:	f8c8 7000 	str.w	r7, [r8]
 8009542:	e00f      	b.n	8009564 <_malloc_r+0xa8>
 8009544:	6822      	ldr	r2, [r4, #0]
 8009546:	1b52      	subs	r2, r2, r5
 8009548:	d420      	bmi.n	800958c <_malloc_r+0xd0>
 800954a:	2a0b      	cmp	r2, #11
 800954c:	d917      	bls.n	800957e <_malloc_r+0xc2>
 800954e:	1961      	adds	r1, r4, r5
 8009550:	42a3      	cmp	r3, r4
 8009552:	6025      	str	r5, [r4, #0]
 8009554:	bf18      	it	ne
 8009556:	6059      	strne	r1, [r3, #4]
 8009558:	6863      	ldr	r3, [r4, #4]
 800955a:	bf08      	it	eq
 800955c:	f8c8 1000 	streq.w	r1, [r8]
 8009560:	5162      	str	r2, [r4, r5]
 8009562:	604b      	str	r3, [r1, #4]
 8009564:	4630      	mov	r0, r6
 8009566:	f000 f9bb 	bl	80098e0 <__malloc_unlock>
 800956a:	f104 000b 	add.w	r0, r4, #11
 800956e:	1d23      	adds	r3, r4, #4
 8009570:	f020 0007 	bic.w	r0, r0, #7
 8009574:	1ac2      	subs	r2, r0, r3
 8009576:	bf1c      	itt	ne
 8009578:	1a1b      	subne	r3, r3, r0
 800957a:	50a3      	strne	r3, [r4, r2]
 800957c:	e7af      	b.n	80094de <_malloc_r+0x22>
 800957e:	6862      	ldr	r2, [r4, #4]
 8009580:	42a3      	cmp	r3, r4
 8009582:	bf0c      	ite	eq
 8009584:	f8c8 2000 	streq.w	r2, [r8]
 8009588:	605a      	strne	r2, [r3, #4]
 800958a:	e7eb      	b.n	8009564 <_malloc_r+0xa8>
 800958c:	4623      	mov	r3, r4
 800958e:	6864      	ldr	r4, [r4, #4]
 8009590:	e7ae      	b.n	80094f0 <_malloc_r+0x34>
 8009592:	463c      	mov	r4, r7
 8009594:	687f      	ldr	r7, [r7, #4]
 8009596:	e7b6      	b.n	8009506 <_malloc_r+0x4a>
 8009598:	461a      	mov	r2, r3
 800959a:	685b      	ldr	r3, [r3, #4]
 800959c:	42a3      	cmp	r3, r4
 800959e:	d1fb      	bne.n	8009598 <_malloc_r+0xdc>
 80095a0:	2300      	movs	r3, #0
 80095a2:	6053      	str	r3, [r2, #4]
 80095a4:	e7de      	b.n	8009564 <_malloc_r+0xa8>
 80095a6:	230c      	movs	r3, #12
 80095a8:	6033      	str	r3, [r6, #0]
 80095aa:	4630      	mov	r0, r6
 80095ac:	f000 f998 	bl	80098e0 <__malloc_unlock>
 80095b0:	e794      	b.n	80094dc <_malloc_r+0x20>
 80095b2:	6005      	str	r5, [r0, #0]
 80095b4:	e7d6      	b.n	8009564 <_malloc_r+0xa8>
 80095b6:	bf00      	nop
 80095b8:	20004e34 	.word	0x20004e34

080095bc <_printf_common>:
 80095bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095c0:	4616      	mov	r6, r2
 80095c2:	4698      	mov	r8, r3
 80095c4:	688a      	ldr	r2, [r1, #8]
 80095c6:	690b      	ldr	r3, [r1, #16]
 80095c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80095cc:	4293      	cmp	r3, r2
 80095ce:	bfb8      	it	lt
 80095d0:	4613      	movlt	r3, r2
 80095d2:	6033      	str	r3, [r6, #0]
 80095d4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80095d8:	4607      	mov	r7, r0
 80095da:	460c      	mov	r4, r1
 80095dc:	b10a      	cbz	r2, 80095e2 <_printf_common+0x26>
 80095de:	3301      	adds	r3, #1
 80095e0:	6033      	str	r3, [r6, #0]
 80095e2:	6823      	ldr	r3, [r4, #0]
 80095e4:	0699      	lsls	r1, r3, #26
 80095e6:	bf42      	ittt	mi
 80095e8:	6833      	ldrmi	r3, [r6, #0]
 80095ea:	3302      	addmi	r3, #2
 80095ec:	6033      	strmi	r3, [r6, #0]
 80095ee:	6825      	ldr	r5, [r4, #0]
 80095f0:	f015 0506 	ands.w	r5, r5, #6
 80095f4:	d106      	bne.n	8009604 <_printf_common+0x48>
 80095f6:	f104 0a19 	add.w	sl, r4, #25
 80095fa:	68e3      	ldr	r3, [r4, #12]
 80095fc:	6832      	ldr	r2, [r6, #0]
 80095fe:	1a9b      	subs	r3, r3, r2
 8009600:	42ab      	cmp	r3, r5
 8009602:	dc26      	bgt.n	8009652 <_printf_common+0x96>
 8009604:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009608:	6822      	ldr	r2, [r4, #0]
 800960a:	3b00      	subs	r3, #0
 800960c:	bf18      	it	ne
 800960e:	2301      	movne	r3, #1
 8009610:	0692      	lsls	r2, r2, #26
 8009612:	d42b      	bmi.n	800966c <_printf_common+0xb0>
 8009614:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009618:	4641      	mov	r1, r8
 800961a:	4638      	mov	r0, r7
 800961c:	47c8      	blx	r9
 800961e:	3001      	adds	r0, #1
 8009620:	d01e      	beq.n	8009660 <_printf_common+0xa4>
 8009622:	6823      	ldr	r3, [r4, #0]
 8009624:	6922      	ldr	r2, [r4, #16]
 8009626:	f003 0306 	and.w	r3, r3, #6
 800962a:	2b04      	cmp	r3, #4
 800962c:	bf02      	ittt	eq
 800962e:	68e5      	ldreq	r5, [r4, #12]
 8009630:	6833      	ldreq	r3, [r6, #0]
 8009632:	1aed      	subeq	r5, r5, r3
 8009634:	68a3      	ldr	r3, [r4, #8]
 8009636:	bf0c      	ite	eq
 8009638:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800963c:	2500      	movne	r5, #0
 800963e:	4293      	cmp	r3, r2
 8009640:	bfc4      	itt	gt
 8009642:	1a9b      	subgt	r3, r3, r2
 8009644:	18ed      	addgt	r5, r5, r3
 8009646:	2600      	movs	r6, #0
 8009648:	341a      	adds	r4, #26
 800964a:	42b5      	cmp	r5, r6
 800964c:	d11a      	bne.n	8009684 <_printf_common+0xc8>
 800964e:	2000      	movs	r0, #0
 8009650:	e008      	b.n	8009664 <_printf_common+0xa8>
 8009652:	2301      	movs	r3, #1
 8009654:	4652      	mov	r2, sl
 8009656:	4641      	mov	r1, r8
 8009658:	4638      	mov	r0, r7
 800965a:	47c8      	blx	r9
 800965c:	3001      	adds	r0, #1
 800965e:	d103      	bne.n	8009668 <_printf_common+0xac>
 8009660:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009668:	3501      	adds	r5, #1
 800966a:	e7c6      	b.n	80095fa <_printf_common+0x3e>
 800966c:	18e1      	adds	r1, r4, r3
 800966e:	1c5a      	adds	r2, r3, #1
 8009670:	2030      	movs	r0, #48	@ 0x30
 8009672:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009676:	4422      	add	r2, r4
 8009678:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800967c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009680:	3302      	adds	r3, #2
 8009682:	e7c7      	b.n	8009614 <_printf_common+0x58>
 8009684:	2301      	movs	r3, #1
 8009686:	4622      	mov	r2, r4
 8009688:	4641      	mov	r1, r8
 800968a:	4638      	mov	r0, r7
 800968c:	47c8      	blx	r9
 800968e:	3001      	adds	r0, #1
 8009690:	d0e6      	beq.n	8009660 <_printf_common+0xa4>
 8009692:	3601      	adds	r6, #1
 8009694:	e7d9      	b.n	800964a <_printf_common+0x8e>
	...

08009698 <_printf_i>:
 8009698:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800969c:	7e0f      	ldrb	r7, [r1, #24]
 800969e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80096a0:	2f78      	cmp	r7, #120	@ 0x78
 80096a2:	4691      	mov	r9, r2
 80096a4:	4680      	mov	r8, r0
 80096a6:	460c      	mov	r4, r1
 80096a8:	469a      	mov	sl, r3
 80096aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80096ae:	d807      	bhi.n	80096c0 <_printf_i+0x28>
 80096b0:	2f62      	cmp	r7, #98	@ 0x62
 80096b2:	d80a      	bhi.n	80096ca <_printf_i+0x32>
 80096b4:	2f00      	cmp	r7, #0
 80096b6:	f000 80d1 	beq.w	800985c <_printf_i+0x1c4>
 80096ba:	2f58      	cmp	r7, #88	@ 0x58
 80096bc:	f000 80b8 	beq.w	8009830 <_printf_i+0x198>
 80096c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80096c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80096c8:	e03a      	b.n	8009740 <_printf_i+0xa8>
 80096ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80096ce:	2b15      	cmp	r3, #21
 80096d0:	d8f6      	bhi.n	80096c0 <_printf_i+0x28>
 80096d2:	a101      	add	r1, pc, #4	@ (adr r1, 80096d8 <_printf_i+0x40>)
 80096d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80096d8:	08009731 	.word	0x08009731
 80096dc:	08009745 	.word	0x08009745
 80096e0:	080096c1 	.word	0x080096c1
 80096e4:	080096c1 	.word	0x080096c1
 80096e8:	080096c1 	.word	0x080096c1
 80096ec:	080096c1 	.word	0x080096c1
 80096f0:	08009745 	.word	0x08009745
 80096f4:	080096c1 	.word	0x080096c1
 80096f8:	080096c1 	.word	0x080096c1
 80096fc:	080096c1 	.word	0x080096c1
 8009700:	080096c1 	.word	0x080096c1
 8009704:	08009843 	.word	0x08009843
 8009708:	0800976f 	.word	0x0800976f
 800970c:	080097fd 	.word	0x080097fd
 8009710:	080096c1 	.word	0x080096c1
 8009714:	080096c1 	.word	0x080096c1
 8009718:	08009865 	.word	0x08009865
 800971c:	080096c1 	.word	0x080096c1
 8009720:	0800976f 	.word	0x0800976f
 8009724:	080096c1 	.word	0x080096c1
 8009728:	080096c1 	.word	0x080096c1
 800972c:	08009805 	.word	0x08009805
 8009730:	6833      	ldr	r3, [r6, #0]
 8009732:	1d1a      	adds	r2, r3, #4
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	6032      	str	r2, [r6, #0]
 8009738:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800973c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009740:	2301      	movs	r3, #1
 8009742:	e09c      	b.n	800987e <_printf_i+0x1e6>
 8009744:	6833      	ldr	r3, [r6, #0]
 8009746:	6820      	ldr	r0, [r4, #0]
 8009748:	1d19      	adds	r1, r3, #4
 800974a:	6031      	str	r1, [r6, #0]
 800974c:	0606      	lsls	r6, r0, #24
 800974e:	d501      	bpl.n	8009754 <_printf_i+0xbc>
 8009750:	681d      	ldr	r5, [r3, #0]
 8009752:	e003      	b.n	800975c <_printf_i+0xc4>
 8009754:	0645      	lsls	r5, r0, #25
 8009756:	d5fb      	bpl.n	8009750 <_printf_i+0xb8>
 8009758:	f9b3 5000 	ldrsh.w	r5, [r3]
 800975c:	2d00      	cmp	r5, #0
 800975e:	da03      	bge.n	8009768 <_printf_i+0xd0>
 8009760:	232d      	movs	r3, #45	@ 0x2d
 8009762:	426d      	negs	r5, r5
 8009764:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009768:	4858      	ldr	r0, [pc, #352]	@ (80098cc <_printf_i+0x234>)
 800976a:	230a      	movs	r3, #10
 800976c:	e011      	b.n	8009792 <_printf_i+0xfa>
 800976e:	6821      	ldr	r1, [r4, #0]
 8009770:	6833      	ldr	r3, [r6, #0]
 8009772:	0608      	lsls	r0, r1, #24
 8009774:	f853 5b04 	ldr.w	r5, [r3], #4
 8009778:	d402      	bmi.n	8009780 <_printf_i+0xe8>
 800977a:	0649      	lsls	r1, r1, #25
 800977c:	bf48      	it	mi
 800977e:	b2ad      	uxthmi	r5, r5
 8009780:	2f6f      	cmp	r7, #111	@ 0x6f
 8009782:	4852      	ldr	r0, [pc, #328]	@ (80098cc <_printf_i+0x234>)
 8009784:	6033      	str	r3, [r6, #0]
 8009786:	bf14      	ite	ne
 8009788:	230a      	movne	r3, #10
 800978a:	2308      	moveq	r3, #8
 800978c:	2100      	movs	r1, #0
 800978e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009792:	6866      	ldr	r6, [r4, #4]
 8009794:	60a6      	str	r6, [r4, #8]
 8009796:	2e00      	cmp	r6, #0
 8009798:	db05      	blt.n	80097a6 <_printf_i+0x10e>
 800979a:	6821      	ldr	r1, [r4, #0]
 800979c:	432e      	orrs	r6, r5
 800979e:	f021 0104 	bic.w	r1, r1, #4
 80097a2:	6021      	str	r1, [r4, #0]
 80097a4:	d04b      	beq.n	800983e <_printf_i+0x1a6>
 80097a6:	4616      	mov	r6, r2
 80097a8:	fbb5 f1f3 	udiv	r1, r5, r3
 80097ac:	fb03 5711 	mls	r7, r3, r1, r5
 80097b0:	5dc7      	ldrb	r7, [r0, r7]
 80097b2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80097b6:	462f      	mov	r7, r5
 80097b8:	42bb      	cmp	r3, r7
 80097ba:	460d      	mov	r5, r1
 80097bc:	d9f4      	bls.n	80097a8 <_printf_i+0x110>
 80097be:	2b08      	cmp	r3, #8
 80097c0:	d10b      	bne.n	80097da <_printf_i+0x142>
 80097c2:	6823      	ldr	r3, [r4, #0]
 80097c4:	07df      	lsls	r7, r3, #31
 80097c6:	d508      	bpl.n	80097da <_printf_i+0x142>
 80097c8:	6923      	ldr	r3, [r4, #16]
 80097ca:	6861      	ldr	r1, [r4, #4]
 80097cc:	4299      	cmp	r1, r3
 80097ce:	bfde      	ittt	le
 80097d0:	2330      	movle	r3, #48	@ 0x30
 80097d2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80097d6:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80097da:	1b92      	subs	r2, r2, r6
 80097dc:	6122      	str	r2, [r4, #16]
 80097de:	f8cd a000 	str.w	sl, [sp]
 80097e2:	464b      	mov	r3, r9
 80097e4:	aa03      	add	r2, sp, #12
 80097e6:	4621      	mov	r1, r4
 80097e8:	4640      	mov	r0, r8
 80097ea:	f7ff fee7 	bl	80095bc <_printf_common>
 80097ee:	3001      	adds	r0, #1
 80097f0:	d14a      	bne.n	8009888 <_printf_i+0x1f0>
 80097f2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80097f6:	b004      	add	sp, #16
 80097f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097fc:	6823      	ldr	r3, [r4, #0]
 80097fe:	f043 0320 	orr.w	r3, r3, #32
 8009802:	6023      	str	r3, [r4, #0]
 8009804:	4832      	ldr	r0, [pc, #200]	@ (80098d0 <_printf_i+0x238>)
 8009806:	2778      	movs	r7, #120	@ 0x78
 8009808:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800980c:	6823      	ldr	r3, [r4, #0]
 800980e:	6831      	ldr	r1, [r6, #0]
 8009810:	061f      	lsls	r7, r3, #24
 8009812:	f851 5b04 	ldr.w	r5, [r1], #4
 8009816:	d402      	bmi.n	800981e <_printf_i+0x186>
 8009818:	065f      	lsls	r7, r3, #25
 800981a:	bf48      	it	mi
 800981c:	b2ad      	uxthmi	r5, r5
 800981e:	6031      	str	r1, [r6, #0]
 8009820:	07d9      	lsls	r1, r3, #31
 8009822:	bf44      	itt	mi
 8009824:	f043 0320 	orrmi.w	r3, r3, #32
 8009828:	6023      	strmi	r3, [r4, #0]
 800982a:	b11d      	cbz	r5, 8009834 <_printf_i+0x19c>
 800982c:	2310      	movs	r3, #16
 800982e:	e7ad      	b.n	800978c <_printf_i+0xf4>
 8009830:	4826      	ldr	r0, [pc, #152]	@ (80098cc <_printf_i+0x234>)
 8009832:	e7e9      	b.n	8009808 <_printf_i+0x170>
 8009834:	6823      	ldr	r3, [r4, #0]
 8009836:	f023 0320 	bic.w	r3, r3, #32
 800983a:	6023      	str	r3, [r4, #0]
 800983c:	e7f6      	b.n	800982c <_printf_i+0x194>
 800983e:	4616      	mov	r6, r2
 8009840:	e7bd      	b.n	80097be <_printf_i+0x126>
 8009842:	6833      	ldr	r3, [r6, #0]
 8009844:	6825      	ldr	r5, [r4, #0]
 8009846:	6961      	ldr	r1, [r4, #20]
 8009848:	1d18      	adds	r0, r3, #4
 800984a:	6030      	str	r0, [r6, #0]
 800984c:	062e      	lsls	r6, r5, #24
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	d501      	bpl.n	8009856 <_printf_i+0x1be>
 8009852:	6019      	str	r1, [r3, #0]
 8009854:	e002      	b.n	800985c <_printf_i+0x1c4>
 8009856:	0668      	lsls	r0, r5, #25
 8009858:	d5fb      	bpl.n	8009852 <_printf_i+0x1ba>
 800985a:	8019      	strh	r1, [r3, #0]
 800985c:	2300      	movs	r3, #0
 800985e:	6123      	str	r3, [r4, #16]
 8009860:	4616      	mov	r6, r2
 8009862:	e7bc      	b.n	80097de <_printf_i+0x146>
 8009864:	6833      	ldr	r3, [r6, #0]
 8009866:	1d1a      	adds	r2, r3, #4
 8009868:	6032      	str	r2, [r6, #0]
 800986a:	681e      	ldr	r6, [r3, #0]
 800986c:	6862      	ldr	r2, [r4, #4]
 800986e:	2100      	movs	r1, #0
 8009870:	4630      	mov	r0, r6
 8009872:	f7f6 fcb5 	bl	80001e0 <memchr>
 8009876:	b108      	cbz	r0, 800987c <_printf_i+0x1e4>
 8009878:	1b80      	subs	r0, r0, r6
 800987a:	6060      	str	r0, [r4, #4]
 800987c:	6863      	ldr	r3, [r4, #4]
 800987e:	6123      	str	r3, [r4, #16]
 8009880:	2300      	movs	r3, #0
 8009882:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009886:	e7aa      	b.n	80097de <_printf_i+0x146>
 8009888:	6923      	ldr	r3, [r4, #16]
 800988a:	4632      	mov	r2, r6
 800988c:	4649      	mov	r1, r9
 800988e:	4640      	mov	r0, r8
 8009890:	47d0      	blx	sl
 8009892:	3001      	adds	r0, #1
 8009894:	d0ad      	beq.n	80097f2 <_printf_i+0x15a>
 8009896:	6823      	ldr	r3, [r4, #0]
 8009898:	079b      	lsls	r3, r3, #30
 800989a:	d413      	bmi.n	80098c4 <_printf_i+0x22c>
 800989c:	68e0      	ldr	r0, [r4, #12]
 800989e:	9b03      	ldr	r3, [sp, #12]
 80098a0:	4298      	cmp	r0, r3
 80098a2:	bfb8      	it	lt
 80098a4:	4618      	movlt	r0, r3
 80098a6:	e7a6      	b.n	80097f6 <_printf_i+0x15e>
 80098a8:	2301      	movs	r3, #1
 80098aa:	4632      	mov	r2, r6
 80098ac:	4649      	mov	r1, r9
 80098ae:	4640      	mov	r0, r8
 80098b0:	47d0      	blx	sl
 80098b2:	3001      	adds	r0, #1
 80098b4:	d09d      	beq.n	80097f2 <_printf_i+0x15a>
 80098b6:	3501      	adds	r5, #1
 80098b8:	68e3      	ldr	r3, [r4, #12]
 80098ba:	9903      	ldr	r1, [sp, #12]
 80098bc:	1a5b      	subs	r3, r3, r1
 80098be:	42ab      	cmp	r3, r5
 80098c0:	dcf2      	bgt.n	80098a8 <_printf_i+0x210>
 80098c2:	e7eb      	b.n	800989c <_printf_i+0x204>
 80098c4:	2500      	movs	r5, #0
 80098c6:	f104 0619 	add.w	r6, r4, #25
 80098ca:	e7f5      	b.n	80098b8 <_printf_i+0x220>
 80098cc:	0800a959 	.word	0x0800a959
 80098d0:	0800a96a 	.word	0x0800a96a

080098d4 <__malloc_lock>:
 80098d4:	4801      	ldr	r0, [pc, #4]	@ (80098dc <__malloc_lock+0x8>)
 80098d6:	f7ff bbbf 	b.w	8009058 <__retarget_lock_acquire_recursive>
 80098da:	bf00      	nop
 80098dc:	20004e28 	.word	0x20004e28

080098e0 <__malloc_unlock>:
 80098e0:	4801      	ldr	r0, [pc, #4]	@ (80098e8 <__malloc_unlock+0x8>)
 80098e2:	f7ff bbba 	b.w	800905a <__retarget_lock_release_recursive>
 80098e6:	bf00      	nop
 80098e8:	20004e28 	.word	0x20004e28

080098ec <_realloc_r>:
 80098ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098f0:	4607      	mov	r7, r0
 80098f2:	4614      	mov	r4, r2
 80098f4:	460d      	mov	r5, r1
 80098f6:	b921      	cbnz	r1, 8009902 <_realloc_r+0x16>
 80098f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80098fc:	4611      	mov	r1, r2
 80098fe:	f7ff bddd 	b.w	80094bc <_malloc_r>
 8009902:	b92a      	cbnz	r2, 8009910 <_realloc_r+0x24>
 8009904:	f7ff fc16 	bl	8009134 <_free_r>
 8009908:	4625      	mov	r5, r4
 800990a:	4628      	mov	r0, r5
 800990c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009910:	f000 f844 	bl	800999c <_malloc_usable_size_r>
 8009914:	4284      	cmp	r4, r0
 8009916:	4606      	mov	r6, r0
 8009918:	d802      	bhi.n	8009920 <_realloc_r+0x34>
 800991a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800991e:	d8f4      	bhi.n	800990a <_realloc_r+0x1e>
 8009920:	4621      	mov	r1, r4
 8009922:	4638      	mov	r0, r7
 8009924:	f7ff fdca 	bl	80094bc <_malloc_r>
 8009928:	4680      	mov	r8, r0
 800992a:	b908      	cbnz	r0, 8009930 <_realloc_r+0x44>
 800992c:	4645      	mov	r5, r8
 800992e:	e7ec      	b.n	800990a <_realloc_r+0x1e>
 8009930:	42b4      	cmp	r4, r6
 8009932:	4622      	mov	r2, r4
 8009934:	4629      	mov	r1, r5
 8009936:	bf28      	it	cs
 8009938:	4632      	movcs	r2, r6
 800993a:	f7ff fbed 	bl	8009118 <memcpy>
 800993e:	4629      	mov	r1, r5
 8009940:	4638      	mov	r0, r7
 8009942:	f7ff fbf7 	bl	8009134 <_free_r>
 8009946:	e7f1      	b.n	800992c <_realloc_r+0x40>

08009948 <memmove>:
 8009948:	4288      	cmp	r0, r1
 800994a:	b510      	push	{r4, lr}
 800994c:	eb01 0402 	add.w	r4, r1, r2
 8009950:	d902      	bls.n	8009958 <memmove+0x10>
 8009952:	4284      	cmp	r4, r0
 8009954:	4623      	mov	r3, r4
 8009956:	d807      	bhi.n	8009968 <memmove+0x20>
 8009958:	1e43      	subs	r3, r0, #1
 800995a:	42a1      	cmp	r1, r4
 800995c:	d008      	beq.n	8009970 <memmove+0x28>
 800995e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009962:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009966:	e7f8      	b.n	800995a <memmove+0x12>
 8009968:	4402      	add	r2, r0
 800996a:	4601      	mov	r1, r0
 800996c:	428a      	cmp	r2, r1
 800996e:	d100      	bne.n	8009972 <memmove+0x2a>
 8009970:	bd10      	pop	{r4, pc}
 8009972:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009976:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800997a:	e7f7      	b.n	800996c <memmove+0x24>

0800997c <_sbrk_r>:
 800997c:	b538      	push	{r3, r4, r5, lr}
 800997e:	4d06      	ldr	r5, [pc, #24]	@ (8009998 <_sbrk_r+0x1c>)
 8009980:	2300      	movs	r3, #0
 8009982:	4604      	mov	r4, r0
 8009984:	4608      	mov	r0, r1
 8009986:	602b      	str	r3, [r5, #0]
 8009988:	f7f8 fd52 	bl	8002430 <_sbrk>
 800998c:	1c43      	adds	r3, r0, #1
 800998e:	d102      	bne.n	8009996 <_sbrk_r+0x1a>
 8009990:	682b      	ldr	r3, [r5, #0]
 8009992:	b103      	cbz	r3, 8009996 <_sbrk_r+0x1a>
 8009994:	6023      	str	r3, [r4, #0]
 8009996:	bd38      	pop	{r3, r4, r5, pc}
 8009998:	20004e2c 	.word	0x20004e2c

0800999c <_malloc_usable_size_r>:
 800999c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099a0:	1f18      	subs	r0, r3, #4
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	bfbc      	itt	lt
 80099a6:	580b      	ldrlt	r3, [r1, r0]
 80099a8:	18c0      	addlt	r0, r0, r3
 80099aa:	4770      	bx	lr

080099ac <pow>:
 80099ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099ae:	ed2d 8b02 	vpush	{d8}
 80099b2:	eeb0 8a40 	vmov.f32	s16, s0
 80099b6:	eef0 8a60 	vmov.f32	s17, s1
 80099ba:	ec55 4b11 	vmov	r4, r5, d1
 80099be:	f000 f873 	bl	8009aa8 <__ieee754_pow>
 80099c2:	4622      	mov	r2, r4
 80099c4:	462b      	mov	r3, r5
 80099c6:	4620      	mov	r0, r4
 80099c8:	4629      	mov	r1, r5
 80099ca:	ec57 6b10 	vmov	r6, r7, d0
 80099ce:	f7f7 f8ad 	bl	8000b2c <__aeabi_dcmpun>
 80099d2:	2800      	cmp	r0, #0
 80099d4:	d13b      	bne.n	8009a4e <pow+0xa2>
 80099d6:	ec51 0b18 	vmov	r0, r1, d8
 80099da:	2200      	movs	r2, #0
 80099dc:	2300      	movs	r3, #0
 80099de:	f7f7 f873 	bl	8000ac8 <__aeabi_dcmpeq>
 80099e2:	b1b8      	cbz	r0, 8009a14 <pow+0x68>
 80099e4:	2200      	movs	r2, #0
 80099e6:	2300      	movs	r3, #0
 80099e8:	4620      	mov	r0, r4
 80099ea:	4629      	mov	r1, r5
 80099ec:	f7f7 f86c 	bl	8000ac8 <__aeabi_dcmpeq>
 80099f0:	2800      	cmp	r0, #0
 80099f2:	d146      	bne.n	8009a82 <pow+0xd6>
 80099f4:	ec45 4b10 	vmov	d0, r4, r5
 80099f8:	f000 f848 	bl	8009a8c <finite>
 80099fc:	b338      	cbz	r0, 8009a4e <pow+0xa2>
 80099fe:	2200      	movs	r2, #0
 8009a00:	2300      	movs	r3, #0
 8009a02:	4620      	mov	r0, r4
 8009a04:	4629      	mov	r1, r5
 8009a06:	f7f7 f869 	bl	8000adc <__aeabi_dcmplt>
 8009a0a:	b300      	cbz	r0, 8009a4e <pow+0xa2>
 8009a0c:	f7ff fafa 	bl	8009004 <__errno>
 8009a10:	2322      	movs	r3, #34	@ 0x22
 8009a12:	e01b      	b.n	8009a4c <pow+0xa0>
 8009a14:	ec47 6b10 	vmov	d0, r6, r7
 8009a18:	f000 f838 	bl	8009a8c <finite>
 8009a1c:	b9e0      	cbnz	r0, 8009a58 <pow+0xac>
 8009a1e:	eeb0 0a48 	vmov.f32	s0, s16
 8009a22:	eef0 0a68 	vmov.f32	s1, s17
 8009a26:	f000 f831 	bl	8009a8c <finite>
 8009a2a:	b1a8      	cbz	r0, 8009a58 <pow+0xac>
 8009a2c:	ec45 4b10 	vmov	d0, r4, r5
 8009a30:	f000 f82c 	bl	8009a8c <finite>
 8009a34:	b180      	cbz	r0, 8009a58 <pow+0xac>
 8009a36:	4632      	mov	r2, r6
 8009a38:	463b      	mov	r3, r7
 8009a3a:	4630      	mov	r0, r6
 8009a3c:	4639      	mov	r1, r7
 8009a3e:	f7f7 f875 	bl	8000b2c <__aeabi_dcmpun>
 8009a42:	2800      	cmp	r0, #0
 8009a44:	d0e2      	beq.n	8009a0c <pow+0x60>
 8009a46:	f7ff fadd 	bl	8009004 <__errno>
 8009a4a:	2321      	movs	r3, #33	@ 0x21
 8009a4c:	6003      	str	r3, [r0, #0]
 8009a4e:	ecbd 8b02 	vpop	{d8}
 8009a52:	ec47 6b10 	vmov	d0, r6, r7
 8009a56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a58:	2200      	movs	r2, #0
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	4630      	mov	r0, r6
 8009a5e:	4639      	mov	r1, r7
 8009a60:	f7f7 f832 	bl	8000ac8 <__aeabi_dcmpeq>
 8009a64:	2800      	cmp	r0, #0
 8009a66:	d0f2      	beq.n	8009a4e <pow+0xa2>
 8009a68:	eeb0 0a48 	vmov.f32	s0, s16
 8009a6c:	eef0 0a68 	vmov.f32	s1, s17
 8009a70:	f000 f80c 	bl	8009a8c <finite>
 8009a74:	2800      	cmp	r0, #0
 8009a76:	d0ea      	beq.n	8009a4e <pow+0xa2>
 8009a78:	ec45 4b10 	vmov	d0, r4, r5
 8009a7c:	f000 f806 	bl	8009a8c <finite>
 8009a80:	e7c3      	b.n	8009a0a <pow+0x5e>
 8009a82:	4f01      	ldr	r7, [pc, #4]	@ (8009a88 <pow+0xdc>)
 8009a84:	2600      	movs	r6, #0
 8009a86:	e7e2      	b.n	8009a4e <pow+0xa2>
 8009a88:	3ff00000 	.word	0x3ff00000

08009a8c <finite>:
 8009a8c:	b082      	sub	sp, #8
 8009a8e:	ed8d 0b00 	vstr	d0, [sp]
 8009a92:	9801      	ldr	r0, [sp, #4]
 8009a94:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8009a98:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8009a9c:	0fc0      	lsrs	r0, r0, #31
 8009a9e:	b002      	add	sp, #8
 8009aa0:	4770      	bx	lr
 8009aa2:	0000      	movs	r0, r0
 8009aa4:	0000      	movs	r0, r0
	...

08009aa8 <__ieee754_pow>:
 8009aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aac:	b091      	sub	sp, #68	@ 0x44
 8009aae:	ed8d 1b00 	vstr	d1, [sp]
 8009ab2:	e9dd 1900 	ldrd	r1, r9, [sp]
 8009ab6:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8009aba:	ea5a 0001 	orrs.w	r0, sl, r1
 8009abe:	ec57 6b10 	vmov	r6, r7, d0
 8009ac2:	d113      	bne.n	8009aec <__ieee754_pow+0x44>
 8009ac4:	19b3      	adds	r3, r6, r6
 8009ac6:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8009aca:	4152      	adcs	r2, r2
 8009acc:	4298      	cmp	r0, r3
 8009ace:	4b9a      	ldr	r3, [pc, #616]	@ (8009d38 <__ieee754_pow+0x290>)
 8009ad0:	4193      	sbcs	r3, r2
 8009ad2:	f080 84ee 	bcs.w	800a4b2 <__ieee754_pow+0xa0a>
 8009ad6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ada:	4630      	mov	r0, r6
 8009adc:	4639      	mov	r1, r7
 8009ade:	f7f6 fbd5 	bl	800028c <__adddf3>
 8009ae2:	ec41 0b10 	vmov	d0, r0, r1
 8009ae6:	b011      	add	sp, #68	@ 0x44
 8009ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009aec:	4a93      	ldr	r2, [pc, #588]	@ (8009d3c <__ieee754_pow+0x294>)
 8009aee:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 8009af2:	4295      	cmp	r5, r2
 8009af4:	46b8      	mov	r8, r7
 8009af6:	4633      	mov	r3, r6
 8009af8:	d80a      	bhi.n	8009b10 <__ieee754_pow+0x68>
 8009afa:	d104      	bne.n	8009b06 <__ieee754_pow+0x5e>
 8009afc:	2e00      	cmp	r6, #0
 8009afe:	d1ea      	bne.n	8009ad6 <__ieee754_pow+0x2e>
 8009b00:	45aa      	cmp	sl, r5
 8009b02:	d8e8      	bhi.n	8009ad6 <__ieee754_pow+0x2e>
 8009b04:	e001      	b.n	8009b0a <__ieee754_pow+0x62>
 8009b06:	4592      	cmp	sl, r2
 8009b08:	d802      	bhi.n	8009b10 <__ieee754_pow+0x68>
 8009b0a:	4592      	cmp	sl, r2
 8009b0c:	d10f      	bne.n	8009b2e <__ieee754_pow+0x86>
 8009b0e:	b171      	cbz	r1, 8009b2e <__ieee754_pow+0x86>
 8009b10:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8009b14:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8009b18:	ea58 0803 	orrs.w	r8, r8, r3
 8009b1c:	d1db      	bne.n	8009ad6 <__ieee754_pow+0x2e>
 8009b1e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009b22:	18db      	adds	r3, r3, r3
 8009b24:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8009b28:	4152      	adcs	r2, r2
 8009b2a:	4598      	cmp	r8, r3
 8009b2c:	e7cf      	b.n	8009ace <__ieee754_pow+0x26>
 8009b2e:	f1b8 0f00 	cmp.w	r8, #0
 8009b32:	46ab      	mov	fp, r5
 8009b34:	da43      	bge.n	8009bbe <__ieee754_pow+0x116>
 8009b36:	4a82      	ldr	r2, [pc, #520]	@ (8009d40 <__ieee754_pow+0x298>)
 8009b38:	4592      	cmp	sl, r2
 8009b3a:	d856      	bhi.n	8009bea <__ieee754_pow+0x142>
 8009b3c:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8009b40:	4592      	cmp	sl, r2
 8009b42:	f240 84c5 	bls.w	800a4d0 <__ieee754_pow+0xa28>
 8009b46:	ea4f 522a 	mov.w	r2, sl, asr #20
 8009b4a:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8009b4e:	2a14      	cmp	r2, #20
 8009b50:	dd18      	ble.n	8009b84 <__ieee754_pow+0xdc>
 8009b52:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8009b56:	fa21 f402 	lsr.w	r4, r1, r2
 8009b5a:	fa04 f202 	lsl.w	r2, r4, r2
 8009b5e:	428a      	cmp	r2, r1
 8009b60:	f040 84b6 	bne.w	800a4d0 <__ieee754_pow+0xa28>
 8009b64:	f004 0401 	and.w	r4, r4, #1
 8009b68:	f1c4 0402 	rsb	r4, r4, #2
 8009b6c:	2900      	cmp	r1, #0
 8009b6e:	d159      	bne.n	8009c24 <__ieee754_pow+0x17c>
 8009b70:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8009b74:	d148      	bne.n	8009c08 <__ieee754_pow+0x160>
 8009b76:	4632      	mov	r2, r6
 8009b78:	463b      	mov	r3, r7
 8009b7a:	4630      	mov	r0, r6
 8009b7c:	4639      	mov	r1, r7
 8009b7e:	f7f6 fd3b 	bl	80005f8 <__aeabi_dmul>
 8009b82:	e7ae      	b.n	8009ae2 <__ieee754_pow+0x3a>
 8009b84:	2900      	cmp	r1, #0
 8009b86:	d14c      	bne.n	8009c22 <__ieee754_pow+0x17a>
 8009b88:	f1c2 0214 	rsb	r2, r2, #20
 8009b8c:	fa4a f402 	asr.w	r4, sl, r2
 8009b90:	fa04 f202 	lsl.w	r2, r4, r2
 8009b94:	4552      	cmp	r2, sl
 8009b96:	f040 8498 	bne.w	800a4ca <__ieee754_pow+0xa22>
 8009b9a:	f004 0401 	and.w	r4, r4, #1
 8009b9e:	f1c4 0402 	rsb	r4, r4, #2
 8009ba2:	4a68      	ldr	r2, [pc, #416]	@ (8009d44 <__ieee754_pow+0x29c>)
 8009ba4:	4592      	cmp	sl, r2
 8009ba6:	d1e3      	bne.n	8009b70 <__ieee754_pow+0xc8>
 8009ba8:	f1b9 0f00 	cmp.w	r9, #0
 8009bac:	f280 8489 	bge.w	800a4c2 <__ieee754_pow+0xa1a>
 8009bb0:	4964      	ldr	r1, [pc, #400]	@ (8009d44 <__ieee754_pow+0x29c>)
 8009bb2:	4632      	mov	r2, r6
 8009bb4:	463b      	mov	r3, r7
 8009bb6:	2000      	movs	r0, #0
 8009bb8:	f7f6 fe48 	bl	800084c <__aeabi_ddiv>
 8009bbc:	e791      	b.n	8009ae2 <__ieee754_pow+0x3a>
 8009bbe:	2400      	movs	r4, #0
 8009bc0:	bb81      	cbnz	r1, 8009c24 <__ieee754_pow+0x17c>
 8009bc2:	4a5e      	ldr	r2, [pc, #376]	@ (8009d3c <__ieee754_pow+0x294>)
 8009bc4:	4592      	cmp	sl, r2
 8009bc6:	d1ec      	bne.n	8009ba2 <__ieee754_pow+0xfa>
 8009bc8:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 8009bcc:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8009bd0:	431a      	orrs	r2, r3
 8009bd2:	f000 846e 	beq.w	800a4b2 <__ieee754_pow+0xa0a>
 8009bd6:	4b5c      	ldr	r3, [pc, #368]	@ (8009d48 <__ieee754_pow+0x2a0>)
 8009bd8:	429d      	cmp	r5, r3
 8009bda:	d908      	bls.n	8009bee <__ieee754_pow+0x146>
 8009bdc:	f1b9 0f00 	cmp.w	r9, #0
 8009be0:	f280 846b 	bge.w	800a4ba <__ieee754_pow+0xa12>
 8009be4:	2000      	movs	r0, #0
 8009be6:	2100      	movs	r1, #0
 8009be8:	e77b      	b.n	8009ae2 <__ieee754_pow+0x3a>
 8009bea:	2402      	movs	r4, #2
 8009bec:	e7e8      	b.n	8009bc0 <__ieee754_pow+0x118>
 8009bee:	f1b9 0f00 	cmp.w	r9, #0
 8009bf2:	f04f 0000 	mov.w	r0, #0
 8009bf6:	f04f 0100 	mov.w	r1, #0
 8009bfa:	f6bf af72 	bge.w	8009ae2 <__ieee754_pow+0x3a>
 8009bfe:	e9dd 0300 	ldrd	r0, r3, [sp]
 8009c02:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8009c06:	e76c      	b.n	8009ae2 <__ieee754_pow+0x3a>
 8009c08:	4a50      	ldr	r2, [pc, #320]	@ (8009d4c <__ieee754_pow+0x2a4>)
 8009c0a:	4591      	cmp	r9, r2
 8009c0c:	d10a      	bne.n	8009c24 <__ieee754_pow+0x17c>
 8009c0e:	f1b8 0f00 	cmp.w	r8, #0
 8009c12:	db07      	blt.n	8009c24 <__ieee754_pow+0x17c>
 8009c14:	ec47 6b10 	vmov	d0, r6, r7
 8009c18:	b011      	add	sp, #68	@ 0x44
 8009c1a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c1e:	f000 bd4d 	b.w	800a6bc <__ieee754_sqrt>
 8009c22:	2400      	movs	r4, #0
 8009c24:	ec47 6b10 	vmov	d0, r6, r7
 8009c28:	9302      	str	r3, [sp, #8]
 8009c2a:	f000 fcc5 	bl	800a5b8 <fabs>
 8009c2e:	9b02      	ldr	r3, [sp, #8]
 8009c30:	ec51 0b10 	vmov	r0, r1, d0
 8009c34:	bb43      	cbnz	r3, 8009c88 <__ieee754_pow+0x1e0>
 8009c36:	4b43      	ldr	r3, [pc, #268]	@ (8009d44 <__ieee754_pow+0x29c>)
 8009c38:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 8009c3c:	429a      	cmp	r2, r3
 8009c3e:	d000      	beq.n	8009c42 <__ieee754_pow+0x19a>
 8009c40:	bb15      	cbnz	r5, 8009c88 <__ieee754_pow+0x1e0>
 8009c42:	f1b9 0f00 	cmp.w	r9, #0
 8009c46:	da05      	bge.n	8009c54 <__ieee754_pow+0x1ac>
 8009c48:	4602      	mov	r2, r0
 8009c4a:	460b      	mov	r3, r1
 8009c4c:	2000      	movs	r0, #0
 8009c4e:	493d      	ldr	r1, [pc, #244]	@ (8009d44 <__ieee754_pow+0x29c>)
 8009c50:	f7f6 fdfc 	bl	800084c <__aeabi_ddiv>
 8009c54:	f1b8 0f00 	cmp.w	r8, #0
 8009c58:	f6bf af43 	bge.w	8009ae2 <__ieee754_pow+0x3a>
 8009c5c:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8009c60:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8009c64:	4325      	orrs	r5, r4
 8009c66:	d108      	bne.n	8009c7a <__ieee754_pow+0x1d2>
 8009c68:	4602      	mov	r2, r0
 8009c6a:	460b      	mov	r3, r1
 8009c6c:	4610      	mov	r0, r2
 8009c6e:	4619      	mov	r1, r3
 8009c70:	f7f6 fb0a 	bl	8000288 <__aeabi_dsub>
 8009c74:	4602      	mov	r2, r0
 8009c76:	460b      	mov	r3, r1
 8009c78:	e79e      	b.n	8009bb8 <__ieee754_pow+0x110>
 8009c7a:	2c01      	cmp	r4, #1
 8009c7c:	f47f af31 	bne.w	8009ae2 <__ieee754_pow+0x3a>
 8009c80:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009c84:	4619      	mov	r1, r3
 8009c86:	e72c      	b.n	8009ae2 <__ieee754_pow+0x3a>
 8009c88:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 8009c8c:	3b01      	subs	r3, #1
 8009c8e:	ea53 0204 	orrs.w	r2, r3, r4
 8009c92:	d102      	bne.n	8009c9a <__ieee754_pow+0x1f2>
 8009c94:	4632      	mov	r2, r6
 8009c96:	463b      	mov	r3, r7
 8009c98:	e7e8      	b.n	8009c6c <__ieee754_pow+0x1c4>
 8009c9a:	3c01      	subs	r4, #1
 8009c9c:	431c      	orrs	r4, r3
 8009c9e:	d016      	beq.n	8009cce <__ieee754_pow+0x226>
 8009ca0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009d28 <__ieee754_pow+0x280>
 8009ca4:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8009ca8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009cac:	f240 8110 	bls.w	8009ed0 <__ieee754_pow+0x428>
 8009cb0:	4b27      	ldr	r3, [pc, #156]	@ (8009d50 <__ieee754_pow+0x2a8>)
 8009cb2:	459a      	cmp	sl, r3
 8009cb4:	4b24      	ldr	r3, [pc, #144]	@ (8009d48 <__ieee754_pow+0x2a0>)
 8009cb6:	d916      	bls.n	8009ce6 <__ieee754_pow+0x23e>
 8009cb8:	429d      	cmp	r5, r3
 8009cba:	d80b      	bhi.n	8009cd4 <__ieee754_pow+0x22c>
 8009cbc:	f1b9 0f00 	cmp.w	r9, #0
 8009cc0:	da0b      	bge.n	8009cda <__ieee754_pow+0x232>
 8009cc2:	2000      	movs	r0, #0
 8009cc4:	b011      	add	sp, #68	@ 0x44
 8009cc6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cca:	f000 bc6d 	b.w	800a5a8 <__math_oflow>
 8009cce:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 8009d30 <__ieee754_pow+0x288>
 8009cd2:	e7e7      	b.n	8009ca4 <__ieee754_pow+0x1fc>
 8009cd4:	f1b9 0f00 	cmp.w	r9, #0
 8009cd8:	dcf3      	bgt.n	8009cc2 <__ieee754_pow+0x21a>
 8009cda:	2000      	movs	r0, #0
 8009cdc:	b011      	add	sp, #68	@ 0x44
 8009cde:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ce2:	f000 bc59 	b.w	800a598 <__math_uflow>
 8009ce6:	429d      	cmp	r5, r3
 8009ce8:	d20c      	bcs.n	8009d04 <__ieee754_pow+0x25c>
 8009cea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009cee:	2200      	movs	r2, #0
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	f7f6 fef3 	bl	8000adc <__aeabi_dcmplt>
 8009cf6:	3800      	subs	r0, #0
 8009cf8:	bf18      	it	ne
 8009cfa:	2001      	movne	r0, #1
 8009cfc:	f1b9 0f00 	cmp.w	r9, #0
 8009d00:	daec      	bge.n	8009cdc <__ieee754_pow+0x234>
 8009d02:	e7df      	b.n	8009cc4 <__ieee754_pow+0x21c>
 8009d04:	4b0f      	ldr	r3, [pc, #60]	@ (8009d44 <__ieee754_pow+0x29c>)
 8009d06:	429d      	cmp	r5, r3
 8009d08:	f04f 0200 	mov.w	r2, #0
 8009d0c:	d922      	bls.n	8009d54 <__ieee754_pow+0x2ac>
 8009d0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d12:	2300      	movs	r3, #0
 8009d14:	f7f6 fee2 	bl	8000adc <__aeabi_dcmplt>
 8009d18:	3800      	subs	r0, #0
 8009d1a:	bf18      	it	ne
 8009d1c:	2001      	movne	r0, #1
 8009d1e:	f1b9 0f00 	cmp.w	r9, #0
 8009d22:	dccf      	bgt.n	8009cc4 <__ieee754_pow+0x21c>
 8009d24:	e7da      	b.n	8009cdc <__ieee754_pow+0x234>
 8009d26:	bf00      	nop
 8009d28:	00000000 	.word	0x00000000
 8009d2c:	3ff00000 	.word	0x3ff00000
 8009d30:	00000000 	.word	0x00000000
 8009d34:	bff00000 	.word	0xbff00000
 8009d38:	fff00000 	.word	0xfff00000
 8009d3c:	7ff00000 	.word	0x7ff00000
 8009d40:	433fffff 	.word	0x433fffff
 8009d44:	3ff00000 	.word	0x3ff00000
 8009d48:	3fefffff 	.word	0x3fefffff
 8009d4c:	3fe00000 	.word	0x3fe00000
 8009d50:	43f00000 	.word	0x43f00000
 8009d54:	4b5a      	ldr	r3, [pc, #360]	@ (8009ec0 <__ieee754_pow+0x418>)
 8009d56:	f7f6 fa97 	bl	8000288 <__aeabi_dsub>
 8009d5a:	a351      	add	r3, pc, #324	@ (adr r3, 8009ea0 <__ieee754_pow+0x3f8>)
 8009d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d60:	4604      	mov	r4, r0
 8009d62:	460d      	mov	r5, r1
 8009d64:	f7f6 fc48 	bl	80005f8 <__aeabi_dmul>
 8009d68:	a34f      	add	r3, pc, #316	@ (adr r3, 8009ea8 <__ieee754_pow+0x400>)
 8009d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d6e:	4606      	mov	r6, r0
 8009d70:	460f      	mov	r7, r1
 8009d72:	4620      	mov	r0, r4
 8009d74:	4629      	mov	r1, r5
 8009d76:	f7f6 fc3f 	bl	80005f8 <__aeabi_dmul>
 8009d7a:	4b52      	ldr	r3, [pc, #328]	@ (8009ec4 <__ieee754_pow+0x41c>)
 8009d7c:	4682      	mov	sl, r0
 8009d7e:	468b      	mov	fp, r1
 8009d80:	2200      	movs	r2, #0
 8009d82:	4620      	mov	r0, r4
 8009d84:	4629      	mov	r1, r5
 8009d86:	f7f6 fc37 	bl	80005f8 <__aeabi_dmul>
 8009d8a:	4602      	mov	r2, r0
 8009d8c:	460b      	mov	r3, r1
 8009d8e:	a148      	add	r1, pc, #288	@ (adr r1, 8009eb0 <__ieee754_pow+0x408>)
 8009d90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d94:	f7f6 fa78 	bl	8000288 <__aeabi_dsub>
 8009d98:	4622      	mov	r2, r4
 8009d9a:	462b      	mov	r3, r5
 8009d9c:	f7f6 fc2c 	bl	80005f8 <__aeabi_dmul>
 8009da0:	4602      	mov	r2, r0
 8009da2:	460b      	mov	r3, r1
 8009da4:	2000      	movs	r0, #0
 8009da6:	4948      	ldr	r1, [pc, #288]	@ (8009ec8 <__ieee754_pow+0x420>)
 8009da8:	f7f6 fa6e 	bl	8000288 <__aeabi_dsub>
 8009dac:	4622      	mov	r2, r4
 8009dae:	4680      	mov	r8, r0
 8009db0:	4689      	mov	r9, r1
 8009db2:	462b      	mov	r3, r5
 8009db4:	4620      	mov	r0, r4
 8009db6:	4629      	mov	r1, r5
 8009db8:	f7f6 fc1e 	bl	80005f8 <__aeabi_dmul>
 8009dbc:	4602      	mov	r2, r0
 8009dbe:	460b      	mov	r3, r1
 8009dc0:	4640      	mov	r0, r8
 8009dc2:	4649      	mov	r1, r9
 8009dc4:	f7f6 fc18 	bl	80005f8 <__aeabi_dmul>
 8009dc8:	a33b      	add	r3, pc, #236	@ (adr r3, 8009eb8 <__ieee754_pow+0x410>)
 8009dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dce:	f7f6 fc13 	bl	80005f8 <__aeabi_dmul>
 8009dd2:	4602      	mov	r2, r0
 8009dd4:	460b      	mov	r3, r1
 8009dd6:	4650      	mov	r0, sl
 8009dd8:	4659      	mov	r1, fp
 8009dda:	f7f6 fa55 	bl	8000288 <__aeabi_dsub>
 8009dde:	4602      	mov	r2, r0
 8009de0:	460b      	mov	r3, r1
 8009de2:	4680      	mov	r8, r0
 8009de4:	4689      	mov	r9, r1
 8009de6:	4630      	mov	r0, r6
 8009de8:	4639      	mov	r1, r7
 8009dea:	f7f6 fa4f 	bl	800028c <__adddf3>
 8009dee:	2400      	movs	r4, #0
 8009df0:	4632      	mov	r2, r6
 8009df2:	463b      	mov	r3, r7
 8009df4:	4620      	mov	r0, r4
 8009df6:	460d      	mov	r5, r1
 8009df8:	f7f6 fa46 	bl	8000288 <__aeabi_dsub>
 8009dfc:	4602      	mov	r2, r0
 8009dfe:	460b      	mov	r3, r1
 8009e00:	4640      	mov	r0, r8
 8009e02:	4649      	mov	r1, r9
 8009e04:	f7f6 fa40 	bl	8000288 <__aeabi_dsub>
 8009e08:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e0c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009e10:	2300      	movs	r3, #0
 8009e12:	9304      	str	r3, [sp, #16]
 8009e14:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8009e18:	4606      	mov	r6, r0
 8009e1a:	460f      	mov	r7, r1
 8009e1c:	465b      	mov	r3, fp
 8009e1e:	4652      	mov	r2, sl
 8009e20:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009e24:	f7f6 fa30 	bl	8000288 <__aeabi_dsub>
 8009e28:	4622      	mov	r2, r4
 8009e2a:	462b      	mov	r3, r5
 8009e2c:	f7f6 fbe4 	bl	80005f8 <__aeabi_dmul>
 8009e30:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e34:	4680      	mov	r8, r0
 8009e36:	4689      	mov	r9, r1
 8009e38:	4630      	mov	r0, r6
 8009e3a:	4639      	mov	r1, r7
 8009e3c:	f7f6 fbdc 	bl	80005f8 <__aeabi_dmul>
 8009e40:	4602      	mov	r2, r0
 8009e42:	460b      	mov	r3, r1
 8009e44:	4640      	mov	r0, r8
 8009e46:	4649      	mov	r1, r9
 8009e48:	f7f6 fa20 	bl	800028c <__adddf3>
 8009e4c:	465b      	mov	r3, fp
 8009e4e:	4606      	mov	r6, r0
 8009e50:	460f      	mov	r7, r1
 8009e52:	4652      	mov	r2, sl
 8009e54:	4620      	mov	r0, r4
 8009e56:	4629      	mov	r1, r5
 8009e58:	f7f6 fbce 	bl	80005f8 <__aeabi_dmul>
 8009e5c:	460b      	mov	r3, r1
 8009e5e:	4602      	mov	r2, r0
 8009e60:	4680      	mov	r8, r0
 8009e62:	4689      	mov	r9, r1
 8009e64:	4630      	mov	r0, r6
 8009e66:	4639      	mov	r1, r7
 8009e68:	f7f6 fa10 	bl	800028c <__adddf3>
 8009e6c:	4b17      	ldr	r3, [pc, #92]	@ (8009ecc <__ieee754_pow+0x424>)
 8009e6e:	4299      	cmp	r1, r3
 8009e70:	4604      	mov	r4, r0
 8009e72:	460d      	mov	r5, r1
 8009e74:	468b      	mov	fp, r1
 8009e76:	f340 820b 	ble.w	800a290 <__ieee754_pow+0x7e8>
 8009e7a:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8009e7e:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8009e82:	4303      	orrs	r3, r0
 8009e84:	f000 81ea 	beq.w	800a25c <__ieee754_pow+0x7b4>
 8009e88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	2300      	movs	r3, #0
 8009e90:	f7f6 fe24 	bl	8000adc <__aeabi_dcmplt>
 8009e94:	3800      	subs	r0, #0
 8009e96:	bf18      	it	ne
 8009e98:	2001      	movne	r0, #1
 8009e9a:	e713      	b.n	8009cc4 <__ieee754_pow+0x21c>
 8009e9c:	f3af 8000 	nop.w
 8009ea0:	60000000 	.word	0x60000000
 8009ea4:	3ff71547 	.word	0x3ff71547
 8009ea8:	f85ddf44 	.word	0xf85ddf44
 8009eac:	3e54ae0b 	.word	0x3e54ae0b
 8009eb0:	55555555 	.word	0x55555555
 8009eb4:	3fd55555 	.word	0x3fd55555
 8009eb8:	652b82fe 	.word	0x652b82fe
 8009ebc:	3ff71547 	.word	0x3ff71547
 8009ec0:	3ff00000 	.word	0x3ff00000
 8009ec4:	3fd00000 	.word	0x3fd00000
 8009ec8:	3fe00000 	.word	0x3fe00000
 8009ecc:	408fffff 	.word	0x408fffff
 8009ed0:	4bd5      	ldr	r3, [pc, #852]	@ (800a228 <__ieee754_pow+0x780>)
 8009ed2:	ea08 0303 	and.w	r3, r8, r3
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	b92b      	cbnz	r3, 8009ee6 <__ieee754_pow+0x43e>
 8009eda:	4bd4      	ldr	r3, [pc, #848]	@ (800a22c <__ieee754_pow+0x784>)
 8009edc:	f7f6 fb8c 	bl	80005f8 <__aeabi_dmul>
 8009ee0:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8009ee4:	468b      	mov	fp, r1
 8009ee6:	ea4f 532b 	mov.w	r3, fp, asr #20
 8009eea:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8009eee:	4413      	add	r3, r2
 8009ef0:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ef2:	4bcf      	ldr	r3, [pc, #828]	@ (800a230 <__ieee754_pow+0x788>)
 8009ef4:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8009ef8:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8009efc:	459b      	cmp	fp, r3
 8009efe:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009f02:	dd08      	ble.n	8009f16 <__ieee754_pow+0x46e>
 8009f04:	4bcb      	ldr	r3, [pc, #812]	@ (800a234 <__ieee754_pow+0x78c>)
 8009f06:	459b      	cmp	fp, r3
 8009f08:	f340 81a5 	ble.w	800a256 <__ieee754_pow+0x7ae>
 8009f0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f0e:	3301      	adds	r3, #1
 8009f10:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f12:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8009f16:	f04f 0a00 	mov.w	sl, #0
 8009f1a:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8009f1e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009f20:	4bc5      	ldr	r3, [pc, #788]	@ (800a238 <__ieee754_pow+0x790>)
 8009f22:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009f26:	ed93 7b00 	vldr	d7, [r3]
 8009f2a:	4629      	mov	r1, r5
 8009f2c:	ec53 2b17 	vmov	r2, r3, d7
 8009f30:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009f34:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009f38:	f7f6 f9a6 	bl	8000288 <__aeabi_dsub>
 8009f3c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009f40:	4606      	mov	r6, r0
 8009f42:	460f      	mov	r7, r1
 8009f44:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009f48:	f7f6 f9a0 	bl	800028c <__adddf3>
 8009f4c:	4602      	mov	r2, r0
 8009f4e:	460b      	mov	r3, r1
 8009f50:	2000      	movs	r0, #0
 8009f52:	49ba      	ldr	r1, [pc, #744]	@ (800a23c <__ieee754_pow+0x794>)
 8009f54:	f7f6 fc7a 	bl	800084c <__aeabi_ddiv>
 8009f58:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8009f5c:	4602      	mov	r2, r0
 8009f5e:	460b      	mov	r3, r1
 8009f60:	4630      	mov	r0, r6
 8009f62:	4639      	mov	r1, r7
 8009f64:	f7f6 fb48 	bl	80005f8 <__aeabi_dmul>
 8009f68:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009f6c:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8009f70:	106d      	asrs	r5, r5, #1
 8009f72:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8009f76:	f04f 0b00 	mov.w	fp, #0
 8009f7a:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8009f7e:	4661      	mov	r1, ip
 8009f80:	2200      	movs	r2, #0
 8009f82:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8009f86:	4658      	mov	r0, fp
 8009f88:	46e1      	mov	r9, ip
 8009f8a:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8009f8e:	4614      	mov	r4, r2
 8009f90:	461d      	mov	r5, r3
 8009f92:	f7f6 fb31 	bl	80005f8 <__aeabi_dmul>
 8009f96:	4602      	mov	r2, r0
 8009f98:	460b      	mov	r3, r1
 8009f9a:	4630      	mov	r0, r6
 8009f9c:	4639      	mov	r1, r7
 8009f9e:	f7f6 f973 	bl	8000288 <__aeabi_dsub>
 8009fa2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009fa6:	4606      	mov	r6, r0
 8009fa8:	460f      	mov	r7, r1
 8009faa:	4620      	mov	r0, r4
 8009fac:	4629      	mov	r1, r5
 8009fae:	f7f6 f96b 	bl	8000288 <__aeabi_dsub>
 8009fb2:	4602      	mov	r2, r0
 8009fb4:	460b      	mov	r3, r1
 8009fb6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009fba:	f7f6 f965 	bl	8000288 <__aeabi_dsub>
 8009fbe:	465a      	mov	r2, fp
 8009fc0:	464b      	mov	r3, r9
 8009fc2:	f7f6 fb19 	bl	80005f8 <__aeabi_dmul>
 8009fc6:	4602      	mov	r2, r0
 8009fc8:	460b      	mov	r3, r1
 8009fca:	4630      	mov	r0, r6
 8009fcc:	4639      	mov	r1, r7
 8009fce:	f7f6 f95b 	bl	8000288 <__aeabi_dsub>
 8009fd2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009fd6:	f7f6 fb0f 	bl	80005f8 <__aeabi_dmul>
 8009fda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009fde:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009fe2:	4610      	mov	r0, r2
 8009fe4:	4619      	mov	r1, r3
 8009fe6:	f7f6 fb07 	bl	80005f8 <__aeabi_dmul>
 8009fea:	a37d      	add	r3, pc, #500	@ (adr r3, 800a1e0 <__ieee754_pow+0x738>)
 8009fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ff0:	4604      	mov	r4, r0
 8009ff2:	460d      	mov	r5, r1
 8009ff4:	f7f6 fb00 	bl	80005f8 <__aeabi_dmul>
 8009ff8:	a37b      	add	r3, pc, #492	@ (adr r3, 800a1e8 <__ieee754_pow+0x740>)
 8009ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ffe:	f7f6 f945 	bl	800028c <__adddf3>
 800a002:	4622      	mov	r2, r4
 800a004:	462b      	mov	r3, r5
 800a006:	f7f6 faf7 	bl	80005f8 <__aeabi_dmul>
 800a00a:	a379      	add	r3, pc, #484	@ (adr r3, 800a1f0 <__ieee754_pow+0x748>)
 800a00c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a010:	f7f6 f93c 	bl	800028c <__adddf3>
 800a014:	4622      	mov	r2, r4
 800a016:	462b      	mov	r3, r5
 800a018:	f7f6 faee 	bl	80005f8 <__aeabi_dmul>
 800a01c:	a376      	add	r3, pc, #472	@ (adr r3, 800a1f8 <__ieee754_pow+0x750>)
 800a01e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a022:	f7f6 f933 	bl	800028c <__adddf3>
 800a026:	4622      	mov	r2, r4
 800a028:	462b      	mov	r3, r5
 800a02a:	f7f6 fae5 	bl	80005f8 <__aeabi_dmul>
 800a02e:	a374      	add	r3, pc, #464	@ (adr r3, 800a200 <__ieee754_pow+0x758>)
 800a030:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a034:	f7f6 f92a 	bl	800028c <__adddf3>
 800a038:	4622      	mov	r2, r4
 800a03a:	462b      	mov	r3, r5
 800a03c:	f7f6 fadc 	bl	80005f8 <__aeabi_dmul>
 800a040:	a371      	add	r3, pc, #452	@ (adr r3, 800a208 <__ieee754_pow+0x760>)
 800a042:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a046:	f7f6 f921 	bl	800028c <__adddf3>
 800a04a:	4622      	mov	r2, r4
 800a04c:	4606      	mov	r6, r0
 800a04e:	460f      	mov	r7, r1
 800a050:	462b      	mov	r3, r5
 800a052:	4620      	mov	r0, r4
 800a054:	4629      	mov	r1, r5
 800a056:	f7f6 facf 	bl	80005f8 <__aeabi_dmul>
 800a05a:	4602      	mov	r2, r0
 800a05c:	460b      	mov	r3, r1
 800a05e:	4630      	mov	r0, r6
 800a060:	4639      	mov	r1, r7
 800a062:	f7f6 fac9 	bl	80005f8 <__aeabi_dmul>
 800a066:	465a      	mov	r2, fp
 800a068:	4604      	mov	r4, r0
 800a06a:	460d      	mov	r5, r1
 800a06c:	464b      	mov	r3, r9
 800a06e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a072:	f7f6 f90b 	bl	800028c <__adddf3>
 800a076:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a07a:	f7f6 fabd 	bl	80005f8 <__aeabi_dmul>
 800a07e:	4622      	mov	r2, r4
 800a080:	462b      	mov	r3, r5
 800a082:	f7f6 f903 	bl	800028c <__adddf3>
 800a086:	465a      	mov	r2, fp
 800a088:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a08c:	464b      	mov	r3, r9
 800a08e:	4658      	mov	r0, fp
 800a090:	4649      	mov	r1, r9
 800a092:	f7f6 fab1 	bl	80005f8 <__aeabi_dmul>
 800a096:	4b6a      	ldr	r3, [pc, #424]	@ (800a240 <__ieee754_pow+0x798>)
 800a098:	2200      	movs	r2, #0
 800a09a:	4606      	mov	r6, r0
 800a09c:	460f      	mov	r7, r1
 800a09e:	f7f6 f8f5 	bl	800028c <__adddf3>
 800a0a2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a0a6:	f7f6 f8f1 	bl	800028c <__adddf3>
 800a0aa:	46d8      	mov	r8, fp
 800a0ac:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800a0b0:	460d      	mov	r5, r1
 800a0b2:	465a      	mov	r2, fp
 800a0b4:	460b      	mov	r3, r1
 800a0b6:	4640      	mov	r0, r8
 800a0b8:	4649      	mov	r1, r9
 800a0ba:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800a0be:	f7f6 fa9b 	bl	80005f8 <__aeabi_dmul>
 800a0c2:	465c      	mov	r4, fp
 800a0c4:	4680      	mov	r8, r0
 800a0c6:	4689      	mov	r9, r1
 800a0c8:	4b5d      	ldr	r3, [pc, #372]	@ (800a240 <__ieee754_pow+0x798>)
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	4620      	mov	r0, r4
 800a0ce:	4629      	mov	r1, r5
 800a0d0:	f7f6 f8da 	bl	8000288 <__aeabi_dsub>
 800a0d4:	4632      	mov	r2, r6
 800a0d6:	463b      	mov	r3, r7
 800a0d8:	f7f6 f8d6 	bl	8000288 <__aeabi_dsub>
 800a0dc:	4602      	mov	r2, r0
 800a0de:	460b      	mov	r3, r1
 800a0e0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a0e4:	f7f6 f8d0 	bl	8000288 <__aeabi_dsub>
 800a0e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a0ec:	f7f6 fa84 	bl	80005f8 <__aeabi_dmul>
 800a0f0:	4622      	mov	r2, r4
 800a0f2:	4606      	mov	r6, r0
 800a0f4:	460f      	mov	r7, r1
 800a0f6:	462b      	mov	r3, r5
 800a0f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a0fc:	f7f6 fa7c 	bl	80005f8 <__aeabi_dmul>
 800a100:	4602      	mov	r2, r0
 800a102:	460b      	mov	r3, r1
 800a104:	4630      	mov	r0, r6
 800a106:	4639      	mov	r1, r7
 800a108:	f7f6 f8c0 	bl	800028c <__adddf3>
 800a10c:	4606      	mov	r6, r0
 800a10e:	460f      	mov	r7, r1
 800a110:	4602      	mov	r2, r0
 800a112:	460b      	mov	r3, r1
 800a114:	4640      	mov	r0, r8
 800a116:	4649      	mov	r1, r9
 800a118:	f7f6 f8b8 	bl	800028c <__adddf3>
 800a11c:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800a120:	a33b      	add	r3, pc, #236	@ (adr r3, 800a210 <__ieee754_pow+0x768>)
 800a122:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a126:	4658      	mov	r0, fp
 800a128:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800a12c:	460d      	mov	r5, r1
 800a12e:	f7f6 fa63 	bl	80005f8 <__aeabi_dmul>
 800a132:	465c      	mov	r4, fp
 800a134:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a138:	4642      	mov	r2, r8
 800a13a:	464b      	mov	r3, r9
 800a13c:	4620      	mov	r0, r4
 800a13e:	4629      	mov	r1, r5
 800a140:	f7f6 f8a2 	bl	8000288 <__aeabi_dsub>
 800a144:	4602      	mov	r2, r0
 800a146:	460b      	mov	r3, r1
 800a148:	4630      	mov	r0, r6
 800a14a:	4639      	mov	r1, r7
 800a14c:	f7f6 f89c 	bl	8000288 <__aeabi_dsub>
 800a150:	a331      	add	r3, pc, #196	@ (adr r3, 800a218 <__ieee754_pow+0x770>)
 800a152:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a156:	f7f6 fa4f 	bl	80005f8 <__aeabi_dmul>
 800a15a:	a331      	add	r3, pc, #196	@ (adr r3, 800a220 <__ieee754_pow+0x778>)
 800a15c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a160:	4606      	mov	r6, r0
 800a162:	460f      	mov	r7, r1
 800a164:	4620      	mov	r0, r4
 800a166:	4629      	mov	r1, r5
 800a168:	f7f6 fa46 	bl	80005f8 <__aeabi_dmul>
 800a16c:	4602      	mov	r2, r0
 800a16e:	460b      	mov	r3, r1
 800a170:	4630      	mov	r0, r6
 800a172:	4639      	mov	r1, r7
 800a174:	f7f6 f88a 	bl	800028c <__adddf3>
 800a178:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a17a:	4b32      	ldr	r3, [pc, #200]	@ (800a244 <__ieee754_pow+0x79c>)
 800a17c:	4413      	add	r3, r2
 800a17e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a182:	f7f6 f883 	bl	800028c <__adddf3>
 800a186:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a18a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a18c:	f7f6 f9ca 	bl	8000524 <__aeabi_i2d>
 800a190:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a192:	4b2d      	ldr	r3, [pc, #180]	@ (800a248 <__ieee754_pow+0x7a0>)
 800a194:	4413      	add	r3, r2
 800a196:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a19a:	4606      	mov	r6, r0
 800a19c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a1a0:	460f      	mov	r7, r1
 800a1a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a1a6:	f7f6 f871 	bl	800028c <__adddf3>
 800a1aa:	4642      	mov	r2, r8
 800a1ac:	464b      	mov	r3, r9
 800a1ae:	f7f6 f86d 	bl	800028c <__adddf3>
 800a1b2:	4632      	mov	r2, r6
 800a1b4:	463b      	mov	r3, r7
 800a1b6:	f7f6 f869 	bl	800028c <__adddf3>
 800a1ba:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800a1be:	4632      	mov	r2, r6
 800a1c0:	463b      	mov	r3, r7
 800a1c2:	4658      	mov	r0, fp
 800a1c4:	460d      	mov	r5, r1
 800a1c6:	f7f6 f85f 	bl	8000288 <__aeabi_dsub>
 800a1ca:	4642      	mov	r2, r8
 800a1cc:	464b      	mov	r3, r9
 800a1ce:	f7f6 f85b 	bl	8000288 <__aeabi_dsub>
 800a1d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a1d6:	f7f6 f857 	bl	8000288 <__aeabi_dsub>
 800a1da:	465c      	mov	r4, fp
 800a1dc:	e036      	b.n	800a24c <__ieee754_pow+0x7a4>
 800a1de:	bf00      	nop
 800a1e0:	4a454eef 	.word	0x4a454eef
 800a1e4:	3fca7e28 	.word	0x3fca7e28
 800a1e8:	93c9db65 	.word	0x93c9db65
 800a1ec:	3fcd864a 	.word	0x3fcd864a
 800a1f0:	a91d4101 	.word	0xa91d4101
 800a1f4:	3fd17460 	.word	0x3fd17460
 800a1f8:	518f264d 	.word	0x518f264d
 800a1fc:	3fd55555 	.word	0x3fd55555
 800a200:	db6fabff 	.word	0xdb6fabff
 800a204:	3fdb6db6 	.word	0x3fdb6db6
 800a208:	33333303 	.word	0x33333303
 800a20c:	3fe33333 	.word	0x3fe33333
 800a210:	e0000000 	.word	0xe0000000
 800a214:	3feec709 	.word	0x3feec709
 800a218:	dc3a03fd 	.word	0xdc3a03fd
 800a21c:	3feec709 	.word	0x3feec709
 800a220:	145b01f5 	.word	0x145b01f5
 800a224:	be3e2fe0 	.word	0xbe3e2fe0
 800a228:	7ff00000 	.word	0x7ff00000
 800a22c:	43400000 	.word	0x43400000
 800a230:	0003988e 	.word	0x0003988e
 800a234:	000bb679 	.word	0x000bb679
 800a238:	0800a9a0 	.word	0x0800a9a0
 800a23c:	3ff00000 	.word	0x3ff00000
 800a240:	40080000 	.word	0x40080000
 800a244:	0800a980 	.word	0x0800a980
 800a248:	0800a990 	.word	0x0800a990
 800a24c:	4602      	mov	r2, r0
 800a24e:	460b      	mov	r3, r1
 800a250:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a254:	e5d6      	b.n	8009e04 <__ieee754_pow+0x35c>
 800a256:	f04f 0a01 	mov.w	sl, #1
 800a25a:	e65e      	b.n	8009f1a <__ieee754_pow+0x472>
 800a25c:	a3b5      	add	r3, pc, #724	@ (adr r3, 800a534 <__ieee754_pow+0xa8c>)
 800a25e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a262:	4630      	mov	r0, r6
 800a264:	4639      	mov	r1, r7
 800a266:	f7f6 f811 	bl	800028c <__adddf3>
 800a26a:	4642      	mov	r2, r8
 800a26c:	e9cd 0100 	strd	r0, r1, [sp]
 800a270:	464b      	mov	r3, r9
 800a272:	4620      	mov	r0, r4
 800a274:	4629      	mov	r1, r5
 800a276:	f7f6 f807 	bl	8000288 <__aeabi_dsub>
 800a27a:	4602      	mov	r2, r0
 800a27c:	460b      	mov	r3, r1
 800a27e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a282:	f7f6 fc49 	bl	8000b18 <__aeabi_dcmpgt>
 800a286:	2800      	cmp	r0, #0
 800a288:	f47f adfe 	bne.w	8009e88 <__ieee754_pow+0x3e0>
 800a28c:	4ba2      	ldr	r3, [pc, #648]	@ (800a518 <__ieee754_pow+0xa70>)
 800a28e:	e022      	b.n	800a2d6 <__ieee754_pow+0x82e>
 800a290:	4ca2      	ldr	r4, [pc, #648]	@ (800a51c <__ieee754_pow+0xa74>)
 800a292:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a296:	42a3      	cmp	r3, r4
 800a298:	d919      	bls.n	800a2ce <__ieee754_pow+0x826>
 800a29a:	4ba1      	ldr	r3, [pc, #644]	@ (800a520 <__ieee754_pow+0xa78>)
 800a29c:	440b      	add	r3, r1
 800a29e:	4303      	orrs	r3, r0
 800a2a0:	d009      	beq.n	800a2b6 <__ieee754_pow+0x80e>
 800a2a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	f7f6 fc17 	bl	8000adc <__aeabi_dcmplt>
 800a2ae:	3800      	subs	r0, #0
 800a2b0:	bf18      	it	ne
 800a2b2:	2001      	movne	r0, #1
 800a2b4:	e512      	b.n	8009cdc <__ieee754_pow+0x234>
 800a2b6:	4642      	mov	r2, r8
 800a2b8:	464b      	mov	r3, r9
 800a2ba:	f7f5 ffe5 	bl	8000288 <__aeabi_dsub>
 800a2be:	4632      	mov	r2, r6
 800a2c0:	463b      	mov	r3, r7
 800a2c2:	f7f6 fc1f 	bl	8000b04 <__aeabi_dcmpge>
 800a2c6:	2800      	cmp	r0, #0
 800a2c8:	d1eb      	bne.n	800a2a2 <__ieee754_pow+0x7fa>
 800a2ca:	4b96      	ldr	r3, [pc, #600]	@ (800a524 <__ieee754_pow+0xa7c>)
 800a2cc:	e003      	b.n	800a2d6 <__ieee754_pow+0x82e>
 800a2ce:	4a96      	ldr	r2, [pc, #600]	@ (800a528 <__ieee754_pow+0xa80>)
 800a2d0:	4293      	cmp	r3, r2
 800a2d2:	f240 80e7 	bls.w	800a4a4 <__ieee754_pow+0x9fc>
 800a2d6:	151b      	asrs	r3, r3, #20
 800a2d8:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 800a2dc:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 800a2e0:	fa4a fa03 	asr.w	sl, sl, r3
 800a2e4:	44da      	add	sl, fp
 800a2e6:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800a2ea:	4890      	ldr	r0, [pc, #576]	@ (800a52c <__ieee754_pow+0xa84>)
 800a2ec:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800a2f0:	4108      	asrs	r0, r1
 800a2f2:	ea00 030a 	and.w	r3, r0, sl
 800a2f6:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800a2fa:	f1c1 0114 	rsb	r1, r1, #20
 800a2fe:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800a302:	fa4a fa01 	asr.w	sl, sl, r1
 800a306:	f1bb 0f00 	cmp.w	fp, #0
 800a30a:	4640      	mov	r0, r8
 800a30c:	4649      	mov	r1, r9
 800a30e:	f04f 0200 	mov.w	r2, #0
 800a312:	bfb8      	it	lt
 800a314:	f1ca 0a00 	rsblt	sl, sl, #0
 800a318:	f7f5 ffb6 	bl	8000288 <__aeabi_dsub>
 800a31c:	4680      	mov	r8, r0
 800a31e:	4689      	mov	r9, r1
 800a320:	4632      	mov	r2, r6
 800a322:	463b      	mov	r3, r7
 800a324:	4640      	mov	r0, r8
 800a326:	4649      	mov	r1, r9
 800a328:	f7f5 ffb0 	bl	800028c <__adddf3>
 800a32c:	2400      	movs	r4, #0
 800a32e:	a36a      	add	r3, pc, #424	@ (adr r3, 800a4d8 <__ieee754_pow+0xa30>)
 800a330:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a334:	4620      	mov	r0, r4
 800a336:	460d      	mov	r5, r1
 800a338:	f7f6 f95e 	bl	80005f8 <__aeabi_dmul>
 800a33c:	4642      	mov	r2, r8
 800a33e:	e9cd 0100 	strd	r0, r1, [sp]
 800a342:	464b      	mov	r3, r9
 800a344:	4620      	mov	r0, r4
 800a346:	4629      	mov	r1, r5
 800a348:	f7f5 ff9e 	bl	8000288 <__aeabi_dsub>
 800a34c:	4602      	mov	r2, r0
 800a34e:	460b      	mov	r3, r1
 800a350:	4630      	mov	r0, r6
 800a352:	4639      	mov	r1, r7
 800a354:	f7f5 ff98 	bl	8000288 <__aeabi_dsub>
 800a358:	a361      	add	r3, pc, #388	@ (adr r3, 800a4e0 <__ieee754_pow+0xa38>)
 800a35a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a35e:	f7f6 f94b 	bl	80005f8 <__aeabi_dmul>
 800a362:	a361      	add	r3, pc, #388	@ (adr r3, 800a4e8 <__ieee754_pow+0xa40>)
 800a364:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a368:	4680      	mov	r8, r0
 800a36a:	4689      	mov	r9, r1
 800a36c:	4620      	mov	r0, r4
 800a36e:	4629      	mov	r1, r5
 800a370:	f7f6 f942 	bl	80005f8 <__aeabi_dmul>
 800a374:	4602      	mov	r2, r0
 800a376:	460b      	mov	r3, r1
 800a378:	4640      	mov	r0, r8
 800a37a:	4649      	mov	r1, r9
 800a37c:	f7f5 ff86 	bl	800028c <__adddf3>
 800a380:	4604      	mov	r4, r0
 800a382:	460d      	mov	r5, r1
 800a384:	4602      	mov	r2, r0
 800a386:	460b      	mov	r3, r1
 800a388:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a38c:	f7f5 ff7e 	bl	800028c <__adddf3>
 800a390:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a394:	4680      	mov	r8, r0
 800a396:	4689      	mov	r9, r1
 800a398:	f7f5 ff76 	bl	8000288 <__aeabi_dsub>
 800a39c:	4602      	mov	r2, r0
 800a39e:	460b      	mov	r3, r1
 800a3a0:	4620      	mov	r0, r4
 800a3a2:	4629      	mov	r1, r5
 800a3a4:	f7f5 ff70 	bl	8000288 <__aeabi_dsub>
 800a3a8:	4642      	mov	r2, r8
 800a3aa:	4606      	mov	r6, r0
 800a3ac:	460f      	mov	r7, r1
 800a3ae:	464b      	mov	r3, r9
 800a3b0:	4640      	mov	r0, r8
 800a3b2:	4649      	mov	r1, r9
 800a3b4:	f7f6 f920 	bl	80005f8 <__aeabi_dmul>
 800a3b8:	a34d      	add	r3, pc, #308	@ (adr r3, 800a4f0 <__ieee754_pow+0xa48>)
 800a3ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3be:	4604      	mov	r4, r0
 800a3c0:	460d      	mov	r5, r1
 800a3c2:	f7f6 f919 	bl	80005f8 <__aeabi_dmul>
 800a3c6:	a34c      	add	r3, pc, #304	@ (adr r3, 800a4f8 <__ieee754_pow+0xa50>)
 800a3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3cc:	f7f5 ff5c 	bl	8000288 <__aeabi_dsub>
 800a3d0:	4622      	mov	r2, r4
 800a3d2:	462b      	mov	r3, r5
 800a3d4:	f7f6 f910 	bl	80005f8 <__aeabi_dmul>
 800a3d8:	a349      	add	r3, pc, #292	@ (adr r3, 800a500 <__ieee754_pow+0xa58>)
 800a3da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3de:	f7f5 ff55 	bl	800028c <__adddf3>
 800a3e2:	4622      	mov	r2, r4
 800a3e4:	462b      	mov	r3, r5
 800a3e6:	f7f6 f907 	bl	80005f8 <__aeabi_dmul>
 800a3ea:	a347      	add	r3, pc, #284	@ (adr r3, 800a508 <__ieee754_pow+0xa60>)
 800a3ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3f0:	f7f5 ff4a 	bl	8000288 <__aeabi_dsub>
 800a3f4:	4622      	mov	r2, r4
 800a3f6:	462b      	mov	r3, r5
 800a3f8:	f7f6 f8fe 	bl	80005f8 <__aeabi_dmul>
 800a3fc:	a344      	add	r3, pc, #272	@ (adr r3, 800a510 <__ieee754_pow+0xa68>)
 800a3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a402:	f7f5 ff43 	bl	800028c <__adddf3>
 800a406:	4622      	mov	r2, r4
 800a408:	462b      	mov	r3, r5
 800a40a:	f7f6 f8f5 	bl	80005f8 <__aeabi_dmul>
 800a40e:	4602      	mov	r2, r0
 800a410:	460b      	mov	r3, r1
 800a412:	4640      	mov	r0, r8
 800a414:	4649      	mov	r1, r9
 800a416:	f7f5 ff37 	bl	8000288 <__aeabi_dsub>
 800a41a:	4604      	mov	r4, r0
 800a41c:	460d      	mov	r5, r1
 800a41e:	4602      	mov	r2, r0
 800a420:	460b      	mov	r3, r1
 800a422:	4640      	mov	r0, r8
 800a424:	4649      	mov	r1, r9
 800a426:	f7f6 f8e7 	bl	80005f8 <__aeabi_dmul>
 800a42a:	2200      	movs	r2, #0
 800a42c:	e9cd 0100 	strd	r0, r1, [sp]
 800a430:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a434:	4620      	mov	r0, r4
 800a436:	4629      	mov	r1, r5
 800a438:	f7f5 ff26 	bl	8000288 <__aeabi_dsub>
 800a43c:	4602      	mov	r2, r0
 800a43e:	460b      	mov	r3, r1
 800a440:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a444:	f7f6 fa02 	bl	800084c <__aeabi_ddiv>
 800a448:	4632      	mov	r2, r6
 800a44a:	4604      	mov	r4, r0
 800a44c:	460d      	mov	r5, r1
 800a44e:	463b      	mov	r3, r7
 800a450:	4640      	mov	r0, r8
 800a452:	4649      	mov	r1, r9
 800a454:	f7f6 f8d0 	bl	80005f8 <__aeabi_dmul>
 800a458:	4632      	mov	r2, r6
 800a45a:	463b      	mov	r3, r7
 800a45c:	f7f5 ff16 	bl	800028c <__adddf3>
 800a460:	4602      	mov	r2, r0
 800a462:	460b      	mov	r3, r1
 800a464:	4620      	mov	r0, r4
 800a466:	4629      	mov	r1, r5
 800a468:	f7f5 ff0e 	bl	8000288 <__aeabi_dsub>
 800a46c:	4642      	mov	r2, r8
 800a46e:	464b      	mov	r3, r9
 800a470:	f7f5 ff0a 	bl	8000288 <__aeabi_dsub>
 800a474:	460b      	mov	r3, r1
 800a476:	4602      	mov	r2, r0
 800a478:	492d      	ldr	r1, [pc, #180]	@ (800a530 <__ieee754_pow+0xa88>)
 800a47a:	2000      	movs	r0, #0
 800a47c:	f7f5 ff04 	bl	8000288 <__aeabi_dsub>
 800a480:	ec41 0b10 	vmov	d0, r0, r1
 800a484:	ee10 3a90 	vmov	r3, s1
 800a488:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800a48c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a490:	da0b      	bge.n	800a4aa <__ieee754_pow+0xa02>
 800a492:	4650      	mov	r0, sl
 800a494:	f000 f898 	bl	800a5c8 <scalbn>
 800a498:	ec51 0b10 	vmov	r0, r1, d0
 800a49c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a4a0:	f7ff bb6d 	b.w	8009b7e <__ieee754_pow+0xd6>
 800a4a4:	f8dd a010 	ldr.w	sl, [sp, #16]
 800a4a8:	e73a      	b.n	800a320 <__ieee754_pow+0x878>
 800a4aa:	ec51 0b10 	vmov	r0, r1, d0
 800a4ae:	4619      	mov	r1, r3
 800a4b0:	e7f4      	b.n	800a49c <__ieee754_pow+0x9f4>
 800a4b2:	491f      	ldr	r1, [pc, #124]	@ (800a530 <__ieee754_pow+0xa88>)
 800a4b4:	2000      	movs	r0, #0
 800a4b6:	f7ff bb14 	b.w	8009ae2 <__ieee754_pow+0x3a>
 800a4ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a4be:	f7ff bb10 	b.w	8009ae2 <__ieee754_pow+0x3a>
 800a4c2:	4630      	mov	r0, r6
 800a4c4:	4639      	mov	r1, r7
 800a4c6:	f7ff bb0c 	b.w	8009ae2 <__ieee754_pow+0x3a>
 800a4ca:	460c      	mov	r4, r1
 800a4cc:	f7ff bb69 	b.w	8009ba2 <__ieee754_pow+0xfa>
 800a4d0:	2400      	movs	r4, #0
 800a4d2:	f7ff bb4b 	b.w	8009b6c <__ieee754_pow+0xc4>
 800a4d6:	bf00      	nop
 800a4d8:	00000000 	.word	0x00000000
 800a4dc:	3fe62e43 	.word	0x3fe62e43
 800a4e0:	fefa39ef 	.word	0xfefa39ef
 800a4e4:	3fe62e42 	.word	0x3fe62e42
 800a4e8:	0ca86c39 	.word	0x0ca86c39
 800a4ec:	be205c61 	.word	0xbe205c61
 800a4f0:	72bea4d0 	.word	0x72bea4d0
 800a4f4:	3e663769 	.word	0x3e663769
 800a4f8:	c5d26bf1 	.word	0xc5d26bf1
 800a4fc:	3ebbbd41 	.word	0x3ebbbd41
 800a500:	af25de2c 	.word	0xaf25de2c
 800a504:	3f11566a 	.word	0x3f11566a
 800a508:	16bebd93 	.word	0x16bebd93
 800a50c:	3f66c16c 	.word	0x3f66c16c
 800a510:	5555553e 	.word	0x5555553e
 800a514:	3fc55555 	.word	0x3fc55555
 800a518:	40900000 	.word	0x40900000
 800a51c:	4090cbff 	.word	0x4090cbff
 800a520:	3f6f3400 	.word	0x3f6f3400
 800a524:	4090cc00 	.word	0x4090cc00
 800a528:	3fe00000 	.word	0x3fe00000
 800a52c:	fff00000 	.word	0xfff00000
 800a530:	3ff00000 	.word	0x3ff00000
 800a534:	652b82fe 	.word	0x652b82fe
 800a538:	3c971547 	.word	0x3c971547

0800a53c <with_errno>:
 800a53c:	b510      	push	{r4, lr}
 800a53e:	ed2d 8b02 	vpush	{d8}
 800a542:	eeb0 8a40 	vmov.f32	s16, s0
 800a546:	eef0 8a60 	vmov.f32	s17, s1
 800a54a:	4604      	mov	r4, r0
 800a54c:	f7fe fd5a 	bl	8009004 <__errno>
 800a550:	eeb0 0a48 	vmov.f32	s0, s16
 800a554:	eef0 0a68 	vmov.f32	s1, s17
 800a558:	ecbd 8b02 	vpop	{d8}
 800a55c:	6004      	str	r4, [r0, #0]
 800a55e:	bd10      	pop	{r4, pc}

0800a560 <xflow>:
 800a560:	4603      	mov	r3, r0
 800a562:	b507      	push	{r0, r1, r2, lr}
 800a564:	ec51 0b10 	vmov	r0, r1, d0
 800a568:	b183      	cbz	r3, 800a58c <xflow+0x2c>
 800a56a:	4602      	mov	r2, r0
 800a56c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a570:	e9cd 2300 	strd	r2, r3, [sp]
 800a574:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a578:	f7f6 f83e 	bl	80005f8 <__aeabi_dmul>
 800a57c:	ec41 0b10 	vmov	d0, r0, r1
 800a580:	2022      	movs	r0, #34	@ 0x22
 800a582:	b003      	add	sp, #12
 800a584:	f85d eb04 	ldr.w	lr, [sp], #4
 800a588:	f7ff bfd8 	b.w	800a53c <with_errno>
 800a58c:	4602      	mov	r2, r0
 800a58e:	460b      	mov	r3, r1
 800a590:	e7ee      	b.n	800a570 <xflow+0x10>
 800a592:	0000      	movs	r0, r0
 800a594:	0000      	movs	r0, r0
	...

0800a598 <__math_uflow>:
 800a598:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a5a0 <__math_uflow+0x8>
 800a59c:	f7ff bfe0 	b.w	800a560 <xflow>
 800a5a0:	00000000 	.word	0x00000000
 800a5a4:	10000000 	.word	0x10000000

0800a5a8 <__math_oflow>:
 800a5a8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a5b0 <__math_oflow+0x8>
 800a5ac:	f7ff bfd8 	b.w	800a560 <xflow>
 800a5b0:	00000000 	.word	0x00000000
 800a5b4:	70000000 	.word	0x70000000

0800a5b8 <fabs>:
 800a5b8:	ec51 0b10 	vmov	r0, r1, d0
 800a5bc:	4602      	mov	r2, r0
 800a5be:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a5c2:	ec43 2b10 	vmov	d0, r2, r3
 800a5c6:	4770      	bx	lr

0800a5c8 <scalbn>:
 800a5c8:	b570      	push	{r4, r5, r6, lr}
 800a5ca:	ec55 4b10 	vmov	r4, r5, d0
 800a5ce:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800a5d2:	4606      	mov	r6, r0
 800a5d4:	462b      	mov	r3, r5
 800a5d6:	b991      	cbnz	r1, 800a5fe <scalbn+0x36>
 800a5d8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800a5dc:	4323      	orrs	r3, r4
 800a5de:	d03b      	beq.n	800a658 <scalbn+0x90>
 800a5e0:	4b33      	ldr	r3, [pc, #204]	@ (800a6b0 <scalbn+0xe8>)
 800a5e2:	4620      	mov	r0, r4
 800a5e4:	4629      	mov	r1, r5
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	f7f6 f806 	bl	80005f8 <__aeabi_dmul>
 800a5ec:	4b31      	ldr	r3, [pc, #196]	@ (800a6b4 <scalbn+0xec>)
 800a5ee:	429e      	cmp	r6, r3
 800a5f0:	4604      	mov	r4, r0
 800a5f2:	460d      	mov	r5, r1
 800a5f4:	da0f      	bge.n	800a616 <scalbn+0x4e>
 800a5f6:	a326      	add	r3, pc, #152	@ (adr r3, 800a690 <scalbn+0xc8>)
 800a5f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5fc:	e01e      	b.n	800a63c <scalbn+0x74>
 800a5fe:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800a602:	4291      	cmp	r1, r2
 800a604:	d10b      	bne.n	800a61e <scalbn+0x56>
 800a606:	4622      	mov	r2, r4
 800a608:	4620      	mov	r0, r4
 800a60a:	4629      	mov	r1, r5
 800a60c:	f7f5 fe3e 	bl	800028c <__adddf3>
 800a610:	4604      	mov	r4, r0
 800a612:	460d      	mov	r5, r1
 800a614:	e020      	b.n	800a658 <scalbn+0x90>
 800a616:	460b      	mov	r3, r1
 800a618:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800a61c:	3936      	subs	r1, #54	@ 0x36
 800a61e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800a622:	4296      	cmp	r6, r2
 800a624:	dd0d      	ble.n	800a642 <scalbn+0x7a>
 800a626:	2d00      	cmp	r5, #0
 800a628:	a11b      	add	r1, pc, #108	@ (adr r1, 800a698 <scalbn+0xd0>)
 800a62a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a62e:	da02      	bge.n	800a636 <scalbn+0x6e>
 800a630:	a11b      	add	r1, pc, #108	@ (adr r1, 800a6a0 <scalbn+0xd8>)
 800a632:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a636:	a318      	add	r3, pc, #96	@ (adr r3, 800a698 <scalbn+0xd0>)
 800a638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a63c:	f7f5 ffdc 	bl	80005f8 <__aeabi_dmul>
 800a640:	e7e6      	b.n	800a610 <scalbn+0x48>
 800a642:	1872      	adds	r2, r6, r1
 800a644:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800a648:	428a      	cmp	r2, r1
 800a64a:	dcec      	bgt.n	800a626 <scalbn+0x5e>
 800a64c:	2a00      	cmp	r2, #0
 800a64e:	dd06      	ble.n	800a65e <scalbn+0x96>
 800a650:	f36f 531e 	bfc	r3, #20, #11
 800a654:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a658:	ec45 4b10 	vmov	d0, r4, r5
 800a65c:	bd70      	pop	{r4, r5, r6, pc}
 800a65e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800a662:	da08      	bge.n	800a676 <scalbn+0xae>
 800a664:	2d00      	cmp	r5, #0
 800a666:	a10a      	add	r1, pc, #40	@ (adr r1, 800a690 <scalbn+0xc8>)
 800a668:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a66c:	dac3      	bge.n	800a5f6 <scalbn+0x2e>
 800a66e:	a10e      	add	r1, pc, #56	@ (adr r1, 800a6a8 <scalbn+0xe0>)
 800a670:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a674:	e7bf      	b.n	800a5f6 <scalbn+0x2e>
 800a676:	3236      	adds	r2, #54	@ 0x36
 800a678:	f36f 531e 	bfc	r3, #20, #11
 800a67c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a680:	4620      	mov	r0, r4
 800a682:	4b0d      	ldr	r3, [pc, #52]	@ (800a6b8 <scalbn+0xf0>)
 800a684:	4629      	mov	r1, r5
 800a686:	2200      	movs	r2, #0
 800a688:	e7d8      	b.n	800a63c <scalbn+0x74>
 800a68a:	bf00      	nop
 800a68c:	f3af 8000 	nop.w
 800a690:	c2f8f359 	.word	0xc2f8f359
 800a694:	01a56e1f 	.word	0x01a56e1f
 800a698:	8800759c 	.word	0x8800759c
 800a69c:	7e37e43c 	.word	0x7e37e43c
 800a6a0:	8800759c 	.word	0x8800759c
 800a6a4:	fe37e43c 	.word	0xfe37e43c
 800a6a8:	c2f8f359 	.word	0xc2f8f359
 800a6ac:	81a56e1f 	.word	0x81a56e1f
 800a6b0:	43500000 	.word	0x43500000
 800a6b4:	ffff3cb0 	.word	0xffff3cb0
 800a6b8:	3c900000 	.word	0x3c900000

0800a6bc <__ieee754_sqrt>:
 800a6bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6c0:	4a66      	ldr	r2, [pc, #408]	@ (800a85c <__ieee754_sqrt+0x1a0>)
 800a6c2:	ec55 4b10 	vmov	r4, r5, d0
 800a6c6:	43aa      	bics	r2, r5
 800a6c8:	462b      	mov	r3, r5
 800a6ca:	4621      	mov	r1, r4
 800a6cc:	d110      	bne.n	800a6f0 <__ieee754_sqrt+0x34>
 800a6ce:	4622      	mov	r2, r4
 800a6d0:	4620      	mov	r0, r4
 800a6d2:	4629      	mov	r1, r5
 800a6d4:	f7f5 ff90 	bl	80005f8 <__aeabi_dmul>
 800a6d8:	4602      	mov	r2, r0
 800a6da:	460b      	mov	r3, r1
 800a6dc:	4620      	mov	r0, r4
 800a6de:	4629      	mov	r1, r5
 800a6e0:	f7f5 fdd4 	bl	800028c <__adddf3>
 800a6e4:	4604      	mov	r4, r0
 800a6e6:	460d      	mov	r5, r1
 800a6e8:	ec45 4b10 	vmov	d0, r4, r5
 800a6ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6f0:	2d00      	cmp	r5, #0
 800a6f2:	dc0e      	bgt.n	800a712 <__ieee754_sqrt+0x56>
 800a6f4:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800a6f8:	4322      	orrs	r2, r4
 800a6fa:	d0f5      	beq.n	800a6e8 <__ieee754_sqrt+0x2c>
 800a6fc:	b19d      	cbz	r5, 800a726 <__ieee754_sqrt+0x6a>
 800a6fe:	4622      	mov	r2, r4
 800a700:	4620      	mov	r0, r4
 800a702:	4629      	mov	r1, r5
 800a704:	f7f5 fdc0 	bl	8000288 <__aeabi_dsub>
 800a708:	4602      	mov	r2, r0
 800a70a:	460b      	mov	r3, r1
 800a70c:	f7f6 f89e 	bl	800084c <__aeabi_ddiv>
 800a710:	e7e8      	b.n	800a6e4 <__ieee754_sqrt+0x28>
 800a712:	152a      	asrs	r2, r5, #20
 800a714:	d115      	bne.n	800a742 <__ieee754_sqrt+0x86>
 800a716:	2000      	movs	r0, #0
 800a718:	e009      	b.n	800a72e <__ieee754_sqrt+0x72>
 800a71a:	0acb      	lsrs	r3, r1, #11
 800a71c:	3a15      	subs	r2, #21
 800a71e:	0549      	lsls	r1, r1, #21
 800a720:	2b00      	cmp	r3, #0
 800a722:	d0fa      	beq.n	800a71a <__ieee754_sqrt+0x5e>
 800a724:	e7f7      	b.n	800a716 <__ieee754_sqrt+0x5a>
 800a726:	462a      	mov	r2, r5
 800a728:	e7fa      	b.n	800a720 <__ieee754_sqrt+0x64>
 800a72a:	005b      	lsls	r3, r3, #1
 800a72c:	3001      	adds	r0, #1
 800a72e:	02dc      	lsls	r4, r3, #11
 800a730:	d5fb      	bpl.n	800a72a <__ieee754_sqrt+0x6e>
 800a732:	1e44      	subs	r4, r0, #1
 800a734:	1b12      	subs	r2, r2, r4
 800a736:	f1c0 0420 	rsb	r4, r0, #32
 800a73a:	fa21 f404 	lsr.w	r4, r1, r4
 800a73e:	4323      	orrs	r3, r4
 800a740:	4081      	lsls	r1, r0
 800a742:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a746:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800a74a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a74e:	07d2      	lsls	r2, r2, #31
 800a750:	bf5c      	itt	pl
 800a752:	005b      	lslpl	r3, r3, #1
 800a754:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800a758:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a75c:	bf58      	it	pl
 800a75e:	0049      	lslpl	r1, r1, #1
 800a760:	2600      	movs	r6, #0
 800a762:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800a766:	107f      	asrs	r7, r7, #1
 800a768:	0049      	lsls	r1, r1, #1
 800a76a:	2016      	movs	r0, #22
 800a76c:	4632      	mov	r2, r6
 800a76e:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800a772:	1915      	adds	r5, r2, r4
 800a774:	429d      	cmp	r5, r3
 800a776:	bfde      	ittt	le
 800a778:	192a      	addle	r2, r5, r4
 800a77a:	1b5b      	suble	r3, r3, r5
 800a77c:	1936      	addle	r6, r6, r4
 800a77e:	0fcd      	lsrs	r5, r1, #31
 800a780:	3801      	subs	r0, #1
 800a782:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800a786:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a78a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800a78e:	d1f0      	bne.n	800a772 <__ieee754_sqrt+0xb6>
 800a790:	4605      	mov	r5, r0
 800a792:	2420      	movs	r4, #32
 800a794:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800a798:	4293      	cmp	r3, r2
 800a79a:	eb0c 0e00 	add.w	lr, ip, r0
 800a79e:	dc02      	bgt.n	800a7a6 <__ieee754_sqrt+0xea>
 800a7a0:	d113      	bne.n	800a7ca <__ieee754_sqrt+0x10e>
 800a7a2:	458e      	cmp	lr, r1
 800a7a4:	d811      	bhi.n	800a7ca <__ieee754_sqrt+0x10e>
 800a7a6:	f1be 0f00 	cmp.w	lr, #0
 800a7aa:	eb0e 000c 	add.w	r0, lr, ip
 800a7ae:	da3f      	bge.n	800a830 <__ieee754_sqrt+0x174>
 800a7b0:	2800      	cmp	r0, #0
 800a7b2:	db3d      	blt.n	800a830 <__ieee754_sqrt+0x174>
 800a7b4:	f102 0801 	add.w	r8, r2, #1
 800a7b8:	1a9b      	subs	r3, r3, r2
 800a7ba:	458e      	cmp	lr, r1
 800a7bc:	bf88      	it	hi
 800a7be:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 800a7c2:	eba1 010e 	sub.w	r1, r1, lr
 800a7c6:	4465      	add	r5, ip
 800a7c8:	4642      	mov	r2, r8
 800a7ca:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800a7ce:	3c01      	subs	r4, #1
 800a7d0:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800a7d4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a7d8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800a7dc:	d1dc      	bne.n	800a798 <__ieee754_sqrt+0xdc>
 800a7de:	4319      	orrs	r1, r3
 800a7e0:	d01b      	beq.n	800a81a <__ieee754_sqrt+0x15e>
 800a7e2:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 800a860 <__ieee754_sqrt+0x1a4>
 800a7e6:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 800a864 <__ieee754_sqrt+0x1a8>
 800a7ea:	e9da 0100 	ldrd	r0, r1, [sl]
 800a7ee:	e9db 2300 	ldrd	r2, r3, [fp]
 800a7f2:	f7f5 fd49 	bl	8000288 <__aeabi_dsub>
 800a7f6:	e9da 8900 	ldrd	r8, r9, [sl]
 800a7fa:	4602      	mov	r2, r0
 800a7fc:	460b      	mov	r3, r1
 800a7fe:	4640      	mov	r0, r8
 800a800:	4649      	mov	r1, r9
 800a802:	f7f6 f975 	bl	8000af0 <__aeabi_dcmple>
 800a806:	b140      	cbz	r0, 800a81a <__ieee754_sqrt+0x15e>
 800a808:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 800a80c:	e9da 0100 	ldrd	r0, r1, [sl]
 800a810:	e9db 2300 	ldrd	r2, r3, [fp]
 800a814:	d10e      	bne.n	800a834 <__ieee754_sqrt+0x178>
 800a816:	3601      	adds	r6, #1
 800a818:	4625      	mov	r5, r4
 800a81a:	1073      	asrs	r3, r6, #1
 800a81c:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 800a820:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 800a824:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 800a828:	086b      	lsrs	r3, r5, #1
 800a82a:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 800a82e:	e759      	b.n	800a6e4 <__ieee754_sqrt+0x28>
 800a830:	4690      	mov	r8, r2
 800a832:	e7c1      	b.n	800a7b8 <__ieee754_sqrt+0xfc>
 800a834:	f7f5 fd2a 	bl	800028c <__adddf3>
 800a838:	e9da 8900 	ldrd	r8, r9, [sl]
 800a83c:	4602      	mov	r2, r0
 800a83e:	460b      	mov	r3, r1
 800a840:	4640      	mov	r0, r8
 800a842:	4649      	mov	r1, r9
 800a844:	f7f6 f94a 	bl	8000adc <__aeabi_dcmplt>
 800a848:	b120      	cbz	r0, 800a854 <__ieee754_sqrt+0x198>
 800a84a:	1cab      	adds	r3, r5, #2
 800a84c:	bf08      	it	eq
 800a84e:	3601      	addeq	r6, #1
 800a850:	3502      	adds	r5, #2
 800a852:	e7e2      	b.n	800a81a <__ieee754_sqrt+0x15e>
 800a854:	1c6b      	adds	r3, r5, #1
 800a856:	f023 0501 	bic.w	r5, r3, #1
 800a85a:	e7de      	b.n	800a81a <__ieee754_sqrt+0x15e>
 800a85c:	7ff00000 	.word	0x7ff00000
 800a860:	0800a9b8 	.word	0x0800a9b8
 800a864:	0800a9b0 	.word	0x0800a9b0

0800a868 <_init>:
 800a868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a86a:	bf00      	nop
 800a86c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a86e:	bc08      	pop	{r3}
 800a870:	469e      	mov	lr, r3
 800a872:	4770      	bx	lr

0800a874 <_fini>:
 800a874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a876:	bf00      	nop
 800a878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a87a:	bc08      	pop	{r3}
 800a87c:	469e      	mov	lr, r3
 800a87e:	4770      	bx	lr
