
MST-FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009314  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  080094b4  080094b4  0000a4b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095b0  080095b0  0000b060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080095b0  080095b0  0000a5b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080095b8  080095b8  0000b060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080095b8  080095b8  0000a5b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080095bc  080095bc  0000a5bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080095c0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004dd4  20000060  08009620  0000b060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004e34  08009620  0000be34  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a65d  00000000  00000000  0000b090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003aae  00000000  00000000  000256ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015b8  00000000  00000000  000291a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010ea  00000000  00000000  0002a758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019423  00000000  00000000  0002b842  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017cde  00000000  00000000  00044c65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009971c  00000000  00000000  0005c943  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f605f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060c0  00000000  00000000  000f60a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  000fc164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800949c 	.word	0x0800949c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	0800949c 	.word	0x0800949c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <prvMSTSetupUSClock>:

#if(TESTING_STM32 == 1)
/*
 * Timer reference given from user and used by MST to count nanoseconds
 */
static float prvMSTSetupUSClock() {
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
	//set prescaler equal to MHz of clock
	//we have that f_step = 1Mhz and Tstep = 1us, this way we can count us
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80005b0:	4b0a      	ldr	r3, [pc, #40]	@ (80005dc <prvMSTSetupUSClock+0x30>)
 80005b2:	68db      	ldr	r3, [r3, #12]
 80005b4:	4a09      	ldr	r2, [pc, #36]	@ (80005dc <prvMSTSetupUSClock+0x30>)
 80005b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80005ba:	60d3      	str	r3, [r2, #12]
	DWT->CYCCNT = 0;
 80005bc:	4b08      	ldr	r3, [pc, #32]	@ (80005e0 <prvMSTSetupUSClock+0x34>)
 80005be:	2200      	movs	r2, #0
 80005c0:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80005c2:	4b07      	ldr	r3, [pc, #28]	@ (80005e0 <prvMSTSetupUSClock+0x34>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4a06      	ldr	r2, [pc, #24]	@ (80005e0 <prvMSTSetupUSClock+0x34>)
 80005c8:	f043 0301 	orr.w	r3, r3, #1
 80005cc:	6013      	str	r3, [r2, #0]
}
 80005ce:	bf00      	nop
 80005d0:	eeb0 0a67 	vmov.f32	s0, s15
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr
 80005dc:	e000edf0 	.word	0xe000edf0
 80005e0:	e0001000 	.word	0xe0001000

080005e4 <prvMSTGetUS>:

static uint32_t prvMSTGetUS() {
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
	uint32_t outUS = (DWT->CYCCNT / (24));
 80005ea:	4b07      	ldr	r3, [pc, #28]	@ (8000608 <prvMSTGetUS+0x24>)
 80005ec:	685b      	ldr	r3, [r3, #4]
 80005ee:	4a07      	ldr	r2, [pc, #28]	@ (800060c <prvMSTGetUS+0x28>)
 80005f0:	fba2 2303 	umull	r2, r3, r2, r3
 80005f4:	091b      	lsrs	r3, r3, #4
 80005f6:	607b      	str	r3, [r7, #4]
	return outUS;
 80005f8:	687b      	ldr	r3, [r7, #4]
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	370c      	adds	r7, #12
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	e0001000 	.word	0xe0001000
 800060c:	aaaaaaab 	.word	0xaaaaaaab

08000610 <prvPeriodicTaskCreate>:
#if(mst_schedSCHEDULING_POLICY == mst_schedSCHEDULING_EDF)
static BaseType_t prvAsmissionControlEDF(extTCB_t *);
float prvPeriodicTasksDensity = 0;
#endif

static BaseType_t prvPeriodicTaskCreate(extTCB_t *xFromTCB) {
 8000610:	b590      	push	{r4, r7, lr}
 8000612:	b089      	sub	sp, #36	@ 0x24
 8000614:	af02      	add	r7, sp, #8
 8000616:	6078      	str	r0, [r7, #4]

	if (xFromTCB->pxCreatedTask == &SporadicServerHandle) {
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800061c:	4a3b      	ldr	r2, [pc, #236]	@ (800070c <prvPeriodicTaskCreate+0xfc>)
 800061e:	4293      	cmp	r3, r2
 8000620:	d06f      	beq.n	8000702 <prvPeriodicTaskCreate+0xf2>
#endif
	} else {
		/*
		 Generic periodic task
		 */
		if (xTaskCreate(prvMSTPeriodicGenericJob, xFromTCB->pcName,
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	6999      	ldr	r1, [r3, #24]
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	8b98      	ldrh	r0, [r3, #28]
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	6a1c      	ldr	r4, [r3, #32]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000632:	687a      	ldr	r2, [r7, #4]
 8000634:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8000636:	9201      	str	r2, [sp, #4]
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	4623      	mov	r3, r4
 800063c:	4602      	mov	r2, r0
 800063e:	4834      	ldr	r0, [pc, #208]	@ (8000710 <prvPeriodicTaskCreate+0x100>)
 8000640:	f005 fc7a 	bl	8005f38 <xTaskCreate>
 8000644:	4603      	mov	r3, r0
 8000646:	2b01      	cmp	r3, #1
 8000648:	d159      	bne.n	80006fe <prvPeriodicTaskCreate+0xee>
				xFromTCB->usStackDepth, xFromTCB->pvParameters,
				xFromTCB->uxPriority, xFromTCB->pxCreatedTask) == pdPASS) {
#if (mst_schedSCHEDULING_POLICY == mst_schedSCHEDULING_EDF)
			float add = ((float)xFromTCB->xTaskWCET) / (float)(xFromTCB->xTaskPeriod);
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800064e:	ee07 3a90 	vmov	s15, r3
 8000652:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065a:	ee07 3a90 	vmov	s15, r3
 800065e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000662:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000666:	edc7 7a05 	vstr	s15, [r7, #20]
			taskENTER_CRITICAL();
 800066a:	f007 fd75 	bl	8008158 <vPortEnterCritical>
			prvPeriodicTasksDensity += add;
 800066e:	4b29      	ldr	r3, [pc, #164]	@ (8000714 <prvPeriodicTaskCreate+0x104>)
 8000670:	ed93 7a00 	vldr	s14, [r3]
 8000674:	edd7 7a05 	vldr	s15, [r7, #20]
 8000678:	ee77 7a27 	vadd.f32	s15, s14, s15
 800067c:	4b25      	ldr	r3, [pc, #148]	@ (8000714 <prvPeriodicTaskCreate+0x104>)
 800067e:	edc3 7a00 	vstr	s15, [r3]
			taskEXIT_CRITICAL();
 8000682:	f007 fd9b 	bl	80081bc <vPortExitCritical>
			/*
			 Create the timer,
			 Handle the specific semaphore for the callback
			 */
			TimerHandle_t xTimer = xTimerCreate("generic periodic timer",
					pdMS_TO_TICKS(xFromTCB->xTaskPhase + xFromTCB->xTaskPeriod),
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068e:	4413      	add	r3, r2
 8000690:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000694:	fb02 f303 	mul.w	r3, r2, r3
			TimerHandle_t xTimer = xTimerCreate("generic periodic timer",
 8000698:	4a1f      	ldr	r2, [pc, #124]	@ (8000718 <prvPeriodicTaskCreate+0x108>)
 800069a:	fba2 2303 	umull	r2, r3, r2, r3
 800069e:	0999      	lsrs	r1, r3, #6
					pdTRUE, (void*) (xFromTCB->pxCreatedTask),
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
			TimerHandle_t xTimer = xTimerCreate("generic periodic timer",
 80006a4:	4a1d      	ldr	r2, [pc, #116]	@ (800071c <prvPeriodicTaskCreate+0x10c>)
 80006a6:	9200      	str	r2, [sp, #0]
 80006a8:	2201      	movs	r2, #1
 80006aa:	481d      	ldr	r0, [pc, #116]	@ (8000720 <prvPeriodicTaskCreate+0x110>)
 80006ac:	f007 f896 	bl	80077dc <xTimerCreate>
 80006b0:	6138      	str	r0, [r7, #16]
					prvMSTPeriodicTimerCallback);
			xFromTCB->xTaskSpecificTimer = xTimer;
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	693a      	ldr	r2, [r7, #16]
 80006b6:	661a      	str	r2, [r3, #96]	@ 0x60
			configASSERT(xTimerStart(xTimer, 0) == pdPASS)
 80006b8:	f005 ffd8 	bl	800666c <xTaskGetTickCount>
 80006bc:	4602      	mov	r2, r0
 80006be:	2300      	movs	r3, #0
 80006c0:	9300      	str	r3, [sp, #0]
 80006c2:	2300      	movs	r3, #0
 80006c4:	2101      	movs	r1, #1
 80006c6:	6938      	ldr	r0, [r7, #16]
 80006c8:	f007 f8e6 	bl	8007898 <xTimerGenericCommand>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b01      	cmp	r3, #1
 80006d0:	d00b      	beq.n	80006ea <prvPeriodicTaskCreate+0xda>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80006d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80006d6:	f383 8811 	msr	BASEPRI, r3
 80006da:	f3bf 8f6f 	isb	sy
 80006de:	f3bf 8f4f 	dsb	sy
 80006e2:	60fb      	str	r3, [r7, #12]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80006e4:	bf00      	nop
 80006e6:	bf00      	nop
 80006e8:	e7fd      	b.n	80006e6 <prvPeriodicTaskCreate+0xd6>
#endif
			vTaskSetThreadLocalStoragePointer(*(xFromTCB->pxCreatedTask),
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	687a      	ldr	r2, [r7, #4]
 80006f2:	2100      	movs	r1, #0
 80006f4:	4618      	mov	r0, r3
 80006f6:	f006 fae9 	bl	8006ccc <vTaskSetThreadLocalStoragePointer>
			mstLOCAL_STORAGE_DATA_INDEX, xFromTCB);
			return pdPASS;
 80006fa:	2301      	movs	r3, #1
 80006fc:	e002      	b.n	8000704 <prvPeriodicTaskCreate+0xf4>
		} else {
			return pdFAIL;
 80006fe:	2300      	movs	r3, #0
 8000700:	e000      	b.n	8000704 <prvPeriodicTaskCreate+0xf4>
		}
	}
	return pdPASS;
 8000702:	2301      	movs	r3, #1
}
 8000704:	4618      	mov	r0, r3
 8000706:	371c      	adds	r7, #28
 8000708:	46bd      	mov	sp, r7
 800070a:	bd90      	pop	{r4, r7, pc}
 800070c:	20000098 	.word	0x20000098
 8000710:	08000839 	.word	0x08000839
 8000714:	2000009c 	.word	0x2000009c
 8000718:	10624dd3 	.word	0x10624dd3
 800071c:	08000981 	.word	0x08000981
 8000720:	080094b4 	.word	0x080094b4

08000724 <prvAddItemToxTasksList>:

/*
 Adds a certain item to the generic xTaskList
 */
static BaseType_t prvAddItemToxTasksList(extTCB_t *fromTCB,
		BaseType_t withValue) {
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
 800072c:	6039      	str	r1, [r7, #0]
	if (vTasksListInit == pdFALSE) {
 800072e:	4b16      	ldr	r3, [pc, #88]	@ (8000788 <prvAddItemToxTasksList+0x64>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d108      	bne.n	8000748 <prvAddItemToxTasksList+0x24>
		vTasksListInit = pdTRUE;
 8000736:	4b14      	ldr	r3, [pc, #80]	@ (8000788 <prvAddItemToxTasksList+0x64>)
 8000738:	2201      	movs	r2, #1
 800073a:	601a      	str	r2, [r3, #0]
		vListInitialise(&xTasksList);
 800073c:	4813      	ldr	r0, [pc, #76]	@ (800078c <prvAddItemToxTasksList+0x68>)
 800073e:	f004 fbf9 	bl	8004f34 <vListInitialise>
		xListTasksNumber = 0;
 8000742:	4b13      	ldr	r3, [pc, #76]	@ (8000790 <prvAddItemToxTasksList+0x6c>)
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
	}
	if (!listIS_CONTAINED_WITHIN(&xTasksList, &fromTCB->pxTaskTCBListItem)) {
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	691b      	ldr	r3, [r3, #16]
 800074c:	4a0f      	ldr	r2, [pc, #60]	@ (800078c <prvAddItemToxTasksList+0x68>)
 800074e:	4293      	cmp	r3, r2
 8000750:	d015      	beq.n	800077e <prvAddItemToxTasksList+0x5a>
		vListInitialiseItem(&(fromTCB->pxTaskTCBListItem));
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	4618      	mov	r0, r3
 8000756:	f004 fc0d 	bl	8004f74 <vListInitialiseItem>
		listSET_LIST_ITEM_OWNER(&(fromTCB->pxTaskTCBListItem), fromTCB);
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	687a      	ldr	r2, [r7, #4]
 800075e:	60da      	str	r2, [r3, #12]
		listSET_LIST_ITEM_VALUE(&(fromTCB->pxTaskTCBListItem), withValue);
 8000760:	683a      	ldr	r2, [r7, #0]
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	601a      	str	r2, [r3, #0]
		vListInsertEnd(&xTasksList, &(fromTCB->pxTaskTCBListItem));
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	4619      	mov	r1, r3
 800076a:	4808      	ldr	r0, [pc, #32]	@ (800078c <prvAddItemToxTasksList+0x68>)
 800076c:	f004 fc0f 	bl	8004f8e <vListInsertEnd>
		xListTasksNumber++;
 8000770:	4b07      	ldr	r3, [pc, #28]	@ (8000790 <prvAddItemToxTasksList+0x6c>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	3301      	adds	r3, #1
 8000776:	4a06      	ldr	r2, [pc, #24]	@ (8000790 <prvAddItemToxTasksList+0x6c>)
 8000778:	6013      	str	r3, [r2, #0]
		return pdTRUE;
 800077a:	2301      	movs	r3, #1
 800077c:	e000      	b.n	8000780 <prvAddItemToxTasksList+0x5c>
	}
	return pdFALSE;
 800077e:	2300      	movs	r3, #0
}
 8000780:	4618      	mov	r0, r3
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	2000007c 	.word	0x2000007c
 800078c:	20000080 	.word	0x20000080
 8000790:	20000094 	.word	0x20000094

08000794 <vMSTPeriodicTaskCreate>:
TaskHandle_t vMSTPeriodicTaskCreate(TaskFunction_t pvJobCode,
		const char *pcName, uint16_t usStackDepth, void *pvParameters,
		UBaseType_t uxPriority, TaskHandle_t *pxCreatedTask,
		/* library-specific parameters */
		TickType_t xTaskPeriod, TickType_t xTaskDeadline, TickType_t xTaskPhase,
		TickType_t xTaskWCET) {
 8000794:	b580      	push	{r7, lr}
 8000796:	b0a4      	sub	sp, #144	@ 0x90
 8000798:	af00      	add	r7, sp, #0
 800079a:	60f8      	str	r0, [r7, #12]
 800079c:	60b9      	str	r1, [r7, #8]
 800079e:	603b      	str	r3, [r7, #0]
 80007a0:	4613      	mov	r3, r2
 80007a2:	80fb      	strh	r3, [r7, #6]

	/*
	 Allocate, fill extended TCB using local task storage
	 */

	xNewExtTCB = (extTCB_t*) pvPortMalloc(sizeof(extTCB_t));
 80007a4:	207c      	movs	r0, #124	@ 0x7c
 80007a6:	f007 fdf9 	bl	800839c <pvPortMalloc>
 80007aa:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
	*xNewExtTCB = (extTCB_t ) { .pvJobCode = pvJobCode, .pcName = pcName,
 80007ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80007b2:	4618      	mov	r0, r3
 80007b4:	237c      	movs	r3, #124	@ 0x7c
 80007b6:	461a      	mov	r2, r3
 80007b8:	2100      	movs	r1, #0
 80007ba:	f008 f993 	bl	8008ae4 <memset>
 80007be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80007c2:	68fa      	ldr	r2, [r7, #12]
 80007c4:	615a      	str	r2, [r3, #20]
 80007c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80007ca:	68ba      	ldr	r2, [r7, #8]
 80007cc:	619a      	str	r2, [r3, #24]
 80007ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80007d2:	88fa      	ldrh	r2, [r7, #6]
 80007d4:	839a      	strh	r2, [r3, #28]
 80007d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80007da:	683a      	ldr	r2, [r7, #0]
 80007dc:	621a      	str	r2, [r3, #32]
 80007de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80007e2:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80007e6:	625a      	str	r2, [r3, #36]	@ 0x24
 80007e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80007ec:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80007f0:	629a      	str	r2, [r3, #40]	@ 0x28
 80007f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80007f6:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 80007fa:	631a      	str	r2, [r3, #48]	@ 0x30
 80007fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000800:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8000804:	635a      	str	r2, [r3, #52]	@ 0x34
 8000806:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800080a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800080e:	639a      	str	r2, [r3, #56]	@ 0x38
 8000810:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000814:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8000818:	63da      	str	r2, [r3, #60]	@ 0x3c
	return pdPASS;
#else
	/*
	 * If not RMS we can directly create the task, otherwise it is done before kernel start
	 */
	if(prvPeriodicTaskCreate(xNewExtTCB)) {
 800081a:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 800081e:	f7ff fef7 	bl	8000610 <prvPeriodicTaskCreate>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <vMSTPeriodicTaskCreate+0x98>
		return pdPASS;
 8000828:	2301      	movs	r3, #1
 800082a:	e000      	b.n	800082e <vMSTPeriodicTaskCreate+0x9a>
	} else {
		return pdFAIL;
 800082c:	2300      	movs	r3, #0
	}
#endif

}
 800082e:	4618      	mov	r0, r3
 8000830:	3790      	adds	r7, #144	@ 0x90
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
	...

08000838 <prvMSTPeriodicGenericJob>:
 * mst_test_PERIODIC_METHOD 2: Uses FreeRTOS global timers to callback the task appropriately.
 *
 * @param pvParameters
 */

static void prvMSTPeriodicGenericJob(void *pvParameters) {
 8000838:	b580      	push	{r7, lr}
 800083a:	b088      	sub	sp, #32
 800083c:	af02      	add	r7, sp, #8
 800083e:	6078      	str	r0, [r7, #4]
#if(mst_test_PERIODIC_METHOD == 2)
	/*
	 Takes notification for current task
	 */
	ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8000840:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000844:	2001      	movs	r0, #1
 8000846:	f006 fdbd 	bl	80073c4 <ulTaskNotifyTake>
#endif
	/*
	 Get values about current job
	 */
	TaskHandle_t xCurrentHandle = xTaskGetCurrentTaskHandle();
 800084a:	f006 fc1d 	bl	8007088 <xTaskGetCurrentTaskHandle>
 800084e:	6178      	str	r0, [r7, #20]
	extTCB_t *xCurrExtTCB = (extTCB_t*) pvTaskGetThreadLocalStoragePointer(
 8000850:	2100      	movs	r1, #0
 8000852:	6978      	ldr	r0, [r7, #20]
 8000854:	f006 fa5a 	bl	8006d0c <pvTaskGetThreadLocalStoragePointer>
 8000858:	6138      	str	r0, [r7, #16]
			xCurrentHandle, mstLOCAL_STORAGE_DATA_INDEX);
	/*
	 We assert that the TCB has been retreived, else we compromised exec
	 */
	configASSERT(xCurrExtTCB != NULL);
 800085a:	693b      	ldr	r3, [r7, #16]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d10b      	bne.n	8000878 <prvMSTPeriodicGenericJob+0x40>
	__asm volatile
 8000860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000864:	f383 8811 	msr	BASEPRI, r3
 8000868:	f3bf 8f6f 	isb	sy
 800086c:	f3bf 8f4f 	dsb	sy
 8000870:	60bb      	str	r3, [r7, #8]
}
 8000872:	bf00      	nop
 8000874:	bf00      	nop
 8000876:	e7fd      	b.n	8000874 <prvMSTPeriodicGenericJob+0x3c>
	/*
	 First iteration with phase passed, change the period to not have the phase
	 */
	if (xCurrExtTCB->xTaskInitDone == pdFALSE) {
 8000878:	693b      	ldr	r3, [r7, #16]
 800087a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800087c:	2b00      	cmp	r3, #0
 800087e:	d11f      	bne.n	80008c0 <prvMSTPeriodicGenericJob+0x88>
		xCurrExtTCB->xTaskInitDone = pdTRUE;
 8000880:	693b      	ldr	r3, [r7, #16]
 8000882:	2201      	movs	r2, #1
 8000884:	65da      	str	r2, [r3, #92]	@ 0x5c
#if(TESTING_STM32)
		//this is the us at start
		xCurrExtTCB->xUsFromIdealRelease = 0;
 8000886:	693b      	ldr	r3, [r7, #16]
 8000888:	2200      	movs	r2, #0
 800088a:	665a      	str	r2, [r3, #100]	@ 0x64
		xCurrExtTCB->xUsAverageReleaseGap = 0;
 800088c:	693b      	ldr	r3, [r7, #16]
 800088e:	2200      	movs	r2, #0
 8000890:	66da      	str	r2, [r3, #108]	@ 0x6c
#endif

		if (xCurrExtTCB->xTaskPhase > 0) {
 8000892:	693b      	ldr	r3, [r7, #16]
 8000894:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000896:	2b00      	cmp	r3, #0
 8000898:	d012      	beq.n	80008c0 <prvMSTPeriodicGenericJob+0x88>
			 If we have a phase, we should have just passed it
			 */
#if(mst_test_PERIODIC_METHOD == 1)
			vTaskDelayUntil(&(xCurrExtTCB->xPrevReleaseTime), xCurrExtTCB->xTaskPhase);
#elif(mst_test_PERIODIC_METHOD == 2)
			xTimerChangePeriod(xCurrExtTCB->xTaskSpecificTimer,
 800089a:	693b      	ldr	r3, [r7, #16]
 800089c:	6e18      	ldr	r0, [r3, #96]	@ 0x60
 800089e:	693b      	ldr	r3, [r7, #16]
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008a6:	fb02 f303 	mul.w	r3, r2, r3
 80008aa:	4a34      	ldr	r2, [pc, #208]	@ (800097c <prvMSTPeriodicGenericJob+0x144>)
 80008ac:	fba2 2303 	umull	r2, r3, r2, r3
 80008b0:	099a      	lsrs	r2, r3, #6
 80008b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80008b6:	9300      	str	r3, [sp, #0]
 80008b8:	2300      	movs	r3, #0
 80008ba:	2104      	movs	r1, #4
 80008bc:	f006 ffec 	bl	8007898 <xTimerGenericCommand>
#endif
		}

	}

	xCurrExtTCB->xPrevReleaseTime = xTaskGetTickCount();
 80008c0:	f005 fed4 	bl	800666c <xTaskGetTickCount>
 80008c4:	4602      	mov	r2, r0
 80008c6:	693b      	ldr	r3, [r7, #16]
 80008c8:	641a      	str	r2, [r3, #64]	@ 0x40
	for (;;) {

#if(TESTING_STM32)
		//count gap from execution if testing
#if(mst_test_PERIODIC_METHOD == 2)
		xCurrExtTCB->xNumOfIterations++;
 80008ca:	693b      	ldr	r3, [r7, #16]
 80008cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80008ce:	1c5a      	adds	r2, r3, #1
 80008d0:	693b      	ldr	r3, [r7, #16]
 80008d2:	669a      	str	r2, [r3, #104]	@ 0x68
#endif
		//calculate the absolute perfect release in us
		uint32_t perfRelease = xCurrExtTCB->xTaskPhase * 1000
 80008d4:	693b      	ldr	r3, [r7, #16]
 80008d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
				+ xCurrExtTCB->xTaskPeriod * 1000
 80008d8:	693b      	ldr	r3, [r7, #16]
 80008da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
						* (xCurrExtTCB->xNumOfIterations);
 80008dc:	6939      	ldr	r1, [r7, #16]
 80008de:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 80008e0:	fb01 f303 	mul.w	r3, r1, r3
				+ xCurrExtTCB->xTaskPeriod * 1000
 80008e4:	4413      	add	r3, r2
		uint32_t perfRelease = xCurrExtTCB->xTaskPhase * 1000
 80008e6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008ea:	fb02 f303 	mul.w	r3, r2, r3
 80008ee:	60fb      	str	r3, [r7, #12]
		//calculate the gap between perfect and absolute gap in us and update the avg
		xCurrExtTCB->xUsFromIdealRelease += prvMSTGetUS() - perfRelease;
 80008f0:	f7ff fe78 	bl	80005e4 <prvMSTGetUS>
 80008f4:	4602      	mov	r2, r0
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	1ad3      	subs	r3, r2, r3
 80008fa:	693a      	ldr	r2, [r7, #16]
 80008fc:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 80008fe:	4413      	add	r3, r2
 8000900:	461a      	mov	r2, r3
 8000902:	693b      	ldr	r3, [r7, #16]
 8000904:	665a      	str	r2, [r3, #100]	@ 0x64
		if (xCurrExtTCB->xNumOfIterations > 0) {
 8000906:	693b      	ldr	r3, [r7, #16]
 8000908:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800090a:	2b00      	cmp	r3, #0
 800090c:	d009      	beq.n	8000922 <prvMSTPeriodicGenericJob+0xea>
			xCurrExtTCB->xUsAverageReleaseGap =
					(xCurrExtTCB->xUsFromIdealRelease)
 800090e:	693b      	ldr	r3, [r7, #16]
 8000910:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8000912:	461a      	mov	r2, r3
							/ (xCurrExtTCB->xNumOfIterations);
 8000914:	693b      	ldr	r3, [r7, #16]
 8000916:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000918:	fbb2 f3f3 	udiv	r3, r2, r3
 800091c:	461a      	mov	r2, r3
			xCurrExtTCB->xUsAverageReleaseGap =
 800091e:	693b      	ldr	r3, [r7, #16]
 8000920:	66da      	str	r2, [r3, #108]	@ 0x6c
#endif
#endif
		/*
		 Run user code
		 */
		xCurrExtTCB->xPrevStartTime = xTaskGetTickCount();
 8000922:	f005 fea3 	bl	800666c <xTaskGetTickCount>
 8000926:	4602      	mov	r2, r0
 8000928:	693b      	ldr	r3, [r7, #16]
 800092a:	64da      	str	r2, [r3, #76]	@ 0x4c
		xCurrExtTCB->pvJobCode(pvParameters);
 800092c:	693b      	ldr	r3, [r7, #16]
 800092e:	695b      	ldr	r3, [r3, #20]
 8000930:	6878      	ldr	r0, [r7, #4]
 8000932:	4798      	blx	r3
		xCurrExtTCB->xPrevFinishTime = xTaskGetTickCount();
 8000934:	f005 fe9a 	bl	800666c <xTaskGetTickCount>
 8000938:	4602      	mov	r2, r0
 800093a:	693b      	ldr	r3, [r7, #16]
 800093c:	651a      	str	r2, [r3, #80]	@ 0x50
		xCurrExtTCB->xPrevExecTime = xCurrExtTCB->xPrevFinishTime
 800093e:	693b      	ldr	r3, [r7, #16]
 8000940:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
				- xCurrExtTCB->xPrevStartTime;
 8000942:	693b      	ldr	r3, [r7, #16]
 8000944:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000946:	1ad2      	subs	r2, r2, r3
		xCurrExtTCB->xPrevExecTime = xCurrExtTCB->xPrevFinishTime
 8000948:	693b      	ldr	r3, [r7, #16]
 800094a:	645a      	str	r2, [r3, #68]	@ 0x44

		if (xCurrExtTCB->xPrevExecTime > xCurrExtTCB->xTaskDeadline) {
 800094c:	693b      	ldr	r3, [r7, #16]
 800094e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000950:	693b      	ldr	r3, [r7, #16]
 8000952:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000954:	429a      	cmp	r2, r3
 8000956:	d904      	bls.n	8000962 <prvMSTPeriodicGenericJob+0x12a>
			//current task got over the deadline, make notice of the event
			xCurrExtTCB->uNumOfMissedDeadlines++;
 8000958:	693b      	ldr	r3, [r7, #16]
 800095a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800095c:	1c5a      	adds	r2, r3, #1
 800095e:	693b      	ldr	r3, [r7, #16]
 8000960:	655a      	str	r2, [r3, #84]	@ 0x54

#if mst_schedSCHEDULING_POLICY == mst_schedSCHEDULING_EDF
		/*
		Notify dispatcher of finished job
		*/
		prvMSTDispatch(xCurrExtTCB->pxCreatedTask, false, taskTypePeriodic, false);
 8000962:	693b      	ldr	r3, [r7, #16]
 8000964:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8000966:	2300      	movs	r3, #0
 8000968:	2200      	movs	r2, #0
 800096a:	2100      	movs	r1, #0
 800096c:	f000 fcf6 	bl	800135c <prvMSTDispatch>
		Update scheduler-referenced release time
		*/
		//vTaskDelay(pdMS_TO_TICKS(xCurrExtTCB->xTaskPeriod));
		vTaskDelayUntil(&(xCurrExtTCB->xPrevReleaseTime), pdMS_TO_TICKS(xCurrExtTCB->xTaskPeriod));
#elif(mst_test_PERIODIC_METHOD == 2)
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8000970:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000974:	2001      	movs	r0, #1
 8000976:	f006 fd25 	bl	80073c4 <ulTaskNotifyTake>
	for (;;) {
 800097a:	e7a6      	b.n	80008ca <prvMSTPeriodicGenericJob+0x92>
 800097c:	10624dd3 	.word	0x10624dd3

08000980 <prvMSTPeriodicTimerCallback>:

#if(mst_test_PERIODIC_METHOD == 2)
/*
 Using periodic timers with mutexes
 */
static void prvMSTPeriodicTimerCallback(TimerHandle_t xTimer) {
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
	/*
	 Here the callback of a certain task timer is called, it shall have the semaphore
	 as parameter
	 */
	TaskHandle_t *param = (TaskHandle_t*) pvTimerGetTimerID(xTimer);
 8000988:	6878      	ldr	r0, [r7, #4]
 800098a:	f007 fa95 	bl	8007eb8 <pvTimerGetTimerID>
 800098e:	60f8      	str	r0, [r7, #12]
	prvMSTDispatch(param, true, taskTypePeriodic, false);
 8000990:	2300      	movs	r3, #0
 8000992:	2200      	movs	r2, #0
 8000994:	2101      	movs	r1, #1
 8000996:	68f8      	ldr	r0, [r7, #12]
 8000998:	f000 fce0 	bl	800135c <prvMSTDispatch>
}
 800099c:	bf00      	nop
 800099e:	3710      	adds	r7, #16
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <prvMSTSporadicTimerCallback>:

#if mst_USE_SPORADIC_SERVER == 0
static void prvMSTSporadicTimerCallback(TimerHandle_t xTimer) {
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
	/*
	 Notify a sporadic task but make sure it knows it was the timer to notify, by passing a parameter
	 */
	TaskHandle_t *param = (TaskHandle_t*) pvTimerGetTimerID(xTimer);
 80009ac:	6878      	ldr	r0, [r7, #4]
 80009ae:	f007 fa83 	bl	8007eb8 <pvTimerGetTimerID>
 80009b2:	60f8      	str	r0, [r7, #12]
	prvMSTDispatch(param, true, taskTypeSporadic, false);
 80009b4:	2300      	movs	r3, #0
 80009b6:	2201      	movs	r2, #1
 80009b8:	2101      	movs	r1, #1
 80009ba:	68f8      	ldr	r0, [r7, #12]
 80009bc:	f000 fcce 	bl	800135c <prvMSTDispatch>
}
 80009c0:	bf00      	nop
 80009c2:	3710      	adds	r7, #16
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <vMSTSporadicTaskCreate>:
BaseType_t vMSTSporadicTaskCreate(TaskFunction_t pvJobCode, const char *pcName,
		uint16_t usStackDepth, void *pvParameters, UBaseType_t uxPriority,
		TaskHandle_t *pxCreatedTask,
		/* library-specific parameters */
		TickType_t xTaskInterarrivalTime, TickType_t xTaskDeadline,
		TickType_t xTaskWCET) {
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b0a6      	sub	sp, #152	@ 0x98
 80009cc:	af02      	add	r7, sp, #8
 80009ce:	60f8      	str	r0, [r7, #12]
 80009d0:	60b9      	str	r1, [r7, #8]
 80009d2:	603b      	str	r3, [r7, #0]
 80009d4:	4613      	mov	r3, r2
 80009d6:	80fb      	strh	r3, [r7, #6]

	extTCB_t *xNewExtTCB;
	if (xTaskCreate(prvMSTSporadicGenericJob, pcName, usStackDepth,
 80009d8:	88fa      	ldrh	r2, [r7, #6]
 80009da:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80009de:	9301      	str	r3, [sp, #4]
 80009e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80009e4:	9300      	str	r3, [sp, #0]
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	68b9      	ldr	r1, [r7, #8]
 80009ea:	482b      	ldr	r0, [pc, #172]	@ (8000a98 <vMSTSporadicTaskCreate+0xd0>)
 80009ec:	f005 faa4 	bl	8005f38 <xTaskCreate>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b01      	cmp	r3, #1
 80009f4:	d14a      	bne.n	8000a8c <vMSTSporadicTaskCreate+0xc4>
			pvParameters, uxPriority, pxCreatedTask) == pdPASS) {
		/*
		 Allocate, fill extended TCB using local task storage
		 */
		xNewExtTCB = (extTCB_t*) pvPortMalloc(sizeof(extTCB_t));
 80009f6:	207c      	movs	r0, #124	@ 0x7c
 80009f8:	f007 fcd0 	bl	800839c <pvPortMalloc>
 80009fc:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
		//we should give it the priority of the ss if ss activated
		//if (pxCreatedTask == &SporadicServerHandle) uxPriority
		*xNewExtTCB = (extTCB_t ) { .pvJobCode = pvJobCode, .pcName = pcName,
 8000a00:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000a04:	4618      	mov	r0, r3
 8000a06:	237c      	movs	r3, #124	@ 0x7c
 8000a08:	461a      	mov	r2, r3
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	f008 f86a 	bl	8008ae4 <memset>
 8000a10:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000a14:	68fa      	ldr	r2, [r7, #12]
 8000a16:	615a      	str	r2, [r3, #20]
 8000a18:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000a1c:	68ba      	ldr	r2, [r7, #8]
 8000a1e:	619a      	str	r2, [r3, #24]
 8000a20:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000a24:	683a      	ldr	r2, [r7, #0]
 8000a26:	621a      	str	r2, [r3, #32]
 8000a28:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000a2c:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8000a30:	625a      	str	r2, [r3, #36]	@ 0x24
 8000a32:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000a36:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8000a3a:	629a      	str	r2, [r3, #40]	@ 0x28
 8000a3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000a40:	2201      	movs	r2, #1
 8000a42:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 8000a46:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000a4a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8000a4e:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a50:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000a54:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8000a58:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000a5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000a5e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8000a62:	671a      	str	r2, [r3, #112]	@ 0x70
								xTaskInterarrivalTime, .xJobCalled = pdFALSE,
						.xInterarrivalTimerRunning =
						pdFALSE, .xTaskWCET =  xTaskWCET};
		prvXMaxInterrarrivalTime =
				(xTaskInterarrivalTime > prvXMaxInterrarrivalTime) ?
						xTaskInterarrivalTime : prvXMaxInterrarrivalTime;
 8000a64:	4b0d      	ldr	r3, [pc, #52]	@ (8000a9c <vMSTSporadicTaskCreate+0xd4>)
 8000a66:	681a      	ldr	r2, [r3, #0]
 8000a68:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000a6c:	4293      	cmp	r3, r2
 8000a6e:	bf38      	it	cc
 8000a70:	4613      	movcc	r3, r2
		prvXMaxInterrarrivalTime =
 8000a72:	4a0a      	ldr	r2, [pc, #40]	@ (8000a9c <vMSTSporadicTaskCreate+0xd4>)
 8000a74:	6013      	str	r3, [r2, #0]
		/*
		 We create the task and allocate, but we do not clear the mutex nor start the timer
		 */
		vTaskSetThreadLocalStoragePointer(*pxCreatedTask,
 8000a76:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8000a80:	2100      	movs	r1, #0
 8000a82:	4618      	mov	r0, r3
 8000a84:	f006 f922 	bl	8006ccc <vTaskSetThreadLocalStoragePointer>
		mstLOCAL_STORAGE_DATA_INDEX, xNewExtTCB);
		return pdPASS;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	e000      	b.n	8000a8e <vMSTSporadicTaskCreate+0xc6>
	} else {
		//task created unsuccesfully
		return pdFAIL;
 8000a8c:	2300      	movs	r3, #0
	}
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3790      	adds	r7, #144	@ 0x90
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	08000ad5 	.word	0x08000ad5
 8000a9c:	200000a0 	.word	0x200000a0

08000aa0 <getTaskRunTime>:
 * - Interarrival timer unlocks previously called job
 *
 * @param pvParameters
 */

static BaseType_t getTaskRunTime(TaskHandle_t handle) {
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08c      	sub	sp, #48	@ 0x30
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
	TaskStatus_t status;
	UBaseType_t count = uxTaskGetSystemState(&status, 1, NULL);
 8000aa8:	f107 0308 	add.w	r3, r7, #8
 8000aac:	2200      	movs	r2, #0
 8000aae:	2101      	movs	r1, #1
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f005 fdeb 	bl	800668c <uxTaskGetSystemState>
 8000ab6:	62f8      	str	r0, [r7, #44]	@ 0x2c
	if (count == 1 && status.xHandle == handle) {
 8000ab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000aba:	2b01      	cmp	r3, #1
 8000abc:	d105      	bne.n	8000aca <getTaskRunTime+0x2a>
 8000abe:	68bb      	ldr	r3, [r7, #8]
 8000ac0:	687a      	ldr	r2, [r7, #4]
 8000ac2:	429a      	cmp	r2, r3
 8000ac4:	d101      	bne.n	8000aca <getTaskRunTime+0x2a>
		return status.ulRunTimeCounter;
 8000ac6:	6a3b      	ldr	r3, [r7, #32]
 8000ac8:	e000      	b.n	8000acc <getTaskRunTime+0x2c>
	}
	return 0;
 8000aca:	2300      	movs	r3, #0
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3730      	adds	r7, #48	@ 0x30
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}

08000ad4 <prvMSTSporadicGenericJob>:
static void prvMSTSporadicGenericJob(void *pvParameters) {
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b08c      	sub	sp, #48	@ 0x30
 8000ad8:	af02      	add	r7, sp, #8
 8000ada:	6078      	str	r0, [r7, #4]

	TaskHandle_t xCurrentHandle = xTaskGetCurrentTaskHandle();
 8000adc:	f006 fad4 	bl	8007088 <xTaskGetCurrentTaskHandle>
 8000ae0:	6278      	str	r0, [r7, #36]	@ 0x24
	extTCB_t *xCurrExtTCB = (extTCB_t*) pvTaskGetThreadLocalStoragePointer(
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000ae6:	f006 f911 	bl	8006d0c <pvTaskGetThreadLocalStoragePointer>
 8000aea:	6238      	str	r0, [r7, #32]
			xCurrentHandle, mstLOCAL_STORAGE_DATA_INDEX);
	configASSERT(xCurrExtTCB != NULL);
 8000aec:	6a3b      	ldr	r3, [r7, #32]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d10b      	bne.n	8000b0a <prvMSTSporadicGenericJob+0x36>
	__asm volatile
 8000af2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000af6:	f383 8811 	msr	BASEPRI, r3
 8000afa:	f3bf 8f6f 	isb	sy
 8000afe:	f3bf 8f4f 	dsb	sy
 8000b02:	617b      	str	r3, [r7, #20]
}
 8000b04:	bf00      	nop
 8000b06:	bf00      	nop
 8000b08:	e7fd      	b.n	8000b06 <prvMSTSporadicGenericJob+0x32>
#if mst_USE_SPORADIC_SERVER == 0
		/*
		 Takes notification for current task, could be from timer or user
		 */
		uint32_t notificationGiver;
		if (xTaskNotifyWait(0, NOTIFY_INTERARRIVAL_TIMER | NOTIFY_USER_REQUEST,
 8000b0a:	f107 020c 	add.w	r2, r7, #12
 8000b0e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b12:	2103      	movs	r1, #3
 8000b14:	2000      	movs	r0, #0
 8000b16:	f006 fca1 	bl	800745c <xTaskNotifyWait>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	d121      	bne.n	8000b64 <prvMSTSporadicGenericJob+0x90>
				&notificationGiver, portMAX_DELAY) == pdPASS) {
			if (notificationGiver & NOTIFY_INTERARRIVAL_TIMER) {
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d00b      	beq.n	8000b42 <prvMSTSporadicGenericJob+0x6e>
				//it was the interarrival timer that woke up the task
				xCurrExtTCB->xInterarrivalTimerRunning = pdFALSE;
 8000b2a:	6a3b      	ldr	r3, [r7, #32]
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	675a      	str	r2, [r3, #116]	@ 0x74
				notificationGiver &= ~NOTIFY_INTERARRIVAL_TIMER;
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	f023 0301 	bic.w	r3, r3, #1
 8000b36:	60fb      	str	r3, [r7, #12]
				if (xCurrExtTCB->xJobCalled == pdFALSE) {
 8000b38:	6a3b      	ldr	r3, [r7, #32]
 8000b3a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d111      	bne.n	8000b64 <prvMSTSporadicGenericJob+0x90>
					continue;
 8000b40:	e06e      	b.n	8000c20 <prvMSTSporadicGenericJob+0x14c>
				}
			} else if (notificationGiver & NOTIFY_USER_REQUEST) {
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	f003 0302 	and.w	r3, r3, #2
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d00b      	beq.n	8000b64 <prvMSTSporadicGenericJob+0x90>
				//user requested to run
				notificationGiver &= ~NOTIFY_USER_REQUEST;
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	f023 0302 	bic.w	r3, r3, #2
 8000b52:	60fb      	str	r3, [r7, #12]
				if (xCurrExtTCB->xInterarrivalTimerRunning == pdTRUE) {
 8000b54:	6a3b      	ldr	r3, [r7, #32]
 8000b56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d103      	bne.n	8000b64 <prvMSTSporadicGenericJob+0x90>
					xCurrExtTCB->xJobCalled = pdTRUE;
 8000b5c:	6a3b      	ldr	r3, [r7, #32]
 8000b5e:	2201      	movs	r2, #1
 8000b60:	679a      	str	r2, [r3, #120]	@ 0x78
					continue;
 8000b62:	e05d      	b.n	8000c20 <prvMSTSporadicGenericJob+0x14c>
			}
		}
		/*
		 Notify job called and interarrival timer from release
		 */
		xCurrExtTCB->xJobCalled = pdTRUE;
 8000b64:	6a3b      	ldr	r3, [r7, #32]
 8000b66:	2201      	movs	r2, #1
 8000b68:	679a      	str	r2, [r3, #120]	@ 0x78
		TimerHandle_t xTimer = xTimerCreate("sporadic interarrival timer", // Name of the timer
				pdMS_TO_TICKS(xCurrExtTCB->xTaskInterarrivalTime), // Timer period in ticks
 8000b6a:	6a3b      	ldr	r3, [r7, #32]
 8000b6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000b6e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000b72:	fb02 f303 	mul.w	r3, r2, r3
		TimerHandle_t xTimer = xTimerCreate("sporadic interarrival timer", // Name of the timer
 8000b76:	4a2b      	ldr	r2, [pc, #172]	@ (8000c24 <prvMSTSporadicGenericJob+0x150>)
 8000b78:	fba2 2303 	umull	r2, r3, r2, r3
 8000b7c:	0999      	lsrs	r1, r3, #6
				pdFALSE,                               // Auto-reload (periodic)
				(void*) (xCurrExtTCB->pxCreatedTask), // Task handle as parameter
 8000b7e:	6a3b      	ldr	r3, [r7, #32]
 8000b80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
		TimerHandle_t xTimer = xTimerCreate("sporadic interarrival timer", // Name of the timer
 8000b82:	4a29      	ldr	r2, [pc, #164]	@ (8000c28 <prvMSTSporadicGenericJob+0x154>)
 8000b84:	9200      	str	r2, [sp, #0]
 8000b86:	2200      	movs	r2, #0
 8000b88:	4828      	ldr	r0, [pc, #160]	@ (8000c2c <prvMSTSporadicGenericJob+0x158>)
 8000b8a:	f006 fe27 	bl	80077dc <xTimerCreate>
 8000b8e:	61f8      	str	r0, [r7, #28]
				prvMSTSporadicTimerCallback                 // Callback function
				);
		configASSERT(xTimerStart(xTimer, 0) == pdPASS)
 8000b90:	f005 fd6c 	bl	800666c <xTaskGetTickCount>
 8000b94:	4602      	mov	r2, r0
 8000b96:	2300      	movs	r3, #0
 8000b98:	9300      	str	r3, [sp, #0]
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	69f8      	ldr	r0, [r7, #28]
 8000ba0:	f006 fe7a 	bl	8007898 <xTimerGenericCommand>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b01      	cmp	r3, #1
 8000ba8:	d00b      	beq.n	8000bc2 <prvMSTSporadicGenericJob+0xee>
	__asm volatile
 8000baa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000bae:	f383 8811 	msr	BASEPRI, r3
 8000bb2:	f3bf 8f6f 	isb	sy
 8000bb6:	f3bf 8f4f 	dsb	sy
 8000bba:	613b      	str	r3, [r7, #16]
}
 8000bbc:	bf00      	nop
 8000bbe:	bf00      	nop
 8000bc0:	e7fd      	b.n	8000bbe <prvMSTSporadicGenericJob+0xea>
		xCurrExtTCB->xTaskSpecificTimer = xTimer;
 8000bc2:	6a3b      	ldr	r3, [r7, #32]
 8000bc4:	69fa      	ldr	r2, [r7, #28]
 8000bc6:	661a      	str	r2, [r3, #96]	@ 0x60
		taskENTER_CRITICAL(); //maybe not needed
 8000bc8:	f007 fac6 	bl	8008158 <vPortEnterCritical>
		xCurrExtTCB->xInterarrivalTimerRunning = pdTRUE;
 8000bcc:	6a3b      	ldr	r3, [r7, #32]
 8000bce:	2201      	movs	r2, #1
 8000bd0:	675a      	str	r2, [r3, #116]	@ 0x74
		xCurrExtTCB->xJobCalled = pdFALSE;
 8000bd2:	6a3b      	ldr	r3, [r7, #32]
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	679a      	str	r2, [r3, #120]	@ 0x78
		taskEXIT_CRITICAL();
 8000bd8:	f007 faf0 	bl	80081bc <vPortExitCritical>
		portMAX_DELAY) == pdPASS) {
			xCurrExtTCB->xJobCalled = pdTRUE;
		}
#endif

		BaseType_t actualCPUCycles = getTaskRunTime(xCurrentHandle);
 8000bdc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000bde:	f7ff ff5f 	bl	8000aa0 <getTaskRunTime>
 8000be2:	61b8      	str	r0, [r7, #24]
		xCurrExtTCB->xPrevStartTime = xTaskGetTickCount();
 8000be4:	f005 fd42 	bl	800666c <xTaskGetTickCount>
 8000be8:	4602      	mov	r2, r0
 8000bea:	6a3b      	ldr	r3, [r7, #32]
 8000bec:	64da      	str	r2, [r3, #76]	@ 0x4c
		xCurrExtTCB->pvJobCode(pvParameters);
 8000bee:	6a3b      	ldr	r3, [r7, #32]
 8000bf0:	695b      	ldr	r3, [r3, #20]
 8000bf2:	6878      	ldr	r0, [r7, #4]
 8000bf4:	4798      	blx	r3
		/*
		 If periodic job is called within the task itself its no problem since the timer is going
		 */
		xCurrExtTCB->xPrevFinishTime = xTaskGetTickCount();
 8000bf6:	f005 fd39 	bl	800666c <xTaskGetTickCount>
 8000bfa:	4602      	mov	r2, r0
 8000bfc:	6a3b      	ldr	r3, [r7, #32]
 8000bfe:	651a      	str	r2, [r3, #80]	@ 0x50
		/*
		 The user shall have set up runtime stats appropriately:
		 1 tick->1us, hence 'actualCPUCycles' is in us
		 */
		//actualCPUCycles = getTaskRunTime(xCurrentHandle) - actualCPUCycles;
		actualCPUCycles = xCurrExtTCB->xPrevFinishTime
 8000c00:	6a3b      	ldr	r3, [r7, #32]
 8000c02:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
				- xCurrExtTCB->xPrevStartTime;
 8000c04:	6a3b      	ldr	r3, [r7, #32]
 8000c06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c08:	1ad3      	subs	r3, r2, r3
		actualCPUCycles = xCurrExtTCB->xPrevFinishTime
 8000c0a:	61bb      	str	r3, [r7, #24]

		//xCurrExtTCB->xPrevExecTime = xCurrExtTCB->xPrevFinishTime - xCurrExtTCB->xPrevStartTime;
		xCurrExtTCB->xPrevExecTime = actualCPUCycles;
 8000c0c:	69ba      	ldr	r2, [r7, #24]
 8000c0e:	6a3b      	ldr	r3, [r7, #32]
 8000c10:	645a      	str	r2, [r3, #68]	@ 0x44
#endif
#if mst_schedSCHEDULING_POLICY == mst_schedSCHEDULING_EDF
		/*
		Notify dispatcher of finished job
		*/
		prvMSTDispatch(xCurrExtTCB->pxCreatedTask, false, taskTypeSporadic, false);
 8000c12:	6a3b      	ldr	r3, [r7, #32]
 8000c14:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8000c16:	2300      	movs	r3, #0
 8000c18:	2201      	movs	r2, #1
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	f000 fb9e 	bl	800135c <prvMSTDispatch>
	for (;;) {
 8000c20:	e773      	b.n	8000b0a <prvMSTSporadicGenericJob+0x36>
 8000c22:	bf00      	nop
 8000c24:	10624dd3 	.word	0x10624dd3
 8000c28:	080009a5 	.word	0x080009a5
 8000c2c:	080094cc 	.word	0x080094cc

08000c30 <vMSTSporadicTaskRun>:
#endif
	}
}

BaseType_t vMSTSporadicTaskRun(TaskHandle_t *pxTaskToRunHandle) {
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
	/*
	 We check if the task has been created. To run the sporadic task we call a dispatch
	 */
	extTCB_t *xCurrExtTCB = (extTCB_t*) pvTaskGetThreadLocalStoragePointer(
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f006 f864 	bl	8006d0c <pvTaskGetThreadLocalStoragePointer>
 8000c44:	60f8      	str	r0, [r7, #12]
			*pxTaskToRunHandle, mstLOCAL_STORAGE_DATA_INDEX);

	if (xCurrExtTCB == NULL) {
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d101      	bne.n	8000c50 <vMSTSporadicTaskRun+0x20>
		return pdFAIL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	e006      	b.n	8000c5e <vMSTSporadicTaskRun+0x2e>
	} else {
		prvMSTDispatch(pxTaskToRunHandle, pdTRUE, taskTypeSporadic, pdTRUE);
 8000c50:	2301      	movs	r3, #1
 8000c52:	2201      	movs	r2, #1
 8000c54:	2101      	movs	r1, #1
 8000c56:	6878      	ldr	r0, [r7, #4]
 8000c58:	f000 fb80 	bl	800135c <prvMSTDispatch>
		return pdPASS;
 8000c5c:	2301      	movs	r3, #1
	}
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3710      	adds	r7, #16
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <prv_compare>:

#if (mst_schedSCHEDULING_POLICY == mst_schedSCHEDULING_RMS || mst_schedSCHEDULING_POLICY == mst_schedSCHEDULING_EDF)
static int prv_compare(const void *arg1, const void *arg2) {
 8000c66:	b480      	push	{r7}
 8000c68:	b085      	sub	sp, #20
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	6078      	str	r0, [r7, #4]
 8000c6e:	6039      	str	r1, [r7, #0]
	extTCB_t *itm1 = *(extTCB_t**) arg1;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	60fb      	str	r3, [r7, #12]
	extTCB_t *itm2 = *(extTCB_t**) arg2;
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	60bb      	str	r3, [r7, #8]
		return -1;
	if (itm1->xTaskPeriod < itm2->xTaskPeriod)
		return 1;
	return 0;
#elif mst_schedSCHEDULING_POLICY == mst_schedSCHEDULING_EDF
	if (itm1->xTaskDeadline < itm2->xTaskDeadline)
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d202      	bcs.n	8000c8e <prv_compare+0x28>
		return -1;
 8000c88:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c8c:	e008      	b.n	8000ca0 <prv_compare+0x3a>
	if (itm1->xTaskDeadline > itm2->xTaskDeadline)
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c92:	68bb      	ldr	r3, [r7, #8]
 8000c94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c96:	429a      	cmp	r2, r3
 8000c98:	d901      	bls.n	8000c9e <prv_compare+0x38>
		return 1;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e000      	b.n	8000ca0 <prv_compare+0x3a>
	return 0; 
 8000c9e:	2300      	movs	r3, #0
#endif
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3714      	adds	r7, #20
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr

08000cac <prvComputeOrderedPriorities>:
/*
 *TODO: This can be obviously optimized by using an appropriate data structure
 Now it does quicksort after getting list, we have O(n log n) in best case
 */

static BaseType_t prvComputeOrderedPriorities() {
 8000cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000cb0:	b08c      	sub	sp, #48	@ 0x30
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	466b      	mov	r3, sp
 8000cb6:	4698      	mov	r8, r3
	static BaseType_t initialEvaluation = pdTRUE;
	extTCB_t *listArray[xListTasksNumber];
 8000cb8:	4b47      	ldr	r3, [pc, #284]	@ (8000dd8 <prvComputeOrderedPriorities+0x12c>)
 8000cba:	681e      	ldr	r6, [r3, #0]
 8000cbc:	1e73      	subs	r3, r6, #1
 8000cbe:	61fb      	str	r3, [r7, #28]
 8000cc0:	4632      	mov	r2, r6
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	4614      	mov	r4, r2
 8000cc6:	461d      	mov	r5, r3
 8000cc8:	f04f 0200 	mov.w	r2, #0
 8000ccc:	f04f 0300 	mov.w	r3, #0
 8000cd0:	016b      	lsls	r3, r5, #5
 8000cd2:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8000cd6:	0162      	lsls	r2, r4, #5
 8000cd8:	4632      	mov	r2, r6
 8000cda:	2300      	movs	r3, #0
 8000cdc:	4610      	mov	r0, r2
 8000cde:	4619      	mov	r1, r3
 8000ce0:	f04f 0200 	mov.w	r2, #0
 8000ce4:	f04f 0300 	mov.w	r3, #0
 8000ce8:	014b      	lsls	r3, r1, #5
 8000cea:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000cee:	0142      	lsls	r2, r0, #5
 8000cf0:	4633      	mov	r3, r6
 8000cf2:	009b      	lsls	r3, r3, #2
 8000cf4:	3307      	adds	r3, #7
 8000cf6:	08db      	lsrs	r3, r3, #3
 8000cf8:	00db      	lsls	r3, r3, #3
 8000cfa:	ebad 0d03 	sub.w	sp, sp, r3
 8000cfe:	466b      	mov	r3, sp
 8000d00:	3303      	adds	r3, #3
 8000d02:	089b      	lsrs	r3, r3, #2
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	61bb      	str	r3, [r7, #24]
	//transfer linked list to array
	//configASSERT(xTasksList.uxNumberOfItems == xListTasksNumber);
	ListItem_t *xItm = listGET_HEAD_ENTRY(&xTasksList); // this is xListEnd.pxNext
 8000d08:	4b34      	ldr	r3, [pc, #208]	@ (8000ddc <prvComputeOrderedPriorities+0x130>)
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	for (int i = 0; i < xListTasksNumber; i++) {
 8000d0e:	2300      	movs	r3, #0
 8000d10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000d12:	e01c      	b.n	8000d4e <prvComputeOrderedPriorities+0xa2>
		extTCB_t *xTCB = (extTCB_t*) xItm->pvOwner;
 8000d14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	60fb      	str	r3, [r7, #12]

		configASSERT(xTCB != NULL);  // Make sure we don't dereference garbage
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d10b      	bne.n	8000d38 <prvComputeOrderedPriorities+0x8c>
	__asm volatile
 8000d20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000d24:	f383 8811 	msr	BASEPRI, r3
 8000d28:	f3bf 8f6f 	isb	sy
 8000d2c:	f3bf 8f4f 	dsb	sy
 8000d30:	60bb      	str	r3, [r7, #8]
}
 8000d32:	bf00      	nop
 8000d34:	bf00      	nop
 8000d36:	e7fd      	b.n	8000d34 <prvComputeOrderedPriorities+0x88>
		listArray[i] = xTCB;
 8000d38:	69bb      	ldr	r3, [r7, #24]
 8000d3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000d3c:	68f9      	ldr	r1, [r7, #12]
 8000d3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		xItm = listGET_NEXT(xItm);
 8000d42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	62fb      	str	r3, [r7, #44]	@ 0x2c
	for (int i = 0; i < xListTasksNumber; i++) {
 8000d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000d4e:	4b22      	ldr	r3, [pc, #136]	@ (8000dd8 <prvComputeOrderedPriorities+0x12c>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000d54:	429a      	cmp	r2, r3
 8000d56:	dbdd      	blt.n	8000d14 <prvComputeOrderedPriorities+0x68>

	}

	qsort(listArray, xListTasksNumber, sizeof(extTCB_t*), prv_compare);
 8000d58:	4b1f      	ldr	r3, [pc, #124]	@ (8000dd8 <prvComputeOrderedPriorities+0x12c>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4b20      	ldr	r3, [pc, #128]	@ (8000de0 <prvComputeOrderedPriorities+0x134>)
 8000d60:	2204      	movs	r2, #4
 8000d62:	69b8      	ldr	r0, [r7, #24]
 8000d64:	f007 fd41 	bl	80087ea <qsort>
		 * (but without changing the tasks priority)
		 */
		return pdPASS;
	}
#endif
	UBaseType_t uxUsedPriority = prvSTARTING_PRIORITY;
 8000d68:	2305      	movs	r3, #5
 8000d6a:	627b      	str	r3, [r7, #36]	@ 0x24

	for (UBaseType_t xCurrInx = 0; xCurrInx < xListTasksNumber; xCurrInx++) {
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	623b      	str	r3, [r7, #32]
 8000d70:	e025      	b.n	8000dbe <prvComputeOrderedPriorities+0x112>
		extTCB_t *xTCB_Reference = listArray[xCurrInx];
 8000d72:	69bb      	ldr	r3, [r7, #24]
 8000d74:	6a3a      	ldr	r2, [r7, #32]
 8000d76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d7a:	617b      	str	r3, [r7, #20]
		UBaseType_t bNewPriority = uxUsedPriority++;
 8000d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d7e:	1c5a      	adds	r2, r3, #1
 8000d80:	627a      	str	r2, [r7, #36]	@ 0x24
 8000d82:	613b      	str	r3, [r7, #16]
		xTCB_Reference->uxPriority = bNewPriority;
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	625a      	str	r2, [r3, #36]	@ 0x24

#elif mst_schedSCHEDULING_POLICY == mst_schedSCHEDULING_EDF
		/*
		* If EDF we simply set priorities accordingly
		*/
		configASSERT(xTCB_Reference->pxCreatedTask != NULL);
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d10b      	bne.n	8000daa <prvComputeOrderedPriorities+0xfe>
	__asm volatile
 8000d92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000d96:	f383 8811 	msr	BASEPRI, r3
 8000d9a:	f3bf 8f6f 	isb	sy
 8000d9e:	f3bf 8f4f 	dsb	sy
 8000da2:	607b      	str	r3, [r7, #4]
}
 8000da4:	bf00      	nop
 8000da6:	bf00      	nop
 8000da8:	e7fd      	b.n	8000da6 <prvComputeOrderedPriorities+0xfa>
		vTaskPrioritySet(*(xTCB_Reference->pxCreatedTask), bNewPriority);
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	6939      	ldr	r1, [r7, #16]
 8000db2:	4618      	mov	r0, r3
 8000db4:	f005 fa9e 	bl	80062f4 <vTaskPrioritySet>
	for (UBaseType_t xCurrInx = 0; xCurrInx < xListTasksNumber; xCurrInx++) {
 8000db8:	6a3b      	ldr	r3, [r7, #32]
 8000dba:	3301      	adds	r3, #1
 8000dbc:	623b      	str	r3, [r7, #32]
 8000dbe:	4b06      	ldr	r3, [pc, #24]	@ (8000dd8 <prvComputeOrderedPriorities+0x12c>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	6a3b      	ldr	r3, [r7, #32]
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d3d3      	bcc.n	8000d72 <prvComputeOrderedPriorities+0xc6>
		configASSERT(xTCB != NULL);
		uxListRemove(pxItem);
	}
	xListTasksNumber = 0;
#endif
	return pdPASS;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	46c5      	mov	sp, r8
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3730      	adds	r7, #48	@ 0x30
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000dd8:	20000094 	.word	0x20000094
 8000ddc:	20000080 	.word	0x20000080
 8000de0:	08000c67 	.word	0x08000c67

08000de4 <vMSTSchedulerStart>:

/*
 MST version of scheduler start
 */
void vMSTSchedulerStart(void) {
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
#if(TESTING_STM32 == 1)
	prvMSTSetupUSClock();
 8000de8:	f7ff fbe0 	bl	80005ac <prvMSTSetupUSClock>
	prvPeriodicTasksDensity
#endif
	configASSERT(mst_USE_SPORADIC_SERVER == 0);
#endif

	vTaskStartScheduler();
 8000dec:	f005 fb20 	bl	8006430 <vTaskStartScheduler>

}
 8000df0:	bf00      	nop
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <prvAsmissionControlEDF>:
#if(mst_schedSCHEDULING_POLICY == mst_schedSCHEDULING_EDF)

//This can be optimized. The first two iterations can be put into one by 
//calculating past densities at each step
static BaseType_t prvAsmissionControlEDF(extTCB_t *forTCB)
{
 8000df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000df8:	b0af      	sub	sp, #188	@ 0xbc
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8000dfe:	466b      	mov	r3, sp
 8000e00:	461e      	mov	r6, r3
    TickType_t now   = xTaskGetTickCount();
 8000e02:	f005 fc33 	bl	800666c <xTaskGetTickCount>
 8000e06:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
    TickType_t D_new = pdMS_TO_TICKS(forTCB->xTaskDeadline);
 8000e0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000e0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e12:	fb03 f202 	mul.w	r2, r3, r2
 8000e16:	4b94      	ldr	r3, [pc, #592]	@ (8001068 <prvAsmissionControlEDF+0x274>)
 8000e18:	fba3 2302 	umull	r2, r3, r3, r2
 8000e1c:	099b      	lsrs	r3, r3, #6
 8000e1e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    TickType_t C_new = pdMS_TO_TICKS(forTCB->xTaskWCET);
 8000e22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e24:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000e26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e2a:	fb03 f202 	mul.w	r2, r3, r2
 8000e2e:	4b8e      	ldr	r3, [pc, #568]	@ (8001068 <prvAsmissionControlEDF+0x274>)
 8000e30:	fba3 2302 	umull	r2, r3, r3, r2
 8000e34:	099b      	lsrs	r3, r3, #6
 8000e36:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    TickType_t absD_new = now + D_new;
 8000e3a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8000e3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000e42:	4413      	add	r3, r2
 8000e44:	67fb      	str	r3, [r7, #124]	@ 0x7c

    // Gather cutpoints (abs deadlines of active jobs up to new job)
    TickType_t cutpoints[xListTasksNumber];
 8000e46:	4b89      	ldr	r3, [pc, #548]	@ (800106c <prvAsmissionControlEDF+0x278>)
 8000e48:	6819      	ldr	r1, [r3, #0]
 8000e4a:	1e4b      	subs	r3, r1, #1
 8000e4c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000e4e:	460a      	mov	r2, r1
 8000e50:	2300      	movs	r3, #0
 8000e52:	4614      	mov	r4, r2
 8000e54:	461d      	mov	r5, r3
 8000e56:	f04f 0200 	mov.w	r2, #0
 8000e5a:	f04f 0300 	mov.w	r3, #0
 8000e5e:	016b      	lsls	r3, r5, #5
 8000e60:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8000e64:	0162      	lsls	r2, r4, #5
 8000e66:	460a      	mov	r2, r1
 8000e68:	2300      	movs	r3, #0
 8000e6a:	4690      	mov	r8, r2
 8000e6c:	4699      	mov	r9, r3
 8000e6e:	f04f 0200 	mov.w	r2, #0
 8000e72:	f04f 0300 	mov.w	r3, #0
 8000e76:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8000e7a:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8000e7e:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8000e82:	460b      	mov	r3, r1
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	3307      	adds	r3, #7
 8000e88:	08db      	lsrs	r3, r3, #3
 8000e8a:	00db      	lsls	r3, r3, #3
 8000e8c:	ebad 0d03 	sub.w	sp, sp, r3
 8000e90:	466b      	mov	r3, sp
 8000e92:	3303      	adds	r3, #3
 8000e94:	089b      	lsrs	r3, r3, #2
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	677b      	str	r3, [r7, #116]	@ 0x74
    BaseType_t ncuts = 0;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

    ListItem_t *it = listGET_HEAD_ENTRY(&xTasksList);
 8000ea0:	4b73      	ldr	r3, [pc, #460]	@ (8001070 <prvAsmissionControlEDF+0x27c>)
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    for (BaseType_t i = 0; i < xListTasksNumber; i++) {
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8000eae:	e067      	b.n	8000f80 <prvAsmissionControlEDF+0x18c>
        extTCB_t *tcb = (extTCB_t *) it->pvOwner;
 8000eb0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000eb4:	68db      	ldr	r3, [r3, #12]
 8000eb6:	647b      	str	r3, [r7, #68]	@ 0x44
        configASSERT(tcb != NULL);
 8000eb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d10b      	bne.n	8000ed6 <prvAsmissionControlEDF+0xe2>
	__asm volatile
 8000ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000ec2:	f383 8811 	msr	BASEPRI, r3
 8000ec6:	f3bf 8f6f 	isb	sy
 8000eca:	f3bf 8f4f 	dsb	sy
 8000ece:	63bb      	str	r3, [r7, #56]	@ 0x38
}
 8000ed0:	bf00      	nop
 8000ed2:	bf00      	nop
 8000ed4:	e7fd      	b.n	8000ed2 <prvAsmissionControlEDF+0xde>

        TickType_t absD_i = listGET_LIST_ITEM_VALUE(&tcb->pxTaskTCBListItem);
 8000ed6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	643b      	str	r3, [r7, #64]	@ 0x40
        if (absD_i > now && absD_i <= absD_new) {
 8000edc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000ede:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000ee2:	429a      	cmp	r2, r3
 8000ee4:	d942      	bls.n	8000f6c <prvAsmissionControlEDF+0x178>
 8000ee6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000ee8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000eea:	429a      	cmp	r2, r3
 8000eec:	d83e      	bhi.n	8000f6c <prvAsmissionControlEDF+0x178>
            TickType_t rel = absD_i - now;
 8000eee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000ef0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
            // insert unique in sorted order (ncuts is small)
            BaseType_t j = ncuts;
 8000ef8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000efc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
            while (j > 0 && cutpoints[j-1] > rel) { cutpoints[j] = cutpoints[j-1]; j--; }
 8000f00:	e00f      	b.n	8000f22 <prvAsmissionControlEDF+0x12e>
 8000f02:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000f06:	1e5a      	subs	r2, r3, #1
 8000f08:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000f0a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000f0e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8000f10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000f14:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000f18:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000f22:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	dd08      	ble.n	8000f3c <prvAsmissionControlEDF+0x148>
 8000f2a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000f2e:	1e5a      	subs	r2, r3, #1
 8000f30:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000f32:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000f36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d3e2      	bcc.n	8000f02 <prvAsmissionControlEDF+0x10e>
            if (j == 0 || cutpoints[j-1] != rel) { cutpoints[j] = rel; ncuts++; }
 8000f3c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d008      	beq.n	8000f56 <prvAsmissionControlEDF+0x162>
 8000f44:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000f48:	1e5a      	subs	r2, r3, #1
 8000f4a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000f4c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000f50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d00a      	beq.n	8000f6c <prvAsmissionControlEDF+0x178>
 8000f56:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8000f58:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8000f5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000f5e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8000f62:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000f66:	3301      	adds	r3, #1
 8000f68:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
        }
        it = listGET_NEXT(it);
 8000f6c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    for (BaseType_t i = 0; i < xListTasksNumber; i++) {
 8000f76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8000f80:	4b3a      	ldr	r3, [pc, #232]	@ (800106c <prvAsmissionControlEDF+0x278>)
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	db91      	blt.n	8000eb0 <prvAsmissionControlEDF+0xbc>
    }

    // Build intervals [0..D_new] from cutpoints
    TickType_t starts[xListTasksNumber + 1];
 8000f8c:	4b37      	ldr	r3, [pc, #220]	@ (800106c <prvAsmissionControlEDF+0x278>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	1c59      	adds	r1, r3, #1
 8000f92:	1e4b      	subs	r3, r1, #1
 8000f94:	673b      	str	r3, [r7, #112]	@ 0x70
 8000f96:	460a      	mov	r2, r1
 8000f98:	2300      	movs	r3, #0
 8000f9a:	4692      	mov	sl, r2
 8000f9c:	469b      	mov	fp, r3
 8000f9e:	f04f 0200 	mov.w	r2, #0
 8000fa2:	f04f 0300 	mov.w	r3, #0
 8000fa6:	ea4f 134b 	mov.w	r3, fp, lsl #5
 8000faa:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8000fae:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8000fb2:	460a      	mov	r2, r1
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	623a      	str	r2, [r7, #32]
 8000fb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8000fba:	f04f 0200 	mov.w	r2, #0
 8000fbe:	f04f 0300 	mov.w	r3, #0
 8000fc2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8000fc6:	4628      	mov	r0, r5
 8000fc8:	0143      	lsls	r3, r0, #5
 8000fca:	4620      	mov	r0, r4
 8000fcc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000fd0:	4620      	mov	r0, r4
 8000fd2:	0142      	lsls	r2, r0, #5
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	3307      	adds	r3, #7
 8000fda:	08db      	lsrs	r3, r3, #3
 8000fdc:	00db      	lsls	r3, r3, #3
 8000fde:	ebad 0d03 	sub.w	sp, sp, r3
 8000fe2:	466b      	mov	r3, sp
 8000fe4:	3303      	adds	r3, #3
 8000fe6:	089b      	lsrs	r3, r3, #2
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	66fb      	str	r3, [r7, #108]	@ 0x6c
    TickType_t lens  [xListTasksNumber + 1];
 8000fec:	4b1f      	ldr	r3, [pc, #124]	@ (800106c <prvAsmissionControlEDF+0x278>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	1c59      	adds	r1, r3, #1
 8000ff2:	1e4b      	subs	r3, r1, #1
 8000ff4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000ff6:	460a      	mov	r2, r1
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	61ba      	str	r2, [r7, #24]
 8000ffc:	61fb      	str	r3, [r7, #28]
 8000ffe:	f04f 0200 	mov.w	r2, #0
 8001002:	f04f 0300 	mov.w	r3, #0
 8001006:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800100a:	4628      	mov	r0, r5
 800100c:	0143      	lsls	r3, r0, #5
 800100e:	4620      	mov	r0, r4
 8001010:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001014:	4620      	mov	r0, r4
 8001016:	0142      	lsls	r2, r0, #5
 8001018:	460a      	mov	r2, r1
 800101a:	2300      	movs	r3, #0
 800101c:	613a      	str	r2, [r7, #16]
 800101e:	617b      	str	r3, [r7, #20]
 8001020:	f04f 0200 	mov.w	r2, #0
 8001024:	f04f 0300 	mov.w	r3, #0
 8001028:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800102c:	4628      	mov	r0, r5
 800102e:	0143      	lsls	r3, r0, #5
 8001030:	4620      	mov	r0, r4
 8001032:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001036:	4620      	mov	r0, r4
 8001038:	0142      	lsls	r2, r0, #5
 800103a:	460b      	mov	r3, r1
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	3307      	adds	r3, #7
 8001040:	08db      	lsrs	r3, r3, #3
 8001042:	00db      	lsls	r3, r3, #3
 8001044:	ebad 0d03 	sub.w	sp, sp, r3
 8001048:	466b      	mov	r3, sp
 800104a:	3303      	adds	r3, #3
 800104c:	089b      	lsrs	r3, r3, #2
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	667b      	str	r3, [r7, #100]	@ 0x64
    BaseType_t nint = 0;
 8001052:	2300      	movs	r3, #0
 8001054:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

    TickType_t prev = 0;
 8001058:	2300      	movs	r3, #0
 800105a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    for (BaseType_t i = 0; i < ncuts; i++) {
 800105e:	2300      	movs	r3, #0
 8001060:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001064:	e034      	b.n	80010d0 <prvAsmissionControlEDF+0x2dc>
 8001066:	bf00      	nop
 8001068:	10624dd3 	.word	0x10624dd3
 800106c:	20000094 	.word	0x20000094
 8001070:	20000080 	.word	0x20000080
        if (cutpoints[i] > prev) {
 8001074:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001076:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800107a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800107e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8001082:	429a      	cmp	r2, r3
 8001084:	d21f      	bcs.n	80010c6 <prvAsmissionControlEDF+0x2d2>
            starts[nint] = prev;
 8001086:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001088:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800108c:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8001090:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            lens  [nint] = cutpoints[i] - prev;
 8001094:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001096:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800109a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800109e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80010a2:	1ad1      	subs	r1, r2, r3
 80010a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80010a6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80010aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            nint++;
 80010ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80010b2:	3301      	adds	r3, #1
 80010b4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
            prev = cutpoints[i];
 80010b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80010ba:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80010be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    for (BaseType_t i = 0; i < ncuts; i++) {
 80010c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80010ca:	3301      	adds	r3, #1
 80010cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80010d0:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80010d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80010d8:	429a      	cmp	r2, r3
 80010da:	dbcb      	blt.n	8001074 <prvAsmissionControlEDF+0x280>
        }
    }
    if (prev < D_new) {
 80010dc:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 80010e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d215      	bcs.n	8001114 <prvAsmissionControlEDF+0x320>
        starts[nint] = prev;
 80010e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80010ea:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80010ee:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 80010f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        lens  [nint] = D_new - prev;
 80010f6:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80010fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80010fe:	1ad1      	subs	r1, r2, r3
 8001100:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001102:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8001106:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        nint++;
 800110a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800110e:	3301      	adds	r3, #1
 8001110:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    }

    // Densities for each interval
    float dens[xListTasksNumber + 1];
 8001114:	4b8d      	ldr	r3, [pc, #564]	@ (800134c <prvAsmissionControlEDF+0x558>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	1c59      	adds	r1, r3, #1
 800111a:	1e4b      	subs	r3, r1, #1
 800111c:	663b      	str	r3, [r7, #96]	@ 0x60
 800111e:	460a      	mov	r2, r1
 8001120:	2300      	movs	r3, #0
 8001122:	60ba      	str	r2, [r7, #8]
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	f04f 0200 	mov.w	r2, #0
 800112a:	f04f 0300 	mov.w	r3, #0
 800112e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001132:	4628      	mov	r0, r5
 8001134:	0143      	lsls	r3, r0, #5
 8001136:	4620      	mov	r0, r4
 8001138:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800113c:	4620      	mov	r0, r4
 800113e:	0142      	lsls	r2, r0, #5
 8001140:	460a      	mov	r2, r1
 8001142:	2300      	movs	r3, #0
 8001144:	603a      	str	r2, [r7, #0]
 8001146:	607b      	str	r3, [r7, #4]
 8001148:	f04f 0200 	mov.w	r2, #0
 800114c:	f04f 0300 	mov.w	r3, #0
 8001150:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001154:	4628      	mov	r0, r5
 8001156:	0143      	lsls	r3, r0, #5
 8001158:	4620      	mov	r0, r4
 800115a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800115e:	4620      	mov	r0, r4
 8001160:	0142      	lsls	r2, r0, #5
 8001162:	460b      	mov	r3, r1
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	3307      	adds	r3, #7
 8001168:	08db      	lsrs	r3, r3, #3
 800116a:	00db      	lsls	r3, r3, #3
 800116c:	ebad 0d03 	sub.w	sp, sp, r3
 8001170:	466b      	mov	r3, sp
 8001172:	3303      	adds	r3, #3
 8001174:	089b      	lsrs	r3, r3, #2
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	65fb      	str	r3, [r7, #92]	@ 0x5c
    for (BaseType_t k = 0; k < nint; k++) dens[k] = 0.0f;
 800117a:	2300      	movs	r3, #0
 800117c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001180:	e00c      	b.n	800119c <prvAsmissionControlEDF+0x3a8>
 8001182:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001184:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	4413      	add	r3, r2
 800118c:	f04f 0200 	mov.w	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001196:	3301      	adds	r3, #1
 8001198:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800119c:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80011a0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80011a4:	429a      	cmp	r2, r3
 80011a6:	dbec      	blt.n	8001182 <prvAsmissionControlEDF+0x38e>

    it = listGET_HEAD_ENTRY(&xTasksList);
 80011a8:	4b69      	ldr	r3, [pc, #420]	@ (8001350 <prvAsmissionControlEDF+0x55c>)
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    for (BaseType_t i = 0; i < xListTasksNumber; i++) {
 80011b0:	2300      	movs	r3, #0
 80011b2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80011b6:	e082      	b.n	80012be <prvAsmissionControlEDF+0x4ca>
        extTCB_t *tcb = (extTCB_t *) it->pvOwner;
 80011b8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80011bc:	68db      	ldr	r3, [r3, #12]
 80011be:	657b      	str	r3, [r7, #84]	@ 0x54
        configASSERT(tcb != NULL);
 80011c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d10b      	bne.n	80011de <prvAsmissionControlEDF+0x3ea>
	__asm volatile
 80011c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80011ca:	f383 8811 	msr	BASEPRI, r3
 80011ce:	f3bf 8f6f 	isb	sy
 80011d2:	f3bf 8f4f 	dsb	sy
 80011d6:	637b      	str	r3, [r7, #52]	@ 0x34
}
 80011d8:	bf00      	nop
 80011da:	bf00      	nop
 80011dc:	e7fd      	b.n	80011da <prvAsmissionControlEDF+0x3e6>

        TickType_t C_i   = pdMS_TO_TICKS(tcb->xTaskWCET);
 80011de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80011e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80011e2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80011e6:	fb02 f303 	mul.w	r3, r2, r3
 80011ea:	4a5a      	ldr	r2, [pc, #360]	@ (8001354 <prvAsmissionControlEDF+0x560>)
 80011ec:	fba2 2303 	umull	r2, r3, r2, r3
 80011f0:	099b      	lsrs	r3, r3, #6
 80011f2:	653b      	str	r3, [r7, #80]	@ 0x50
        TickType_t absD_i = listGET_LIST_ITEM_VALUE(&tcb->pxTaskTCBListItem);
 80011f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
        TickType_t rel    = (absD_i > now) ? (absD_i - now) : 0;
 80011fa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80011fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001200:	429a      	cmp	r2, r3
 8001202:	d904      	bls.n	800120e <prvAsmissionControlEDF+0x41a>
 8001204:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001206:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	e000      	b.n	8001210 <prvAsmissionControlEDF+0x41c>
 800120e:	2300      	movs	r3, #0
 8001210:	64bb      	str	r3, [r7, #72]	@ 0x48

        for (BaseType_t k = 0; k < nint; k++) {
 8001212:	2300      	movs	r3, #0
 8001214:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001218:	e03f      	b.n	800129a <prvAsmissionControlEDF+0x4a6>
            if (rel > starts[k]) {
 800121a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800121c:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8001220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001224:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001226:	429a      	cmp	r2, r3
 8001228:	d93e      	bls.n	80012a8 <prvAsmissionControlEDF+0x4b4>
                configASSERT(lens[k] > 0);
 800122a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800122c:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8001230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d10b      	bne.n	8001250 <prvAsmissionControlEDF+0x45c>
	__asm volatile
 8001238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800123c:	f383 8811 	msr	BASEPRI, r3
 8001240:	f3bf 8f6f 	isb	sy
 8001244:	f3bf 8f4f 	dsb	sy
 8001248:	633b      	str	r3, [r7, #48]	@ 0x30
}
 800124a:	bf00      	nop
 800124c:	bf00      	nop
 800124e:	e7fd      	b.n	800124c <prvAsmissionControlEDF+0x458>
                dens[k] += ((float)C_i) / ((float)lens[k]);
 8001250:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001252:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	4413      	add	r3, r2
 800125a:	ed93 7a00 	vldr	s14, [r3]
 800125e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001260:	ee07 3a90 	vmov	s15, r3
 8001264:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 8001268:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800126a:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800126e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001272:	ee07 3a90 	vmov	s15, r3
 8001276:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800127a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800127e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001282:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001284:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	4413      	add	r3, r2
 800128c:	edc3 7a00 	vstr	s15, [r3]
        for (BaseType_t k = 0; k < nint; k++) {
 8001290:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001294:	3301      	adds	r3, #1
 8001296:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800129a:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800129e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80012a2:	429a      	cmp	r2, r3
 80012a4:	dbb9      	blt.n	800121a <prvAsmissionControlEDF+0x426>
 80012a6:	e000      	b.n	80012aa <prvAsmissionControlEDF+0x4b6>
            } else {
                break;
 80012a8:	bf00      	nop
            }
        }
        it = listGET_NEXT(it);
 80012aa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    for (BaseType_t i = 0; i < xListTasksNumber; i++) {
 80012b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80012b8:	3301      	adds	r3, #1
 80012ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80012be:	4b23      	ldr	r3, [pc, #140]	@ (800134c <prvAsmissionControlEDF+0x558>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80012c6:	429a      	cmp	r2, r3
 80012c8:	f6ff af76 	blt.w	80011b8 <prvAsmissionControlEDF+0x3c4>
    }

    // Admission rule (for all intervals up to l)
    for (BaseType_t k = 0; k < nint; k++) {
 80012cc:	2300      	movs	r3, #0
 80012ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80012d2:	e02d      	b.n	8001330 <prvAsmissionControlEDF+0x53c>
        float checkVal = ((float)C_new / (float)D_new) + dens[k];
 80012d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80012d8:	ee07 3a90 	vmov	s15, r3
 80012dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80012e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80012e4:	ee07 3a90 	vmov	s15, r3
 80012e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80012f0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80012f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	4413      	add	r3, r2
 80012fa:	edd3 7a00 	vldr	s15, [r3]
 80012fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001302:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
        if (checkVal > (1.0f - prvPeriodicTasksDensity)) {
 8001306:	4b14      	ldr	r3, [pc, #80]	@ (8001358 <prvAsmissionControlEDF+0x564>)
 8001308:	edd3 7a00 	vldr	s15, [r3]
 800130c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001310:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001314:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001318:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800131c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001320:	dd01      	ble.n	8001326 <prvAsmissionControlEDF+0x532>
            return pdFALSE;    // reject
 8001322:	2300      	movs	r3, #0
 8001324:	e00b      	b.n	800133e <prvAsmissionControlEDF+0x54a>
    for (BaseType_t k = 0; k < nint; k++) {
 8001326:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800132a:	3301      	adds	r3, #1
 800132c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001330:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8001334:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001338:	429a      	cmp	r2, r3
 800133a:	dbcb      	blt.n	80012d4 <prvAsmissionControlEDF+0x4e0>
        }
    }
    return pdTRUE;     // accept
 800133c:	2301      	movs	r3, #1
 800133e:	46b5      	mov	sp, r6
}
 8001340:	4618      	mov	r0, r3
 8001342:	37bc      	adds	r7, #188	@ 0xbc
 8001344:	46bd      	mov	sp, r7
 8001346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800134a:	bf00      	nop
 800134c:	20000094 	.word	0x20000094
 8001350:	20000080 	.word	0x20000080
 8001354:	10624dd3 	.word	0x10624dd3
 8001358:	2000009c 	.word	0x2000009c

0800135c <prvMSTDispatch>:
 * @param xOfTaskType the task can be periodic or sporadic
 * @param xFromUserRequest used for sporadic tasks. If true the user called the task to run. If false the interarrival timer asked to run the task
 */

static void prvMSTDispatch(TaskHandle_t *forTask, BaseType_t xAsCallee,
		taskType_e xOfTaskType, BaseType_t xFromUserRequest) {
 800135c:	b580      	push	{r7, lr}
 800135e:	b08c      	sub	sp, #48	@ 0x30
 8001360:	af00      	add	r7, sp, #0
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	603b      	str	r3, [r7, #0]
 8001368:	4613      	mov	r3, r2
 800136a:	71fb      	strb	r3, [r7, #7]

	if (xAsCallee == pdTRUE) {
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	2b01      	cmp	r3, #1
 8001370:	d15b      	bne.n	800142a <prvMSTDispatch+0xce>
		/*
		 Direct call to run a job
		 */
		extTCB_t *xCurrExtTCB = (extTCB_t*) pvTaskGetThreadLocalStoragePointer(
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2100      	movs	r1, #0
 8001378:	4618      	mov	r0, r3
 800137a:	f005 fcc7 	bl	8006d0c <pvTaskGetThreadLocalStoragePointer>
 800137e:	62b8      	str	r0, [r7, #40]	@ 0x28
#if mst_schedSCHEDULING_POLICY == mst_schedSCHEDULING_EDF

		/*
		We run admission control for sporadics
		*/
		if(xOfTaskType == taskTypeSporadic){
 8001380:	79fb      	ldrb	r3, [r7, #7]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d106      	bne.n	8001394 <prvMSTDispatch+0x38>
			if(!prvAsmissionControlEDF(xCurrExtTCB)){
 8001386:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001388:	f7ff fd34 	bl	8000df4 <prvAsmissionControlEDF>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	f000 8092 	beq.w	80014b8 <prvMSTDispatch+0x15c>
			}
		}
		/*
		A job is accepted, we add it to list and recompute priorities
		*/
		taskENTER_CRITICAL();
 8001394:	f006 fee0 	bl	8008158 <vPortEnterCritical>
		{
			prvAddItemToxTasksList(xCurrExtTCB, (xCurrExtTCB->xPrevAbsDeadline + xCurrExtTCB->xTaskDeadline));
 8001398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800139a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800139c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800139e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013a0:	4413      	add	r3, r2
 80013a2:	4619      	mov	r1, r3
 80013a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80013a6:	f7ff f9bd 	bl	8000724 <prvAddItemToxTasksList>
		    configASSERT(prvComputeOrderedPriorities());
 80013aa:	f7ff fc7f 	bl	8000cac <prvComputeOrderedPriorities>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d10b      	bne.n	80013cc <prvMSTDispatch+0x70>
	__asm volatile
 80013b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80013b8:	f383 8811 	msr	BASEPRI, r3
 80013bc:	f3bf 8f6f 	isb	sy
 80013c0:	f3bf 8f4f 	dsb	sy
 80013c4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80013c6:	bf00      	nop
 80013c8:	bf00      	nop
 80013ca:	e7fd      	b.n	80013c8 <prvMSTDispatch+0x6c>
		}
		taskEXIT_CRITICAL();
 80013cc:	f006 fef6 	bl	80081bc <vPortExitCritical>
#else
		//nothing
#endif
		switch (xOfTaskType) {
 80013d0:	79fb      	ldrb	r3, [r7, #7]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d002      	beq.n	80013dc <prvMSTDispatch+0x80>
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d008      	beq.n	80013ec <prvMSTDispatch+0x90>
 80013da:	e01a      	b.n	8001412 <prvMSTDispatch+0xb6>
		case taskTypePeriodic:
			//run the periodic task by unlocking the semaphore
			xTaskNotifyGive(*forTask);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	6818      	ldr	r0, [r3, #0]
 80013e0:	2300      	movs	r3, #0
 80013e2:	2202      	movs	r2, #2
 80013e4:	2100      	movs	r1, #0
 80013e6:	f006 f899 	bl	800751c <xTaskGenericNotify>
			break;
 80013ea:	e066      	b.n	80014ba <prvMSTDispatch+0x15e>
			configASSERT(prvComputeOrderedPriorities())
			;
			xTaskNotify(SporadicServerHandle, NOTIFY_SS_NEW_JOB_AVAILABLE,
					eSetBits);
#else
			if (xFromUserRequest == pdTRUE) {
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d107      	bne.n	8001402 <prvMSTDispatch+0xa6>
				xTaskNotify(*forTask, NOTIFY_USER_REQUEST, eSetBits);
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	6818      	ldr	r0, [r3, #0]
 80013f6:	2300      	movs	r3, #0
 80013f8:	2201      	movs	r2, #1
 80013fa:	2102      	movs	r1, #2
 80013fc:	f006 f88e 	bl	800751c <xTaskGenericNotify>
			} else {
				xTaskNotify(*forTask, NOTIFY_INTERARRIVAL_TIMER, eSetBits);
			}
			#endif
			break;
 8001400:	e05b      	b.n	80014ba <prvMSTDispatch+0x15e>
				xTaskNotify(*forTask, NOTIFY_INTERARRIVAL_TIMER, eSetBits);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	6818      	ldr	r0, [r3, #0]
 8001406:	2300      	movs	r3, #0
 8001408:	2201      	movs	r2, #1
 800140a:	2101      	movs	r1, #1
 800140c:	f006 f886 	bl	800751c <xTaskGenericNotify>
			break;
 8001410:	e053      	b.n	80014ba <prvMSTDispatch+0x15e>
	__asm volatile
 8001412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001416:	f383 8811 	msr	BASEPRI, r3
 800141a:	f3bf 8f6f 	isb	sy
 800141e:	f3bf 8f4f 	dsb	sy
 8001422:	623b      	str	r3, [r7, #32]
}
 8001424:	bf00      	nop
		default:
			configASSERT(pdFALSE)
 8001426:	bf00      	nop
 8001428:	e7fd      	b.n	8001426 <prvMSTDispatch+0xca>
	} else {
		/*
		 Received from a finished job, we shall remove the job from the actively running in the list
		 */
#if mst_schedSCHEDULING_POLICY == mst_schedSCHEDULING_EDF
    extTCB_t *xCurrExtTCB = (extTCB_t*) pvTaskGetThreadLocalStoragePointer(
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	2100      	movs	r1, #0
 8001430:	4618      	mov	r0, r3
 8001432:	f005 fc6b 	bl	8006d0c <pvTaskGetThreadLocalStoragePointer>
 8001436:	62f8      	str	r0, [r7, #44]	@ 0x2c
                                *forTask, mstLOCAL_STORAGE_DATA_INDEX);

    configASSERT(xCurrExtTCB != NULL);
 8001438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800143a:	2b00      	cmp	r3, #0
 800143c:	d10b      	bne.n	8001456 <prvMSTDispatch+0xfa>
	__asm volatile
 800143e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001442:	f383 8811 	msr	BASEPRI, r3
 8001446:	f3bf 8f6f 	isb	sy
 800144a:	f3bf 8f4f 	dsb	sy
 800144e:	61fb      	str	r3, [r7, #28]
}
 8001450:	bf00      	nop
 8001452:	bf00      	nop
 8001454:	e7fd      	b.n	8001452 <prvMSTDispatch+0xf6>

    taskENTER_CRITICAL();
 8001456:	f006 fe7f 	bl	8008158 <vPortEnterCritical>
    {
        if (listIS_CONTAINED_WITHIN(&xTasksList, &(xCurrExtTCB->pxTaskTCBListItem))) {
 800145a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800145c:	691b      	ldr	r3, [r3, #16]
 800145e:	4a18      	ldr	r2, [pc, #96]	@ (80014c0 <prvMSTDispatch+0x164>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d10e      	bne.n	8001482 <prvMSTDispatch+0x126>
            uxListRemove(&(xCurrExtTCB->pxTaskTCBListItem));
 8001464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001466:	4618      	mov	r0, r3
 8001468:	f003 fdee 	bl	8005048 <uxListRemove>
            xListTasksNumber--;
 800146c:	4b15      	ldr	r3, [pc, #84]	@ (80014c4 <prvMSTDispatch+0x168>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	3b01      	subs	r3, #1
 8001472:	4a14      	ldr	r2, [pc, #80]	@ (80014c4 <prvMSTDispatch+0x168>)
 8001474:	6013      	str	r3, [r2, #0]
        } else {
            configASSERT(pdFALSE);
        }

        configASSERT(prvComputeOrderedPriorities());
 8001476:	f7ff fc19 	bl	8000cac <prvComputeOrderedPriorities>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d118      	bne.n	80014b2 <prvMSTDispatch+0x156>
 8001480:	e00b      	b.n	800149a <prvMSTDispatch+0x13e>
	__asm volatile
 8001482:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001486:	f383 8811 	msr	BASEPRI, r3
 800148a:	f3bf 8f6f 	isb	sy
 800148e:	f3bf 8f4f 	dsb	sy
 8001492:	61bb      	str	r3, [r7, #24]
}
 8001494:	bf00      	nop
            configASSERT(pdFALSE);
 8001496:	bf00      	nop
 8001498:	e7fd      	b.n	8001496 <prvMSTDispatch+0x13a>
	__asm volatile
 800149a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800149e:	f383 8811 	msr	BASEPRI, r3
 80014a2:	f3bf 8f6f 	isb	sy
 80014a6:	f3bf 8f4f 	dsb	sy
 80014aa:	617b      	str	r3, [r7, #20]
}
 80014ac:	bf00      	nop
        configASSERT(prvComputeOrderedPriorities());
 80014ae:	bf00      	nop
 80014b0:	e7fd      	b.n	80014ae <prvMSTDispatch+0x152>
    }
    taskEXIT_CRITICAL();
 80014b2:	f006 fe83 	bl	80081bc <vPortExitCritical>
 80014b6:	e000      	b.n	80014ba <prvMSTDispatch+0x15e>
				return;
 80014b8:	bf00      	nop

#endif
	}

}
 80014ba:	3730      	adds	r7, #48	@ 0x30
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	20000080 	.word	0x20000080
 80014c4:	20000094 	.word	0x20000094

080014c8 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
	ulStatsTimerTicks = 0;
 80014cc:	4b03      	ldr	r3, [pc, #12]	@ (80014dc <configureTimerForRunTimeStats+0x14>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim10);
 80014d2:	4803      	ldr	r0, [pc, #12]	@ (80014e0 <configureTimerForRunTimeStats+0x18>)
 80014d4:	f002 f8a6 	bl	8003624 <HAL_TIM_Base_Start_IT>
}
 80014d8:	bf00      	nop
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	200000a4 	.word	0x200000a4
 80014e0:	200000f0 	.word	0x200000f0

080014e4 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
return ulStatsTimerTicks;
 80014e8:	4b03      	ldr	r3, [pc, #12]	@ (80014f8 <getRunTimeCounterValue+0x14>)
 80014ea:	681b      	ldr	r3, [r3, #0]
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	200000a4 	.word	0x200000a4

080014fc <MSTTask2>:
		HAL_Delay(300);
		HAL_UART_Transmit_DMA(&huart2, transmit, length);
	}
}

void MSTTask2(void *pvParameters) {
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
	vMSTSporadicTaskRun(&Task3Handle);
 8001504:	4811      	ldr	r0, [pc, #68]	@ (800154c <MSTTask2+0x50>)
 8001506:	f7ff fb93 	bl	8000c30 <vMSTSporadicTaskRun>
	vMSTSporadicTaskRun(&Task4Handle);
 800150a:	4811      	ldr	r0, [pc, #68]	@ (8001550 <MSTTask2+0x54>)
 800150c:	f7ff fb90 	bl	8000c30 <vMSTSporadicTaskRun>
	if (xSemaphoreTake(xBinarySemUART2, portMAX_DELAY) == pdTRUE) {
 8001510:	4b10      	ldr	r3, [pc, #64]	@ (8001554 <MSTTask2+0x58>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001518:	4618      	mov	r0, r3
 800151a:	f004 fa17 	bl	800594c <xQueueSemaphoreTake>
 800151e:	4603      	mov	r3, r0
 8001520:	2b01      	cmp	r3, #1
 8001522:	d10f      	bne.n	8001544 <MSTTask2+0x48>
		length = snprintf((char*) transmit, sizeof(transmit), "Task2\n");
 8001524:	4a0c      	ldr	r2, [pc, #48]	@ (8001558 <MSTTask2+0x5c>)
 8001526:	2114      	movs	r1, #20
 8001528:	480c      	ldr	r0, [pc, #48]	@ (800155c <MSTTask2+0x60>)
 800152a:	f007 faa5 	bl	8008a78 <sniprintf>
 800152e:	4603      	mov	r3, r0
 8001530:	4a0b      	ldr	r2, [pc, #44]	@ (8001560 <MSTTask2+0x64>)
 8001532:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit_DMA(&huart2, transmit, length);
 8001534:	4b0a      	ldr	r3, [pc, #40]	@ (8001560 <MSTTask2+0x64>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	b29b      	uxth	r3, r3
 800153a:	461a      	mov	r2, r3
 800153c:	4907      	ldr	r1, [pc, #28]	@ (800155c <MSTTask2+0x60>)
 800153e:	4809      	ldr	r0, [pc, #36]	@ (8001564 <MSTTask2+0x68>)
 8001540:	f002 fcaa 	bl	8003e98 <HAL_UART_Transmit_DMA>
	}
}
 8001544:	bf00      	nop
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	20000248 	.word	0x20000248
 8001550:	2000024c 	.word	0x2000024c
 8001554:	20000228 	.word	0x20000228
 8001558:	080094f0 	.word	0x080094f0
 800155c:	2000022c 	.word	0x2000022c
 8001560:	20000240 	.word	0x20000240
 8001564:	20000180 	.word	0x20000180

08001568 <MSTTask3>:

void MSTTask3(void *pvParameters) {
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 8001570:	2064      	movs	r0, #100	@ 0x64
 8001572:	f000 fcf1 	bl	8001f58 <HAL_Delay>
	if (xSemaphoreTake(xBinarySemUART2, portMAX_DELAY) == pdTRUE) {
 8001576:	4b0f      	ldr	r3, [pc, #60]	@ (80015b4 <MSTTask3+0x4c>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800157e:	4618      	mov	r0, r3
 8001580:	f004 f9e4 	bl	800594c <xQueueSemaphoreTake>
 8001584:	4603      	mov	r3, r0
 8001586:	2b01      	cmp	r3, #1
 8001588:	d10f      	bne.n	80015aa <MSTTask3+0x42>
		length = snprintf((char*) transmit, sizeof(transmit), "SPORADIC1\n");
 800158a:	4a0b      	ldr	r2, [pc, #44]	@ (80015b8 <MSTTask3+0x50>)
 800158c:	2114      	movs	r1, #20
 800158e:	480b      	ldr	r0, [pc, #44]	@ (80015bc <MSTTask3+0x54>)
 8001590:	f007 fa72 	bl	8008a78 <sniprintf>
 8001594:	4603      	mov	r3, r0
 8001596:	4a0a      	ldr	r2, [pc, #40]	@ (80015c0 <MSTTask3+0x58>)
 8001598:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit_DMA(&huart2, transmit, length);
 800159a:	4b09      	ldr	r3, [pc, #36]	@ (80015c0 <MSTTask3+0x58>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	b29b      	uxth	r3, r3
 80015a0:	461a      	mov	r2, r3
 80015a2:	4906      	ldr	r1, [pc, #24]	@ (80015bc <MSTTask3+0x54>)
 80015a4:	4807      	ldr	r0, [pc, #28]	@ (80015c4 <MSTTask3+0x5c>)
 80015a6:	f002 fc77 	bl	8003e98 <HAL_UART_Transmit_DMA>
	}
}
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	20000228 	.word	0x20000228
 80015b8:	080094f8 	.word	0x080094f8
 80015bc:	2000022c 	.word	0x2000022c
 80015c0:	20000240 	.word	0x20000240
 80015c4:	20000180 	.word	0x20000180

080015c8 <MSTTask4>:

void MSTTask4(void *pvParameters) {
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 80015d0:	2064      	movs	r0, #100	@ 0x64
 80015d2:	f000 fcc1 	bl	8001f58 <HAL_Delay>
	if (xSemaphoreTake(xBinarySemUART2, portMAX_DELAY) == pdTRUE) {
 80015d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001614 <MSTTask4+0x4c>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80015de:	4618      	mov	r0, r3
 80015e0:	f004 f9b4 	bl	800594c <xQueueSemaphoreTake>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d10f      	bne.n	800160a <MSTTask4+0x42>
		length = snprintf((char*) transmit, sizeof(transmit), "SPORADIC2\n");
 80015ea:	4a0b      	ldr	r2, [pc, #44]	@ (8001618 <MSTTask4+0x50>)
 80015ec:	2114      	movs	r1, #20
 80015ee:	480b      	ldr	r0, [pc, #44]	@ (800161c <MSTTask4+0x54>)
 80015f0:	f007 fa42 	bl	8008a78 <sniprintf>
 80015f4:	4603      	mov	r3, r0
 80015f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001620 <MSTTask4+0x58>)
 80015f8:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit_DMA(&huart2, transmit, length);
 80015fa:	4b09      	ldr	r3, [pc, #36]	@ (8001620 <MSTTask4+0x58>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	b29b      	uxth	r3, r3
 8001600:	461a      	mov	r2, r3
 8001602:	4906      	ldr	r1, [pc, #24]	@ (800161c <MSTTask4+0x54>)
 8001604:	4807      	ldr	r0, [pc, #28]	@ (8001624 <MSTTask4+0x5c>)
 8001606:	f002 fc47 	bl	8003e98 <HAL_UART_Transmit_DMA>
	}
}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20000228 	.word	0x20000228
 8001618:	08009504 	.word	0x08009504
 800161c:	2000022c 	.word	0x2000022c
 8001620:	20000240 	.word	0x20000240
 8001624:	20000180 	.word	0x20000180

08001628 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
	if (huart == &huart2) {
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	4a08      	ldr	r2, [pc, #32]	@ (8001654 <HAL_UART_TxCpltCallback+0x2c>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d109      	bne.n	800164c <HAL_UART_TxCpltCallback+0x24>
		//free sem
		BaseType_t xHigherPr = pdFALSE;
 8001638:	2300      	movs	r3, #0
 800163a:	60fb      	str	r3, [r7, #12]
		xSemaphoreGiveFromISR(xBinarySemUART2, &xHigherPr);
 800163c:	4b06      	ldr	r3, [pc, #24]	@ (8001658 <HAL_UART_TxCpltCallback+0x30>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f107 020c 	add.w	r2, r7, #12
 8001644:	4611      	mov	r1, r2
 8001646:	4618      	mov	r0, r3
 8001648:	f004 f80e 	bl	8005668 <xQueueGiveFromISR>
	}
}
 800164c:	bf00      	nop
 800164e:	3710      	adds	r7, #16
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	20000180 	.word	0x20000180
 8001658:	20000228 	.word	0x20000228

0800165c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af06      	add	r7, sp, #24
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001662:	f000 fc37 	bl	8001ed4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001666:	f000 f86b 	bl	8001740 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800166a:	f000 f9b5 	bl	80019d8 <MX_GPIO_Init>
	MX_DMA_Init();
 800166e:	f000 f993 	bl	8001998 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8001672:	f000 f967 	bl	8001944 <MX_USART2_UART_Init>
	MX_USART1_UART_Init();
 8001676:	f000 f93b 	bl	80018f0 <MX_USART1_UART_Init>
	MX_TIM10_Init();
 800167a:	f000 f917 	bl	80018ac <MX_TIM10_Init>
	MX_TIM2_Init();
 800167e:	f000 f8c9 	bl	8001814 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */

	xBinarySemUART2 = xSemaphoreCreateBinary();
 8001682:	2203      	movs	r2, #3
 8001684:	2100      	movs	r1, #0
 8001686:	2001      	movs	r0, #1
 8001688:	f003 fdef 	bl	800526a <xQueueGenericCreate>
 800168c:	4603      	mov	r3, r0
 800168e:	4a22      	ldr	r2, [pc, #136]	@ (8001718 <main+0xbc>)
 8001690:	6013      	str	r3, [r2, #0]
	xSemaphoreGive(xBinarySemUART2);
 8001692:	4b21      	ldr	r3, [pc, #132]	@ (8001718 <main+0xbc>)
 8001694:	6818      	ldr	r0, [r3, #0]
 8001696:	2300      	movs	r3, #0
 8001698:	2200      	movs	r2, #0
 800169a:	2100      	movs	r1, #0
 800169c:	f003 fe44 	bl	8005328 <xQueueGenericSend>
	                       500,                       //deadline
	                       500,                       //phase
	                       300                        //WCET
	                      );
*/
	vMSTPeriodicTaskCreate(MSTTask2, "2",
 80016a0:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80016a4:	9305      	str	r3, [sp, #20]
 80016a6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80016aa:	9304      	str	r3, [sp, #16]
 80016ac:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80016b0:	9303      	str	r3, [sp, #12]
 80016b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016b6:	9302      	str	r3, [sp, #8]
 80016b8:	4b18      	ldr	r3, [pc, #96]	@ (800171c <main+0xc0>)
 80016ba:	9301      	str	r3, [sp, #4]
 80016bc:	2302      	movs	r3, #2
 80016be:	9300      	str	r3, [sp, #0]
 80016c0:	2300      	movs	r3, #0
 80016c2:	2280      	movs	r2, #128	@ 0x80
 80016c4:	4916      	ldr	r1, [pc, #88]	@ (8001720 <main+0xc4>)
 80016c6:	4817      	ldr	r0, [pc, #92]	@ (8001724 <main+0xc8>)
 80016c8:	f7ff f864 	bl	8000794 <vMSTPeriodicTaskCreate>
	                       configMINIMAL_STACK_SIZE,
	                       NULL, 2, &Task2Handle, 1000, 300, 5000, 300);

	vMSTSporadicTaskCreate(MSTTask3, "3",
 80016cc:	2396      	movs	r3, #150	@ 0x96
 80016ce:	9304      	str	r3, [sp, #16]
 80016d0:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80016d4:	9303      	str	r3, [sp, #12]
 80016d6:	2301      	movs	r3, #1
 80016d8:	9302      	str	r3, [sp, #8]
 80016da:	4b13      	ldr	r3, [pc, #76]	@ (8001728 <main+0xcc>)
 80016dc:	9301      	str	r3, [sp, #4]
 80016de:	2301      	movs	r3, #1
 80016e0:	9300      	str	r3, [sp, #0]
 80016e2:	2300      	movs	r3, #0
 80016e4:	2280      	movs	r2, #128	@ 0x80
 80016e6:	4911      	ldr	r1, [pc, #68]	@ (800172c <main+0xd0>)
 80016e8:	4811      	ldr	r0, [pc, #68]	@ (8001730 <main+0xd4>)
 80016ea:	f7ff f96d 	bl	80009c8 <vMSTSporadicTaskCreate>
	                       configMINIMAL_STACK_SIZE,
	                       NULL, 1, &Task3Handle, 1,
	                       400, 150);
	vMSTSporadicTaskCreate(MSTTask4, "4",
 80016ee:	2396      	movs	r3, #150	@ 0x96
 80016f0:	9304      	str	r3, [sp, #16]
 80016f2:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80016f6:	9303      	str	r3, [sp, #12]
 80016f8:	2301      	movs	r3, #1
 80016fa:	9302      	str	r3, [sp, #8]
 80016fc:	4b0d      	ldr	r3, [pc, #52]	@ (8001734 <main+0xd8>)
 80016fe:	9301      	str	r3, [sp, #4]
 8001700:	2301      	movs	r3, #1
 8001702:	9300      	str	r3, [sp, #0]
 8001704:	2300      	movs	r3, #0
 8001706:	2280      	movs	r2, #128	@ 0x80
 8001708:	490b      	ldr	r1, [pc, #44]	@ (8001738 <main+0xdc>)
 800170a:	480c      	ldr	r0, [pc, #48]	@ (800173c <main+0xe0>)
 800170c:	f7ff f95c 	bl	80009c8 <vMSTSporadicTaskCreate>
		                   configMINIMAL_STACK_SIZE,
		                   NULL, 1, &Task4Handle, 1,
		                   400, 150);

	vMSTSchedulerStart();
 8001710:	f7ff fb68 	bl	8000de4 <vMSTSchedulerStart>

	//shall never arrive here
	for (;;)
 8001714:	bf00      	nop
 8001716:	e7fd      	b.n	8001714 <main+0xb8>
 8001718:	20000228 	.word	0x20000228
 800171c:	20000244 	.word	0x20000244
 8001720:	08009510 	.word	0x08009510
 8001724:	080014fd 	.word	0x080014fd
 8001728:	20000248 	.word	0x20000248
 800172c:	08009514 	.word	0x08009514
 8001730:	08001569 	.word	0x08001569
 8001734:	2000024c 	.word	0x2000024c
 8001738:	08009518 	.word	0x08009518
 800173c:	080015c9 	.word	0x080015c9

08001740 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001740:	b580      	push	{r7, lr}
 8001742:	b094      	sub	sp, #80	@ 0x50
 8001744:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001746:	f107 0320 	add.w	r3, r7, #32
 800174a:	2230      	movs	r2, #48	@ 0x30
 800174c:	2100      	movs	r1, #0
 800174e:	4618      	mov	r0, r3
 8001750:	f007 f9c8 	bl	8008ae4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001754:	f107 030c 	add.w	r3, r7, #12
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	609a      	str	r2, [r3, #8]
 8001760:	60da      	str	r2, [r3, #12]
 8001762:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001764:	2300      	movs	r3, #0
 8001766:	60bb      	str	r3, [r7, #8]
 8001768:	4b28      	ldr	r3, [pc, #160]	@ (800180c <SystemClock_Config+0xcc>)
 800176a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176c:	4a27      	ldr	r2, [pc, #156]	@ (800180c <SystemClock_Config+0xcc>)
 800176e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001772:	6413      	str	r3, [r2, #64]	@ 0x40
 8001774:	4b25      	ldr	r3, [pc, #148]	@ (800180c <SystemClock_Config+0xcc>)
 8001776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001778:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800177c:	60bb      	str	r3, [r7, #8]
 800177e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001780:	2300      	movs	r3, #0
 8001782:	607b      	str	r3, [r7, #4]
 8001784:	4b22      	ldr	r3, [pc, #136]	@ (8001810 <SystemClock_Config+0xd0>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800178c:	4a20      	ldr	r2, [pc, #128]	@ (8001810 <SystemClock_Config+0xd0>)
 800178e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001792:	6013      	str	r3, [r2, #0]
 8001794:	4b1e      	ldr	r3, [pc, #120]	@ (8001810 <SystemClock_Config+0xd0>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800179c:	607b      	str	r3, [r7, #4]
 800179e:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017a0:	2302      	movs	r3, #2
 80017a2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017a4:	2301      	movs	r3, #1
 80017a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017a8:	2310      	movs	r3, #16
 80017aa:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017ac:	2302      	movs	r3, #2
 80017ae:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017b0:	2300      	movs	r3, #0
 80017b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 80017b4:	2310      	movs	r3, #16
 80017b6:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 192;
 80017b8:	23c0      	movs	r3, #192	@ 0xc0
 80017ba:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 80017bc:	2308      	movs	r3, #8
 80017be:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80017c0:	2304      	movs	r3, #4
 80017c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80017c4:	f107 0320 	add.w	r3, r7, #32
 80017c8:	4618      	mov	r0, r3
 80017ca:	f001 fa51 	bl	8002c70 <HAL_RCC_OscConfig>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <SystemClock_Config+0x98>
		Error_Handler();
 80017d4:	f000 f92c 	bl	8001a30 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80017d8:	230f      	movs	r3, #15
 80017da:	60fb      	str	r3, [r7, #12]
	                              | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017dc:	2302      	movs	r3, #2
 80017de:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017e0:	2300      	movs	r3, #0
 80017e2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017e4:	2300      	movs	r3, #0
 80017e6:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017e8:	2300      	movs	r3, #0
 80017ea:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80017ec:	f107 030c 	add.w	r3, r7, #12
 80017f0:	2100      	movs	r1, #0
 80017f2:	4618      	mov	r0, r3
 80017f4:	f001 fcb4 	bl	8003160 <HAL_RCC_ClockConfig>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <SystemClock_Config+0xc2>
		Error_Handler();
 80017fe:	f000 f917 	bl	8001a30 <Error_Handler>
	}
}
 8001802:	bf00      	nop
 8001804:	3750      	adds	r7, #80	@ 0x50
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40023800 	.word	0x40023800
 8001810:	40007000 	.word	0x40007000

08001814 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001814:	b580      	push	{r7, lr}
 8001816:	b086      	sub	sp, #24
 8001818:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800181a:	f107 0308 	add.w	r3, r7, #8
 800181e:	2200      	movs	r2, #0
 8001820:	601a      	str	r2, [r3, #0]
 8001822:	605a      	str	r2, [r3, #4]
 8001824:	609a      	str	r2, [r3, #8]
 8001826:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001828:	463b      	mov	r3, r7
 800182a:	2200      	movs	r2, #0
 800182c:	601a      	str	r2, [r3, #0]
 800182e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001830:	4b1d      	ldr	r3, [pc, #116]	@ (80018a8 <MX_TIM2_Init+0x94>)
 8001832:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001836:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 24 - 1;
 8001838:	4b1b      	ldr	r3, [pc, #108]	@ (80018a8 <MX_TIM2_Init+0x94>)
 800183a:	2217      	movs	r2, #23
 800183c:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800183e:	4b1a      	ldr	r3, [pc, #104]	@ (80018a8 <MX_TIM2_Init+0x94>)
 8001840:	2200      	movs	r2, #0
 8001842:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 8001844:	4b18      	ldr	r3, [pc, #96]	@ (80018a8 <MX_TIM2_Init+0x94>)
 8001846:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800184a:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800184c:	4b16      	ldr	r3, [pc, #88]	@ (80018a8 <MX_TIM2_Init+0x94>)
 800184e:	2200      	movs	r2, #0
 8001850:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001852:	4b15      	ldr	r3, [pc, #84]	@ (80018a8 <MX_TIM2_Init+0x94>)
 8001854:	2200      	movs	r2, #0
 8001856:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001858:	4813      	ldr	r0, [pc, #76]	@ (80018a8 <MX_TIM2_Init+0x94>)
 800185a:	f001 fe93 	bl	8003584 <HAL_TIM_Base_Init>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <MX_TIM2_Init+0x54>
		Error_Handler();
 8001864:	f000 f8e4 	bl	8001a30 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001868:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800186c:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 800186e:	f107 0308 	add.w	r3, r7, #8
 8001872:	4619      	mov	r1, r3
 8001874:	480c      	ldr	r0, [pc, #48]	@ (80018a8 <MX_TIM2_Init+0x94>)
 8001876:	f002 f827 	bl	80038c8 <HAL_TIM_ConfigClockSource>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_TIM2_Init+0x70>
		Error_Handler();
 8001880:	f000 f8d6 	bl	8001a30 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001884:	2300      	movs	r3, #0
 8001886:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001888:	2300      	movs	r3, #0
 800188a:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800188c:	463b      	mov	r3, r7
 800188e:	4619      	mov	r1, r3
 8001890:	4805      	ldr	r0, [pc, #20]	@ (80018a8 <MX_TIM2_Init+0x94>)
 8001892:	f002 fa2f 	bl	8003cf4 <HAL_TIMEx_MasterConfigSynchronization>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <MX_TIM2_Init+0x8c>
	        != HAL_OK) {
		Error_Handler();
 800189c:	f000 f8c8 	bl	8001a30 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80018a0:	bf00      	nop
 80018a2:	3718      	adds	r7, #24
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	200000a8 	.word	0x200000a8

080018ac <MX_TIM10_Init>:
/**
 * @brief TIM10 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM10_Init(void) {
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
	/* USER CODE END TIM10_Init 0 */

	/* USER CODE BEGIN TIM10_Init 1 */

	/* USER CODE END TIM10_Init 1 */
	htim10.Instance = TIM10;
 80018b0:	4b0d      	ldr	r3, [pc, #52]	@ (80018e8 <MX_TIM10_Init+0x3c>)
 80018b2:	4a0e      	ldr	r2, [pc, #56]	@ (80018ec <MX_TIM10_Init+0x40>)
 80018b4:	601a      	str	r2, [r3, #0]
	htim10.Init.Prescaler = 15;
 80018b6:	4b0c      	ldr	r3, [pc, #48]	@ (80018e8 <MX_TIM10_Init+0x3c>)
 80018b8:	220f      	movs	r2, #15
 80018ba:	605a      	str	r2, [r3, #4]
	htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018bc:	4b0a      	ldr	r3, [pc, #40]	@ (80018e8 <MX_TIM10_Init+0x3c>)
 80018be:	2200      	movs	r2, #0
 80018c0:	609a      	str	r2, [r3, #8]
	htim10.Init.Period = 99;
 80018c2:	4b09      	ldr	r3, [pc, #36]	@ (80018e8 <MX_TIM10_Init+0x3c>)
 80018c4:	2263      	movs	r2, #99	@ 0x63
 80018c6:	60da      	str	r2, [r3, #12]
	htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018c8:	4b07      	ldr	r3, [pc, #28]	@ (80018e8 <MX_TIM10_Init+0x3c>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	611a      	str	r2, [r3, #16]
	htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018ce:	4b06      	ldr	r3, [pc, #24]	@ (80018e8 <MX_TIM10_Init+0x3c>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim10) != HAL_OK) {
 80018d4:	4804      	ldr	r0, [pc, #16]	@ (80018e8 <MX_TIM10_Init+0x3c>)
 80018d6:	f001 fe55 	bl	8003584 <HAL_TIM_Base_Init>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <MX_TIM10_Init+0x38>
		Error_Handler();
 80018e0:	f000 f8a6 	bl	8001a30 <Error_Handler>
	}
	/* USER CODE BEGIN TIM10_Init 2 */

	/* USER CODE END TIM10_Init 2 */

}
 80018e4:	bf00      	nop
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	200000f0 	.word	0x200000f0
 80018ec:	40014400 	.word	0x40014400

080018f0 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80018f4:	4b11      	ldr	r3, [pc, #68]	@ (800193c <MX_USART1_UART_Init+0x4c>)
 80018f6:	4a12      	ldr	r2, [pc, #72]	@ (8001940 <MX_USART1_UART_Init+0x50>)
 80018f8:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80018fa:	4b10      	ldr	r3, [pc, #64]	@ (800193c <MX_USART1_UART_Init+0x4c>)
 80018fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001900:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001902:	4b0e      	ldr	r3, [pc, #56]	@ (800193c <MX_USART1_UART_Init+0x4c>)
 8001904:	2200      	movs	r2, #0
 8001906:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001908:	4b0c      	ldr	r3, [pc, #48]	@ (800193c <MX_USART1_UART_Init+0x4c>)
 800190a:	2200      	movs	r2, #0
 800190c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800190e:	4b0b      	ldr	r3, [pc, #44]	@ (800193c <MX_USART1_UART_Init+0x4c>)
 8001910:	2200      	movs	r2, #0
 8001912:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001914:	4b09      	ldr	r3, [pc, #36]	@ (800193c <MX_USART1_UART_Init+0x4c>)
 8001916:	220c      	movs	r2, #12
 8001918:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800191a:	4b08      	ldr	r3, [pc, #32]	@ (800193c <MX_USART1_UART_Init+0x4c>)
 800191c:	2200      	movs	r2, #0
 800191e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001920:	4b06      	ldr	r3, [pc, #24]	@ (800193c <MX_USART1_UART_Init+0x4c>)
 8001922:	2200      	movs	r2, #0
 8001924:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001926:	4805      	ldr	r0, [pc, #20]	@ (800193c <MX_USART1_UART_Init+0x4c>)
 8001928:	f002 fa66 	bl	8003df8 <HAL_UART_Init>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8001932:	f000 f87d 	bl	8001a30 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001936:	bf00      	nop
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	20000138 	.word	0x20000138
 8001940:	40011000 	.word	0x40011000

08001944 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001948:	4b11      	ldr	r3, [pc, #68]	@ (8001990 <MX_USART2_UART_Init+0x4c>)
 800194a:	4a12      	ldr	r2, [pc, #72]	@ (8001994 <MX_USART2_UART_Init+0x50>)
 800194c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 800194e:	4b10      	ldr	r3, [pc, #64]	@ (8001990 <MX_USART2_UART_Init+0x4c>)
 8001950:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001954:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001956:	4b0e      	ldr	r3, [pc, #56]	@ (8001990 <MX_USART2_UART_Init+0x4c>)
 8001958:	2200      	movs	r2, #0
 800195a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800195c:	4b0c      	ldr	r3, [pc, #48]	@ (8001990 <MX_USART2_UART_Init+0x4c>)
 800195e:	2200      	movs	r2, #0
 8001960:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001962:	4b0b      	ldr	r3, [pc, #44]	@ (8001990 <MX_USART2_UART_Init+0x4c>)
 8001964:	2200      	movs	r2, #0
 8001966:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001968:	4b09      	ldr	r3, [pc, #36]	@ (8001990 <MX_USART2_UART_Init+0x4c>)
 800196a:	220c      	movs	r2, #12
 800196c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800196e:	4b08      	ldr	r3, [pc, #32]	@ (8001990 <MX_USART2_UART_Init+0x4c>)
 8001970:	2200      	movs	r2, #0
 8001972:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001974:	4b06      	ldr	r3, [pc, #24]	@ (8001990 <MX_USART2_UART_Init+0x4c>)
 8001976:	2200      	movs	r2, #0
 8001978:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800197a:	4805      	ldr	r0, [pc, #20]	@ (8001990 <MX_USART2_UART_Init+0x4c>)
 800197c:	f002 fa3c 	bl	8003df8 <HAL_UART_Init>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8001986:	f000 f853 	bl	8001a30 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	20000180 	.word	0x20000180
 8001994:	40004400 	.word	0x40004400

08001998 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	607b      	str	r3, [r7, #4]
 80019a2:	4b0c      	ldr	r3, [pc, #48]	@ (80019d4 <MX_DMA_Init+0x3c>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a6:	4a0b      	ldr	r2, [pc, #44]	@ (80019d4 <MX_DMA_Init+0x3c>)
 80019a8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80019ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ae:	4b09      	ldr	r3, [pc, #36]	@ (80019d4 <MX_DMA_Init+0x3c>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019b6:	607b      	str	r3, [r7, #4]
 80019b8:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80019ba:	2200      	movs	r2, #0
 80019bc:	2105      	movs	r1, #5
 80019be:	2011      	movs	r0, #17
 80019c0:	f000 fba6 	bl	8002110 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80019c4:	2011      	movs	r0, #17
 80019c6:	f000 fbbf 	bl	8002148 <HAL_NVIC_EnableIRQ>

}
 80019ca:	bf00      	nop
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	40023800 	.word	0x40023800

080019d8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	607b      	str	r3, [r7, #4]
 80019e2:	4b09      	ldr	r3, [pc, #36]	@ (8001a08 <MX_GPIO_Init+0x30>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e6:	4a08      	ldr	r2, [pc, #32]	@ (8001a08 <MX_GPIO_Init+0x30>)
 80019e8:	f043 0301 	orr.w	r3, r3, #1
 80019ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ee:	4b06      	ldr	r3, [pc, #24]	@ (8001a08 <MX_GPIO_Init+0x30>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	607b      	str	r3, [r7, #4]
 80019f8:	687b      	ldr	r3, [r7, #4]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80019fa:	bf00      	nop
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	40023800 	.word	0x40023800

08001a0c <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM9) {
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a04      	ldr	r2, [pc, #16]	@ (8001a2c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d101      	bne.n	8001a22 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8001a1e:	f000 fa7b 	bl	8001f18 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8001a22:	bf00      	nop
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40014000 	.word	0x40014000

08001a30 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a34:	b672      	cpsid	i
}
 8001a36:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001a38:	bf00      	nop
 8001a3a:	e7fd      	b.n	8001a38 <Error_Handler+0x8>

08001a3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	607b      	str	r3, [r7, #4]
 8001a46:	4b12      	ldr	r3, [pc, #72]	@ (8001a90 <HAL_MspInit+0x54>)
 8001a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a4a:	4a11      	ldr	r2, [pc, #68]	@ (8001a90 <HAL_MspInit+0x54>)
 8001a4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a50:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a52:	4b0f      	ldr	r3, [pc, #60]	@ (8001a90 <HAL_MspInit+0x54>)
 8001a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a5a:	607b      	str	r3, [r7, #4]
 8001a5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a5e:	2300      	movs	r3, #0
 8001a60:	603b      	str	r3, [r7, #0]
 8001a62:	4b0b      	ldr	r3, [pc, #44]	@ (8001a90 <HAL_MspInit+0x54>)
 8001a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a66:	4a0a      	ldr	r2, [pc, #40]	@ (8001a90 <HAL_MspInit+0x54>)
 8001a68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a6e:	4b08      	ldr	r3, [pc, #32]	@ (8001a90 <HAL_MspInit+0x54>)
 8001a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a76:	603b      	str	r3, [r7, #0]
 8001a78:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	210f      	movs	r1, #15
 8001a7e:	f06f 0001 	mvn.w	r0, #1
 8001a82:	f000 fb45 	bl	8002110 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a86:	bf00      	nop
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	40023800 	.word	0x40023800

08001a94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001aa4:	d10e      	bne.n	8001ac4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	60fb      	str	r3, [r7, #12]
 8001aaa:	4b16      	ldr	r3, [pc, #88]	@ (8001b04 <HAL_TIM_Base_MspInit+0x70>)
 8001aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aae:	4a15      	ldr	r2, [pc, #84]	@ (8001b04 <HAL_TIM_Base_MspInit+0x70>)
 8001ab0:	f043 0301 	orr.w	r3, r3, #1
 8001ab4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ab6:	4b13      	ldr	r3, [pc, #76]	@ (8001b04 <HAL_TIM_Base_MspInit+0x70>)
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	60fb      	str	r3, [r7, #12]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001ac2:	e01a      	b.n	8001afa <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM10)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a0f      	ldr	r2, [pc, #60]	@ (8001b08 <HAL_TIM_Base_MspInit+0x74>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d115      	bne.n	8001afa <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60bb      	str	r3, [r7, #8]
 8001ad2:	4b0c      	ldr	r3, [pc, #48]	@ (8001b04 <HAL_TIM_Base_MspInit+0x70>)
 8001ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ad6:	4a0b      	ldr	r2, [pc, #44]	@ (8001b04 <HAL_TIM_Base_MspInit+0x70>)
 8001ad8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001adc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ade:	4b09      	ldr	r3, [pc, #36]	@ (8001b04 <HAL_TIM_Base_MspInit+0x70>)
 8001ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ae2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ae6:	60bb      	str	r3, [r7, #8]
 8001ae8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8001aea:	2200      	movs	r2, #0
 8001aec:	2105      	movs	r1, #5
 8001aee:	2019      	movs	r0, #25
 8001af0:	f000 fb0e 	bl	8002110 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001af4:	2019      	movs	r0, #25
 8001af6:	f000 fb27 	bl	8002148 <HAL_NVIC_EnableIRQ>
}
 8001afa:	bf00      	nop
 8001afc:	3710      	adds	r7, #16
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	40023800 	.word	0x40023800
 8001b08:	40014400 	.word	0x40014400

08001b0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b08c      	sub	sp, #48	@ 0x30
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b14:	f107 031c 	add.w	r3, r7, #28
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	605a      	str	r2, [r3, #4]
 8001b1e:	609a      	str	r2, [r3, #8]
 8001b20:	60da      	str	r2, [r3, #12]
 8001b22:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a4d      	ldr	r2, [pc, #308]	@ (8001c60 <HAL_UART_MspInit+0x154>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d12d      	bne.n	8001b8a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b2e:	2300      	movs	r3, #0
 8001b30:	61bb      	str	r3, [r7, #24]
 8001b32:	4b4c      	ldr	r3, [pc, #304]	@ (8001c64 <HAL_UART_MspInit+0x158>)
 8001b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b36:	4a4b      	ldr	r2, [pc, #300]	@ (8001c64 <HAL_UART_MspInit+0x158>)
 8001b38:	f043 0310 	orr.w	r3, r3, #16
 8001b3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b3e:	4b49      	ldr	r3, [pc, #292]	@ (8001c64 <HAL_UART_MspInit+0x158>)
 8001b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b42:	f003 0310 	and.w	r3, r3, #16
 8001b46:	61bb      	str	r3, [r7, #24]
 8001b48:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	617b      	str	r3, [r7, #20]
 8001b4e:	4b45      	ldr	r3, [pc, #276]	@ (8001c64 <HAL_UART_MspInit+0x158>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b52:	4a44      	ldr	r2, [pc, #272]	@ (8001c64 <HAL_UART_MspInit+0x158>)
 8001b54:	f043 0301 	orr.w	r3, r3, #1
 8001b58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b5a:	4b42      	ldr	r3, [pc, #264]	@ (8001c64 <HAL_UART_MspInit+0x158>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	617b      	str	r3, [r7, #20]
 8001b64:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001b66:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001b6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b70:	2300      	movs	r3, #0
 8001b72:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b74:	2303      	movs	r3, #3
 8001b76:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b78:	2307      	movs	r3, #7
 8001b7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b7c:	f107 031c 	add.w	r3, r7, #28
 8001b80:	4619      	mov	r1, r3
 8001b82:	4839      	ldr	r0, [pc, #228]	@ (8001c68 <HAL_UART_MspInit+0x15c>)
 8001b84:	f000 fef0 	bl	8002968 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b88:	e066      	b.n	8001c58 <HAL_UART_MspInit+0x14c>
  else if(huart->Instance==USART2)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a37      	ldr	r2, [pc, #220]	@ (8001c6c <HAL_UART_MspInit+0x160>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d161      	bne.n	8001c58 <HAL_UART_MspInit+0x14c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b94:	2300      	movs	r3, #0
 8001b96:	613b      	str	r3, [r7, #16]
 8001b98:	4b32      	ldr	r3, [pc, #200]	@ (8001c64 <HAL_UART_MspInit+0x158>)
 8001b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b9c:	4a31      	ldr	r2, [pc, #196]	@ (8001c64 <HAL_UART_MspInit+0x158>)
 8001b9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ba2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ba4:	4b2f      	ldr	r3, [pc, #188]	@ (8001c64 <HAL_UART_MspInit+0x158>)
 8001ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bac:	613b      	str	r3, [r7, #16]
 8001bae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	4b2b      	ldr	r3, [pc, #172]	@ (8001c64 <HAL_UART_MspInit+0x158>)
 8001bb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb8:	4a2a      	ldr	r2, [pc, #168]	@ (8001c64 <HAL_UART_MspInit+0x158>)
 8001bba:	f043 0301 	orr.w	r3, r3, #1
 8001bbe:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bc0:	4b28      	ldr	r3, [pc, #160]	@ (8001c64 <HAL_UART_MspInit+0x158>)
 8001bc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc4:	f003 0301 	and.w	r3, r3, #1
 8001bc8:	60fb      	str	r3, [r7, #12]
 8001bca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001bcc:	230c      	movs	r3, #12
 8001bce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bdc:	2307      	movs	r3, #7
 8001bde:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be0:	f107 031c 	add.w	r3, r7, #28
 8001be4:	4619      	mov	r1, r3
 8001be6:	4820      	ldr	r0, [pc, #128]	@ (8001c68 <HAL_UART_MspInit+0x15c>)
 8001be8:	f000 febe 	bl	8002968 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001bec:	4b20      	ldr	r3, [pc, #128]	@ (8001c70 <HAL_UART_MspInit+0x164>)
 8001bee:	4a21      	ldr	r2, [pc, #132]	@ (8001c74 <HAL_UART_MspInit+0x168>)
 8001bf0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001bf2:	4b1f      	ldr	r3, [pc, #124]	@ (8001c70 <HAL_UART_MspInit+0x164>)
 8001bf4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001bf8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001bfa:	4b1d      	ldr	r3, [pc, #116]	@ (8001c70 <HAL_UART_MspInit+0x164>)
 8001bfc:	2240      	movs	r2, #64	@ 0x40
 8001bfe:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c00:	4b1b      	ldr	r3, [pc, #108]	@ (8001c70 <HAL_UART_MspInit+0x164>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c06:	4b1a      	ldr	r3, [pc, #104]	@ (8001c70 <HAL_UART_MspInit+0x164>)
 8001c08:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c0c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c0e:	4b18      	ldr	r3, [pc, #96]	@ (8001c70 <HAL_UART_MspInit+0x164>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c14:	4b16      	ldr	r3, [pc, #88]	@ (8001c70 <HAL_UART_MspInit+0x164>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001c1a:	4b15      	ldr	r3, [pc, #84]	@ (8001c70 <HAL_UART_MspInit+0x164>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c20:	4b13      	ldr	r3, [pc, #76]	@ (8001c70 <HAL_UART_MspInit+0x164>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c26:	4b12      	ldr	r3, [pc, #72]	@ (8001c70 <HAL_UART_MspInit+0x164>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001c2c:	4810      	ldr	r0, [pc, #64]	@ (8001c70 <HAL_UART_MspInit+0x164>)
 8001c2e:	f000 fa99 	bl	8002164 <HAL_DMA_Init>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <HAL_UART_MspInit+0x130>
      Error_Handler();
 8001c38:	f7ff fefa 	bl	8001a30 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	4a0c      	ldr	r2, [pc, #48]	@ (8001c70 <HAL_UART_MspInit+0x164>)
 8001c40:	639a      	str	r2, [r3, #56]	@ 0x38
 8001c42:	4a0b      	ldr	r2, [pc, #44]	@ (8001c70 <HAL_UART_MspInit+0x164>)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001c48:	2200      	movs	r2, #0
 8001c4a:	2105      	movs	r1, #5
 8001c4c:	2026      	movs	r0, #38	@ 0x26
 8001c4e:	f000 fa5f 	bl	8002110 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c52:	2026      	movs	r0, #38	@ 0x26
 8001c54:	f000 fa78 	bl	8002148 <HAL_NVIC_EnableIRQ>
}
 8001c58:	bf00      	nop
 8001c5a:	3730      	adds	r7, #48	@ 0x30
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	40011000 	.word	0x40011000
 8001c64:	40023800 	.word	0x40023800
 8001c68:	40020000 	.word	0x40020000
 8001c6c:	40004400 	.word	0x40004400
 8001c70:	200001c8 	.word	0x200001c8
 8001c74:	400260a0 	.word	0x400260a0

08001c78 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b08c      	sub	sp, #48	@ 0x30
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001c80:	2300      	movs	r3, #0
 8001c82:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001c84:	2300      	movs	r3, #0
 8001c86:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 8001c88:	2300      	movs	r3, #0
 8001c8a:	60bb      	str	r3, [r7, #8]
 8001c8c:	4b2e      	ldr	r3, [pc, #184]	@ (8001d48 <HAL_InitTick+0xd0>)
 8001c8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c90:	4a2d      	ldr	r2, [pc, #180]	@ (8001d48 <HAL_InitTick+0xd0>)
 8001c92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c96:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c98:	4b2b      	ldr	r3, [pc, #172]	@ (8001d48 <HAL_InitTick+0xd0>)
 8001c9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ca0:	60bb      	str	r3, [r7, #8]
 8001ca2:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ca4:	f107 020c 	add.w	r2, r7, #12
 8001ca8:	f107 0310 	add.w	r3, r7, #16
 8001cac:	4611      	mov	r1, r2
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f001 fc36 	bl	8003520 <HAL_RCC_GetClockConfig>
  /* Compute TIM9 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001cb4:	f001 fc20 	bl	80034f8 <HAL_RCC_GetPCLK2Freq>
 8001cb8:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cbc:	4a23      	ldr	r2, [pc, #140]	@ (8001d4c <HAL_InitTick+0xd4>)
 8001cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001cc2:	0c9b      	lsrs	r3, r3, #18
 8001cc4:	3b01      	subs	r3, #1
 8001cc6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8001cc8:	4b21      	ldr	r3, [pc, #132]	@ (8001d50 <HAL_InitTick+0xd8>)
 8001cca:	4a22      	ldr	r2, [pc, #136]	@ (8001d54 <HAL_InitTick+0xdc>)
 8001ccc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 8001cce:	4b20      	ldr	r3, [pc, #128]	@ (8001d50 <HAL_InitTick+0xd8>)
 8001cd0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001cd4:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 8001cd6:	4a1e      	ldr	r2, [pc, #120]	@ (8001d50 <HAL_InitTick+0xd8>)
 8001cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cda:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 8001cdc:	4b1c      	ldr	r3, [pc, #112]	@ (8001d50 <HAL_InitTick+0xd8>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ce2:	4b1b      	ldr	r3, [pc, #108]	@ (8001d50 <HAL_InitTick+0xd8>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	609a      	str	r2, [r3, #8]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ce8:	4b19      	ldr	r3, [pc, #100]	@ (8001d50 <HAL_InitTick+0xd8>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim9);
 8001cee:	4818      	ldr	r0, [pc, #96]	@ (8001d50 <HAL_InitTick+0xd8>)
 8001cf0:	f001 fc48 	bl	8003584 <HAL_TIM_Base_Init>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001cfa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d11b      	bne.n	8001d3a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim9);
 8001d02:	4813      	ldr	r0, [pc, #76]	@ (8001d50 <HAL_InitTick+0xd8>)
 8001d04:	f001 fc8e 	bl	8003624 <HAL_TIM_Base_Start_IT>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001d0e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d111      	bne.n	8001d3a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM9 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001d16:	2018      	movs	r0, #24
 8001d18:	f000 fa16 	bl	8002148 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2b0f      	cmp	r3, #15
 8001d20:	d808      	bhi.n	8001d34 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority, 0U);
 8001d22:	2200      	movs	r2, #0
 8001d24:	6879      	ldr	r1, [r7, #4]
 8001d26:	2018      	movs	r0, #24
 8001d28:	f000 f9f2 	bl	8002110 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d2c:	4a0a      	ldr	r2, [pc, #40]	@ (8001d58 <HAL_InitTick+0xe0>)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6013      	str	r3, [r2, #0]
 8001d32:	e002      	b.n	8001d3a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001d3a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3730      	adds	r7, #48	@ 0x30
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40023800 	.word	0x40023800
 8001d4c:	431bde83 	.word	0x431bde83
 8001d50:	20000250 	.word	0x20000250
 8001d54:	40014000 	.word	0x40014000
 8001d58:	20000004 	.word	0x20000004

08001d5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d60:	bf00      	nop
 8001d62:	e7fd      	b.n	8001d60 <NMI_Handler+0x4>

08001d64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d68:	bf00      	nop
 8001d6a:	e7fd      	b.n	8001d68 <HardFault_Handler+0x4>

08001d6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d70:	bf00      	nop
 8001d72:	e7fd      	b.n	8001d70 <MemManage_Handler+0x4>

08001d74 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d78:	bf00      	nop
 8001d7a:	e7fd      	b.n	8001d78 <BusFault_Handler+0x4>

08001d7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d80:	bf00      	nop
 8001d82:	e7fd      	b.n	8001d80 <UsageFault_Handler+0x4>

08001d84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d88:	bf00      	nop
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
	...

08001d94 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001d98:	4802      	ldr	r0, [pc, #8]	@ (8001da4 <DMA1_Stream6_IRQHandler+0x10>)
 8001d9a:	f000 fb7b 	bl	8002494 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001d9e:	bf00      	nop
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	200001c8 	.word	0x200001c8

08001da8 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8001dac:	4802      	ldr	r0, [pc, #8]	@ (8001db8 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001dae:	f001 fc9b 	bl	80036e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001db2:	bf00      	nop
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	20000250 	.word	0x20000250

08001dbc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	ulStatsTimerTicks++;
 8001dc0:	4b04      	ldr	r3, [pc, #16]	@ (8001dd4 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	4a03      	ldr	r2, [pc, #12]	@ (8001dd4 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8001dc8:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001dca:	4803      	ldr	r0, [pc, #12]	@ (8001dd8 <TIM1_UP_TIM10_IRQHandler+0x1c>)
 8001dcc:	f001 fc8c 	bl	80036e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001dd0:	bf00      	nop
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	200000a4 	.word	0x200000a4
 8001dd8:	200000f0 	.word	0x200000f0

08001ddc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001de0:	4802      	ldr	r0, [pc, #8]	@ (8001dec <USART2_IRQHandler+0x10>)
 8001de2:	f002 f8c9 	bl	8003f78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001de6:	bf00      	nop
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	20000180 	.word	0x20000180

08001df0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001df8:	4a14      	ldr	r2, [pc, #80]	@ (8001e4c <_sbrk+0x5c>)
 8001dfa:	4b15      	ldr	r3, [pc, #84]	@ (8001e50 <_sbrk+0x60>)
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e04:	4b13      	ldr	r3, [pc, #76]	@ (8001e54 <_sbrk+0x64>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d102      	bne.n	8001e12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e0c:	4b11      	ldr	r3, [pc, #68]	@ (8001e54 <_sbrk+0x64>)
 8001e0e:	4a12      	ldr	r2, [pc, #72]	@ (8001e58 <_sbrk+0x68>)
 8001e10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e12:	4b10      	ldr	r3, [pc, #64]	@ (8001e54 <_sbrk+0x64>)
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4413      	add	r3, r2
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d207      	bcs.n	8001e30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e20:	f006 fe68 	bl	8008af4 <__errno>
 8001e24:	4603      	mov	r3, r0
 8001e26:	220c      	movs	r2, #12
 8001e28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e2a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e2e:	e009      	b.n	8001e44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e30:	4b08      	ldr	r3, [pc, #32]	@ (8001e54 <_sbrk+0x64>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e36:	4b07      	ldr	r3, [pc, #28]	@ (8001e54 <_sbrk+0x64>)
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	4a05      	ldr	r2, [pc, #20]	@ (8001e54 <_sbrk+0x64>)
 8001e40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e42:	68fb      	ldr	r3, [r7, #12]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3718      	adds	r7, #24
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	20018000 	.word	0x20018000
 8001e50:	00000400 	.word	0x00000400
 8001e54:	20000298 	.word	0x20000298
 8001e58:	20004e38 	.word	0x20004e38

08001e5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e60:	4b06      	ldr	r3, [pc, #24]	@ (8001e7c <SystemInit+0x20>)
 8001e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e66:	4a05      	ldr	r2, [pc, #20]	@ (8001e7c <SystemInit+0x20>)
 8001e68:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e6c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e70:	bf00      	nop
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	e000ed00 	.word	0xe000ed00

08001e80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e80:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001eb8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001e84:	f7ff ffea 	bl	8001e5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e88:	480c      	ldr	r0, [pc, #48]	@ (8001ebc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e8a:	490d      	ldr	r1, [pc, #52]	@ (8001ec0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e8c:	4a0d      	ldr	r2, [pc, #52]	@ (8001ec4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e90:	e002      	b.n	8001e98 <LoopCopyDataInit>

08001e92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e96:	3304      	adds	r3, #4

08001e98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e9c:	d3f9      	bcc.n	8001e92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e9e:	4a0a      	ldr	r2, [pc, #40]	@ (8001ec8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ea0:	4c0a      	ldr	r4, [pc, #40]	@ (8001ecc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ea2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ea4:	e001      	b.n	8001eaa <LoopFillZerobss>

08001ea6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ea6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ea8:	3204      	adds	r2, #4

08001eaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001eac:	d3fb      	bcc.n	8001ea6 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001eae:	f006 fe27 	bl	8008b00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001eb2:	f7ff fbd3 	bl	800165c <main>
  bx  lr    
 8001eb6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001eb8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001ebc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ec0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001ec4:	080095c0 	.word	0x080095c0
  ldr r2, =_sbss
 8001ec8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001ecc:	20004e34 	.word	0x20004e34

08001ed0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ed0:	e7fe      	b.n	8001ed0 <ADC_IRQHandler>
	...

08001ed4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ed8:	4b0e      	ldr	r3, [pc, #56]	@ (8001f14 <HAL_Init+0x40>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a0d      	ldr	r2, [pc, #52]	@ (8001f14 <HAL_Init+0x40>)
 8001ede:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ee2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8001f14 <HAL_Init+0x40>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a0a      	ldr	r2, [pc, #40]	@ (8001f14 <HAL_Init+0x40>)
 8001eea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001eee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ef0:	4b08      	ldr	r3, [pc, #32]	@ (8001f14 <HAL_Init+0x40>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a07      	ldr	r2, [pc, #28]	@ (8001f14 <HAL_Init+0x40>)
 8001ef6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001efa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001efc:	2003      	movs	r0, #3
 8001efe:	f000 f8fc 	bl	80020fa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f02:	200f      	movs	r0, #15
 8001f04:	f7ff feb8 	bl	8001c78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f08:	f7ff fd98 	bl	8001a3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	40023c00 	.word	0x40023c00

08001f18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f1c:	4b06      	ldr	r3, [pc, #24]	@ (8001f38 <HAL_IncTick+0x20>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	461a      	mov	r2, r3
 8001f22:	4b06      	ldr	r3, [pc, #24]	@ (8001f3c <HAL_IncTick+0x24>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4413      	add	r3, r2
 8001f28:	4a04      	ldr	r2, [pc, #16]	@ (8001f3c <HAL_IncTick+0x24>)
 8001f2a:	6013      	str	r3, [r2, #0]
}
 8001f2c:	bf00      	nop
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	20000008 	.word	0x20000008
 8001f3c:	2000029c 	.word	0x2000029c

08001f40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  return uwTick;
 8001f44:	4b03      	ldr	r3, [pc, #12]	@ (8001f54 <HAL_GetTick+0x14>)
 8001f46:	681b      	ldr	r3, [r3, #0]
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	2000029c 	.word	0x2000029c

08001f58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f60:	f7ff ffee 	bl	8001f40 <HAL_GetTick>
 8001f64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001f70:	d005      	beq.n	8001f7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f72:	4b0a      	ldr	r3, [pc, #40]	@ (8001f9c <HAL_Delay+0x44>)
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	461a      	mov	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f7e:	bf00      	nop
 8001f80:	f7ff ffde 	bl	8001f40 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d8f7      	bhi.n	8001f80 <HAL_Delay+0x28>
  {
  }
}
 8001f90:	bf00      	nop
 8001f92:	bf00      	nop
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	20000008 	.word	0x20000008

08001fa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fb0:	4b0c      	ldr	r3, [pc, #48]	@ (8001fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fb6:	68ba      	ldr	r2, [r7, #8]
 8001fb8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fc8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001fcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fd2:	4a04      	ldr	r2, [pc, #16]	@ (8001fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	60d3      	str	r3, [r2, #12]
}
 8001fd8:	bf00      	nop
 8001fda:	3714      	adds	r7, #20
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr
 8001fe4:	e000ed00 	.word	0xe000ed00

08001fe8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fec:	4b04      	ldr	r3, [pc, #16]	@ (8002000 <__NVIC_GetPriorityGrouping+0x18>)
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	0a1b      	lsrs	r3, r3, #8
 8001ff2:	f003 0307 	and.w	r3, r3, #7
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr
 8002000:	e000ed00 	.word	0xe000ed00

08002004 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	4603      	mov	r3, r0
 800200c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800200e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002012:	2b00      	cmp	r3, #0
 8002014:	db0b      	blt.n	800202e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002016:	79fb      	ldrb	r3, [r7, #7]
 8002018:	f003 021f 	and.w	r2, r3, #31
 800201c:	4907      	ldr	r1, [pc, #28]	@ (800203c <__NVIC_EnableIRQ+0x38>)
 800201e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002022:	095b      	lsrs	r3, r3, #5
 8002024:	2001      	movs	r0, #1
 8002026:	fa00 f202 	lsl.w	r2, r0, r2
 800202a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800202e:	bf00      	nop
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	e000e100 	.word	0xe000e100

08002040 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	4603      	mov	r3, r0
 8002048:	6039      	str	r1, [r7, #0]
 800204a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800204c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002050:	2b00      	cmp	r3, #0
 8002052:	db0a      	blt.n	800206a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	b2da      	uxtb	r2, r3
 8002058:	490c      	ldr	r1, [pc, #48]	@ (800208c <__NVIC_SetPriority+0x4c>)
 800205a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205e:	0112      	lsls	r2, r2, #4
 8002060:	b2d2      	uxtb	r2, r2
 8002062:	440b      	add	r3, r1
 8002064:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002068:	e00a      	b.n	8002080 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	b2da      	uxtb	r2, r3
 800206e:	4908      	ldr	r1, [pc, #32]	@ (8002090 <__NVIC_SetPriority+0x50>)
 8002070:	79fb      	ldrb	r3, [r7, #7]
 8002072:	f003 030f 	and.w	r3, r3, #15
 8002076:	3b04      	subs	r3, #4
 8002078:	0112      	lsls	r2, r2, #4
 800207a:	b2d2      	uxtb	r2, r2
 800207c:	440b      	add	r3, r1
 800207e:	761a      	strb	r2, [r3, #24]
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr
 800208c:	e000e100 	.word	0xe000e100
 8002090:	e000ed00 	.word	0xe000ed00

08002094 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002094:	b480      	push	{r7}
 8002096:	b089      	sub	sp, #36	@ 0x24
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f003 0307 	and.w	r3, r3, #7
 80020a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	f1c3 0307 	rsb	r3, r3, #7
 80020ae:	2b04      	cmp	r3, #4
 80020b0:	bf28      	it	cs
 80020b2:	2304      	movcs	r3, #4
 80020b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	3304      	adds	r3, #4
 80020ba:	2b06      	cmp	r3, #6
 80020bc:	d902      	bls.n	80020c4 <NVIC_EncodePriority+0x30>
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	3b03      	subs	r3, #3
 80020c2:	e000      	b.n	80020c6 <NVIC_EncodePriority+0x32>
 80020c4:	2300      	movs	r3, #0
 80020c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	43da      	mvns	r2, r3
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	401a      	ands	r2, r3
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020dc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	fa01 f303 	lsl.w	r3, r1, r3
 80020e6:	43d9      	mvns	r1, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020ec:	4313      	orrs	r3, r2
         );
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3724      	adds	r7, #36	@ 0x24
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr

080020fa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b082      	sub	sp, #8
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f7ff ff4c 	bl	8001fa0 <__NVIC_SetPriorityGrouping>
}
 8002108:	bf00      	nop
 800210a:	3708      	adds	r7, #8
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002110:	b580      	push	{r7, lr}
 8002112:	b086      	sub	sp, #24
 8002114:	af00      	add	r7, sp, #0
 8002116:	4603      	mov	r3, r0
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
 800211c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800211e:	2300      	movs	r3, #0
 8002120:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002122:	f7ff ff61 	bl	8001fe8 <__NVIC_GetPriorityGrouping>
 8002126:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	68b9      	ldr	r1, [r7, #8]
 800212c:	6978      	ldr	r0, [r7, #20]
 800212e:	f7ff ffb1 	bl	8002094 <NVIC_EncodePriority>
 8002132:	4602      	mov	r2, r0
 8002134:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002138:	4611      	mov	r1, r2
 800213a:	4618      	mov	r0, r3
 800213c:	f7ff ff80 	bl	8002040 <__NVIC_SetPriority>
}
 8002140:	bf00      	nop
 8002142:	3718      	adds	r7, #24
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	4603      	mov	r3, r0
 8002150:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002156:	4618      	mov	r0, r3
 8002158:	f7ff ff54 	bl	8002004 <__NVIC_EnableIRQ>
}
 800215c:	bf00      	nop
 800215e:	3708      	adds	r7, #8
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800216c:	2300      	movs	r3, #0
 800216e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002170:	f7ff fee6 	bl	8001f40 <HAL_GetTick>
 8002174:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d101      	bne.n	8002180 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e099      	b.n	80022b4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2202      	movs	r2, #2
 8002184:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f022 0201 	bic.w	r2, r2, #1
 800219e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021a0:	e00f      	b.n	80021c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021a2:	f7ff fecd 	bl	8001f40 <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	2b05      	cmp	r3, #5
 80021ae:	d908      	bls.n	80021c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2220      	movs	r2, #32
 80021b4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2203      	movs	r2, #3
 80021ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e078      	b.n	80022b4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d1e8      	bne.n	80021a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80021d8:	697a      	ldr	r2, [r7, #20]
 80021da:	4b38      	ldr	r3, [pc, #224]	@ (80022bc <HAL_DMA_Init+0x158>)
 80021dc:	4013      	ands	r3, r2
 80021de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685a      	ldr	r2, [r3, #4]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	691b      	ldr	r3, [r3, #16]
 80021f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002206:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a1b      	ldr	r3, [r3, #32]
 800220c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800220e:	697a      	ldr	r2, [r7, #20]
 8002210:	4313      	orrs	r3, r2
 8002212:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002218:	2b04      	cmp	r3, #4
 800221a:	d107      	bne.n	800222c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002224:	4313      	orrs	r3, r2
 8002226:	697a      	ldr	r2, [r7, #20]
 8002228:	4313      	orrs	r3, r2
 800222a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	697a      	ldr	r2, [r7, #20]
 8002232:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	695b      	ldr	r3, [r3, #20]
 800223a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	f023 0307 	bic.w	r3, r3, #7
 8002242:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002248:	697a      	ldr	r2, [r7, #20]
 800224a:	4313      	orrs	r3, r2
 800224c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002252:	2b04      	cmp	r3, #4
 8002254:	d117      	bne.n	8002286 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800225a:	697a      	ldr	r2, [r7, #20]
 800225c:	4313      	orrs	r3, r2
 800225e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002264:	2b00      	cmp	r3, #0
 8002266:	d00e      	beq.n	8002286 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f000 fb01 	bl	8002870 <DMA_CheckFifoParam>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d008      	beq.n	8002286 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2240      	movs	r2, #64	@ 0x40
 8002278:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2201      	movs	r2, #1
 800227e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002282:	2301      	movs	r3, #1
 8002284:	e016      	b.n	80022b4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	697a      	ldr	r2, [r7, #20]
 800228c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f000 fab8 	bl	8002804 <DMA_CalcBaseAndBitshift>
 8002294:	4603      	mov	r3, r0
 8002296:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800229c:	223f      	movs	r2, #63	@ 0x3f
 800229e:	409a      	lsls	r2, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2201      	movs	r2, #1
 80022ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80022b2:	2300      	movs	r3, #0
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3718      	adds	r7, #24
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	f010803f 	.word	0xf010803f

080022c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	607a      	str	r2, [r7, #4]
 80022cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022ce:	2300      	movs	r3, #0
 80022d0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022d6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d101      	bne.n	80022e6 <HAL_DMA_Start_IT+0x26>
 80022e2:	2302      	movs	r3, #2
 80022e4:	e040      	b.n	8002368 <HAL_DMA_Start_IT+0xa8>
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2201      	movs	r2, #1
 80022ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d12f      	bne.n	800235a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2202      	movs	r2, #2
 80022fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2200      	movs	r2, #0
 8002306:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	68b9      	ldr	r1, [r7, #8]
 800230e:	68f8      	ldr	r0, [r7, #12]
 8002310:	f000 fa4a 	bl	80027a8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002318:	223f      	movs	r2, #63	@ 0x3f
 800231a:	409a      	lsls	r2, r3
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f042 0216 	orr.w	r2, r2, #22
 800232e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002334:	2b00      	cmp	r3, #0
 8002336:	d007      	beq.n	8002348 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f042 0208 	orr.w	r2, r2, #8
 8002346:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f042 0201 	orr.w	r2, r2, #1
 8002356:	601a      	str	r2, [r3, #0]
 8002358:	e005      	b.n	8002366 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2200      	movs	r2, #0
 800235e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002362:	2302      	movs	r3, #2
 8002364:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002366:	7dfb      	ldrb	r3, [r7, #23]
}
 8002368:	4618      	mov	r0, r3
 800236a:	3718      	adds	r7, #24
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}

08002370 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800237c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800237e:	f7ff fddf 	bl	8001f40 <HAL_GetTick>
 8002382:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800238a:	b2db      	uxtb	r3, r3
 800238c:	2b02      	cmp	r3, #2
 800238e:	d008      	beq.n	80023a2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2280      	movs	r2, #128	@ 0x80
 8002394:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e052      	b.n	8002448 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f022 0216 	bic.w	r2, r2, #22
 80023b0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	695a      	ldr	r2, [r3, #20]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80023c0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d103      	bne.n	80023d2 <HAL_DMA_Abort+0x62>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d007      	beq.n	80023e2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f022 0208 	bic.w	r2, r2, #8
 80023e0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f022 0201 	bic.w	r2, r2, #1
 80023f0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023f2:	e013      	b.n	800241c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023f4:	f7ff fda4 	bl	8001f40 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b05      	cmp	r3, #5
 8002400:	d90c      	bls.n	800241c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2220      	movs	r2, #32
 8002406:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2203      	movs	r2, #3
 800240c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002418:	2303      	movs	r3, #3
 800241a:	e015      	b.n	8002448 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1e4      	bne.n	80023f4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800242e:	223f      	movs	r2, #63	@ 0x3f
 8002430:	409a      	lsls	r2, r3
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2201      	movs	r2, #1
 800243a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002446:	2300      	movs	r3, #0
}
 8002448:	4618      	mov	r0, r3
 800244a:	3710      	adds	r7, #16
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800245e:	b2db      	uxtb	r3, r3
 8002460:	2b02      	cmp	r3, #2
 8002462:	d004      	beq.n	800246e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2280      	movs	r2, #128	@ 0x80
 8002468:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e00c      	b.n	8002488 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2205      	movs	r2, #5
 8002472:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f022 0201 	bic.w	r2, r2, #1
 8002484:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002486:	2300      	movs	r3, #0
}
 8002488:	4618      	mov	r0, r3
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b086      	sub	sp, #24
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800249c:	2300      	movs	r3, #0
 800249e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80024a0:	4b8e      	ldr	r3, [pc, #568]	@ (80026dc <HAL_DMA_IRQHandler+0x248>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a8e      	ldr	r2, [pc, #568]	@ (80026e0 <HAL_DMA_IRQHandler+0x24c>)
 80024a6:	fba2 2303 	umull	r2, r3, r2, r3
 80024aa:	0a9b      	lsrs	r3, r3, #10
 80024ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024be:	2208      	movs	r2, #8
 80024c0:	409a      	lsls	r2, r3
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	4013      	ands	r3, r2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d01a      	beq.n	8002500 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0304 	and.w	r3, r3, #4
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d013      	beq.n	8002500 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f022 0204 	bic.w	r2, r2, #4
 80024e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024ec:	2208      	movs	r2, #8
 80024ee:	409a      	lsls	r2, r3
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024f8:	f043 0201 	orr.w	r2, r3, #1
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002504:	2201      	movs	r2, #1
 8002506:	409a      	lsls	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	4013      	ands	r3, r2
 800250c:	2b00      	cmp	r3, #0
 800250e:	d012      	beq.n	8002536 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800251a:	2b00      	cmp	r3, #0
 800251c:	d00b      	beq.n	8002536 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002522:	2201      	movs	r2, #1
 8002524:	409a      	lsls	r2, r3
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800252e:	f043 0202 	orr.w	r2, r3, #2
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800253a:	2204      	movs	r2, #4
 800253c:	409a      	lsls	r2, r3
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	4013      	ands	r3, r2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d012      	beq.n	800256c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0302 	and.w	r3, r3, #2
 8002550:	2b00      	cmp	r3, #0
 8002552:	d00b      	beq.n	800256c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002558:	2204      	movs	r2, #4
 800255a:	409a      	lsls	r2, r3
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002564:	f043 0204 	orr.w	r2, r3, #4
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002570:	2210      	movs	r2, #16
 8002572:	409a      	lsls	r2, r3
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	4013      	ands	r3, r2
 8002578:	2b00      	cmp	r3, #0
 800257a:	d043      	beq.n	8002604 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0308 	and.w	r3, r3, #8
 8002586:	2b00      	cmp	r3, #0
 8002588:	d03c      	beq.n	8002604 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800258e:	2210      	movs	r2, #16
 8002590:	409a      	lsls	r2, r3
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d018      	beq.n	80025d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d108      	bne.n	80025c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d024      	beq.n	8002604 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	4798      	blx	r3
 80025c2:	e01f      	b.n	8002604 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d01b      	beq.n	8002604 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	4798      	blx	r3
 80025d4:	e016      	b.n	8002604 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d107      	bne.n	80025f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f022 0208 	bic.w	r2, r2, #8
 80025f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d003      	beq.n	8002604 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002608:	2220      	movs	r2, #32
 800260a:	409a      	lsls	r2, r3
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	4013      	ands	r3, r2
 8002610:	2b00      	cmp	r3, #0
 8002612:	f000 808f 	beq.w	8002734 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0310 	and.w	r3, r3, #16
 8002620:	2b00      	cmp	r3, #0
 8002622:	f000 8087 	beq.w	8002734 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800262a:	2220      	movs	r2, #32
 800262c:	409a      	lsls	r2, r3
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002638:	b2db      	uxtb	r3, r3
 800263a:	2b05      	cmp	r3, #5
 800263c:	d136      	bne.n	80026ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f022 0216 	bic.w	r2, r2, #22
 800264c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	695a      	ldr	r2, [r3, #20]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800265c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002662:	2b00      	cmp	r3, #0
 8002664:	d103      	bne.n	800266e <HAL_DMA_IRQHandler+0x1da>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800266a:	2b00      	cmp	r3, #0
 800266c:	d007      	beq.n	800267e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f022 0208 	bic.w	r2, r2, #8
 800267c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002682:	223f      	movs	r2, #63	@ 0x3f
 8002684:	409a      	lsls	r2, r3
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2201      	movs	r2, #1
 800268e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d07e      	beq.n	80027a0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	4798      	blx	r3
        }
        return;
 80026aa:	e079      	b.n	80027a0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d01d      	beq.n	80026f6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d10d      	bne.n	80026e4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d031      	beq.n	8002734 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	4798      	blx	r3
 80026d8:	e02c      	b.n	8002734 <HAL_DMA_IRQHandler+0x2a0>
 80026da:	bf00      	nop
 80026dc:	20000000 	.word	0x20000000
 80026e0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d023      	beq.n	8002734 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	4798      	blx	r3
 80026f4:	e01e      	b.n	8002734 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002700:	2b00      	cmp	r3, #0
 8002702:	d10f      	bne.n	8002724 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f022 0210 	bic.w	r2, r2, #16
 8002712:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002728:	2b00      	cmp	r3, #0
 800272a:	d003      	beq.n	8002734 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002738:	2b00      	cmp	r3, #0
 800273a:	d032      	beq.n	80027a2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002740:	f003 0301 	and.w	r3, r3, #1
 8002744:	2b00      	cmp	r3, #0
 8002746:	d022      	beq.n	800278e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2205      	movs	r2, #5
 800274c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f022 0201 	bic.w	r2, r2, #1
 800275e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	3301      	adds	r3, #1
 8002764:	60bb      	str	r3, [r7, #8]
 8002766:	697a      	ldr	r2, [r7, #20]
 8002768:	429a      	cmp	r2, r3
 800276a:	d307      	bcc.n	800277c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1f2      	bne.n	8002760 <HAL_DMA_IRQHandler+0x2cc>
 800277a:	e000      	b.n	800277e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800277c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2201      	movs	r2, #1
 8002782:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002792:	2b00      	cmp	r3, #0
 8002794:	d005      	beq.n	80027a2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	4798      	blx	r3
 800279e:	e000      	b.n	80027a2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80027a0:	bf00      	nop
    }
  }
}
 80027a2:	3718      	adds	r7, #24
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	60b9      	str	r1, [r7, #8]
 80027b2:	607a      	str	r2, [r7, #4]
 80027b4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80027c4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	683a      	ldr	r2, [r7, #0]
 80027cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	2b40      	cmp	r3, #64	@ 0x40
 80027d4:	d108      	bne.n	80027e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	68ba      	ldr	r2, [r7, #8]
 80027e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80027e6:	e007      	b.n	80027f8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	68ba      	ldr	r2, [r7, #8]
 80027ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	60da      	str	r2, [r3, #12]
}
 80027f8:	bf00      	nop
 80027fa:	3714      	adds	r7, #20
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	b2db      	uxtb	r3, r3
 8002812:	3b10      	subs	r3, #16
 8002814:	4a14      	ldr	r2, [pc, #80]	@ (8002868 <DMA_CalcBaseAndBitshift+0x64>)
 8002816:	fba2 2303 	umull	r2, r3, r2, r3
 800281a:	091b      	lsrs	r3, r3, #4
 800281c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800281e:	4a13      	ldr	r2, [pc, #76]	@ (800286c <DMA_CalcBaseAndBitshift+0x68>)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	4413      	add	r3, r2
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	461a      	mov	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2b03      	cmp	r3, #3
 8002830:	d909      	bls.n	8002846 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800283a:	f023 0303 	bic.w	r3, r3, #3
 800283e:	1d1a      	adds	r2, r3, #4
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	659a      	str	r2, [r3, #88]	@ 0x58
 8002844:	e007      	b.n	8002856 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800284e:	f023 0303 	bic.w	r3, r3, #3
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800285a:	4618      	mov	r0, r3
 800285c:	3714      	adds	r7, #20
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	aaaaaaab 	.word	0xaaaaaaab
 800286c:	08009574 	.word	0x08009574

08002870 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002870:	b480      	push	{r7}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002878:	2300      	movs	r3, #0
 800287a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002880:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d11f      	bne.n	80028ca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	2b03      	cmp	r3, #3
 800288e:	d856      	bhi.n	800293e <DMA_CheckFifoParam+0xce>
 8002890:	a201      	add	r2, pc, #4	@ (adr r2, 8002898 <DMA_CheckFifoParam+0x28>)
 8002892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002896:	bf00      	nop
 8002898:	080028a9 	.word	0x080028a9
 800289c:	080028bb 	.word	0x080028bb
 80028a0:	080028a9 	.word	0x080028a9
 80028a4:	0800293f 	.word	0x0800293f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d046      	beq.n	8002942 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028b8:	e043      	b.n	8002942 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028be:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80028c2:	d140      	bne.n	8002946 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028c8:	e03d      	b.n	8002946 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	699b      	ldr	r3, [r3, #24]
 80028ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80028d2:	d121      	bne.n	8002918 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	2b03      	cmp	r3, #3
 80028d8:	d837      	bhi.n	800294a <DMA_CheckFifoParam+0xda>
 80028da:	a201      	add	r2, pc, #4	@ (adr r2, 80028e0 <DMA_CheckFifoParam+0x70>)
 80028dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028e0:	080028f1 	.word	0x080028f1
 80028e4:	080028f7 	.word	0x080028f7
 80028e8:	080028f1 	.word	0x080028f1
 80028ec:	08002909 	.word	0x08002909
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	73fb      	strb	r3, [r7, #15]
      break;
 80028f4:	e030      	b.n	8002958 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028fa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d025      	beq.n	800294e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002906:	e022      	b.n	800294e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800290c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002910:	d11f      	bne.n	8002952 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002916:	e01c      	b.n	8002952 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	2b02      	cmp	r3, #2
 800291c:	d903      	bls.n	8002926 <DMA_CheckFifoParam+0xb6>
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	2b03      	cmp	r3, #3
 8002922:	d003      	beq.n	800292c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002924:	e018      	b.n	8002958 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	73fb      	strb	r3, [r7, #15]
      break;
 800292a:	e015      	b.n	8002958 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002930:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d00e      	beq.n	8002956 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	73fb      	strb	r3, [r7, #15]
      break;
 800293c:	e00b      	b.n	8002956 <DMA_CheckFifoParam+0xe6>
      break;
 800293e:	bf00      	nop
 8002940:	e00a      	b.n	8002958 <DMA_CheckFifoParam+0xe8>
      break;
 8002942:	bf00      	nop
 8002944:	e008      	b.n	8002958 <DMA_CheckFifoParam+0xe8>
      break;
 8002946:	bf00      	nop
 8002948:	e006      	b.n	8002958 <DMA_CheckFifoParam+0xe8>
      break;
 800294a:	bf00      	nop
 800294c:	e004      	b.n	8002958 <DMA_CheckFifoParam+0xe8>
      break;
 800294e:	bf00      	nop
 8002950:	e002      	b.n	8002958 <DMA_CheckFifoParam+0xe8>
      break;   
 8002952:	bf00      	nop
 8002954:	e000      	b.n	8002958 <DMA_CheckFifoParam+0xe8>
      break;
 8002956:	bf00      	nop
    }
  } 
  
  return status; 
 8002958:	7bfb      	ldrb	r3, [r7, #15]
}
 800295a:	4618      	mov	r0, r3
 800295c:	3714      	adds	r7, #20
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop

08002968 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002968:	b480      	push	{r7}
 800296a:	b089      	sub	sp, #36	@ 0x24
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002972:	2300      	movs	r3, #0
 8002974:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002976:	2300      	movs	r3, #0
 8002978:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800297a:	2300      	movs	r3, #0
 800297c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800297e:	2300      	movs	r3, #0
 8002980:	61fb      	str	r3, [r7, #28]
 8002982:	e159      	b.n	8002c38 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002984:	2201      	movs	r2, #1
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	697a      	ldr	r2, [r7, #20]
 8002994:	4013      	ands	r3, r2
 8002996:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002998:	693a      	ldr	r2, [r7, #16]
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	429a      	cmp	r2, r3
 800299e:	f040 8148 	bne.w	8002c32 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f003 0303 	and.w	r3, r3, #3
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d005      	beq.n	80029ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d130      	bne.n	8002a1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	2203      	movs	r2, #3
 80029c6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ca:	43db      	mvns	r3, r3
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	4013      	ands	r3, r2
 80029d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	68da      	ldr	r2, [r3, #12]
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	fa02 f303 	lsl.w	r3, r2, r3
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	69ba      	ldr	r2, [r7, #24]
 80029e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029f0:	2201      	movs	r2, #1
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	fa02 f303 	lsl.w	r3, r2, r3
 80029f8:	43db      	mvns	r3, r3
 80029fa:	69ba      	ldr	r2, [r7, #24]
 80029fc:	4013      	ands	r3, r2
 80029fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	091b      	lsrs	r3, r3, #4
 8002a06:	f003 0201 	and.w	r2, r3, #1
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f003 0303 	and.w	r3, r3, #3
 8002a24:	2b03      	cmp	r3, #3
 8002a26:	d017      	beq.n	8002a58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	2203      	movs	r2, #3
 8002a34:	fa02 f303 	lsl.w	r3, r2, r3
 8002a38:	43db      	mvns	r3, r3
 8002a3a:	69ba      	ldr	r2, [r7, #24]
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	689a      	ldr	r2, [r3, #8]
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	005b      	lsls	r3, r3, #1
 8002a48:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f003 0303 	and.w	r3, r3, #3
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d123      	bne.n	8002aac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	08da      	lsrs	r2, r3, #3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	3208      	adds	r2, #8
 8002a6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	f003 0307 	and.w	r3, r3, #7
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	220f      	movs	r2, #15
 8002a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a80:	43db      	mvns	r3, r3
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	4013      	ands	r3, r2
 8002a86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	691a      	ldr	r2, [r3, #16]
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	f003 0307 	and.w	r3, r3, #7
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	08da      	lsrs	r2, r3, #3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	3208      	adds	r2, #8
 8002aa6:	69b9      	ldr	r1, [r7, #24]
 8002aa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	2203      	movs	r2, #3
 8002ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8002abc:	43db      	mvns	r3, r3
 8002abe:	69ba      	ldr	r2, [r7, #24]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f003 0203 	and.w	r2, r3, #3
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	f000 80a2 	beq.w	8002c32 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aee:	2300      	movs	r3, #0
 8002af0:	60fb      	str	r3, [r7, #12]
 8002af2:	4b57      	ldr	r3, [pc, #348]	@ (8002c50 <HAL_GPIO_Init+0x2e8>)
 8002af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002af6:	4a56      	ldr	r2, [pc, #344]	@ (8002c50 <HAL_GPIO_Init+0x2e8>)
 8002af8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002afc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002afe:	4b54      	ldr	r3, [pc, #336]	@ (8002c50 <HAL_GPIO_Init+0x2e8>)
 8002b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b06:	60fb      	str	r3, [r7, #12]
 8002b08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b0a:	4a52      	ldr	r2, [pc, #328]	@ (8002c54 <HAL_GPIO_Init+0x2ec>)
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	089b      	lsrs	r3, r3, #2
 8002b10:	3302      	adds	r3, #2
 8002b12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	f003 0303 	and.w	r3, r3, #3
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	220f      	movs	r2, #15
 8002b22:	fa02 f303 	lsl.w	r3, r2, r3
 8002b26:	43db      	mvns	r3, r3
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a49      	ldr	r2, [pc, #292]	@ (8002c58 <HAL_GPIO_Init+0x2f0>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d019      	beq.n	8002b6a <HAL_GPIO_Init+0x202>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a48      	ldr	r2, [pc, #288]	@ (8002c5c <HAL_GPIO_Init+0x2f4>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d013      	beq.n	8002b66 <HAL_GPIO_Init+0x1fe>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a47      	ldr	r2, [pc, #284]	@ (8002c60 <HAL_GPIO_Init+0x2f8>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d00d      	beq.n	8002b62 <HAL_GPIO_Init+0x1fa>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a46      	ldr	r2, [pc, #280]	@ (8002c64 <HAL_GPIO_Init+0x2fc>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d007      	beq.n	8002b5e <HAL_GPIO_Init+0x1f6>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a45      	ldr	r2, [pc, #276]	@ (8002c68 <HAL_GPIO_Init+0x300>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d101      	bne.n	8002b5a <HAL_GPIO_Init+0x1f2>
 8002b56:	2304      	movs	r3, #4
 8002b58:	e008      	b.n	8002b6c <HAL_GPIO_Init+0x204>
 8002b5a:	2307      	movs	r3, #7
 8002b5c:	e006      	b.n	8002b6c <HAL_GPIO_Init+0x204>
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e004      	b.n	8002b6c <HAL_GPIO_Init+0x204>
 8002b62:	2302      	movs	r3, #2
 8002b64:	e002      	b.n	8002b6c <HAL_GPIO_Init+0x204>
 8002b66:	2301      	movs	r3, #1
 8002b68:	e000      	b.n	8002b6c <HAL_GPIO_Init+0x204>
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	69fa      	ldr	r2, [r7, #28]
 8002b6e:	f002 0203 	and.w	r2, r2, #3
 8002b72:	0092      	lsls	r2, r2, #2
 8002b74:	4093      	lsls	r3, r2
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b7c:	4935      	ldr	r1, [pc, #212]	@ (8002c54 <HAL_GPIO_Init+0x2ec>)
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	089b      	lsrs	r3, r3, #2
 8002b82:	3302      	adds	r3, #2
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b8a:	4b38      	ldr	r3, [pc, #224]	@ (8002c6c <HAL_GPIO_Init+0x304>)
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	43db      	mvns	r3, r3
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	4013      	ands	r3, r2
 8002b98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d003      	beq.n	8002bae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002ba6:	69ba      	ldr	r2, [r7, #24]
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bae:	4a2f      	ldr	r2, [pc, #188]	@ (8002c6c <HAL_GPIO_Init+0x304>)
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bb4:	4b2d      	ldr	r3, [pc, #180]	@ (8002c6c <HAL_GPIO_Init+0x304>)
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	43db      	mvns	r3, r3
 8002bbe:	69ba      	ldr	r2, [r7, #24]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d003      	beq.n	8002bd8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bd8:	4a24      	ldr	r2, [pc, #144]	@ (8002c6c <HAL_GPIO_Init+0x304>)
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002bde:	4b23      	ldr	r3, [pc, #140]	@ (8002c6c <HAL_GPIO_Init+0x304>)
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	43db      	mvns	r3, r3
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	4013      	ands	r3, r2
 8002bec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d003      	beq.n	8002c02 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002bfa:	69ba      	ldr	r2, [r7, #24]
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c02:	4a1a      	ldr	r2, [pc, #104]	@ (8002c6c <HAL_GPIO_Init+0x304>)
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c08:	4b18      	ldr	r3, [pc, #96]	@ (8002c6c <HAL_GPIO_Init+0x304>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	43db      	mvns	r3, r3
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	4013      	ands	r3, r2
 8002c16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d003      	beq.n	8002c2c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c2c:	4a0f      	ldr	r2, [pc, #60]	@ (8002c6c <HAL_GPIO_Init+0x304>)
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	3301      	adds	r3, #1
 8002c36:	61fb      	str	r3, [r7, #28]
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	2b0f      	cmp	r3, #15
 8002c3c:	f67f aea2 	bls.w	8002984 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c40:	bf00      	nop
 8002c42:	bf00      	nop
 8002c44:	3724      	adds	r7, #36	@ 0x24
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	40023800 	.word	0x40023800
 8002c54:	40013800 	.word	0x40013800
 8002c58:	40020000 	.word	0x40020000
 8002c5c:	40020400 	.word	0x40020400
 8002c60:	40020800 	.word	0x40020800
 8002c64:	40020c00 	.word	0x40020c00
 8002c68:	40021000 	.word	0x40021000
 8002c6c:	40013c00 	.word	0x40013c00

08002c70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b086      	sub	sp, #24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d101      	bne.n	8002c82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e267      	b.n	8003152 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d075      	beq.n	8002d7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002c8e:	4b88      	ldr	r3, [pc, #544]	@ (8002eb0 <HAL_RCC_OscConfig+0x240>)
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f003 030c 	and.w	r3, r3, #12
 8002c96:	2b04      	cmp	r3, #4
 8002c98:	d00c      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c9a:	4b85      	ldr	r3, [pc, #532]	@ (8002eb0 <HAL_RCC_OscConfig+0x240>)
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002ca2:	2b08      	cmp	r3, #8
 8002ca4:	d112      	bne.n	8002ccc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ca6:	4b82      	ldr	r3, [pc, #520]	@ (8002eb0 <HAL_RCC_OscConfig+0x240>)
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002cb2:	d10b      	bne.n	8002ccc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cb4:	4b7e      	ldr	r3, [pc, #504]	@ (8002eb0 <HAL_RCC_OscConfig+0x240>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d05b      	beq.n	8002d78 <HAL_RCC_OscConfig+0x108>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d157      	bne.n	8002d78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e242      	b.n	8003152 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cd4:	d106      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x74>
 8002cd6:	4b76      	ldr	r3, [pc, #472]	@ (8002eb0 <HAL_RCC_OscConfig+0x240>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a75      	ldr	r2, [pc, #468]	@ (8002eb0 <HAL_RCC_OscConfig+0x240>)
 8002cdc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ce0:	6013      	str	r3, [r2, #0]
 8002ce2:	e01d      	b.n	8002d20 <HAL_RCC_OscConfig+0xb0>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002cec:	d10c      	bne.n	8002d08 <HAL_RCC_OscConfig+0x98>
 8002cee:	4b70      	ldr	r3, [pc, #448]	@ (8002eb0 <HAL_RCC_OscConfig+0x240>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a6f      	ldr	r2, [pc, #444]	@ (8002eb0 <HAL_RCC_OscConfig+0x240>)
 8002cf4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002cf8:	6013      	str	r3, [r2, #0]
 8002cfa:	4b6d      	ldr	r3, [pc, #436]	@ (8002eb0 <HAL_RCC_OscConfig+0x240>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a6c      	ldr	r2, [pc, #432]	@ (8002eb0 <HAL_RCC_OscConfig+0x240>)
 8002d00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d04:	6013      	str	r3, [r2, #0]
 8002d06:	e00b      	b.n	8002d20 <HAL_RCC_OscConfig+0xb0>
 8002d08:	4b69      	ldr	r3, [pc, #420]	@ (8002eb0 <HAL_RCC_OscConfig+0x240>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a68      	ldr	r2, [pc, #416]	@ (8002eb0 <HAL_RCC_OscConfig+0x240>)
 8002d0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d12:	6013      	str	r3, [r2, #0]
 8002d14:	4b66      	ldr	r3, [pc, #408]	@ (8002eb0 <HAL_RCC_OscConfig+0x240>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a65      	ldr	r2, [pc, #404]	@ (8002eb0 <HAL_RCC_OscConfig+0x240>)
 8002d1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d013      	beq.n	8002d50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d28:	f7ff f90a 	bl	8001f40 <HAL_GetTick>
 8002d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d2e:	e008      	b.n	8002d42 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d30:	f7ff f906 	bl	8001f40 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b64      	cmp	r3, #100	@ 0x64
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e207      	b.n	8003152 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d42:	4b5b      	ldr	r3, [pc, #364]	@ (8002eb0 <HAL_RCC_OscConfig+0x240>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d0f0      	beq.n	8002d30 <HAL_RCC_OscConfig+0xc0>
 8002d4e:	e014      	b.n	8002d7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d50:	f7ff f8f6 	bl	8001f40 <HAL_GetTick>
 8002d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d56:	e008      	b.n	8002d6a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d58:	f7ff f8f2 	bl	8001f40 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	2b64      	cmp	r3, #100	@ 0x64
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e1f3      	b.n	8003152 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d6a:	4b51      	ldr	r3, [pc, #324]	@ (8002eb0 <HAL_RCC_OscConfig+0x240>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d1f0      	bne.n	8002d58 <HAL_RCC_OscConfig+0xe8>
 8002d76:	e000      	b.n	8002d7a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d063      	beq.n	8002e4e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002d86:	4b4a      	ldr	r3, [pc, #296]	@ (8002eb0 <HAL_RCC_OscConfig+0x240>)
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f003 030c 	and.w	r3, r3, #12
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00b      	beq.n	8002daa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d92:	4b47      	ldr	r3, [pc, #284]	@ (8002eb0 <HAL_RCC_OscConfig+0x240>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002d9a:	2b08      	cmp	r3, #8
 8002d9c:	d11c      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d9e:	4b44      	ldr	r3, [pc, #272]	@ (8002eb0 <HAL_RCC_OscConfig+0x240>)
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d116      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002daa:	4b41      	ldr	r3, [pc, #260]	@ (8002eb0 <HAL_RCC_OscConfig+0x240>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d005      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x152>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d001      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e1c7      	b.n	8003152 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dc2:	4b3b      	ldr	r3, [pc, #236]	@ (8002eb0 <HAL_RCC_OscConfig+0x240>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	4937      	ldr	r1, [pc, #220]	@ (8002eb0 <HAL_RCC_OscConfig+0x240>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dd6:	e03a      	b.n	8002e4e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d020      	beq.n	8002e22 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002de0:	4b34      	ldr	r3, [pc, #208]	@ (8002eb4 <HAL_RCC_OscConfig+0x244>)
 8002de2:	2201      	movs	r2, #1
 8002de4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de6:	f7ff f8ab 	bl	8001f40 <HAL_GetTick>
 8002dea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dec:	e008      	b.n	8002e00 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dee:	f7ff f8a7 	bl	8001f40 <HAL_GetTick>
 8002df2:	4602      	mov	r2, r0
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d901      	bls.n	8002e00 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e1a8      	b.n	8003152 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e00:	4b2b      	ldr	r3, [pc, #172]	@ (8002eb0 <HAL_RCC_OscConfig+0x240>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0302 	and.w	r3, r3, #2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d0f0      	beq.n	8002dee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e0c:	4b28      	ldr	r3, [pc, #160]	@ (8002eb0 <HAL_RCC_OscConfig+0x240>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	691b      	ldr	r3, [r3, #16]
 8002e18:	00db      	lsls	r3, r3, #3
 8002e1a:	4925      	ldr	r1, [pc, #148]	@ (8002eb0 <HAL_RCC_OscConfig+0x240>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	600b      	str	r3, [r1, #0]
 8002e20:	e015      	b.n	8002e4e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e22:	4b24      	ldr	r3, [pc, #144]	@ (8002eb4 <HAL_RCC_OscConfig+0x244>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e28:	f7ff f88a 	bl	8001f40 <HAL_GetTick>
 8002e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e2e:	e008      	b.n	8002e42 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e30:	f7ff f886 	bl	8001f40 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e187      	b.n	8003152 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e42:	4b1b      	ldr	r3, [pc, #108]	@ (8002eb0 <HAL_RCC_OscConfig+0x240>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d1f0      	bne.n	8002e30 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0308 	and.w	r3, r3, #8
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d036      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d016      	beq.n	8002e90 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e62:	4b15      	ldr	r3, [pc, #84]	@ (8002eb8 <HAL_RCC_OscConfig+0x248>)
 8002e64:	2201      	movs	r2, #1
 8002e66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e68:	f7ff f86a 	bl	8001f40 <HAL_GetTick>
 8002e6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e6e:	e008      	b.n	8002e82 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e70:	f7ff f866 	bl	8001f40 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e167      	b.n	8003152 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e82:	4b0b      	ldr	r3, [pc, #44]	@ (8002eb0 <HAL_RCC_OscConfig+0x240>)
 8002e84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d0f0      	beq.n	8002e70 <HAL_RCC_OscConfig+0x200>
 8002e8e:	e01b      	b.n	8002ec8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e90:	4b09      	ldr	r3, [pc, #36]	@ (8002eb8 <HAL_RCC_OscConfig+0x248>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e96:	f7ff f853 	bl	8001f40 <HAL_GetTick>
 8002e9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e9c:	e00e      	b.n	8002ebc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e9e:	f7ff f84f 	bl	8001f40 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d907      	bls.n	8002ebc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e150      	b.n	8003152 <HAL_RCC_OscConfig+0x4e2>
 8002eb0:	40023800 	.word	0x40023800
 8002eb4:	42470000 	.word	0x42470000
 8002eb8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ebc:	4b88      	ldr	r3, [pc, #544]	@ (80030e0 <HAL_RCC_OscConfig+0x470>)
 8002ebe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ec0:	f003 0302 	and.w	r3, r3, #2
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d1ea      	bne.n	8002e9e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0304 	and.w	r3, r3, #4
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	f000 8097 	beq.w	8003004 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eda:	4b81      	ldr	r3, [pc, #516]	@ (80030e0 <HAL_RCC_OscConfig+0x470>)
 8002edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ede:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d10f      	bne.n	8002f06 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	60bb      	str	r3, [r7, #8]
 8002eea:	4b7d      	ldr	r3, [pc, #500]	@ (80030e0 <HAL_RCC_OscConfig+0x470>)
 8002eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eee:	4a7c      	ldr	r2, [pc, #496]	@ (80030e0 <HAL_RCC_OscConfig+0x470>)
 8002ef0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ef4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ef6:	4b7a      	ldr	r3, [pc, #488]	@ (80030e0 <HAL_RCC_OscConfig+0x470>)
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002efa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002efe:	60bb      	str	r3, [r7, #8]
 8002f00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f02:	2301      	movs	r3, #1
 8002f04:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f06:	4b77      	ldr	r3, [pc, #476]	@ (80030e4 <HAL_RCC_OscConfig+0x474>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d118      	bne.n	8002f44 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f12:	4b74      	ldr	r3, [pc, #464]	@ (80030e4 <HAL_RCC_OscConfig+0x474>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a73      	ldr	r2, [pc, #460]	@ (80030e4 <HAL_RCC_OscConfig+0x474>)
 8002f18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f1e:	f7ff f80f 	bl	8001f40 <HAL_GetTick>
 8002f22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f24:	e008      	b.n	8002f38 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f26:	f7ff f80b 	bl	8001f40 <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d901      	bls.n	8002f38 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e10c      	b.n	8003152 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f38:	4b6a      	ldr	r3, [pc, #424]	@ (80030e4 <HAL_RCC_OscConfig+0x474>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d0f0      	beq.n	8002f26 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d106      	bne.n	8002f5a <HAL_RCC_OscConfig+0x2ea>
 8002f4c:	4b64      	ldr	r3, [pc, #400]	@ (80030e0 <HAL_RCC_OscConfig+0x470>)
 8002f4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f50:	4a63      	ldr	r2, [pc, #396]	@ (80030e0 <HAL_RCC_OscConfig+0x470>)
 8002f52:	f043 0301 	orr.w	r3, r3, #1
 8002f56:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f58:	e01c      	b.n	8002f94 <HAL_RCC_OscConfig+0x324>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	2b05      	cmp	r3, #5
 8002f60:	d10c      	bne.n	8002f7c <HAL_RCC_OscConfig+0x30c>
 8002f62:	4b5f      	ldr	r3, [pc, #380]	@ (80030e0 <HAL_RCC_OscConfig+0x470>)
 8002f64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f66:	4a5e      	ldr	r2, [pc, #376]	@ (80030e0 <HAL_RCC_OscConfig+0x470>)
 8002f68:	f043 0304 	orr.w	r3, r3, #4
 8002f6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f6e:	4b5c      	ldr	r3, [pc, #368]	@ (80030e0 <HAL_RCC_OscConfig+0x470>)
 8002f70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f72:	4a5b      	ldr	r2, [pc, #364]	@ (80030e0 <HAL_RCC_OscConfig+0x470>)
 8002f74:	f043 0301 	orr.w	r3, r3, #1
 8002f78:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f7a:	e00b      	b.n	8002f94 <HAL_RCC_OscConfig+0x324>
 8002f7c:	4b58      	ldr	r3, [pc, #352]	@ (80030e0 <HAL_RCC_OscConfig+0x470>)
 8002f7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f80:	4a57      	ldr	r2, [pc, #348]	@ (80030e0 <HAL_RCC_OscConfig+0x470>)
 8002f82:	f023 0301 	bic.w	r3, r3, #1
 8002f86:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f88:	4b55      	ldr	r3, [pc, #340]	@ (80030e0 <HAL_RCC_OscConfig+0x470>)
 8002f8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f8c:	4a54      	ldr	r2, [pc, #336]	@ (80030e0 <HAL_RCC_OscConfig+0x470>)
 8002f8e:	f023 0304 	bic.w	r3, r3, #4
 8002f92:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d015      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f9c:	f7fe ffd0 	bl	8001f40 <HAL_GetTick>
 8002fa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fa2:	e00a      	b.n	8002fba <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fa4:	f7fe ffcc 	bl	8001f40 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e0cb      	b.n	8003152 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fba:	4b49      	ldr	r3, [pc, #292]	@ (80030e0 <HAL_RCC_OscConfig+0x470>)
 8002fbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fbe:	f003 0302 	and.w	r3, r3, #2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d0ee      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x334>
 8002fc6:	e014      	b.n	8002ff2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fc8:	f7fe ffba 	bl	8001f40 <HAL_GetTick>
 8002fcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fce:	e00a      	b.n	8002fe6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fd0:	f7fe ffb6 	bl	8001f40 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e0b5      	b.n	8003152 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fe6:	4b3e      	ldr	r3, [pc, #248]	@ (80030e0 <HAL_RCC_OscConfig+0x470>)
 8002fe8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1ee      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ff2:	7dfb      	ldrb	r3, [r7, #23]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d105      	bne.n	8003004 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ff8:	4b39      	ldr	r3, [pc, #228]	@ (80030e0 <HAL_RCC_OscConfig+0x470>)
 8002ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ffc:	4a38      	ldr	r2, [pc, #224]	@ (80030e0 <HAL_RCC_OscConfig+0x470>)
 8002ffe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003002:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	2b00      	cmp	r3, #0
 800300a:	f000 80a1 	beq.w	8003150 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800300e:	4b34      	ldr	r3, [pc, #208]	@ (80030e0 <HAL_RCC_OscConfig+0x470>)
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f003 030c 	and.w	r3, r3, #12
 8003016:	2b08      	cmp	r3, #8
 8003018:	d05c      	beq.n	80030d4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	2b02      	cmp	r3, #2
 8003020:	d141      	bne.n	80030a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003022:	4b31      	ldr	r3, [pc, #196]	@ (80030e8 <HAL_RCC_OscConfig+0x478>)
 8003024:	2200      	movs	r2, #0
 8003026:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003028:	f7fe ff8a 	bl	8001f40 <HAL_GetTick>
 800302c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800302e:	e008      	b.n	8003042 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003030:	f7fe ff86 	bl	8001f40 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b02      	cmp	r3, #2
 800303c:	d901      	bls.n	8003042 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e087      	b.n	8003152 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003042:	4b27      	ldr	r3, [pc, #156]	@ (80030e0 <HAL_RCC_OscConfig+0x470>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1f0      	bne.n	8003030 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	69da      	ldr	r2, [r3, #28]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a1b      	ldr	r3, [r3, #32]
 8003056:	431a      	orrs	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800305c:	019b      	lsls	r3, r3, #6
 800305e:	431a      	orrs	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003064:	085b      	lsrs	r3, r3, #1
 8003066:	3b01      	subs	r3, #1
 8003068:	041b      	lsls	r3, r3, #16
 800306a:	431a      	orrs	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003070:	061b      	lsls	r3, r3, #24
 8003072:	491b      	ldr	r1, [pc, #108]	@ (80030e0 <HAL_RCC_OscConfig+0x470>)
 8003074:	4313      	orrs	r3, r2
 8003076:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003078:	4b1b      	ldr	r3, [pc, #108]	@ (80030e8 <HAL_RCC_OscConfig+0x478>)
 800307a:	2201      	movs	r2, #1
 800307c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800307e:	f7fe ff5f 	bl	8001f40 <HAL_GetTick>
 8003082:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003084:	e008      	b.n	8003098 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003086:	f7fe ff5b 	bl	8001f40 <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	2b02      	cmp	r3, #2
 8003092:	d901      	bls.n	8003098 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e05c      	b.n	8003152 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003098:	4b11      	ldr	r3, [pc, #68]	@ (80030e0 <HAL_RCC_OscConfig+0x470>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d0f0      	beq.n	8003086 <HAL_RCC_OscConfig+0x416>
 80030a4:	e054      	b.n	8003150 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030a6:	4b10      	ldr	r3, [pc, #64]	@ (80030e8 <HAL_RCC_OscConfig+0x478>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ac:	f7fe ff48 	bl	8001f40 <HAL_GetTick>
 80030b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030b2:	e008      	b.n	80030c6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030b4:	f7fe ff44 	bl	8001f40 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e045      	b.n	8003152 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030c6:	4b06      	ldr	r3, [pc, #24]	@ (80030e0 <HAL_RCC_OscConfig+0x470>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d1f0      	bne.n	80030b4 <HAL_RCC_OscConfig+0x444>
 80030d2:	e03d      	b.n	8003150 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d107      	bne.n	80030ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e038      	b.n	8003152 <HAL_RCC_OscConfig+0x4e2>
 80030e0:	40023800 	.word	0x40023800
 80030e4:	40007000 	.word	0x40007000
 80030e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030ec:	4b1b      	ldr	r3, [pc, #108]	@ (800315c <HAL_RCC_OscConfig+0x4ec>)
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	699b      	ldr	r3, [r3, #24]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d028      	beq.n	800314c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003104:	429a      	cmp	r2, r3
 8003106:	d121      	bne.n	800314c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003112:	429a      	cmp	r2, r3
 8003114:	d11a      	bne.n	800314c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003116:	68fa      	ldr	r2, [r7, #12]
 8003118:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800311c:	4013      	ands	r3, r2
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003122:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003124:	4293      	cmp	r3, r2
 8003126:	d111      	bne.n	800314c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003132:	085b      	lsrs	r3, r3, #1
 8003134:	3b01      	subs	r3, #1
 8003136:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003138:	429a      	cmp	r2, r3
 800313a:	d107      	bne.n	800314c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003146:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003148:	429a      	cmp	r2, r3
 800314a:	d001      	beq.n	8003150 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e000      	b.n	8003152 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3718      	adds	r7, #24
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	40023800 	.word	0x40023800

08003160 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d101      	bne.n	8003174 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e0cc      	b.n	800330e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003174:	4b68      	ldr	r3, [pc, #416]	@ (8003318 <HAL_RCC_ClockConfig+0x1b8>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0307 	and.w	r3, r3, #7
 800317c:	683a      	ldr	r2, [r7, #0]
 800317e:	429a      	cmp	r2, r3
 8003180:	d90c      	bls.n	800319c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003182:	4b65      	ldr	r3, [pc, #404]	@ (8003318 <HAL_RCC_ClockConfig+0x1b8>)
 8003184:	683a      	ldr	r2, [r7, #0]
 8003186:	b2d2      	uxtb	r2, r2
 8003188:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800318a:	4b63      	ldr	r3, [pc, #396]	@ (8003318 <HAL_RCC_ClockConfig+0x1b8>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0307 	and.w	r3, r3, #7
 8003192:	683a      	ldr	r2, [r7, #0]
 8003194:	429a      	cmp	r2, r3
 8003196:	d001      	beq.n	800319c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e0b8      	b.n	800330e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0302 	and.w	r3, r3, #2
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d020      	beq.n	80031ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0304 	and.w	r3, r3, #4
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d005      	beq.n	80031c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031b4:	4b59      	ldr	r3, [pc, #356]	@ (800331c <HAL_RCC_ClockConfig+0x1bc>)
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	4a58      	ldr	r2, [pc, #352]	@ (800331c <HAL_RCC_ClockConfig+0x1bc>)
 80031ba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80031be:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0308 	and.w	r3, r3, #8
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d005      	beq.n	80031d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031cc:	4b53      	ldr	r3, [pc, #332]	@ (800331c <HAL_RCC_ClockConfig+0x1bc>)
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	4a52      	ldr	r2, [pc, #328]	@ (800331c <HAL_RCC_ClockConfig+0x1bc>)
 80031d2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80031d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031d8:	4b50      	ldr	r3, [pc, #320]	@ (800331c <HAL_RCC_ClockConfig+0x1bc>)
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	494d      	ldr	r1, [pc, #308]	@ (800331c <HAL_RCC_ClockConfig+0x1bc>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0301 	and.w	r3, r3, #1
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d044      	beq.n	8003280 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d107      	bne.n	800320e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031fe:	4b47      	ldr	r3, [pc, #284]	@ (800331c <HAL_RCC_ClockConfig+0x1bc>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d119      	bne.n	800323e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e07f      	b.n	800330e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	2b02      	cmp	r3, #2
 8003214:	d003      	beq.n	800321e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800321a:	2b03      	cmp	r3, #3
 800321c:	d107      	bne.n	800322e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800321e:	4b3f      	ldr	r3, [pc, #252]	@ (800331c <HAL_RCC_ClockConfig+0x1bc>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d109      	bne.n	800323e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e06f      	b.n	800330e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800322e:	4b3b      	ldr	r3, [pc, #236]	@ (800331c <HAL_RCC_ClockConfig+0x1bc>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0302 	and.w	r3, r3, #2
 8003236:	2b00      	cmp	r3, #0
 8003238:	d101      	bne.n	800323e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e067      	b.n	800330e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800323e:	4b37      	ldr	r3, [pc, #220]	@ (800331c <HAL_RCC_ClockConfig+0x1bc>)
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f023 0203 	bic.w	r2, r3, #3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	4934      	ldr	r1, [pc, #208]	@ (800331c <HAL_RCC_ClockConfig+0x1bc>)
 800324c:	4313      	orrs	r3, r2
 800324e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003250:	f7fe fe76 	bl	8001f40 <HAL_GetTick>
 8003254:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003256:	e00a      	b.n	800326e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003258:	f7fe fe72 	bl	8001f40 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003266:	4293      	cmp	r3, r2
 8003268:	d901      	bls.n	800326e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e04f      	b.n	800330e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800326e:	4b2b      	ldr	r3, [pc, #172]	@ (800331c <HAL_RCC_ClockConfig+0x1bc>)
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f003 020c 	and.w	r2, r3, #12
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	429a      	cmp	r2, r3
 800327e:	d1eb      	bne.n	8003258 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003280:	4b25      	ldr	r3, [pc, #148]	@ (8003318 <HAL_RCC_ClockConfig+0x1b8>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0307 	and.w	r3, r3, #7
 8003288:	683a      	ldr	r2, [r7, #0]
 800328a:	429a      	cmp	r2, r3
 800328c:	d20c      	bcs.n	80032a8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800328e:	4b22      	ldr	r3, [pc, #136]	@ (8003318 <HAL_RCC_ClockConfig+0x1b8>)
 8003290:	683a      	ldr	r2, [r7, #0]
 8003292:	b2d2      	uxtb	r2, r2
 8003294:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003296:	4b20      	ldr	r3, [pc, #128]	@ (8003318 <HAL_RCC_ClockConfig+0x1b8>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0307 	and.w	r3, r3, #7
 800329e:	683a      	ldr	r2, [r7, #0]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d001      	beq.n	80032a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e032      	b.n	800330e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0304 	and.w	r3, r3, #4
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d008      	beq.n	80032c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032b4:	4b19      	ldr	r3, [pc, #100]	@ (800331c <HAL_RCC_ClockConfig+0x1bc>)
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	4916      	ldr	r1, [pc, #88]	@ (800331c <HAL_RCC_ClockConfig+0x1bc>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0308 	and.w	r3, r3, #8
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d009      	beq.n	80032e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032d2:	4b12      	ldr	r3, [pc, #72]	@ (800331c <HAL_RCC_ClockConfig+0x1bc>)
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	00db      	lsls	r3, r3, #3
 80032e0:	490e      	ldr	r1, [pc, #56]	@ (800331c <HAL_RCC_ClockConfig+0x1bc>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80032e6:	f000 f821 	bl	800332c <HAL_RCC_GetSysClockFreq>
 80032ea:	4602      	mov	r2, r0
 80032ec:	4b0b      	ldr	r3, [pc, #44]	@ (800331c <HAL_RCC_ClockConfig+0x1bc>)
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	091b      	lsrs	r3, r3, #4
 80032f2:	f003 030f 	and.w	r3, r3, #15
 80032f6:	490a      	ldr	r1, [pc, #40]	@ (8003320 <HAL_RCC_ClockConfig+0x1c0>)
 80032f8:	5ccb      	ldrb	r3, [r1, r3]
 80032fa:	fa22 f303 	lsr.w	r3, r2, r3
 80032fe:	4a09      	ldr	r2, [pc, #36]	@ (8003324 <HAL_RCC_ClockConfig+0x1c4>)
 8003300:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003302:	4b09      	ldr	r3, [pc, #36]	@ (8003328 <HAL_RCC_ClockConfig+0x1c8>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4618      	mov	r0, r3
 8003308:	f7fe fcb6 	bl	8001c78 <HAL_InitTick>

  return HAL_OK;
 800330c:	2300      	movs	r3, #0
}
 800330e:	4618      	mov	r0, r3
 8003310:	3710      	adds	r7, #16
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	40023c00 	.word	0x40023c00
 800331c:	40023800 	.word	0x40023800
 8003320:	0800955c 	.word	0x0800955c
 8003324:	20000000 	.word	0x20000000
 8003328:	20000004 	.word	0x20000004

0800332c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800332c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003330:	b090      	sub	sp, #64	@ 0x40
 8003332:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003334:	2300      	movs	r3, #0
 8003336:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003338:	2300      	movs	r3, #0
 800333a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800333c:	2300      	movs	r3, #0
 800333e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003340:	2300      	movs	r3, #0
 8003342:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003344:	4b59      	ldr	r3, [pc, #356]	@ (80034ac <HAL_RCC_GetSysClockFreq+0x180>)
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f003 030c 	and.w	r3, r3, #12
 800334c:	2b08      	cmp	r3, #8
 800334e:	d00d      	beq.n	800336c <HAL_RCC_GetSysClockFreq+0x40>
 8003350:	2b08      	cmp	r3, #8
 8003352:	f200 80a1 	bhi.w	8003498 <HAL_RCC_GetSysClockFreq+0x16c>
 8003356:	2b00      	cmp	r3, #0
 8003358:	d002      	beq.n	8003360 <HAL_RCC_GetSysClockFreq+0x34>
 800335a:	2b04      	cmp	r3, #4
 800335c:	d003      	beq.n	8003366 <HAL_RCC_GetSysClockFreq+0x3a>
 800335e:	e09b      	b.n	8003498 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003360:	4b53      	ldr	r3, [pc, #332]	@ (80034b0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003362:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003364:	e09b      	b.n	800349e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003366:	4b53      	ldr	r3, [pc, #332]	@ (80034b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003368:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800336a:	e098      	b.n	800349e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800336c:	4b4f      	ldr	r3, [pc, #316]	@ (80034ac <HAL_RCC_GetSysClockFreq+0x180>)
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003374:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003376:	4b4d      	ldr	r3, [pc, #308]	@ (80034ac <HAL_RCC_GetSysClockFreq+0x180>)
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d028      	beq.n	80033d4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003382:	4b4a      	ldr	r3, [pc, #296]	@ (80034ac <HAL_RCC_GetSysClockFreq+0x180>)
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	099b      	lsrs	r3, r3, #6
 8003388:	2200      	movs	r2, #0
 800338a:	623b      	str	r3, [r7, #32]
 800338c:	627a      	str	r2, [r7, #36]	@ 0x24
 800338e:	6a3b      	ldr	r3, [r7, #32]
 8003390:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003394:	2100      	movs	r1, #0
 8003396:	4b47      	ldr	r3, [pc, #284]	@ (80034b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003398:	fb03 f201 	mul.w	r2, r3, r1
 800339c:	2300      	movs	r3, #0
 800339e:	fb00 f303 	mul.w	r3, r0, r3
 80033a2:	4413      	add	r3, r2
 80033a4:	4a43      	ldr	r2, [pc, #268]	@ (80034b4 <HAL_RCC_GetSysClockFreq+0x188>)
 80033a6:	fba0 1202 	umull	r1, r2, r0, r2
 80033aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80033ac:	460a      	mov	r2, r1
 80033ae:	62ba      	str	r2, [r7, #40]	@ 0x28
 80033b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033b2:	4413      	add	r3, r2
 80033b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033b8:	2200      	movs	r2, #0
 80033ba:	61bb      	str	r3, [r7, #24]
 80033bc:	61fa      	str	r2, [r7, #28]
 80033be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033c2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80033c6:	f7fc ff5b 	bl	8000280 <__aeabi_uldivmod>
 80033ca:	4602      	mov	r2, r0
 80033cc:	460b      	mov	r3, r1
 80033ce:	4613      	mov	r3, r2
 80033d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80033d2:	e053      	b.n	800347c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033d4:	4b35      	ldr	r3, [pc, #212]	@ (80034ac <HAL_RCC_GetSysClockFreq+0x180>)
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	099b      	lsrs	r3, r3, #6
 80033da:	2200      	movs	r2, #0
 80033dc:	613b      	str	r3, [r7, #16]
 80033de:	617a      	str	r2, [r7, #20]
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80033e6:	f04f 0b00 	mov.w	fp, #0
 80033ea:	4652      	mov	r2, sl
 80033ec:	465b      	mov	r3, fp
 80033ee:	f04f 0000 	mov.w	r0, #0
 80033f2:	f04f 0100 	mov.w	r1, #0
 80033f6:	0159      	lsls	r1, r3, #5
 80033f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033fc:	0150      	lsls	r0, r2, #5
 80033fe:	4602      	mov	r2, r0
 8003400:	460b      	mov	r3, r1
 8003402:	ebb2 080a 	subs.w	r8, r2, sl
 8003406:	eb63 090b 	sbc.w	r9, r3, fp
 800340a:	f04f 0200 	mov.w	r2, #0
 800340e:	f04f 0300 	mov.w	r3, #0
 8003412:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003416:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800341a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800341e:	ebb2 0408 	subs.w	r4, r2, r8
 8003422:	eb63 0509 	sbc.w	r5, r3, r9
 8003426:	f04f 0200 	mov.w	r2, #0
 800342a:	f04f 0300 	mov.w	r3, #0
 800342e:	00eb      	lsls	r3, r5, #3
 8003430:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003434:	00e2      	lsls	r2, r4, #3
 8003436:	4614      	mov	r4, r2
 8003438:	461d      	mov	r5, r3
 800343a:	eb14 030a 	adds.w	r3, r4, sl
 800343e:	603b      	str	r3, [r7, #0]
 8003440:	eb45 030b 	adc.w	r3, r5, fp
 8003444:	607b      	str	r3, [r7, #4]
 8003446:	f04f 0200 	mov.w	r2, #0
 800344a:	f04f 0300 	mov.w	r3, #0
 800344e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003452:	4629      	mov	r1, r5
 8003454:	028b      	lsls	r3, r1, #10
 8003456:	4621      	mov	r1, r4
 8003458:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800345c:	4621      	mov	r1, r4
 800345e:	028a      	lsls	r2, r1, #10
 8003460:	4610      	mov	r0, r2
 8003462:	4619      	mov	r1, r3
 8003464:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003466:	2200      	movs	r2, #0
 8003468:	60bb      	str	r3, [r7, #8]
 800346a:	60fa      	str	r2, [r7, #12]
 800346c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003470:	f7fc ff06 	bl	8000280 <__aeabi_uldivmod>
 8003474:	4602      	mov	r2, r0
 8003476:	460b      	mov	r3, r1
 8003478:	4613      	mov	r3, r2
 800347a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800347c:	4b0b      	ldr	r3, [pc, #44]	@ (80034ac <HAL_RCC_GetSysClockFreq+0x180>)
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	0c1b      	lsrs	r3, r3, #16
 8003482:	f003 0303 	and.w	r3, r3, #3
 8003486:	3301      	adds	r3, #1
 8003488:	005b      	lsls	r3, r3, #1
 800348a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800348c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800348e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003490:	fbb2 f3f3 	udiv	r3, r2, r3
 8003494:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003496:	e002      	b.n	800349e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003498:	4b05      	ldr	r3, [pc, #20]	@ (80034b0 <HAL_RCC_GetSysClockFreq+0x184>)
 800349a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800349c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800349e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3740      	adds	r7, #64	@ 0x40
 80034a4:	46bd      	mov	sp, r7
 80034a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034aa:	bf00      	nop
 80034ac:	40023800 	.word	0x40023800
 80034b0:	00f42400 	.word	0x00f42400
 80034b4:	017d7840 	.word	0x017d7840

080034b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034b8:	b480      	push	{r7}
 80034ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034bc:	4b03      	ldr	r3, [pc, #12]	@ (80034cc <HAL_RCC_GetHCLKFreq+0x14>)
 80034be:	681b      	ldr	r3, [r3, #0]
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop
 80034cc:	20000000 	.word	0x20000000

080034d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034d4:	f7ff fff0 	bl	80034b8 <HAL_RCC_GetHCLKFreq>
 80034d8:	4602      	mov	r2, r0
 80034da:	4b05      	ldr	r3, [pc, #20]	@ (80034f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	0a9b      	lsrs	r3, r3, #10
 80034e0:	f003 0307 	and.w	r3, r3, #7
 80034e4:	4903      	ldr	r1, [pc, #12]	@ (80034f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034e6:	5ccb      	ldrb	r3, [r1, r3]
 80034e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	40023800 	.word	0x40023800
 80034f4:	0800956c 	.word	0x0800956c

080034f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80034fc:	f7ff ffdc 	bl	80034b8 <HAL_RCC_GetHCLKFreq>
 8003500:	4602      	mov	r2, r0
 8003502:	4b05      	ldr	r3, [pc, #20]	@ (8003518 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	0b5b      	lsrs	r3, r3, #13
 8003508:	f003 0307 	and.w	r3, r3, #7
 800350c:	4903      	ldr	r1, [pc, #12]	@ (800351c <HAL_RCC_GetPCLK2Freq+0x24>)
 800350e:	5ccb      	ldrb	r3, [r1, r3]
 8003510:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003514:	4618      	mov	r0, r3
 8003516:	bd80      	pop	{r7, pc}
 8003518:	40023800 	.word	0x40023800
 800351c:	0800956c 	.word	0x0800956c

08003520 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	220f      	movs	r2, #15
 800352e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003530:	4b12      	ldr	r3, [pc, #72]	@ (800357c <HAL_RCC_GetClockConfig+0x5c>)
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	f003 0203 	and.w	r2, r3, #3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800353c:	4b0f      	ldr	r3, [pc, #60]	@ (800357c <HAL_RCC_GetClockConfig+0x5c>)
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003548:	4b0c      	ldr	r3, [pc, #48]	@ (800357c <HAL_RCC_GetClockConfig+0x5c>)
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003554:	4b09      	ldr	r3, [pc, #36]	@ (800357c <HAL_RCC_GetClockConfig+0x5c>)
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	08db      	lsrs	r3, r3, #3
 800355a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003562:	4b07      	ldr	r3, [pc, #28]	@ (8003580 <HAL_RCC_GetClockConfig+0x60>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0207 	and.w	r2, r3, #7
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	601a      	str	r2, [r3, #0]
}
 800356e:	bf00      	nop
 8003570:	370c      	adds	r7, #12
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	40023800 	.word	0x40023800
 8003580:	40023c00 	.word	0x40023c00

08003584 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d101      	bne.n	8003596 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e041      	b.n	800361a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800359c:	b2db      	uxtb	r3, r3
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d106      	bne.n	80035b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f7fe fa72 	bl	8001a94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2202      	movs	r2, #2
 80035b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	3304      	adds	r3, #4
 80035c0:	4619      	mov	r1, r3
 80035c2:	4610      	mov	r0, r2
 80035c4:	f000 fa70 	bl	8003aa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3708      	adds	r7, #8
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
	...

08003624 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003624:	b480      	push	{r7}
 8003626:	b085      	sub	sp, #20
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003632:	b2db      	uxtb	r3, r3
 8003634:	2b01      	cmp	r3, #1
 8003636:	d001      	beq.n	800363c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e044      	b.n	80036c6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2202      	movs	r2, #2
 8003640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68da      	ldr	r2, [r3, #12]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f042 0201 	orr.w	r2, r2, #1
 8003652:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a1e      	ldr	r2, [pc, #120]	@ (80036d4 <HAL_TIM_Base_Start_IT+0xb0>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d018      	beq.n	8003690 <HAL_TIM_Base_Start_IT+0x6c>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003666:	d013      	beq.n	8003690 <HAL_TIM_Base_Start_IT+0x6c>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a1a      	ldr	r2, [pc, #104]	@ (80036d8 <HAL_TIM_Base_Start_IT+0xb4>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d00e      	beq.n	8003690 <HAL_TIM_Base_Start_IT+0x6c>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a19      	ldr	r2, [pc, #100]	@ (80036dc <HAL_TIM_Base_Start_IT+0xb8>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d009      	beq.n	8003690 <HAL_TIM_Base_Start_IT+0x6c>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a17      	ldr	r2, [pc, #92]	@ (80036e0 <HAL_TIM_Base_Start_IT+0xbc>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d004      	beq.n	8003690 <HAL_TIM_Base_Start_IT+0x6c>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a16      	ldr	r2, [pc, #88]	@ (80036e4 <HAL_TIM_Base_Start_IT+0xc0>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d111      	bne.n	80036b4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f003 0307 	and.w	r3, r3, #7
 800369a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2b06      	cmp	r3, #6
 80036a0:	d010      	beq.n	80036c4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f042 0201 	orr.w	r2, r2, #1
 80036b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036b2:	e007      	b.n	80036c4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f042 0201 	orr.w	r2, r2, #1
 80036c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3714      	adds	r7, #20
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	40010000 	.word	0x40010000
 80036d8:	40000400 	.word	0x40000400
 80036dc:	40000800 	.word	0x40000800
 80036e0:	40000c00 	.word	0x40000c00
 80036e4:	40014000 	.word	0x40014000

080036e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	f003 0302 	and.w	r3, r3, #2
 8003706:	2b00      	cmp	r3, #0
 8003708:	d020      	beq.n	800374c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f003 0302 	and.w	r3, r3, #2
 8003710:	2b00      	cmp	r3, #0
 8003712:	d01b      	beq.n	800374c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f06f 0202 	mvn.w	r2, #2
 800371c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2201      	movs	r2, #1
 8003722:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	f003 0303 	and.w	r3, r3, #3
 800372e:	2b00      	cmp	r3, #0
 8003730:	d003      	beq.n	800373a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 f999 	bl	8003a6a <HAL_TIM_IC_CaptureCallback>
 8003738:	e005      	b.n	8003746 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 f98b 	bl	8003a56 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f000 f99c 	bl	8003a7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	f003 0304 	and.w	r3, r3, #4
 8003752:	2b00      	cmp	r3, #0
 8003754:	d020      	beq.n	8003798 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f003 0304 	and.w	r3, r3, #4
 800375c:	2b00      	cmp	r3, #0
 800375e:	d01b      	beq.n	8003798 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f06f 0204 	mvn.w	r2, #4
 8003768:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2202      	movs	r2, #2
 800376e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800377a:	2b00      	cmp	r3, #0
 800377c:	d003      	beq.n	8003786 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 f973 	bl	8003a6a <HAL_TIM_IC_CaptureCallback>
 8003784:	e005      	b.n	8003792 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 f965 	bl	8003a56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f000 f976 	bl	8003a7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	f003 0308 	and.w	r3, r3, #8
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d020      	beq.n	80037e4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f003 0308 	and.w	r3, r3, #8
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d01b      	beq.n	80037e4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f06f 0208 	mvn.w	r2, #8
 80037b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2204      	movs	r2, #4
 80037ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	69db      	ldr	r3, [r3, #28]
 80037c2:	f003 0303 	and.w	r3, r3, #3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d003      	beq.n	80037d2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 f94d 	bl	8003a6a <HAL_TIM_IC_CaptureCallback>
 80037d0:	e005      	b.n	80037de <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 f93f 	bl	8003a56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f000 f950 	bl	8003a7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	f003 0310 	and.w	r3, r3, #16
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d020      	beq.n	8003830 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f003 0310 	and.w	r3, r3, #16
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d01b      	beq.n	8003830 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f06f 0210 	mvn.w	r2, #16
 8003800:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2208      	movs	r2, #8
 8003806:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	69db      	ldr	r3, [r3, #28]
 800380e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003812:	2b00      	cmp	r3, #0
 8003814:	d003      	beq.n	800381e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 f927 	bl	8003a6a <HAL_TIM_IC_CaptureCallback>
 800381c:	e005      	b.n	800382a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 f919 	bl	8003a56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f000 f92a 	bl	8003a7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	2b00      	cmp	r3, #0
 8003838:	d00c      	beq.n	8003854 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f003 0301 	and.w	r3, r3, #1
 8003840:	2b00      	cmp	r3, #0
 8003842:	d007      	beq.n	8003854 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f06f 0201 	mvn.w	r2, #1
 800384c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f7fe f8dc 	bl	8001a0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800385a:	2b00      	cmp	r3, #0
 800385c:	d00c      	beq.n	8003878 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003864:	2b00      	cmp	r3, #0
 8003866:	d007      	beq.n	8003878 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003870:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 fab6 	bl	8003de4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800387e:	2b00      	cmp	r3, #0
 8003880:	d00c      	beq.n	800389c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003888:	2b00      	cmp	r3, #0
 800388a:	d007      	beq.n	800389c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003894:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 f8fb 	bl	8003a92 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	f003 0320 	and.w	r3, r3, #32
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d00c      	beq.n	80038c0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	f003 0320 	and.w	r3, r3, #32
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d007      	beq.n	80038c0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f06f 0220 	mvn.w	r2, #32
 80038b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 fa88 	bl	8003dd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038c0:	bf00      	nop
 80038c2:	3710      	adds	r7, #16
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038d2:	2300      	movs	r3, #0
 80038d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d101      	bne.n	80038e4 <HAL_TIM_ConfigClockSource+0x1c>
 80038e0:	2302      	movs	r3, #2
 80038e2:	e0b4      	b.n	8003a4e <HAL_TIM_ConfigClockSource+0x186>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2202      	movs	r2, #2
 80038f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003902:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800390a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	68ba      	ldr	r2, [r7, #8]
 8003912:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800391c:	d03e      	beq.n	800399c <HAL_TIM_ConfigClockSource+0xd4>
 800391e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003922:	f200 8087 	bhi.w	8003a34 <HAL_TIM_ConfigClockSource+0x16c>
 8003926:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800392a:	f000 8086 	beq.w	8003a3a <HAL_TIM_ConfigClockSource+0x172>
 800392e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003932:	d87f      	bhi.n	8003a34 <HAL_TIM_ConfigClockSource+0x16c>
 8003934:	2b70      	cmp	r3, #112	@ 0x70
 8003936:	d01a      	beq.n	800396e <HAL_TIM_ConfigClockSource+0xa6>
 8003938:	2b70      	cmp	r3, #112	@ 0x70
 800393a:	d87b      	bhi.n	8003a34 <HAL_TIM_ConfigClockSource+0x16c>
 800393c:	2b60      	cmp	r3, #96	@ 0x60
 800393e:	d050      	beq.n	80039e2 <HAL_TIM_ConfigClockSource+0x11a>
 8003940:	2b60      	cmp	r3, #96	@ 0x60
 8003942:	d877      	bhi.n	8003a34 <HAL_TIM_ConfigClockSource+0x16c>
 8003944:	2b50      	cmp	r3, #80	@ 0x50
 8003946:	d03c      	beq.n	80039c2 <HAL_TIM_ConfigClockSource+0xfa>
 8003948:	2b50      	cmp	r3, #80	@ 0x50
 800394a:	d873      	bhi.n	8003a34 <HAL_TIM_ConfigClockSource+0x16c>
 800394c:	2b40      	cmp	r3, #64	@ 0x40
 800394e:	d058      	beq.n	8003a02 <HAL_TIM_ConfigClockSource+0x13a>
 8003950:	2b40      	cmp	r3, #64	@ 0x40
 8003952:	d86f      	bhi.n	8003a34 <HAL_TIM_ConfigClockSource+0x16c>
 8003954:	2b30      	cmp	r3, #48	@ 0x30
 8003956:	d064      	beq.n	8003a22 <HAL_TIM_ConfigClockSource+0x15a>
 8003958:	2b30      	cmp	r3, #48	@ 0x30
 800395a:	d86b      	bhi.n	8003a34 <HAL_TIM_ConfigClockSource+0x16c>
 800395c:	2b20      	cmp	r3, #32
 800395e:	d060      	beq.n	8003a22 <HAL_TIM_ConfigClockSource+0x15a>
 8003960:	2b20      	cmp	r3, #32
 8003962:	d867      	bhi.n	8003a34 <HAL_TIM_ConfigClockSource+0x16c>
 8003964:	2b00      	cmp	r3, #0
 8003966:	d05c      	beq.n	8003a22 <HAL_TIM_ConfigClockSource+0x15a>
 8003968:	2b10      	cmp	r3, #16
 800396a:	d05a      	beq.n	8003a22 <HAL_TIM_ConfigClockSource+0x15a>
 800396c:	e062      	b.n	8003a34 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800397e:	f000 f999 	bl	8003cb4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003990:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	68ba      	ldr	r2, [r7, #8]
 8003998:	609a      	str	r2, [r3, #8]
      break;
 800399a:	e04f      	b.n	8003a3c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80039ac:	f000 f982 	bl	8003cb4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	689a      	ldr	r2, [r3, #8]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80039be:	609a      	str	r2, [r3, #8]
      break;
 80039c0:	e03c      	b.n	8003a3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039ce:	461a      	mov	r2, r3
 80039d0:	f000 f8f6 	bl	8003bc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2150      	movs	r1, #80	@ 0x50
 80039da:	4618      	mov	r0, r3
 80039dc:	f000 f94f 	bl	8003c7e <TIM_ITRx_SetConfig>
      break;
 80039e0:	e02c      	b.n	8003a3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80039ee:	461a      	mov	r2, r3
 80039f0:	f000 f915 	bl	8003c1e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2160      	movs	r1, #96	@ 0x60
 80039fa:	4618      	mov	r0, r3
 80039fc:	f000 f93f 	bl	8003c7e <TIM_ITRx_SetConfig>
      break;
 8003a00:	e01c      	b.n	8003a3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a0e:	461a      	mov	r2, r3
 8003a10:	f000 f8d6 	bl	8003bc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2140      	movs	r1, #64	@ 0x40
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f000 f92f 	bl	8003c7e <TIM_ITRx_SetConfig>
      break;
 8003a20:	e00c      	b.n	8003a3c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	4610      	mov	r0, r2
 8003a2e:	f000 f926 	bl	8003c7e <TIM_ITRx_SetConfig>
      break;
 8003a32:	e003      	b.n	8003a3c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	73fb      	strb	r3, [r7, #15]
      break;
 8003a38:	e000      	b.n	8003a3c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003a3a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3710      	adds	r7, #16
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a56:	b480      	push	{r7}
 8003a58:	b083      	sub	sp, #12
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a5e:	bf00      	nop
 8003a60:	370c      	adds	r7, #12
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr

08003a6a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a6a:	b480      	push	{r7}
 8003a6c:	b083      	sub	sp, #12
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a72:	bf00      	nop
 8003a74:	370c      	adds	r7, #12
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr

08003a7e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a7e:	b480      	push	{r7}
 8003a80:	b083      	sub	sp, #12
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a86:	bf00      	nop
 8003a88:	370c      	adds	r7, #12
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr

08003a92 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a92:	b480      	push	{r7}
 8003a94:	b083      	sub	sp, #12
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a9a:	bf00      	nop
 8003a9c:	370c      	adds	r7, #12
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr
	...

08003aa8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b085      	sub	sp, #20
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4a3a      	ldr	r2, [pc, #232]	@ (8003ba4 <TIM_Base_SetConfig+0xfc>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d00f      	beq.n	8003ae0 <TIM_Base_SetConfig+0x38>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ac6:	d00b      	beq.n	8003ae0 <TIM_Base_SetConfig+0x38>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4a37      	ldr	r2, [pc, #220]	@ (8003ba8 <TIM_Base_SetConfig+0x100>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d007      	beq.n	8003ae0 <TIM_Base_SetConfig+0x38>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a36      	ldr	r2, [pc, #216]	@ (8003bac <TIM_Base_SetConfig+0x104>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d003      	beq.n	8003ae0 <TIM_Base_SetConfig+0x38>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4a35      	ldr	r2, [pc, #212]	@ (8003bb0 <TIM_Base_SetConfig+0x108>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d108      	bne.n	8003af2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ae6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	68fa      	ldr	r2, [r7, #12]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a2b      	ldr	r2, [pc, #172]	@ (8003ba4 <TIM_Base_SetConfig+0xfc>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d01b      	beq.n	8003b32 <TIM_Base_SetConfig+0x8a>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b00:	d017      	beq.n	8003b32 <TIM_Base_SetConfig+0x8a>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a28      	ldr	r2, [pc, #160]	@ (8003ba8 <TIM_Base_SetConfig+0x100>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d013      	beq.n	8003b32 <TIM_Base_SetConfig+0x8a>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a27      	ldr	r2, [pc, #156]	@ (8003bac <TIM_Base_SetConfig+0x104>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d00f      	beq.n	8003b32 <TIM_Base_SetConfig+0x8a>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a26      	ldr	r2, [pc, #152]	@ (8003bb0 <TIM_Base_SetConfig+0x108>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d00b      	beq.n	8003b32 <TIM_Base_SetConfig+0x8a>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a25      	ldr	r2, [pc, #148]	@ (8003bb4 <TIM_Base_SetConfig+0x10c>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d007      	beq.n	8003b32 <TIM_Base_SetConfig+0x8a>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a24      	ldr	r2, [pc, #144]	@ (8003bb8 <TIM_Base_SetConfig+0x110>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d003      	beq.n	8003b32 <TIM_Base_SetConfig+0x8a>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a23      	ldr	r2, [pc, #140]	@ (8003bbc <TIM_Base_SetConfig+0x114>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d108      	bne.n	8003b44 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	68fa      	ldr	r2, [r7, #12]
 8003b56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	689a      	ldr	r2, [r3, #8]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	4a0e      	ldr	r2, [pc, #56]	@ (8003ba4 <TIM_Base_SetConfig+0xfc>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d103      	bne.n	8003b78 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	691a      	ldr	r2, [r3, #16]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	f003 0301 	and.w	r3, r3, #1
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d105      	bne.n	8003b96 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	f023 0201 	bic.w	r2, r3, #1
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	611a      	str	r2, [r3, #16]
  }
}
 8003b96:	bf00      	nop
 8003b98:	3714      	adds	r7, #20
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr
 8003ba2:	bf00      	nop
 8003ba4:	40010000 	.word	0x40010000
 8003ba8:	40000400 	.word	0x40000400
 8003bac:	40000800 	.word	0x40000800
 8003bb0:	40000c00 	.word	0x40000c00
 8003bb4:	40014000 	.word	0x40014000
 8003bb8:	40014400 	.word	0x40014400
 8003bbc:	40014800 	.word	0x40014800

08003bc0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b087      	sub	sp, #28
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6a1b      	ldr	r3, [r3, #32]
 8003bd0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6a1b      	ldr	r3, [r3, #32]
 8003bd6:	f023 0201 	bic.w	r2, r3, #1
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	699b      	ldr	r3, [r3, #24]
 8003be2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003bea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	011b      	lsls	r3, r3, #4
 8003bf0:	693a      	ldr	r2, [r7, #16]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	f023 030a 	bic.w	r3, r3, #10
 8003bfc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003bfe:	697a      	ldr	r2, [r7, #20]
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	693a      	ldr	r2, [r7, #16]
 8003c0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	697a      	ldr	r2, [r7, #20]
 8003c10:	621a      	str	r2, [r3, #32]
}
 8003c12:	bf00      	nop
 8003c14:	371c      	adds	r7, #28
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr

08003c1e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c1e:	b480      	push	{r7}
 8003c20:	b087      	sub	sp, #28
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	60f8      	str	r0, [r7, #12]
 8003c26:	60b9      	str	r1, [r7, #8]
 8003c28:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6a1b      	ldr	r3, [r3, #32]
 8003c2e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6a1b      	ldr	r3, [r3, #32]
 8003c34:	f023 0210 	bic.w	r2, r3, #16
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	699b      	ldr	r3, [r3, #24]
 8003c40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003c48:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	031b      	lsls	r3, r3, #12
 8003c4e:	693a      	ldr	r2, [r7, #16]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003c5a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	011b      	lsls	r3, r3, #4
 8003c60:	697a      	ldr	r2, [r7, #20]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	693a      	ldr	r2, [r7, #16]
 8003c6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	697a      	ldr	r2, [r7, #20]
 8003c70:	621a      	str	r2, [r3, #32]
}
 8003c72:	bf00      	nop
 8003c74:	371c      	adds	r7, #28
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr

08003c7e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c7e:	b480      	push	{r7}
 8003c80:	b085      	sub	sp, #20
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
 8003c86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c94:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c96:	683a      	ldr	r2, [r7, #0]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	f043 0307 	orr.w	r3, r3, #7
 8003ca0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	68fa      	ldr	r2, [r7, #12]
 8003ca6:	609a      	str	r2, [r3, #8]
}
 8003ca8:	bf00      	nop
 8003caa:	3714      	adds	r7, #20
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b087      	sub	sp, #28
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	607a      	str	r2, [r7, #4]
 8003cc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003cce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	021a      	lsls	r2, r3, #8
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	431a      	orrs	r2, r3
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	697a      	ldr	r2, [r7, #20]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	697a      	ldr	r2, [r7, #20]
 8003ce6:	609a      	str	r2, [r3, #8]
}
 8003ce8:	bf00      	nop
 8003cea:	371c      	adds	r7, #28
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b085      	sub	sp, #20
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d101      	bne.n	8003d0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d08:	2302      	movs	r3, #2
 8003d0a:	e050      	b.n	8003dae <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2202      	movs	r2, #2
 8003d18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	68fa      	ldr	r2, [r7, #12]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68fa      	ldr	r2, [r7, #12]
 8003d44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a1c      	ldr	r2, [pc, #112]	@ (8003dbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d018      	beq.n	8003d82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d58:	d013      	beq.n	8003d82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a18      	ldr	r2, [pc, #96]	@ (8003dc0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d00e      	beq.n	8003d82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a16      	ldr	r2, [pc, #88]	@ (8003dc4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d009      	beq.n	8003d82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a15      	ldr	r2, [pc, #84]	@ (8003dc8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d004      	beq.n	8003d82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a13      	ldr	r2, [pc, #76]	@ (8003dcc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d10c      	bne.n	8003d9c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	68ba      	ldr	r2, [r7, #8]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	68ba      	ldr	r2, [r7, #8]
 8003d9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3714      	adds	r7, #20
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	40010000 	.word	0x40010000
 8003dc0:	40000400 	.word	0x40000400
 8003dc4:	40000800 	.word	0x40000800
 8003dc8:	40000c00 	.word	0x40000c00
 8003dcc:	40014000 	.word	0x40014000

08003dd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003dd8:	bf00      	nop
 8003dda:	370c      	adds	r7, #12
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003dec:	bf00      	nop
 8003dee:	370c      	adds	r7, #12
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b082      	sub	sp, #8
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d101      	bne.n	8003e0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e042      	b.n	8003e90 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d106      	bne.n	8003e24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f7fd fe74 	bl	8001b0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2224      	movs	r2, #36	@ 0x24
 8003e28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68da      	ldr	r2, [r3, #12]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f000 fdc1 	bl	80049c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	691a      	ldr	r2, [r3, #16]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003e50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	695a      	ldr	r2, [r3, #20]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003e60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	68da      	ldr	r2, [r3, #12]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2220      	movs	r2, #32
 8003e7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2220      	movs	r2, #32
 8003e84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003e8e:	2300      	movs	r3, #0
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3708      	adds	r7, #8
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b08c      	sub	sp, #48	@ 0x30
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	60b9      	str	r1, [r7, #8]
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	2b20      	cmp	r3, #32
 8003eb0:	d156      	bne.n	8003f60 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d002      	beq.n	8003ebe <HAL_UART_Transmit_DMA+0x26>
 8003eb8:	88fb      	ldrh	r3, [r7, #6]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d101      	bne.n	8003ec2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e04f      	b.n	8003f62 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8003ec2:	68ba      	ldr	r2, [r7, #8]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	88fa      	ldrh	r2, [r7, #6]
 8003ecc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	88fa      	ldrh	r2, [r7, #6]
 8003ed2:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2221      	movs	r2, #33	@ 0x21
 8003ede:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ee6:	4a21      	ldr	r2, [pc, #132]	@ (8003f6c <HAL_UART_Transmit_DMA+0xd4>)
 8003ee8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eee:	4a20      	ldr	r2, [pc, #128]	@ (8003f70 <HAL_UART_Transmit_DMA+0xd8>)
 8003ef0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ef6:	4a1f      	ldr	r2, [pc, #124]	@ (8003f74 <HAL_UART_Transmit_DMA+0xdc>)
 8003ef8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003efe:	2200      	movs	r2, #0
 8003f00:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8003f02:	f107 0308 	add.w	r3, r7, #8
 8003f06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003f0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f0e:	6819      	ldr	r1, [r3, #0]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	3304      	adds	r3, #4
 8003f16:	461a      	mov	r2, r3
 8003f18:	88fb      	ldrh	r3, [r7, #6]
 8003f1a:	f7fe f9d1 	bl	80022c0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003f26:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	3314      	adds	r3, #20
 8003f2e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	e853 3f00 	ldrex	r3, [r3]
 8003f36:	617b      	str	r3, [r7, #20]
   return(result);
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f3e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	3314      	adds	r3, #20
 8003f46:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f48:	627a      	str	r2, [r7, #36]	@ 0x24
 8003f4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f4c:	6a39      	ldr	r1, [r7, #32]
 8003f4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f50:	e841 2300 	strex	r3, r2, [r1]
 8003f54:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d1e5      	bne.n	8003f28 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	e000      	b.n	8003f62 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8003f60:	2302      	movs	r3, #2
  }
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3730      	adds	r7, #48	@ 0x30
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	080044f1 	.word	0x080044f1
 8003f70:	0800458b 	.word	0x0800458b
 8003f74:	080045a7 	.word	0x080045a7

08003f78 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b0ba      	sub	sp, #232	@ 0xe8
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	695b      	ldr	r3, [r3, #20]
 8003f9a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003faa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fae:	f003 030f 	and.w	r3, r3, #15
 8003fb2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003fb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d10f      	bne.n	8003fde <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003fbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fc2:	f003 0320 	and.w	r3, r3, #32
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d009      	beq.n	8003fde <HAL_UART_IRQHandler+0x66>
 8003fca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fce:	f003 0320 	and.w	r3, r3, #32
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d003      	beq.n	8003fde <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f000 fc36 	bl	8004848 <UART_Receive_IT>
      return;
 8003fdc:	e25b      	b.n	8004496 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003fde:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	f000 80de 	beq.w	80041a4 <HAL_UART_IRQHandler+0x22c>
 8003fe8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003fec:	f003 0301 	and.w	r3, r3, #1
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d106      	bne.n	8004002 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003ff4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ff8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	f000 80d1 	beq.w	80041a4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	2b00      	cmp	r3, #0
 800400c:	d00b      	beq.n	8004026 <HAL_UART_IRQHandler+0xae>
 800400e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004012:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004016:	2b00      	cmp	r3, #0
 8004018:	d005      	beq.n	8004026 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800401e:	f043 0201 	orr.w	r2, r3, #1
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004026:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800402a:	f003 0304 	and.w	r3, r3, #4
 800402e:	2b00      	cmp	r3, #0
 8004030:	d00b      	beq.n	800404a <HAL_UART_IRQHandler+0xd2>
 8004032:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004036:	f003 0301 	and.w	r3, r3, #1
 800403a:	2b00      	cmp	r3, #0
 800403c:	d005      	beq.n	800404a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004042:	f043 0202 	orr.w	r2, r3, #2
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800404a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800404e:	f003 0302 	and.w	r3, r3, #2
 8004052:	2b00      	cmp	r3, #0
 8004054:	d00b      	beq.n	800406e <HAL_UART_IRQHandler+0xf6>
 8004056:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800405a:	f003 0301 	and.w	r3, r3, #1
 800405e:	2b00      	cmp	r3, #0
 8004060:	d005      	beq.n	800406e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004066:	f043 0204 	orr.w	r2, r3, #4
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800406e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004072:	f003 0308 	and.w	r3, r3, #8
 8004076:	2b00      	cmp	r3, #0
 8004078:	d011      	beq.n	800409e <HAL_UART_IRQHandler+0x126>
 800407a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800407e:	f003 0320 	and.w	r3, r3, #32
 8004082:	2b00      	cmp	r3, #0
 8004084:	d105      	bne.n	8004092 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004086:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800408a:	f003 0301 	and.w	r3, r3, #1
 800408e:	2b00      	cmp	r3, #0
 8004090:	d005      	beq.n	800409e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004096:	f043 0208 	orr.w	r2, r3, #8
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	f000 81f2 	beq.w	800448c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80040a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040ac:	f003 0320 	and.w	r3, r3, #32
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d008      	beq.n	80040c6 <HAL_UART_IRQHandler+0x14e>
 80040b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040b8:	f003 0320 	and.w	r3, r3, #32
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d002      	beq.n	80040c6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f000 fbc1 	bl	8004848 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	695b      	ldr	r3, [r3, #20]
 80040cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040d0:	2b40      	cmp	r3, #64	@ 0x40
 80040d2:	bf0c      	ite	eq
 80040d4:	2301      	moveq	r3, #1
 80040d6:	2300      	movne	r3, #0
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040e2:	f003 0308 	and.w	r3, r3, #8
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d103      	bne.n	80040f2 <HAL_UART_IRQHandler+0x17a>
 80040ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d04f      	beq.n	8004192 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 fac9 	bl	800468a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	695b      	ldr	r3, [r3, #20]
 80040fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004102:	2b40      	cmp	r3, #64	@ 0x40
 8004104:	d141      	bne.n	800418a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	3314      	adds	r3, #20
 800410c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004110:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004114:	e853 3f00 	ldrex	r3, [r3]
 8004118:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800411c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004120:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004124:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	3314      	adds	r3, #20
 800412e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004132:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004136:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800413a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800413e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004142:	e841 2300 	strex	r3, r2, [r1]
 8004146:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800414a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d1d9      	bne.n	8004106 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004156:	2b00      	cmp	r3, #0
 8004158:	d013      	beq.n	8004182 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800415e:	4a7e      	ldr	r2, [pc, #504]	@ (8004358 <HAL_UART_IRQHandler+0x3e0>)
 8004160:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004166:	4618      	mov	r0, r3
 8004168:	f7fe f972 	bl	8002450 <HAL_DMA_Abort_IT>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d016      	beq.n	80041a0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004176:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800417c:	4610      	mov	r0, r2
 800417e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004180:	e00e      	b.n	80041a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f000 f99e 	bl	80044c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004188:	e00a      	b.n	80041a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 f99a 	bl	80044c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004190:	e006      	b.n	80041a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 f996 	bl	80044c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800419e:	e175      	b.n	800448c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041a0:	bf00      	nop
    return;
 80041a2:	e173      	b.n	800448c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	f040 814f 	bne.w	800444c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80041ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041b2:	f003 0310 	and.w	r3, r3, #16
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	f000 8148 	beq.w	800444c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80041bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041c0:	f003 0310 	and.w	r3, r3, #16
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	f000 8141 	beq.w	800444c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80041ca:	2300      	movs	r3, #0
 80041cc:	60bb      	str	r3, [r7, #8]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	60bb      	str	r3, [r7, #8]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	60bb      	str	r3, [r7, #8]
 80041de:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	695b      	ldr	r3, [r3, #20]
 80041e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041ea:	2b40      	cmp	r3, #64	@ 0x40
 80041ec:	f040 80b6 	bne.w	800435c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80041fc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004200:	2b00      	cmp	r3, #0
 8004202:	f000 8145 	beq.w	8004490 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800420a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800420e:	429a      	cmp	r2, r3
 8004210:	f080 813e 	bcs.w	8004490 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800421a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004220:	69db      	ldr	r3, [r3, #28]
 8004222:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004226:	f000 8088 	beq.w	800433a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	330c      	adds	r3, #12
 8004230:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004234:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004238:	e853 3f00 	ldrex	r3, [r3]
 800423c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004240:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004244:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004248:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	330c      	adds	r3, #12
 8004252:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004256:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800425a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800425e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004262:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004266:	e841 2300 	strex	r3, r2, [r1]
 800426a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800426e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004272:	2b00      	cmp	r3, #0
 8004274:	d1d9      	bne.n	800422a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	3314      	adds	r3, #20
 800427c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800427e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004280:	e853 3f00 	ldrex	r3, [r3]
 8004284:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004286:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004288:	f023 0301 	bic.w	r3, r3, #1
 800428c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	3314      	adds	r3, #20
 8004296:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800429a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800429e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80042a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80042a6:	e841 2300 	strex	r3, r2, [r1]
 80042aa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80042ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d1e1      	bne.n	8004276 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	3314      	adds	r3, #20
 80042b8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80042bc:	e853 3f00 	ldrex	r3, [r3]
 80042c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80042c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80042c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	3314      	adds	r3, #20
 80042d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80042d6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80042d8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042da:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80042dc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80042de:	e841 2300 	strex	r3, r2, [r1]
 80042e2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80042e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d1e3      	bne.n	80042b2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2220      	movs	r2, #32
 80042ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	330c      	adds	r3, #12
 80042fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004300:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004302:	e853 3f00 	ldrex	r3, [r3]
 8004306:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004308:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800430a:	f023 0310 	bic.w	r3, r3, #16
 800430e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	330c      	adds	r3, #12
 8004318:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800431c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800431e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004320:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004322:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004324:	e841 2300 	strex	r3, r2, [r1]
 8004328:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800432a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800432c:	2b00      	cmp	r3, #0
 800432e:	d1e3      	bne.n	80042f8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004334:	4618      	mov	r0, r3
 8004336:	f7fe f81b 	bl	8002370 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2202      	movs	r2, #2
 800433e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004348:	b29b      	uxth	r3, r3
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	b29b      	uxth	r3, r3
 800434e:	4619      	mov	r1, r3
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f000 f8c1 	bl	80044d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004356:	e09b      	b.n	8004490 <HAL_UART_IRQHandler+0x518>
 8004358:	08004751 	.word	0x08004751
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004364:	b29b      	uxth	r3, r3
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004370:	b29b      	uxth	r3, r3
 8004372:	2b00      	cmp	r3, #0
 8004374:	f000 808e 	beq.w	8004494 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004378:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800437c:	2b00      	cmp	r3, #0
 800437e:	f000 8089 	beq.w	8004494 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	330c      	adds	r3, #12
 8004388:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800438a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800438c:	e853 3f00 	ldrex	r3, [r3]
 8004390:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004392:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004394:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004398:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	330c      	adds	r3, #12
 80043a2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80043a6:	647a      	str	r2, [r7, #68]	@ 0x44
 80043a8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043aa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80043ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80043ae:	e841 2300 	strex	r3, r2, [r1]
 80043b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80043b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d1e3      	bne.n	8004382 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	3314      	adds	r3, #20
 80043c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c4:	e853 3f00 	ldrex	r3, [r3]
 80043c8:	623b      	str	r3, [r7, #32]
   return(result);
 80043ca:	6a3b      	ldr	r3, [r7, #32]
 80043cc:	f023 0301 	bic.w	r3, r3, #1
 80043d0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	3314      	adds	r3, #20
 80043da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80043de:	633a      	str	r2, [r7, #48]	@ 0x30
 80043e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80043e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043e6:	e841 2300 	strex	r3, r2, [r1]
 80043ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80043ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1e3      	bne.n	80043ba <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2220      	movs	r2, #32
 80043f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	330c      	adds	r3, #12
 8004406:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	e853 3f00 	ldrex	r3, [r3]
 800440e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f023 0310 	bic.w	r3, r3, #16
 8004416:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	330c      	adds	r3, #12
 8004420:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004424:	61fa      	str	r2, [r7, #28]
 8004426:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004428:	69b9      	ldr	r1, [r7, #24]
 800442a:	69fa      	ldr	r2, [r7, #28]
 800442c:	e841 2300 	strex	r3, r2, [r1]
 8004430:	617b      	str	r3, [r7, #20]
   return(result);
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d1e3      	bne.n	8004400 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2202      	movs	r2, #2
 800443c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800443e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004442:	4619      	mov	r1, r3
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f000 f847 	bl	80044d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800444a:	e023      	b.n	8004494 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800444c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004450:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004454:	2b00      	cmp	r3, #0
 8004456:	d009      	beq.n	800446c <HAL_UART_IRQHandler+0x4f4>
 8004458:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800445c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004460:	2b00      	cmp	r3, #0
 8004462:	d003      	beq.n	800446c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f000 f987 	bl	8004778 <UART_Transmit_IT>
    return;
 800446a:	e014      	b.n	8004496 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800446c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004470:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004474:	2b00      	cmp	r3, #0
 8004476:	d00e      	beq.n	8004496 <HAL_UART_IRQHandler+0x51e>
 8004478:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800447c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004480:	2b00      	cmp	r3, #0
 8004482:	d008      	beq.n	8004496 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f000 f9c7 	bl	8004818 <UART_EndTransmit_IT>
    return;
 800448a:	e004      	b.n	8004496 <HAL_UART_IRQHandler+0x51e>
    return;
 800448c:	bf00      	nop
 800448e:	e002      	b.n	8004496 <HAL_UART_IRQHandler+0x51e>
      return;
 8004490:	bf00      	nop
 8004492:	e000      	b.n	8004496 <HAL_UART_IRQHandler+0x51e>
      return;
 8004494:	bf00      	nop
  }
}
 8004496:	37e8      	adds	r7, #232	@ 0xe8
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}

0800449c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80044a4:	bf00      	nop
 80044a6:	370c      	adds	r7, #12
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80044b8:	bf00      	nop
 80044ba:	370c      	adds	r7, #12
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80044cc:	bf00      	nop
 80044ce:	370c      	adds	r7, #12
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr

080044d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	460b      	mov	r3, r1
 80044e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80044e4:	bf00      	nop
 80044e6:	370c      	adds	r7, #12
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr

080044f0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b090      	sub	sp, #64	@ 0x40
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004508:	2b00      	cmp	r3, #0
 800450a:	d137      	bne.n	800457c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800450c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800450e:	2200      	movs	r2, #0
 8004510:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004512:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	3314      	adds	r3, #20
 8004518:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800451a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800451c:	e853 3f00 	ldrex	r3, [r3]
 8004520:	623b      	str	r3, [r7, #32]
   return(result);
 8004522:	6a3b      	ldr	r3, [r7, #32]
 8004524:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004528:	63bb      	str	r3, [r7, #56]	@ 0x38
 800452a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	3314      	adds	r3, #20
 8004530:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004532:	633a      	str	r2, [r7, #48]	@ 0x30
 8004534:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004536:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004538:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800453a:	e841 2300 	strex	r3, r2, [r1]
 800453e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004542:	2b00      	cmp	r3, #0
 8004544:	d1e5      	bne.n	8004512 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004546:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	330c      	adds	r3, #12
 800454c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	e853 3f00 	ldrex	r3, [r3]
 8004554:	60fb      	str	r3, [r7, #12]
   return(result);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800455c:	637b      	str	r3, [r7, #52]	@ 0x34
 800455e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	330c      	adds	r3, #12
 8004564:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004566:	61fa      	str	r2, [r7, #28]
 8004568:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800456a:	69b9      	ldr	r1, [r7, #24]
 800456c:	69fa      	ldr	r2, [r7, #28]
 800456e:	e841 2300 	strex	r3, r2, [r1]
 8004572:	617b      	str	r3, [r7, #20]
   return(result);
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d1e5      	bne.n	8004546 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800457a:	e002      	b.n	8004582 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800457c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800457e:	f7fd f853 	bl	8001628 <HAL_UART_TxCpltCallback>
}
 8004582:	bf00      	nop
 8004584:	3740      	adds	r7, #64	@ 0x40
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}

0800458a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800458a:	b580      	push	{r7, lr}
 800458c:	b084      	sub	sp, #16
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004596:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004598:	68f8      	ldr	r0, [r7, #12]
 800459a:	f7ff ff7f 	bl	800449c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800459e:	bf00      	nop
 80045a0:	3710      	adds	r7, #16
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}

080045a6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80045a6:	b580      	push	{r7, lr}
 80045a8:	b084      	sub	sp, #16
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80045ae:	2300      	movs	r3, #0
 80045b0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045b6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	695b      	ldr	r3, [r3, #20]
 80045be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045c2:	2b80      	cmp	r3, #128	@ 0x80
 80045c4:	bf0c      	ite	eq
 80045c6:	2301      	moveq	r3, #1
 80045c8:	2300      	movne	r3, #0
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	2b21      	cmp	r3, #33	@ 0x21
 80045d8:	d108      	bne.n	80045ec <UART_DMAError+0x46>
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d005      	beq.n	80045ec <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	2200      	movs	r2, #0
 80045e4:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80045e6:	68b8      	ldr	r0, [r7, #8]
 80045e8:	f000 f827 	bl	800463a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	695b      	ldr	r3, [r3, #20]
 80045f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045f6:	2b40      	cmp	r3, #64	@ 0x40
 80045f8:	bf0c      	ite	eq
 80045fa:	2301      	moveq	r3, #1
 80045fc:	2300      	movne	r3, #0
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004608:	b2db      	uxtb	r3, r3
 800460a:	2b22      	cmp	r3, #34	@ 0x22
 800460c:	d108      	bne.n	8004620 <UART_DMAError+0x7a>
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d005      	beq.n	8004620 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	2200      	movs	r2, #0
 8004618:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800461a:	68b8      	ldr	r0, [r7, #8]
 800461c:	f000 f835 	bl	800468a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004624:	f043 0210 	orr.w	r2, r3, #16
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800462c:	68b8      	ldr	r0, [r7, #8]
 800462e:	f7ff ff49 	bl	80044c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004632:	bf00      	nop
 8004634:	3710      	adds	r7, #16
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}

0800463a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800463a:	b480      	push	{r7}
 800463c:	b089      	sub	sp, #36	@ 0x24
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	330c      	adds	r3, #12
 8004648:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	e853 3f00 	ldrex	r3, [r3]
 8004650:	60bb      	str	r3, [r7, #8]
   return(result);
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004658:	61fb      	str	r3, [r7, #28]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	330c      	adds	r3, #12
 8004660:	69fa      	ldr	r2, [r7, #28]
 8004662:	61ba      	str	r2, [r7, #24]
 8004664:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004666:	6979      	ldr	r1, [r7, #20]
 8004668:	69ba      	ldr	r2, [r7, #24]
 800466a:	e841 2300 	strex	r3, r2, [r1]
 800466e:	613b      	str	r3, [r7, #16]
   return(result);
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d1e5      	bne.n	8004642 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2220      	movs	r2, #32
 800467a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800467e:	bf00      	nop
 8004680:	3724      	adds	r7, #36	@ 0x24
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr

0800468a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800468a:	b480      	push	{r7}
 800468c:	b095      	sub	sp, #84	@ 0x54
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	330c      	adds	r3, #12
 8004698:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800469a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800469c:	e853 3f00 	ldrex	r3, [r3]
 80046a0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80046a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80046a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	330c      	adds	r3, #12
 80046b0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80046b2:	643a      	str	r2, [r7, #64]	@ 0x40
 80046b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80046b8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80046ba:	e841 2300 	strex	r3, r2, [r1]
 80046be:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80046c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d1e5      	bne.n	8004692 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	3314      	adds	r3, #20
 80046cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ce:	6a3b      	ldr	r3, [r7, #32]
 80046d0:	e853 3f00 	ldrex	r3, [r3]
 80046d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	f023 0301 	bic.w	r3, r3, #1
 80046dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	3314      	adds	r3, #20
 80046e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80046e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80046e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80046ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046ee:	e841 2300 	strex	r3, r2, [r1]
 80046f2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80046f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d1e5      	bne.n	80046c6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d119      	bne.n	8004736 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	330c      	adds	r3, #12
 8004708:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	e853 3f00 	ldrex	r3, [r3]
 8004710:	60bb      	str	r3, [r7, #8]
   return(result);
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	f023 0310 	bic.w	r3, r3, #16
 8004718:	647b      	str	r3, [r7, #68]	@ 0x44
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	330c      	adds	r3, #12
 8004720:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004722:	61ba      	str	r2, [r7, #24]
 8004724:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004726:	6979      	ldr	r1, [r7, #20]
 8004728:	69ba      	ldr	r2, [r7, #24]
 800472a:	e841 2300 	strex	r3, r2, [r1]
 800472e:	613b      	str	r3, [r7, #16]
   return(result);
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d1e5      	bne.n	8004702 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2220      	movs	r2, #32
 800473a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004744:	bf00      	nop
 8004746:	3754      	adds	r7, #84	@ 0x54
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800475c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2200      	movs	r2, #0
 8004762:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2200      	movs	r2, #0
 8004768:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800476a:	68f8      	ldr	r0, [r7, #12]
 800476c:	f7ff feaa 	bl	80044c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004770:	bf00      	nop
 8004772:	3710      	adds	r7, #16
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004778:	b480      	push	{r7}
 800477a:	b085      	sub	sp, #20
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004786:	b2db      	uxtb	r3, r3
 8004788:	2b21      	cmp	r3, #33	@ 0x21
 800478a:	d13e      	bne.n	800480a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004794:	d114      	bne.n	80047c0 <UART_Transmit_IT+0x48>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	691b      	ldr	r3, [r3, #16]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d110      	bne.n	80047c0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a1b      	ldr	r3, [r3, #32]
 80047a2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	881b      	ldrh	r3, [r3, #0]
 80047a8:	461a      	mov	r2, r3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047b2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6a1b      	ldr	r3, [r3, #32]
 80047b8:	1c9a      	adds	r2, r3, #2
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	621a      	str	r2, [r3, #32]
 80047be:	e008      	b.n	80047d2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6a1b      	ldr	r3, [r3, #32]
 80047c4:	1c59      	adds	r1, r3, #1
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	6211      	str	r1, [r2, #32]
 80047ca:	781a      	ldrb	r2, [r3, #0]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	3b01      	subs	r3, #1
 80047da:	b29b      	uxth	r3, r3
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	4619      	mov	r1, r3
 80047e0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d10f      	bne.n	8004806 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68da      	ldr	r2, [r3, #12]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80047f4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	68da      	ldr	r2, [r3, #12]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004804:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004806:	2300      	movs	r3, #0
 8004808:	e000      	b.n	800480c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800480a:	2302      	movs	r3, #2
  }
}
 800480c:	4618      	mov	r0, r3
 800480e:	3714      	adds	r7, #20
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b082      	sub	sp, #8
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	68da      	ldr	r2, [r3, #12]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800482e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2220      	movs	r2, #32
 8004834:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f7fc fef5 	bl	8001628 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800483e:	2300      	movs	r3, #0
}
 8004840:	4618      	mov	r0, r3
 8004842:	3708      	adds	r7, #8
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b08c      	sub	sp, #48	@ 0x30
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004856:	b2db      	uxtb	r3, r3
 8004858:	2b22      	cmp	r3, #34	@ 0x22
 800485a:	f040 80ae 	bne.w	80049ba <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004866:	d117      	bne.n	8004898 <UART_Receive_IT+0x50>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	691b      	ldr	r3, [r3, #16]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d113      	bne.n	8004898 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004870:	2300      	movs	r3, #0
 8004872:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004878:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	b29b      	uxth	r3, r3
 8004882:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004886:	b29a      	uxth	r2, r3
 8004888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800488a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004890:	1c9a      	adds	r2, r3, #2
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	629a      	str	r2, [r3, #40]	@ 0x28
 8004896:	e026      	b.n	80048e6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800489c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800489e:	2300      	movs	r3, #0
 80048a0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048aa:	d007      	beq.n	80048bc <UART_Receive_IT+0x74>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d10a      	bne.n	80048ca <UART_Receive_IT+0x82>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	691b      	ldr	r3, [r3, #16]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d106      	bne.n	80048ca <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	b2da      	uxtb	r2, r3
 80048c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048c6:	701a      	strb	r2, [r3, #0]
 80048c8:	e008      	b.n	80048dc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80048d6:	b2da      	uxtb	r2, r3
 80048d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048da:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048e0:	1c5a      	adds	r2, r3, #1
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	3b01      	subs	r3, #1
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	4619      	mov	r1, r3
 80048f4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d15d      	bne.n	80049b6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68da      	ldr	r2, [r3, #12]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f022 0220 	bic.w	r2, r2, #32
 8004908:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68da      	ldr	r2, [r3, #12]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004918:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	695a      	ldr	r2, [r3, #20]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f022 0201 	bic.w	r2, r2, #1
 8004928:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2220      	movs	r2, #32
 800492e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800493c:	2b01      	cmp	r3, #1
 800493e:	d135      	bne.n	80049ac <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	330c      	adds	r3, #12
 800494c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	e853 3f00 	ldrex	r3, [r3]
 8004954:	613b      	str	r3, [r7, #16]
   return(result);
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	f023 0310 	bic.w	r3, r3, #16
 800495c:	627b      	str	r3, [r7, #36]	@ 0x24
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	330c      	adds	r3, #12
 8004964:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004966:	623a      	str	r2, [r7, #32]
 8004968:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800496a:	69f9      	ldr	r1, [r7, #28]
 800496c:	6a3a      	ldr	r2, [r7, #32]
 800496e:	e841 2300 	strex	r3, r2, [r1]
 8004972:	61bb      	str	r3, [r7, #24]
   return(result);
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d1e5      	bne.n	8004946 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 0310 	and.w	r3, r3, #16
 8004984:	2b10      	cmp	r3, #16
 8004986:	d10a      	bne.n	800499e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004988:	2300      	movs	r3, #0
 800498a:	60fb      	str	r3, [r7, #12]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	60fb      	str	r3, [r7, #12]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	60fb      	str	r3, [r7, #12]
 800499c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80049a2:	4619      	mov	r1, r3
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f7ff fd97 	bl	80044d8 <HAL_UARTEx_RxEventCallback>
 80049aa:	e002      	b.n	80049b2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f7ff fd7f 	bl	80044b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80049b2:	2300      	movs	r3, #0
 80049b4:	e002      	b.n	80049bc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80049b6:	2300      	movs	r3, #0
 80049b8:	e000      	b.n	80049bc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80049ba:	2302      	movs	r3, #2
  }
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3730      	adds	r7, #48	@ 0x30
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049c8:	b0c0      	sub	sp, #256	@ 0x100
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	691b      	ldr	r3, [r3, #16]
 80049d8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80049dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049e0:	68d9      	ldr	r1, [r3, #12]
 80049e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	ea40 0301 	orr.w	r3, r0, r1
 80049ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80049ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049f2:	689a      	ldr	r2, [r3, #8]
 80049f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	431a      	orrs	r2, r3
 80049fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a00:	695b      	ldr	r3, [r3, #20]
 8004a02:	431a      	orrs	r2, r3
 8004a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a08:	69db      	ldr	r3, [r3, #28]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004a1c:	f021 010c 	bic.w	r1, r1, #12
 8004a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004a2a:	430b      	orrs	r3, r1
 8004a2c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	695b      	ldr	r3, [r3, #20]
 8004a36:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004a3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a3e:	6999      	ldr	r1, [r3, #24]
 8004a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	ea40 0301 	orr.w	r3, r0, r1
 8004a4a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	4b8f      	ldr	r3, [pc, #572]	@ (8004c90 <UART_SetConfig+0x2cc>)
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d005      	beq.n	8004a64 <UART_SetConfig+0xa0>
 8004a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	4b8d      	ldr	r3, [pc, #564]	@ (8004c94 <UART_SetConfig+0x2d0>)
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d104      	bne.n	8004a6e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a64:	f7fe fd48 	bl	80034f8 <HAL_RCC_GetPCLK2Freq>
 8004a68:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004a6c:	e003      	b.n	8004a76 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a6e:	f7fe fd2f 	bl	80034d0 <HAL_RCC_GetPCLK1Freq>
 8004a72:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a7a:	69db      	ldr	r3, [r3, #28]
 8004a7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a80:	f040 810c 	bne.w	8004c9c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004a8e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004a92:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004a96:	4622      	mov	r2, r4
 8004a98:	462b      	mov	r3, r5
 8004a9a:	1891      	adds	r1, r2, r2
 8004a9c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004a9e:	415b      	adcs	r3, r3
 8004aa0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004aa2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004aa6:	4621      	mov	r1, r4
 8004aa8:	eb12 0801 	adds.w	r8, r2, r1
 8004aac:	4629      	mov	r1, r5
 8004aae:	eb43 0901 	adc.w	r9, r3, r1
 8004ab2:	f04f 0200 	mov.w	r2, #0
 8004ab6:	f04f 0300 	mov.w	r3, #0
 8004aba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004abe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ac2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ac6:	4690      	mov	r8, r2
 8004ac8:	4699      	mov	r9, r3
 8004aca:	4623      	mov	r3, r4
 8004acc:	eb18 0303 	adds.w	r3, r8, r3
 8004ad0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004ad4:	462b      	mov	r3, r5
 8004ad6:	eb49 0303 	adc.w	r3, r9, r3
 8004ada:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004ade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004aea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004aee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004af2:	460b      	mov	r3, r1
 8004af4:	18db      	adds	r3, r3, r3
 8004af6:	653b      	str	r3, [r7, #80]	@ 0x50
 8004af8:	4613      	mov	r3, r2
 8004afa:	eb42 0303 	adc.w	r3, r2, r3
 8004afe:	657b      	str	r3, [r7, #84]	@ 0x54
 8004b00:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004b04:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004b08:	f7fb fbba 	bl	8000280 <__aeabi_uldivmod>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	460b      	mov	r3, r1
 8004b10:	4b61      	ldr	r3, [pc, #388]	@ (8004c98 <UART_SetConfig+0x2d4>)
 8004b12:	fba3 2302 	umull	r2, r3, r3, r2
 8004b16:	095b      	lsrs	r3, r3, #5
 8004b18:	011c      	lsls	r4, r3, #4
 8004b1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004b24:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004b28:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004b2c:	4642      	mov	r2, r8
 8004b2e:	464b      	mov	r3, r9
 8004b30:	1891      	adds	r1, r2, r2
 8004b32:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004b34:	415b      	adcs	r3, r3
 8004b36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b38:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004b3c:	4641      	mov	r1, r8
 8004b3e:	eb12 0a01 	adds.w	sl, r2, r1
 8004b42:	4649      	mov	r1, r9
 8004b44:	eb43 0b01 	adc.w	fp, r3, r1
 8004b48:	f04f 0200 	mov.w	r2, #0
 8004b4c:	f04f 0300 	mov.w	r3, #0
 8004b50:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b54:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004b58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b5c:	4692      	mov	sl, r2
 8004b5e:	469b      	mov	fp, r3
 8004b60:	4643      	mov	r3, r8
 8004b62:	eb1a 0303 	adds.w	r3, sl, r3
 8004b66:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004b6a:	464b      	mov	r3, r9
 8004b6c:	eb4b 0303 	adc.w	r3, fp, r3
 8004b70:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004b80:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004b84:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004b88:	460b      	mov	r3, r1
 8004b8a:	18db      	adds	r3, r3, r3
 8004b8c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b8e:	4613      	mov	r3, r2
 8004b90:	eb42 0303 	adc.w	r3, r2, r3
 8004b94:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b96:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004b9a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004b9e:	f7fb fb6f 	bl	8000280 <__aeabi_uldivmod>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	460b      	mov	r3, r1
 8004ba6:	4611      	mov	r1, r2
 8004ba8:	4b3b      	ldr	r3, [pc, #236]	@ (8004c98 <UART_SetConfig+0x2d4>)
 8004baa:	fba3 2301 	umull	r2, r3, r3, r1
 8004bae:	095b      	lsrs	r3, r3, #5
 8004bb0:	2264      	movs	r2, #100	@ 0x64
 8004bb2:	fb02 f303 	mul.w	r3, r2, r3
 8004bb6:	1acb      	subs	r3, r1, r3
 8004bb8:	00db      	lsls	r3, r3, #3
 8004bba:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004bbe:	4b36      	ldr	r3, [pc, #216]	@ (8004c98 <UART_SetConfig+0x2d4>)
 8004bc0:	fba3 2302 	umull	r2, r3, r3, r2
 8004bc4:	095b      	lsrs	r3, r3, #5
 8004bc6:	005b      	lsls	r3, r3, #1
 8004bc8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004bcc:	441c      	add	r4, r3
 8004bce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004bd8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004bdc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004be0:	4642      	mov	r2, r8
 8004be2:	464b      	mov	r3, r9
 8004be4:	1891      	adds	r1, r2, r2
 8004be6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004be8:	415b      	adcs	r3, r3
 8004bea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004bec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004bf0:	4641      	mov	r1, r8
 8004bf2:	1851      	adds	r1, r2, r1
 8004bf4:	6339      	str	r1, [r7, #48]	@ 0x30
 8004bf6:	4649      	mov	r1, r9
 8004bf8:	414b      	adcs	r3, r1
 8004bfa:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bfc:	f04f 0200 	mov.w	r2, #0
 8004c00:	f04f 0300 	mov.w	r3, #0
 8004c04:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004c08:	4659      	mov	r1, fp
 8004c0a:	00cb      	lsls	r3, r1, #3
 8004c0c:	4651      	mov	r1, sl
 8004c0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c12:	4651      	mov	r1, sl
 8004c14:	00ca      	lsls	r2, r1, #3
 8004c16:	4610      	mov	r0, r2
 8004c18:	4619      	mov	r1, r3
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	4642      	mov	r2, r8
 8004c1e:	189b      	adds	r3, r3, r2
 8004c20:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004c24:	464b      	mov	r3, r9
 8004c26:	460a      	mov	r2, r1
 8004c28:	eb42 0303 	adc.w	r3, r2, r3
 8004c2c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004c3c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004c40:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004c44:	460b      	mov	r3, r1
 8004c46:	18db      	adds	r3, r3, r3
 8004c48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c4a:	4613      	mov	r3, r2
 8004c4c:	eb42 0303 	adc.w	r3, r2, r3
 8004c50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004c56:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004c5a:	f7fb fb11 	bl	8000280 <__aeabi_uldivmod>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	460b      	mov	r3, r1
 8004c62:	4b0d      	ldr	r3, [pc, #52]	@ (8004c98 <UART_SetConfig+0x2d4>)
 8004c64:	fba3 1302 	umull	r1, r3, r3, r2
 8004c68:	095b      	lsrs	r3, r3, #5
 8004c6a:	2164      	movs	r1, #100	@ 0x64
 8004c6c:	fb01 f303 	mul.w	r3, r1, r3
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	00db      	lsls	r3, r3, #3
 8004c74:	3332      	adds	r3, #50	@ 0x32
 8004c76:	4a08      	ldr	r2, [pc, #32]	@ (8004c98 <UART_SetConfig+0x2d4>)
 8004c78:	fba2 2303 	umull	r2, r3, r2, r3
 8004c7c:	095b      	lsrs	r3, r3, #5
 8004c7e:	f003 0207 	and.w	r2, r3, #7
 8004c82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4422      	add	r2, r4
 8004c8a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004c8c:	e106      	b.n	8004e9c <UART_SetConfig+0x4d8>
 8004c8e:	bf00      	nop
 8004c90:	40011000 	.word	0x40011000
 8004c94:	40011400 	.word	0x40011400
 8004c98:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004ca6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004caa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004cae:	4642      	mov	r2, r8
 8004cb0:	464b      	mov	r3, r9
 8004cb2:	1891      	adds	r1, r2, r2
 8004cb4:	6239      	str	r1, [r7, #32]
 8004cb6:	415b      	adcs	r3, r3
 8004cb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004cbe:	4641      	mov	r1, r8
 8004cc0:	1854      	adds	r4, r2, r1
 8004cc2:	4649      	mov	r1, r9
 8004cc4:	eb43 0501 	adc.w	r5, r3, r1
 8004cc8:	f04f 0200 	mov.w	r2, #0
 8004ccc:	f04f 0300 	mov.w	r3, #0
 8004cd0:	00eb      	lsls	r3, r5, #3
 8004cd2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cd6:	00e2      	lsls	r2, r4, #3
 8004cd8:	4614      	mov	r4, r2
 8004cda:	461d      	mov	r5, r3
 8004cdc:	4643      	mov	r3, r8
 8004cde:	18e3      	adds	r3, r4, r3
 8004ce0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004ce4:	464b      	mov	r3, r9
 8004ce6:	eb45 0303 	adc.w	r3, r5, r3
 8004cea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004cee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004cfa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004cfe:	f04f 0200 	mov.w	r2, #0
 8004d02:	f04f 0300 	mov.w	r3, #0
 8004d06:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004d0a:	4629      	mov	r1, r5
 8004d0c:	008b      	lsls	r3, r1, #2
 8004d0e:	4621      	mov	r1, r4
 8004d10:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d14:	4621      	mov	r1, r4
 8004d16:	008a      	lsls	r2, r1, #2
 8004d18:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004d1c:	f7fb fab0 	bl	8000280 <__aeabi_uldivmod>
 8004d20:	4602      	mov	r2, r0
 8004d22:	460b      	mov	r3, r1
 8004d24:	4b60      	ldr	r3, [pc, #384]	@ (8004ea8 <UART_SetConfig+0x4e4>)
 8004d26:	fba3 2302 	umull	r2, r3, r3, r2
 8004d2a:	095b      	lsrs	r3, r3, #5
 8004d2c:	011c      	lsls	r4, r3, #4
 8004d2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d32:	2200      	movs	r2, #0
 8004d34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004d38:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004d3c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004d40:	4642      	mov	r2, r8
 8004d42:	464b      	mov	r3, r9
 8004d44:	1891      	adds	r1, r2, r2
 8004d46:	61b9      	str	r1, [r7, #24]
 8004d48:	415b      	adcs	r3, r3
 8004d4a:	61fb      	str	r3, [r7, #28]
 8004d4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d50:	4641      	mov	r1, r8
 8004d52:	1851      	adds	r1, r2, r1
 8004d54:	6139      	str	r1, [r7, #16]
 8004d56:	4649      	mov	r1, r9
 8004d58:	414b      	adcs	r3, r1
 8004d5a:	617b      	str	r3, [r7, #20]
 8004d5c:	f04f 0200 	mov.w	r2, #0
 8004d60:	f04f 0300 	mov.w	r3, #0
 8004d64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d68:	4659      	mov	r1, fp
 8004d6a:	00cb      	lsls	r3, r1, #3
 8004d6c:	4651      	mov	r1, sl
 8004d6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d72:	4651      	mov	r1, sl
 8004d74:	00ca      	lsls	r2, r1, #3
 8004d76:	4610      	mov	r0, r2
 8004d78:	4619      	mov	r1, r3
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	4642      	mov	r2, r8
 8004d7e:	189b      	adds	r3, r3, r2
 8004d80:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004d84:	464b      	mov	r3, r9
 8004d86:	460a      	mov	r2, r1
 8004d88:	eb42 0303 	adc.w	r3, r2, r3
 8004d8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004d9a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004d9c:	f04f 0200 	mov.w	r2, #0
 8004da0:	f04f 0300 	mov.w	r3, #0
 8004da4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004da8:	4649      	mov	r1, r9
 8004daa:	008b      	lsls	r3, r1, #2
 8004dac:	4641      	mov	r1, r8
 8004dae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004db2:	4641      	mov	r1, r8
 8004db4:	008a      	lsls	r2, r1, #2
 8004db6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004dba:	f7fb fa61 	bl	8000280 <__aeabi_uldivmod>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	460b      	mov	r3, r1
 8004dc2:	4611      	mov	r1, r2
 8004dc4:	4b38      	ldr	r3, [pc, #224]	@ (8004ea8 <UART_SetConfig+0x4e4>)
 8004dc6:	fba3 2301 	umull	r2, r3, r3, r1
 8004dca:	095b      	lsrs	r3, r3, #5
 8004dcc:	2264      	movs	r2, #100	@ 0x64
 8004dce:	fb02 f303 	mul.w	r3, r2, r3
 8004dd2:	1acb      	subs	r3, r1, r3
 8004dd4:	011b      	lsls	r3, r3, #4
 8004dd6:	3332      	adds	r3, #50	@ 0x32
 8004dd8:	4a33      	ldr	r2, [pc, #204]	@ (8004ea8 <UART_SetConfig+0x4e4>)
 8004dda:	fba2 2303 	umull	r2, r3, r2, r3
 8004dde:	095b      	lsrs	r3, r3, #5
 8004de0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004de4:	441c      	add	r4, r3
 8004de6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004dea:	2200      	movs	r2, #0
 8004dec:	673b      	str	r3, [r7, #112]	@ 0x70
 8004dee:	677a      	str	r2, [r7, #116]	@ 0x74
 8004df0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004df4:	4642      	mov	r2, r8
 8004df6:	464b      	mov	r3, r9
 8004df8:	1891      	adds	r1, r2, r2
 8004dfa:	60b9      	str	r1, [r7, #8]
 8004dfc:	415b      	adcs	r3, r3
 8004dfe:	60fb      	str	r3, [r7, #12]
 8004e00:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e04:	4641      	mov	r1, r8
 8004e06:	1851      	adds	r1, r2, r1
 8004e08:	6039      	str	r1, [r7, #0]
 8004e0a:	4649      	mov	r1, r9
 8004e0c:	414b      	adcs	r3, r1
 8004e0e:	607b      	str	r3, [r7, #4]
 8004e10:	f04f 0200 	mov.w	r2, #0
 8004e14:	f04f 0300 	mov.w	r3, #0
 8004e18:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004e1c:	4659      	mov	r1, fp
 8004e1e:	00cb      	lsls	r3, r1, #3
 8004e20:	4651      	mov	r1, sl
 8004e22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e26:	4651      	mov	r1, sl
 8004e28:	00ca      	lsls	r2, r1, #3
 8004e2a:	4610      	mov	r0, r2
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	4603      	mov	r3, r0
 8004e30:	4642      	mov	r2, r8
 8004e32:	189b      	adds	r3, r3, r2
 8004e34:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e36:	464b      	mov	r3, r9
 8004e38:	460a      	mov	r2, r1
 8004e3a:	eb42 0303 	adc.w	r3, r2, r3
 8004e3e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e4a:	667a      	str	r2, [r7, #100]	@ 0x64
 8004e4c:	f04f 0200 	mov.w	r2, #0
 8004e50:	f04f 0300 	mov.w	r3, #0
 8004e54:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004e58:	4649      	mov	r1, r9
 8004e5a:	008b      	lsls	r3, r1, #2
 8004e5c:	4641      	mov	r1, r8
 8004e5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e62:	4641      	mov	r1, r8
 8004e64:	008a      	lsls	r2, r1, #2
 8004e66:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004e6a:	f7fb fa09 	bl	8000280 <__aeabi_uldivmod>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	460b      	mov	r3, r1
 8004e72:	4b0d      	ldr	r3, [pc, #52]	@ (8004ea8 <UART_SetConfig+0x4e4>)
 8004e74:	fba3 1302 	umull	r1, r3, r3, r2
 8004e78:	095b      	lsrs	r3, r3, #5
 8004e7a:	2164      	movs	r1, #100	@ 0x64
 8004e7c:	fb01 f303 	mul.w	r3, r1, r3
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	011b      	lsls	r3, r3, #4
 8004e84:	3332      	adds	r3, #50	@ 0x32
 8004e86:	4a08      	ldr	r2, [pc, #32]	@ (8004ea8 <UART_SetConfig+0x4e4>)
 8004e88:	fba2 2303 	umull	r2, r3, r2, r3
 8004e8c:	095b      	lsrs	r3, r3, #5
 8004e8e:	f003 020f 	and.w	r2, r3, #15
 8004e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4422      	add	r2, r4
 8004e9a:	609a      	str	r2, [r3, #8]
}
 8004e9c:	bf00      	nop
 8004e9e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ea8:	51eb851f 	.word	0x51eb851f

08004eac <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004eac:	b580      	push	{r7, lr}
 8004eae:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004eb0:	4b05      	ldr	r3, [pc, #20]	@ (8004ec8 <SysTick_Handler+0x1c>)
 8004eb2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004eb4:	f002 f8f8 	bl	80070a8 <xTaskGetSchedulerState>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d001      	beq.n	8004ec2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004ebe:	f003 f9db 	bl	8008278 <xPortSysTickHandler>
  }
}
 8004ec2:	bf00      	nop
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	e000e010 	.word	0xe000e010

08004ecc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004ecc:	b480      	push	{r7}
 8004ece:	b085      	sub	sp, #20
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	4a07      	ldr	r2, [pc, #28]	@ (8004ef8 <vApplicationGetIdleTaskMemory+0x2c>)
 8004edc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	4a06      	ldr	r2, [pc, #24]	@ (8004efc <vApplicationGetIdleTaskMemory+0x30>)
 8004ee2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2280      	movs	r2, #128	@ 0x80
 8004ee8:	601a      	str	r2, [r3, #0]
}
 8004eea:	bf00      	nop
 8004eec:	3714      	adds	r7, #20
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr
 8004ef6:	bf00      	nop
 8004ef8:	200002a0 	.word	0x200002a0
 8004efc:	20000378 	.word	0x20000378

08004f00 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004f00:	b480      	push	{r7}
 8004f02:	b085      	sub	sp, #20
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	4a07      	ldr	r2, [pc, #28]	@ (8004f2c <vApplicationGetTimerTaskMemory+0x2c>)
 8004f10:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	4a06      	ldr	r2, [pc, #24]	@ (8004f30 <vApplicationGetTimerTaskMemory+0x30>)
 8004f16:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004f1e:	601a      	str	r2, [r3, #0]
}
 8004f20:	bf00      	nop
 8004f22:	3714      	adds	r7, #20
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr
 8004f2c:	20000578 	.word	0x20000578
 8004f30:	20000650 	.word	0x20000650

08004f34 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004f34:	b480      	push	{r7}
 8004f36:	b083      	sub	sp, #12
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f103 0208 	add.w	r2, r3, #8
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004f4c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f103 0208 	add.w	r2, r3, #8
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f103 0208 	add.w	r2, r3, #8
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004f68:	bf00      	nop
 8004f6a:	370c      	adds	r7, #12
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr

08004f74 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004f74:	b480      	push	{r7}
 8004f76:	b083      	sub	sp, #12
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004f82:	bf00      	nop
 8004f84:	370c      	adds	r7, #12
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr

08004f8e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f8e:	b480      	push	{r7}
 8004f90:	b085      	sub	sp, #20
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
 8004f96:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	68fa      	ldr	r2, [r7, #12]
 8004fa2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	689a      	ldr	r2, [r3, #8]
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	683a      	ldr	r2, [r7, #0]
 8004fb2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	683a      	ldr	r2, [r7, #0]
 8004fb8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	1c5a      	adds	r2, r3, #1
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	601a      	str	r2, [r3, #0]
}
 8004fca:	bf00      	nop
 8004fcc:	3714      	adds	r7, #20
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr

08004fd6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004fd6:	b480      	push	{r7}
 8004fd8:	b085      	sub	sp, #20
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
 8004fde:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004fec:	d103      	bne.n	8004ff6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	60fb      	str	r3, [r7, #12]
 8004ff4:	e00c      	b.n	8005010 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	3308      	adds	r3, #8
 8004ffa:	60fb      	str	r3, [r7, #12]
 8004ffc:	e002      	b.n	8005004 <vListInsert+0x2e>
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	60fb      	str	r3, [r7, #12]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	68ba      	ldr	r2, [r7, #8]
 800500c:	429a      	cmp	r2, r3
 800500e:	d2f6      	bcs.n	8004ffe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	685a      	ldr	r2, [r3, #4]
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	683a      	ldr	r2, [r7, #0]
 800501e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	68fa      	ldr	r2, [r7, #12]
 8005024:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	683a      	ldr	r2, [r7, #0]
 800502a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	1c5a      	adds	r2, r3, #1
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	601a      	str	r2, [r3, #0]
}
 800503c:	bf00      	nop
 800503e:	3714      	adds	r7, #20
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr

08005048 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005048:	b480      	push	{r7}
 800504a:	b085      	sub	sp, #20
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	691b      	ldr	r3, [r3, #16]
 8005054:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	6892      	ldr	r2, [r2, #8]
 800505e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	6852      	ldr	r2, [r2, #4]
 8005068:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	429a      	cmp	r2, r3
 8005072:	d103      	bne.n	800507c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	689a      	ldr	r2, [r3, #8]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	1e5a      	subs	r2, r3, #1
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
}
 8005090:	4618      	mov	r0, r3
 8005092:	3714      	adds	r7, #20
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d10b      	bne.n	80050c8 <xQueueGenericReset+0x2c>
	__asm volatile
 80050b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050b4:	f383 8811 	msr	BASEPRI, r3
 80050b8:	f3bf 8f6f 	isb	sy
 80050bc:	f3bf 8f4f 	dsb	sy
 80050c0:	60bb      	str	r3, [r7, #8]
}
 80050c2:	bf00      	nop
 80050c4:	bf00      	nop
 80050c6:	e7fd      	b.n	80050c4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80050c8:	f003 f846 	bl	8008158 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050d4:	68f9      	ldr	r1, [r7, #12]
 80050d6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80050d8:	fb01 f303 	mul.w	r3, r1, r3
 80050dc:	441a      	add	r2, r3
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2200      	movs	r2, #0
 80050e6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050f8:	3b01      	subs	r3, #1
 80050fa:	68f9      	ldr	r1, [r7, #12]
 80050fc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80050fe:	fb01 f303 	mul.w	r3, r1, r3
 8005102:	441a      	add	r2, r3
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	22ff      	movs	r2, #255	@ 0xff
 800510c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	22ff      	movs	r2, #255	@ 0xff
 8005114:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d114      	bne.n	8005148 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d01a      	beq.n	800515c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	3310      	adds	r3, #16
 800512a:	4618      	mov	r0, r3
 800512c:	f001 fccc 	bl	8006ac8 <xTaskRemoveFromEventList>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d012      	beq.n	800515c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005136:	4b0d      	ldr	r3, [pc, #52]	@ (800516c <xQueueGenericReset+0xd0>)
 8005138:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800513c:	601a      	str	r2, [r3, #0]
 800513e:	f3bf 8f4f 	dsb	sy
 8005142:	f3bf 8f6f 	isb	sy
 8005146:	e009      	b.n	800515c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	3310      	adds	r3, #16
 800514c:	4618      	mov	r0, r3
 800514e:	f7ff fef1 	bl	8004f34 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	3324      	adds	r3, #36	@ 0x24
 8005156:	4618      	mov	r0, r3
 8005158:	f7ff feec 	bl	8004f34 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800515c:	f003 f82e 	bl	80081bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005160:	2301      	movs	r3, #1
}
 8005162:	4618      	mov	r0, r3
 8005164:	3710      	adds	r7, #16
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
 800516a:	bf00      	nop
 800516c:	e000ed04 	.word	0xe000ed04

08005170 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005170:	b580      	push	{r7, lr}
 8005172:	b08e      	sub	sp, #56	@ 0x38
 8005174:	af02      	add	r7, sp, #8
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	60b9      	str	r1, [r7, #8]
 800517a:	607a      	str	r2, [r7, #4]
 800517c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d10b      	bne.n	800519c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005188:	f383 8811 	msr	BASEPRI, r3
 800518c:	f3bf 8f6f 	isb	sy
 8005190:	f3bf 8f4f 	dsb	sy
 8005194:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005196:	bf00      	nop
 8005198:	bf00      	nop
 800519a:	e7fd      	b.n	8005198 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d10b      	bne.n	80051ba <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80051a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051a6:	f383 8811 	msr	BASEPRI, r3
 80051aa:	f3bf 8f6f 	isb	sy
 80051ae:	f3bf 8f4f 	dsb	sy
 80051b2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80051b4:	bf00      	nop
 80051b6:	bf00      	nop
 80051b8:	e7fd      	b.n	80051b6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d002      	beq.n	80051c6 <xQueueGenericCreateStatic+0x56>
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d001      	beq.n	80051ca <xQueueGenericCreateStatic+0x5a>
 80051c6:	2301      	movs	r3, #1
 80051c8:	e000      	b.n	80051cc <xQueueGenericCreateStatic+0x5c>
 80051ca:	2300      	movs	r3, #0
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d10b      	bne.n	80051e8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80051d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051d4:	f383 8811 	msr	BASEPRI, r3
 80051d8:	f3bf 8f6f 	isb	sy
 80051dc:	f3bf 8f4f 	dsb	sy
 80051e0:	623b      	str	r3, [r7, #32]
}
 80051e2:	bf00      	nop
 80051e4:	bf00      	nop
 80051e6:	e7fd      	b.n	80051e4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d102      	bne.n	80051f4 <xQueueGenericCreateStatic+0x84>
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d101      	bne.n	80051f8 <xQueueGenericCreateStatic+0x88>
 80051f4:	2301      	movs	r3, #1
 80051f6:	e000      	b.n	80051fa <xQueueGenericCreateStatic+0x8a>
 80051f8:	2300      	movs	r3, #0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d10b      	bne.n	8005216 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80051fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005202:	f383 8811 	msr	BASEPRI, r3
 8005206:	f3bf 8f6f 	isb	sy
 800520a:	f3bf 8f4f 	dsb	sy
 800520e:	61fb      	str	r3, [r7, #28]
}
 8005210:	bf00      	nop
 8005212:	bf00      	nop
 8005214:	e7fd      	b.n	8005212 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005216:	2350      	movs	r3, #80	@ 0x50
 8005218:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	2b50      	cmp	r3, #80	@ 0x50
 800521e:	d00b      	beq.n	8005238 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005224:	f383 8811 	msr	BASEPRI, r3
 8005228:	f3bf 8f6f 	isb	sy
 800522c:	f3bf 8f4f 	dsb	sy
 8005230:	61bb      	str	r3, [r7, #24]
}
 8005232:	bf00      	nop
 8005234:	bf00      	nop
 8005236:	e7fd      	b.n	8005234 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005238:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800523e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005240:	2b00      	cmp	r3, #0
 8005242:	d00d      	beq.n	8005260 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005246:	2201      	movs	r2, #1
 8005248:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800524c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005252:	9300      	str	r3, [sp, #0]
 8005254:	4613      	mov	r3, r2
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	68b9      	ldr	r1, [r7, #8]
 800525a:	68f8      	ldr	r0, [r7, #12]
 800525c:	f000 f840 	bl	80052e0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005262:	4618      	mov	r0, r3
 8005264:	3730      	adds	r7, #48	@ 0x30
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}

0800526a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800526a:	b580      	push	{r7, lr}
 800526c:	b08a      	sub	sp, #40	@ 0x28
 800526e:	af02      	add	r7, sp, #8
 8005270:	60f8      	str	r0, [r7, #12]
 8005272:	60b9      	str	r1, [r7, #8]
 8005274:	4613      	mov	r3, r2
 8005276:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d10b      	bne.n	8005296 <xQueueGenericCreate+0x2c>
	__asm volatile
 800527e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005282:	f383 8811 	msr	BASEPRI, r3
 8005286:	f3bf 8f6f 	isb	sy
 800528a:	f3bf 8f4f 	dsb	sy
 800528e:	613b      	str	r3, [r7, #16]
}
 8005290:	bf00      	nop
 8005292:	bf00      	nop
 8005294:	e7fd      	b.n	8005292 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	68ba      	ldr	r2, [r7, #8]
 800529a:	fb02 f303 	mul.w	r3, r2, r3
 800529e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80052a0:	69fb      	ldr	r3, [r7, #28]
 80052a2:	3350      	adds	r3, #80	@ 0x50
 80052a4:	4618      	mov	r0, r3
 80052a6:	f003 f879 	bl	800839c <pvPortMalloc>
 80052aa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80052ac:	69bb      	ldr	r3, [r7, #24]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d011      	beq.n	80052d6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	3350      	adds	r3, #80	@ 0x50
 80052ba:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80052bc:	69bb      	ldr	r3, [r7, #24]
 80052be:	2200      	movs	r2, #0
 80052c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80052c4:	79fa      	ldrb	r2, [r7, #7]
 80052c6:	69bb      	ldr	r3, [r7, #24]
 80052c8:	9300      	str	r3, [sp, #0]
 80052ca:	4613      	mov	r3, r2
 80052cc:	697a      	ldr	r2, [r7, #20]
 80052ce:	68b9      	ldr	r1, [r7, #8]
 80052d0:	68f8      	ldr	r0, [r7, #12]
 80052d2:	f000 f805 	bl	80052e0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80052d6:	69bb      	ldr	r3, [r7, #24]
	}
 80052d8:	4618      	mov	r0, r3
 80052da:	3720      	adds	r7, #32
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	607a      	str	r2, [r7, #4]
 80052ec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d103      	bne.n	80052fc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	69ba      	ldr	r2, [r7, #24]
 80052f8:	601a      	str	r2, [r3, #0]
 80052fa:	e002      	b.n	8005302 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80052fc:	69bb      	ldr	r3, [r7, #24]
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	68fa      	ldr	r2, [r7, #12]
 8005306:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	68ba      	ldr	r2, [r7, #8]
 800530c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800530e:	2101      	movs	r1, #1
 8005310:	69b8      	ldr	r0, [r7, #24]
 8005312:	f7ff fec3 	bl	800509c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	78fa      	ldrb	r2, [r7, #3]
 800531a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800531e:	bf00      	nop
 8005320:	3710      	adds	r7, #16
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
	...

08005328 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b08e      	sub	sp, #56	@ 0x38
 800532c:	af00      	add	r7, sp, #0
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	60b9      	str	r1, [r7, #8]
 8005332:	607a      	str	r2, [r7, #4]
 8005334:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005336:	2300      	movs	r3, #0
 8005338:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800533e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005340:	2b00      	cmp	r3, #0
 8005342:	d10b      	bne.n	800535c <xQueueGenericSend+0x34>
	__asm volatile
 8005344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005348:	f383 8811 	msr	BASEPRI, r3
 800534c:	f3bf 8f6f 	isb	sy
 8005350:	f3bf 8f4f 	dsb	sy
 8005354:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005356:	bf00      	nop
 8005358:	bf00      	nop
 800535a:	e7fd      	b.n	8005358 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d103      	bne.n	800536a <xQueueGenericSend+0x42>
 8005362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005366:	2b00      	cmp	r3, #0
 8005368:	d101      	bne.n	800536e <xQueueGenericSend+0x46>
 800536a:	2301      	movs	r3, #1
 800536c:	e000      	b.n	8005370 <xQueueGenericSend+0x48>
 800536e:	2300      	movs	r3, #0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d10b      	bne.n	800538c <xQueueGenericSend+0x64>
	__asm volatile
 8005374:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005378:	f383 8811 	msr	BASEPRI, r3
 800537c:	f3bf 8f6f 	isb	sy
 8005380:	f3bf 8f4f 	dsb	sy
 8005384:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005386:	bf00      	nop
 8005388:	bf00      	nop
 800538a:	e7fd      	b.n	8005388 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	2b02      	cmp	r3, #2
 8005390:	d103      	bne.n	800539a <xQueueGenericSend+0x72>
 8005392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005394:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005396:	2b01      	cmp	r3, #1
 8005398:	d101      	bne.n	800539e <xQueueGenericSend+0x76>
 800539a:	2301      	movs	r3, #1
 800539c:	e000      	b.n	80053a0 <xQueueGenericSend+0x78>
 800539e:	2300      	movs	r3, #0
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d10b      	bne.n	80053bc <xQueueGenericSend+0x94>
	__asm volatile
 80053a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053a8:	f383 8811 	msr	BASEPRI, r3
 80053ac:	f3bf 8f6f 	isb	sy
 80053b0:	f3bf 8f4f 	dsb	sy
 80053b4:	623b      	str	r3, [r7, #32]
}
 80053b6:	bf00      	nop
 80053b8:	bf00      	nop
 80053ba:	e7fd      	b.n	80053b8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80053bc:	f001 fe74 	bl	80070a8 <xTaskGetSchedulerState>
 80053c0:	4603      	mov	r3, r0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d102      	bne.n	80053cc <xQueueGenericSend+0xa4>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d101      	bne.n	80053d0 <xQueueGenericSend+0xa8>
 80053cc:	2301      	movs	r3, #1
 80053ce:	e000      	b.n	80053d2 <xQueueGenericSend+0xaa>
 80053d0:	2300      	movs	r3, #0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d10b      	bne.n	80053ee <xQueueGenericSend+0xc6>
	__asm volatile
 80053d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053da:	f383 8811 	msr	BASEPRI, r3
 80053de:	f3bf 8f6f 	isb	sy
 80053e2:	f3bf 8f4f 	dsb	sy
 80053e6:	61fb      	str	r3, [r7, #28]
}
 80053e8:	bf00      	nop
 80053ea:	bf00      	nop
 80053ec:	e7fd      	b.n	80053ea <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80053ee:	f002 feb3 	bl	8008158 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80053f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80053f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d302      	bcc.n	8005404 <xQueueGenericSend+0xdc>
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	2b02      	cmp	r3, #2
 8005402:	d129      	bne.n	8005458 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005404:	683a      	ldr	r2, [r7, #0]
 8005406:	68b9      	ldr	r1, [r7, #8]
 8005408:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800540a:	f000 fbc7 	bl	8005b9c <prvCopyDataToQueue>
 800540e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005414:	2b00      	cmp	r3, #0
 8005416:	d010      	beq.n	800543a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800541a:	3324      	adds	r3, #36	@ 0x24
 800541c:	4618      	mov	r0, r3
 800541e:	f001 fb53 	bl	8006ac8 <xTaskRemoveFromEventList>
 8005422:	4603      	mov	r3, r0
 8005424:	2b00      	cmp	r3, #0
 8005426:	d013      	beq.n	8005450 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005428:	4b3f      	ldr	r3, [pc, #252]	@ (8005528 <xQueueGenericSend+0x200>)
 800542a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800542e:	601a      	str	r2, [r3, #0]
 8005430:	f3bf 8f4f 	dsb	sy
 8005434:	f3bf 8f6f 	isb	sy
 8005438:	e00a      	b.n	8005450 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800543a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800543c:	2b00      	cmp	r3, #0
 800543e:	d007      	beq.n	8005450 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005440:	4b39      	ldr	r3, [pc, #228]	@ (8005528 <xQueueGenericSend+0x200>)
 8005442:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005446:	601a      	str	r2, [r3, #0]
 8005448:	f3bf 8f4f 	dsb	sy
 800544c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005450:	f002 feb4 	bl	80081bc <vPortExitCritical>
				return pdPASS;
 8005454:	2301      	movs	r3, #1
 8005456:	e063      	b.n	8005520 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d103      	bne.n	8005466 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800545e:	f002 fead 	bl	80081bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005462:	2300      	movs	r3, #0
 8005464:	e05c      	b.n	8005520 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005466:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005468:	2b00      	cmp	r3, #0
 800546a:	d106      	bne.n	800547a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800546c:	f107 0314 	add.w	r3, r7, #20
 8005470:	4618      	mov	r0, r3
 8005472:	f001 fb8d 	bl	8006b90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005476:	2301      	movs	r3, #1
 8005478:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800547a:	f002 fe9f 	bl	80081bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800547e:	f001 f849 	bl	8006514 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005482:	f002 fe69 	bl	8008158 <vPortEnterCritical>
 8005486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005488:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800548c:	b25b      	sxtb	r3, r3
 800548e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005492:	d103      	bne.n	800549c <xQueueGenericSend+0x174>
 8005494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005496:	2200      	movs	r2, #0
 8005498:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800549c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800549e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80054a2:	b25b      	sxtb	r3, r3
 80054a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80054a8:	d103      	bne.n	80054b2 <xQueueGenericSend+0x18a>
 80054aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ac:	2200      	movs	r2, #0
 80054ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80054b2:	f002 fe83 	bl	80081bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80054b6:	1d3a      	adds	r2, r7, #4
 80054b8:	f107 0314 	add.w	r3, r7, #20
 80054bc:	4611      	mov	r1, r2
 80054be:	4618      	mov	r0, r3
 80054c0:	f001 fb7c 	bl	8006bbc <xTaskCheckForTimeOut>
 80054c4:	4603      	mov	r3, r0
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d124      	bne.n	8005514 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80054ca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80054cc:	f000 fc5e 	bl	8005d8c <prvIsQueueFull>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d018      	beq.n	8005508 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80054d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054d8:	3310      	adds	r3, #16
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	4611      	mov	r1, r2
 80054de:	4618      	mov	r0, r3
 80054e0:	f001 faa0 	bl	8006a24 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80054e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80054e6:	f000 fbe9 	bl	8005cbc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80054ea:	f001 f821 	bl	8006530 <xTaskResumeAll>
 80054ee:	4603      	mov	r3, r0
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	f47f af7c 	bne.w	80053ee <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80054f6:	4b0c      	ldr	r3, [pc, #48]	@ (8005528 <xQueueGenericSend+0x200>)
 80054f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054fc:	601a      	str	r2, [r3, #0]
 80054fe:	f3bf 8f4f 	dsb	sy
 8005502:	f3bf 8f6f 	isb	sy
 8005506:	e772      	b.n	80053ee <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005508:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800550a:	f000 fbd7 	bl	8005cbc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800550e:	f001 f80f 	bl	8006530 <xTaskResumeAll>
 8005512:	e76c      	b.n	80053ee <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005514:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005516:	f000 fbd1 	bl	8005cbc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800551a:	f001 f809 	bl	8006530 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800551e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005520:	4618      	mov	r0, r3
 8005522:	3738      	adds	r7, #56	@ 0x38
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}
 8005528:	e000ed04 	.word	0xe000ed04

0800552c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b090      	sub	sp, #64	@ 0x40
 8005530:	af00      	add	r7, sp, #0
 8005532:	60f8      	str	r0, [r7, #12]
 8005534:	60b9      	str	r1, [r7, #8]
 8005536:	607a      	str	r2, [r7, #4]
 8005538:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800553e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005540:	2b00      	cmp	r3, #0
 8005542:	d10b      	bne.n	800555c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005548:	f383 8811 	msr	BASEPRI, r3
 800554c:	f3bf 8f6f 	isb	sy
 8005550:	f3bf 8f4f 	dsb	sy
 8005554:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005556:	bf00      	nop
 8005558:	bf00      	nop
 800555a:	e7fd      	b.n	8005558 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d103      	bne.n	800556a <xQueueGenericSendFromISR+0x3e>
 8005562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005566:	2b00      	cmp	r3, #0
 8005568:	d101      	bne.n	800556e <xQueueGenericSendFromISR+0x42>
 800556a:	2301      	movs	r3, #1
 800556c:	e000      	b.n	8005570 <xQueueGenericSendFromISR+0x44>
 800556e:	2300      	movs	r3, #0
 8005570:	2b00      	cmp	r3, #0
 8005572:	d10b      	bne.n	800558c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005574:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005578:	f383 8811 	msr	BASEPRI, r3
 800557c:	f3bf 8f6f 	isb	sy
 8005580:	f3bf 8f4f 	dsb	sy
 8005584:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005586:	bf00      	nop
 8005588:	bf00      	nop
 800558a:	e7fd      	b.n	8005588 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	2b02      	cmp	r3, #2
 8005590:	d103      	bne.n	800559a <xQueueGenericSendFromISR+0x6e>
 8005592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005594:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005596:	2b01      	cmp	r3, #1
 8005598:	d101      	bne.n	800559e <xQueueGenericSendFromISR+0x72>
 800559a:	2301      	movs	r3, #1
 800559c:	e000      	b.n	80055a0 <xQueueGenericSendFromISR+0x74>
 800559e:	2300      	movs	r3, #0
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d10b      	bne.n	80055bc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80055a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055a8:	f383 8811 	msr	BASEPRI, r3
 80055ac:	f3bf 8f6f 	isb	sy
 80055b0:	f3bf 8f4f 	dsb	sy
 80055b4:	623b      	str	r3, [r7, #32]
}
 80055b6:	bf00      	nop
 80055b8:	bf00      	nop
 80055ba:	e7fd      	b.n	80055b8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80055bc:	f002 feac 	bl	8008318 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80055c0:	f3ef 8211 	mrs	r2, BASEPRI
 80055c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055c8:	f383 8811 	msr	BASEPRI, r3
 80055cc:	f3bf 8f6f 	isb	sy
 80055d0:	f3bf 8f4f 	dsb	sy
 80055d4:	61fa      	str	r2, [r7, #28]
 80055d6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80055d8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80055da:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80055dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80055e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d302      	bcc.n	80055ee <xQueueGenericSendFromISR+0xc2>
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	d12f      	bne.n	800564e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80055ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055f0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80055f4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80055f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80055fe:	683a      	ldr	r2, [r7, #0]
 8005600:	68b9      	ldr	r1, [r7, #8]
 8005602:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005604:	f000 faca 	bl	8005b9c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005608:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800560c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005610:	d112      	bne.n	8005638 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005616:	2b00      	cmp	r3, #0
 8005618:	d016      	beq.n	8005648 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800561a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800561c:	3324      	adds	r3, #36	@ 0x24
 800561e:	4618      	mov	r0, r3
 8005620:	f001 fa52 	bl	8006ac8 <xTaskRemoveFromEventList>
 8005624:	4603      	mov	r3, r0
 8005626:	2b00      	cmp	r3, #0
 8005628:	d00e      	beq.n	8005648 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d00b      	beq.n	8005648 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	601a      	str	r2, [r3, #0]
 8005636:	e007      	b.n	8005648 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005638:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800563c:	3301      	adds	r3, #1
 800563e:	b2db      	uxtb	r3, r3
 8005640:	b25a      	sxtb	r2, r3
 8005642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005644:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005648:	2301      	movs	r3, #1
 800564a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800564c:	e001      	b.n	8005652 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800564e:	2300      	movs	r3, #0
 8005650:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005652:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005654:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800565c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800565e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005660:	4618      	mov	r0, r3
 8005662:	3740      	adds	r7, #64	@ 0x40
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}

08005668 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b08e      	sub	sp, #56	@ 0x38
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005678:	2b00      	cmp	r3, #0
 800567a:	d10b      	bne.n	8005694 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800567c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005680:	f383 8811 	msr	BASEPRI, r3
 8005684:	f3bf 8f6f 	isb	sy
 8005688:	f3bf 8f4f 	dsb	sy
 800568c:	623b      	str	r3, [r7, #32]
}
 800568e:	bf00      	nop
 8005690:	bf00      	nop
 8005692:	e7fd      	b.n	8005690 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005698:	2b00      	cmp	r3, #0
 800569a:	d00b      	beq.n	80056b4 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800569c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056a0:	f383 8811 	msr	BASEPRI, r3
 80056a4:	f3bf 8f6f 	isb	sy
 80056a8:	f3bf 8f4f 	dsb	sy
 80056ac:	61fb      	str	r3, [r7, #28]
}
 80056ae:	bf00      	nop
 80056b0:	bf00      	nop
 80056b2:	e7fd      	b.n	80056b0 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80056b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d103      	bne.n	80056c4 <xQueueGiveFromISR+0x5c>
 80056bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d101      	bne.n	80056c8 <xQueueGiveFromISR+0x60>
 80056c4:	2301      	movs	r3, #1
 80056c6:	e000      	b.n	80056ca <xQueueGiveFromISR+0x62>
 80056c8:	2300      	movs	r3, #0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d10b      	bne.n	80056e6 <xQueueGiveFromISR+0x7e>
	__asm volatile
 80056ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056d2:	f383 8811 	msr	BASEPRI, r3
 80056d6:	f3bf 8f6f 	isb	sy
 80056da:	f3bf 8f4f 	dsb	sy
 80056de:	61bb      	str	r3, [r7, #24]
}
 80056e0:	bf00      	nop
 80056e2:	bf00      	nop
 80056e4:	e7fd      	b.n	80056e2 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80056e6:	f002 fe17 	bl	8008318 <vPortValidateInterruptPriority>
	__asm volatile
 80056ea:	f3ef 8211 	mrs	r2, BASEPRI
 80056ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056f2:	f383 8811 	msr	BASEPRI, r3
 80056f6:	f3bf 8f6f 	isb	sy
 80056fa:	f3bf 8f4f 	dsb	sy
 80056fe:	617a      	str	r2, [r7, #20]
 8005700:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005702:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005704:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005708:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800570a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800570c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800570e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005710:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005712:	429a      	cmp	r2, r3
 8005714:	d22b      	bcs.n	800576e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005718:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800571c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005722:	1c5a      	adds	r2, r3, #1
 8005724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005726:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005728:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800572c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005730:	d112      	bne.n	8005758 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005736:	2b00      	cmp	r3, #0
 8005738:	d016      	beq.n	8005768 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800573a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800573c:	3324      	adds	r3, #36	@ 0x24
 800573e:	4618      	mov	r0, r3
 8005740:	f001 f9c2 	bl	8006ac8 <xTaskRemoveFromEventList>
 8005744:	4603      	mov	r3, r0
 8005746:	2b00      	cmp	r3, #0
 8005748:	d00e      	beq.n	8005768 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d00b      	beq.n	8005768 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	2201      	movs	r2, #1
 8005754:	601a      	str	r2, [r3, #0]
 8005756:	e007      	b.n	8005768 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005758:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800575c:	3301      	adds	r3, #1
 800575e:	b2db      	uxtb	r3, r3
 8005760:	b25a      	sxtb	r2, r3
 8005762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005764:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005768:	2301      	movs	r3, #1
 800576a:	637b      	str	r3, [r7, #52]	@ 0x34
 800576c:	e001      	b.n	8005772 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800576e:	2300      	movs	r3, #0
 8005770:	637b      	str	r3, [r7, #52]	@ 0x34
 8005772:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005774:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	f383 8811 	msr	BASEPRI, r3
}
 800577c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800577e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005780:	4618      	mov	r0, r3
 8005782:	3738      	adds	r7, #56	@ 0x38
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}

08005788 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b08c      	sub	sp, #48	@ 0x30
 800578c:	af00      	add	r7, sp, #0
 800578e:	60f8      	str	r0, [r7, #12]
 8005790:	60b9      	str	r1, [r7, #8]
 8005792:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005794:	2300      	movs	r3, #0
 8005796:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800579c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d10b      	bne.n	80057ba <xQueueReceive+0x32>
	__asm volatile
 80057a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057a6:	f383 8811 	msr	BASEPRI, r3
 80057aa:	f3bf 8f6f 	isb	sy
 80057ae:	f3bf 8f4f 	dsb	sy
 80057b2:	623b      	str	r3, [r7, #32]
}
 80057b4:	bf00      	nop
 80057b6:	bf00      	nop
 80057b8:	e7fd      	b.n	80057b6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d103      	bne.n	80057c8 <xQueueReceive+0x40>
 80057c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d101      	bne.n	80057cc <xQueueReceive+0x44>
 80057c8:	2301      	movs	r3, #1
 80057ca:	e000      	b.n	80057ce <xQueueReceive+0x46>
 80057cc:	2300      	movs	r3, #0
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d10b      	bne.n	80057ea <xQueueReceive+0x62>
	__asm volatile
 80057d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057d6:	f383 8811 	msr	BASEPRI, r3
 80057da:	f3bf 8f6f 	isb	sy
 80057de:	f3bf 8f4f 	dsb	sy
 80057e2:	61fb      	str	r3, [r7, #28]
}
 80057e4:	bf00      	nop
 80057e6:	bf00      	nop
 80057e8:	e7fd      	b.n	80057e6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80057ea:	f001 fc5d 	bl	80070a8 <xTaskGetSchedulerState>
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d102      	bne.n	80057fa <xQueueReceive+0x72>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d101      	bne.n	80057fe <xQueueReceive+0x76>
 80057fa:	2301      	movs	r3, #1
 80057fc:	e000      	b.n	8005800 <xQueueReceive+0x78>
 80057fe:	2300      	movs	r3, #0
 8005800:	2b00      	cmp	r3, #0
 8005802:	d10b      	bne.n	800581c <xQueueReceive+0x94>
	__asm volatile
 8005804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005808:	f383 8811 	msr	BASEPRI, r3
 800580c:	f3bf 8f6f 	isb	sy
 8005810:	f3bf 8f4f 	dsb	sy
 8005814:	61bb      	str	r3, [r7, #24]
}
 8005816:	bf00      	nop
 8005818:	bf00      	nop
 800581a:	e7fd      	b.n	8005818 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800581c:	f002 fc9c 	bl	8008158 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005822:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005824:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005828:	2b00      	cmp	r3, #0
 800582a:	d01f      	beq.n	800586c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800582c:	68b9      	ldr	r1, [r7, #8]
 800582e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005830:	f000 fa1e 	bl	8005c70 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005836:	1e5a      	subs	r2, r3, #1
 8005838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800583a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800583c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800583e:	691b      	ldr	r3, [r3, #16]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d00f      	beq.n	8005864 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005846:	3310      	adds	r3, #16
 8005848:	4618      	mov	r0, r3
 800584a:	f001 f93d 	bl	8006ac8 <xTaskRemoveFromEventList>
 800584e:	4603      	mov	r3, r0
 8005850:	2b00      	cmp	r3, #0
 8005852:	d007      	beq.n	8005864 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005854:	4b3c      	ldr	r3, [pc, #240]	@ (8005948 <xQueueReceive+0x1c0>)
 8005856:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800585a:	601a      	str	r2, [r3, #0]
 800585c:	f3bf 8f4f 	dsb	sy
 8005860:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005864:	f002 fcaa 	bl	80081bc <vPortExitCritical>
				return pdPASS;
 8005868:	2301      	movs	r3, #1
 800586a:	e069      	b.n	8005940 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d103      	bne.n	800587a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005872:	f002 fca3 	bl	80081bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005876:	2300      	movs	r3, #0
 8005878:	e062      	b.n	8005940 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800587a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800587c:	2b00      	cmp	r3, #0
 800587e:	d106      	bne.n	800588e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005880:	f107 0310 	add.w	r3, r7, #16
 8005884:	4618      	mov	r0, r3
 8005886:	f001 f983 	bl	8006b90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800588a:	2301      	movs	r3, #1
 800588c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800588e:	f002 fc95 	bl	80081bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005892:	f000 fe3f 	bl	8006514 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005896:	f002 fc5f 	bl	8008158 <vPortEnterCritical>
 800589a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800589c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80058a0:	b25b      	sxtb	r3, r3
 80058a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80058a6:	d103      	bne.n	80058b0 <xQueueReceive+0x128>
 80058a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058aa:	2200      	movs	r2, #0
 80058ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80058b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80058b6:	b25b      	sxtb	r3, r3
 80058b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80058bc:	d103      	bne.n	80058c6 <xQueueReceive+0x13e>
 80058be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058c0:	2200      	movs	r2, #0
 80058c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80058c6:	f002 fc79 	bl	80081bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80058ca:	1d3a      	adds	r2, r7, #4
 80058cc:	f107 0310 	add.w	r3, r7, #16
 80058d0:	4611      	mov	r1, r2
 80058d2:	4618      	mov	r0, r3
 80058d4:	f001 f972 	bl	8006bbc <xTaskCheckForTimeOut>
 80058d8:	4603      	mov	r3, r0
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d123      	bne.n	8005926 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80058de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80058e0:	f000 fa3e 	bl	8005d60 <prvIsQueueEmpty>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d017      	beq.n	800591a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80058ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058ec:	3324      	adds	r3, #36	@ 0x24
 80058ee:	687a      	ldr	r2, [r7, #4]
 80058f0:	4611      	mov	r1, r2
 80058f2:	4618      	mov	r0, r3
 80058f4:	f001 f896 	bl	8006a24 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80058f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80058fa:	f000 f9df 	bl	8005cbc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80058fe:	f000 fe17 	bl	8006530 <xTaskResumeAll>
 8005902:	4603      	mov	r3, r0
 8005904:	2b00      	cmp	r3, #0
 8005906:	d189      	bne.n	800581c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005908:	4b0f      	ldr	r3, [pc, #60]	@ (8005948 <xQueueReceive+0x1c0>)
 800590a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800590e:	601a      	str	r2, [r3, #0]
 8005910:	f3bf 8f4f 	dsb	sy
 8005914:	f3bf 8f6f 	isb	sy
 8005918:	e780      	b.n	800581c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800591a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800591c:	f000 f9ce 	bl	8005cbc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005920:	f000 fe06 	bl	8006530 <xTaskResumeAll>
 8005924:	e77a      	b.n	800581c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005926:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005928:	f000 f9c8 	bl	8005cbc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800592c:	f000 fe00 	bl	8006530 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005930:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005932:	f000 fa15 	bl	8005d60 <prvIsQueueEmpty>
 8005936:	4603      	mov	r3, r0
 8005938:	2b00      	cmp	r3, #0
 800593a:	f43f af6f 	beq.w	800581c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800593e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005940:	4618      	mov	r0, r3
 8005942:	3730      	adds	r7, #48	@ 0x30
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}
 8005948:	e000ed04 	.word	0xe000ed04

0800594c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b08e      	sub	sp, #56	@ 0x38
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005956:	2300      	movs	r3, #0
 8005958:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800595e:	2300      	movs	r3, #0
 8005960:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005964:	2b00      	cmp	r3, #0
 8005966:	d10b      	bne.n	8005980 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8005968:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800596c:	f383 8811 	msr	BASEPRI, r3
 8005970:	f3bf 8f6f 	isb	sy
 8005974:	f3bf 8f4f 	dsb	sy
 8005978:	623b      	str	r3, [r7, #32]
}
 800597a:	bf00      	nop
 800597c:	bf00      	nop
 800597e:	e7fd      	b.n	800597c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005984:	2b00      	cmp	r3, #0
 8005986:	d00b      	beq.n	80059a0 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8005988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800598c:	f383 8811 	msr	BASEPRI, r3
 8005990:	f3bf 8f6f 	isb	sy
 8005994:	f3bf 8f4f 	dsb	sy
 8005998:	61fb      	str	r3, [r7, #28]
}
 800599a:	bf00      	nop
 800599c:	bf00      	nop
 800599e:	e7fd      	b.n	800599c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80059a0:	f001 fb82 	bl	80070a8 <xTaskGetSchedulerState>
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d102      	bne.n	80059b0 <xQueueSemaphoreTake+0x64>
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d101      	bne.n	80059b4 <xQueueSemaphoreTake+0x68>
 80059b0:	2301      	movs	r3, #1
 80059b2:	e000      	b.n	80059b6 <xQueueSemaphoreTake+0x6a>
 80059b4:	2300      	movs	r3, #0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d10b      	bne.n	80059d2 <xQueueSemaphoreTake+0x86>
	__asm volatile
 80059ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059be:	f383 8811 	msr	BASEPRI, r3
 80059c2:	f3bf 8f6f 	isb	sy
 80059c6:	f3bf 8f4f 	dsb	sy
 80059ca:	61bb      	str	r3, [r7, #24]
}
 80059cc:	bf00      	nop
 80059ce:	bf00      	nop
 80059d0:	e7fd      	b.n	80059ce <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80059d2:	f002 fbc1 	bl	8008158 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80059d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059da:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80059dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d024      	beq.n	8005a2c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80059e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059e4:	1e5a      	subs	r2, r3, #1
 80059e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059e8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80059ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d104      	bne.n	80059fc <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80059f2:	f001 fcd3 	bl	800739c <pvTaskIncrementMutexHeldCount>
 80059f6:	4602      	mov	r2, r0
 80059f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059fa:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80059fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059fe:	691b      	ldr	r3, [r3, #16]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d00f      	beq.n	8005a24 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a06:	3310      	adds	r3, #16
 8005a08:	4618      	mov	r0, r3
 8005a0a:	f001 f85d 	bl	8006ac8 <xTaskRemoveFromEventList>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d007      	beq.n	8005a24 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005a14:	4b54      	ldr	r3, [pc, #336]	@ (8005b68 <xQueueSemaphoreTake+0x21c>)
 8005a16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a1a:	601a      	str	r2, [r3, #0]
 8005a1c:	f3bf 8f4f 	dsb	sy
 8005a20:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005a24:	f002 fbca 	bl	80081bc <vPortExitCritical>
				return pdPASS;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	e098      	b.n	8005b5e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d112      	bne.n	8005a58 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d00b      	beq.n	8005a50 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8005a38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a3c:	f383 8811 	msr	BASEPRI, r3
 8005a40:	f3bf 8f6f 	isb	sy
 8005a44:	f3bf 8f4f 	dsb	sy
 8005a48:	617b      	str	r3, [r7, #20]
}
 8005a4a:	bf00      	nop
 8005a4c:	bf00      	nop
 8005a4e:	e7fd      	b.n	8005a4c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005a50:	f002 fbb4 	bl	80081bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005a54:	2300      	movs	r3, #0
 8005a56:	e082      	b.n	8005b5e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d106      	bne.n	8005a6c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a5e:	f107 030c 	add.w	r3, r7, #12
 8005a62:	4618      	mov	r0, r3
 8005a64:	f001 f894 	bl	8006b90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a6c:	f002 fba6 	bl	80081bc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a70:	f000 fd50 	bl	8006514 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a74:	f002 fb70 	bl	8008158 <vPortEnterCritical>
 8005a78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a7a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005a7e:	b25b      	sxtb	r3, r3
 8005a80:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a84:	d103      	bne.n	8005a8e <xQueueSemaphoreTake+0x142>
 8005a86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a90:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005a94:	b25b      	sxtb	r3, r3
 8005a96:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a9a:	d103      	bne.n	8005aa4 <xQueueSemaphoreTake+0x158>
 8005a9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005aa4:	f002 fb8a 	bl	80081bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005aa8:	463a      	mov	r2, r7
 8005aaa:	f107 030c 	add.w	r3, r7, #12
 8005aae:	4611      	mov	r1, r2
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f001 f883 	bl	8006bbc <xTaskCheckForTimeOut>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d132      	bne.n	8005b22 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005abc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005abe:	f000 f94f 	bl	8005d60 <prvIsQueueEmpty>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d026      	beq.n	8005b16 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d109      	bne.n	8005ae4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8005ad0:	f002 fb42 	bl	8008158 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005ad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f001 fb03 	bl	80070e4 <xTaskPriorityInherit>
 8005ade:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8005ae0:	f002 fb6c 	bl	80081bc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005ae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ae6:	3324      	adds	r3, #36	@ 0x24
 8005ae8:	683a      	ldr	r2, [r7, #0]
 8005aea:	4611      	mov	r1, r2
 8005aec:	4618      	mov	r0, r3
 8005aee:	f000 ff99 	bl	8006a24 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005af2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005af4:	f000 f8e2 	bl	8005cbc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005af8:	f000 fd1a 	bl	8006530 <xTaskResumeAll>
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	f47f af67 	bne.w	80059d2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8005b04:	4b18      	ldr	r3, [pc, #96]	@ (8005b68 <xQueueSemaphoreTake+0x21c>)
 8005b06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b0a:	601a      	str	r2, [r3, #0]
 8005b0c:	f3bf 8f4f 	dsb	sy
 8005b10:	f3bf 8f6f 	isb	sy
 8005b14:	e75d      	b.n	80059d2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005b16:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005b18:	f000 f8d0 	bl	8005cbc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b1c:	f000 fd08 	bl	8006530 <xTaskResumeAll>
 8005b20:	e757      	b.n	80059d2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005b22:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005b24:	f000 f8ca 	bl	8005cbc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b28:	f000 fd02 	bl	8006530 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b2c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005b2e:	f000 f917 	bl	8005d60 <prvIsQueueEmpty>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	f43f af4c 	beq.w	80059d2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d00d      	beq.n	8005b5c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8005b40:	f002 fb0a 	bl	8008158 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005b44:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005b46:	f000 f811 	bl	8005b6c <prvGetDisinheritPriorityAfterTimeout>
 8005b4a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005b4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005b52:	4618      	mov	r0, r3
 8005b54:	f001 fb9e 	bl	8007294 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005b58:	f002 fb30 	bl	80081bc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005b5c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3738      	adds	r7, #56	@ 0x38
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop
 8005b68:	e000ed04 	.word	0xe000ed04

08005b6c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b085      	sub	sp, #20
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d006      	beq.n	8005b8a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8005b86:	60fb      	str	r3, [r7, #12]
 8005b88:	e001      	b.n	8005b8e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
	}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3714      	adds	r7, #20
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr

08005b9c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b086      	sub	sp, #24
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	60b9      	str	r1, [r7, #8]
 8005ba6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bb0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d10d      	bne.n	8005bd6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d14d      	bne.n	8005c5e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f001 faf4 	bl	80071b4 <xTaskPriorityDisinherit>
 8005bcc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	609a      	str	r2, [r3, #8]
 8005bd4:	e043      	b.n	8005c5e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d119      	bne.n	8005c10 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6858      	ldr	r0, [r3, #4]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005be4:	461a      	mov	r2, r3
 8005be6:	68b9      	ldr	r1, [r7, #8]
 8005be8:	f003 f80e 	bl	8008c08 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	685a      	ldr	r2, [r3, #4]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bf4:	441a      	add	r2, r3
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	685a      	ldr	r2, [r3, #4]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d32b      	bcc.n	8005c5e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	605a      	str	r2, [r3, #4]
 8005c0e:	e026      	b.n	8005c5e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	68d8      	ldr	r0, [r3, #12]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c18:	461a      	mov	r2, r3
 8005c1a:	68b9      	ldr	r1, [r7, #8]
 8005c1c:	f002 fff4 	bl	8008c08 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	68da      	ldr	r2, [r3, #12]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c28:	425b      	negs	r3, r3
 8005c2a:	441a      	add	r2, r3
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	68da      	ldr	r2, [r3, #12]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d207      	bcs.n	8005c4c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	689a      	ldr	r2, [r3, #8]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c44:	425b      	negs	r3, r3
 8005c46:	441a      	add	r2, r3
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2b02      	cmp	r3, #2
 8005c50:	d105      	bne.n	8005c5e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d002      	beq.n	8005c5e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	3b01      	subs	r3, #1
 8005c5c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	1c5a      	adds	r2, r3, #1
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005c66:	697b      	ldr	r3, [r7, #20]
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3718      	adds	r7, #24
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}

08005c70 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b082      	sub	sp, #8
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d018      	beq.n	8005cb4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	68da      	ldr	r2, [r3, #12]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c8a:	441a      	add	r2, r3
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	68da      	ldr	r2, [r3, #12]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d303      	bcc.n	8005ca4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	68d9      	ldr	r1, [r3, #12]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cac:	461a      	mov	r2, r3
 8005cae:	6838      	ldr	r0, [r7, #0]
 8005cb0:	f002 ffaa 	bl	8008c08 <memcpy>
	}
}
 8005cb4:	bf00      	nop
 8005cb6:	3708      	adds	r7, #8
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}

08005cbc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b084      	sub	sp, #16
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005cc4:	f002 fa48 	bl	8008158 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005cce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005cd0:	e011      	b.n	8005cf6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d012      	beq.n	8005d00 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	3324      	adds	r3, #36	@ 0x24
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f000 fef2 	bl	8006ac8 <xTaskRemoveFromEventList>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d001      	beq.n	8005cee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005cea:	f000 ffcb 	bl	8006c84 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005cee:	7bfb      	ldrb	r3, [r7, #15]
 8005cf0:	3b01      	subs	r3, #1
 8005cf2:	b2db      	uxtb	r3, r3
 8005cf4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	dce9      	bgt.n	8005cd2 <prvUnlockQueue+0x16>
 8005cfe:	e000      	b.n	8005d02 <prvUnlockQueue+0x46>
					break;
 8005d00:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	22ff      	movs	r2, #255	@ 0xff
 8005d06:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005d0a:	f002 fa57 	bl	80081bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005d0e:	f002 fa23 	bl	8008158 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005d18:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d1a:	e011      	b.n	8005d40 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	691b      	ldr	r3, [r3, #16]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d012      	beq.n	8005d4a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	3310      	adds	r3, #16
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f000 fecd 	bl	8006ac8 <xTaskRemoveFromEventList>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d001      	beq.n	8005d38 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005d34:	f000 ffa6 	bl	8006c84 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005d38:	7bbb      	ldrb	r3, [r7, #14]
 8005d3a:	3b01      	subs	r3, #1
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	dce9      	bgt.n	8005d1c <prvUnlockQueue+0x60>
 8005d48:	e000      	b.n	8005d4c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005d4a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	22ff      	movs	r2, #255	@ 0xff
 8005d50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005d54:	f002 fa32 	bl	80081bc <vPortExitCritical>
}
 8005d58:	bf00      	nop
 8005d5a:	3710      	adds	r7, #16
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b084      	sub	sp, #16
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d68:	f002 f9f6 	bl	8008158 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d102      	bne.n	8005d7a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005d74:	2301      	movs	r3, #1
 8005d76:	60fb      	str	r3, [r7, #12]
 8005d78:	e001      	b.n	8005d7e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005d7e:	f002 fa1d 	bl	80081bc <vPortExitCritical>

	return xReturn;
 8005d82:	68fb      	ldr	r3, [r7, #12]
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3710      	adds	r7, #16
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b084      	sub	sp, #16
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d94:	f002 f9e0 	bl	8008158 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d102      	bne.n	8005daa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005da4:	2301      	movs	r3, #1
 8005da6:	60fb      	str	r3, [r7, #12]
 8005da8:	e001      	b.n	8005dae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005daa:	2300      	movs	r3, #0
 8005dac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005dae:	f002 fa05 	bl	80081bc <vPortExitCritical>

	return xReturn;
 8005db2:	68fb      	ldr	r3, [r7, #12]
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3710      	adds	r7, #16
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}

08005dbc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b085      	sub	sp, #20
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	60fb      	str	r3, [r7, #12]
 8005dca:	e014      	b.n	8005df6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005dcc:	4a0f      	ldr	r2, [pc, #60]	@ (8005e0c <vQueueAddToRegistry+0x50>)
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d10b      	bne.n	8005df0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005dd8:	490c      	ldr	r1, [pc, #48]	@ (8005e0c <vQueueAddToRegistry+0x50>)
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	683a      	ldr	r2, [r7, #0]
 8005dde:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005de2:	4a0a      	ldr	r2, [pc, #40]	@ (8005e0c <vQueueAddToRegistry+0x50>)
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	00db      	lsls	r3, r3, #3
 8005de8:	4413      	add	r3, r2
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005dee:	e006      	b.n	8005dfe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	3301      	adds	r3, #1
 8005df4:	60fb      	str	r3, [r7, #12]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2b07      	cmp	r3, #7
 8005dfa:	d9e7      	bls.n	8005dcc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005dfc:	bf00      	nop
 8005dfe:	bf00      	nop
 8005e00:	3714      	adds	r7, #20
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr
 8005e0a:	bf00      	nop
 8005e0c:	20000a50 	.word	0x20000a50

08005e10 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b086      	sub	sp, #24
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	60f8      	str	r0, [r7, #12]
 8005e18:	60b9      	str	r1, [r7, #8]
 8005e1a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005e20:	f002 f99a 	bl	8008158 <vPortEnterCritical>
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005e2a:	b25b      	sxtb	r3, r3
 8005e2c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005e30:	d103      	bne.n	8005e3a <vQueueWaitForMessageRestricted+0x2a>
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	2200      	movs	r2, #0
 8005e36:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005e40:	b25b      	sxtb	r3, r3
 8005e42:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005e46:	d103      	bne.n	8005e50 <vQueueWaitForMessageRestricted+0x40>
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005e50:	f002 f9b4 	bl	80081bc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d106      	bne.n	8005e6a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	3324      	adds	r3, #36	@ 0x24
 8005e60:	687a      	ldr	r2, [r7, #4]
 8005e62:	68b9      	ldr	r1, [r7, #8]
 8005e64:	4618      	mov	r0, r3
 8005e66:	f000 fe03 	bl	8006a70 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005e6a:	6978      	ldr	r0, [r7, #20]
 8005e6c:	f7ff ff26 	bl	8005cbc <prvUnlockQueue>
	}
 8005e70:	bf00      	nop
 8005e72:	3718      	adds	r7, #24
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b08e      	sub	sp, #56	@ 0x38
 8005e7c:	af04      	add	r7, sp, #16
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	607a      	str	r2, [r7, #4]
 8005e84:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005e86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d10b      	bne.n	8005ea4 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005e8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e90:	f383 8811 	msr	BASEPRI, r3
 8005e94:	f3bf 8f6f 	isb	sy
 8005e98:	f3bf 8f4f 	dsb	sy
 8005e9c:	623b      	str	r3, [r7, #32]
}
 8005e9e:	bf00      	nop
 8005ea0:	bf00      	nop
 8005ea2:	e7fd      	b.n	8005ea0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005ea4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d10b      	bne.n	8005ec2 <xTaskCreateStatic+0x4a>
	__asm volatile
 8005eaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eae:	f383 8811 	msr	BASEPRI, r3
 8005eb2:	f3bf 8f6f 	isb	sy
 8005eb6:	f3bf 8f4f 	dsb	sy
 8005eba:	61fb      	str	r3, [r7, #28]
}
 8005ebc:	bf00      	nop
 8005ebe:	bf00      	nop
 8005ec0:	e7fd      	b.n	8005ebe <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005ec2:	23d8      	movs	r3, #216	@ 0xd8
 8005ec4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	2bd8      	cmp	r3, #216	@ 0xd8
 8005eca:	d00b      	beq.n	8005ee4 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005ecc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ed0:	f383 8811 	msr	BASEPRI, r3
 8005ed4:	f3bf 8f6f 	isb	sy
 8005ed8:	f3bf 8f4f 	dsb	sy
 8005edc:	61bb      	str	r3, [r7, #24]
}
 8005ede:	bf00      	nop
 8005ee0:	bf00      	nop
 8005ee2:	e7fd      	b.n	8005ee0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005ee4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005ee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d01e      	beq.n	8005f2a <xTaskCreateStatic+0xb2>
 8005eec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d01b      	beq.n	8005f2a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005ef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ef4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ef8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005efa:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005efe:	2202      	movs	r2, #2
 8005f00:	f883 20d5 	strb.w	r2, [r3, #213]	@ 0xd5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005f04:	2300      	movs	r3, #0
 8005f06:	9303      	str	r3, [sp, #12]
 8005f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f0a:	9302      	str	r3, [sp, #8]
 8005f0c:	f107 0314 	add.w	r3, r7, #20
 8005f10:	9301      	str	r3, [sp, #4]
 8005f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f14:	9300      	str	r3, [sp, #0]
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	68b9      	ldr	r1, [r7, #8]
 8005f1c:	68f8      	ldr	r0, [r7, #12]
 8005f1e:	f000 f851 	bl	8005fc4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f22:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005f24:	f000 f90e 	bl	8006144 <prvAddNewTaskToReadyList>
 8005f28:	e001      	b.n	8005f2e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005f2e:	697b      	ldr	r3, [r7, #20]
	}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3728      	adds	r7, #40	@ 0x28
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}

08005f38 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b08c      	sub	sp, #48	@ 0x30
 8005f3c:	af04      	add	r7, sp, #16
 8005f3e:	60f8      	str	r0, [r7, #12]
 8005f40:	60b9      	str	r1, [r7, #8]
 8005f42:	603b      	str	r3, [r7, #0]
 8005f44:	4613      	mov	r3, r2
 8005f46:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005f48:	88fb      	ldrh	r3, [r7, #6]
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f002 fa25 	bl	800839c <pvPortMalloc>
 8005f52:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d00e      	beq.n	8005f78 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005f5a:	20d8      	movs	r0, #216	@ 0xd8
 8005f5c:	f002 fa1e 	bl	800839c <pvPortMalloc>
 8005f60:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005f62:	69fb      	ldr	r3, [r7, #28]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d003      	beq.n	8005f70 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005f68:	69fb      	ldr	r3, [r7, #28]
 8005f6a:	697a      	ldr	r2, [r7, #20]
 8005f6c:	631a      	str	r2, [r3, #48]	@ 0x30
 8005f6e:	e005      	b.n	8005f7c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005f70:	6978      	ldr	r0, [r7, #20]
 8005f72:	f002 fae1 	bl	8008538 <vPortFree>
 8005f76:	e001      	b.n	8005f7c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005f7c:	69fb      	ldr	r3, [r7, #28]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d017      	beq.n	8005fb2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005f82:	69fb      	ldr	r3, [r7, #28]
 8005f84:	2200      	movs	r2, #0
 8005f86:	f883 20d5 	strb.w	r2, [r3, #213]	@ 0xd5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005f8a:	88fa      	ldrh	r2, [r7, #6]
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	9303      	str	r3, [sp, #12]
 8005f90:	69fb      	ldr	r3, [r7, #28]
 8005f92:	9302      	str	r3, [sp, #8]
 8005f94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f96:	9301      	str	r3, [sp, #4]
 8005f98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f9a:	9300      	str	r3, [sp, #0]
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	68b9      	ldr	r1, [r7, #8]
 8005fa0:	68f8      	ldr	r0, [r7, #12]
 8005fa2:	f000 f80f 	bl	8005fc4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005fa6:	69f8      	ldr	r0, [r7, #28]
 8005fa8:	f000 f8cc 	bl	8006144 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005fac:	2301      	movs	r3, #1
 8005fae:	61bb      	str	r3, [r7, #24]
 8005fb0:	e002      	b.n	8005fb8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005fb2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005fb6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005fb8:	69bb      	ldr	r3, [r7, #24]
	}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3720      	adds	r7, #32
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
	...

08005fc4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b088      	sub	sp, #32
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	60f8      	str	r0, [r7, #12]
 8005fcc:	60b9      	str	r1, [r7, #8]
 8005fce:	607a      	str	r2, [r7, #4]
 8005fd0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fd4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	009b      	lsls	r3, r3, #2
 8005fda:	461a      	mov	r2, r3
 8005fdc:	21a5      	movs	r1, #165	@ 0xa5
 8005fde:	f002 fd81 	bl	8008ae4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fe4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005fec:	3b01      	subs	r3, #1
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	4413      	add	r3, r2
 8005ff2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005ff4:	69bb      	ldr	r3, [r7, #24]
 8005ff6:	f023 0307 	bic.w	r3, r3, #7
 8005ffa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005ffc:	69bb      	ldr	r3, [r7, #24]
 8005ffe:	f003 0307 	and.w	r3, r3, #7
 8006002:	2b00      	cmp	r3, #0
 8006004:	d00b      	beq.n	800601e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800600a:	f383 8811 	msr	BASEPRI, r3
 800600e:	f3bf 8f6f 	isb	sy
 8006012:	f3bf 8f4f 	dsb	sy
 8006016:	617b      	str	r3, [r7, #20]
}
 8006018:	bf00      	nop
 800601a:	bf00      	nop
 800601c:	e7fd      	b.n	800601a <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800601e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006020:	69ba      	ldr	r2, [r7, #24]
 8006022:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d01f      	beq.n	800606a <prvInitialiseNewTask+0xa6>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800602a:	2300      	movs	r3, #0
 800602c:	61fb      	str	r3, [r7, #28]
 800602e:	e012      	b.n	8006056 <prvInitialiseNewTask+0x92>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006030:	68ba      	ldr	r2, [r7, #8]
 8006032:	69fb      	ldr	r3, [r7, #28]
 8006034:	4413      	add	r3, r2
 8006036:	7819      	ldrb	r1, [r3, #0]
 8006038:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800603a:	69fb      	ldr	r3, [r7, #28]
 800603c:	4413      	add	r3, r2
 800603e:	3334      	adds	r3, #52	@ 0x34
 8006040:	460a      	mov	r2, r1
 8006042:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006044:	68ba      	ldr	r2, [r7, #8]
 8006046:	69fb      	ldr	r3, [r7, #28]
 8006048:	4413      	add	r3, r2
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d006      	beq.n	800605e <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006050:	69fb      	ldr	r3, [r7, #28]
 8006052:	3301      	adds	r3, #1
 8006054:	61fb      	str	r3, [r7, #28]
 8006056:	69fb      	ldr	r3, [r7, #28]
 8006058:	2b0f      	cmp	r3, #15
 800605a:	d9e9      	bls.n	8006030 <prvInitialiseNewTask+0x6c>
 800605c:	e000      	b.n	8006060 <prvInitialiseNewTask+0x9c>
			{
				break;
 800605e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006062:	2200      	movs	r2, #0
 8006064:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006068:	e003      	b.n	8006072 <prvInitialiseNewTask+0xae>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800606a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800606c:	2200      	movs	r2, #0
 800606e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006074:	2b37      	cmp	r3, #55	@ 0x37
 8006076:	d901      	bls.n	800607c <prvInitialiseNewTask+0xb8>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006078:	2337      	movs	r3, #55	@ 0x37
 800607a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800607c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800607e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006080:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006084:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006086:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->uxMutexesHeld = 0;
 8006088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800608a:	2200      	movs	r2, #0
 800608c:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800608e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006090:	3304      	adds	r3, #4
 8006092:	4618      	mov	r0, r3
 8006094:	f7fe ff6e 	bl	8004f74 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800609a:	3318      	adds	r3, #24
 800609c:	4618      	mov	r0, r3
 800609e:	f7fe ff69 	bl	8004f74 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80060a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060a6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060aa:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80060ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060b0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80060b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060b6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 80060b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ba:	2200      	movs	r2, #0
 80060bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	}
	#endif

	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
	{
		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 80060c0:	2300      	movs	r3, #0
 80060c2:	61fb      	str	r3, [r7, #28]
 80060c4:	e008      	b.n	80060d8 <prvInitialiseNewTask+0x114>
		{
			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 80060c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060c8:	69fa      	ldr	r2, [r7, #28]
 80060ca:	3216      	adds	r2, #22
 80060cc:	2100      	movs	r1, #0
 80060ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 80060d2:	69fb      	ldr	r3, [r7, #28]
 80060d4:	3301      	adds	r3, #1
 80060d6:	61fb      	str	r3, [r7, #28]
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	2b09      	cmp	r3, #9
 80060dc:	d9f3      	bls.n	80060c6 <prvInitialiseNewTask+0x102>
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80060de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060e0:	2200      	movs	r2, #0
 80060e2:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80060e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060e8:	2200      	movs	r2, #0
 80060ea:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80060ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060f0:	3384      	adds	r3, #132	@ 0x84
 80060f2:	224c      	movs	r2, #76	@ 0x4c
 80060f4:	2100      	movs	r1, #0
 80060f6:	4618      	mov	r0, r3
 80060f8:	f002 fcf4 	bl	8008ae4 <memset>
 80060fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060fe:	4a0e      	ldr	r2, [pc, #56]	@ (8006138 <prvInitialiseNewTask+0x174>)
 8006100:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8006104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006106:	4a0d      	ldr	r2, [pc, #52]	@ (800613c <prvInitialiseNewTask+0x178>)
 8006108:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 800610c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800610e:	4a0c      	ldr	r2, [pc, #48]	@ (8006140 <prvInitialiseNewTask+0x17c>)
 8006110:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006114:	683a      	ldr	r2, [r7, #0]
 8006116:	68f9      	ldr	r1, [r7, #12]
 8006118:	69b8      	ldr	r0, [r7, #24]
 800611a:	f001 feef 	bl	8007efc <pxPortInitialiseStack>
 800611e:	4602      	mov	r2, r0
 8006120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006122:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006126:	2b00      	cmp	r3, #0
 8006128:	d002      	beq.n	8006130 <prvInitialiseNewTask+0x16c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800612a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800612c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800612e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006130:	bf00      	nop
 8006132:	3720      	adds	r7, #32
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}
 8006138:	20004cec 	.word	0x20004cec
 800613c:	20004d54 	.word	0x20004d54
 8006140:	20004dbc 	.word	0x20004dbc

08006144 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b082      	sub	sp, #8
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800614c:	f002 f804 	bl	8008158 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006150:	4b2d      	ldr	r3, [pc, #180]	@ (8006208 <prvAddNewTaskToReadyList+0xc4>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	3301      	adds	r3, #1
 8006156:	4a2c      	ldr	r2, [pc, #176]	@ (8006208 <prvAddNewTaskToReadyList+0xc4>)
 8006158:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800615a:	4b2c      	ldr	r3, [pc, #176]	@ (800620c <prvAddNewTaskToReadyList+0xc8>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d109      	bne.n	8006176 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006162:	4a2a      	ldr	r2, [pc, #168]	@ (800620c <prvAddNewTaskToReadyList+0xc8>)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006168:	4b27      	ldr	r3, [pc, #156]	@ (8006208 <prvAddNewTaskToReadyList+0xc4>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	2b01      	cmp	r3, #1
 800616e:	d110      	bne.n	8006192 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006170:	f000 fdf0 	bl	8006d54 <prvInitialiseTaskLists>
 8006174:	e00d      	b.n	8006192 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006176:	4b26      	ldr	r3, [pc, #152]	@ (8006210 <prvAddNewTaskToReadyList+0xcc>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d109      	bne.n	8006192 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800617e:	4b23      	ldr	r3, [pc, #140]	@ (800620c <prvAddNewTaskToReadyList+0xc8>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006188:	429a      	cmp	r2, r3
 800618a:	d802      	bhi.n	8006192 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800618c:	4a1f      	ldr	r2, [pc, #124]	@ (800620c <prvAddNewTaskToReadyList+0xc8>)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006192:	4b20      	ldr	r3, [pc, #128]	@ (8006214 <prvAddNewTaskToReadyList+0xd0>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	3301      	adds	r3, #1
 8006198:	4a1e      	ldr	r2, [pc, #120]	@ (8006214 <prvAddNewTaskToReadyList+0xd0>)
 800619a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800619c:	4b1d      	ldr	r3, [pc, #116]	@ (8006214 <prvAddNewTaskToReadyList+0xd0>)
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	649a      	str	r2, [r3, #72]	@ 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061a8:	4b1b      	ldr	r3, [pc, #108]	@ (8006218 <prvAddNewTaskToReadyList+0xd4>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d903      	bls.n	80061b8 <prvAddNewTaskToReadyList+0x74>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061b4:	4a18      	ldr	r2, [pc, #96]	@ (8006218 <prvAddNewTaskToReadyList+0xd4>)
 80061b6:	6013      	str	r3, [r2, #0]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061bc:	4613      	mov	r3, r2
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	4413      	add	r3, r2
 80061c2:	009b      	lsls	r3, r3, #2
 80061c4:	4a15      	ldr	r2, [pc, #84]	@ (800621c <prvAddNewTaskToReadyList+0xd8>)
 80061c6:	441a      	add	r2, r3
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	3304      	adds	r3, #4
 80061cc:	4619      	mov	r1, r3
 80061ce:	4610      	mov	r0, r2
 80061d0:	f7fe fedd 	bl	8004f8e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80061d4:	f001 fff2 	bl	80081bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80061d8:	4b0d      	ldr	r3, [pc, #52]	@ (8006210 <prvAddNewTaskToReadyList+0xcc>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d00e      	beq.n	80061fe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80061e0:	4b0a      	ldr	r3, [pc, #40]	@ (800620c <prvAddNewTaskToReadyList+0xc8>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d207      	bcs.n	80061fe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80061ee:	4b0c      	ldr	r3, [pc, #48]	@ (8006220 <prvAddNewTaskToReadyList+0xdc>)
 80061f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061f4:	601a      	str	r2, [r3, #0]
 80061f6:	f3bf 8f4f 	dsb	sy
 80061fa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80061fe:	bf00      	nop
 8006200:	3708      	adds	r7, #8
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}
 8006206:	bf00      	nop
 8006208:	20000f64 	.word	0x20000f64
 800620c:	20000a90 	.word	0x20000a90
 8006210:	20000f70 	.word	0x20000f70
 8006214:	20000f80 	.word	0x20000f80
 8006218:	20000f6c 	.word	0x20000f6c
 800621c:	20000a94 	.word	0x20000a94
 8006220:	e000ed04 	.word	0xe000ed04

08006224 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8006224:	b580      	push	{r7, lr}
 8006226:	b088      	sub	sp, #32
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8006230:	69bb      	ldr	r3, [r7, #24]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d10b      	bne.n	800624e <eTaskGetState+0x2a>
	__asm volatile
 8006236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800623a:	f383 8811 	msr	BASEPRI, r3
 800623e:	f3bf 8f6f 	isb	sy
 8006242:	f3bf 8f4f 	dsb	sy
 8006246:	60bb      	str	r3, [r7, #8]
}
 8006248:	bf00      	nop
 800624a:	bf00      	nop
 800624c:	e7fd      	b.n	800624a <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 800624e:	4b24      	ldr	r3, [pc, #144]	@ (80062e0 <eTaskGetState+0xbc>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	69ba      	ldr	r2, [r7, #24]
 8006254:	429a      	cmp	r2, r3
 8006256:	d102      	bne.n	800625e <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8006258:	2300      	movs	r3, #0
 800625a:	77fb      	strb	r3, [r7, #31]
 800625c:	e03a      	b.n	80062d4 <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 800625e:	f001 ff7b 	bl	8008158 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8006262:	69bb      	ldr	r3, [r7, #24]
 8006264:	695b      	ldr	r3, [r3, #20]
 8006266:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8006268:	4b1e      	ldr	r3, [pc, #120]	@ (80062e4 <eTaskGetState+0xc0>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800626e:	4b1e      	ldr	r3, [pc, #120]	@ (80062e8 <eTaskGetState+0xc4>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8006274:	f001 ffa2 	bl	80081bc <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8006278:	697a      	ldr	r2, [r7, #20]
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	429a      	cmp	r2, r3
 800627e:	d003      	beq.n	8006288 <eTaskGetState+0x64>
 8006280:	697a      	ldr	r2, [r7, #20]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	429a      	cmp	r2, r3
 8006286:	d102      	bne.n	800628e <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8006288:	2302      	movs	r3, #2
 800628a:	77fb      	strb	r3, [r7, #31]
 800628c:	e022      	b.n	80062d4 <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	4a16      	ldr	r2, [pc, #88]	@ (80062ec <eTaskGetState+0xc8>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d112      	bne.n	80062bc <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8006296:	69bb      	ldr	r3, [r7, #24]
 8006298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800629a:	2b00      	cmp	r3, #0
 800629c:	d10b      	bne.n	80062b6 <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800629e:	69bb      	ldr	r3, [r7, #24]
 80062a0:	f893 30d4 	ldrb.w	r3, [r3, #212]	@ 0xd4
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d102      	bne.n	80062b0 <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 80062aa:	2302      	movs	r3, #2
 80062ac:	77fb      	strb	r3, [r7, #31]
 80062ae:	e011      	b.n	80062d4 <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 80062b0:	2303      	movs	r3, #3
 80062b2:	77fb      	strb	r3, [r7, #31]
 80062b4:	e00e      	b.n	80062d4 <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 80062b6:	2302      	movs	r3, #2
 80062b8:	77fb      	strb	r3, [r7, #31]
 80062ba:	e00b      	b.n	80062d4 <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	4a0c      	ldr	r2, [pc, #48]	@ (80062f0 <eTaskGetState+0xcc>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d002      	beq.n	80062ca <eTaskGetState+0xa6>
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d102      	bne.n	80062d0 <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 80062ca:	2304      	movs	r3, #4
 80062cc:	77fb      	strb	r3, [r7, #31]
 80062ce:	e001      	b.n	80062d4 <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 80062d0:	2301      	movs	r3, #1
 80062d2:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 80062d4:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80062d6:	4618      	mov	r0, r3
 80062d8:	3720      	adds	r7, #32
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	bf00      	nop
 80062e0:	20000a90 	.word	0x20000a90
 80062e4:	20000f1c 	.word	0x20000f1c
 80062e8:	20000f20 	.word	0x20000f20
 80062ec:	20000f50 	.word	0x20000f50
 80062f0:	20000f38 	.word	0x20000f38

080062f4 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b088      	sub	sp, #32
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
 80062fc:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 80062fe:	2300      	movs	r3, #0
 8006300:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	2b37      	cmp	r3, #55	@ 0x37
 8006306:	d90b      	bls.n	8006320 <vTaskPrioritySet+0x2c>
	__asm volatile
 8006308:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800630c:	f383 8811 	msr	BASEPRI, r3
 8006310:	f3bf 8f6f 	isb	sy
 8006314:	f3bf 8f4f 	dsb	sy
 8006318:	60fb      	str	r3, [r7, #12]
}
 800631a:	bf00      	nop
 800631c:	bf00      	nop
 800631e:	e7fd      	b.n	800631c <vTaskPrioritySet+0x28>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	2b37      	cmp	r3, #55	@ 0x37
 8006324:	d901      	bls.n	800632a <vTaskPrioritySet+0x36>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006326:	2337      	movs	r3, #55	@ 0x37
 8006328:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 800632a:	f001 ff15 	bl	8008158 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d102      	bne.n	800633a <vTaskPrioritySet+0x46>
 8006334:	4b3a      	ldr	r3, [pc, #232]	@ (8006420 <vTaskPrioritySet+0x12c>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	e000      	b.n	800633c <vTaskPrioritySet+0x48>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 800633e:	69bb      	ldr	r3, [r7, #24]
 8006340:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006342:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 8006344:	697a      	ldr	r2, [r7, #20]
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	429a      	cmp	r2, r3
 800634a:	d063      	beq.n	8006414 <vTaskPrioritySet+0x120>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 800634c:	683a      	ldr	r2, [r7, #0]
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	429a      	cmp	r2, r3
 8006352:	d90d      	bls.n	8006370 <vTaskPrioritySet+0x7c>
				{
					if( pxTCB != pxCurrentTCB )
 8006354:	4b32      	ldr	r3, [pc, #200]	@ (8006420 <vTaskPrioritySet+0x12c>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	69ba      	ldr	r2, [r7, #24]
 800635a:	429a      	cmp	r2, r3
 800635c:	d00f      	beq.n	800637e <vTaskPrioritySet+0x8a>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800635e:	4b30      	ldr	r3, [pc, #192]	@ (8006420 <vTaskPrioritySet+0x12c>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006364:	683a      	ldr	r2, [r7, #0]
 8006366:	429a      	cmp	r2, r3
 8006368:	d309      	bcc.n	800637e <vTaskPrioritySet+0x8a>
						{
							xYieldRequired = pdTRUE;
 800636a:	2301      	movs	r3, #1
 800636c:	61fb      	str	r3, [r7, #28]
 800636e:	e006      	b.n	800637e <vTaskPrioritySet+0x8a>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 8006370:	4b2b      	ldr	r3, [pc, #172]	@ (8006420 <vTaskPrioritySet+0x12c>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	69ba      	ldr	r2, [r7, #24]
 8006376:	429a      	cmp	r2, r3
 8006378:	d101      	bne.n	800637e <vTaskPrioritySet+0x8a>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 800637a:	2301      	movs	r3, #1
 800637c:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800637e:	69bb      	ldr	r3, [r7, #24]
 8006380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006382:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8006384:	69bb      	ldr	r3, [r7, #24]
 8006386:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006388:	69bb      	ldr	r3, [r7, #24]
 800638a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800638c:	429a      	cmp	r2, r3
 800638e:	d102      	bne.n	8006396 <vTaskPrioritySet+0xa2>
					{
						pxTCB->uxPriority = uxNewPriority;
 8006390:	69bb      	ldr	r3, [r7, #24]
 8006392:	683a      	ldr	r2, [r7, #0]
 8006394:	62da      	str	r2, [r3, #44]	@ 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 8006396:	69bb      	ldr	r3, [r7, #24]
 8006398:	683a      	ldr	r2, [r7, #0]
 800639a:	651a      	str	r2, [r3, #80]	@ 0x50
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800639c:	69bb      	ldr	r3, [r7, #24]
 800639e:	699b      	ldr	r3, [r3, #24]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	db04      	blt.n	80063ae <vTaskPrioritySet+0xba>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80063aa:	69bb      	ldr	r3, [r7, #24]
 80063ac:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80063ae:	69bb      	ldr	r3, [r7, #24]
 80063b0:	6959      	ldr	r1, [r3, #20]
 80063b2:	693a      	ldr	r2, [r7, #16]
 80063b4:	4613      	mov	r3, r2
 80063b6:	009b      	lsls	r3, r3, #2
 80063b8:	4413      	add	r3, r2
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	4a19      	ldr	r2, [pc, #100]	@ (8006424 <vTaskPrioritySet+0x130>)
 80063be:	4413      	add	r3, r2
 80063c0:	4299      	cmp	r1, r3
 80063c2:	d11c      	bne.n	80063fe <vTaskPrioritySet+0x10a>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80063c4:	69bb      	ldr	r3, [r7, #24]
 80063c6:	3304      	adds	r3, #4
 80063c8:	4618      	mov	r0, r3
 80063ca:	f7fe fe3d 	bl	8005048 <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 80063ce:	69bb      	ldr	r3, [r7, #24]
 80063d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063d2:	4b15      	ldr	r3, [pc, #84]	@ (8006428 <vTaskPrioritySet+0x134>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d903      	bls.n	80063e2 <vTaskPrioritySet+0xee>
 80063da:	69bb      	ldr	r3, [r7, #24]
 80063dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063de:	4a12      	ldr	r2, [pc, #72]	@ (8006428 <vTaskPrioritySet+0x134>)
 80063e0:	6013      	str	r3, [r2, #0]
 80063e2:	69bb      	ldr	r3, [r7, #24]
 80063e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063e6:	4613      	mov	r3, r2
 80063e8:	009b      	lsls	r3, r3, #2
 80063ea:	4413      	add	r3, r2
 80063ec:	009b      	lsls	r3, r3, #2
 80063ee:	4a0d      	ldr	r2, [pc, #52]	@ (8006424 <vTaskPrioritySet+0x130>)
 80063f0:	441a      	add	r2, r3
 80063f2:	69bb      	ldr	r3, [r7, #24]
 80063f4:	3304      	adds	r3, #4
 80063f6:	4619      	mov	r1, r3
 80063f8:	4610      	mov	r0, r2
 80063fa:	f7fe fdc8 	bl	8004f8e <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 80063fe:	69fb      	ldr	r3, [r7, #28]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d007      	beq.n	8006414 <vTaskPrioritySet+0x120>
				{
					taskYIELD_IF_USING_PREEMPTION();
 8006404:	4b09      	ldr	r3, [pc, #36]	@ (800642c <vTaskPrioritySet+0x138>)
 8006406:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800640a:	601a      	str	r2, [r3, #0]
 800640c:	f3bf 8f4f 	dsb	sy
 8006410:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 8006414:	f001 fed2 	bl	80081bc <vPortExitCritical>
	}
 8006418:	bf00      	nop
 800641a:	3720      	adds	r7, #32
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}
 8006420:	20000a90 	.word	0x20000a90
 8006424:	20000a94 	.word	0x20000a94
 8006428:	20000f6c 	.word	0x20000f6c
 800642c:	e000ed04 	.word	0xe000ed04

08006430 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b08a      	sub	sp, #40	@ 0x28
 8006434:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006436:	2300      	movs	r3, #0
 8006438:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800643a:	2300      	movs	r3, #0
 800643c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800643e:	463a      	mov	r2, r7
 8006440:	1d39      	adds	r1, r7, #4
 8006442:	f107 0308 	add.w	r3, r7, #8
 8006446:	4618      	mov	r0, r3
 8006448:	f7fe fd40 	bl	8004ecc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800644c:	6839      	ldr	r1, [r7, #0]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	68ba      	ldr	r2, [r7, #8]
 8006452:	9202      	str	r2, [sp, #8]
 8006454:	9301      	str	r3, [sp, #4]
 8006456:	2300      	movs	r3, #0
 8006458:	9300      	str	r3, [sp, #0]
 800645a:	2300      	movs	r3, #0
 800645c:	460a      	mov	r2, r1
 800645e:	4925      	ldr	r1, [pc, #148]	@ (80064f4 <vTaskStartScheduler+0xc4>)
 8006460:	4825      	ldr	r0, [pc, #148]	@ (80064f8 <vTaskStartScheduler+0xc8>)
 8006462:	f7ff fd09 	bl	8005e78 <xTaskCreateStatic>
 8006466:	4603      	mov	r3, r0
 8006468:	4a24      	ldr	r2, [pc, #144]	@ (80064fc <vTaskStartScheduler+0xcc>)
 800646a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800646c:	4b23      	ldr	r3, [pc, #140]	@ (80064fc <vTaskStartScheduler+0xcc>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d002      	beq.n	800647a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006474:	2301      	movs	r3, #1
 8006476:	617b      	str	r3, [r7, #20]
 8006478:	e001      	b.n	800647e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800647a:	2300      	movs	r3, #0
 800647c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	2b01      	cmp	r3, #1
 8006482:	d102      	bne.n	800648a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006484:	f001 f960 	bl	8007748 <xTimerCreateTimerTask>
 8006488:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	2b01      	cmp	r3, #1
 800648e:	d11d      	bne.n	80064cc <vTaskStartScheduler+0x9c>
	__asm volatile
 8006490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006494:	f383 8811 	msr	BASEPRI, r3
 8006498:	f3bf 8f6f 	isb	sy
 800649c:	f3bf 8f4f 	dsb	sy
 80064a0:	613b      	str	r3, [r7, #16]
}
 80064a2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80064a4:	4b16      	ldr	r3, [pc, #88]	@ (8006500 <vTaskStartScheduler+0xd0>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	3384      	adds	r3, #132	@ 0x84
 80064aa:	4a16      	ldr	r2, [pc, #88]	@ (8006504 <vTaskStartScheduler+0xd4>)
 80064ac:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80064ae:	4b16      	ldr	r3, [pc, #88]	@ (8006508 <vTaskStartScheduler+0xd8>)
 80064b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80064b4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80064b6:	4b15      	ldr	r3, [pc, #84]	@ (800650c <vTaskStartScheduler+0xdc>)
 80064b8:	2201      	movs	r2, #1
 80064ba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80064bc:	4b14      	ldr	r3, [pc, #80]	@ (8006510 <vTaskStartScheduler+0xe0>)
 80064be:	2200      	movs	r2, #0
 80064c0:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80064c2:	f7fb f801 	bl	80014c8 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80064c6:	f001 fda3 	bl	8008010 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80064ca:	e00f      	b.n	80064ec <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80064d2:	d10b      	bne.n	80064ec <vTaskStartScheduler+0xbc>
	__asm volatile
 80064d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064d8:	f383 8811 	msr	BASEPRI, r3
 80064dc:	f3bf 8f6f 	isb	sy
 80064e0:	f3bf 8f4f 	dsb	sy
 80064e4:	60fb      	str	r3, [r7, #12]
}
 80064e6:	bf00      	nop
 80064e8:	bf00      	nop
 80064ea:	e7fd      	b.n	80064e8 <vTaskStartScheduler+0xb8>
}
 80064ec:	bf00      	nop
 80064ee:	3718      	adds	r7, #24
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}
 80064f4:	0800951c 	.word	0x0800951c
 80064f8:	08006c9d 	.word	0x08006c9d
 80064fc:	20000f88 	.word	0x20000f88
 8006500:	20000a90 	.word	0x20000a90
 8006504:	20000010 	.word	0x20000010
 8006508:	20000f84 	.word	0x20000f84
 800650c:	20000f70 	.word	0x20000f70
 8006510:	20000f68 	.word	0x20000f68

08006514 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006514:	b480      	push	{r7}
 8006516:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006518:	4b04      	ldr	r3, [pc, #16]	@ (800652c <vTaskSuspendAll+0x18>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	3301      	adds	r3, #1
 800651e:	4a03      	ldr	r2, [pc, #12]	@ (800652c <vTaskSuspendAll+0x18>)
 8006520:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006522:	bf00      	nop
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr
 800652c:	20000f8c 	.word	0x20000f8c

08006530 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b084      	sub	sp, #16
 8006534:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006536:	2300      	movs	r3, #0
 8006538:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800653a:	2300      	movs	r3, #0
 800653c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800653e:	4b42      	ldr	r3, [pc, #264]	@ (8006648 <xTaskResumeAll+0x118>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d10b      	bne.n	800655e <xTaskResumeAll+0x2e>
	__asm volatile
 8006546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800654a:	f383 8811 	msr	BASEPRI, r3
 800654e:	f3bf 8f6f 	isb	sy
 8006552:	f3bf 8f4f 	dsb	sy
 8006556:	603b      	str	r3, [r7, #0]
}
 8006558:	bf00      	nop
 800655a:	bf00      	nop
 800655c:	e7fd      	b.n	800655a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800655e:	f001 fdfb 	bl	8008158 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006562:	4b39      	ldr	r3, [pc, #228]	@ (8006648 <xTaskResumeAll+0x118>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	3b01      	subs	r3, #1
 8006568:	4a37      	ldr	r2, [pc, #220]	@ (8006648 <xTaskResumeAll+0x118>)
 800656a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800656c:	4b36      	ldr	r3, [pc, #216]	@ (8006648 <xTaskResumeAll+0x118>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d162      	bne.n	800663a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006574:	4b35      	ldr	r3, [pc, #212]	@ (800664c <xTaskResumeAll+0x11c>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d05e      	beq.n	800663a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800657c:	e02f      	b.n	80065de <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800657e:	4b34      	ldr	r3, [pc, #208]	@ (8006650 <xTaskResumeAll+0x120>)
 8006580:	68db      	ldr	r3, [r3, #12]
 8006582:	68db      	ldr	r3, [r3, #12]
 8006584:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	3318      	adds	r3, #24
 800658a:	4618      	mov	r0, r3
 800658c:	f7fe fd5c 	bl	8005048 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	3304      	adds	r3, #4
 8006594:	4618      	mov	r0, r3
 8006596:	f7fe fd57 	bl	8005048 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800659e:	4b2d      	ldr	r3, [pc, #180]	@ (8006654 <xTaskResumeAll+0x124>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d903      	bls.n	80065ae <xTaskResumeAll+0x7e>
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065aa:	4a2a      	ldr	r2, [pc, #168]	@ (8006654 <xTaskResumeAll+0x124>)
 80065ac:	6013      	str	r3, [r2, #0]
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065b2:	4613      	mov	r3, r2
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	4413      	add	r3, r2
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	4a27      	ldr	r2, [pc, #156]	@ (8006658 <xTaskResumeAll+0x128>)
 80065bc:	441a      	add	r2, r3
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	3304      	adds	r3, #4
 80065c2:	4619      	mov	r1, r3
 80065c4:	4610      	mov	r0, r2
 80065c6:	f7fe fce2 	bl	8004f8e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065ce:	4b23      	ldr	r3, [pc, #140]	@ (800665c <xTaskResumeAll+0x12c>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d302      	bcc.n	80065de <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80065d8:	4b21      	ldr	r3, [pc, #132]	@ (8006660 <xTaskResumeAll+0x130>)
 80065da:	2201      	movs	r2, #1
 80065dc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80065de:	4b1c      	ldr	r3, [pc, #112]	@ (8006650 <xTaskResumeAll+0x120>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d1cb      	bne.n	800657e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d001      	beq.n	80065f0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80065ec:	f000 fd2c 	bl	8007048 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80065f0:	4b1c      	ldr	r3, [pc, #112]	@ (8006664 <xTaskResumeAll+0x134>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d010      	beq.n	800661e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80065fc:	f000 f8d6 	bl	80067ac <xTaskIncrementTick>
 8006600:	4603      	mov	r3, r0
 8006602:	2b00      	cmp	r3, #0
 8006604:	d002      	beq.n	800660c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006606:	4b16      	ldr	r3, [pc, #88]	@ (8006660 <xTaskResumeAll+0x130>)
 8006608:	2201      	movs	r2, #1
 800660a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	3b01      	subs	r3, #1
 8006610:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d1f1      	bne.n	80065fc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006618:	4b12      	ldr	r3, [pc, #72]	@ (8006664 <xTaskResumeAll+0x134>)
 800661a:	2200      	movs	r2, #0
 800661c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800661e:	4b10      	ldr	r3, [pc, #64]	@ (8006660 <xTaskResumeAll+0x130>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d009      	beq.n	800663a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006626:	2301      	movs	r3, #1
 8006628:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800662a:	4b0f      	ldr	r3, [pc, #60]	@ (8006668 <xTaskResumeAll+0x138>)
 800662c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006630:	601a      	str	r2, [r3, #0]
 8006632:	f3bf 8f4f 	dsb	sy
 8006636:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800663a:	f001 fdbf 	bl	80081bc <vPortExitCritical>

	return xAlreadyYielded;
 800663e:	68bb      	ldr	r3, [r7, #8]
}
 8006640:	4618      	mov	r0, r3
 8006642:	3710      	adds	r7, #16
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}
 8006648:	20000f8c 	.word	0x20000f8c
 800664c:	20000f64 	.word	0x20000f64
 8006650:	20000f24 	.word	0x20000f24
 8006654:	20000f6c 	.word	0x20000f6c
 8006658:	20000a94 	.word	0x20000a94
 800665c:	20000a90 	.word	0x20000a90
 8006660:	20000f78 	.word	0x20000f78
 8006664:	20000f74 	.word	0x20000f74
 8006668:	e000ed04 	.word	0xe000ed04

0800666c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800666c:	b480      	push	{r7}
 800666e:	b083      	sub	sp, #12
 8006670:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006672:	4b05      	ldr	r3, [pc, #20]	@ (8006688 <xTaskGetTickCount+0x1c>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006678:	687b      	ldr	r3, [r7, #4]
}
 800667a:	4618      	mov	r0, r3
 800667c:	370c      	adds	r7, #12
 800667e:	46bd      	mov	sp, r7
 8006680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006684:	4770      	bx	lr
 8006686:	bf00      	nop
 8006688:	20000f68 	.word	0x20000f68

0800668c <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 800668c:	b580      	push	{r7, lr}
 800668e:	b086      	sub	sp, #24
 8006690:	af00      	add	r7, sp, #0
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	60b9      	str	r1, [r7, #8]
 8006696:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 8006698:	2300      	movs	r3, #0
 800669a:	617b      	str	r3, [r7, #20]
 800669c:	2338      	movs	r3, #56	@ 0x38
 800669e:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 80066a0:	f7ff ff38 	bl	8006514 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 80066a4:	4b3b      	ldr	r3, [pc, #236]	@ (8006794 <uxTaskGetSystemState+0x108>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	68ba      	ldr	r2, [r7, #8]
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d36a      	bcc.n	8006784 <uxTaskGetSystemState+0xf8>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	3b01      	subs	r3, #1
 80066b2:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 80066b4:	697a      	ldr	r2, [r7, #20]
 80066b6:	4613      	mov	r3, r2
 80066b8:	00db      	lsls	r3, r3, #3
 80066ba:	4413      	add	r3, r2
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	461a      	mov	r2, r3
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	1898      	adds	r0, r3, r2
 80066c4:	693a      	ldr	r2, [r7, #16]
 80066c6:	4613      	mov	r3, r2
 80066c8:	009b      	lsls	r3, r3, #2
 80066ca:	4413      	add	r3, r2
 80066cc:	009b      	lsls	r3, r3, #2
 80066ce:	4a32      	ldr	r2, [pc, #200]	@ (8006798 <uxTaskGetSystemState+0x10c>)
 80066d0:	4413      	add	r3, r2
 80066d2:	2201      	movs	r2, #1
 80066d4:	4619      	mov	r1, r3
 80066d6:	f000 fc13 	bl	8006f00 <prvListTasksWithinSingleList>
 80066da:	4602      	mov	r2, r0
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	4413      	add	r3, r2
 80066e0:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d1e2      	bne.n	80066ae <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 80066e8:	697a      	ldr	r2, [r7, #20]
 80066ea:	4613      	mov	r3, r2
 80066ec:	00db      	lsls	r3, r3, #3
 80066ee:	4413      	add	r3, r2
 80066f0:	009b      	lsls	r3, r3, #2
 80066f2:	461a      	mov	r2, r3
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	4413      	add	r3, r2
 80066f8:	4a28      	ldr	r2, [pc, #160]	@ (800679c <uxTaskGetSystemState+0x110>)
 80066fa:	6811      	ldr	r1, [r2, #0]
 80066fc:	2202      	movs	r2, #2
 80066fe:	4618      	mov	r0, r3
 8006700:	f000 fbfe 	bl	8006f00 <prvListTasksWithinSingleList>
 8006704:	4602      	mov	r2, r0
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	4413      	add	r3, r2
 800670a:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800670c:	697a      	ldr	r2, [r7, #20]
 800670e:	4613      	mov	r3, r2
 8006710:	00db      	lsls	r3, r3, #3
 8006712:	4413      	add	r3, r2
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	461a      	mov	r2, r3
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	4413      	add	r3, r2
 800671c:	4a20      	ldr	r2, [pc, #128]	@ (80067a0 <uxTaskGetSystemState+0x114>)
 800671e:	6811      	ldr	r1, [r2, #0]
 8006720:	2202      	movs	r2, #2
 8006722:	4618      	mov	r0, r3
 8006724:	f000 fbec 	bl	8006f00 <prvListTasksWithinSingleList>
 8006728:	4602      	mov	r2, r0
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	4413      	add	r3, r2
 800672e:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8006730:	697a      	ldr	r2, [r7, #20]
 8006732:	4613      	mov	r3, r2
 8006734:	00db      	lsls	r3, r3, #3
 8006736:	4413      	add	r3, r2
 8006738:	009b      	lsls	r3, r3, #2
 800673a:	461a      	mov	r2, r3
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	4413      	add	r3, r2
 8006740:	2204      	movs	r2, #4
 8006742:	4918      	ldr	r1, [pc, #96]	@ (80067a4 <uxTaskGetSystemState+0x118>)
 8006744:	4618      	mov	r0, r3
 8006746:	f000 fbdb 	bl	8006f00 <prvListTasksWithinSingleList>
 800674a:	4602      	mov	r2, r0
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	4413      	add	r3, r2
 8006750:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 8006752:	697a      	ldr	r2, [r7, #20]
 8006754:	4613      	mov	r3, r2
 8006756:	00db      	lsls	r3, r3, #3
 8006758:	4413      	add	r3, r2
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	461a      	mov	r2, r3
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	4413      	add	r3, r2
 8006762:	2203      	movs	r2, #3
 8006764:	4910      	ldr	r1, [pc, #64]	@ (80067a8 <uxTaskGetSystemState+0x11c>)
 8006766:	4618      	mov	r0, r3
 8006768:	f000 fbca 	bl	8006f00 <prvListTasksWithinSingleList>
 800676c:	4602      	mov	r2, r0
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	4413      	add	r3, r2
 8006772:	617b      	str	r3, [r7, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1)
				{
					if( pulTotalRunTime != NULL )
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d004      	beq.n	8006784 <uxTaskGetSystemState+0xf8>
					{
						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
						#else
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800677a:	f7fa feb3 	bl	80014e4 <getRunTimeCounterValue>
 800677e:	4602      	mov	r2, r0
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 8006784:	f7ff fed4 	bl	8006530 <xTaskResumeAll>

		return uxTask;
 8006788:	697b      	ldr	r3, [r7, #20]
	}
 800678a:	4618      	mov	r0, r3
 800678c:	3718      	adds	r7, #24
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}
 8006792:	bf00      	nop
 8006794:	20000f64 	.word	0x20000f64
 8006798:	20000a94 	.word	0x20000a94
 800679c:	20000f1c 	.word	0x20000f1c
 80067a0:	20000f20 	.word	0x20000f20
 80067a4:	20000f38 	.word	0x20000f38
 80067a8:	20000f50 	.word	0x20000f50

080067ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b086      	sub	sp, #24
 80067b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80067b2:	2300      	movs	r3, #0
 80067b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80067b6:	4b4f      	ldr	r3, [pc, #316]	@ (80068f4 <xTaskIncrementTick+0x148>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	f040 8090 	bne.w	80068e0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80067c0:	4b4d      	ldr	r3, [pc, #308]	@ (80068f8 <xTaskIncrementTick+0x14c>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	3301      	adds	r3, #1
 80067c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80067c8:	4a4b      	ldr	r2, [pc, #300]	@ (80068f8 <xTaskIncrementTick+0x14c>)
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d121      	bne.n	8006818 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80067d4:	4b49      	ldr	r3, [pc, #292]	@ (80068fc <xTaskIncrementTick+0x150>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d00b      	beq.n	80067f6 <xTaskIncrementTick+0x4a>
	__asm volatile
 80067de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067e2:	f383 8811 	msr	BASEPRI, r3
 80067e6:	f3bf 8f6f 	isb	sy
 80067ea:	f3bf 8f4f 	dsb	sy
 80067ee:	603b      	str	r3, [r7, #0]
}
 80067f0:	bf00      	nop
 80067f2:	bf00      	nop
 80067f4:	e7fd      	b.n	80067f2 <xTaskIncrementTick+0x46>
 80067f6:	4b41      	ldr	r3, [pc, #260]	@ (80068fc <xTaskIncrementTick+0x150>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	60fb      	str	r3, [r7, #12]
 80067fc:	4b40      	ldr	r3, [pc, #256]	@ (8006900 <xTaskIncrementTick+0x154>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a3e      	ldr	r2, [pc, #248]	@ (80068fc <xTaskIncrementTick+0x150>)
 8006802:	6013      	str	r3, [r2, #0]
 8006804:	4a3e      	ldr	r2, [pc, #248]	@ (8006900 <xTaskIncrementTick+0x154>)
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	6013      	str	r3, [r2, #0]
 800680a:	4b3e      	ldr	r3, [pc, #248]	@ (8006904 <xTaskIncrementTick+0x158>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	3301      	adds	r3, #1
 8006810:	4a3c      	ldr	r2, [pc, #240]	@ (8006904 <xTaskIncrementTick+0x158>)
 8006812:	6013      	str	r3, [r2, #0]
 8006814:	f000 fc18 	bl	8007048 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006818:	4b3b      	ldr	r3, [pc, #236]	@ (8006908 <xTaskIncrementTick+0x15c>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	693a      	ldr	r2, [r7, #16]
 800681e:	429a      	cmp	r2, r3
 8006820:	d349      	bcc.n	80068b6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006822:	4b36      	ldr	r3, [pc, #216]	@ (80068fc <xTaskIncrementTick+0x150>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d104      	bne.n	8006836 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800682c:	4b36      	ldr	r3, [pc, #216]	@ (8006908 <xTaskIncrementTick+0x15c>)
 800682e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006832:	601a      	str	r2, [r3, #0]
					break;
 8006834:	e03f      	b.n	80068b6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006836:	4b31      	ldr	r3, [pc, #196]	@ (80068fc <xTaskIncrementTick+0x150>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	68db      	ldr	r3, [r3, #12]
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006846:	693a      	ldr	r2, [r7, #16]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	429a      	cmp	r2, r3
 800684c:	d203      	bcs.n	8006856 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800684e:	4a2e      	ldr	r2, [pc, #184]	@ (8006908 <xTaskIncrementTick+0x15c>)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006854:	e02f      	b.n	80068b6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	3304      	adds	r3, #4
 800685a:	4618      	mov	r0, r3
 800685c:	f7fe fbf4 	bl	8005048 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006864:	2b00      	cmp	r3, #0
 8006866:	d004      	beq.n	8006872 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	3318      	adds	r3, #24
 800686c:	4618      	mov	r0, r3
 800686e:	f7fe fbeb 	bl	8005048 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006876:	4b25      	ldr	r3, [pc, #148]	@ (800690c <xTaskIncrementTick+0x160>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	429a      	cmp	r2, r3
 800687c:	d903      	bls.n	8006886 <xTaskIncrementTick+0xda>
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006882:	4a22      	ldr	r2, [pc, #136]	@ (800690c <xTaskIncrementTick+0x160>)
 8006884:	6013      	str	r3, [r2, #0]
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800688a:	4613      	mov	r3, r2
 800688c:	009b      	lsls	r3, r3, #2
 800688e:	4413      	add	r3, r2
 8006890:	009b      	lsls	r3, r3, #2
 8006892:	4a1f      	ldr	r2, [pc, #124]	@ (8006910 <xTaskIncrementTick+0x164>)
 8006894:	441a      	add	r2, r3
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	3304      	adds	r3, #4
 800689a:	4619      	mov	r1, r3
 800689c:	4610      	mov	r0, r2
 800689e:	f7fe fb76 	bl	8004f8e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068a6:	4b1b      	ldr	r3, [pc, #108]	@ (8006914 <xTaskIncrementTick+0x168>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068ac:	429a      	cmp	r2, r3
 80068ae:	d3b8      	bcc.n	8006822 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80068b0:	2301      	movs	r3, #1
 80068b2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80068b4:	e7b5      	b.n	8006822 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80068b6:	4b17      	ldr	r3, [pc, #92]	@ (8006914 <xTaskIncrementTick+0x168>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068bc:	4914      	ldr	r1, [pc, #80]	@ (8006910 <xTaskIncrementTick+0x164>)
 80068be:	4613      	mov	r3, r2
 80068c0:	009b      	lsls	r3, r3, #2
 80068c2:	4413      	add	r3, r2
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	440b      	add	r3, r1
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	2b01      	cmp	r3, #1
 80068cc:	d901      	bls.n	80068d2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80068ce:	2301      	movs	r3, #1
 80068d0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80068d2:	4b11      	ldr	r3, [pc, #68]	@ (8006918 <xTaskIncrementTick+0x16c>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d007      	beq.n	80068ea <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80068da:	2301      	movs	r3, #1
 80068dc:	617b      	str	r3, [r7, #20]
 80068de:	e004      	b.n	80068ea <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80068e0:	4b0e      	ldr	r3, [pc, #56]	@ (800691c <xTaskIncrementTick+0x170>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	3301      	adds	r3, #1
 80068e6:	4a0d      	ldr	r2, [pc, #52]	@ (800691c <xTaskIncrementTick+0x170>)
 80068e8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80068ea:	697b      	ldr	r3, [r7, #20]
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3718      	adds	r7, #24
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}
 80068f4:	20000f8c 	.word	0x20000f8c
 80068f8:	20000f68 	.word	0x20000f68
 80068fc:	20000f1c 	.word	0x20000f1c
 8006900:	20000f20 	.word	0x20000f20
 8006904:	20000f7c 	.word	0x20000f7c
 8006908:	20000f84 	.word	0x20000f84
 800690c:	20000f6c 	.word	0x20000f6c
 8006910:	20000a94 	.word	0x20000a94
 8006914:	20000a90 	.word	0x20000a90
 8006918:	20000f78 	.word	0x20000f78
 800691c:	20000f74 	.word	0x20000f74

08006920 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006926:	4b37      	ldr	r3, [pc, #220]	@ (8006a04 <vTaskSwitchContext+0xe4>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d003      	beq.n	8006936 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800692e:	4b36      	ldr	r3, [pc, #216]	@ (8006a08 <vTaskSwitchContext+0xe8>)
 8006930:	2201      	movs	r2, #1
 8006932:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006934:	e062      	b.n	80069fc <vTaskSwitchContext+0xdc>
		xYieldPending = pdFALSE;
 8006936:	4b34      	ldr	r3, [pc, #208]	@ (8006a08 <vTaskSwitchContext+0xe8>)
 8006938:	2200      	movs	r2, #0
 800693a:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800693c:	f7fa fdd2 	bl	80014e4 <getRunTimeCounterValue>
 8006940:	4603      	mov	r3, r0
 8006942:	4a32      	ldr	r2, [pc, #200]	@ (8006a0c <vTaskSwitchContext+0xec>)
 8006944:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8006946:	4b31      	ldr	r3, [pc, #196]	@ (8006a0c <vTaskSwitchContext+0xec>)
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	4b31      	ldr	r3, [pc, #196]	@ (8006a10 <vTaskSwitchContext+0xf0>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	429a      	cmp	r2, r3
 8006950:	d90b      	bls.n	800696a <vTaskSwitchContext+0x4a>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8006952:	4b30      	ldr	r3, [pc, #192]	@ (8006a14 <vTaskSwitchContext+0xf4>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
 800695a:	4a2c      	ldr	r2, [pc, #176]	@ (8006a0c <vTaskSwitchContext+0xec>)
 800695c:	6810      	ldr	r0, [r2, #0]
 800695e:	4a2c      	ldr	r2, [pc, #176]	@ (8006a10 <vTaskSwitchContext+0xf0>)
 8006960:	6812      	ldr	r2, [r2, #0]
 8006962:	1a82      	subs	r2, r0, r2
 8006964:	440a      	add	r2, r1
 8006966:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
			ulTaskSwitchedInTime = ulTotalRunTime;
 800696a:	4b28      	ldr	r3, [pc, #160]	@ (8006a0c <vTaskSwitchContext+0xec>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a28      	ldr	r2, [pc, #160]	@ (8006a10 <vTaskSwitchContext+0xf0>)
 8006970:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006972:	4b29      	ldr	r3, [pc, #164]	@ (8006a18 <vTaskSwitchContext+0xf8>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	60fb      	str	r3, [r7, #12]
 8006978:	e011      	b.n	800699e <vTaskSwitchContext+0x7e>
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d10b      	bne.n	8006998 <vTaskSwitchContext+0x78>
	__asm volatile
 8006980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006984:	f383 8811 	msr	BASEPRI, r3
 8006988:	f3bf 8f6f 	isb	sy
 800698c:	f3bf 8f4f 	dsb	sy
 8006990:	607b      	str	r3, [r7, #4]
}
 8006992:	bf00      	nop
 8006994:	bf00      	nop
 8006996:	e7fd      	b.n	8006994 <vTaskSwitchContext+0x74>
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	3b01      	subs	r3, #1
 800699c:	60fb      	str	r3, [r7, #12]
 800699e:	491f      	ldr	r1, [pc, #124]	@ (8006a1c <vTaskSwitchContext+0xfc>)
 80069a0:	68fa      	ldr	r2, [r7, #12]
 80069a2:	4613      	mov	r3, r2
 80069a4:	009b      	lsls	r3, r3, #2
 80069a6:	4413      	add	r3, r2
 80069a8:	009b      	lsls	r3, r3, #2
 80069aa:	440b      	add	r3, r1
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d0e3      	beq.n	800697a <vTaskSwitchContext+0x5a>
 80069b2:	68fa      	ldr	r2, [r7, #12]
 80069b4:	4613      	mov	r3, r2
 80069b6:	009b      	lsls	r3, r3, #2
 80069b8:	4413      	add	r3, r2
 80069ba:	009b      	lsls	r3, r3, #2
 80069bc:	4a17      	ldr	r2, [pc, #92]	@ (8006a1c <vTaskSwitchContext+0xfc>)
 80069be:	4413      	add	r3, r2
 80069c0:	60bb      	str	r3, [r7, #8]
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	685a      	ldr	r2, [r3, #4]
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	605a      	str	r2, [r3, #4]
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	685a      	ldr	r2, [r3, #4]
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	3308      	adds	r3, #8
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d104      	bne.n	80069e2 <vTaskSwitchContext+0xc2>
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	685a      	ldr	r2, [r3, #4]
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	605a      	str	r2, [r3, #4]
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	68db      	ldr	r3, [r3, #12]
 80069e8:	4a0a      	ldr	r2, [pc, #40]	@ (8006a14 <vTaskSwitchContext+0xf4>)
 80069ea:	6013      	str	r3, [r2, #0]
 80069ec:	4a0a      	ldr	r2, [pc, #40]	@ (8006a18 <vTaskSwitchContext+0xf8>)
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80069f2:	4b08      	ldr	r3, [pc, #32]	@ (8006a14 <vTaskSwitchContext+0xf4>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	3384      	adds	r3, #132	@ 0x84
 80069f8:	4a09      	ldr	r2, [pc, #36]	@ (8006a20 <vTaskSwitchContext+0x100>)
 80069fa:	6013      	str	r3, [r2, #0]
}
 80069fc:	bf00      	nop
 80069fe:	3710      	adds	r7, #16
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}
 8006a04:	20000f8c 	.word	0x20000f8c
 8006a08:	20000f78 	.word	0x20000f78
 8006a0c:	20000f94 	.word	0x20000f94
 8006a10:	20000f90 	.word	0x20000f90
 8006a14:	20000a90 	.word	0x20000a90
 8006a18:	20000f6c 	.word	0x20000f6c
 8006a1c:	20000a94 	.word	0x20000a94
 8006a20:	20000010 	.word	0x20000010

08006a24 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b084      	sub	sp, #16
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d10b      	bne.n	8006a4c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006a34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a38:	f383 8811 	msr	BASEPRI, r3
 8006a3c:	f3bf 8f6f 	isb	sy
 8006a40:	f3bf 8f4f 	dsb	sy
 8006a44:	60fb      	str	r3, [r7, #12]
}
 8006a46:	bf00      	nop
 8006a48:	bf00      	nop
 8006a4a:	e7fd      	b.n	8006a48 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006a4c:	4b07      	ldr	r3, [pc, #28]	@ (8006a6c <vTaskPlaceOnEventList+0x48>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	3318      	adds	r3, #24
 8006a52:	4619      	mov	r1, r3
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f7fe fabe 	bl	8004fd6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006a5a:	2101      	movs	r1, #1
 8006a5c:	6838      	ldr	r0, [r7, #0]
 8006a5e:	f000 fe1f 	bl	80076a0 <prvAddCurrentTaskToDelayedList>
}
 8006a62:	bf00      	nop
 8006a64:	3710      	adds	r7, #16
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}
 8006a6a:	bf00      	nop
 8006a6c:	20000a90 	.word	0x20000a90

08006a70 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b086      	sub	sp, #24
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	60f8      	str	r0, [r7, #12]
 8006a78:	60b9      	str	r1, [r7, #8]
 8006a7a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d10b      	bne.n	8006a9a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006a82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a86:	f383 8811 	msr	BASEPRI, r3
 8006a8a:	f3bf 8f6f 	isb	sy
 8006a8e:	f3bf 8f4f 	dsb	sy
 8006a92:	617b      	str	r3, [r7, #20]
}
 8006a94:	bf00      	nop
 8006a96:	bf00      	nop
 8006a98:	e7fd      	b.n	8006a96 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006a9a:	4b0a      	ldr	r3, [pc, #40]	@ (8006ac4 <vTaskPlaceOnEventListRestricted+0x54>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	3318      	adds	r3, #24
 8006aa0:	4619      	mov	r1, r3
 8006aa2:	68f8      	ldr	r0, [r7, #12]
 8006aa4:	f7fe fa73 	bl	8004f8e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d002      	beq.n	8006ab4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006aae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006ab2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006ab4:	6879      	ldr	r1, [r7, #4]
 8006ab6:	68b8      	ldr	r0, [r7, #8]
 8006ab8:	f000 fdf2 	bl	80076a0 <prvAddCurrentTaskToDelayedList>
	}
 8006abc:	bf00      	nop
 8006abe:	3718      	adds	r7, #24
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}
 8006ac4:	20000a90 	.word	0x20000a90

08006ac8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b086      	sub	sp, #24
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	68db      	ldr	r3, [r3, #12]
 8006ad4:	68db      	ldr	r3, [r3, #12]
 8006ad6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d10b      	bne.n	8006af6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006ade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ae2:	f383 8811 	msr	BASEPRI, r3
 8006ae6:	f3bf 8f6f 	isb	sy
 8006aea:	f3bf 8f4f 	dsb	sy
 8006aee:	60fb      	str	r3, [r7, #12]
}
 8006af0:	bf00      	nop
 8006af2:	bf00      	nop
 8006af4:	e7fd      	b.n	8006af2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	3318      	adds	r3, #24
 8006afa:	4618      	mov	r0, r3
 8006afc:	f7fe faa4 	bl	8005048 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b00:	4b1d      	ldr	r3, [pc, #116]	@ (8006b78 <xTaskRemoveFromEventList+0xb0>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d11d      	bne.n	8006b44 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	3304      	adds	r3, #4
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f7fe fa9b 	bl	8005048 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b16:	4b19      	ldr	r3, [pc, #100]	@ (8006b7c <xTaskRemoveFromEventList+0xb4>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d903      	bls.n	8006b26 <xTaskRemoveFromEventList+0x5e>
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b22:	4a16      	ldr	r2, [pc, #88]	@ (8006b7c <xTaskRemoveFromEventList+0xb4>)
 8006b24:	6013      	str	r3, [r2, #0]
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b2a:	4613      	mov	r3, r2
 8006b2c:	009b      	lsls	r3, r3, #2
 8006b2e:	4413      	add	r3, r2
 8006b30:	009b      	lsls	r3, r3, #2
 8006b32:	4a13      	ldr	r2, [pc, #76]	@ (8006b80 <xTaskRemoveFromEventList+0xb8>)
 8006b34:	441a      	add	r2, r3
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	3304      	adds	r3, #4
 8006b3a:	4619      	mov	r1, r3
 8006b3c:	4610      	mov	r0, r2
 8006b3e:	f7fe fa26 	bl	8004f8e <vListInsertEnd>
 8006b42:	e005      	b.n	8006b50 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	3318      	adds	r3, #24
 8006b48:	4619      	mov	r1, r3
 8006b4a:	480e      	ldr	r0, [pc, #56]	@ (8006b84 <xTaskRemoveFromEventList+0xbc>)
 8006b4c:	f7fe fa1f 	bl	8004f8e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b54:	4b0c      	ldr	r3, [pc, #48]	@ (8006b88 <xTaskRemoveFromEventList+0xc0>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d905      	bls.n	8006b6a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006b62:	4b0a      	ldr	r3, [pc, #40]	@ (8006b8c <xTaskRemoveFromEventList+0xc4>)
 8006b64:	2201      	movs	r2, #1
 8006b66:	601a      	str	r2, [r3, #0]
 8006b68:	e001      	b.n	8006b6e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006b6e:	697b      	ldr	r3, [r7, #20]
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3718      	adds	r7, #24
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}
 8006b78:	20000f8c 	.word	0x20000f8c
 8006b7c:	20000f6c 	.word	0x20000f6c
 8006b80:	20000a94 	.word	0x20000a94
 8006b84:	20000f24 	.word	0x20000f24
 8006b88:	20000a90 	.word	0x20000a90
 8006b8c:	20000f78 	.word	0x20000f78

08006b90 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006b90:	b480      	push	{r7}
 8006b92:	b083      	sub	sp, #12
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006b98:	4b06      	ldr	r3, [pc, #24]	@ (8006bb4 <vTaskInternalSetTimeOutState+0x24>)
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006ba0:	4b05      	ldr	r3, [pc, #20]	@ (8006bb8 <vTaskInternalSetTimeOutState+0x28>)
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	605a      	str	r2, [r3, #4]
}
 8006ba8:	bf00      	nop
 8006baa:	370c      	adds	r7, #12
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr
 8006bb4:	20000f7c 	.word	0x20000f7c
 8006bb8:	20000f68 	.word	0x20000f68

08006bbc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b088      	sub	sp, #32
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d10b      	bne.n	8006be4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006bcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bd0:	f383 8811 	msr	BASEPRI, r3
 8006bd4:	f3bf 8f6f 	isb	sy
 8006bd8:	f3bf 8f4f 	dsb	sy
 8006bdc:	613b      	str	r3, [r7, #16]
}
 8006bde:	bf00      	nop
 8006be0:	bf00      	nop
 8006be2:	e7fd      	b.n	8006be0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d10b      	bne.n	8006c02 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006bea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bee:	f383 8811 	msr	BASEPRI, r3
 8006bf2:	f3bf 8f6f 	isb	sy
 8006bf6:	f3bf 8f4f 	dsb	sy
 8006bfa:	60fb      	str	r3, [r7, #12]
}
 8006bfc:	bf00      	nop
 8006bfe:	bf00      	nop
 8006c00:	e7fd      	b.n	8006bfe <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006c02:	f001 faa9 	bl	8008158 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006c06:	4b1d      	ldr	r3, [pc, #116]	@ (8006c7c <xTaskCheckForTimeOut+0xc0>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	69ba      	ldr	r2, [r7, #24]
 8006c12:	1ad3      	subs	r3, r2, r3
 8006c14:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006c1e:	d102      	bne.n	8006c26 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006c20:	2300      	movs	r3, #0
 8006c22:	61fb      	str	r3, [r7, #28]
 8006c24:	e023      	b.n	8006c6e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	4b15      	ldr	r3, [pc, #84]	@ (8006c80 <xTaskCheckForTimeOut+0xc4>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d007      	beq.n	8006c42 <xTaskCheckForTimeOut+0x86>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	69ba      	ldr	r2, [r7, #24]
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d302      	bcc.n	8006c42 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	61fb      	str	r3, [r7, #28]
 8006c40:	e015      	b.n	8006c6e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	697a      	ldr	r2, [r7, #20]
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d20b      	bcs.n	8006c64 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	681a      	ldr	r2, [r3, #0]
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	1ad2      	subs	r2, r2, r3
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f7ff ff99 	bl	8006b90 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	61fb      	str	r3, [r7, #28]
 8006c62:	e004      	b.n	8006c6e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	2200      	movs	r2, #0
 8006c68:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006c6e:	f001 faa5 	bl	80081bc <vPortExitCritical>

	return xReturn;
 8006c72:	69fb      	ldr	r3, [r7, #28]
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3720      	adds	r7, #32
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}
 8006c7c:	20000f68 	.word	0x20000f68
 8006c80:	20000f7c 	.word	0x20000f7c

08006c84 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006c84:	b480      	push	{r7}
 8006c86:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006c88:	4b03      	ldr	r3, [pc, #12]	@ (8006c98 <vTaskMissedYield+0x14>)
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	601a      	str	r2, [r3, #0]
}
 8006c8e:	bf00      	nop
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr
 8006c98:	20000f78 	.word	0x20000f78

08006c9c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b082      	sub	sp, #8
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006ca4:	f000 f896 	bl	8006dd4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006ca8:	4b06      	ldr	r3, [pc, #24]	@ (8006cc4 <prvIdleTask+0x28>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	d9f9      	bls.n	8006ca4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006cb0:	4b05      	ldr	r3, [pc, #20]	@ (8006cc8 <prvIdleTask+0x2c>)
 8006cb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006cb6:	601a      	str	r2, [r3, #0]
 8006cb8:	f3bf 8f4f 	dsb	sy
 8006cbc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006cc0:	e7f0      	b.n	8006ca4 <prvIdleTask+0x8>
 8006cc2:	bf00      	nop
 8006cc4:	20000a94 	.word	0x20000a94
 8006cc8:	e000ed04 	.word	0xe000ed04

08006ccc <vTaskSetThreadLocalStoragePointer>:
/*-----------------------------------------------------------*/

#if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )

	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue )
	{
 8006ccc:	b480      	push	{r7}
 8006cce:	b087      	sub	sp, #28
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	60f8      	str	r0, [r7, #12]
 8006cd4:	60b9      	str	r1, [r7, #8]
 8006cd6:	607a      	str	r2, [r7, #4]
	TCB_t *pxTCB;

		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	2b09      	cmp	r3, #9
 8006cdc:	dc0d      	bgt.n	8006cfa <vTaskSetThreadLocalStoragePointer+0x2e>
		{
			pxTCB = prvGetTCBFromHandle( xTaskToSet );
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d102      	bne.n	8006cea <vTaskSetThreadLocalStoragePointer+0x1e>
 8006ce4:	4b08      	ldr	r3, [pc, #32]	@ (8006d08 <vTaskSetThreadLocalStoragePointer+0x3c>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	e000      	b.n	8006cec <vTaskSetThreadLocalStoragePointer+0x20>
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	617b      	str	r3, [r7, #20]
			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	68ba      	ldr	r2, [r7, #8]
 8006cf2:	3216      	adds	r2, #22
 8006cf4:	6879      	ldr	r1, [r7, #4]
 8006cf6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		}
	}
 8006cfa:	bf00      	nop
 8006cfc:	371c      	adds	r7, #28
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr
 8006d06:	bf00      	nop
 8006d08:	20000a90 	.word	0x20000a90

08006d0c <pvTaskGetThreadLocalStoragePointer>:
/*-----------------------------------------------------------*/

#if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )

	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
	{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b085      	sub	sp, #20
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	6039      	str	r1, [r7, #0]
	void *pvReturn = NULL;
 8006d16:	2300      	movs	r3, #0
 8006d18:	60fb      	str	r3, [r7, #12]
	TCB_t *pxTCB;

		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	2b09      	cmp	r3, #9
 8006d1e:	dc0e      	bgt.n	8006d3e <pvTaskGetThreadLocalStoragePointer+0x32>
		{
			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d102      	bne.n	8006d2c <pvTaskGetThreadLocalStoragePointer+0x20>
 8006d26:	4b0a      	ldr	r3, [pc, #40]	@ (8006d50 <pvTaskGetThreadLocalStoragePointer+0x44>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	e000      	b.n	8006d2e <pvTaskGetThreadLocalStoragePointer+0x22>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	60bb      	str	r3, [r7, #8]
			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	683a      	ldr	r2, [r7, #0]
 8006d34:	3216      	adds	r2, #22
 8006d36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d3a:	60fb      	str	r3, [r7, #12]
 8006d3c:	e001      	b.n	8006d42 <pvTaskGetThreadLocalStoragePointer+0x36>
		}
		else
		{
			pvReturn = NULL;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	60fb      	str	r3, [r7, #12]
		}

		return pvReturn;
 8006d42:	68fb      	ldr	r3, [r7, #12]
	}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3714      	adds	r7, #20
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr
 8006d50:	20000a90 	.word	0x20000a90

08006d54 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b082      	sub	sp, #8
 8006d58:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	607b      	str	r3, [r7, #4]
 8006d5e:	e00c      	b.n	8006d7a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	4613      	mov	r3, r2
 8006d64:	009b      	lsls	r3, r3, #2
 8006d66:	4413      	add	r3, r2
 8006d68:	009b      	lsls	r3, r3, #2
 8006d6a:	4a12      	ldr	r2, [pc, #72]	@ (8006db4 <prvInitialiseTaskLists+0x60>)
 8006d6c:	4413      	add	r3, r2
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f7fe f8e0 	bl	8004f34 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	3301      	adds	r3, #1
 8006d78:	607b      	str	r3, [r7, #4]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2b37      	cmp	r3, #55	@ 0x37
 8006d7e:	d9ef      	bls.n	8006d60 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006d80:	480d      	ldr	r0, [pc, #52]	@ (8006db8 <prvInitialiseTaskLists+0x64>)
 8006d82:	f7fe f8d7 	bl	8004f34 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006d86:	480d      	ldr	r0, [pc, #52]	@ (8006dbc <prvInitialiseTaskLists+0x68>)
 8006d88:	f7fe f8d4 	bl	8004f34 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006d8c:	480c      	ldr	r0, [pc, #48]	@ (8006dc0 <prvInitialiseTaskLists+0x6c>)
 8006d8e:	f7fe f8d1 	bl	8004f34 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006d92:	480c      	ldr	r0, [pc, #48]	@ (8006dc4 <prvInitialiseTaskLists+0x70>)
 8006d94:	f7fe f8ce 	bl	8004f34 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006d98:	480b      	ldr	r0, [pc, #44]	@ (8006dc8 <prvInitialiseTaskLists+0x74>)
 8006d9a:	f7fe f8cb 	bl	8004f34 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006d9e:	4b0b      	ldr	r3, [pc, #44]	@ (8006dcc <prvInitialiseTaskLists+0x78>)
 8006da0:	4a05      	ldr	r2, [pc, #20]	@ (8006db8 <prvInitialiseTaskLists+0x64>)
 8006da2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006da4:	4b0a      	ldr	r3, [pc, #40]	@ (8006dd0 <prvInitialiseTaskLists+0x7c>)
 8006da6:	4a05      	ldr	r2, [pc, #20]	@ (8006dbc <prvInitialiseTaskLists+0x68>)
 8006da8:	601a      	str	r2, [r3, #0]
}
 8006daa:	bf00      	nop
 8006dac:	3708      	adds	r7, #8
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
 8006db2:	bf00      	nop
 8006db4:	20000a94 	.word	0x20000a94
 8006db8:	20000ef4 	.word	0x20000ef4
 8006dbc:	20000f08 	.word	0x20000f08
 8006dc0:	20000f24 	.word	0x20000f24
 8006dc4:	20000f38 	.word	0x20000f38
 8006dc8:	20000f50 	.word	0x20000f50
 8006dcc:	20000f1c 	.word	0x20000f1c
 8006dd0:	20000f20 	.word	0x20000f20

08006dd4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b082      	sub	sp, #8
 8006dd8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006dda:	e019      	b.n	8006e10 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006ddc:	f001 f9bc 	bl	8008158 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006de0:	4b10      	ldr	r3, [pc, #64]	@ (8006e24 <prvCheckTasksWaitingTermination+0x50>)
 8006de2:	68db      	ldr	r3, [r3, #12]
 8006de4:	68db      	ldr	r3, [r3, #12]
 8006de6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	3304      	adds	r3, #4
 8006dec:	4618      	mov	r0, r3
 8006dee:	f7fe f92b 	bl	8005048 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006df2:	4b0d      	ldr	r3, [pc, #52]	@ (8006e28 <prvCheckTasksWaitingTermination+0x54>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	3b01      	subs	r3, #1
 8006df8:	4a0b      	ldr	r2, [pc, #44]	@ (8006e28 <prvCheckTasksWaitingTermination+0x54>)
 8006dfa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8006e2c <prvCheckTasksWaitingTermination+0x58>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	3b01      	subs	r3, #1
 8006e02:	4a0a      	ldr	r2, [pc, #40]	@ (8006e2c <prvCheckTasksWaitingTermination+0x58>)
 8006e04:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006e06:	f001 f9d9 	bl	80081bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 f8e6 	bl	8006fdc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e10:	4b06      	ldr	r3, [pc, #24]	@ (8006e2c <prvCheckTasksWaitingTermination+0x58>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d1e1      	bne.n	8006ddc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006e18:	bf00      	nop
 8006e1a:	bf00      	nop
 8006e1c:	3708      	adds	r7, #8
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}
 8006e22:	bf00      	nop
 8006e24:	20000f38 	.word	0x20000f38
 8006e28:	20000f64 	.word	0x20000f64
 8006e2c:	20000f4c 	.word	0x20000f4c

08006e30 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b086      	sub	sp, #24
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	60f8      	str	r0, [r7, #12]
 8006e38:	60b9      	str	r1, [r7, #8]
 8006e3a:	607a      	str	r2, [r7, #4]
 8006e3c:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d102      	bne.n	8006e4a <vTaskGetInfo+0x1a>
 8006e44:	4b2d      	ldr	r3, [pc, #180]	@ (8006efc <vTaskGetInfo+0xcc>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	e000      	b.n	8006e4c <vTaskGetInfo+0x1c>
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	697a      	ldr	r2, [r7, #20]
 8006e52:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	615a      	str	r2, [r3, #20]
		}
		#endif

		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 8006e88:	78fb      	ldrb	r3, [r7, #3]
 8006e8a:	2b05      	cmp	r3, #5
 8006e8c:	d01a      	beq.n	8006ec4 <vTaskGetInfo+0x94>
		{
			if( pxTCB == pxCurrentTCB )
 8006e8e:	4b1b      	ldr	r3, [pc, #108]	@ (8006efc <vTaskGetInfo+0xcc>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	697a      	ldr	r2, [r7, #20]
 8006e94:	429a      	cmp	r2, r3
 8006e96:	d103      	bne.n	8006ea0 <vTaskGetInfo+0x70>
			{
				pxTaskStatus->eCurrentState = eRunning;
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	731a      	strb	r2, [r3, #12]
 8006e9e:	e018      	b.n	8006ed2 <vTaskGetInfo+0xa2>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	78fa      	ldrb	r2, [r7, #3]
 8006ea4:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 8006ea6:	78fb      	ldrb	r3, [r7, #3]
 8006ea8:	2b03      	cmp	r3, #3
 8006eaa:	d112      	bne.n	8006ed2 <vTaskGetInfo+0xa2>
					{
						vTaskSuspendAll();
 8006eac:	f7ff fb32 	bl	8006514 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d002      	beq.n	8006ebe <vTaskGetInfo+0x8e>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	2202      	movs	r2, #2
 8006ebc:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 8006ebe:	f7ff fb37 	bl	8006530 <xTaskResumeAll>
 8006ec2:	e006      	b.n	8006ed2 <vTaskGetInfo+0xa2>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 8006ec4:	6978      	ldr	r0, [r7, #20]
 8006ec6:	f7ff f9ad 	bl	8006224 <eTaskGetState>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	461a      	mov	r2, r3
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d009      	beq.n	8006eec <vTaskGetInfo+0xbc>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006edc:	4618      	mov	r0, r3
 8006ede:	f000 f861 	bl	8006fa4 <prvTaskCheckFreeStackSpace>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	461a      	mov	r2, r3
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 8006eea:	e002      	b.n	8006ef2 <vTaskGetInfo+0xc2>
			pxTaskStatus->usStackHighWaterMark = 0;
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	841a      	strh	r2, [r3, #32]
	}
 8006ef2:	bf00      	nop
 8006ef4:	3718      	adds	r7, #24
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}
 8006efa:	bf00      	nop
 8006efc:	20000a90 	.word	0x20000a90

08006f00 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b08a      	sub	sp, #40	@ 0x28
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	60f8      	str	r0, [r7, #12]
 8006f08:	60b9      	str	r1, [r7, #8]
 8006f0a:	4613      	mov	r3, r2
 8006f0c:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	627b      	str	r3, [r7, #36]	@ 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d03f      	beq.n	8006f9a <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	623b      	str	r3, [r7, #32]
 8006f1e:	6a3b      	ldr	r3, [r7, #32]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	685a      	ldr	r2, [r3, #4]
 8006f24:	6a3b      	ldr	r3, [r7, #32]
 8006f26:	605a      	str	r2, [r3, #4]
 8006f28:	6a3b      	ldr	r3, [r7, #32]
 8006f2a:	685a      	ldr	r2, [r3, #4]
 8006f2c:	6a3b      	ldr	r3, [r7, #32]
 8006f2e:	3308      	adds	r3, #8
 8006f30:	429a      	cmp	r2, r3
 8006f32:	d104      	bne.n	8006f3e <prvListTasksWithinSingleList+0x3e>
 8006f34:	6a3b      	ldr	r3, [r7, #32]
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	685a      	ldr	r2, [r3, #4]
 8006f3a:	6a3b      	ldr	r3, [r7, #32]
 8006f3c:	605a      	str	r2, [r3, #4]
 8006f3e:	6a3b      	ldr	r3, [r7, #32]
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	68db      	ldr	r3, [r3, #12]
 8006f44:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	61bb      	str	r3, [r7, #24]
 8006f4a:	69bb      	ldr	r3, [r7, #24]
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	685a      	ldr	r2, [r3, #4]
 8006f50:	69bb      	ldr	r3, [r7, #24]
 8006f52:	605a      	str	r2, [r3, #4]
 8006f54:	69bb      	ldr	r3, [r7, #24]
 8006f56:	685a      	ldr	r2, [r3, #4]
 8006f58:	69bb      	ldr	r3, [r7, #24]
 8006f5a:	3308      	adds	r3, #8
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d104      	bne.n	8006f6a <prvListTasksWithinSingleList+0x6a>
 8006f60:	69bb      	ldr	r3, [r7, #24]
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	685a      	ldr	r2, [r3, #4]
 8006f66:	69bb      	ldr	r3, [r7, #24]
 8006f68:	605a      	str	r2, [r3, #4]
 8006f6a:	69bb      	ldr	r3, [r7, #24]
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	68db      	ldr	r3, [r3, #12]
 8006f70:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 8006f72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f74:	4613      	mov	r3, r2
 8006f76:	00db      	lsls	r3, r3, #3
 8006f78:	4413      	add	r3, r2
 8006f7a:	009b      	lsls	r3, r3, #2
 8006f7c:	461a      	mov	r2, r3
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	1899      	adds	r1, r3, r2
 8006f82:	79fb      	ldrb	r3, [r7, #7]
 8006f84:	2201      	movs	r2, #1
 8006f86:	6978      	ldr	r0, [r7, #20]
 8006f88:	f7ff ff52 	bl	8006e30 <vTaskGetInfo>
				uxTask++;
 8006f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f8e:	3301      	adds	r3, #1
 8006f90:	627b      	str	r3, [r7, #36]	@ 0x24
			} while( pxNextTCB != pxFirstTCB );
 8006f92:	697a      	ldr	r2, [r7, #20]
 8006f94:	69fb      	ldr	r3, [r7, #28]
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d1d5      	bne.n	8006f46 <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 8006f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3728      	adds	r7, #40	@ 0x28
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b085      	sub	sp, #20
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8006fac:	2300      	movs	r3, #0
 8006fae:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8006fb0:	e005      	b.n	8006fbe <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	3301      	adds	r3, #1
 8006fb6:	607b      	str	r3, [r7, #4]
			ulCount++;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	3301      	adds	r3, #1
 8006fbc:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	781b      	ldrb	r3, [r3, #0]
 8006fc2:	2ba5      	cmp	r3, #165	@ 0xa5
 8006fc4:	d0f5      	beq.n	8006fb2 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	089b      	lsrs	r3, r3, #2
 8006fca:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	b29b      	uxth	r3, r3
	}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3714      	adds	r7, #20
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr

08006fdc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b084      	sub	sp, #16
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	3384      	adds	r3, #132	@ 0x84
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f001 fdaf 	bl	8008b4c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d108      	bne.n	800700a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f001 fa9b 	bl	8008538 <vPortFree>
				vPortFree( pxTCB );
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f001 fa98 	bl	8008538 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007008:	e019      	b.n	800703e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 8007010:	2b01      	cmp	r3, #1
 8007012:	d103      	bne.n	800701c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f001 fa8f 	bl	8008538 <vPortFree>
	}
 800701a:	e010      	b.n	800703e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 8007022:	2b02      	cmp	r3, #2
 8007024:	d00b      	beq.n	800703e <prvDeleteTCB+0x62>
	__asm volatile
 8007026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800702a:	f383 8811 	msr	BASEPRI, r3
 800702e:	f3bf 8f6f 	isb	sy
 8007032:	f3bf 8f4f 	dsb	sy
 8007036:	60fb      	str	r3, [r7, #12]
}
 8007038:	bf00      	nop
 800703a:	bf00      	nop
 800703c:	e7fd      	b.n	800703a <prvDeleteTCB+0x5e>
	}
 800703e:	bf00      	nop
 8007040:	3710      	adds	r7, #16
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}
	...

08007048 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007048:	b480      	push	{r7}
 800704a:	b083      	sub	sp, #12
 800704c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800704e:	4b0c      	ldr	r3, [pc, #48]	@ (8007080 <prvResetNextTaskUnblockTime+0x38>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d104      	bne.n	8007062 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007058:	4b0a      	ldr	r3, [pc, #40]	@ (8007084 <prvResetNextTaskUnblockTime+0x3c>)
 800705a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800705e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007060:	e008      	b.n	8007074 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007062:	4b07      	ldr	r3, [pc, #28]	@ (8007080 <prvResetNextTaskUnblockTime+0x38>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	68db      	ldr	r3, [r3, #12]
 8007068:	68db      	ldr	r3, [r3, #12]
 800706a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	4a04      	ldr	r2, [pc, #16]	@ (8007084 <prvResetNextTaskUnblockTime+0x3c>)
 8007072:	6013      	str	r3, [r2, #0]
}
 8007074:	bf00      	nop
 8007076:	370c      	adds	r7, #12
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr
 8007080:	20000f1c 	.word	0x20000f1c
 8007084:	20000f84 	.word	0x20000f84

08007088 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007088:	b480      	push	{r7}
 800708a:	b083      	sub	sp, #12
 800708c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800708e:	4b05      	ldr	r3, [pc, #20]	@ (80070a4 <xTaskGetCurrentTaskHandle+0x1c>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	607b      	str	r3, [r7, #4]

		return xReturn;
 8007094:	687b      	ldr	r3, [r7, #4]
	}
 8007096:	4618      	mov	r0, r3
 8007098:	370c      	adds	r7, #12
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr
 80070a2:	bf00      	nop
 80070a4:	20000a90 	.word	0x20000a90

080070a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80070a8:	b480      	push	{r7}
 80070aa:	b083      	sub	sp, #12
 80070ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80070ae:	4b0b      	ldr	r3, [pc, #44]	@ (80070dc <xTaskGetSchedulerState+0x34>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d102      	bne.n	80070bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80070b6:	2301      	movs	r3, #1
 80070b8:	607b      	str	r3, [r7, #4]
 80070ba:	e008      	b.n	80070ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070bc:	4b08      	ldr	r3, [pc, #32]	@ (80070e0 <xTaskGetSchedulerState+0x38>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d102      	bne.n	80070ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80070c4:	2302      	movs	r3, #2
 80070c6:	607b      	str	r3, [r7, #4]
 80070c8:	e001      	b.n	80070ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80070ca:	2300      	movs	r3, #0
 80070cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80070ce:	687b      	ldr	r3, [r7, #4]
	}
 80070d0:	4618      	mov	r0, r3
 80070d2:	370c      	adds	r7, #12
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr
 80070dc:	20000f70 	.word	0x20000f70
 80070e0:	20000f8c 	.word	0x20000f8c

080070e4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b084      	sub	sp, #16
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80070f0:	2300      	movs	r3, #0
 80070f2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d051      	beq.n	800719e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070fe:	4b2a      	ldr	r3, [pc, #168]	@ (80071a8 <xTaskPriorityInherit+0xc4>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007104:	429a      	cmp	r2, r3
 8007106:	d241      	bcs.n	800718c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	699b      	ldr	r3, [r3, #24]
 800710c:	2b00      	cmp	r3, #0
 800710e:	db06      	blt.n	800711e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007110:	4b25      	ldr	r3, [pc, #148]	@ (80071a8 <xTaskPriorityInherit+0xc4>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007116:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	6959      	ldr	r1, [r3, #20]
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007126:	4613      	mov	r3, r2
 8007128:	009b      	lsls	r3, r3, #2
 800712a:	4413      	add	r3, r2
 800712c:	009b      	lsls	r3, r3, #2
 800712e:	4a1f      	ldr	r2, [pc, #124]	@ (80071ac <xTaskPriorityInherit+0xc8>)
 8007130:	4413      	add	r3, r2
 8007132:	4299      	cmp	r1, r3
 8007134:	d122      	bne.n	800717c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	3304      	adds	r3, #4
 800713a:	4618      	mov	r0, r3
 800713c:	f7fd ff84 	bl	8005048 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007140:	4b19      	ldr	r3, [pc, #100]	@ (80071a8 <xTaskPriorityInherit+0xc4>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800714e:	4b18      	ldr	r3, [pc, #96]	@ (80071b0 <xTaskPriorityInherit+0xcc>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	429a      	cmp	r2, r3
 8007154:	d903      	bls.n	800715e <xTaskPriorityInherit+0x7a>
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800715a:	4a15      	ldr	r2, [pc, #84]	@ (80071b0 <xTaskPriorityInherit+0xcc>)
 800715c:	6013      	str	r3, [r2, #0]
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007162:	4613      	mov	r3, r2
 8007164:	009b      	lsls	r3, r3, #2
 8007166:	4413      	add	r3, r2
 8007168:	009b      	lsls	r3, r3, #2
 800716a:	4a10      	ldr	r2, [pc, #64]	@ (80071ac <xTaskPriorityInherit+0xc8>)
 800716c:	441a      	add	r2, r3
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	3304      	adds	r3, #4
 8007172:	4619      	mov	r1, r3
 8007174:	4610      	mov	r0, r2
 8007176:	f7fd ff0a 	bl	8004f8e <vListInsertEnd>
 800717a:	e004      	b.n	8007186 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800717c:	4b0a      	ldr	r3, [pc, #40]	@ (80071a8 <xTaskPriorityInherit+0xc4>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007186:	2301      	movs	r3, #1
 8007188:	60fb      	str	r3, [r7, #12]
 800718a:	e008      	b.n	800719e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007190:	4b05      	ldr	r3, [pc, #20]	@ (80071a8 <xTaskPriorityInherit+0xc4>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007196:	429a      	cmp	r2, r3
 8007198:	d201      	bcs.n	800719e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800719a:	2301      	movs	r3, #1
 800719c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800719e:	68fb      	ldr	r3, [r7, #12]
	}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3710      	adds	r7, #16
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}
 80071a8:	20000a90 	.word	0x20000a90
 80071ac:	20000a94 	.word	0x20000a94
 80071b0:	20000f6c 	.word	0x20000f6c

080071b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b086      	sub	sp, #24
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80071c0:	2300      	movs	r3, #0
 80071c2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d058      	beq.n	800727c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80071ca:	4b2f      	ldr	r3, [pc, #188]	@ (8007288 <xTaskPriorityDisinherit+0xd4>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	693a      	ldr	r2, [r7, #16]
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d00b      	beq.n	80071ec <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80071d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071d8:	f383 8811 	msr	BASEPRI, r3
 80071dc:	f3bf 8f6f 	isb	sy
 80071e0:	f3bf 8f4f 	dsb	sy
 80071e4:	60fb      	str	r3, [r7, #12]
}
 80071e6:	bf00      	nop
 80071e8:	bf00      	nop
 80071ea:	e7fd      	b.n	80071e8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d10b      	bne.n	800720c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80071f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071f8:	f383 8811 	msr	BASEPRI, r3
 80071fc:	f3bf 8f6f 	isb	sy
 8007200:	f3bf 8f4f 	dsb	sy
 8007204:	60bb      	str	r3, [r7, #8]
}
 8007206:	bf00      	nop
 8007208:	bf00      	nop
 800720a:	e7fd      	b.n	8007208 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007210:	1e5a      	subs	r2, r3, #1
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	655a      	str	r2, [r3, #84]	@ 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800721e:	429a      	cmp	r2, r3
 8007220:	d02c      	beq.n	800727c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007226:	2b00      	cmp	r3, #0
 8007228:	d128      	bne.n	800727c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	3304      	adds	r3, #4
 800722e:	4618      	mov	r0, r3
 8007230:	f7fd ff0a 	bl	8005048 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007240:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800724c:	4b0f      	ldr	r3, [pc, #60]	@ (800728c <xTaskPriorityDisinherit+0xd8>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	429a      	cmp	r2, r3
 8007252:	d903      	bls.n	800725c <xTaskPriorityDisinherit+0xa8>
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007258:	4a0c      	ldr	r2, [pc, #48]	@ (800728c <xTaskPriorityDisinherit+0xd8>)
 800725a:	6013      	str	r3, [r2, #0]
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007260:	4613      	mov	r3, r2
 8007262:	009b      	lsls	r3, r3, #2
 8007264:	4413      	add	r3, r2
 8007266:	009b      	lsls	r3, r3, #2
 8007268:	4a09      	ldr	r2, [pc, #36]	@ (8007290 <xTaskPriorityDisinherit+0xdc>)
 800726a:	441a      	add	r2, r3
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	3304      	adds	r3, #4
 8007270:	4619      	mov	r1, r3
 8007272:	4610      	mov	r0, r2
 8007274:	f7fd fe8b 	bl	8004f8e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007278:	2301      	movs	r3, #1
 800727a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800727c:	697b      	ldr	r3, [r7, #20]
	}
 800727e:	4618      	mov	r0, r3
 8007280:	3718      	adds	r7, #24
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}
 8007286:	bf00      	nop
 8007288:	20000a90 	.word	0x20000a90
 800728c:	20000f6c 	.word	0x20000f6c
 8007290:	20000a94 	.word	0x20000a94

08007294 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007294:	b580      	push	{r7, lr}
 8007296:	b088      	sub	sp, #32
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80072a2:	2301      	movs	r3, #1
 80072a4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d06c      	beq.n	8007386 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80072ac:	69bb      	ldr	r3, [r7, #24]
 80072ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d10b      	bne.n	80072cc <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80072b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072b8:	f383 8811 	msr	BASEPRI, r3
 80072bc:	f3bf 8f6f 	isb	sy
 80072c0:	f3bf 8f4f 	dsb	sy
 80072c4:	60fb      	str	r3, [r7, #12]
}
 80072c6:	bf00      	nop
 80072c8:	bf00      	nop
 80072ca:	e7fd      	b.n	80072c8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80072cc:	69bb      	ldr	r3, [r7, #24]
 80072ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072d0:	683a      	ldr	r2, [r7, #0]
 80072d2:	429a      	cmp	r2, r3
 80072d4:	d902      	bls.n	80072dc <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	61fb      	str	r3, [r7, #28]
 80072da:	e002      	b.n	80072e2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80072dc:	69bb      	ldr	r3, [r7, #24]
 80072de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072e0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80072e2:	69bb      	ldr	r3, [r7, #24]
 80072e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072e6:	69fa      	ldr	r2, [r7, #28]
 80072e8:	429a      	cmp	r2, r3
 80072ea:	d04c      	beq.n	8007386 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80072ec:	69bb      	ldr	r3, [r7, #24]
 80072ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072f0:	697a      	ldr	r2, [r7, #20]
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d147      	bne.n	8007386 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80072f6:	4b26      	ldr	r3, [pc, #152]	@ (8007390 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	69ba      	ldr	r2, [r7, #24]
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d10b      	bne.n	8007318 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8007300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007304:	f383 8811 	msr	BASEPRI, r3
 8007308:	f3bf 8f6f 	isb	sy
 800730c:	f3bf 8f4f 	dsb	sy
 8007310:	60bb      	str	r3, [r7, #8]
}
 8007312:	bf00      	nop
 8007314:	bf00      	nop
 8007316:	e7fd      	b.n	8007314 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007318:	69bb      	ldr	r3, [r7, #24]
 800731a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800731c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800731e:	69bb      	ldr	r3, [r7, #24]
 8007320:	69fa      	ldr	r2, [r7, #28]
 8007322:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007324:	69bb      	ldr	r3, [r7, #24]
 8007326:	699b      	ldr	r3, [r3, #24]
 8007328:	2b00      	cmp	r3, #0
 800732a:	db04      	blt.n	8007336 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800732c:	69fb      	ldr	r3, [r7, #28]
 800732e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007332:	69bb      	ldr	r3, [r7, #24]
 8007334:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007336:	69bb      	ldr	r3, [r7, #24]
 8007338:	6959      	ldr	r1, [r3, #20]
 800733a:	693a      	ldr	r2, [r7, #16]
 800733c:	4613      	mov	r3, r2
 800733e:	009b      	lsls	r3, r3, #2
 8007340:	4413      	add	r3, r2
 8007342:	009b      	lsls	r3, r3, #2
 8007344:	4a13      	ldr	r2, [pc, #76]	@ (8007394 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007346:	4413      	add	r3, r2
 8007348:	4299      	cmp	r1, r3
 800734a:	d11c      	bne.n	8007386 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800734c:	69bb      	ldr	r3, [r7, #24]
 800734e:	3304      	adds	r3, #4
 8007350:	4618      	mov	r0, r3
 8007352:	f7fd fe79 	bl	8005048 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007356:	69bb      	ldr	r3, [r7, #24]
 8007358:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800735a:	4b0f      	ldr	r3, [pc, #60]	@ (8007398 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	429a      	cmp	r2, r3
 8007360:	d903      	bls.n	800736a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8007362:	69bb      	ldr	r3, [r7, #24]
 8007364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007366:	4a0c      	ldr	r2, [pc, #48]	@ (8007398 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007368:	6013      	str	r3, [r2, #0]
 800736a:	69bb      	ldr	r3, [r7, #24]
 800736c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800736e:	4613      	mov	r3, r2
 8007370:	009b      	lsls	r3, r3, #2
 8007372:	4413      	add	r3, r2
 8007374:	009b      	lsls	r3, r3, #2
 8007376:	4a07      	ldr	r2, [pc, #28]	@ (8007394 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007378:	441a      	add	r2, r3
 800737a:	69bb      	ldr	r3, [r7, #24]
 800737c:	3304      	adds	r3, #4
 800737e:	4619      	mov	r1, r3
 8007380:	4610      	mov	r0, r2
 8007382:	f7fd fe04 	bl	8004f8e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007386:	bf00      	nop
 8007388:	3720      	adds	r7, #32
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}
 800738e:	bf00      	nop
 8007390:	20000a90 	.word	0x20000a90
 8007394:	20000a94 	.word	0x20000a94
 8007398:	20000f6c 	.word	0x20000f6c

0800739c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800739c:	b480      	push	{r7}
 800739e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80073a0:	4b07      	ldr	r3, [pc, #28]	@ (80073c0 <pvTaskIncrementMutexHeldCount+0x24>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d004      	beq.n	80073b2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80073a8:	4b05      	ldr	r3, [pc, #20]	@ (80073c0 <pvTaskIncrementMutexHeldCount+0x24>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80073ae:	3201      	adds	r2, #1
 80073b0:	655a      	str	r2, [r3, #84]	@ 0x54
		}

		return pxCurrentTCB;
 80073b2:	4b03      	ldr	r3, [pc, #12]	@ (80073c0 <pvTaskIncrementMutexHeldCount+0x24>)
 80073b4:	681b      	ldr	r3, [r3, #0]
	}
 80073b6:	4618      	mov	r0, r3
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr
 80073c0:	20000a90 	.word	0x20000a90

080073c4 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b084      	sub	sp, #16
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 80073ce:	f000 fec3 	bl	8008158 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80073d2:	4b20      	ldr	r3, [pc, #128]	@ (8007454 <ulTaskNotifyTake+0x90>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d113      	bne.n	8007406 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80073de:	4b1d      	ldr	r3, [pc, #116]	@ (8007454 <ulTaskNotifyTake+0x90>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	2201      	movs	r2, #1
 80073e4:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4

				if( xTicksToWait > ( TickType_t ) 0 )
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d00b      	beq.n	8007406 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80073ee:	2101      	movs	r1, #1
 80073f0:	6838      	ldr	r0, [r7, #0]
 80073f2:	f000 f955 	bl	80076a0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80073f6:	4b18      	ldr	r3, [pc, #96]	@ (8007458 <ulTaskNotifyTake+0x94>)
 80073f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073fc:	601a      	str	r2, [r3, #0]
 80073fe:	f3bf 8f4f 	dsb	sy
 8007402:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007406:	f000 fed9 	bl	80081bc <vPortExitCritical>

		taskENTER_CRITICAL();
 800740a:	f000 fea5 	bl	8008158 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800740e:	4b11      	ldr	r3, [pc, #68]	@ (8007454 <ulTaskNotifyTake+0x90>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8007416:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d00e      	beq.n	800743c <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d005      	beq.n	8007430 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8007424:	4b0b      	ldr	r3, [pc, #44]	@ (8007454 <ulTaskNotifyTake+0x90>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	2200      	movs	r2, #0
 800742a:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 800742e:	e005      	b.n	800743c <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8007430:	4b08      	ldr	r3, [pc, #32]	@ (8007454 <ulTaskNotifyTake+0x90>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	68fa      	ldr	r2, [r7, #12]
 8007436:	3a01      	subs	r2, #1
 8007438:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800743c:	4b05      	ldr	r3, [pc, #20]	@ (8007454 <ulTaskNotifyTake+0x90>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	2200      	movs	r2, #0
 8007442:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4
		}
		taskEXIT_CRITICAL();
 8007446:	f000 feb9 	bl	80081bc <vPortExitCritical>

		return ulReturn;
 800744a:	68fb      	ldr	r3, [r7, #12]
	}
 800744c:	4618      	mov	r0, r3
 800744e:	3710      	adds	r7, #16
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}
 8007454:	20000a90 	.word	0x20000a90
 8007458:	e000ed04 	.word	0xe000ed04

0800745c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800745c:	b580      	push	{r7, lr}
 800745e:	b086      	sub	sp, #24
 8007460:	af00      	add	r7, sp, #0
 8007462:	60f8      	str	r0, [r7, #12]
 8007464:	60b9      	str	r1, [r7, #8]
 8007466:	607a      	str	r2, [r7, #4]
 8007468:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800746a:	f000 fe75 	bl	8008158 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800746e:	4b29      	ldr	r3, [pc, #164]	@ (8007514 <xTaskNotifyWait+0xb8>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f893 30d4 	ldrb.w	r3, [r3, #212]	@ 0xd4
 8007476:	b2db      	uxtb	r3, r3
 8007478:	2b02      	cmp	r3, #2
 800747a:	d01c      	beq.n	80074b6 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800747c:	4b25      	ldr	r3, [pc, #148]	@ (8007514 <xTaskNotifyWait+0xb8>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f8d3 10d0 	ldr.w	r1, [r3, #208]	@ 0xd0
 8007484:	68fa      	ldr	r2, [r7, #12]
 8007486:	43d2      	mvns	r2, r2
 8007488:	400a      	ands	r2, r1
 800748a:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800748e:	4b21      	ldr	r3, [pc, #132]	@ (8007514 <xTaskNotifyWait+0xb8>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	2201      	movs	r2, #1
 8007494:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4

				if( xTicksToWait > ( TickType_t ) 0 )
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d00b      	beq.n	80074b6 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800749e:	2101      	movs	r1, #1
 80074a0:	6838      	ldr	r0, [r7, #0]
 80074a2:	f000 f8fd 	bl	80076a0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80074a6:	4b1c      	ldr	r3, [pc, #112]	@ (8007518 <xTaskNotifyWait+0xbc>)
 80074a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80074ac:	601a      	str	r2, [r3, #0]
 80074ae:	f3bf 8f4f 	dsb	sy
 80074b2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80074b6:	f000 fe81 	bl	80081bc <vPortExitCritical>

		taskENTER_CRITICAL();
 80074ba:	f000 fe4d 	bl	8008158 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d005      	beq.n	80074d0 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80074c4:	4b13      	ldr	r3, [pc, #76]	@ (8007514 <xTaskNotifyWait+0xb8>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80074d0:	4b10      	ldr	r3, [pc, #64]	@ (8007514 <xTaskNotifyWait+0xb8>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f893 30d4 	ldrb.w	r3, [r3, #212]	@ 0xd4
 80074d8:	b2db      	uxtb	r3, r3
 80074da:	2b02      	cmp	r3, #2
 80074dc:	d002      	beq.n	80074e4 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80074de:	2300      	movs	r3, #0
 80074e0:	617b      	str	r3, [r7, #20]
 80074e2:	e00a      	b.n	80074fa <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80074e4:	4b0b      	ldr	r3, [pc, #44]	@ (8007514 <xTaskNotifyWait+0xb8>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f8d3 10d0 	ldr.w	r1, [r3, #208]	@ 0xd0
 80074ec:	68ba      	ldr	r2, [r7, #8]
 80074ee:	43d2      	mvns	r2, r2
 80074f0:	400a      	ands	r2, r1
 80074f2:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
				xReturn = pdTRUE;
 80074f6:	2301      	movs	r3, #1
 80074f8:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80074fa:	4b06      	ldr	r3, [pc, #24]	@ (8007514 <xTaskNotifyWait+0xb8>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	2200      	movs	r2, #0
 8007500:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4
		}
		taskEXIT_CRITICAL();
 8007504:	f000 fe5a 	bl	80081bc <vPortExitCritical>

		return xReturn;
 8007508:	697b      	ldr	r3, [r7, #20]
	}
 800750a:	4618      	mov	r0, r3
 800750c:	3718      	adds	r7, #24
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}
 8007512:	bf00      	nop
 8007514:	20000a90 	.word	0x20000a90
 8007518:	e000ed04 	.word	0xe000ed04

0800751c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800751c:	b580      	push	{r7, lr}
 800751e:	b08a      	sub	sp, #40	@ 0x28
 8007520:	af00      	add	r7, sp, #0
 8007522:	60f8      	str	r0, [r7, #12]
 8007524:	60b9      	str	r1, [r7, #8]
 8007526:	603b      	str	r3, [r7, #0]
 8007528:	4613      	mov	r3, r2
 800752a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800752c:	2301      	movs	r3, #1
 800752e:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d10b      	bne.n	800754e <xTaskGenericNotify+0x32>
	__asm volatile
 8007536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800753a:	f383 8811 	msr	BASEPRI, r3
 800753e:	f3bf 8f6f 	isb	sy
 8007542:	f3bf 8f4f 	dsb	sy
 8007546:	61bb      	str	r3, [r7, #24]
}
 8007548:	bf00      	nop
 800754a:	bf00      	nop
 800754c:	e7fd      	b.n	800754a <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8007552:	f000 fe01 	bl	8008158 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d004      	beq.n	8007566 <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800755c:	6a3b      	ldr	r3, [r7, #32]
 800755e:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8007566:	6a3b      	ldr	r3, [r7, #32]
 8007568:	f893 30d4 	ldrb.w	r3, [r3, #212]	@ 0xd4
 800756c:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800756e:	6a3b      	ldr	r3, [r7, #32]
 8007570:	2202      	movs	r2, #2
 8007572:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4

			switch( eAction )
 8007576:	79fb      	ldrb	r3, [r7, #7]
 8007578:	2b04      	cmp	r3, #4
 800757a:	d82e      	bhi.n	80075da <xTaskGenericNotify+0xbe>
 800757c:	a201      	add	r2, pc, #4	@ (adr r2, 8007584 <xTaskGenericNotify+0x68>)
 800757e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007582:	bf00      	nop
 8007584:	080075ff 	.word	0x080075ff
 8007588:	08007599 	.word	0x08007599
 800758c:	080075ab 	.word	0x080075ab
 8007590:	080075bb 	.word	0x080075bb
 8007594:	080075c5 	.word	0x080075c5
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8007598:	6a3b      	ldr	r3, [r7, #32]
 800759a:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	431a      	orrs	r2, r3
 80075a2:	6a3b      	ldr	r3, [r7, #32]
 80075a4:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
					break;
 80075a8:	e02c      	b.n	8007604 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80075aa:	6a3b      	ldr	r3, [r7, #32]
 80075ac:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80075b0:	1c5a      	adds	r2, r3, #1
 80075b2:	6a3b      	ldr	r3, [r7, #32]
 80075b4:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
					break;
 80075b8:	e024      	b.n	8007604 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80075ba:	6a3b      	ldr	r3, [r7, #32]
 80075bc:	68ba      	ldr	r2, [r7, #8]
 80075be:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
					break;
 80075c2:	e01f      	b.n	8007604 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80075c4:	7ffb      	ldrb	r3, [r7, #31]
 80075c6:	2b02      	cmp	r3, #2
 80075c8:	d004      	beq.n	80075d4 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80075ca:	6a3b      	ldr	r3, [r7, #32]
 80075cc:	68ba      	ldr	r2, [r7, #8]
 80075ce:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80075d2:	e017      	b.n	8007604 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 80075d4:	2300      	movs	r3, #0
 80075d6:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 80075d8:	e014      	b.n	8007604 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80075da:	6a3b      	ldr	r3, [r7, #32]
 80075dc:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80075e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80075e4:	d00d      	beq.n	8007602 <xTaskGenericNotify+0xe6>
	__asm volatile
 80075e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075ea:	f383 8811 	msr	BASEPRI, r3
 80075ee:	f3bf 8f6f 	isb	sy
 80075f2:	f3bf 8f4f 	dsb	sy
 80075f6:	617b      	str	r3, [r7, #20]
}
 80075f8:	bf00      	nop
 80075fa:	bf00      	nop
 80075fc:	e7fd      	b.n	80075fa <xTaskGenericNotify+0xde>
					break;
 80075fe:	bf00      	nop
 8007600:	e000      	b.n	8007604 <xTaskGenericNotify+0xe8>

					break;
 8007602:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007604:	7ffb      	ldrb	r3, [r7, #31]
 8007606:	2b01      	cmp	r3, #1
 8007608:	d13b      	bne.n	8007682 <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800760a:	6a3b      	ldr	r3, [r7, #32]
 800760c:	3304      	adds	r3, #4
 800760e:	4618      	mov	r0, r3
 8007610:	f7fd fd1a 	bl	8005048 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8007614:	6a3b      	ldr	r3, [r7, #32]
 8007616:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007618:	4b1d      	ldr	r3, [pc, #116]	@ (8007690 <xTaskGenericNotify+0x174>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	429a      	cmp	r2, r3
 800761e:	d903      	bls.n	8007628 <xTaskGenericNotify+0x10c>
 8007620:	6a3b      	ldr	r3, [r7, #32]
 8007622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007624:	4a1a      	ldr	r2, [pc, #104]	@ (8007690 <xTaskGenericNotify+0x174>)
 8007626:	6013      	str	r3, [r2, #0]
 8007628:	6a3b      	ldr	r3, [r7, #32]
 800762a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800762c:	4613      	mov	r3, r2
 800762e:	009b      	lsls	r3, r3, #2
 8007630:	4413      	add	r3, r2
 8007632:	009b      	lsls	r3, r3, #2
 8007634:	4a17      	ldr	r2, [pc, #92]	@ (8007694 <xTaskGenericNotify+0x178>)
 8007636:	441a      	add	r2, r3
 8007638:	6a3b      	ldr	r3, [r7, #32]
 800763a:	3304      	adds	r3, #4
 800763c:	4619      	mov	r1, r3
 800763e:	4610      	mov	r0, r2
 8007640:	f7fd fca5 	bl	8004f8e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007644:	6a3b      	ldr	r3, [r7, #32]
 8007646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007648:	2b00      	cmp	r3, #0
 800764a:	d00b      	beq.n	8007664 <xTaskGenericNotify+0x148>
	__asm volatile
 800764c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007650:	f383 8811 	msr	BASEPRI, r3
 8007654:	f3bf 8f6f 	isb	sy
 8007658:	f3bf 8f4f 	dsb	sy
 800765c:	613b      	str	r3, [r7, #16]
}
 800765e:	bf00      	nop
 8007660:	bf00      	nop
 8007662:	e7fd      	b.n	8007660 <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007664:	6a3b      	ldr	r3, [r7, #32]
 8007666:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007668:	4b0b      	ldr	r3, [pc, #44]	@ (8007698 <xTaskGenericNotify+0x17c>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800766e:	429a      	cmp	r2, r3
 8007670:	d907      	bls.n	8007682 <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8007672:	4b0a      	ldr	r3, [pc, #40]	@ (800769c <xTaskGenericNotify+0x180>)
 8007674:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007678:	601a      	str	r2, [r3, #0]
 800767a:	f3bf 8f4f 	dsb	sy
 800767e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007682:	f000 fd9b 	bl	80081bc <vPortExitCritical>

		return xReturn;
 8007686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8007688:	4618      	mov	r0, r3
 800768a:	3728      	adds	r7, #40	@ 0x28
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}
 8007690:	20000f6c 	.word	0x20000f6c
 8007694:	20000a94 	.word	0x20000a94
 8007698:	20000a90 	.word	0x20000a90
 800769c:	e000ed04 	.word	0xe000ed04

080076a0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b084      	sub	sp, #16
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80076aa:	4b21      	ldr	r3, [pc, #132]	@ (8007730 <prvAddCurrentTaskToDelayedList+0x90>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80076b0:	4b20      	ldr	r3, [pc, #128]	@ (8007734 <prvAddCurrentTaskToDelayedList+0x94>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	3304      	adds	r3, #4
 80076b6:	4618      	mov	r0, r3
 80076b8:	f7fd fcc6 	bl	8005048 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80076c2:	d10a      	bne.n	80076da <prvAddCurrentTaskToDelayedList+0x3a>
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d007      	beq.n	80076da <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80076ca:	4b1a      	ldr	r3, [pc, #104]	@ (8007734 <prvAddCurrentTaskToDelayedList+0x94>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	3304      	adds	r3, #4
 80076d0:	4619      	mov	r1, r3
 80076d2:	4819      	ldr	r0, [pc, #100]	@ (8007738 <prvAddCurrentTaskToDelayedList+0x98>)
 80076d4:	f7fd fc5b 	bl	8004f8e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80076d8:	e026      	b.n	8007728 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80076da:	68fa      	ldr	r2, [r7, #12]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	4413      	add	r3, r2
 80076e0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80076e2:	4b14      	ldr	r3, [pc, #80]	@ (8007734 <prvAddCurrentTaskToDelayedList+0x94>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	68ba      	ldr	r2, [r7, #8]
 80076e8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80076ea:	68ba      	ldr	r2, [r7, #8]
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	429a      	cmp	r2, r3
 80076f0:	d209      	bcs.n	8007706 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80076f2:	4b12      	ldr	r3, [pc, #72]	@ (800773c <prvAddCurrentTaskToDelayedList+0x9c>)
 80076f4:	681a      	ldr	r2, [r3, #0]
 80076f6:	4b0f      	ldr	r3, [pc, #60]	@ (8007734 <prvAddCurrentTaskToDelayedList+0x94>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	3304      	adds	r3, #4
 80076fc:	4619      	mov	r1, r3
 80076fe:	4610      	mov	r0, r2
 8007700:	f7fd fc69 	bl	8004fd6 <vListInsert>
}
 8007704:	e010      	b.n	8007728 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007706:	4b0e      	ldr	r3, [pc, #56]	@ (8007740 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007708:	681a      	ldr	r2, [r3, #0]
 800770a:	4b0a      	ldr	r3, [pc, #40]	@ (8007734 <prvAddCurrentTaskToDelayedList+0x94>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	3304      	adds	r3, #4
 8007710:	4619      	mov	r1, r3
 8007712:	4610      	mov	r0, r2
 8007714:	f7fd fc5f 	bl	8004fd6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007718:	4b0a      	ldr	r3, [pc, #40]	@ (8007744 <prvAddCurrentTaskToDelayedList+0xa4>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	68ba      	ldr	r2, [r7, #8]
 800771e:	429a      	cmp	r2, r3
 8007720:	d202      	bcs.n	8007728 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007722:	4a08      	ldr	r2, [pc, #32]	@ (8007744 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	6013      	str	r3, [r2, #0]
}
 8007728:	bf00      	nop
 800772a:	3710      	adds	r7, #16
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}
 8007730:	20000f68 	.word	0x20000f68
 8007734:	20000a90 	.word	0x20000a90
 8007738:	20000f50 	.word	0x20000f50
 800773c:	20000f20 	.word	0x20000f20
 8007740:	20000f1c 	.word	0x20000f1c
 8007744:	20000f84 	.word	0x20000f84

08007748 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b08a      	sub	sp, #40	@ 0x28
 800774c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800774e:	2300      	movs	r3, #0
 8007750:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007752:	f000 fb71 	bl	8007e38 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007756:	4b1d      	ldr	r3, [pc, #116]	@ (80077cc <xTimerCreateTimerTask+0x84>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d021      	beq.n	80077a2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800775e:	2300      	movs	r3, #0
 8007760:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007762:	2300      	movs	r3, #0
 8007764:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007766:	1d3a      	adds	r2, r7, #4
 8007768:	f107 0108 	add.w	r1, r7, #8
 800776c:	f107 030c 	add.w	r3, r7, #12
 8007770:	4618      	mov	r0, r3
 8007772:	f7fd fbc5 	bl	8004f00 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007776:	6879      	ldr	r1, [r7, #4]
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	68fa      	ldr	r2, [r7, #12]
 800777c:	9202      	str	r2, [sp, #8]
 800777e:	9301      	str	r3, [sp, #4]
 8007780:	2302      	movs	r3, #2
 8007782:	9300      	str	r3, [sp, #0]
 8007784:	2300      	movs	r3, #0
 8007786:	460a      	mov	r2, r1
 8007788:	4911      	ldr	r1, [pc, #68]	@ (80077d0 <xTimerCreateTimerTask+0x88>)
 800778a:	4812      	ldr	r0, [pc, #72]	@ (80077d4 <xTimerCreateTimerTask+0x8c>)
 800778c:	f7fe fb74 	bl	8005e78 <xTaskCreateStatic>
 8007790:	4603      	mov	r3, r0
 8007792:	4a11      	ldr	r2, [pc, #68]	@ (80077d8 <xTimerCreateTimerTask+0x90>)
 8007794:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007796:	4b10      	ldr	r3, [pc, #64]	@ (80077d8 <xTimerCreateTimerTask+0x90>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d001      	beq.n	80077a2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800779e:	2301      	movs	r3, #1
 80077a0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d10b      	bne.n	80077c0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80077a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077ac:	f383 8811 	msr	BASEPRI, r3
 80077b0:	f3bf 8f6f 	isb	sy
 80077b4:	f3bf 8f4f 	dsb	sy
 80077b8:	613b      	str	r3, [r7, #16]
}
 80077ba:	bf00      	nop
 80077bc:	bf00      	nop
 80077be:	e7fd      	b.n	80077bc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80077c0:	697b      	ldr	r3, [r7, #20]
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3718      	adds	r7, #24
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}
 80077ca:	bf00      	nop
 80077cc:	20000fc8 	.word	0x20000fc8
 80077d0:	0800954c 	.word	0x0800954c
 80077d4:	080079d1 	.word	0x080079d1
 80077d8:	20000fcc 	.word	0x20000fcc

080077dc <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b088      	sub	sp, #32
 80077e0:	af02      	add	r7, sp, #8
 80077e2:	60f8      	str	r0, [r7, #12]
 80077e4:	60b9      	str	r1, [r7, #8]
 80077e6:	607a      	str	r2, [r7, #4]
 80077e8:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80077ea:	202c      	movs	r0, #44	@ 0x2c
 80077ec:	f000 fdd6 	bl	800839c <pvPortMalloc>
 80077f0:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d00d      	beq.n	8007814 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	2200      	movs	r2, #0
 80077fc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	9301      	str	r3, [sp, #4]
 8007804:	6a3b      	ldr	r3, [r7, #32]
 8007806:	9300      	str	r3, [sp, #0]
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	687a      	ldr	r2, [r7, #4]
 800780c:	68b9      	ldr	r1, [r7, #8]
 800780e:	68f8      	ldr	r0, [r7, #12]
 8007810:	f000 f805 	bl	800781e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8007814:	697b      	ldr	r3, [r7, #20]
	}
 8007816:	4618      	mov	r0, r3
 8007818:	3718      	adds	r7, #24
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}

0800781e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800781e:	b580      	push	{r7, lr}
 8007820:	b086      	sub	sp, #24
 8007822:	af00      	add	r7, sp, #0
 8007824:	60f8      	str	r0, [r7, #12]
 8007826:	60b9      	str	r1, [r7, #8]
 8007828:	607a      	str	r2, [r7, #4]
 800782a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d10b      	bne.n	800784a <prvInitialiseNewTimer+0x2c>
	__asm volatile
 8007832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007836:	f383 8811 	msr	BASEPRI, r3
 800783a:	f3bf 8f6f 	isb	sy
 800783e:	f3bf 8f4f 	dsb	sy
 8007842:	617b      	str	r3, [r7, #20]
}
 8007844:	bf00      	nop
 8007846:	bf00      	nop
 8007848:	e7fd      	b.n	8007846 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800784a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800784c:	2b00      	cmp	r3, #0
 800784e:	d01e      	beq.n	800788e <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8007850:	f000 faf2 	bl	8007e38 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8007854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007856:	68fa      	ldr	r2, [r7, #12]
 8007858:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800785a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800785c:	68ba      	ldr	r2, [r7, #8]
 800785e:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8007860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007862:	683a      	ldr	r2, [r7, #0]
 8007864:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8007866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007868:	6a3a      	ldr	r2, [r7, #32]
 800786a:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800786c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800786e:	3304      	adds	r3, #4
 8007870:	4618      	mov	r0, r3
 8007872:	f7fd fb7f 	bl	8004f74 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d008      	beq.n	800788e <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800787c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800787e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007882:	f043 0304 	orr.w	r3, r3, #4
 8007886:	b2da      	uxtb	r2, r3
 8007888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800788a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800788e:	bf00      	nop
 8007890:	3718      	adds	r7, #24
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}
	...

08007898 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b08a      	sub	sp, #40	@ 0x28
 800789c:	af00      	add	r7, sp, #0
 800789e:	60f8      	str	r0, [r7, #12]
 80078a0:	60b9      	str	r1, [r7, #8]
 80078a2:	607a      	str	r2, [r7, #4]
 80078a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80078a6:	2300      	movs	r3, #0
 80078a8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d10b      	bne.n	80078c8 <xTimerGenericCommand+0x30>
	__asm volatile
 80078b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078b4:	f383 8811 	msr	BASEPRI, r3
 80078b8:	f3bf 8f6f 	isb	sy
 80078bc:	f3bf 8f4f 	dsb	sy
 80078c0:	623b      	str	r3, [r7, #32]
}
 80078c2:	bf00      	nop
 80078c4:	bf00      	nop
 80078c6:	e7fd      	b.n	80078c4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80078c8:	4b19      	ldr	r3, [pc, #100]	@ (8007930 <xTimerGenericCommand+0x98>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d02a      	beq.n	8007926 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	2b05      	cmp	r3, #5
 80078e0:	dc18      	bgt.n	8007914 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80078e2:	f7ff fbe1 	bl	80070a8 <xTaskGetSchedulerState>
 80078e6:	4603      	mov	r3, r0
 80078e8:	2b02      	cmp	r3, #2
 80078ea:	d109      	bne.n	8007900 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80078ec:	4b10      	ldr	r3, [pc, #64]	@ (8007930 <xTimerGenericCommand+0x98>)
 80078ee:	6818      	ldr	r0, [r3, #0]
 80078f0:	f107 0110 	add.w	r1, r7, #16
 80078f4:	2300      	movs	r3, #0
 80078f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80078f8:	f7fd fd16 	bl	8005328 <xQueueGenericSend>
 80078fc:	6278      	str	r0, [r7, #36]	@ 0x24
 80078fe:	e012      	b.n	8007926 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007900:	4b0b      	ldr	r3, [pc, #44]	@ (8007930 <xTimerGenericCommand+0x98>)
 8007902:	6818      	ldr	r0, [r3, #0]
 8007904:	f107 0110 	add.w	r1, r7, #16
 8007908:	2300      	movs	r3, #0
 800790a:	2200      	movs	r2, #0
 800790c:	f7fd fd0c 	bl	8005328 <xQueueGenericSend>
 8007910:	6278      	str	r0, [r7, #36]	@ 0x24
 8007912:	e008      	b.n	8007926 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007914:	4b06      	ldr	r3, [pc, #24]	@ (8007930 <xTimerGenericCommand+0x98>)
 8007916:	6818      	ldr	r0, [r3, #0]
 8007918:	f107 0110 	add.w	r1, r7, #16
 800791c:	2300      	movs	r3, #0
 800791e:	683a      	ldr	r2, [r7, #0]
 8007920:	f7fd fe04 	bl	800552c <xQueueGenericSendFromISR>
 8007924:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007928:	4618      	mov	r0, r3
 800792a:	3728      	adds	r7, #40	@ 0x28
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}
 8007930:	20000fc8 	.word	0x20000fc8

08007934 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b088      	sub	sp, #32
 8007938:	af02      	add	r7, sp, #8
 800793a:	6078      	str	r0, [r7, #4]
 800793c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800793e:	4b23      	ldr	r3, [pc, #140]	@ (80079cc <prvProcessExpiredTimer+0x98>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	68db      	ldr	r3, [r3, #12]
 8007944:	68db      	ldr	r3, [r3, #12]
 8007946:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	3304      	adds	r3, #4
 800794c:	4618      	mov	r0, r3
 800794e:	f7fd fb7b 	bl	8005048 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007958:	f003 0304 	and.w	r3, r3, #4
 800795c:	2b00      	cmp	r3, #0
 800795e:	d023      	beq.n	80079a8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	699a      	ldr	r2, [r3, #24]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	18d1      	adds	r1, r2, r3
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	683a      	ldr	r2, [r7, #0]
 800796c:	6978      	ldr	r0, [r7, #20]
 800796e:	f000 f8d5 	bl	8007b1c <prvInsertTimerInActiveList>
 8007972:	4603      	mov	r3, r0
 8007974:	2b00      	cmp	r3, #0
 8007976:	d020      	beq.n	80079ba <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007978:	2300      	movs	r3, #0
 800797a:	9300      	str	r3, [sp, #0]
 800797c:	2300      	movs	r3, #0
 800797e:	687a      	ldr	r2, [r7, #4]
 8007980:	2100      	movs	r1, #0
 8007982:	6978      	ldr	r0, [r7, #20]
 8007984:	f7ff ff88 	bl	8007898 <xTimerGenericCommand>
 8007988:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d114      	bne.n	80079ba <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007994:	f383 8811 	msr	BASEPRI, r3
 8007998:	f3bf 8f6f 	isb	sy
 800799c:	f3bf 8f4f 	dsb	sy
 80079a0:	60fb      	str	r3, [r7, #12]
}
 80079a2:	bf00      	nop
 80079a4:	bf00      	nop
 80079a6:	e7fd      	b.n	80079a4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80079ae:	f023 0301 	bic.w	r3, r3, #1
 80079b2:	b2da      	uxtb	r2, r3
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	6a1b      	ldr	r3, [r3, #32]
 80079be:	6978      	ldr	r0, [r7, #20]
 80079c0:	4798      	blx	r3
}
 80079c2:	bf00      	nop
 80079c4:	3718      	adds	r7, #24
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}
 80079ca:	bf00      	nop
 80079cc:	20000fc0 	.word	0x20000fc0

080079d0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b084      	sub	sp, #16
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80079d8:	f107 0308 	add.w	r3, r7, #8
 80079dc:	4618      	mov	r0, r3
 80079de:	f000 f859 	bl	8007a94 <prvGetNextExpireTime>
 80079e2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	4619      	mov	r1, r3
 80079e8:	68f8      	ldr	r0, [r7, #12]
 80079ea:	f000 f805 	bl	80079f8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80079ee:	f000 f8d7 	bl	8007ba0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80079f2:	bf00      	nop
 80079f4:	e7f0      	b.n	80079d8 <prvTimerTask+0x8>
	...

080079f8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b084      	sub	sp, #16
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
 8007a00:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007a02:	f7fe fd87 	bl	8006514 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007a06:	f107 0308 	add.w	r3, r7, #8
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f000 f866 	bl	8007adc <prvSampleTimeNow>
 8007a10:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d130      	bne.n	8007a7a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d10a      	bne.n	8007a34 <prvProcessTimerOrBlockTask+0x3c>
 8007a1e:	687a      	ldr	r2, [r7, #4]
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	429a      	cmp	r2, r3
 8007a24:	d806      	bhi.n	8007a34 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007a26:	f7fe fd83 	bl	8006530 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007a2a:	68f9      	ldr	r1, [r7, #12]
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f7ff ff81 	bl	8007934 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007a32:	e024      	b.n	8007a7e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d008      	beq.n	8007a4c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007a3a:	4b13      	ldr	r3, [pc, #76]	@ (8007a88 <prvProcessTimerOrBlockTask+0x90>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d101      	bne.n	8007a48 <prvProcessTimerOrBlockTask+0x50>
 8007a44:	2301      	movs	r3, #1
 8007a46:	e000      	b.n	8007a4a <prvProcessTimerOrBlockTask+0x52>
 8007a48:	2300      	movs	r3, #0
 8007a4a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007a4c:	4b0f      	ldr	r3, [pc, #60]	@ (8007a8c <prvProcessTimerOrBlockTask+0x94>)
 8007a4e:	6818      	ldr	r0, [r3, #0]
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	1ad3      	subs	r3, r2, r3
 8007a56:	683a      	ldr	r2, [r7, #0]
 8007a58:	4619      	mov	r1, r3
 8007a5a:	f7fe f9d9 	bl	8005e10 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007a5e:	f7fe fd67 	bl	8006530 <xTaskResumeAll>
 8007a62:	4603      	mov	r3, r0
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d10a      	bne.n	8007a7e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007a68:	4b09      	ldr	r3, [pc, #36]	@ (8007a90 <prvProcessTimerOrBlockTask+0x98>)
 8007a6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a6e:	601a      	str	r2, [r3, #0]
 8007a70:	f3bf 8f4f 	dsb	sy
 8007a74:	f3bf 8f6f 	isb	sy
}
 8007a78:	e001      	b.n	8007a7e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007a7a:	f7fe fd59 	bl	8006530 <xTaskResumeAll>
}
 8007a7e:	bf00      	nop
 8007a80:	3710      	adds	r7, #16
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}
 8007a86:	bf00      	nop
 8007a88:	20000fc4 	.word	0x20000fc4
 8007a8c:	20000fc8 	.word	0x20000fc8
 8007a90:	e000ed04 	.word	0xe000ed04

08007a94 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007a94:	b480      	push	{r7}
 8007a96:	b085      	sub	sp, #20
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007a9c:	4b0e      	ldr	r3, [pc, #56]	@ (8007ad8 <prvGetNextExpireTime+0x44>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d101      	bne.n	8007aaa <prvGetNextExpireTime+0x16>
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	e000      	b.n	8007aac <prvGetNextExpireTime+0x18>
 8007aaa:	2200      	movs	r2, #0
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d105      	bne.n	8007ac4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007ab8:	4b07      	ldr	r3, [pc, #28]	@ (8007ad8 <prvGetNextExpireTime+0x44>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	68db      	ldr	r3, [r3, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	60fb      	str	r3, [r7, #12]
 8007ac2:	e001      	b.n	8007ac8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3714      	adds	r7, #20
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad4:	4770      	bx	lr
 8007ad6:	bf00      	nop
 8007ad8:	20000fc0 	.word	0x20000fc0

08007adc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b084      	sub	sp, #16
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007ae4:	f7fe fdc2 	bl	800666c <xTaskGetTickCount>
 8007ae8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007aea:	4b0b      	ldr	r3, [pc, #44]	@ (8007b18 <prvSampleTimeNow+0x3c>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	68fa      	ldr	r2, [r7, #12]
 8007af0:	429a      	cmp	r2, r3
 8007af2:	d205      	bcs.n	8007b00 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007af4:	f000 f93a 	bl	8007d6c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2201      	movs	r2, #1
 8007afc:	601a      	str	r2, [r3, #0]
 8007afe:	e002      	b.n	8007b06 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2200      	movs	r2, #0
 8007b04:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007b06:	4a04      	ldr	r2, [pc, #16]	@ (8007b18 <prvSampleTimeNow+0x3c>)
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3710      	adds	r7, #16
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
 8007b16:	bf00      	nop
 8007b18:	20000fd0 	.word	0x20000fd0

08007b1c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b086      	sub	sp, #24
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	60f8      	str	r0, [r7, #12]
 8007b24:	60b9      	str	r1, [r7, #8]
 8007b26:	607a      	str	r2, [r7, #4]
 8007b28:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	68ba      	ldr	r2, [r7, #8]
 8007b32:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	68fa      	ldr	r2, [r7, #12]
 8007b38:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007b3a:	68ba      	ldr	r2, [r7, #8]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	429a      	cmp	r2, r3
 8007b40:	d812      	bhi.n	8007b68 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b42:	687a      	ldr	r2, [r7, #4]
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	1ad2      	subs	r2, r2, r3
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	699b      	ldr	r3, [r3, #24]
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	d302      	bcc.n	8007b56 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007b50:	2301      	movs	r3, #1
 8007b52:	617b      	str	r3, [r7, #20]
 8007b54:	e01b      	b.n	8007b8e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007b56:	4b10      	ldr	r3, [pc, #64]	@ (8007b98 <prvInsertTimerInActiveList+0x7c>)
 8007b58:	681a      	ldr	r2, [r3, #0]
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	3304      	adds	r3, #4
 8007b5e:	4619      	mov	r1, r3
 8007b60:	4610      	mov	r0, r2
 8007b62:	f7fd fa38 	bl	8004fd6 <vListInsert>
 8007b66:	e012      	b.n	8007b8e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007b68:	687a      	ldr	r2, [r7, #4]
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d206      	bcs.n	8007b7e <prvInsertTimerInActiveList+0x62>
 8007b70:	68ba      	ldr	r2, [r7, #8]
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	429a      	cmp	r2, r3
 8007b76:	d302      	bcc.n	8007b7e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007b78:	2301      	movs	r3, #1
 8007b7a:	617b      	str	r3, [r7, #20]
 8007b7c:	e007      	b.n	8007b8e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007b7e:	4b07      	ldr	r3, [pc, #28]	@ (8007b9c <prvInsertTimerInActiveList+0x80>)
 8007b80:	681a      	ldr	r2, [r3, #0]
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	3304      	adds	r3, #4
 8007b86:	4619      	mov	r1, r3
 8007b88:	4610      	mov	r0, r2
 8007b8a:	f7fd fa24 	bl	8004fd6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007b8e:	697b      	ldr	r3, [r7, #20]
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	3718      	adds	r7, #24
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}
 8007b98:	20000fc4 	.word	0x20000fc4
 8007b9c:	20000fc0 	.word	0x20000fc0

08007ba0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b08e      	sub	sp, #56	@ 0x38
 8007ba4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007ba6:	e0ce      	b.n	8007d46 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	da19      	bge.n	8007be2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007bae:	1d3b      	adds	r3, r7, #4
 8007bb0:	3304      	adds	r3, #4
 8007bb2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007bb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d10b      	bne.n	8007bd2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007bba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bbe:	f383 8811 	msr	BASEPRI, r3
 8007bc2:	f3bf 8f6f 	isb	sy
 8007bc6:	f3bf 8f4f 	dsb	sy
 8007bca:	61fb      	str	r3, [r7, #28]
}
 8007bcc:	bf00      	nop
 8007bce:	bf00      	nop
 8007bd0:	e7fd      	b.n	8007bce <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007bd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007bd8:	6850      	ldr	r0, [r2, #4]
 8007bda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007bdc:	6892      	ldr	r2, [r2, #8]
 8007bde:	4611      	mov	r1, r2
 8007be0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	f2c0 80ae 	blt.w	8007d46 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007bee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bf0:	695b      	ldr	r3, [r3, #20]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d004      	beq.n	8007c00 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007bf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bf8:	3304      	adds	r3, #4
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f7fd fa24 	bl	8005048 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007c00:	463b      	mov	r3, r7
 8007c02:	4618      	mov	r0, r3
 8007c04:	f7ff ff6a 	bl	8007adc <prvSampleTimeNow>
 8007c08:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2b09      	cmp	r3, #9
 8007c0e:	f200 8097 	bhi.w	8007d40 <prvProcessReceivedCommands+0x1a0>
 8007c12:	a201      	add	r2, pc, #4	@ (adr r2, 8007c18 <prvProcessReceivedCommands+0x78>)
 8007c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c18:	08007c41 	.word	0x08007c41
 8007c1c:	08007c41 	.word	0x08007c41
 8007c20:	08007c41 	.word	0x08007c41
 8007c24:	08007cb7 	.word	0x08007cb7
 8007c28:	08007ccb 	.word	0x08007ccb
 8007c2c:	08007d17 	.word	0x08007d17
 8007c30:	08007c41 	.word	0x08007c41
 8007c34:	08007c41 	.word	0x08007c41
 8007c38:	08007cb7 	.word	0x08007cb7
 8007c3c:	08007ccb 	.word	0x08007ccb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007c40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c42:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007c46:	f043 0301 	orr.w	r3, r3, #1
 8007c4a:	b2da      	uxtb	r2, r3
 8007c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c4e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007c52:	68ba      	ldr	r2, [r7, #8]
 8007c54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c56:	699b      	ldr	r3, [r3, #24]
 8007c58:	18d1      	adds	r1, r2, r3
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c60:	f7ff ff5c 	bl	8007b1c <prvInsertTimerInActiveList>
 8007c64:	4603      	mov	r3, r0
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d06c      	beq.n	8007d44 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007c6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c6c:	6a1b      	ldr	r3, [r3, #32]
 8007c6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c70:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c74:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007c78:	f003 0304 	and.w	r3, r3, #4
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d061      	beq.n	8007d44 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007c80:	68ba      	ldr	r2, [r7, #8]
 8007c82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c84:	699b      	ldr	r3, [r3, #24]
 8007c86:	441a      	add	r2, r3
 8007c88:	2300      	movs	r3, #0
 8007c8a:	9300      	str	r3, [sp, #0]
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	2100      	movs	r1, #0
 8007c90:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c92:	f7ff fe01 	bl	8007898 <xTimerGenericCommand>
 8007c96:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007c98:	6a3b      	ldr	r3, [r7, #32]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d152      	bne.n	8007d44 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8007c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ca2:	f383 8811 	msr	BASEPRI, r3
 8007ca6:	f3bf 8f6f 	isb	sy
 8007caa:	f3bf 8f4f 	dsb	sy
 8007cae:	61bb      	str	r3, [r7, #24]
}
 8007cb0:	bf00      	nop
 8007cb2:	bf00      	nop
 8007cb4:	e7fd      	b.n	8007cb2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cb8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007cbc:	f023 0301 	bic.w	r3, r3, #1
 8007cc0:	b2da      	uxtb	r2, r3
 8007cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cc4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007cc8:	e03d      	b.n	8007d46 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ccc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007cd0:	f043 0301 	orr.w	r3, r3, #1
 8007cd4:	b2da      	uxtb	r2, r3
 8007cd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cd8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007cdc:	68ba      	ldr	r2, [r7, #8]
 8007cde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ce0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007ce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ce4:	699b      	ldr	r3, [r3, #24]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d10b      	bne.n	8007d02 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8007cea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cee:	f383 8811 	msr	BASEPRI, r3
 8007cf2:	f3bf 8f6f 	isb	sy
 8007cf6:	f3bf 8f4f 	dsb	sy
 8007cfa:	617b      	str	r3, [r7, #20]
}
 8007cfc:	bf00      	nop
 8007cfe:	bf00      	nop
 8007d00:	e7fd      	b.n	8007cfe <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007d02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d04:	699a      	ldr	r2, [r3, #24]
 8007d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d08:	18d1      	adds	r1, r2, r3
 8007d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d10:	f7ff ff04 	bl	8007b1c <prvInsertTimerInActiveList>
					break;
 8007d14:	e017      	b.n	8007d46 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007d16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d18:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007d1c:	f003 0302 	and.w	r3, r3, #2
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d103      	bne.n	8007d2c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007d24:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d26:	f000 fc07 	bl	8008538 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007d2a:	e00c      	b.n	8007d46 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d2e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007d32:	f023 0301 	bic.w	r3, r3, #1
 8007d36:	b2da      	uxtb	r2, r3
 8007d38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d3a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007d3e:	e002      	b.n	8007d46 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007d40:	bf00      	nop
 8007d42:	e000      	b.n	8007d46 <prvProcessReceivedCommands+0x1a6>
					break;
 8007d44:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007d46:	4b08      	ldr	r3, [pc, #32]	@ (8007d68 <prvProcessReceivedCommands+0x1c8>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	1d39      	adds	r1, r7, #4
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f7fd fd1a 	bl	8005788 <xQueueReceive>
 8007d54:	4603      	mov	r3, r0
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	f47f af26 	bne.w	8007ba8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007d5c:	bf00      	nop
 8007d5e:	bf00      	nop
 8007d60:	3730      	adds	r7, #48	@ 0x30
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}
 8007d66:	bf00      	nop
 8007d68:	20000fc8 	.word	0x20000fc8

08007d6c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b088      	sub	sp, #32
 8007d70:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007d72:	e049      	b.n	8007e08 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007d74:	4b2e      	ldr	r3, [pc, #184]	@ (8007e30 <prvSwitchTimerLists+0xc4>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	68db      	ldr	r3, [r3, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d7e:	4b2c      	ldr	r3, [pc, #176]	@ (8007e30 <prvSwitchTimerLists+0xc4>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	68db      	ldr	r3, [r3, #12]
 8007d84:	68db      	ldr	r3, [r3, #12]
 8007d86:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	3304      	adds	r3, #4
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f7fd f95b 	bl	8005048 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	6a1b      	ldr	r3, [r3, #32]
 8007d96:	68f8      	ldr	r0, [r7, #12]
 8007d98:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007da0:	f003 0304 	and.w	r3, r3, #4
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d02f      	beq.n	8007e08 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	699b      	ldr	r3, [r3, #24]
 8007dac:	693a      	ldr	r2, [r7, #16]
 8007dae:	4413      	add	r3, r2
 8007db0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007db2:	68ba      	ldr	r2, [r7, #8]
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	429a      	cmp	r2, r3
 8007db8:	d90e      	bls.n	8007dd8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	68ba      	ldr	r2, [r7, #8]
 8007dbe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	68fa      	ldr	r2, [r7, #12]
 8007dc4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007dc6:	4b1a      	ldr	r3, [pc, #104]	@ (8007e30 <prvSwitchTimerLists+0xc4>)
 8007dc8:	681a      	ldr	r2, [r3, #0]
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	3304      	adds	r3, #4
 8007dce:	4619      	mov	r1, r3
 8007dd0:	4610      	mov	r0, r2
 8007dd2:	f7fd f900 	bl	8004fd6 <vListInsert>
 8007dd6:	e017      	b.n	8007e08 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007dd8:	2300      	movs	r3, #0
 8007dda:	9300      	str	r3, [sp, #0]
 8007ddc:	2300      	movs	r3, #0
 8007dde:	693a      	ldr	r2, [r7, #16]
 8007de0:	2100      	movs	r1, #0
 8007de2:	68f8      	ldr	r0, [r7, #12]
 8007de4:	f7ff fd58 	bl	8007898 <xTimerGenericCommand>
 8007de8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d10b      	bne.n	8007e08 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007df4:	f383 8811 	msr	BASEPRI, r3
 8007df8:	f3bf 8f6f 	isb	sy
 8007dfc:	f3bf 8f4f 	dsb	sy
 8007e00:	603b      	str	r3, [r7, #0]
}
 8007e02:	bf00      	nop
 8007e04:	bf00      	nop
 8007e06:	e7fd      	b.n	8007e04 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007e08:	4b09      	ldr	r3, [pc, #36]	@ (8007e30 <prvSwitchTimerLists+0xc4>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d1b0      	bne.n	8007d74 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007e12:	4b07      	ldr	r3, [pc, #28]	@ (8007e30 <prvSwitchTimerLists+0xc4>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007e18:	4b06      	ldr	r3, [pc, #24]	@ (8007e34 <prvSwitchTimerLists+0xc8>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	4a04      	ldr	r2, [pc, #16]	@ (8007e30 <prvSwitchTimerLists+0xc4>)
 8007e1e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007e20:	4a04      	ldr	r2, [pc, #16]	@ (8007e34 <prvSwitchTimerLists+0xc8>)
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	6013      	str	r3, [r2, #0]
}
 8007e26:	bf00      	nop
 8007e28:	3718      	adds	r7, #24
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}
 8007e2e:	bf00      	nop
 8007e30:	20000fc0 	.word	0x20000fc0
 8007e34:	20000fc4 	.word	0x20000fc4

08007e38 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b082      	sub	sp, #8
 8007e3c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007e3e:	f000 f98b 	bl	8008158 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007e42:	4b15      	ldr	r3, [pc, #84]	@ (8007e98 <prvCheckForValidListAndQueue+0x60>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d120      	bne.n	8007e8c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007e4a:	4814      	ldr	r0, [pc, #80]	@ (8007e9c <prvCheckForValidListAndQueue+0x64>)
 8007e4c:	f7fd f872 	bl	8004f34 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007e50:	4813      	ldr	r0, [pc, #76]	@ (8007ea0 <prvCheckForValidListAndQueue+0x68>)
 8007e52:	f7fd f86f 	bl	8004f34 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007e56:	4b13      	ldr	r3, [pc, #76]	@ (8007ea4 <prvCheckForValidListAndQueue+0x6c>)
 8007e58:	4a10      	ldr	r2, [pc, #64]	@ (8007e9c <prvCheckForValidListAndQueue+0x64>)
 8007e5a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007e5c:	4b12      	ldr	r3, [pc, #72]	@ (8007ea8 <prvCheckForValidListAndQueue+0x70>)
 8007e5e:	4a10      	ldr	r2, [pc, #64]	@ (8007ea0 <prvCheckForValidListAndQueue+0x68>)
 8007e60:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007e62:	2300      	movs	r3, #0
 8007e64:	9300      	str	r3, [sp, #0]
 8007e66:	4b11      	ldr	r3, [pc, #68]	@ (8007eac <prvCheckForValidListAndQueue+0x74>)
 8007e68:	4a11      	ldr	r2, [pc, #68]	@ (8007eb0 <prvCheckForValidListAndQueue+0x78>)
 8007e6a:	2110      	movs	r1, #16
 8007e6c:	200a      	movs	r0, #10
 8007e6e:	f7fd f97f 	bl	8005170 <xQueueGenericCreateStatic>
 8007e72:	4603      	mov	r3, r0
 8007e74:	4a08      	ldr	r2, [pc, #32]	@ (8007e98 <prvCheckForValidListAndQueue+0x60>)
 8007e76:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007e78:	4b07      	ldr	r3, [pc, #28]	@ (8007e98 <prvCheckForValidListAndQueue+0x60>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d005      	beq.n	8007e8c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007e80:	4b05      	ldr	r3, [pc, #20]	@ (8007e98 <prvCheckForValidListAndQueue+0x60>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	490b      	ldr	r1, [pc, #44]	@ (8007eb4 <prvCheckForValidListAndQueue+0x7c>)
 8007e86:	4618      	mov	r0, r3
 8007e88:	f7fd ff98 	bl	8005dbc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007e8c:	f000 f996 	bl	80081bc <vPortExitCritical>
}
 8007e90:	bf00      	nop
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}
 8007e96:	bf00      	nop
 8007e98:	20000fc8 	.word	0x20000fc8
 8007e9c:	20000f98 	.word	0x20000f98
 8007ea0:	20000fac 	.word	0x20000fac
 8007ea4:	20000fc0 	.word	0x20000fc0
 8007ea8:	20000fc4 	.word	0x20000fc4
 8007eac:	20001074 	.word	0x20001074
 8007eb0:	20000fd4 	.word	0x20000fd4
 8007eb4:	08009554 	.word	0x08009554

08007eb8 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b086      	sub	sp, #24
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d10b      	bne.n	8007ee2 <pvTimerGetTimerID+0x2a>
	__asm volatile
 8007eca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ece:	f383 8811 	msr	BASEPRI, r3
 8007ed2:	f3bf 8f6f 	isb	sy
 8007ed6:	f3bf 8f4f 	dsb	sy
 8007eda:	60fb      	str	r3, [r7, #12]
}
 8007edc:	bf00      	nop
 8007ede:	bf00      	nop
 8007ee0:	e7fd      	b.n	8007ede <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8007ee2:	f000 f939 	bl	8008158 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	69db      	ldr	r3, [r3, #28]
 8007eea:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8007eec:	f000 f966 	bl	80081bc <vPortExitCritical>

	return pvReturn;
 8007ef0:	693b      	ldr	r3, [r7, #16]
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3718      	adds	r7, #24
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}
	...

08007efc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007efc:	b480      	push	{r7}
 8007efe:	b085      	sub	sp, #20
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	60f8      	str	r0, [r7, #12]
 8007f04:	60b9      	str	r1, [r7, #8]
 8007f06:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	3b04      	subs	r3, #4
 8007f0c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007f14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	3b04      	subs	r3, #4
 8007f1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	f023 0201 	bic.w	r2, r3, #1
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	3b04      	subs	r3, #4
 8007f2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007f2c:	4a0c      	ldr	r2, [pc, #48]	@ (8007f60 <pxPortInitialiseStack+0x64>)
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	3b14      	subs	r3, #20
 8007f36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007f38:	687a      	ldr	r2, [r7, #4]
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	3b04      	subs	r3, #4
 8007f42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	f06f 0202 	mvn.w	r2, #2
 8007f4a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	3b20      	subs	r3, #32
 8007f50:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007f52:	68fb      	ldr	r3, [r7, #12]
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3714      	adds	r7, #20
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5e:	4770      	bx	lr
 8007f60:	08007f65 	.word	0x08007f65

08007f64 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007f64:	b480      	push	{r7}
 8007f66:	b085      	sub	sp, #20
 8007f68:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007f6e:	4b13      	ldr	r3, [pc, #76]	@ (8007fbc <prvTaskExitError+0x58>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007f76:	d00b      	beq.n	8007f90 <prvTaskExitError+0x2c>
	__asm volatile
 8007f78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f7c:	f383 8811 	msr	BASEPRI, r3
 8007f80:	f3bf 8f6f 	isb	sy
 8007f84:	f3bf 8f4f 	dsb	sy
 8007f88:	60fb      	str	r3, [r7, #12]
}
 8007f8a:	bf00      	nop
 8007f8c:	bf00      	nop
 8007f8e:	e7fd      	b.n	8007f8c <prvTaskExitError+0x28>
	__asm volatile
 8007f90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f94:	f383 8811 	msr	BASEPRI, r3
 8007f98:	f3bf 8f6f 	isb	sy
 8007f9c:	f3bf 8f4f 	dsb	sy
 8007fa0:	60bb      	str	r3, [r7, #8]
}
 8007fa2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007fa4:	bf00      	nop
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d0fc      	beq.n	8007fa6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007fac:	bf00      	nop
 8007fae:	bf00      	nop
 8007fb0:	3714      	adds	r7, #20
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb8:	4770      	bx	lr
 8007fba:	bf00      	nop
 8007fbc:	2000000c 	.word	0x2000000c

08007fc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007fc0:	4b07      	ldr	r3, [pc, #28]	@ (8007fe0 <pxCurrentTCBConst2>)
 8007fc2:	6819      	ldr	r1, [r3, #0]
 8007fc4:	6808      	ldr	r0, [r1, #0]
 8007fc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fca:	f380 8809 	msr	PSP, r0
 8007fce:	f3bf 8f6f 	isb	sy
 8007fd2:	f04f 0000 	mov.w	r0, #0
 8007fd6:	f380 8811 	msr	BASEPRI, r0
 8007fda:	4770      	bx	lr
 8007fdc:	f3af 8000 	nop.w

08007fe0 <pxCurrentTCBConst2>:
 8007fe0:	20000a90 	.word	0x20000a90
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007fe4:	bf00      	nop
 8007fe6:	bf00      	nop

08007fe8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007fe8:	4808      	ldr	r0, [pc, #32]	@ (800800c <prvPortStartFirstTask+0x24>)
 8007fea:	6800      	ldr	r0, [r0, #0]
 8007fec:	6800      	ldr	r0, [r0, #0]
 8007fee:	f380 8808 	msr	MSP, r0
 8007ff2:	f04f 0000 	mov.w	r0, #0
 8007ff6:	f380 8814 	msr	CONTROL, r0
 8007ffa:	b662      	cpsie	i
 8007ffc:	b661      	cpsie	f
 8007ffe:	f3bf 8f4f 	dsb	sy
 8008002:	f3bf 8f6f 	isb	sy
 8008006:	df00      	svc	0
 8008008:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800800a:	bf00      	nop
 800800c:	e000ed08 	.word	0xe000ed08

08008010 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b086      	sub	sp, #24
 8008014:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008016:	4b47      	ldr	r3, [pc, #284]	@ (8008134 <xPortStartScheduler+0x124>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4a47      	ldr	r2, [pc, #284]	@ (8008138 <xPortStartScheduler+0x128>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d10b      	bne.n	8008038 <xPortStartScheduler+0x28>
	__asm volatile
 8008020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008024:	f383 8811 	msr	BASEPRI, r3
 8008028:	f3bf 8f6f 	isb	sy
 800802c:	f3bf 8f4f 	dsb	sy
 8008030:	60fb      	str	r3, [r7, #12]
}
 8008032:	bf00      	nop
 8008034:	bf00      	nop
 8008036:	e7fd      	b.n	8008034 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008038:	4b3e      	ldr	r3, [pc, #248]	@ (8008134 <xPortStartScheduler+0x124>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a3f      	ldr	r2, [pc, #252]	@ (800813c <xPortStartScheduler+0x12c>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d10b      	bne.n	800805a <xPortStartScheduler+0x4a>
	__asm volatile
 8008042:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008046:	f383 8811 	msr	BASEPRI, r3
 800804a:	f3bf 8f6f 	isb	sy
 800804e:	f3bf 8f4f 	dsb	sy
 8008052:	613b      	str	r3, [r7, #16]
}
 8008054:	bf00      	nop
 8008056:	bf00      	nop
 8008058:	e7fd      	b.n	8008056 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800805a:	4b39      	ldr	r3, [pc, #228]	@ (8008140 <xPortStartScheduler+0x130>)
 800805c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	781b      	ldrb	r3, [r3, #0]
 8008062:	b2db      	uxtb	r3, r3
 8008064:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	22ff      	movs	r2, #255	@ 0xff
 800806a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	781b      	ldrb	r3, [r3, #0]
 8008070:	b2db      	uxtb	r3, r3
 8008072:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008074:	78fb      	ldrb	r3, [r7, #3]
 8008076:	b2db      	uxtb	r3, r3
 8008078:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800807c:	b2da      	uxtb	r2, r3
 800807e:	4b31      	ldr	r3, [pc, #196]	@ (8008144 <xPortStartScheduler+0x134>)
 8008080:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008082:	4b31      	ldr	r3, [pc, #196]	@ (8008148 <xPortStartScheduler+0x138>)
 8008084:	2207      	movs	r2, #7
 8008086:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008088:	e009      	b.n	800809e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800808a:	4b2f      	ldr	r3, [pc, #188]	@ (8008148 <xPortStartScheduler+0x138>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	3b01      	subs	r3, #1
 8008090:	4a2d      	ldr	r2, [pc, #180]	@ (8008148 <xPortStartScheduler+0x138>)
 8008092:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008094:	78fb      	ldrb	r3, [r7, #3]
 8008096:	b2db      	uxtb	r3, r3
 8008098:	005b      	lsls	r3, r3, #1
 800809a:	b2db      	uxtb	r3, r3
 800809c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800809e:	78fb      	ldrb	r3, [r7, #3]
 80080a0:	b2db      	uxtb	r3, r3
 80080a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080a6:	2b80      	cmp	r3, #128	@ 0x80
 80080a8:	d0ef      	beq.n	800808a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80080aa:	4b27      	ldr	r3, [pc, #156]	@ (8008148 <xPortStartScheduler+0x138>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f1c3 0307 	rsb	r3, r3, #7
 80080b2:	2b04      	cmp	r3, #4
 80080b4:	d00b      	beq.n	80080ce <xPortStartScheduler+0xbe>
	__asm volatile
 80080b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080ba:	f383 8811 	msr	BASEPRI, r3
 80080be:	f3bf 8f6f 	isb	sy
 80080c2:	f3bf 8f4f 	dsb	sy
 80080c6:	60bb      	str	r3, [r7, #8]
}
 80080c8:	bf00      	nop
 80080ca:	bf00      	nop
 80080cc:	e7fd      	b.n	80080ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80080ce:	4b1e      	ldr	r3, [pc, #120]	@ (8008148 <xPortStartScheduler+0x138>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	021b      	lsls	r3, r3, #8
 80080d4:	4a1c      	ldr	r2, [pc, #112]	@ (8008148 <xPortStartScheduler+0x138>)
 80080d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80080d8:	4b1b      	ldr	r3, [pc, #108]	@ (8008148 <xPortStartScheduler+0x138>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80080e0:	4a19      	ldr	r2, [pc, #100]	@ (8008148 <xPortStartScheduler+0x138>)
 80080e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	b2da      	uxtb	r2, r3
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80080ec:	4b17      	ldr	r3, [pc, #92]	@ (800814c <xPortStartScheduler+0x13c>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4a16      	ldr	r2, [pc, #88]	@ (800814c <xPortStartScheduler+0x13c>)
 80080f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80080f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80080f8:	4b14      	ldr	r3, [pc, #80]	@ (800814c <xPortStartScheduler+0x13c>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4a13      	ldr	r2, [pc, #76]	@ (800814c <xPortStartScheduler+0x13c>)
 80080fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008102:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008104:	f000 f8da 	bl	80082bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008108:	4b11      	ldr	r3, [pc, #68]	@ (8008150 <xPortStartScheduler+0x140>)
 800810a:	2200      	movs	r2, #0
 800810c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800810e:	f000 f8f9 	bl	8008304 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008112:	4b10      	ldr	r3, [pc, #64]	@ (8008154 <xPortStartScheduler+0x144>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4a0f      	ldr	r2, [pc, #60]	@ (8008154 <xPortStartScheduler+0x144>)
 8008118:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800811c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800811e:	f7ff ff63 	bl	8007fe8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008122:	f7fe fbfd 	bl	8006920 <vTaskSwitchContext>
	prvTaskExitError();
 8008126:	f7ff ff1d 	bl	8007f64 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800812a:	2300      	movs	r3, #0
}
 800812c:	4618      	mov	r0, r3
 800812e:	3718      	adds	r7, #24
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}
 8008134:	e000ed00 	.word	0xe000ed00
 8008138:	410fc271 	.word	0x410fc271
 800813c:	410fc270 	.word	0x410fc270
 8008140:	e000e400 	.word	0xe000e400
 8008144:	200010c4 	.word	0x200010c4
 8008148:	200010c8 	.word	0x200010c8
 800814c:	e000ed20 	.word	0xe000ed20
 8008150:	2000000c 	.word	0x2000000c
 8008154:	e000ef34 	.word	0xe000ef34

08008158 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008158:	b480      	push	{r7}
 800815a:	b083      	sub	sp, #12
 800815c:	af00      	add	r7, sp, #0
	__asm volatile
 800815e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008162:	f383 8811 	msr	BASEPRI, r3
 8008166:	f3bf 8f6f 	isb	sy
 800816a:	f3bf 8f4f 	dsb	sy
 800816e:	607b      	str	r3, [r7, #4]
}
 8008170:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008172:	4b10      	ldr	r3, [pc, #64]	@ (80081b4 <vPortEnterCritical+0x5c>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	3301      	adds	r3, #1
 8008178:	4a0e      	ldr	r2, [pc, #56]	@ (80081b4 <vPortEnterCritical+0x5c>)
 800817a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800817c:	4b0d      	ldr	r3, [pc, #52]	@ (80081b4 <vPortEnterCritical+0x5c>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	2b01      	cmp	r3, #1
 8008182:	d110      	bne.n	80081a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008184:	4b0c      	ldr	r3, [pc, #48]	@ (80081b8 <vPortEnterCritical+0x60>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	b2db      	uxtb	r3, r3
 800818a:	2b00      	cmp	r3, #0
 800818c:	d00b      	beq.n	80081a6 <vPortEnterCritical+0x4e>
	__asm volatile
 800818e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008192:	f383 8811 	msr	BASEPRI, r3
 8008196:	f3bf 8f6f 	isb	sy
 800819a:	f3bf 8f4f 	dsb	sy
 800819e:	603b      	str	r3, [r7, #0]
}
 80081a0:	bf00      	nop
 80081a2:	bf00      	nop
 80081a4:	e7fd      	b.n	80081a2 <vPortEnterCritical+0x4a>
	}
}
 80081a6:	bf00      	nop
 80081a8:	370c      	adds	r7, #12
 80081aa:	46bd      	mov	sp, r7
 80081ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b0:	4770      	bx	lr
 80081b2:	bf00      	nop
 80081b4:	2000000c 	.word	0x2000000c
 80081b8:	e000ed04 	.word	0xe000ed04

080081bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80081bc:	b480      	push	{r7}
 80081be:	b083      	sub	sp, #12
 80081c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80081c2:	4b12      	ldr	r3, [pc, #72]	@ (800820c <vPortExitCritical+0x50>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d10b      	bne.n	80081e2 <vPortExitCritical+0x26>
	__asm volatile
 80081ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081ce:	f383 8811 	msr	BASEPRI, r3
 80081d2:	f3bf 8f6f 	isb	sy
 80081d6:	f3bf 8f4f 	dsb	sy
 80081da:	607b      	str	r3, [r7, #4]
}
 80081dc:	bf00      	nop
 80081de:	bf00      	nop
 80081e0:	e7fd      	b.n	80081de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80081e2:	4b0a      	ldr	r3, [pc, #40]	@ (800820c <vPortExitCritical+0x50>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	3b01      	subs	r3, #1
 80081e8:	4a08      	ldr	r2, [pc, #32]	@ (800820c <vPortExitCritical+0x50>)
 80081ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80081ec:	4b07      	ldr	r3, [pc, #28]	@ (800820c <vPortExitCritical+0x50>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d105      	bne.n	8008200 <vPortExitCritical+0x44>
 80081f4:	2300      	movs	r3, #0
 80081f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	f383 8811 	msr	BASEPRI, r3
}
 80081fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008200:	bf00      	nop
 8008202:	370c      	adds	r7, #12
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr
 800820c:	2000000c 	.word	0x2000000c

08008210 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008210:	f3ef 8009 	mrs	r0, PSP
 8008214:	f3bf 8f6f 	isb	sy
 8008218:	4b15      	ldr	r3, [pc, #84]	@ (8008270 <pxCurrentTCBConst>)
 800821a:	681a      	ldr	r2, [r3, #0]
 800821c:	f01e 0f10 	tst.w	lr, #16
 8008220:	bf08      	it	eq
 8008222:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008226:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800822a:	6010      	str	r0, [r2, #0]
 800822c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008230:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008234:	f380 8811 	msr	BASEPRI, r0
 8008238:	f3bf 8f4f 	dsb	sy
 800823c:	f3bf 8f6f 	isb	sy
 8008240:	f7fe fb6e 	bl	8006920 <vTaskSwitchContext>
 8008244:	f04f 0000 	mov.w	r0, #0
 8008248:	f380 8811 	msr	BASEPRI, r0
 800824c:	bc09      	pop	{r0, r3}
 800824e:	6819      	ldr	r1, [r3, #0]
 8008250:	6808      	ldr	r0, [r1, #0]
 8008252:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008256:	f01e 0f10 	tst.w	lr, #16
 800825a:	bf08      	it	eq
 800825c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008260:	f380 8809 	msr	PSP, r0
 8008264:	f3bf 8f6f 	isb	sy
 8008268:	4770      	bx	lr
 800826a:	bf00      	nop
 800826c:	f3af 8000 	nop.w

08008270 <pxCurrentTCBConst>:
 8008270:	20000a90 	.word	0x20000a90
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008274:	bf00      	nop
 8008276:	bf00      	nop

08008278 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b082      	sub	sp, #8
 800827c:	af00      	add	r7, sp, #0
	__asm volatile
 800827e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008282:	f383 8811 	msr	BASEPRI, r3
 8008286:	f3bf 8f6f 	isb	sy
 800828a:	f3bf 8f4f 	dsb	sy
 800828e:	607b      	str	r3, [r7, #4]
}
 8008290:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008292:	f7fe fa8b 	bl	80067ac <xTaskIncrementTick>
 8008296:	4603      	mov	r3, r0
 8008298:	2b00      	cmp	r3, #0
 800829a:	d003      	beq.n	80082a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800829c:	4b06      	ldr	r3, [pc, #24]	@ (80082b8 <xPortSysTickHandler+0x40>)
 800829e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082a2:	601a      	str	r2, [r3, #0]
 80082a4:	2300      	movs	r3, #0
 80082a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	f383 8811 	msr	BASEPRI, r3
}
 80082ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80082b0:	bf00      	nop
 80082b2:	3708      	adds	r7, #8
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}
 80082b8:	e000ed04 	.word	0xe000ed04

080082bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80082bc:	b480      	push	{r7}
 80082be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80082c0:	4b0b      	ldr	r3, [pc, #44]	@ (80082f0 <vPortSetupTimerInterrupt+0x34>)
 80082c2:	2200      	movs	r2, #0
 80082c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80082c6:	4b0b      	ldr	r3, [pc, #44]	@ (80082f4 <vPortSetupTimerInterrupt+0x38>)
 80082c8:	2200      	movs	r2, #0
 80082ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80082cc:	4b0a      	ldr	r3, [pc, #40]	@ (80082f8 <vPortSetupTimerInterrupt+0x3c>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4a0a      	ldr	r2, [pc, #40]	@ (80082fc <vPortSetupTimerInterrupt+0x40>)
 80082d2:	fba2 2303 	umull	r2, r3, r2, r3
 80082d6:	099b      	lsrs	r3, r3, #6
 80082d8:	4a09      	ldr	r2, [pc, #36]	@ (8008300 <vPortSetupTimerInterrupt+0x44>)
 80082da:	3b01      	subs	r3, #1
 80082dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80082de:	4b04      	ldr	r3, [pc, #16]	@ (80082f0 <vPortSetupTimerInterrupt+0x34>)
 80082e0:	2207      	movs	r2, #7
 80082e2:	601a      	str	r2, [r3, #0]
}
 80082e4:	bf00      	nop
 80082e6:	46bd      	mov	sp, r7
 80082e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ec:	4770      	bx	lr
 80082ee:	bf00      	nop
 80082f0:	e000e010 	.word	0xe000e010
 80082f4:	e000e018 	.word	0xe000e018
 80082f8:	20000000 	.word	0x20000000
 80082fc:	10624dd3 	.word	0x10624dd3
 8008300:	e000e014 	.word	0xe000e014

08008304 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008304:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008314 <vPortEnableVFP+0x10>
 8008308:	6801      	ldr	r1, [r0, #0]
 800830a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800830e:	6001      	str	r1, [r0, #0]
 8008310:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008312:	bf00      	nop
 8008314:	e000ed88 	.word	0xe000ed88

08008318 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008318:	b480      	push	{r7}
 800831a:	b085      	sub	sp, #20
 800831c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800831e:	f3ef 8305 	mrs	r3, IPSR
 8008322:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2b0f      	cmp	r3, #15
 8008328:	d915      	bls.n	8008356 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800832a:	4a18      	ldr	r2, [pc, #96]	@ (800838c <vPortValidateInterruptPriority+0x74>)
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	4413      	add	r3, r2
 8008330:	781b      	ldrb	r3, [r3, #0]
 8008332:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008334:	4b16      	ldr	r3, [pc, #88]	@ (8008390 <vPortValidateInterruptPriority+0x78>)
 8008336:	781b      	ldrb	r3, [r3, #0]
 8008338:	7afa      	ldrb	r2, [r7, #11]
 800833a:	429a      	cmp	r2, r3
 800833c:	d20b      	bcs.n	8008356 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800833e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008342:	f383 8811 	msr	BASEPRI, r3
 8008346:	f3bf 8f6f 	isb	sy
 800834a:	f3bf 8f4f 	dsb	sy
 800834e:	607b      	str	r3, [r7, #4]
}
 8008350:	bf00      	nop
 8008352:	bf00      	nop
 8008354:	e7fd      	b.n	8008352 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008356:	4b0f      	ldr	r3, [pc, #60]	@ (8008394 <vPortValidateInterruptPriority+0x7c>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800835e:	4b0e      	ldr	r3, [pc, #56]	@ (8008398 <vPortValidateInterruptPriority+0x80>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	429a      	cmp	r2, r3
 8008364:	d90b      	bls.n	800837e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800836a:	f383 8811 	msr	BASEPRI, r3
 800836e:	f3bf 8f6f 	isb	sy
 8008372:	f3bf 8f4f 	dsb	sy
 8008376:	603b      	str	r3, [r7, #0]
}
 8008378:	bf00      	nop
 800837a:	bf00      	nop
 800837c:	e7fd      	b.n	800837a <vPortValidateInterruptPriority+0x62>
	}
 800837e:	bf00      	nop
 8008380:	3714      	adds	r7, #20
 8008382:	46bd      	mov	sp, r7
 8008384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008388:	4770      	bx	lr
 800838a:	bf00      	nop
 800838c:	e000e3f0 	.word	0xe000e3f0
 8008390:	200010c4 	.word	0x200010c4
 8008394:	e000ed0c 	.word	0xe000ed0c
 8008398:	200010c8 	.word	0x200010c8

0800839c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b08a      	sub	sp, #40	@ 0x28
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80083a4:	2300      	movs	r3, #0
 80083a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80083a8:	f7fe f8b4 	bl	8006514 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80083ac:	4b5c      	ldr	r3, [pc, #368]	@ (8008520 <pvPortMalloc+0x184>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d101      	bne.n	80083b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80083b4:	f000 f924 	bl	8008600 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80083b8:	4b5a      	ldr	r3, [pc, #360]	@ (8008524 <pvPortMalloc+0x188>)
 80083ba:	681a      	ldr	r2, [r3, #0]
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	4013      	ands	r3, r2
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	f040 8095 	bne.w	80084f0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d01e      	beq.n	800840a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80083cc:	2208      	movs	r2, #8
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	4413      	add	r3, r2
 80083d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f003 0307 	and.w	r3, r3, #7
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d015      	beq.n	800840a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f023 0307 	bic.w	r3, r3, #7
 80083e4:	3308      	adds	r3, #8
 80083e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f003 0307 	and.w	r3, r3, #7
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d00b      	beq.n	800840a <pvPortMalloc+0x6e>
	__asm volatile
 80083f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083f6:	f383 8811 	msr	BASEPRI, r3
 80083fa:	f3bf 8f6f 	isb	sy
 80083fe:	f3bf 8f4f 	dsb	sy
 8008402:	617b      	str	r3, [r7, #20]
}
 8008404:	bf00      	nop
 8008406:	bf00      	nop
 8008408:	e7fd      	b.n	8008406 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d06f      	beq.n	80084f0 <pvPortMalloc+0x154>
 8008410:	4b45      	ldr	r3, [pc, #276]	@ (8008528 <pvPortMalloc+0x18c>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	687a      	ldr	r2, [r7, #4]
 8008416:	429a      	cmp	r2, r3
 8008418:	d86a      	bhi.n	80084f0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800841a:	4b44      	ldr	r3, [pc, #272]	@ (800852c <pvPortMalloc+0x190>)
 800841c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800841e:	4b43      	ldr	r3, [pc, #268]	@ (800852c <pvPortMalloc+0x190>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008424:	e004      	b.n	8008430 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008428:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800842a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	687a      	ldr	r2, [r7, #4]
 8008436:	429a      	cmp	r2, r3
 8008438:	d903      	bls.n	8008442 <pvPortMalloc+0xa6>
 800843a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d1f1      	bne.n	8008426 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008442:	4b37      	ldr	r3, [pc, #220]	@ (8008520 <pvPortMalloc+0x184>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008448:	429a      	cmp	r2, r3
 800844a:	d051      	beq.n	80084f0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800844c:	6a3b      	ldr	r3, [r7, #32]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	2208      	movs	r2, #8
 8008452:	4413      	add	r3, r2
 8008454:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008458:	681a      	ldr	r2, [r3, #0]
 800845a:	6a3b      	ldr	r3, [r7, #32]
 800845c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800845e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008460:	685a      	ldr	r2, [r3, #4]
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	1ad2      	subs	r2, r2, r3
 8008466:	2308      	movs	r3, #8
 8008468:	005b      	lsls	r3, r3, #1
 800846a:	429a      	cmp	r2, r3
 800846c:	d920      	bls.n	80084b0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800846e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	4413      	add	r3, r2
 8008474:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008476:	69bb      	ldr	r3, [r7, #24]
 8008478:	f003 0307 	and.w	r3, r3, #7
 800847c:	2b00      	cmp	r3, #0
 800847e:	d00b      	beq.n	8008498 <pvPortMalloc+0xfc>
	__asm volatile
 8008480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008484:	f383 8811 	msr	BASEPRI, r3
 8008488:	f3bf 8f6f 	isb	sy
 800848c:	f3bf 8f4f 	dsb	sy
 8008490:	613b      	str	r3, [r7, #16]
}
 8008492:	bf00      	nop
 8008494:	bf00      	nop
 8008496:	e7fd      	b.n	8008494 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800849a:	685a      	ldr	r2, [r3, #4]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	1ad2      	subs	r2, r2, r3
 80084a0:	69bb      	ldr	r3, [r7, #24]
 80084a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80084a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084a6:	687a      	ldr	r2, [r7, #4]
 80084a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80084aa:	69b8      	ldr	r0, [r7, #24]
 80084ac:	f000 f90a 	bl	80086c4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80084b0:	4b1d      	ldr	r3, [pc, #116]	@ (8008528 <pvPortMalloc+0x18c>)
 80084b2:	681a      	ldr	r2, [r3, #0]
 80084b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084b6:	685b      	ldr	r3, [r3, #4]
 80084b8:	1ad3      	subs	r3, r2, r3
 80084ba:	4a1b      	ldr	r2, [pc, #108]	@ (8008528 <pvPortMalloc+0x18c>)
 80084bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80084be:	4b1a      	ldr	r3, [pc, #104]	@ (8008528 <pvPortMalloc+0x18c>)
 80084c0:	681a      	ldr	r2, [r3, #0]
 80084c2:	4b1b      	ldr	r3, [pc, #108]	@ (8008530 <pvPortMalloc+0x194>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	429a      	cmp	r2, r3
 80084c8:	d203      	bcs.n	80084d2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80084ca:	4b17      	ldr	r3, [pc, #92]	@ (8008528 <pvPortMalloc+0x18c>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	4a18      	ldr	r2, [pc, #96]	@ (8008530 <pvPortMalloc+0x194>)
 80084d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80084d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084d4:	685a      	ldr	r2, [r3, #4]
 80084d6:	4b13      	ldr	r3, [pc, #76]	@ (8008524 <pvPortMalloc+0x188>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	431a      	orrs	r2, r3
 80084dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80084e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084e2:	2200      	movs	r2, #0
 80084e4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80084e6:	4b13      	ldr	r3, [pc, #76]	@ (8008534 <pvPortMalloc+0x198>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	3301      	adds	r3, #1
 80084ec:	4a11      	ldr	r2, [pc, #68]	@ (8008534 <pvPortMalloc+0x198>)
 80084ee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80084f0:	f7fe f81e 	bl	8006530 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80084f4:	69fb      	ldr	r3, [r7, #28]
 80084f6:	f003 0307 	and.w	r3, r3, #7
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d00b      	beq.n	8008516 <pvPortMalloc+0x17a>
	__asm volatile
 80084fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008502:	f383 8811 	msr	BASEPRI, r3
 8008506:	f3bf 8f6f 	isb	sy
 800850a:	f3bf 8f4f 	dsb	sy
 800850e:	60fb      	str	r3, [r7, #12]
}
 8008510:	bf00      	nop
 8008512:	bf00      	nop
 8008514:	e7fd      	b.n	8008512 <pvPortMalloc+0x176>
	return pvReturn;
 8008516:	69fb      	ldr	r3, [r7, #28]
}
 8008518:	4618      	mov	r0, r3
 800851a:	3728      	adds	r7, #40	@ 0x28
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}
 8008520:	20004cd4 	.word	0x20004cd4
 8008524:	20004ce8 	.word	0x20004ce8
 8008528:	20004cd8 	.word	0x20004cd8
 800852c:	20004ccc 	.word	0x20004ccc
 8008530:	20004cdc 	.word	0x20004cdc
 8008534:	20004ce0 	.word	0x20004ce0

08008538 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b086      	sub	sp, #24
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d04f      	beq.n	80085ea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800854a:	2308      	movs	r3, #8
 800854c:	425b      	negs	r3, r3
 800854e:	697a      	ldr	r2, [r7, #20]
 8008550:	4413      	add	r3, r2
 8008552:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	685a      	ldr	r2, [r3, #4]
 800855c:	4b25      	ldr	r3, [pc, #148]	@ (80085f4 <vPortFree+0xbc>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4013      	ands	r3, r2
 8008562:	2b00      	cmp	r3, #0
 8008564:	d10b      	bne.n	800857e <vPortFree+0x46>
	__asm volatile
 8008566:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800856a:	f383 8811 	msr	BASEPRI, r3
 800856e:	f3bf 8f6f 	isb	sy
 8008572:	f3bf 8f4f 	dsb	sy
 8008576:	60fb      	str	r3, [r7, #12]
}
 8008578:	bf00      	nop
 800857a:	bf00      	nop
 800857c:	e7fd      	b.n	800857a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800857e:	693b      	ldr	r3, [r7, #16]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d00b      	beq.n	800859e <vPortFree+0x66>
	__asm volatile
 8008586:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800858a:	f383 8811 	msr	BASEPRI, r3
 800858e:	f3bf 8f6f 	isb	sy
 8008592:	f3bf 8f4f 	dsb	sy
 8008596:	60bb      	str	r3, [r7, #8]
}
 8008598:	bf00      	nop
 800859a:	bf00      	nop
 800859c:	e7fd      	b.n	800859a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	685a      	ldr	r2, [r3, #4]
 80085a2:	4b14      	ldr	r3, [pc, #80]	@ (80085f4 <vPortFree+0xbc>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	4013      	ands	r3, r2
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d01e      	beq.n	80085ea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d11a      	bne.n	80085ea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	685a      	ldr	r2, [r3, #4]
 80085b8:	4b0e      	ldr	r3, [pc, #56]	@ (80085f4 <vPortFree+0xbc>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	43db      	mvns	r3, r3
 80085be:	401a      	ands	r2, r3
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80085c4:	f7fd ffa6 	bl	8006514 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	685a      	ldr	r2, [r3, #4]
 80085cc:	4b0a      	ldr	r3, [pc, #40]	@ (80085f8 <vPortFree+0xc0>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4413      	add	r3, r2
 80085d2:	4a09      	ldr	r2, [pc, #36]	@ (80085f8 <vPortFree+0xc0>)
 80085d4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80085d6:	6938      	ldr	r0, [r7, #16]
 80085d8:	f000 f874 	bl	80086c4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80085dc:	4b07      	ldr	r3, [pc, #28]	@ (80085fc <vPortFree+0xc4>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	3301      	adds	r3, #1
 80085e2:	4a06      	ldr	r2, [pc, #24]	@ (80085fc <vPortFree+0xc4>)
 80085e4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80085e6:	f7fd ffa3 	bl	8006530 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80085ea:	bf00      	nop
 80085ec:	3718      	adds	r7, #24
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}
 80085f2:	bf00      	nop
 80085f4:	20004ce8 	.word	0x20004ce8
 80085f8:	20004cd8 	.word	0x20004cd8
 80085fc:	20004ce4 	.word	0x20004ce4

08008600 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008600:	b480      	push	{r7}
 8008602:	b085      	sub	sp, #20
 8008604:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008606:	f643 33ff 	movw	r3, #15359	@ 0x3bff
 800860a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800860c:	4b27      	ldr	r3, [pc, #156]	@ (80086ac <prvHeapInit+0xac>)
 800860e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	f003 0307 	and.w	r3, r3, #7
 8008616:	2b00      	cmp	r3, #0
 8008618:	d00c      	beq.n	8008634 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	3307      	adds	r3, #7
 800861e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	f023 0307 	bic.w	r3, r3, #7
 8008626:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008628:	68ba      	ldr	r2, [r7, #8]
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	1ad3      	subs	r3, r2, r3
 800862e:	4a1f      	ldr	r2, [pc, #124]	@ (80086ac <prvHeapInit+0xac>)
 8008630:	4413      	add	r3, r2
 8008632:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008638:	4a1d      	ldr	r2, [pc, #116]	@ (80086b0 <prvHeapInit+0xb0>)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800863e:	4b1c      	ldr	r3, [pc, #112]	@ (80086b0 <prvHeapInit+0xb0>)
 8008640:	2200      	movs	r2, #0
 8008642:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	68ba      	ldr	r2, [r7, #8]
 8008648:	4413      	add	r3, r2
 800864a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800864c:	2208      	movs	r2, #8
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	1a9b      	subs	r3, r3, r2
 8008652:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	f023 0307 	bic.w	r3, r3, #7
 800865a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	4a15      	ldr	r2, [pc, #84]	@ (80086b4 <prvHeapInit+0xb4>)
 8008660:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008662:	4b14      	ldr	r3, [pc, #80]	@ (80086b4 <prvHeapInit+0xb4>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	2200      	movs	r2, #0
 8008668:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800866a:	4b12      	ldr	r3, [pc, #72]	@ (80086b4 <prvHeapInit+0xb4>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	2200      	movs	r2, #0
 8008670:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	68fa      	ldr	r2, [r7, #12]
 800867a:	1ad2      	subs	r2, r2, r3
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008680:	4b0c      	ldr	r3, [pc, #48]	@ (80086b4 <prvHeapInit+0xb4>)
 8008682:	681a      	ldr	r2, [r3, #0]
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	685b      	ldr	r3, [r3, #4]
 800868c:	4a0a      	ldr	r2, [pc, #40]	@ (80086b8 <prvHeapInit+0xb8>)
 800868e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	685b      	ldr	r3, [r3, #4]
 8008694:	4a09      	ldr	r2, [pc, #36]	@ (80086bc <prvHeapInit+0xbc>)
 8008696:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008698:	4b09      	ldr	r3, [pc, #36]	@ (80086c0 <prvHeapInit+0xc0>)
 800869a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800869e:	601a      	str	r2, [r3, #0]
}
 80086a0:	bf00      	nop
 80086a2:	3714      	adds	r7, #20
 80086a4:	46bd      	mov	sp, r7
 80086a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086aa:	4770      	bx	lr
 80086ac:	200010cc 	.word	0x200010cc
 80086b0:	20004ccc 	.word	0x20004ccc
 80086b4:	20004cd4 	.word	0x20004cd4
 80086b8:	20004cdc 	.word	0x20004cdc
 80086bc:	20004cd8 	.word	0x20004cd8
 80086c0:	20004ce8 	.word	0x20004ce8

080086c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80086c4:	b480      	push	{r7}
 80086c6:	b085      	sub	sp, #20
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80086cc:	4b28      	ldr	r3, [pc, #160]	@ (8008770 <prvInsertBlockIntoFreeList+0xac>)
 80086ce:	60fb      	str	r3, [r7, #12]
 80086d0:	e002      	b.n	80086d8 <prvInsertBlockIntoFreeList+0x14>
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	60fb      	str	r3, [r7, #12]
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	687a      	ldr	r2, [r7, #4]
 80086de:	429a      	cmp	r2, r3
 80086e0:	d8f7      	bhi.n	80086d2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	685b      	ldr	r3, [r3, #4]
 80086ea:	68ba      	ldr	r2, [r7, #8]
 80086ec:	4413      	add	r3, r2
 80086ee:	687a      	ldr	r2, [r7, #4]
 80086f0:	429a      	cmp	r2, r3
 80086f2:	d108      	bne.n	8008706 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	685a      	ldr	r2, [r3, #4]
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	685b      	ldr	r3, [r3, #4]
 80086fc:	441a      	add	r2, r3
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	685b      	ldr	r3, [r3, #4]
 800870e:	68ba      	ldr	r2, [r7, #8]
 8008710:	441a      	add	r2, r3
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	429a      	cmp	r2, r3
 8008718:	d118      	bne.n	800874c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681a      	ldr	r2, [r3, #0]
 800871e:	4b15      	ldr	r3, [pc, #84]	@ (8008774 <prvInsertBlockIntoFreeList+0xb0>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	429a      	cmp	r2, r3
 8008724:	d00d      	beq.n	8008742 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	685a      	ldr	r2, [r3, #4]
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	441a      	add	r2, r3
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	681a      	ldr	r2, [r3, #0]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	601a      	str	r2, [r3, #0]
 8008740:	e008      	b.n	8008754 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008742:	4b0c      	ldr	r3, [pc, #48]	@ (8008774 <prvInsertBlockIntoFreeList+0xb0>)
 8008744:	681a      	ldr	r2, [r3, #0]
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	601a      	str	r2, [r3, #0]
 800874a:	e003      	b.n	8008754 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681a      	ldr	r2, [r3, #0]
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008754:	68fa      	ldr	r2, [r7, #12]
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	429a      	cmp	r2, r3
 800875a:	d002      	beq.n	8008762 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	687a      	ldr	r2, [r7, #4]
 8008760:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008762:	bf00      	nop
 8008764:	3714      	adds	r7, #20
 8008766:	46bd      	mov	sp, r7
 8008768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876c:	4770      	bx	lr
 800876e:	bf00      	nop
 8008770:	20004ccc 	.word	0x20004ccc
 8008774:	20004cd4 	.word	0x20004cd4

08008778 <swapfunc>:
 8008778:	2b02      	cmp	r3, #2
 800877a:	b510      	push	{r4, lr}
 800877c:	d00a      	beq.n	8008794 <swapfunc+0x1c>
 800877e:	0892      	lsrs	r2, r2, #2
 8008780:	3a01      	subs	r2, #1
 8008782:	6803      	ldr	r3, [r0, #0]
 8008784:	680c      	ldr	r4, [r1, #0]
 8008786:	f840 4b04 	str.w	r4, [r0], #4
 800878a:	2a00      	cmp	r2, #0
 800878c:	f841 3b04 	str.w	r3, [r1], #4
 8008790:	dcf6      	bgt.n	8008780 <swapfunc+0x8>
 8008792:	bd10      	pop	{r4, pc}
 8008794:	4402      	add	r2, r0
 8008796:	780c      	ldrb	r4, [r1, #0]
 8008798:	7803      	ldrb	r3, [r0, #0]
 800879a:	f800 4b01 	strb.w	r4, [r0], #1
 800879e:	f801 3b01 	strb.w	r3, [r1], #1
 80087a2:	1a13      	subs	r3, r2, r0
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	dcf6      	bgt.n	8008796 <swapfunc+0x1e>
 80087a8:	e7f3      	b.n	8008792 <swapfunc+0x1a>

080087aa <med3.constprop.0>:
 80087aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ac:	460f      	mov	r7, r1
 80087ae:	4616      	mov	r6, r2
 80087b0:	4604      	mov	r4, r0
 80087b2:	461d      	mov	r5, r3
 80087b4:	4798      	blx	r3
 80087b6:	2800      	cmp	r0, #0
 80087b8:	4631      	mov	r1, r6
 80087ba:	4638      	mov	r0, r7
 80087bc:	da0c      	bge.n	80087d8 <med3.constprop.0+0x2e>
 80087be:	47a8      	blx	r5
 80087c0:	2800      	cmp	r0, #0
 80087c2:	da02      	bge.n	80087ca <med3.constprop.0+0x20>
 80087c4:	463c      	mov	r4, r7
 80087c6:	4620      	mov	r0, r4
 80087c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087ca:	4631      	mov	r1, r6
 80087cc:	4620      	mov	r0, r4
 80087ce:	47a8      	blx	r5
 80087d0:	2800      	cmp	r0, #0
 80087d2:	daf8      	bge.n	80087c6 <med3.constprop.0+0x1c>
 80087d4:	4634      	mov	r4, r6
 80087d6:	e7f6      	b.n	80087c6 <med3.constprop.0+0x1c>
 80087d8:	47a8      	blx	r5
 80087da:	2800      	cmp	r0, #0
 80087dc:	dcf2      	bgt.n	80087c4 <med3.constprop.0+0x1a>
 80087de:	4631      	mov	r1, r6
 80087e0:	4620      	mov	r0, r4
 80087e2:	47a8      	blx	r5
 80087e4:	2800      	cmp	r0, #0
 80087e6:	daf5      	bge.n	80087d4 <med3.constprop.0+0x2a>
 80087e8:	e7ed      	b.n	80087c6 <med3.constprop.0+0x1c>

080087ea <qsort>:
 80087ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087ee:	b095      	sub	sp, #84	@ 0x54
 80087f0:	4607      	mov	r7, r0
 80087f2:	9300      	str	r3, [sp, #0]
 80087f4:	ea40 0302 	orr.w	r3, r0, r2
 80087f8:	079b      	lsls	r3, r3, #30
 80087fa:	4615      	mov	r5, r2
 80087fc:	d118      	bne.n	8008830 <qsort+0x46>
 80087fe:	f1b2 0804 	subs.w	r8, r2, #4
 8008802:	bf18      	it	ne
 8008804:	f04f 0801 	movne.w	r8, #1
 8008808:	2300      	movs	r3, #0
 800880a:	9301      	str	r3, [sp, #4]
 800880c:	fb05 f401 	mul.w	r4, r5, r1
 8008810:	193b      	adds	r3, r7, r4
 8008812:	2906      	cmp	r1, #6
 8008814:	eb07 0b05 	add.w	fp, r7, r5
 8008818:	9302      	str	r3, [sp, #8]
 800881a:	d828      	bhi.n	800886e <qsort+0x84>
 800881c:	9b02      	ldr	r3, [sp, #8]
 800881e:	459b      	cmp	fp, r3
 8008820:	d310      	bcc.n	8008844 <qsort+0x5a>
 8008822:	9b01      	ldr	r3, [sp, #4]
 8008824:	2b00      	cmp	r3, #0
 8008826:	f040 8117 	bne.w	8008a58 <qsort+0x26e>
 800882a:	b015      	add	sp, #84	@ 0x54
 800882c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008830:	f04f 0802 	mov.w	r8, #2
 8008834:	e7e8      	b.n	8008808 <qsort+0x1e>
 8008836:	4643      	mov	r3, r8
 8008838:	462a      	mov	r2, r5
 800883a:	4631      	mov	r1, r6
 800883c:	4620      	mov	r0, r4
 800883e:	f7ff ff9b 	bl	8008778 <swapfunc>
 8008842:	e00f      	b.n	8008864 <qsort+0x7a>
 8008844:	465c      	mov	r4, fp
 8008846:	e00e      	b.n	8008866 <qsort+0x7c>
 8008848:	1b66      	subs	r6, r4, r5
 800884a:	9b00      	ldr	r3, [sp, #0]
 800884c:	4621      	mov	r1, r4
 800884e:	4630      	mov	r0, r6
 8008850:	4798      	blx	r3
 8008852:	2800      	cmp	r0, #0
 8008854:	dd09      	ble.n	800886a <qsort+0x80>
 8008856:	f1b8 0f00 	cmp.w	r8, #0
 800885a:	d1ec      	bne.n	8008836 <qsort+0x4c>
 800885c:	6823      	ldr	r3, [r4, #0]
 800885e:	6832      	ldr	r2, [r6, #0]
 8008860:	6022      	str	r2, [r4, #0]
 8008862:	6033      	str	r3, [r6, #0]
 8008864:	4634      	mov	r4, r6
 8008866:	42a7      	cmp	r7, r4
 8008868:	d3ee      	bcc.n	8008848 <qsort+0x5e>
 800886a:	44ab      	add	fp, r5
 800886c:	e7d6      	b.n	800881c <qsort+0x32>
 800886e:	ea4f 0951 	mov.w	r9, r1, lsr #1
 8008872:	1b64      	subs	r4, r4, r5
 8008874:	2907      	cmp	r1, #7
 8008876:	fb05 7909 	mla	r9, r5, r9, r7
 800887a:	443c      	add	r4, r7
 800887c:	d021      	beq.n	80088c2 <qsort+0xd8>
 800887e:	2928      	cmp	r1, #40	@ 0x28
 8008880:	d944      	bls.n	800890c <qsort+0x122>
 8008882:	08ce      	lsrs	r6, r1, #3
 8008884:	436e      	muls	r6, r5
 8008886:	9b00      	ldr	r3, [sp, #0]
 8008888:	eb07 0246 	add.w	r2, r7, r6, lsl #1
 800888c:	19b9      	adds	r1, r7, r6
 800888e:	4638      	mov	r0, r7
 8008890:	f7ff ff8b 	bl	80087aa <med3.constprop.0>
 8008894:	4649      	mov	r1, r9
 8008896:	eb09 0206 	add.w	r2, r9, r6
 800889a:	9b00      	ldr	r3, [sp, #0]
 800889c:	4682      	mov	sl, r0
 800889e:	1b88      	subs	r0, r1, r6
 80088a0:	f7ff ff83 	bl	80087aa <med3.constprop.0>
 80088a4:	4622      	mov	r2, r4
 80088a6:	9b00      	ldr	r3, [sp, #0]
 80088a8:	4681      	mov	r9, r0
 80088aa:	1ba1      	subs	r1, r4, r6
 80088ac:	eba4 0046 	sub.w	r0, r4, r6, lsl #1
 80088b0:	f7ff ff7b 	bl	80087aa <med3.constprop.0>
 80088b4:	4602      	mov	r2, r0
 80088b6:	4649      	mov	r1, r9
 80088b8:	9b00      	ldr	r3, [sp, #0]
 80088ba:	4650      	mov	r0, sl
 80088bc:	f7ff ff75 	bl	80087aa <med3.constprop.0>
 80088c0:	4681      	mov	r9, r0
 80088c2:	f1b8 0f00 	cmp.w	r8, #0
 80088c6:	d124      	bne.n	8008912 <qsort+0x128>
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	f8d9 2000 	ldr.w	r2, [r9]
 80088ce:	603a      	str	r2, [r7, #0]
 80088d0:	f8c9 3000 	str.w	r3, [r9]
 80088d4:	46d9      	mov	r9, fp
 80088d6:	46a2      	mov	sl, r4
 80088d8:	465e      	mov	r6, fp
 80088da:	2300      	movs	r3, #0
 80088dc:	45a1      	cmp	r9, r4
 80088de:	d836      	bhi.n	800894e <qsort+0x164>
 80088e0:	9303      	str	r3, [sp, #12]
 80088e2:	4639      	mov	r1, r7
 80088e4:	9b00      	ldr	r3, [sp, #0]
 80088e6:	4648      	mov	r0, r9
 80088e8:	4798      	blx	r3
 80088ea:	2800      	cmp	r0, #0
 80088ec:	9b03      	ldr	r3, [sp, #12]
 80088ee:	dc2c      	bgt.n	800894a <qsort+0x160>
 80088f0:	d10a      	bne.n	8008908 <qsort+0x11e>
 80088f2:	f1b8 0f00 	cmp.w	r8, #0
 80088f6:	d113      	bne.n	8008920 <qsort+0x136>
 80088f8:	6833      	ldr	r3, [r6, #0]
 80088fa:	f8d9 2000 	ldr.w	r2, [r9]
 80088fe:	6032      	str	r2, [r6, #0]
 8008900:	f8c9 3000 	str.w	r3, [r9]
 8008904:	442e      	add	r6, r5
 8008906:	2301      	movs	r3, #1
 8008908:	44a9      	add	r9, r5
 800890a:	e7e7      	b.n	80088dc <qsort+0xf2>
 800890c:	4622      	mov	r2, r4
 800890e:	46ba      	mov	sl, r7
 8008910:	e7d1      	b.n	80088b6 <qsort+0xcc>
 8008912:	4643      	mov	r3, r8
 8008914:	462a      	mov	r2, r5
 8008916:	4649      	mov	r1, r9
 8008918:	4638      	mov	r0, r7
 800891a:	f7ff ff2d 	bl	8008778 <swapfunc>
 800891e:	e7d9      	b.n	80088d4 <qsort+0xea>
 8008920:	4643      	mov	r3, r8
 8008922:	462a      	mov	r2, r5
 8008924:	4649      	mov	r1, r9
 8008926:	4630      	mov	r0, r6
 8008928:	f7ff ff26 	bl	8008778 <swapfunc>
 800892c:	e7ea      	b.n	8008904 <qsort+0x11a>
 800892e:	d10b      	bne.n	8008948 <qsort+0x15e>
 8008930:	f1b8 0f00 	cmp.w	r8, #0
 8008934:	d113      	bne.n	800895e <qsort+0x174>
 8008936:	6823      	ldr	r3, [r4, #0]
 8008938:	f8da 2000 	ldr.w	r2, [sl]
 800893c:	6022      	str	r2, [r4, #0]
 800893e:	f8ca 3000 	str.w	r3, [sl]
 8008942:	ebaa 0a05 	sub.w	sl, sl, r5
 8008946:	2301      	movs	r3, #1
 8008948:	1b64      	subs	r4, r4, r5
 800894a:	45a1      	cmp	r9, r4
 800894c:	d90e      	bls.n	800896c <qsort+0x182>
 800894e:	2b00      	cmp	r3, #0
 8008950:	d140      	bne.n	80089d4 <qsort+0x1ea>
 8008952:	9b02      	ldr	r3, [sp, #8]
 8008954:	459b      	cmp	fp, r3
 8008956:	f4bf af64 	bcs.w	8008822 <qsort+0x38>
 800895a:	465c      	mov	r4, fp
 800895c:	e036      	b.n	80089cc <qsort+0x1e2>
 800895e:	4643      	mov	r3, r8
 8008960:	462a      	mov	r2, r5
 8008962:	4651      	mov	r1, sl
 8008964:	4620      	mov	r0, r4
 8008966:	f7ff ff07 	bl	8008778 <swapfunc>
 800896a:	e7ea      	b.n	8008942 <qsort+0x158>
 800896c:	9303      	str	r3, [sp, #12]
 800896e:	4639      	mov	r1, r7
 8008970:	9b00      	ldr	r3, [sp, #0]
 8008972:	4620      	mov	r0, r4
 8008974:	4798      	blx	r3
 8008976:	2800      	cmp	r0, #0
 8008978:	9b03      	ldr	r3, [sp, #12]
 800897a:	dad8      	bge.n	800892e <qsort+0x144>
 800897c:	f1b8 0f00 	cmp.w	r8, #0
 8008980:	d107      	bne.n	8008992 <qsort+0x1a8>
 8008982:	f8d9 3000 	ldr.w	r3, [r9]
 8008986:	6822      	ldr	r2, [r4, #0]
 8008988:	f8c9 2000 	str.w	r2, [r9]
 800898c:	6023      	str	r3, [r4, #0]
 800898e:	1b64      	subs	r4, r4, r5
 8008990:	e7b9      	b.n	8008906 <qsort+0x11c>
 8008992:	4643      	mov	r3, r8
 8008994:	462a      	mov	r2, r5
 8008996:	4621      	mov	r1, r4
 8008998:	4648      	mov	r0, r9
 800899a:	f7ff feed 	bl	8008778 <swapfunc>
 800899e:	e7f6      	b.n	800898e <qsort+0x1a4>
 80089a0:	4643      	mov	r3, r8
 80089a2:	462a      	mov	r2, r5
 80089a4:	4631      	mov	r1, r6
 80089a6:	4620      	mov	r0, r4
 80089a8:	f7ff fee6 	bl	8008778 <swapfunc>
 80089ac:	e00d      	b.n	80089ca <qsort+0x1e0>
 80089ae:	1b66      	subs	r6, r4, r5
 80089b0:	9b00      	ldr	r3, [sp, #0]
 80089b2:	4621      	mov	r1, r4
 80089b4:	4630      	mov	r0, r6
 80089b6:	4798      	blx	r3
 80089b8:	2800      	cmp	r0, #0
 80089ba:	dd09      	ble.n	80089d0 <qsort+0x1e6>
 80089bc:	f1b8 0f00 	cmp.w	r8, #0
 80089c0:	d1ee      	bne.n	80089a0 <qsort+0x1b6>
 80089c2:	6823      	ldr	r3, [r4, #0]
 80089c4:	6832      	ldr	r2, [r6, #0]
 80089c6:	6022      	str	r2, [r4, #0]
 80089c8:	6033      	str	r3, [r6, #0]
 80089ca:	4634      	mov	r4, r6
 80089cc:	42a7      	cmp	r7, r4
 80089ce:	d3ee      	bcc.n	80089ae <qsort+0x1c4>
 80089d0:	44ab      	add	fp, r5
 80089d2:	e7be      	b.n	8008952 <qsort+0x168>
 80089d4:	eba9 0b06 	sub.w	fp, r9, r6
 80089d8:	1bf2      	subs	r2, r6, r7
 80089da:	455a      	cmp	r2, fp
 80089dc:	bfa8      	it	ge
 80089de:	465a      	movge	r2, fp
 80089e0:	b12a      	cbz	r2, 80089ee <qsort+0x204>
 80089e2:	4643      	mov	r3, r8
 80089e4:	eba9 0102 	sub.w	r1, r9, r2
 80089e8:	4638      	mov	r0, r7
 80089ea:	f7ff fec5 	bl	8008778 <swapfunc>
 80089ee:	9b02      	ldr	r3, [sp, #8]
 80089f0:	eba3 020a 	sub.w	r2, r3, sl
 80089f4:	ebaa 0404 	sub.w	r4, sl, r4
 80089f8:	1b52      	subs	r2, r2, r5
 80089fa:	42a2      	cmp	r2, r4
 80089fc:	bf28      	it	cs
 80089fe:	4622      	movcs	r2, r4
 8008a00:	b12a      	cbz	r2, 8008a0e <qsort+0x224>
 8008a02:	9902      	ldr	r1, [sp, #8]
 8008a04:	4643      	mov	r3, r8
 8008a06:	1a89      	subs	r1, r1, r2
 8008a08:	4648      	mov	r0, r9
 8008a0a:	f7ff feb5 	bl	8008778 <swapfunc>
 8008a0e:	9b02      	ldr	r3, [sp, #8]
 8008a10:	455c      	cmp	r4, fp
 8008a12:	eba3 0604 	sub.w	r6, r3, r4
 8008a16:	d805      	bhi.n	8008a24 <qsort+0x23a>
 8008a18:	4623      	mov	r3, r4
 8008a1a:	465c      	mov	r4, fp
 8008a1c:	469b      	mov	fp, r3
 8008a1e:	4633      	mov	r3, r6
 8008a20:	463e      	mov	r6, r7
 8008a22:	461f      	mov	r7, r3
 8008a24:	45ab      	cmp	fp, r5
 8008a26:	d920      	bls.n	8008a6a <qsort+0x280>
 8008a28:	fbbb f1f5 	udiv	r1, fp, r5
 8008a2c:	9b01      	ldr	r3, [sp, #4]
 8008a2e:	2b07      	cmp	r3, #7
 8008a30:	d80b      	bhi.n	8008a4a <qsort+0x260>
 8008a32:	fbb4 f4f5 	udiv	r4, r4, r5
 8008a36:	aa14      	add	r2, sp, #80	@ 0x50
 8008a38:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008a3c:	f843 6c40 	str.w	r6, [r3, #-64]
 8008a40:	f843 4c3c 	str.w	r4, [r3, #-60]
 8008a44:	9b01      	ldr	r3, [sp, #4]
 8008a46:	3301      	adds	r3, #1
 8008a48:	e6df      	b.n	800880a <qsort+0x20>
 8008a4a:	9b00      	ldr	r3, [sp, #0]
 8008a4c:	462a      	mov	r2, r5
 8008a4e:	4638      	mov	r0, r7
 8008a50:	f7ff fecb 	bl	80087ea <qsort>
 8008a54:	42ac      	cmp	r4, r5
 8008a56:	d80b      	bhi.n	8008a70 <qsort+0x286>
 8008a58:	9b01      	ldr	r3, [sp, #4]
 8008a5a:	aa14      	add	r2, sp, #80	@ 0x50
 8008a5c:	3b01      	subs	r3, #1
 8008a5e:	9301      	str	r3, [sp, #4]
 8008a60:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008a64:	e953 7110 	ldrd	r7, r1, [r3, #-64]	@ 0x40
 8008a68:	e6d0      	b.n	800880c <qsort+0x22>
 8008a6a:	42ac      	cmp	r4, r5
 8008a6c:	f67f aed9 	bls.w	8008822 <qsort+0x38>
 8008a70:	fbb4 f1f5 	udiv	r1, r4, r5
 8008a74:	4637      	mov	r7, r6
 8008a76:	e6c9      	b.n	800880c <qsort+0x22>

08008a78 <sniprintf>:
 8008a78:	b40c      	push	{r2, r3}
 8008a7a:	b530      	push	{r4, r5, lr}
 8008a7c:	4b18      	ldr	r3, [pc, #96]	@ (8008ae0 <sniprintf+0x68>)
 8008a7e:	1e0c      	subs	r4, r1, #0
 8008a80:	681d      	ldr	r5, [r3, #0]
 8008a82:	b09d      	sub	sp, #116	@ 0x74
 8008a84:	da08      	bge.n	8008a98 <sniprintf+0x20>
 8008a86:	238b      	movs	r3, #139	@ 0x8b
 8008a88:	602b      	str	r3, [r5, #0]
 8008a8a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008a8e:	b01d      	add	sp, #116	@ 0x74
 8008a90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a94:	b002      	add	sp, #8
 8008a96:	4770      	bx	lr
 8008a98:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008a9c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008aa0:	f04f 0300 	mov.w	r3, #0
 8008aa4:	931b      	str	r3, [sp, #108]	@ 0x6c
 8008aa6:	bf14      	ite	ne
 8008aa8:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8008aac:	4623      	moveq	r3, r4
 8008aae:	9304      	str	r3, [sp, #16]
 8008ab0:	9307      	str	r3, [sp, #28]
 8008ab2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008ab6:	9002      	str	r0, [sp, #8]
 8008ab8:	9006      	str	r0, [sp, #24]
 8008aba:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008abe:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008ac0:	ab21      	add	r3, sp, #132	@ 0x84
 8008ac2:	a902      	add	r1, sp, #8
 8008ac4:	4628      	mov	r0, r5
 8008ac6:	9301      	str	r3, [sp, #4]
 8008ac8:	f000 f952 	bl	8008d70 <_svfiprintf_r>
 8008acc:	1c43      	adds	r3, r0, #1
 8008ace:	bfbc      	itt	lt
 8008ad0:	238b      	movlt	r3, #139	@ 0x8b
 8008ad2:	602b      	strlt	r3, [r5, #0]
 8008ad4:	2c00      	cmp	r4, #0
 8008ad6:	d0da      	beq.n	8008a8e <sniprintf+0x16>
 8008ad8:	9b02      	ldr	r3, [sp, #8]
 8008ada:	2200      	movs	r2, #0
 8008adc:	701a      	strb	r2, [r3, #0]
 8008ade:	e7d6      	b.n	8008a8e <sniprintf+0x16>
 8008ae0:	20000010 	.word	0x20000010

08008ae4 <memset>:
 8008ae4:	4402      	add	r2, r0
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d100      	bne.n	8008aee <memset+0xa>
 8008aec:	4770      	bx	lr
 8008aee:	f803 1b01 	strb.w	r1, [r3], #1
 8008af2:	e7f9      	b.n	8008ae8 <memset+0x4>

08008af4 <__errno>:
 8008af4:	4b01      	ldr	r3, [pc, #4]	@ (8008afc <__errno+0x8>)
 8008af6:	6818      	ldr	r0, [r3, #0]
 8008af8:	4770      	bx	lr
 8008afa:	bf00      	nop
 8008afc:	20000010 	.word	0x20000010

08008b00 <__libc_init_array>:
 8008b00:	b570      	push	{r4, r5, r6, lr}
 8008b02:	4d0d      	ldr	r5, [pc, #52]	@ (8008b38 <__libc_init_array+0x38>)
 8008b04:	4c0d      	ldr	r4, [pc, #52]	@ (8008b3c <__libc_init_array+0x3c>)
 8008b06:	1b64      	subs	r4, r4, r5
 8008b08:	10a4      	asrs	r4, r4, #2
 8008b0a:	2600      	movs	r6, #0
 8008b0c:	42a6      	cmp	r6, r4
 8008b0e:	d109      	bne.n	8008b24 <__libc_init_array+0x24>
 8008b10:	4d0b      	ldr	r5, [pc, #44]	@ (8008b40 <__libc_init_array+0x40>)
 8008b12:	4c0c      	ldr	r4, [pc, #48]	@ (8008b44 <__libc_init_array+0x44>)
 8008b14:	f000 fcc2 	bl	800949c <_init>
 8008b18:	1b64      	subs	r4, r4, r5
 8008b1a:	10a4      	asrs	r4, r4, #2
 8008b1c:	2600      	movs	r6, #0
 8008b1e:	42a6      	cmp	r6, r4
 8008b20:	d105      	bne.n	8008b2e <__libc_init_array+0x2e>
 8008b22:	bd70      	pop	{r4, r5, r6, pc}
 8008b24:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b28:	4798      	blx	r3
 8008b2a:	3601      	adds	r6, #1
 8008b2c:	e7ee      	b.n	8008b0c <__libc_init_array+0xc>
 8008b2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b32:	4798      	blx	r3
 8008b34:	3601      	adds	r6, #1
 8008b36:	e7f2      	b.n	8008b1e <__libc_init_array+0x1e>
 8008b38:	080095b8 	.word	0x080095b8
 8008b3c:	080095b8 	.word	0x080095b8
 8008b40:	080095b8 	.word	0x080095b8
 8008b44:	080095bc 	.word	0x080095bc

08008b48 <__retarget_lock_acquire_recursive>:
 8008b48:	4770      	bx	lr

08008b4a <__retarget_lock_release_recursive>:
 8008b4a:	4770      	bx	lr

08008b4c <_reclaim_reent>:
 8008b4c:	4b2d      	ldr	r3, [pc, #180]	@ (8008c04 <_reclaim_reent+0xb8>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4283      	cmp	r3, r0
 8008b52:	b570      	push	{r4, r5, r6, lr}
 8008b54:	4604      	mov	r4, r0
 8008b56:	d053      	beq.n	8008c00 <_reclaim_reent+0xb4>
 8008b58:	69c3      	ldr	r3, [r0, #28]
 8008b5a:	b31b      	cbz	r3, 8008ba4 <_reclaim_reent+0x58>
 8008b5c:	68db      	ldr	r3, [r3, #12]
 8008b5e:	b163      	cbz	r3, 8008b7a <_reclaim_reent+0x2e>
 8008b60:	2500      	movs	r5, #0
 8008b62:	69e3      	ldr	r3, [r4, #28]
 8008b64:	68db      	ldr	r3, [r3, #12]
 8008b66:	5959      	ldr	r1, [r3, r5]
 8008b68:	b9b1      	cbnz	r1, 8008b98 <_reclaim_reent+0x4c>
 8008b6a:	3504      	adds	r5, #4
 8008b6c:	2d80      	cmp	r5, #128	@ 0x80
 8008b6e:	d1f8      	bne.n	8008b62 <_reclaim_reent+0x16>
 8008b70:	69e3      	ldr	r3, [r4, #28]
 8008b72:	4620      	mov	r0, r4
 8008b74:	68d9      	ldr	r1, [r3, #12]
 8008b76:	f000 f855 	bl	8008c24 <_free_r>
 8008b7a:	69e3      	ldr	r3, [r4, #28]
 8008b7c:	6819      	ldr	r1, [r3, #0]
 8008b7e:	b111      	cbz	r1, 8008b86 <_reclaim_reent+0x3a>
 8008b80:	4620      	mov	r0, r4
 8008b82:	f000 f84f 	bl	8008c24 <_free_r>
 8008b86:	69e3      	ldr	r3, [r4, #28]
 8008b88:	689d      	ldr	r5, [r3, #8]
 8008b8a:	b15d      	cbz	r5, 8008ba4 <_reclaim_reent+0x58>
 8008b8c:	4629      	mov	r1, r5
 8008b8e:	4620      	mov	r0, r4
 8008b90:	682d      	ldr	r5, [r5, #0]
 8008b92:	f000 f847 	bl	8008c24 <_free_r>
 8008b96:	e7f8      	b.n	8008b8a <_reclaim_reent+0x3e>
 8008b98:	680e      	ldr	r6, [r1, #0]
 8008b9a:	4620      	mov	r0, r4
 8008b9c:	f000 f842 	bl	8008c24 <_free_r>
 8008ba0:	4631      	mov	r1, r6
 8008ba2:	e7e1      	b.n	8008b68 <_reclaim_reent+0x1c>
 8008ba4:	6961      	ldr	r1, [r4, #20]
 8008ba6:	b111      	cbz	r1, 8008bae <_reclaim_reent+0x62>
 8008ba8:	4620      	mov	r0, r4
 8008baa:	f000 f83b 	bl	8008c24 <_free_r>
 8008bae:	69e1      	ldr	r1, [r4, #28]
 8008bb0:	b111      	cbz	r1, 8008bb8 <_reclaim_reent+0x6c>
 8008bb2:	4620      	mov	r0, r4
 8008bb4:	f000 f836 	bl	8008c24 <_free_r>
 8008bb8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008bba:	b111      	cbz	r1, 8008bc2 <_reclaim_reent+0x76>
 8008bbc:	4620      	mov	r0, r4
 8008bbe:	f000 f831 	bl	8008c24 <_free_r>
 8008bc2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008bc4:	b111      	cbz	r1, 8008bcc <_reclaim_reent+0x80>
 8008bc6:	4620      	mov	r0, r4
 8008bc8:	f000 f82c 	bl	8008c24 <_free_r>
 8008bcc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8008bce:	b111      	cbz	r1, 8008bd6 <_reclaim_reent+0x8a>
 8008bd0:	4620      	mov	r0, r4
 8008bd2:	f000 f827 	bl	8008c24 <_free_r>
 8008bd6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008bd8:	b111      	cbz	r1, 8008be0 <_reclaim_reent+0x94>
 8008bda:	4620      	mov	r0, r4
 8008bdc:	f000 f822 	bl	8008c24 <_free_r>
 8008be0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008be2:	b111      	cbz	r1, 8008bea <_reclaim_reent+0x9e>
 8008be4:	4620      	mov	r0, r4
 8008be6:	f000 f81d 	bl	8008c24 <_free_r>
 8008bea:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008bec:	b111      	cbz	r1, 8008bf4 <_reclaim_reent+0xa8>
 8008bee:	4620      	mov	r0, r4
 8008bf0:	f000 f818 	bl	8008c24 <_free_r>
 8008bf4:	6a23      	ldr	r3, [r4, #32]
 8008bf6:	b11b      	cbz	r3, 8008c00 <_reclaim_reent+0xb4>
 8008bf8:	4620      	mov	r0, r4
 8008bfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008bfe:	4718      	bx	r3
 8008c00:	bd70      	pop	{r4, r5, r6, pc}
 8008c02:	bf00      	nop
 8008c04:	20000010 	.word	0x20000010

08008c08 <memcpy>:
 8008c08:	440a      	add	r2, r1
 8008c0a:	4291      	cmp	r1, r2
 8008c0c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008c10:	d100      	bne.n	8008c14 <memcpy+0xc>
 8008c12:	4770      	bx	lr
 8008c14:	b510      	push	{r4, lr}
 8008c16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c1e:	4291      	cmp	r1, r2
 8008c20:	d1f9      	bne.n	8008c16 <memcpy+0xe>
 8008c22:	bd10      	pop	{r4, pc}

08008c24 <_free_r>:
 8008c24:	b538      	push	{r3, r4, r5, lr}
 8008c26:	4605      	mov	r5, r0
 8008c28:	2900      	cmp	r1, #0
 8008c2a:	d041      	beq.n	8008cb0 <_free_r+0x8c>
 8008c2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c30:	1f0c      	subs	r4, r1, #4
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	bfb8      	it	lt
 8008c36:	18e4      	addlt	r4, r4, r3
 8008c38:	f000 fbc4 	bl	80093c4 <__malloc_lock>
 8008c3c:	4a1d      	ldr	r2, [pc, #116]	@ (8008cb4 <_free_r+0x90>)
 8008c3e:	6813      	ldr	r3, [r2, #0]
 8008c40:	b933      	cbnz	r3, 8008c50 <_free_r+0x2c>
 8008c42:	6063      	str	r3, [r4, #4]
 8008c44:	6014      	str	r4, [r2, #0]
 8008c46:	4628      	mov	r0, r5
 8008c48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c4c:	f000 bbc0 	b.w	80093d0 <__malloc_unlock>
 8008c50:	42a3      	cmp	r3, r4
 8008c52:	d908      	bls.n	8008c66 <_free_r+0x42>
 8008c54:	6820      	ldr	r0, [r4, #0]
 8008c56:	1821      	adds	r1, r4, r0
 8008c58:	428b      	cmp	r3, r1
 8008c5a:	bf01      	itttt	eq
 8008c5c:	6819      	ldreq	r1, [r3, #0]
 8008c5e:	685b      	ldreq	r3, [r3, #4]
 8008c60:	1809      	addeq	r1, r1, r0
 8008c62:	6021      	streq	r1, [r4, #0]
 8008c64:	e7ed      	b.n	8008c42 <_free_r+0x1e>
 8008c66:	461a      	mov	r2, r3
 8008c68:	685b      	ldr	r3, [r3, #4]
 8008c6a:	b10b      	cbz	r3, 8008c70 <_free_r+0x4c>
 8008c6c:	42a3      	cmp	r3, r4
 8008c6e:	d9fa      	bls.n	8008c66 <_free_r+0x42>
 8008c70:	6811      	ldr	r1, [r2, #0]
 8008c72:	1850      	adds	r0, r2, r1
 8008c74:	42a0      	cmp	r0, r4
 8008c76:	d10b      	bne.n	8008c90 <_free_r+0x6c>
 8008c78:	6820      	ldr	r0, [r4, #0]
 8008c7a:	4401      	add	r1, r0
 8008c7c:	1850      	adds	r0, r2, r1
 8008c7e:	4283      	cmp	r3, r0
 8008c80:	6011      	str	r1, [r2, #0]
 8008c82:	d1e0      	bne.n	8008c46 <_free_r+0x22>
 8008c84:	6818      	ldr	r0, [r3, #0]
 8008c86:	685b      	ldr	r3, [r3, #4]
 8008c88:	6053      	str	r3, [r2, #4]
 8008c8a:	4408      	add	r0, r1
 8008c8c:	6010      	str	r0, [r2, #0]
 8008c8e:	e7da      	b.n	8008c46 <_free_r+0x22>
 8008c90:	d902      	bls.n	8008c98 <_free_r+0x74>
 8008c92:	230c      	movs	r3, #12
 8008c94:	602b      	str	r3, [r5, #0]
 8008c96:	e7d6      	b.n	8008c46 <_free_r+0x22>
 8008c98:	6820      	ldr	r0, [r4, #0]
 8008c9a:	1821      	adds	r1, r4, r0
 8008c9c:	428b      	cmp	r3, r1
 8008c9e:	bf04      	itt	eq
 8008ca0:	6819      	ldreq	r1, [r3, #0]
 8008ca2:	685b      	ldreq	r3, [r3, #4]
 8008ca4:	6063      	str	r3, [r4, #4]
 8008ca6:	bf04      	itt	eq
 8008ca8:	1809      	addeq	r1, r1, r0
 8008caa:	6021      	streq	r1, [r4, #0]
 8008cac:	6054      	str	r4, [r2, #4]
 8008cae:	e7ca      	b.n	8008c46 <_free_r+0x22>
 8008cb0:	bd38      	pop	{r3, r4, r5, pc}
 8008cb2:	bf00      	nop
 8008cb4:	20004e30 	.word	0x20004e30

08008cb8 <__ssputs_r>:
 8008cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cbc:	688e      	ldr	r6, [r1, #8]
 8008cbe:	461f      	mov	r7, r3
 8008cc0:	42be      	cmp	r6, r7
 8008cc2:	680b      	ldr	r3, [r1, #0]
 8008cc4:	4682      	mov	sl, r0
 8008cc6:	460c      	mov	r4, r1
 8008cc8:	4690      	mov	r8, r2
 8008cca:	d82d      	bhi.n	8008d28 <__ssputs_r+0x70>
 8008ccc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008cd0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008cd4:	d026      	beq.n	8008d24 <__ssputs_r+0x6c>
 8008cd6:	6965      	ldr	r5, [r4, #20]
 8008cd8:	6909      	ldr	r1, [r1, #16]
 8008cda:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008cde:	eba3 0901 	sub.w	r9, r3, r1
 8008ce2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008ce6:	1c7b      	adds	r3, r7, #1
 8008ce8:	444b      	add	r3, r9
 8008cea:	106d      	asrs	r5, r5, #1
 8008cec:	429d      	cmp	r5, r3
 8008cee:	bf38      	it	cc
 8008cf0:	461d      	movcc	r5, r3
 8008cf2:	0553      	lsls	r3, r2, #21
 8008cf4:	d527      	bpl.n	8008d46 <__ssputs_r+0x8e>
 8008cf6:	4629      	mov	r1, r5
 8008cf8:	f000 f958 	bl	8008fac <_malloc_r>
 8008cfc:	4606      	mov	r6, r0
 8008cfe:	b360      	cbz	r0, 8008d5a <__ssputs_r+0xa2>
 8008d00:	6921      	ldr	r1, [r4, #16]
 8008d02:	464a      	mov	r2, r9
 8008d04:	f7ff ff80 	bl	8008c08 <memcpy>
 8008d08:	89a3      	ldrh	r3, [r4, #12]
 8008d0a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008d0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d12:	81a3      	strh	r3, [r4, #12]
 8008d14:	6126      	str	r6, [r4, #16]
 8008d16:	6165      	str	r5, [r4, #20]
 8008d18:	444e      	add	r6, r9
 8008d1a:	eba5 0509 	sub.w	r5, r5, r9
 8008d1e:	6026      	str	r6, [r4, #0]
 8008d20:	60a5      	str	r5, [r4, #8]
 8008d22:	463e      	mov	r6, r7
 8008d24:	42be      	cmp	r6, r7
 8008d26:	d900      	bls.n	8008d2a <__ssputs_r+0x72>
 8008d28:	463e      	mov	r6, r7
 8008d2a:	6820      	ldr	r0, [r4, #0]
 8008d2c:	4632      	mov	r2, r6
 8008d2e:	4641      	mov	r1, r8
 8008d30:	f000 fb82 	bl	8009438 <memmove>
 8008d34:	68a3      	ldr	r3, [r4, #8]
 8008d36:	1b9b      	subs	r3, r3, r6
 8008d38:	60a3      	str	r3, [r4, #8]
 8008d3a:	6823      	ldr	r3, [r4, #0]
 8008d3c:	4433      	add	r3, r6
 8008d3e:	6023      	str	r3, [r4, #0]
 8008d40:	2000      	movs	r0, #0
 8008d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d46:	462a      	mov	r2, r5
 8008d48:	f000 fb48 	bl	80093dc <_realloc_r>
 8008d4c:	4606      	mov	r6, r0
 8008d4e:	2800      	cmp	r0, #0
 8008d50:	d1e0      	bne.n	8008d14 <__ssputs_r+0x5c>
 8008d52:	6921      	ldr	r1, [r4, #16]
 8008d54:	4650      	mov	r0, sl
 8008d56:	f7ff ff65 	bl	8008c24 <_free_r>
 8008d5a:	230c      	movs	r3, #12
 8008d5c:	f8ca 3000 	str.w	r3, [sl]
 8008d60:	89a3      	ldrh	r3, [r4, #12]
 8008d62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d66:	81a3      	strh	r3, [r4, #12]
 8008d68:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008d6c:	e7e9      	b.n	8008d42 <__ssputs_r+0x8a>
	...

08008d70 <_svfiprintf_r>:
 8008d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d74:	4698      	mov	r8, r3
 8008d76:	898b      	ldrh	r3, [r1, #12]
 8008d78:	061b      	lsls	r3, r3, #24
 8008d7a:	b09d      	sub	sp, #116	@ 0x74
 8008d7c:	4607      	mov	r7, r0
 8008d7e:	460d      	mov	r5, r1
 8008d80:	4614      	mov	r4, r2
 8008d82:	d510      	bpl.n	8008da6 <_svfiprintf_r+0x36>
 8008d84:	690b      	ldr	r3, [r1, #16]
 8008d86:	b973      	cbnz	r3, 8008da6 <_svfiprintf_r+0x36>
 8008d88:	2140      	movs	r1, #64	@ 0x40
 8008d8a:	f000 f90f 	bl	8008fac <_malloc_r>
 8008d8e:	6028      	str	r0, [r5, #0]
 8008d90:	6128      	str	r0, [r5, #16]
 8008d92:	b930      	cbnz	r0, 8008da2 <_svfiprintf_r+0x32>
 8008d94:	230c      	movs	r3, #12
 8008d96:	603b      	str	r3, [r7, #0]
 8008d98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008d9c:	b01d      	add	sp, #116	@ 0x74
 8008d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008da2:	2340      	movs	r3, #64	@ 0x40
 8008da4:	616b      	str	r3, [r5, #20]
 8008da6:	2300      	movs	r3, #0
 8008da8:	9309      	str	r3, [sp, #36]	@ 0x24
 8008daa:	2320      	movs	r3, #32
 8008dac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008db0:	f8cd 800c 	str.w	r8, [sp, #12]
 8008db4:	2330      	movs	r3, #48	@ 0x30
 8008db6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008f54 <_svfiprintf_r+0x1e4>
 8008dba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008dbe:	f04f 0901 	mov.w	r9, #1
 8008dc2:	4623      	mov	r3, r4
 8008dc4:	469a      	mov	sl, r3
 8008dc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008dca:	b10a      	cbz	r2, 8008dd0 <_svfiprintf_r+0x60>
 8008dcc:	2a25      	cmp	r2, #37	@ 0x25
 8008dce:	d1f9      	bne.n	8008dc4 <_svfiprintf_r+0x54>
 8008dd0:	ebba 0b04 	subs.w	fp, sl, r4
 8008dd4:	d00b      	beq.n	8008dee <_svfiprintf_r+0x7e>
 8008dd6:	465b      	mov	r3, fp
 8008dd8:	4622      	mov	r2, r4
 8008dda:	4629      	mov	r1, r5
 8008ddc:	4638      	mov	r0, r7
 8008dde:	f7ff ff6b 	bl	8008cb8 <__ssputs_r>
 8008de2:	3001      	adds	r0, #1
 8008de4:	f000 80a7 	beq.w	8008f36 <_svfiprintf_r+0x1c6>
 8008de8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008dea:	445a      	add	r2, fp
 8008dec:	9209      	str	r2, [sp, #36]	@ 0x24
 8008dee:	f89a 3000 	ldrb.w	r3, [sl]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	f000 809f 	beq.w	8008f36 <_svfiprintf_r+0x1c6>
 8008df8:	2300      	movs	r3, #0
 8008dfa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008dfe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e02:	f10a 0a01 	add.w	sl, sl, #1
 8008e06:	9304      	str	r3, [sp, #16]
 8008e08:	9307      	str	r3, [sp, #28]
 8008e0a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008e0e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008e10:	4654      	mov	r4, sl
 8008e12:	2205      	movs	r2, #5
 8008e14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e18:	484e      	ldr	r0, [pc, #312]	@ (8008f54 <_svfiprintf_r+0x1e4>)
 8008e1a:	f7f7 f9e1 	bl	80001e0 <memchr>
 8008e1e:	9a04      	ldr	r2, [sp, #16]
 8008e20:	b9d8      	cbnz	r0, 8008e5a <_svfiprintf_r+0xea>
 8008e22:	06d0      	lsls	r0, r2, #27
 8008e24:	bf44      	itt	mi
 8008e26:	2320      	movmi	r3, #32
 8008e28:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e2c:	0711      	lsls	r1, r2, #28
 8008e2e:	bf44      	itt	mi
 8008e30:	232b      	movmi	r3, #43	@ 0x2b
 8008e32:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e36:	f89a 3000 	ldrb.w	r3, [sl]
 8008e3a:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e3c:	d015      	beq.n	8008e6a <_svfiprintf_r+0xfa>
 8008e3e:	9a07      	ldr	r2, [sp, #28]
 8008e40:	4654      	mov	r4, sl
 8008e42:	2000      	movs	r0, #0
 8008e44:	f04f 0c0a 	mov.w	ip, #10
 8008e48:	4621      	mov	r1, r4
 8008e4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e4e:	3b30      	subs	r3, #48	@ 0x30
 8008e50:	2b09      	cmp	r3, #9
 8008e52:	d94b      	bls.n	8008eec <_svfiprintf_r+0x17c>
 8008e54:	b1b0      	cbz	r0, 8008e84 <_svfiprintf_r+0x114>
 8008e56:	9207      	str	r2, [sp, #28]
 8008e58:	e014      	b.n	8008e84 <_svfiprintf_r+0x114>
 8008e5a:	eba0 0308 	sub.w	r3, r0, r8
 8008e5e:	fa09 f303 	lsl.w	r3, r9, r3
 8008e62:	4313      	orrs	r3, r2
 8008e64:	9304      	str	r3, [sp, #16]
 8008e66:	46a2      	mov	sl, r4
 8008e68:	e7d2      	b.n	8008e10 <_svfiprintf_r+0xa0>
 8008e6a:	9b03      	ldr	r3, [sp, #12]
 8008e6c:	1d19      	adds	r1, r3, #4
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	9103      	str	r1, [sp, #12]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	bfbb      	ittet	lt
 8008e76:	425b      	neglt	r3, r3
 8008e78:	f042 0202 	orrlt.w	r2, r2, #2
 8008e7c:	9307      	strge	r3, [sp, #28]
 8008e7e:	9307      	strlt	r3, [sp, #28]
 8008e80:	bfb8      	it	lt
 8008e82:	9204      	strlt	r2, [sp, #16]
 8008e84:	7823      	ldrb	r3, [r4, #0]
 8008e86:	2b2e      	cmp	r3, #46	@ 0x2e
 8008e88:	d10a      	bne.n	8008ea0 <_svfiprintf_r+0x130>
 8008e8a:	7863      	ldrb	r3, [r4, #1]
 8008e8c:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e8e:	d132      	bne.n	8008ef6 <_svfiprintf_r+0x186>
 8008e90:	9b03      	ldr	r3, [sp, #12]
 8008e92:	1d1a      	adds	r2, r3, #4
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	9203      	str	r2, [sp, #12]
 8008e98:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008e9c:	3402      	adds	r4, #2
 8008e9e:	9305      	str	r3, [sp, #20]
 8008ea0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008f64 <_svfiprintf_r+0x1f4>
 8008ea4:	7821      	ldrb	r1, [r4, #0]
 8008ea6:	2203      	movs	r2, #3
 8008ea8:	4650      	mov	r0, sl
 8008eaa:	f7f7 f999 	bl	80001e0 <memchr>
 8008eae:	b138      	cbz	r0, 8008ec0 <_svfiprintf_r+0x150>
 8008eb0:	9b04      	ldr	r3, [sp, #16]
 8008eb2:	eba0 000a 	sub.w	r0, r0, sl
 8008eb6:	2240      	movs	r2, #64	@ 0x40
 8008eb8:	4082      	lsls	r2, r0
 8008eba:	4313      	orrs	r3, r2
 8008ebc:	3401      	adds	r4, #1
 8008ebe:	9304      	str	r3, [sp, #16]
 8008ec0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ec4:	4824      	ldr	r0, [pc, #144]	@ (8008f58 <_svfiprintf_r+0x1e8>)
 8008ec6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008eca:	2206      	movs	r2, #6
 8008ecc:	f7f7 f988 	bl	80001e0 <memchr>
 8008ed0:	2800      	cmp	r0, #0
 8008ed2:	d036      	beq.n	8008f42 <_svfiprintf_r+0x1d2>
 8008ed4:	4b21      	ldr	r3, [pc, #132]	@ (8008f5c <_svfiprintf_r+0x1ec>)
 8008ed6:	bb1b      	cbnz	r3, 8008f20 <_svfiprintf_r+0x1b0>
 8008ed8:	9b03      	ldr	r3, [sp, #12]
 8008eda:	3307      	adds	r3, #7
 8008edc:	f023 0307 	bic.w	r3, r3, #7
 8008ee0:	3308      	adds	r3, #8
 8008ee2:	9303      	str	r3, [sp, #12]
 8008ee4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ee6:	4433      	add	r3, r6
 8008ee8:	9309      	str	r3, [sp, #36]	@ 0x24
 8008eea:	e76a      	b.n	8008dc2 <_svfiprintf_r+0x52>
 8008eec:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ef0:	460c      	mov	r4, r1
 8008ef2:	2001      	movs	r0, #1
 8008ef4:	e7a8      	b.n	8008e48 <_svfiprintf_r+0xd8>
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	3401      	adds	r4, #1
 8008efa:	9305      	str	r3, [sp, #20]
 8008efc:	4619      	mov	r1, r3
 8008efe:	f04f 0c0a 	mov.w	ip, #10
 8008f02:	4620      	mov	r0, r4
 8008f04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f08:	3a30      	subs	r2, #48	@ 0x30
 8008f0a:	2a09      	cmp	r2, #9
 8008f0c:	d903      	bls.n	8008f16 <_svfiprintf_r+0x1a6>
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d0c6      	beq.n	8008ea0 <_svfiprintf_r+0x130>
 8008f12:	9105      	str	r1, [sp, #20]
 8008f14:	e7c4      	b.n	8008ea0 <_svfiprintf_r+0x130>
 8008f16:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f1a:	4604      	mov	r4, r0
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	e7f0      	b.n	8008f02 <_svfiprintf_r+0x192>
 8008f20:	ab03      	add	r3, sp, #12
 8008f22:	9300      	str	r3, [sp, #0]
 8008f24:	462a      	mov	r2, r5
 8008f26:	4b0e      	ldr	r3, [pc, #56]	@ (8008f60 <_svfiprintf_r+0x1f0>)
 8008f28:	a904      	add	r1, sp, #16
 8008f2a:	4638      	mov	r0, r7
 8008f2c:	f3af 8000 	nop.w
 8008f30:	1c42      	adds	r2, r0, #1
 8008f32:	4606      	mov	r6, r0
 8008f34:	d1d6      	bne.n	8008ee4 <_svfiprintf_r+0x174>
 8008f36:	89ab      	ldrh	r3, [r5, #12]
 8008f38:	065b      	lsls	r3, r3, #25
 8008f3a:	f53f af2d 	bmi.w	8008d98 <_svfiprintf_r+0x28>
 8008f3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008f40:	e72c      	b.n	8008d9c <_svfiprintf_r+0x2c>
 8008f42:	ab03      	add	r3, sp, #12
 8008f44:	9300      	str	r3, [sp, #0]
 8008f46:	462a      	mov	r2, r5
 8008f48:	4b05      	ldr	r3, [pc, #20]	@ (8008f60 <_svfiprintf_r+0x1f0>)
 8008f4a:	a904      	add	r1, sp, #16
 8008f4c:	4638      	mov	r0, r7
 8008f4e:	f000 f91b 	bl	8009188 <_printf_i>
 8008f52:	e7ed      	b.n	8008f30 <_svfiprintf_r+0x1c0>
 8008f54:	0800957c 	.word	0x0800957c
 8008f58:	08009586 	.word	0x08009586
 8008f5c:	00000000 	.word	0x00000000
 8008f60:	08008cb9 	.word	0x08008cb9
 8008f64:	08009582 	.word	0x08009582

08008f68 <sbrk_aligned>:
 8008f68:	b570      	push	{r4, r5, r6, lr}
 8008f6a:	4e0f      	ldr	r6, [pc, #60]	@ (8008fa8 <sbrk_aligned+0x40>)
 8008f6c:	460c      	mov	r4, r1
 8008f6e:	6831      	ldr	r1, [r6, #0]
 8008f70:	4605      	mov	r5, r0
 8008f72:	b911      	cbnz	r1, 8008f7a <sbrk_aligned+0x12>
 8008f74:	f000 fa7a 	bl	800946c <_sbrk_r>
 8008f78:	6030      	str	r0, [r6, #0]
 8008f7a:	4621      	mov	r1, r4
 8008f7c:	4628      	mov	r0, r5
 8008f7e:	f000 fa75 	bl	800946c <_sbrk_r>
 8008f82:	1c43      	adds	r3, r0, #1
 8008f84:	d103      	bne.n	8008f8e <sbrk_aligned+0x26>
 8008f86:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008f8a:	4620      	mov	r0, r4
 8008f8c:	bd70      	pop	{r4, r5, r6, pc}
 8008f8e:	1cc4      	adds	r4, r0, #3
 8008f90:	f024 0403 	bic.w	r4, r4, #3
 8008f94:	42a0      	cmp	r0, r4
 8008f96:	d0f8      	beq.n	8008f8a <sbrk_aligned+0x22>
 8008f98:	1a21      	subs	r1, r4, r0
 8008f9a:	4628      	mov	r0, r5
 8008f9c:	f000 fa66 	bl	800946c <_sbrk_r>
 8008fa0:	3001      	adds	r0, #1
 8008fa2:	d1f2      	bne.n	8008f8a <sbrk_aligned+0x22>
 8008fa4:	e7ef      	b.n	8008f86 <sbrk_aligned+0x1e>
 8008fa6:	bf00      	nop
 8008fa8:	20004e2c 	.word	0x20004e2c

08008fac <_malloc_r>:
 8008fac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fb0:	1ccd      	adds	r5, r1, #3
 8008fb2:	f025 0503 	bic.w	r5, r5, #3
 8008fb6:	3508      	adds	r5, #8
 8008fb8:	2d0c      	cmp	r5, #12
 8008fba:	bf38      	it	cc
 8008fbc:	250c      	movcc	r5, #12
 8008fbe:	2d00      	cmp	r5, #0
 8008fc0:	4606      	mov	r6, r0
 8008fc2:	db01      	blt.n	8008fc8 <_malloc_r+0x1c>
 8008fc4:	42a9      	cmp	r1, r5
 8008fc6:	d904      	bls.n	8008fd2 <_malloc_r+0x26>
 8008fc8:	230c      	movs	r3, #12
 8008fca:	6033      	str	r3, [r6, #0]
 8008fcc:	2000      	movs	r0, #0
 8008fce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fd2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80090a8 <_malloc_r+0xfc>
 8008fd6:	f000 f9f5 	bl	80093c4 <__malloc_lock>
 8008fda:	f8d8 3000 	ldr.w	r3, [r8]
 8008fde:	461c      	mov	r4, r3
 8008fe0:	bb44      	cbnz	r4, 8009034 <_malloc_r+0x88>
 8008fe2:	4629      	mov	r1, r5
 8008fe4:	4630      	mov	r0, r6
 8008fe6:	f7ff ffbf 	bl	8008f68 <sbrk_aligned>
 8008fea:	1c43      	adds	r3, r0, #1
 8008fec:	4604      	mov	r4, r0
 8008fee:	d158      	bne.n	80090a2 <_malloc_r+0xf6>
 8008ff0:	f8d8 4000 	ldr.w	r4, [r8]
 8008ff4:	4627      	mov	r7, r4
 8008ff6:	2f00      	cmp	r7, #0
 8008ff8:	d143      	bne.n	8009082 <_malloc_r+0xd6>
 8008ffa:	2c00      	cmp	r4, #0
 8008ffc:	d04b      	beq.n	8009096 <_malloc_r+0xea>
 8008ffe:	6823      	ldr	r3, [r4, #0]
 8009000:	4639      	mov	r1, r7
 8009002:	4630      	mov	r0, r6
 8009004:	eb04 0903 	add.w	r9, r4, r3
 8009008:	f000 fa30 	bl	800946c <_sbrk_r>
 800900c:	4581      	cmp	r9, r0
 800900e:	d142      	bne.n	8009096 <_malloc_r+0xea>
 8009010:	6821      	ldr	r1, [r4, #0]
 8009012:	1a6d      	subs	r5, r5, r1
 8009014:	4629      	mov	r1, r5
 8009016:	4630      	mov	r0, r6
 8009018:	f7ff ffa6 	bl	8008f68 <sbrk_aligned>
 800901c:	3001      	adds	r0, #1
 800901e:	d03a      	beq.n	8009096 <_malloc_r+0xea>
 8009020:	6823      	ldr	r3, [r4, #0]
 8009022:	442b      	add	r3, r5
 8009024:	6023      	str	r3, [r4, #0]
 8009026:	f8d8 3000 	ldr.w	r3, [r8]
 800902a:	685a      	ldr	r2, [r3, #4]
 800902c:	bb62      	cbnz	r2, 8009088 <_malloc_r+0xdc>
 800902e:	f8c8 7000 	str.w	r7, [r8]
 8009032:	e00f      	b.n	8009054 <_malloc_r+0xa8>
 8009034:	6822      	ldr	r2, [r4, #0]
 8009036:	1b52      	subs	r2, r2, r5
 8009038:	d420      	bmi.n	800907c <_malloc_r+0xd0>
 800903a:	2a0b      	cmp	r2, #11
 800903c:	d917      	bls.n	800906e <_malloc_r+0xc2>
 800903e:	1961      	adds	r1, r4, r5
 8009040:	42a3      	cmp	r3, r4
 8009042:	6025      	str	r5, [r4, #0]
 8009044:	bf18      	it	ne
 8009046:	6059      	strne	r1, [r3, #4]
 8009048:	6863      	ldr	r3, [r4, #4]
 800904a:	bf08      	it	eq
 800904c:	f8c8 1000 	streq.w	r1, [r8]
 8009050:	5162      	str	r2, [r4, r5]
 8009052:	604b      	str	r3, [r1, #4]
 8009054:	4630      	mov	r0, r6
 8009056:	f000 f9bb 	bl	80093d0 <__malloc_unlock>
 800905a:	f104 000b 	add.w	r0, r4, #11
 800905e:	1d23      	adds	r3, r4, #4
 8009060:	f020 0007 	bic.w	r0, r0, #7
 8009064:	1ac2      	subs	r2, r0, r3
 8009066:	bf1c      	itt	ne
 8009068:	1a1b      	subne	r3, r3, r0
 800906a:	50a3      	strne	r3, [r4, r2]
 800906c:	e7af      	b.n	8008fce <_malloc_r+0x22>
 800906e:	6862      	ldr	r2, [r4, #4]
 8009070:	42a3      	cmp	r3, r4
 8009072:	bf0c      	ite	eq
 8009074:	f8c8 2000 	streq.w	r2, [r8]
 8009078:	605a      	strne	r2, [r3, #4]
 800907a:	e7eb      	b.n	8009054 <_malloc_r+0xa8>
 800907c:	4623      	mov	r3, r4
 800907e:	6864      	ldr	r4, [r4, #4]
 8009080:	e7ae      	b.n	8008fe0 <_malloc_r+0x34>
 8009082:	463c      	mov	r4, r7
 8009084:	687f      	ldr	r7, [r7, #4]
 8009086:	e7b6      	b.n	8008ff6 <_malloc_r+0x4a>
 8009088:	461a      	mov	r2, r3
 800908a:	685b      	ldr	r3, [r3, #4]
 800908c:	42a3      	cmp	r3, r4
 800908e:	d1fb      	bne.n	8009088 <_malloc_r+0xdc>
 8009090:	2300      	movs	r3, #0
 8009092:	6053      	str	r3, [r2, #4]
 8009094:	e7de      	b.n	8009054 <_malloc_r+0xa8>
 8009096:	230c      	movs	r3, #12
 8009098:	6033      	str	r3, [r6, #0]
 800909a:	4630      	mov	r0, r6
 800909c:	f000 f998 	bl	80093d0 <__malloc_unlock>
 80090a0:	e794      	b.n	8008fcc <_malloc_r+0x20>
 80090a2:	6005      	str	r5, [r0, #0]
 80090a4:	e7d6      	b.n	8009054 <_malloc_r+0xa8>
 80090a6:	bf00      	nop
 80090a8:	20004e30 	.word	0x20004e30

080090ac <_printf_common>:
 80090ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090b0:	4616      	mov	r6, r2
 80090b2:	4698      	mov	r8, r3
 80090b4:	688a      	ldr	r2, [r1, #8]
 80090b6:	690b      	ldr	r3, [r1, #16]
 80090b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80090bc:	4293      	cmp	r3, r2
 80090be:	bfb8      	it	lt
 80090c0:	4613      	movlt	r3, r2
 80090c2:	6033      	str	r3, [r6, #0]
 80090c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80090c8:	4607      	mov	r7, r0
 80090ca:	460c      	mov	r4, r1
 80090cc:	b10a      	cbz	r2, 80090d2 <_printf_common+0x26>
 80090ce:	3301      	adds	r3, #1
 80090d0:	6033      	str	r3, [r6, #0]
 80090d2:	6823      	ldr	r3, [r4, #0]
 80090d4:	0699      	lsls	r1, r3, #26
 80090d6:	bf42      	ittt	mi
 80090d8:	6833      	ldrmi	r3, [r6, #0]
 80090da:	3302      	addmi	r3, #2
 80090dc:	6033      	strmi	r3, [r6, #0]
 80090de:	6825      	ldr	r5, [r4, #0]
 80090e0:	f015 0506 	ands.w	r5, r5, #6
 80090e4:	d106      	bne.n	80090f4 <_printf_common+0x48>
 80090e6:	f104 0a19 	add.w	sl, r4, #25
 80090ea:	68e3      	ldr	r3, [r4, #12]
 80090ec:	6832      	ldr	r2, [r6, #0]
 80090ee:	1a9b      	subs	r3, r3, r2
 80090f0:	42ab      	cmp	r3, r5
 80090f2:	dc26      	bgt.n	8009142 <_printf_common+0x96>
 80090f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80090f8:	6822      	ldr	r2, [r4, #0]
 80090fa:	3b00      	subs	r3, #0
 80090fc:	bf18      	it	ne
 80090fe:	2301      	movne	r3, #1
 8009100:	0692      	lsls	r2, r2, #26
 8009102:	d42b      	bmi.n	800915c <_printf_common+0xb0>
 8009104:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009108:	4641      	mov	r1, r8
 800910a:	4638      	mov	r0, r7
 800910c:	47c8      	blx	r9
 800910e:	3001      	adds	r0, #1
 8009110:	d01e      	beq.n	8009150 <_printf_common+0xa4>
 8009112:	6823      	ldr	r3, [r4, #0]
 8009114:	6922      	ldr	r2, [r4, #16]
 8009116:	f003 0306 	and.w	r3, r3, #6
 800911a:	2b04      	cmp	r3, #4
 800911c:	bf02      	ittt	eq
 800911e:	68e5      	ldreq	r5, [r4, #12]
 8009120:	6833      	ldreq	r3, [r6, #0]
 8009122:	1aed      	subeq	r5, r5, r3
 8009124:	68a3      	ldr	r3, [r4, #8]
 8009126:	bf0c      	ite	eq
 8009128:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800912c:	2500      	movne	r5, #0
 800912e:	4293      	cmp	r3, r2
 8009130:	bfc4      	itt	gt
 8009132:	1a9b      	subgt	r3, r3, r2
 8009134:	18ed      	addgt	r5, r5, r3
 8009136:	2600      	movs	r6, #0
 8009138:	341a      	adds	r4, #26
 800913a:	42b5      	cmp	r5, r6
 800913c:	d11a      	bne.n	8009174 <_printf_common+0xc8>
 800913e:	2000      	movs	r0, #0
 8009140:	e008      	b.n	8009154 <_printf_common+0xa8>
 8009142:	2301      	movs	r3, #1
 8009144:	4652      	mov	r2, sl
 8009146:	4641      	mov	r1, r8
 8009148:	4638      	mov	r0, r7
 800914a:	47c8      	blx	r9
 800914c:	3001      	adds	r0, #1
 800914e:	d103      	bne.n	8009158 <_printf_common+0xac>
 8009150:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009158:	3501      	adds	r5, #1
 800915a:	e7c6      	b.n	80090ea <_printf_common+0x3e>
 800915c:	18e1      	adds	r1, r4, r3
 800915e:	1c5a      	adds	r2, r3, #1
 8009160:	2030      	movs	r0, #48	@ 0x30
 8009162:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009166:	4422      	add	r2, r4
 8009168:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800916c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009170:	3302      	adds	r3, #2
 8009172:	e7c7      	b.n	8009104 <_printf_common+0x58>
 8009174:	2301      	movs	r3, #1
 8009176:	4622      	mov	r2, r4
 8009178:	4641      	mov	r1, r8
 800917a:	4638      	mov	r0, r7
 800917c:	47c8      	blx	r9
 800917e:	3001      	adds	r0, #1
 8009180:	d0e6      	beq.n	8009150 <_printf_common+0xa4>
 8009182:	3601      	adds	r6, #1
 8009184:	e7d9      	b.n	800913a <_printf_common+0x8e>
	...

08009188 <_printf_i>:
 8009188:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800918c:	7e0f      	ldrb	r7, [r1, #24]
 800918e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009190:	2f78      	cmp	r7, #120	@ 0x78
 8009192:	4691      	mov	r9, r2
 8009194:	4680      	mov	r8, r0
 8009196:	460c      	mov	r4, r1
 8009198:	469a      	mov	sl, r3
 800919a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800919e:	d807      	bhi.n	80091b0 <_printf_i+0x28>
 80091a0:	2f62      	cmp	r7, #98	@ 0x62
 80091a2:	d80a      	bhi.n	80091ba <_printf_i+0x32>
 80091a4:	2f00      	cmp	r7, #0
 80091a6:	f000 80d1 	beq.w	800934c <_printf_i+0x1c4>
 80091aa:	2f58      	cmp	r7, #88	@ 0x58
 80091ac:	f000 80b8 	beq.w	8009320 <_printf_i+0x198>
 80091b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80091b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80091b8:	e03a      	b.n	8009230 <_printf_i+0xa8>
 80091ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80091be:	2b15      	cmp	r3, #21
 80091c0:	d8f6      	bhi.n	80091b0 <_printf_i+0x28>
 80091c2:	a101      	add	r1, pc, #4	@ (adr r1, 80091c8 <_printf_i+0x40>)
 80091c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80091c8:	08009221 	.word	0x08009221
 80091cc:	08009235 	.word	0x08009235
 80091d0:	080091b1 	.word	0x080091b1
 80091d4:	080091b1 	.word	0x080091b1
 80091d8:	080091b1 	.word	0x080091b1
 80091dc:	080091b1 	.word	0x080091b1
 80091e0:	08009235 	.word	0x08009235
 80091e4:	080091b1 	.word	0x080091b1
 80091e8:	080091b1 	.word	0x080091b1
 80091ec:	080091b1 	.word	0x080091b1
 80091f0:	080091b1 	.word	0x080091b1
 80091f4:	08009333 	.word	0x08009333
 80091f8:	0800925f 	.word	0x0800925f
 80091fc:	080092ed 	.word	0x080092ed
 8009200:	080091b1 	.word	0x080091b1
 8009204:	080091b1 	.word	0x080091b1
 8009208:	08009355 	.word	0x08009355
 800920c:	080091b1 	.word	0x080091b1
 8009210:	0800925f 	.word	0x0800925f
 8009214:	080091b1 	.word	0x080091b1
 8009218:	080091b1 	.word	0x080091b1
 800921c:	080092f5 	.word	0x080092f5
 8009220:	6833      	ldr	r3, [r6, #0]
 8009222:	1d1a      	adds	r2, r3, #4
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	6032      	str	r2, [r6, #0]
 8009228:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800922c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009230:	2301      	movs	r3, #1
 8009232:	e09c      	b.n	800936e <_printf_i+0x1e6>
 8009234:	6833      	ldr	r3, [r6, #0]
 8009236:	6820      	ldr	r0, [r4, #0]
 8009238:	1d19      	adds	r1, r3, #4
 800923a:	6031      	str	r1, [r6, #0]
 800923c:	0606      	lsls	r6, r0, #24
 800923e:	d501      	bpl.n	8009244 <_printf_i+0xbc>
 8009240:	681d      	ldr	r5, [r3, #0]
 8009242:	e003      	b.n	800924c <_printf_i+0xc4>
 8009244:	0645      	lsls	r5, r0, #25
 8009246:	d5fb      	bpl.n	8009240 <_printf_i+0xb8>
 8009248:	f9b3 5000 	ldrsh.w	r5, [r3]
 800924c:	2d00      	cmp	r5, #0
 800924e:	da03      	bge.n	8009258 <_printf_i+0xd0>
 8009250:	232d      	movs	r3, #45	@ 0x2d
 8009252:	426d      	negs	r5, r5
 8009254:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009258:	4858      	ldr	r0, [pc, #352]	@ (80093bc <_printf_i+0x234>)
 800925a:	230a      	movs	r3, #10
 800925c:	e011      	b.n	8009282 <_printf_i+0xfa>
 800925e:	6821      	ldr	r1, [r4, #0]
 8009260:	6833      	ldr	r3, [r6, #0]
 8009262:	0608      	lsls	r0, r1, #24
 8009264:	f853 5b04 	ldr.w	r5, [r3], #4
 8009268:	d402      	bmi.n	8009270 <_printf_i+0xe8>
 800926a:	0649      	lsls	r1, r1, #25
 800926c:	bf48      	it	mi
 800926e:	b2ad      	uxthmi	r5, r5
 8009270:	2f6f      	cmp	r7, #111	@ 0x6f
 8009272:	4852      	ldr	r0, [pc, #328]	@ (80093bc <_printf_i+0x234>)
 8009274:	6033      	str	r3, [r6, #0]
 8009276:	bf14      	ite	ne
 8009278:	230a      	movne	r3, #10
 800927a:	2308      	moveq	r3, #8
 800927c:	2100      	movs	r1, #0
 800927e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009282:	6866      	ldr	r6, [r4, #4]
 8009284:	60a6      	str	r6, [r4, #8]
 8009286:	2e00      	cmp	r6, #0
 8009288:	db05      	blt.n	8009296 <_printf_i+0x10e>
 800928a:	6821      	ldr	r1, [r4, #0]
 800928c:	432e      	orrs	r6, r5
 800928e:	f021 0104 	bic.w	r1, r1, #4
 8009292:	6021      	str	r1, [r4, #0]
 8009294:	d04b      	beq.n	800932e <_printf_i+0x1a6>
 8009296:	4616      	mov	r6, r2
 8009298:	fbb5 f1f3 	udiv	r1, r5, r3
 800929c:	fb03 5711 	mls	r7, r3, r1, r5
 80092a0:	5dc7      	ldrb	r7, [r0, r7]
 80092a2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80092a6:	462f      	mov	r7, r5
 80092a8:	42bb      	cmp	r3, r7
 80092aa:	460d      	mov	r5, r1
 80092ac:	d9f4      	bls.n	8009298 <_printf_i+0x110>
 80092ae:	2b08      	cmp	r3, #8
 80092b0:	d10b      	bne.n	80092ca <_printf_i+0x142>
 80092b2:	6823      	ldr	r3, [r4, #0]
 80092b4:	07df      	lsls	r7, r3, #31
 80092b6:	d508      	bpl.n	80092ca <_printf_i+0x142>
 80092b8:	6923      	ldr	r3, [r4, #16]
 80092ba:	6861      	ldr	r1, [r4, #4]
 80092bc:	4299      	cmp	r1, r3
 80092be:	bfde      	ittt	le
 80092c0:	2330      	movle	r3, #48	@ 0x30
 80092c2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80092c6:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80092ca:	1b92      	subs	r2, r2, r6
 80092cc:	6122      	str	r2, [r4, #16]
 80092ce:	f8cd a000 	str.w	sl, [sp]
 80092d2:	464b      	mov	r3, r9
 80092d4:	aa03      	add	r2, sp, #12
 80092d6:	4621      	mov	r1, r4
 80092d8:	4640      	mov	r0, r8
 80092da:	f7ff fee7 	bl	80090ac <_printf_common>
 80092de:	3001      	adds	r0, #1
 80092e0:	d14a      	bne.n	8009378 <_printf_i+0x1f0>
 80092e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80092e6:	b004      	add	sp, #16
 80092e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092ec:	6823      	ldr	r3, [r4, #0]
 80092ee:	f043 0320 	orr.w	r3, r3, #32
 80092f2:	6023      	str	r3, [r4, #0]
 80092f4:	4832      	ldr	r0, [pc, #200]	@ (80093c0 <_printf_i+0x238>)
 80092f6:	2778      	movs	r7, #120	@ 0x78
 80092f8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80092fc:	6823      	ldr	r3, [r4, #0]
 80092fe:	6831      	ldr	r1, [r6, #0]
 8009300:	061f      	lsls	r7, r3, #24
 8009302:	f851 5b04 	ldr.w	r5, [r1], #4
 8009306:	d402      	bmi.n	800930e <_printf_i+0x186>
 8009308:	065f      	lsls	r7, r3, #25
 800930a:	bf48      	it	mi
 800930c:	b2ad      	uxthmi	r5, r5
 800930e:	6031      	str	r1, [r6, #0]
 8009310:	07d9      	lsls	r1, r3, #31
 8009312:	bf44      	itt	mi
 8009314:	f043 0320 	orrmi.w	r3, r3, #32
 8009318:	6023      	strmi	r3, [r4, #0]
 800931a:	b11d      	cbz	r5, 8009324 <_printf_i+0x19c>
 800931c:	2310      	movs	r3, #16
 800931e:	e7ad      	b.n	800927c <_printf_i+0xf4>
 8009320:	4826      	ldr	r0, [pc, #152]	@ (80093bc <_printf_i+0x234>)
 8009322:	e7e9      	b.n	80092f8 <_printf_i+0x170>
 8009324:	6823      	ldr	r3, [r4, #0]
 8009326:	f023 0320 	bic.w	r3, r3, #32
 800932a:	6023      	str	r3, [r4, #0]
 800932c:	e7f6      	b.n	800931c <_printf_i+0x194>
 800932e:	4616      	mov	r6, r2
 8009330:	e7bd      	b.n	80092ae <_printf_i+0x126>
 8009332:	6833      	ldr	r3, [r6, #0]
 8009334:	6825      	ldr	r5, [r4, #0]
 8009336:	6961      	ldr	r1, [r4, #20]
 8009338:	1d18      	adds	r0, r3, #4
 800933a:	6030      	str	r0, [r6, #0]
 800933c:	062e      	lsls	r6, r5, #24
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	d501      	bpl.n	8009346 <_printf_i+0x1be>
 8009342:	6019      	str	r1, [r3, #0]
 8009344:	e002      	b.n	800934c <_printf_i+0x1c4>
 8009346:	0668      	lsls	r0, r5, #25
 8009348:	d5fb      	bpl.n	8009342 <_printf_i+0x1ba>
 800934a:	8019      	strh	r1, [r3, #0]
 800934c:	2300      	movs	r3, #0
 800934e:	6123      	str	r3, [r4, #16]
 8009350:	4616      	mov	r6, r2
 8009352:	e7bc      	b.n	80092ce <_printf_i+0x146>
 8009354:	6833      	ldr	r3, [r6, #0]
 8009356:	1d1a      	adds	r2, r3, #4
 8009358:	6032      	str	r2, [r6, #0]
 800935a:	681e      	ldr	r6, [r3, #0]
 800935c:	6862      	ldr	r2, [r4, #4]
 800935e:	2100      	movs	r1, #0
 8009360:	4630      	mov	r0, r6
 8009362:	f7f6 ff3d 	bl	80001e0 <memchr>
 8009366:	b108      	cbz	r0, 800936c <_printf_i+0x1e4>
 8009368:	1b80      	subs	r0, r0, r6
 800936a:	6060      	str	r0, [r4, #4]
 800936c:	6863      	ldr	r3, [r4, #4]
 800936e:	6123      	str	r3, [r4, #16]
 8009370:	2300      	movs	r3, #0
 8009372:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009376:	e7aa      	b.n	80092ce <_printf_i+0x146>
 8009378:	6923      	ldr	r3, [r4, #16]
 800937a:	4632      	mov	r2, r6
 800937c:	4649      	mov	r1, r9
 800937e:	4640      	mov	r0, r8
 8009380:	47d0      	blx	sl
 8009382:	3001      	adds	r0, #1
 8009384:	d0ad      	beq.n	80092e2 <_printf_i+0x15a>
 8009386:	6823      	ldr	r3, [r4, #0]
 8009388:	079b      	lsls	r3, r3, #30
 800938a:	d413      	bmi.n	80093b4 <_printf_i+0x22c>
 800938c:	68e0      	ldr	r0, [r4, #12]
 800938e:	9b03      	ldr	r3, [sp, #12]
 8009390:	4298      	cmp	r0, r3
 8009392:	bfb8      	it	lt
 8009394:	4618      	movlt	r0, r3
 8009396:	e7a6      	b.n	80092e6 <_printf_i+0x15e>
 8009398:	2301      	movs	r3, #1
 800939a:	4632      	mov	r2, r6
 800939c:	4649      	mov	r1, r9
 800939e:	4640      	mov	r0, r8
 80093a0:	47d0      	blx	sl
 80093a2:	3001      	adds	r0, #1
 80093a4:	d09d      	beq.n	80092e2 <_printf_i+0x15a>
 80093a6:	3501      	adds	r5, #1
 80093a8:	68e3      	ldr	r3, [r4, #12]
 80093aa:	9903      	ldr	r1, [sp, #12]
 80093ac:	1a5b      	subs	r3, r3, r1
 80093ae:	42ab      	cmp	r3, r5
 80093b0:	dcf2      	bgt.n	8009398 <_printf_i+0x210>
 80093b2:	e7eb      	b.n	800938c <_printf_i+0x204>
 80093b4:	2500      	movs	r5, #0
 80093b6:	f104 0619 	add.w	r6, r4, #25
 80093ba:	e7f5      	b.n	80093a8 <_printf_i+0x220>
 80093bc:	0800958d 	.word	0x0800958d
 80093c0:	0800959e 	.word	0x0800959e

080093c4 <__malloc_lock>:
 80093c4:	4801      	ldr	r0, [pc, #4]	@ (80093cc <__malloc_lock+0x8>)
 80093c6:	f7ff bbbf 	b.w	8008b48 <__retarget_lock_acquire_recursive>
 80093ca:	bf00      	nop
 80093cc:	20004e24 	.word	0x20004e24

080093d0 <__malloc_unlock>:
 80093d0:	4801      	ldr	r0, [pc, #4]	@ (80093d8 <__malloc_unlock+0x8>)
 80093d2:	f7ff bbba 	b.w	8008b4a <__retarget_lock_release_recursive>
 80093d6:	bf00      	nop
 80093d8:	20004e24 	.word	0x20004e24

080093dc <_realloc_r>:
 80093dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093e0:	4607      	mov	r7, r0
 80093e2:	4614      	mov	r4, r2
 80093e4:	460d      	mov	r5, r1
 80093e6:	b921      	cbnz	r1, 80093f2 <_realloc_r+0x16>
 80093e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093ec:	4611      	mov	r1, r2
 80093ee:	f7ff bddd 	b.w	8008fac <_malloc_r>
 80093f2:	b92a      	cbnz	r2, 8009400 <_realloc_r+0x24>
 80093f4:	f7ff fc16 	bl	8008c24 <_free_r>
 80093f8:	4625      	mov	r5, r4
 80093fa:	4628      	mov	r0, r5
 80093fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009400:	f000 f844 	bl	800948c <_malloc_usable_size_r>
 8009404:	4284      	cmp	r4, r0
 8009406:	4606      	mov	r6, r0
 8009408:	d802      	bhi.n	8009410 <_realloc_r+0x34>
 800940a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800940e:	d8f4      	bhi.n	80093fa <_realloc_r+0x1e>
 8009410:	4621      	mov	r1, r4
 8009412:	4638      	mov	r0, r7
 8009414:	f7ff fdca 	bl	8008fac <_malloc_r>
 8009418:	4680      	mov	r8, r0
 800941a:	b908      	cbnz	r0, 8009420 <_realloc_r+0x44>
 800941c:	4645      	mov	r5, r8
 800941e:	e7ec      	b.n	80093fa <_realloc_r+0x1e>
 8009420:	42b4      	cmp	r4, r6
 8009422:	4622      	mov	r2, r4
 8009424:	4629      	mov	r1, r5
 8009426:	bf28      	it	cs
 8009428:	4632      	movcs	r2, r6
 800942a:	f7ff fbed 	bl	8008c08 <memcpy>
 800942e:	4629      	mov	r1, r5
 8009430:	4638      	mov	r0, r7
 8009432:	f7ff fbf7 	bl	8008c24 <_free_r>
 8009436:	e7f1      	b.n	800941c <_realloc_r+0x40>

08009438 <memmove>:
 8009438:	4288      	cmp	r0, r1
 800943a:	b510      	push	{r4, lr}
 800943c:	eb01 0402 	add.w	r4, r1, r2
 8009440:	d902      	bls.n	8009448 <memmove+0x10>
 8009442:	4284      	cmp	r4, r0
 8009444:	4623      	mov	r3, r4
 8009446:	d807      	bhi.n	8009458 <memmove+0x20>
 8009448:	1e43      	subs	r3, r0, #1
 800944a:	42a1      	cmp	r1, r4
 800944c:	d008      	beq.n	8009460 <memmove+0x28>
 800944e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009452:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009456:	e7f8      	b.n	800944a <memmove+0x12>
 8009458:	4402      	add	r2, r0
 800945a:	4601      	mov	r1, r0
 800945c:	428a      	cmp	r2, r1
 800945e:	d100      	bne.n	8009462 <memmove+0x2a>
 8009460:	bd10      	pop	{r4, pc}
 8009462:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009466:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800946a:	e7f7      	b.n	800945c <memmove+0x24>

0800946c <_sbrk_r>:
 800946c:	b538      	push	{r3, r4, r5, lr}
 800946e:	4d06      	ldr	r5, [pc, #24]	@ (8009488 <_sbrk_r+0x1c>)
 8009470:	2300      	movs	r3, #0
 8009472:	4604      	mov	r4, r0
 8009474:	4608      	mov	r0, r1
 8009476:	602b      	str	r3, [r5, #0]
 8009478:	f7f8 fcba 	bl	8001df0 <_sbrk>
 800947c:	1c43      	adds	r3, r0, #1
 800947e:	d102      	bne.n	8009486 <_sbrk_r+0x1a>
 8009480:	682b      	ldr	r3, [r5, #0]
 8009482:	b103      	cbz	r3, 8009486 <_sbrk_r+0x1a>
 8009484:	6023      	str	r3, [r4, #0]
 8009486:	bd38      	pop	{r3, r4, r5, pc}
 8009488:	20004e28 	.word	0x20004e28

0800948c <_malloc_usable_size_r>:
 800948c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009490:	1f18      	subs	r0, r3, #4
 8009492:	2b00      	cmp	r3, #0
 8009494:	bfbc      	itt	lt
 8009496:	580b      	ldrlt	r3, [r1, r0]
 8009498:	18c0      	addlt	r0, r0, r3
 800949a:	4770      	bx	lr

0800949c <_init>:
 800949c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800949e:	bf00      	nop
 80094a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094a2:	bc08      	pop	{r3}
 80094a4:	469e      	mov	lr, r3
 80094a6:	4770      	bx	lr

080094a8 <_fini>:
 80094a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094aa:	bf00      	nop
 80094ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094ae:	bc08      	pop	{r3}
 80094b0:	469e      	mov	lr, r3
 80094b2:	4770      	bx	lr
