
MST-FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a8a0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  0800aa40  0800aa40  0000ba40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab80  0800ab80  0000c064  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ab80  0800ab80  0000bb80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ab88  0800ab88  0000c064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ab88  0800ab88  0000bb88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ab8c  0800ab8c  0000bb8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  0800ab90  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004dd8  20000064  0800abf4  0000c064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004e3c  0800abf4  0000ce3c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a662  00000000  00000000  0000c094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003aa6  00000000  00000000  000266f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015c8  00000000  00000000  0002a1a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010f4  00000000  00000000  0002b768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019423  00000000  00000000  0002c85c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017c34  00000000  00000000  00045c7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009979a  00000000  00000000  0005d8b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f704d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065c8  00000000  00000000  000f7090  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  000fd658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800aa28 	.word	0x0800aa28

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	0800aa28 	.word	0x0800aa28

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c0c:	f000 b988 	b.w	8000f20 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	468e      	mov	lr, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	4688      	mov	r8, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4617      	mov	r7, r2
 8000c3c:	d962      	bls.n	8000d04 <__udivmoddi4+0xdc>
 8000c3e:	fab2 f682 	clz	r6, r2
 8000c42:	b14e      	cbz	r6, 8000c58 <__udivmoddi4+0x30>
 8000c44:	f1c6 0320 	rsb	r3, r6, #32
 8000c48:	fa01 f806 	lsl.w	r8, r1, r6
 8000c4c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c50:	40b7      	lsls	r7, r6
 8000c52:	ea43 0808 	orr.w	r8, r3, r8
 8000c56:	40b4      	lsls	r4, r6
 8000c58:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c5c:	fa1f fc87 	uxth.w	ip, r7
 8000c60:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c64:	0c23      	lsrs	r3, r4, #16
 8000c66:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c6a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d909      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c76:	18fb      	adds	r3, r7, r3
 8000c78:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c7c:	f080 80ea 	bcs.w	8000e54 <__udivmoddi4+0x22c>
 8000c80:	429a      	cmp	r2, r3
 8000c82:	f240 80e7 	bls.w	8000e54 <__udivmoddi4+0x22c>
 8000c86:	3902      	subs	r1, #2
 8000c88:	443b      	add	r3, r7
 8000c8a:	1a9a      	subs	r2, r3, r2
 8000c8c:	b2a3      	uxth	r3, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c9a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c9e:	459c      	cmp	ip, r3
 8000ca0:	d909      	bls.n	8000cb6 <__udivmoddi4+0x8e>
 8000ca2:	18fb      	adds	r3, r7, r3
 8000ca4:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000ca8:	f080 80d6 	bcs.w	8000e58 <__udivmoddi4+0x230>
 8000cac:	459c      	cmp	ip, r3
 8000cae:	f240 80d3 	bls.w	8000e58 <__udivmoddi4+0x230>
 8000cb2:	443b      	add	r3, r7
 8000cb4:	3802      	subs	r0, #2
 8000cb6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cba:	eba3 030c 	sub.w	r3, r3, ip
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11d      	cbz	r5, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40f3      	lsrs	r3, r6
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d905      	bls.n	8000cde <__udivmoddi4+0xb6>
 8000cd2:	b10d      	cbz	r5, 8000cd8 <__udivmoddi4+0xb0>
 8000cd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4608      	mov	r0, r1
 8000cdc:	e7f5      	b.n	8000cca <__udivmoddi4+0xa2>
 8000cde:	fab3 f183 	clz	r1, r3
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	d146      	bne.n	8000d74 <__udivmoddi4+0x14c>
 8000ce6:	4573      	cmp	r3, lr
 8000ce8:	d302      	bcc.n	8000cf0 <__udivmoddi4+0xc8>
 8000cea:	4282      	cmp	r2, r0
 8000cec:	f200 8105 	bhi.w	8000efa <__udivmoddi4+0x2d2>
 8000cf0:	1a84      	subs	r4, r0, r2
 8000cf2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	4690      	mov	r8, r2
 8000cfa:	2d00      	cmp	r5, #0
 8000cfc:	d0e5      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000cfe:	e9c5 4800 	strd	r4, r8, [r5]
 8000d02:	e7e2      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	2a00      	cmp	r2, #0
 8000d06:	f000 8090 	beq.w	8000e2a <__udivmoddi4+0x202>
 8000d0a:	fab2 f682 	clz	r6, r2
 8000d0e:	2e00      	cmp	r6, #0
 8000d10:	f040 80a4 	bne.w	8000e5c <__udivmoddi4+0x234>
 8000d14:	1a8a      	subs	r2, r1, r2
 8000d16:	0c03      	lsrs	r3, r0, #16
 8000d18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d1c:	b280      	uxth	r0, r0
 8000d1e:	b2bc      	uxth	r4, r7
 8000d20:	2101      	movs	r1, #1
 8000d22:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d26:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d907      	bls.n	8000d46 <__udivmoddi4+0x11e>
 8000d36:	18fb      	adds	r3, r7, r3
 8000d38:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000d3c:	d202      	bcs.n	8000d44 <__udivmoddi4+0x11c>
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	f200 80e0 	bhi.w	8000f04 <__udivmoddi4+0x2dc>
 8000d44:	46c4      	mov	ip, r8
 8000d46:	1a9b      	subs	r3, r3, r2
 8000d48:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d4c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d50:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d54:	fb02 f404 	mul.w	r4, r2, r4
 8000d58:	429c      	cmp	r4, r3
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0x144>
 8000d5c:	18fb      	adds	r3, r7, r3
 8000d5e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x142>
 8000d64:	429c      	cmp	r4, r3
 8000d66:	f200 80ca 	bhi.w	8000efe <__udivmoddi4+0x2d6>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	1b1b      	subs	r3, r3, r4
 8000d6e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d72:	e7a5      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d74:	f1c1 0620 	rsb	r6, r1, #32
 8000d78:	408b      	lsls	r3, r1
 8000d7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7e:	431f      	orrs	r7, r3
 8000d80:	fa0e f401 	lsl.w	r4, lr, r1
 8000d84:	fa20 f306 	lsr.w	r3, r0, r6
 8000d88:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d8c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d90:	4323      	orrs	r3, r4
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	fa1f fc87 	uxth.w	ip, r7
 8000d9a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d9e:	0c1c      	lsrs	r4, r3, #16
 8000da0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000da4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000da8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	fa02 f201 	lsl.w	r2, r2, r1
 8000db2:	d909      	bls.n	8000dc8 <__udivmoddi4+0x1a0>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000dba:	f080 809c 	bcs.w	8000ef6 <__udivmoddi4+0x2ce>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f240 8099 	bls.w	8000ef6 <__udivmoddi4+0x2ce>
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	443c      	add	r4, r7
 8000dc8:	eba4 040e 	sub.w	r4, r4, lr
 8000dcc:	fa1f fe83 	uxth.w	lr, r3
 8000dd0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ddc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de0:	45a4      	cmp	ip, r4
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x1ce>
 8000de4:	193c      	adds	r4, r7, r4
 8000de6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000dea:	f080 8082 	bcs.w	8000ef2 <__udivmoddi4+0x2ca>
 8000dee:	45a4      	cmp	ip, r4
 8000df0:	d97f      	bls.n	8000ef2 <__udivmoddi4+0x2ca>
 8000df2:	3b02      	subs	r3, #2
 8000df4:	443c      	add	r4, r7
 8000df6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dfa:	eba4 040c 	sub.w	r4, r4, ip
 8000dfe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e02:	4564      	cmp	r4, ip
 8000e04:	4673      	mov	r3, lr
 8000e06:	46e1      	mov	r9, ip
 8000e08:	d362      	bcc.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e0a:	d05f      	beq.n	8000ecc <__udivmoddi4+0x2a4>
 8000e0c:	b15d      	cbz	r5, 8000e26 <__udivmoddi4+0x1fe>
 8000e0e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e12:	eb64 0409 	sbc.w	r4, r4, r9
 8000e16:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e1e:	431e      	orrs	r6, r3
 8000e20:	40cc      	lsrs	r4, r1
 8000e22:	e9c5 6400 	strd	r6, r4, [r5]
 8000e26:	2100      	movs	r1, #0
 8000e28:	e74f      	b.n	8000cca <__udivmoddi4+0xa2>
 8000e2a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e2e:	0c01      	lsrs	r1, r0, #16
 8000e30:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e34:	b280      	uxth	r0, r0
 8000e36:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e3a:	463b      	mov	r3, r7
 8000e3c:	4638      	mov	r0, r7
 8000e3e:	463c      	mov	r4, r7
 8000e40:	46b8      	mov	r8, r7
 8000e42:	46be      	mov	lr, r7
 8000e44:	2620      	movs	r6, #32
 8000e46:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e4a:	eba2 0208 	sub.w	r2, r2, r8
 8000e4e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e52:	e766      	b.n	8000d22 <__udivmoddi4+0xfa>
 8000e54:	4601      	mov	r1, r0
 8000e56:	e718      	b.n	8000c8a <__udivmoddi4+0x62>
 8000e58:	4610      	mov	r0, r2
 8000e5a:	e72c      	b.n	8000cb6 <__udivmoddi4+0x8e>
 8000e5c:	f1c6 0220 	rsb	r2, r6, #32
 8000e60:	fa2e f302 	lsr.w	r3, lr, r2
 8000e64:	40b7      	lsls	r7, r6
 8000e66:	40b1      	lsls	r1, r6
 8000e68:	fa20 f202 	lsr.w	r2, r0, r2
 8000e6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e70:	430a      	orrs	r2, r1
 8000e72:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e76:	b2bc      	uxth	r4, r7
 8000e78:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e7c:	0c11      	lsrs	r1, r2, #16
 8000e7e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e82:	fb08 f904 	mul.w	r9, r8, r4
 8000e86:	40b0      	lsls	r0, r6
 8000e88:	4589      	cmp	r9, r1
 8000e8a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e8e:	b280      	uxth	r0, r0
 8000e90:	d93e      	bls.n	8000f10 <__udivmoddi4+0x2e8>
 8000e92:	1879      	adds	r1, r7, r1
 8000e94:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000e98:	d201      	bcs.n	8000e9e <__udivmoddi4+0x276>
 8000e9a:	4589      	cmp	r9, r1
 8000e9c:	d81f      	bhi.n	8000ede <__udivmoddi4+0x2b6>
 8000e9e:	eba1 0109 	sub.w	r1, r1, r9
 8000ea2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ea6:	fb09 f804 	mul.w	r8, r9, r4
 8000eaa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eae:	b292      	uxth	r2, r2
 8000eb0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb4:	4542      	cmp	r2, r8
 8000eb6:	d229      	bcs.n	8000f0c <__udivmoddi4+0x2e4>
 8000eb8:	18ba      	adds	r2, r7, r2
 8000eba:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000ebe:	d2c4      	bcs.n	8000e4a <__udivmoddi4+0x222>
 8000ec0:	4542      	cmp	r2, r8
 8000ec2:	d2c2      	bcs.n	8000e4a <__udivmoddi4+0x222>
 8000ec4:	f1a9 0102 	sub.w	r1, r9, #2
 8000ec8:	443a      	add	r2, r7
 8000eca:	e7be      	b.n	8000e4a <__udivmoddi4+0x222>
 8000ecc:	45f0      	cmp	r8, lr
 8000ece:	d29d      	bcs.n	8000e0c <__udivmoddi4+0x1e4>
 8000ed0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ed4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ed8:	3801      	subs	r0, #1
 8000eda:	46e1      	mov	r9, ip
 8000edc:	e796      	b.n	8000e0c <__udivmoddi4+0x1e4>
 8000ede:	eba7 0909 	sub.w	r9, r7, r9
 8000ee2:	4449      	add	r1, r9
 8000ee4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ee8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eec:	fb09 f804 	mul.w	r8, r9, r4
 8000ef0:	e7db      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ef2:	4673      	mov	r3, lr
 8000ef4:	e77f      	b.n	8000df6 <__udivmoddi4+0x1ce>
 8000ef6:	4650      	mov	r0, sl
 8000ef8:	e766      	b.n	8000dc8 <__udivmoddi4+0x1a0>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e6fd      	b.n	8000cfa <__udivmoddi4+0xd2>
 8000efe:	443b      	add	r3, r7
 8000f00:	3a02      	subs	r2, #2
 8000f02:	e733      	b.n	8000d6c <__udivmoddi4+0x144>
 8000f04:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f08:	443b      	add	r3, r7
 8000f0a:	e71c      	b.n	8000d46 <__udivmoddi4+0x11e>
 8000f0c:	4649      	mov	r1, r9
 8000f0e:	e79c      	b.n	8000e4a <__udivmoddi4+0x222>
 8000f10:	eba1 0109 	sub.w	r1, r1, r9
 8000f14:	46c4      	mov	ip, r8
 8000f16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f1a:	fb09 f804 	mul.w	r8, r9, r4
 8000f1e:	e7c4      	b.n	8000eaa <__udivmoddi4+0x282>

08000f20 <__aeabi_idiv0>:
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <prvMSTSetupUSClock>:

#if(TESTING_STM32 == 1)
/*
 * Timer reference given from user and used by MST to count nanoseconds
 */
static float prvMSTSetupUSClock() {
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
	//set prescaler equal to MHz of clock
	//we have that f_step = 1Mhz and Tstep = 1us, this way we can count us
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000f28:	4b0a      	ldr	r3, [pc, #40]	@ (8000f54 <prvMSTSetupUSClock+0x30>)
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	4a09      	ldr	r2, [pc, #36]	@ (8000f54 <prvMSTSetupUSClock+0x30>)
 8000f2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000f32:	60d3      	str	r3, [r2, #12]
	DWT->CYCCNT = 0;
 8000f34:	4b08      	ldr	r3, [pc, #32]	@ (8000f58 <prvMSTSetupUSClock+0x34>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000f3a:	4b07      	ldr	r3, [pc, #28]	@ (8000f58 <prvMSTSetupUSClock+0x34>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a06      	ldr	r2, [pc, #24]	@ (8000f58 <prvMSTSetupUSClock+0x34>)
 8000f40:	f043 0301 	orr.w	r3, r3, #1
 8000f44:	6013      	str	r3, [r2, #0]
}
 8000f46:	bf00      	nop
 8000f48:	eeb0 0a67 	vmov.f32	s0, s15
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	e000edf0 	.word	0xe000edf0
 8000f58:	e0001000 	.word	0xe0001000

08000f5c <prvMSTGetUS>:

static uint32_t prvMSTGetUS() {
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
	uint32_t outUS = (DWT->CYCCNT / (24));
 8000f62:	4b07      	ldr	r3, [pc, #28]	@ (8000f80 <prvMSTGetUS+0x24>)
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	4a07      	ldr	r2, [pc, #28]	@ (8000f84 <prvMSTGetUS+0x28>)
 8000f68:	fba2 2303 	umull	r2, r3, r2, r3
 8000f6c:	091b      	lsrs	r3, r3, #4
 8000f6e:	607b      	str	r3, [r7, #4]
	return outUS;
 8000f70:	687b      	ldr	r3, [r7, #4]
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	e0001000 	.word	0xe0001000
 8000f84:	aaaaaaab 	.word	0xaaaaaaab

08000f88 <prvPeriodicTaskCreate>:
#if(mst_schedSCHEDULING_POLICY == mst_schedSCHEDULING_EDF)
static BaseType_t prvAsmissionControlEDF(extTCB_t *);
float prvPeriodicTasksDensity = 0;
#endif

static BaseType_t prvPeriodicTaskCreate(extTCB_t *xFromTCB) {
 8000f88:	b590      	push	{r4, r7, lr}
 8000f8a:	b087      	sub	sp, #28
 8000f8c:	af02      	add	r7, sp, #8
 8000f8e:	6078      	str	r0, [r7, #4]

	if (xFromTCB->pxCreatedTask == &SporadicServerHandle) {
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f94:	4a3b      	ldr	r2, [pc, #236]	@ (8001084 <prvPeriodicTaskCreate+0xfc>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d11f      	bne.n	8000fda <prvPeriodicTaskCreate+0x52>
		/*
		 The periodic task passed is the sporadic server, it shall not
		 pass the prvMSTPeriodicGenericJob but the prvMSTSporadicServerJob
		 */
		if (xTaskCreate(prvMSTSporadicServerJob, xFromTCB->pcName,
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6999      	ldr	r1, [r3, #24]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	8b98      	ldrh	r0, [r3, #28]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6a1c      	ldr	r4, [r3, #32]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000faa:	687a      	ldr	r2, [r7, #4]
 8000fac:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8000fae:	9201      	str	r2, [sp, #4]
 8000fb0:	9300      	str	r3, [sp, #0]
 8000fb2:	4623      	mov	r3, r4
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	4834      	ldr	r0, [pc, #208]	@ (8001088 <prvPeriodicTaskCreate+0x100>)
 8000fb8:	f005 fba0 	bl	80066fc <xTaskCreate>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d109      	bne.n	8000fd6 <prvPeriodicTaskCreate+0x4e>
				xFromTCB->usStackDepth, xFromTCB->pvParameters,
				xFromTCB->uxPriority, xFromTCB->pxCreatedTask) == pdPASS) {
			/*
			 No need for timer since called by aperiodic/sporadic task
			 */
			vTaskSetThreadLocalStoragePointer(*(xFromTCB->pxCreatedTask),
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	687a      	ldr	r2, [r7, #4]
 8000fca:	2100      	movs	r1, #0
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f006 f9c1 	bl	8007354 <vTaskSetThreadLocalStoragePointer>
			mstLOCAL_STORAGE_DATA_INDEX, xFromTCB);
			return pdPASS;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e052      	b.n	800107c <prvPeriodicTaskCreate+0xf4>
		} else {
			return pdFAIL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	e050      	b.n	800107c <prvPeriodicTaskCreate+0xf4>
		}
	} else {
		/*
		 Generic periodic task
		 */
		if (xTaskCreate(prvMSTPeriodicGenericJob, xFromTCB->pcName,
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6999      	ldr	r1, [r3, #24]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	8b98      	ldrh	r0, [r3, #28]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6a1c      	ldr	r4, [r3, #32]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8000fee:	9201      	str	r2, [sp, #4]
 8000ff0:	9300      	str	r3, [sp, #0]
 8000ff2:	4623      	mov	r3, r4
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	4825      	ldr	r0, [pc, #148]	@ (800108c <prvPeriodicTaskCreate+0x104>)
 8000ff8:	f005 fb80 	bl	80066fc <xTaskCreate>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d13b      	bne.n	800107a <prvPeriodicTaskCreate+0xf2>
			/*
			 Create the timer,
			 Handle the specific semaphore for the callback
			 */
			TimerHandle_t xTimer = xTimerCreate("generic periodic timer",
					pdMS_TO_TICKS(xFromTCB->xTaskPhase + xFromTCB->xTaskPeriod),
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100a:	4413      	add	r3, r2
 800100c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001010:	fb02 f303 	mul.w	r3, r2, r3
			TimerHandle_t xTimer = xTimerCreate("generic periodic timer",
 8001014:	4a1e      	ldr	r2, [pc, #120]	@ (8001090 <prvPeriodicTaskCreate+0x108>)
 8001016:	fba2 2303 	umull	r2, r3, r2, r3
 800101a:	0999      	lsrs	r1, r3, #6
					pdTRUE, (void*) (xFromTCB->pxCreatedTask),
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
			TimerHandle_t xTimer = xTimerCreate("generic periodic timer",
 8001020:	4a1c      	ldr	r2, [pc, #112]	@ (8001094 <prvPeriodicTaskCreate+0x10c>)
 8001022:	9200      	str	r2, [sp, #0]
 8001024:	2201      	movs	r2, #1
 8001026:	481c      	ldr	r0, [pc, #112]	@ (8001098 <prvPeriodicTaskCreate+0x110>)
 8001028:	f006 ff1c 	bl	8007e64 <xTimerCreate>
 800102c:	60f8      	str	r0, [r7, #12]
					prvMSTPeriodicTimerCallback);
			xFromTCB->xTaskSpecificTimer = xTimer;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	68fa      	ldr	r2, [r7, #12]
 8001032:	661a      	str	r2, [r3, #96]	@ 0x60
			configASSERT(xTimerStart(xTimer, 0) == pdPASS)
 8001034:	f005 fe5e 	bl	8006cf4 <xTaskGetTickCount>
 8001038:	4602      	mov	r2, r0
 800103a:	2300      	movs	r3, #0
 800103c:	9300      	str	r3, [sp, #0]
 800103e:	2300      	movs	r3, #0
 8001040:	2101      	movs	r1, #1
 8001042:	68f8      	ldr	r0, [r7, #12]
 8001044:	f006 ff6c 	bl	8007f20 <xTimerGenericCommand>
 8001048:	4603      	mov	r3, r0
 800104a:	2b01      	cmp	r3, #1
 800104c:	d00b      	beq.n	8001066 <prvPeriodicTaskCreate+0xde>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800104e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001052:	f383 8811 	msr	BASEPRI, r3
 8001056:	f3bf 8f6f 	isb	sy
 800105a:	f3bf 8f4f 	dsb	sy
 800105e:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001060:	bf00      	nop
 8001062:	bf00      	nop
 8001064:	e7fd      	b.n	8001062 <prvPeriodicTaskCreate+0xda>
#endif
			vTaskSetThreadLocalStoragePointer(*(xFromTCB->pxCreatedTask),
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	687a      	ldr	r2, [r7, #4]
 800106e:	2100      	movs	r1, #0
 8001070:	4618      	mov	r0, r3
 8001072:	f006 f96f 	bl	8007354 <vTaskSetThreadLocalStoragePointer>
			mstLOCAL_STORAGE_DATA_INDEX, xFromTCB);
			return pdPASS;
 8001076:	2301      	movs	r3, #1
 8001078:	e000      	b.n	800107c <prvPeriodicTaskCreate+0xf4>
		} else {
			return pdFAIL;
 800107a:	2300      	movs	r3, #0
		}
	}
}
 800107c:	4618      	mov	r0, r3
 800107e:	3714      	adds	r7, #20
 8001080:	46bd      	mov	sp, r7
 8001082:	bd90      	pop	{r4, r7, pc}
 8001084:	2000009c 	.word	0x2000009c
 8001088:	08001795 	.word	0x08001795
 800108c:	080011c5 	.word	0x080011c5
 8001090:	10624dd3 	.word	0x10624dd3
 8001094:	08001301 	.word	0x08001301
 8001098:	0800aa40 	.word	0x0800aa40

0800109c <prvAddItemToxTasksList>:

/*
 Adds a certain item to the generic xTaskList
 */
static BaseType_t prvAddItemToxTasksList(extTCB_t *fromTCB,
		BaseType_t withValue) {
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]
	if (vTasksListInit == pdFALSE) {
 80010a6:	4b16      	ldr	r3, [pc, #88]	@ (8001100 <prvAddItemToxTasksList+0x64>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d108      	bne.n	80010c0 <prvAddItemToxTasksList+0x24>
		vTasksListInit = pdTRUE;
 80010ae:	4b14      	ldr	r3, [pc, #80]	@ (8001100 <prvAddItemToxTasksList+0x64>)
 80010b0:	2201      	movs	r2, #1
 80010b2:	601a      	str	r2, [r3, #0]
		vListInitialise(&xTasksList);
 80010b4:	4813      	ldr	r0, [pc, #76]	@ (8001104 <prvAddItemToxTasksList+0x68>)
 80010b6:	f004 fb1f 	bl	80056f8 <vListInitialise>
		xListTasksNumber = 0;
 80010ba:	4b13      	ldr	r3, [pc, #76]	@ (8001108 <prvAddItemToxTasksList+0x6c>)
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
	}
	if (!listIS_CONTAINED_WITHIN(&xTasksList, &fromTCB->pxTaskTCBListItem)) {
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	691b      	ldr	r3, [r3, #16]
 80010c4:	4a0f      	ldr	r2, [pc, #60]	@ (8001104 <prvAddItemToxTasksList+0x68>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d015      	beq.n	80010f6 <prvAddItemToxTasksList+0x5a>
		vListInitialiseItem(&(fromTCB->pxTaskTCBListItem));
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f004 fb33 	bl	8005738 <vListInitialiseItem>
		listSET_LIST_ITEM_OWNER(&(fromTCB->pxTaskTCBListItem), fromTCB);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	687a      	ldr	r2, [r7, #4]
 80010d6:	60da      	str	r2, [r3, #12]
		listSET_LIST_ITEM_VALUE(&(fromTCB->pxTaskTCBListItem), withValue);
 80010d8:	683a      	ldr	r2, [r7, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	601a      	str	r2, [r3, #0]
		vListInsertEnd(&xTasksList, &(fromTCB->pxTaskTCBListItem));
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4619      	mov	r1, r3
 80010e2:	4808      	ldr	r0, [pc, #32]	@ (8001104 <prvAddItemToxTasksList+0x68>)
 80010e4:	f004 fb35 	bl	8005752 <vListInsertEnd>
		xListTasksNumber++;
 80010e8:	4b07      	ldr	r3, [pc, #28]	@ (8001108 <prvAddItemToxTasksList+0x6c>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	3301      	adds	r3, #1
 80010ee:	4a06      	ldr	r2, [pc, #24]	@ (8001108 <prvAddItemToxTasksList+0x6c>)
 80010f0:	6013      	str	r3, [r2, #0]
		return pdTRUE;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e000      	b.n	80010f8 <prvAddItemToxTasksList+0x5c>
	}
	return pdFALSE;
 80010f6:	2300      	movs	r3, #0
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20000080 	.word	0x20000080
 8001104:	20000084 	.word	0x20000084
 8001108:	20000098 	.word	0x20000098

0800110c <vMSTPeriodicTaskCreate>:
TaskHandle_t vMSTPeriodicTaskCreate(TaskFunction_t pvJobCode,
		const char *pcName, uint16_t usStackDepth, void *pvParameters,
		UBaseType_t uxPriority, TaskHandle_t *pxCreatedTask,
		/* library-specific parameters */
		TickType_t xTaskPeriod, TickType_t xTaskDeadline, TickType_t xTaskPhase,
		TickType_t xTaskWCET) {
 800110c:	b580      	push	{r7, lr}
 800110e:	b0a4      	sub	sp, #144	@ 0x90
 8001110:	af00      	add	r7, sp, #0
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	60b9      	str	r1, [r7, #8]
 8001116:	603b      	str	r3, [r7, #0]
 8001118:	4613      	mov	r3, r2
 800111a:	80fb      	strh	r3, [r7, #6]

	/*
	 Allocate, fill extended TCB using local task storage
	 */

	xNewExtTCB = (extTCB_t*) pvPortMalloc(sizeof(extTCB_t));
 800111c:	207c      	movs	r0, #124	@ 0x7c
 800111e:	f007 fca5 	bl	8008a6c <pvPortMalloc>
 8001122:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
	*xNewExtTCB = (extTCB_t ) { .pvJobCode = pvJobCode, .pcName = pcName,
 8001126:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800112a:	4618      	mov	r0, r3
 800112c:	237c      	movs	r3, #124	@ 0x7c
 800112e:	461a      	mov	r2, r3
 8001130:	2100      	movs	r1, #0
 8001132:	f008 f83f 	bl	80091b4 <memset>
 8001136:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800113a:	68fa      	ldr	r2, [r7, #12]
 800113c:	615a      	str	r2, [r3, #20]
 800113e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001142:	68ba      	ldr	r2, [r7, #8]
 8001144:	619a      	str	r2, [r3, #24]
 8001146:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800114a:	88fa      	ldrh	r2, [r7, #6]
 800114c:	839a      	strh	r2, [r3, #28]
 800114e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001152:	683a      	ldr	r2, [r7, #0]
 8001154:	621a      	str	r2, [r3, #32]
 8001156:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800115a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800115e:	625a      	str	r2, [r3, #36]	@ 0x24
 8001160:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001164:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8001168:	629a      	str	r2, [r3, #40]	@ 0x28
 800116a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800116e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8001172:	631a      	str	r2, [r3, #48]	@ 0x30
 8001174:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001178:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800117c:	635a      	str	r2, [r3, #52]	@ 0x34
 800117e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001182:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8001186:	639a      	str	r2, [r3, #56]	@ 0x38
 8001188:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800118c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8001190:	63da      	str	r2, [r3, #60]	@ 0x3c
	/*
	 If RMS we fill a list containg all the declared tasks by the user before kernel init.
	 They will be reordered and properly set-up as the kernel start is called
	 */

	if (pxCreatedTask == &SporadicServerHandle) {
 8001192:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001196:	4a0a      	ldr	r2, [pc, #40]	@ (80011c0 <vMSTPeriodicTaskCreate+0xb4>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d104      	bne.n	80011a6 <vMSTPeriodicTaskCreate+0x9a>
		/*
		 The periodic task passed is the sporadic server, it shall not
		 pass the prvMSTPeriodicGenericJob but the prvMSTSporadicServerJob
		 */
		prvPeriodicTaskCreate(xNewExtTCB);
 800119c:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 80011a0:	f7ff fef2 	bl	8000f88 <prvPeriodicTaskCreate>
 80011a4:	e006      	b.n	80011b4 <vMSTPeriodicTaskCreate+0xa8>
	} else {
		prvAddItemToxTasksList(xNewExtTCB, xTaskPeriod);
 80011a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80011aa:	4619      	mov	r1, r3
 80011ac:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 80011b0:	f7ff ff74 	bl	800109c <prvAddItemToxTasksList>
	}

	return pdPASS;
 80011b4:	2301      	movs	r3, #1
	} else {
		return pdFAIL;
	}
#endif

}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3790      	adds	r7, #144	@ 0x90
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	2000009c 	.word	0x2000009c

080011c4 <prvMSTPeriodicGenericJob>:
 * mst_test_PERIODIC_METHOD 2: Uses FreeRTOS global timers to callback the task appropriately.
 *
 * @param pvParameters
 */

static void prvMSTPeriodicGenericJob(void *pvParameters) {
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b088      	sub	sp, #32
 80011c8:	af02      	add	r7, sp, #8
 80011ca:	6078      	str	r0, [r7, #4]
#if(mst_test_PERIODIC_METHOD == 2)
	/*
	 Takes notification for current task
	 */
	ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80011cc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80011d0:	2001      	movs	r0, #1
 80011d2:	f006 fc3b 	bl	8007a4c <ulTaskNotifyTake>
#endif
	/*
	 Get values about current job
	 */
	TaskHandle_t xCurrentHandle = xTaskGetCurrentTaskHandle();
 80011d6:	f006 fa9b 	bl	8007710 <xTaskGetCurrentTaskHandle>
 80011da:	6178      	str	r0, [r7, #20]
	extTCB_t *xCurrExtTCB = (extTCB_t*) pvTaskGetThreadLocalStoragePointer(
 80011dc:	2100      	movs	r1, #0
 80011de:	6978      	ldr	r0, [r7, #20]
 80011e0:	f006 f8d8 	bl	8007394 <pvTaskGetThreadLocalStoragePointer>
 80011e4:	6138      	str	r0, [r7, #16]
			xCurrentHandle, mstLOCAL_STORAGE_DATA_INDEX);
	/*
	 We assert that the TCB has been retreived, else we compromised exec
	 */
	configASSERT(xCurrExtTCB != NULL);
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d10b      	bne.n	8001204 <prvMSTPeriodicGenericJob+0x40>
	__asm volatile
 80011ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80011f0:	f383 8811 	msr	BASEPRI, r3
 80011f4:	f3bf 8f6f 	isb	sy
 80011f8:	f3bf 8f4f 	dsb	sy
 80011fc:	60bb      	str	r3, [r7, #8]
}
 80011fe:	bf00      	nop
 8001200:	bf00      	nop
 8001202:	e7fd      	b.n	8001200 <prvMSTPeriodicGenericJob+0x3c>
	/*
	 First iteration with phase passed, change the period to not have the phase
	 */
	if (xCurrExtTCB->xTaskInitDone == pdFALSE) {
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001208:	2b00      	cmp	r3, #0
 800120a:	d11f      	bne.n	800124c <prvMSTPeriodicGenericJob+0x88>
		xCurrExtTCB->xTaskInitDone = pdTRUE;
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	2201      	movs	r2, #1
 8001210:	65da      	str	r2, [r3, #92]	@ 0x5c
#if(TESTING_STM32)
		//this is the us at start
		xCurrExtTCB->xUsFromIdealRelease = 0;
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	2200      	movs	r2, #0
 8001216:	665a      	str	r2, [r3, #100]	@ 0x64
		xCurrExtTCB->xUsAverageReleaseGap = 0;
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	2200      	movs	r2, #0
 800121c:	66da      	str	r2, [r3, #108]	@ 0x6c
#endif

		if (xCurrExtTCB->xTaskPhase > 0) {
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001222:	2b00      	cmp	r3, #0
 8001224:	d012      	beq.n	800124c <prvMSTPeriodicGenericJob+0x88>
			 If we have a phase, we should have just passed it
			 */
#if(mst_test_PERIODIC_METHOD == 1)
			vTaskDelayUntil(&(xCurrExtTCB->xPrevReleaseTime), xCurrExtTCB->xTaskPhase);
#elif(mst_test_PERIODIC_METHOD == 2)
			xTimerChangePeriod(xCurrExtTCB->xTaskSpecificTimer,
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	6e18      	ldr	r0, [r3, #96]	@ 0x60
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001232:	fb02 f303 	mul.w	r3, r2, r3
 8001236:	4a31      	ldr	r2, [pc, #196]	@ (80012fc <prvMSTPeriodicGenericJob+0x138>)
 8001238:	fba2 2303 	umull	r2, r3, r2, r3
 800123c:	099a      	lsrs	r2, r3, #6
 800123e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001242:	9300      	str	r3, [sp, #0]
 8001244:	2300      	movs	r3, #0
 8001246:	2104      	movs	r1, #4
 8001248:	f006 fe6a 	bl	8007f20 <xTimerGenericCommand>
#endif
		}

	}

	xCurrExtTCB->xPrevReleaseTime = xTaskGetTickCount();
 800124c:	f005 fd52 	bl	8006cf4 <xTaskGetTickCount>
 8001250:	4602      	mov	r2, r0
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	641a      	str	r2, [r3, #64]	@ 0x40
	for (;;) {

#if(TESTING_STM32)
		//count gap from execution if testing
#if(mst_test_PERIODIC_METHOD == 2)
		xCurrExtTCB->xNumOfIterations++;
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800125a:	1c5a      	adds	r2, r3, #1
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	669a      	str	r2, [r3, #104]	@ 0x68
#endif
		//calculate the absolute perfect release in us
		uint32_t perfRelease = xCurrExtTCB->xTaskPhase * 1000
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
				+ xCurrExtTCB->xTaskPeriod * 1000
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
						* (xCurrExtTCB->xNumOfIterations);
 8001268:	6939      	ldr	r1, [r7, #16]
 800126a:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 800126c:	fb01 f303 	mul.w	r3, r1, r3
				+ xCurrExtTCB->xTaskPeriod * 1000
 8001270:	4413      	add	r3, r2
		uint32_t perfRelease = xCurrExtTCB->xTaskPhase * 1000
 8001272:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001276:	fb02 f303 	mul.w	r3, r2, r3
 800127a:	60fb      	str	r3, [r7, #12]
		//calculate the gap between perfect and absolute gap in us and update the avg
		xCurrExtTCB->xUsFromIdealRelease += prvMSTGetUS() - perfRelease;
 800127c:	f7ff fe6e 	bl	8000f5c <prvMSTGetUS>
 8001280:	4602      	mov	r2, r0
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800128a:	4413      	add	r3, r2
 800128c:	461a      	mov	r2, r3
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	665a      	str	r2, [r3, #100]	@ 0x64
		if (xCurrExtTCB->xNumOfIterations > 0) {
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001296:	2b00      	cmp	r3, #0
 8001298:	d009      	beq.n	80012ae <prvMSTPeriodicGenericJob+0xea>
			xCurrExtTCB->xUsAverageReleaseGap =
					(xCurrExtTCB->xUsFromIdealRelease)
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800129e:	461a      	mov	r2, r3
							/ (xCurrExtTCB->xNumOfIterations);
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80012a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80012a8:	461a      	mov	r2, r3
			xCurrExtTCB->xUsAverageReleaseGap =
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	66da      	str	r2, [r3, #108]	@ 0x6c
#endif
#endif
		/*
		 Run user code
		 */
		xCurrExtTCB->xPrevStartTime = xTaskGetTickCount();
 80012ae:	f005 fd21 	bl	8006cf4 <xTaskGetTickCount>
 80012b2:	4602      	mov	r2, r0
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	64da      	str	r2, [r3, #76]	@ 0x4c
		xCurrExtTCB->pvJobCode(pvParameters);
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	695b      	ldr	r3, [r3, #20]
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	4798      	blx	r3
		xCurrExtTCB->xPrevFinishTime = xTaskGetTickCount();
 80012c0:	f005 fd18 	bl	8006cf4 <xTaskGetTickCount>
 80012c4:	4602      	mov	r2, r0
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	651a      	str	r2, [r3, #80]	@ 0x50
		xCurrExtTCB->xPrevExecTime = xCurrExtTCB->xPrevFinishTime
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
				- xCurrExtTCB->xPrevStartTime;
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012d2:	1ad2      	subs	r2, r2, r3
		xCurrExtTCB->xPrevExecTime = xCurrExtTCB->xPrevFinishTime
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	645a      	str	r2, [r3, #68]	@ 0x44

		if (xCurrExtTCB->xPrevExecTime > xCurrExtTCB->xTaskDeadline) {
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d904      	bls.n	80012ee <prvMSTPeriodicGenericJob+0x12a>
			//current task got over the deadline, make notice of the event
			xCurrExtTCB->uNumOfMissedDeadlines++;
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012e8:	1c5a      	adds	r2, r3, #1
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	655a      	str	r2, [r3, #84]	@ 0x54
		Update scheduler-referenced release time
		*/
		//vTaskDelay(pdMS_TO_TICKS(xCurrExtTCB->xTaskPeriod));
		vTaskDelayUntil(&(xCurrExtTCB->xPrevReleaseTime), pdMS_TO_TICKS(xCurrExtTCB->xTaskPeriod));
#elif(mst_test_PERIODIC_METHOD == 2)
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80012ee:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80012f2:	2001      	movs	r0, #1
 80012f4:	f006 fbaa 	bl	8007a4c <ulTaskNotifyTake>
	for (;;) {
 80012f8:	e7ad      	b.n	8001256 <prvMSTPeriodicGenericJob+0x92>
 80012fa:	bf00      	nop
 80012fc:	10624dd3 	.word	0x10624dd3

08001300 <prvMSTPeriodicTimerCallback>:

#if(mst_test_PERIODIC_METHOD == 2)
/*
 Using periodic timers with mutexes
 */
static void prvMSTPeriodicTimerCallback(TimerHandle_t xTimer) {
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
	/*
	 Here the callback of a certain task timer is called, it shall have the semaphore
	 as parameter
	 */
	TaskHandle_t *param = (TaskHandle_t*) pvTimerGetTimerID(xTimer);
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f007 f919 	bl	8008540 <pvTimerGetTimerID>
 800130e:	60f8      	str	r0, [r7, #12]
	prvMSTDispatch(param, true, taskTypePeriodic, false);
 8001310:	2300      	movs	r3, #0
 8001312:	2200      	movs	r2, #0
 8001314:	2101      	movs	r1, #1
 8001316:	68f8      	ldr	r0, [r7, #12]
 8001318:	f000 fc1e 	bl	8001b58 <prvMSTDispatch>
}
 800131c:	bf00      	nop
 800131e:	3710      	adds	r7, #16
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}

08001324 <vMSTSporadicTaskCreate>:
BaseType_t vMSTSporadicTaskCreate(TaskFunction_t pvJobCode, const char *pcName,
		uint16_t usStackDepth, void *pvParameters, UBaseType_t uxPriority,
		TaskHandle_t *pxCreatedTask,
		/* library-specific parameters */
		TickType_t xTaskInterarrivalTime, TickType_t xTaskDeadline,
		TickType_t xTaskWCET) {
 8001324:	b580      	push	{r7, lr}
 8001326:	b0a6      	sub	sp, #152	@ 0x98
 8001328:	af02      	add	r7, sp, #8
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	603b      	str	r3, [r7, #0]
 8001330:	4613      	mov	r3, r2
 8001332:	80fb      	strh	r3, [r7, #6]

	extTCB_t *xNewExtTCB;
	if (xTaskCreate(prvMSTSporadicGenericJob, pcName, usStackDepth,
 8001334:	88fa      	ldrh	r2, [r7, #6]
 8001336:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800133a:	9301      	str	r3, [sp, #4]
 800133c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001340:	9300      	str	r3, [sp, #0]
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	68b9      	ldr	r1, [r7, #8]
 8001346:	4826      	ldr	r0, [pc, #152]	@ (80013e0 <vMSTSporadicTaskCreate+0xbc>)
 8001348:	f005 f9d8 	bl	80066fc <xTaskCreate>
 800134c:	4603      	mov	r3, r0
 800134e:	2b01      	cmp	r3, #1
 8001350:	d140      	bne.n	80013d4 <vMSTSporadicTaskCreate+0xb0>
			pvParameters, uxPriority, pxCreatedTask) == pdPASS) {
		/*
		 Allocate, fill extended TCB using local task storage
		 */
		xNewExtTCB = (extTCB_t*) pvPortMalloc(sizeof(extTCB_t));
 8001352:	207c      	movs	r0, #124	@ 0x7c
 8001354:	f007 fb8a 	bl	8008a6c <pvPortMalloc>
 8001358:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
		//we should give it the priority of the ss if ss activated
		//if (pxCreatedTask == &SporadicServerHandle) uxPriority
		*xNewExtTCB = (extTCB_t ) { .pvJobCode = pvJobCode, .pcName = pcName,
 800135c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001360:	4618      	mov	r0, r3
 8001362:	237c      	movs	r3, #124	@ 0x7c
 8001364:	461a      	mov	r2, r3
 8001366:	2100      	movs	r1, #0
 8001368:	f007 ff24 	bl	80091b4 <memset>
 800136c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001370:	68fa      	ldr	r2, [r7, #12]
 8001372:	615a      	str	r2, [r3, #20]
 8001374:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001378:	68ba      	ldr	r2, [r7, #8]
 800137a:	619a      	str	r2, [r3, #24]
 800137c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001380:	683a      	ldr	r2, [r7, #0]
 8001382:	621a      	str	r2, [r3, #32]
 8001384:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001388:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800138c:	625a      	str	r2, [r3, #36]	@ 0x24
 800138e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001392:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8001396:	629a      	str	r2, [r3, #40]	@ 0x28
 8001398:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800139c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80013a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80013a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80013a6:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 80013aa:	671a      	str	r2, [r3, #112]	@ 0x70
						.xTaskInterarrivalTime = xTaskInterarrivalTime,
						.xJobCalled = pdFALSE, .xInterarrivalTimerRunning =
						pdFALSE };
		prvXMaxInterrarrivalTime =
				(xTaskInterarrivalTime > prvXMaxInterrarrivalTime) ?
						xTaskInterarrivalTime : prvXMaxInterrarrivalTime;
 80013ac:	4b0d      	ldr	r3, [pc, #52]	@ (80013e4 <vMSTSporadicTaskCreate+0xc0>)
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80013b4:	4293      	cmp	r3, r2
 80013b6:	bf38      	it	cc
 80013b8:	4613      	movcc	r3, r2
		prvXMaxInterrarrivalTime =
 80013ba:	4a0a      	ldr	r2, [pc, #40]	@ (80013e4 <vMSTSporadicTaskCreate+0xc0>)
 80013bc:	6013      	str	r3, [r2, #0]
		/*
		 We create the task and allocate, but we do not clear the mutex nor start the timer
		 */
		vTaskSetThreadLocalStoragePointer(*pxCreatedTask,
 80013be:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80013c8:	2100      	movs	r1, #0
 80013ca:	4618      	mov	r0, r3
 80013cc:	f005 ffc2 	bl	8007354 <vTaskSetThreadLocalStoragePointer>
		mstLOCAL_STORAGE_DATA_INDEX, xNewExtTCB);
		return pdPASS;
 80013d0:	2301      	movs	r3, #1
 80013d2:	e000      	b.n	80013d6 <vMSTSporadicTaskCreate+0xb2>
	} else {
		//task created unsuccesfully
		return pdFAIL;
 80013d4:	2300      	movs	r3, #0
	}
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3790      	adds	r7, #144	@ 0x90
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	0800141d 	.word	0x0800141d
 80013e4:	200000a0 	.word	0x200000a0

080013e8 <getTaskRunTime>:
 * - Interarrival timer unlocks previously called job
 *
 * @param pvParameters
 */

static BaseType_t getTaskRunTime(TaskHandle_t handle) {
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b08c      	sub	sp, #48	@ 0x30
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
	TaskStatus_t status;
	UBaseType_t count = uxTaskGetSystemState(&status, 1, NULL);
 80013f0:	f107 0308 	add.w	r3, r7, #8
 80013f4:	2200      	movs	r2, #0
 80013f6:	2101      	movs	r1, #1
 80013f8:	4618      	mov	r0, r3
 80013fa:	f005 fc8b 	bl	8006d14 <uxTaskGetSystemState>
 80013fe:	62f8      	str	r0, [r7, #44]	@ 0x2c
	if (count == 1 && status.xHandle == handle) {
 8001400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001402:	2b01      	cmp	r3, #1
 8001404:	d105      	bne.n	8001412 <getTaskRunTime+0x2a>
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	429a      	cmp	r2, r3
 800140c:	d101      	bne.n	8001412 <getTaskRunTime+0x2a>
		return status.ulRunTimeCounter;
 800140e:	6a3b      	ldr	r3, [r7, #32]
 8001410:	e000      	b.n	8001414 <getTaskRunTime+0x2c>
	}
	return 0;
 8001412:	2300      	movs	r3, #0
}
 8001414:	4618      	mov	r0, r3
 8001416:	3730      	adds	r7, #48	@ 0x30
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <prvMSTSporadicGenericJob>:
static void prvMSTSporadicGenericJob(void *pvParameters) {
 800141c:	b580      	push	{r7, lr}
 800141e:	b088      	sub	sp, #32
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]

	TaskHandle_t xCurrentHandle = xTaskGetCurrentTaskHandle();
 8001424:	f006 f974 	bl	8007710 <xTaskGetCurrentTaskHandle>
 8001428:	61f8      	str	r0, [r7, #28]
	extTCB_t *xCurrExtTCB = (extTCB_t*) pvTaskGetThreadLocalStoragePointer(
 800142a:	2100      	movs	r1, #0
 800142c:	69f8      	ldr	r0, [r7, #28]
 800142e:	f005 ffb1 	bl	8007394 <pvTaskGetThreadLocalStoragePointer>
 8001432:	61b8      	str	r0, [r7, #24]
			xCurrentHandle, mstLOCAL_STORAGE_DATA_INDEX);
	configASSERT(xCurrExtTCB != NULL);
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d10b      	bne.n	8001452 <prvMSTSporadicGenericJob+0x36>
	__asm volatile
 800143a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800143e:	f383 8811 	msr	BASEPRI, r3
 8001442:	f3bf 8f6f 	isb	sy
 8001446:	f3bf 8f4f 	dsb	sy
 800144a:	613b      	str	r3, [r7, #16]
}
 800144c:	bf00      	nop
 800144e:	bf00      	nop
 8001450:	e7fd      	b.n	800144e <prvMSTSporadicGenericJob+0x32>
#else
		/*
		 Using a sporadic server, no handling of interarrival, only holding
		 a lock on SS request
		 */
		xCurrExtTCB->xJobCalled = pdFALSE;
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	2200      	movs	r2, #0
 8001456:	679a      	str	r2, [r3, #120]	@ 0x78
		uint32_t notificationGiver;
		if (xTaskNotifyWait(0, NOTIFY_SS_REQUEST, &notificationGiver,
 8001458:	f107 020c 	add.w	r2, r7, #12
 800145c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001460:	2104      	movs	r1, #4
 8001462:	2000      	movs	r0, #0
 8001464:	f006 fb3e 	bl	8007ae4 <xTaskNotifyWait>
 8001468:	4603      	mov	r3, r0
 800146a:	2b01      	cmp	r3, #1
 800146c:	d102      	bne.n	8001474 <prvMSTSporadicGenericJob+0x58>
		portMAX_DELAY) == pdPASS) {
			xCurrExtTCB->xJobCalled = pdTRUE;
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	2201      	movs	r2, #1
 8001472:	679a      	str	r2, [r3, #120]	@ 0x78
		}
#endif

		BaseType_t actualCPUCycles = getTaskRunTime(xCurrentHandle);
 8001474:	69f8      	ldr	r0, [r7, #28]
 8001476:	f7ff ffb7 	bl	80013e8 <getTaskRunTime>
 800147a:	6178      	str	r0, [r7, #20]
		xCurrExtTCB->xPrevStartTime = xTaskGetTickCount();
 800147c:	f005 fc3a 	bl	8006cf4 <xTaskGetTickCount>
 8001480:	4602      	mov	r2, r0
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	64da      	str	r2, [r3, #76]	@ 0x4c
		xCurrExtTCB->pvJobCode(pvParameters);
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	695b      	ldr	r3, [r3, #20]
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	4798      	blx	r3
		/*
		 If periodic job is called within the task itself its no problem since the timer is going
		 */
		xCurrExtTCB->xPrevFinishTime = xTaskGetTickCount();
 800148e:	f005 fc31 	bl	8006cf4 <xTaskGetTickCount>
 8001492:	4602      	mov	r2, r0
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	651a      	str	r2, [r3, #80]	@ 0x50
		/*
		 The user shall have set up runtime stats appropriately:
		 1 tick->1us, hence 'actualCPUCycles' is in us
		 */
		//actualCPUCycles = getTaskRunTime(xCurrentHandle) - actualCPUCycles;
		actualCPUCycles = xCurrExtTCB->xPrevFinishTime
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
				- xCurrExtTCB->xPrevStartTime;
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014a0:	1ad3      	subs	r3, r2, r3
		actualCPUCycles = xCurrExtTCB->xPrevFinishTime
 80014a2:	617b      	str	r3, [r7, #20]

		//xCurrExtTCB->xPrevExecTime = xCurrExtTCB->xPrevFinishTime - xCurrExtTCB->xPrevStartTime;
		xCurrExtTCB->xPrevExecTime = actualCPUCycles;
 80014a4:	697a      	ldr	r2, [r7, #20]
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	645a      	str	r2, [r3, #68]	@ 0x44
#if mst_USE_SPORADIC_SERVER == 1
		/*
		 Job over, notify sporadic server
		 */
		xCurrExtTCB->xJobCalled = pdFALSE;
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	2200      	movs	r2, #0
 80014ae:	679a      	str	r2, [r3, #120]	@ 0x78
		xTaskNotify(SporadicServerHandle, NOTIFY_SS_REQUEST_DONE, eSetBits);
 80014b0:	4b03      	ldr	r3, [pc, #12]	@ (80014c0 <prvMSTSporadicGenericJob+0xa4>)
 80014b2:	6818      	ldr	r0, [r3, #0]
 80014b4:	2300      	movs	r3, #0
 80014b6:	2201      	movs	r2, #1
 80014b8:	2108      	movs	r1, #8
 80014ba:	f006 fb73 	bl	8007ba4 <xTaskGenericNotify>
	for (;;) {
 80014be:	e7c8      	b.n	8001452 <prvMSTSporadicGenericJob+0x36>
 80014c0:	2000009c 	.word	0x2000009c

080014c4 <vMSTSporadicTaskRun>:
		prvMSTDispatch(xCurrExtTCB->pxCreatedTask, false, taskTypeSporadic, false);
#endif
	}
}

BaseType_t vMSTSporadicTaskRun(TaskHandle_t *pxTaskToRunHandle) {
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
	/*
	 We check if the task has been created. To run the sporadic task we call a dispatch
	 */
	extTCB_t *xCurrExtTCB = (extTCB_t*) pvTaskGetThreadLocalStoragePointer(
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2100      	movs	r1, #0
 80014d2:	4618      	mov	r0, r3
 80014d4:	f005 ff5e 	bl	8007394 <pvTaskGetThreadLocalStoragePointer>
 80014d8:	60f8      	str	r0, [r7, #12]
			*pxTaskToRunHandle, mstLOCAL_STORAGE_DATA_INDEX);

	if (xCurrExtTCB == NULL) {
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d101      	bne.n	80014e4 <vMSTSporadicTaskRun+0x20>
		return pdFAIL;
 80014e0:	2300      	movs	r3, #0
 80014e2:	e006      	b.n	80014f2 <vMSTSporadicTaskRun+0x2e>
	} else {
		prvMSTDispatch(pxTaskToRunHandle, pdTRUE, taskTypeSporadic, pdTRUE);
 80014e4:	2301      	movs	r3, #1
 80014e6:	2201      	movs	r2, #1
 80014e8:	2101      	movs	r1, #1
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f000 fb34 	bl	8001b58 <prvMSTDispatch>
		return pdPASS;
 80014f0:	2301      	movs	r3, #1
	}
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3710      	adds	r7, #16
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <prv_compare>:

#if (mst_schedSCHEDULING_POLICY == mst_schedSCHEDULING_RMS || mst_schedSCHEDULING_POLICY == mst_schedSCHEDULING_EDF)
static int prv_compare(const void *arg1, const void *arg2) {
 80014fa:	b480      	push	{r7}
 80014fc:	b085      	sub	sp, #20
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
 8001502:	6039      	str	r1, [r7, #0]
	extTCB_t *itm1 = *(extTCB_t**) arg1;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	60fb      	str	r3, [r7, #12]
	extTCB_t *itm2 = *(extTCB_t**) arg2;
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	60bb      	str	r3, [r7, #8]

#if mst_schedSCHEDULING_POLICY == mst_schedSCHEDULING_RMS

	if (itm1->xTaskPeriod > itm2->xTaskPeriod)
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001518:	429a      	cmp	r2, r3
 800151a:	d902      	bls.n	8001522 <prv_compare+0x28>
		return -1;
 800151c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001520:	e008      	b.n	8001534 <prv_compare+0x3a>
	if (itm1->xTaskPeriod < itm2->xTaskPeriod)
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152a:	429a      	cmp	r2, r3
 800152c:	d201      	bcs.n	8001532 <prv_compare+0x38>
		return 1;
 800152e:	2301      	movs	r3, #1
 8001530:	e000      	b.n	8001534 <prv_compare+0x3a>
	return 0;
 8001532:	2300      	movs	r3, #0
	if (itm1->xTaskDeadline > itm2->xTaskDeadline)
		return 1;
	return 0; 
#endif

}
 8001534:	4618      	mov	r0, r3
 8001536:	3714      	adds	r7, #20
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <prvComputeSporadicServerProprierties>:

static void prvComputeSporadicServerProprierties(TickType_t *tSS_Period,
		TickType_t *tSS_WCET) {
 8001540:	b5b0      	push	{r4, r5, r7, lr}
 8001542:	b092      	sub	sp, #72	@ 0x48
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	6039      	str	r1, [r7, #0]
	 So we can evaluate:
	 T_ss = C_ss_i/U_ss

	 So here we try every possibility from max C_ss to min C_ss
	 */
	float m = xTasksList.uxNumberOfItems + 1;
 800154a:	4b7d      	ldr	r3, [pc, #500]	@ (8001740 <prvComputeSporadicServerProprierties+0x200>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	3301      	adds	r3, #1
 8001550:	ee07 3a90 	vmov	s15, r3
 8001554:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001558:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	float U = m * (pow(2.0, 1.0 / m) - 1.0);
 800155c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800155e:	f7fe fff3 	bl	8000548 <__aeabi_f2d>
 8001562:	4604      	mov	r4, r0
 8001564:	460d      	mov	r5, r1
 8001566:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001568:	f7fe ffee 	bl	8000548 <__aeabi_f2d>
 800156c:	4602      	mov	r2, r0
 800156e:	460b      	mov	r3, r1
 8001570:	f04f 0000 	mov.w	r0, #0
 8001574:	4973      	ldr	r1, [pc, #460]	@ (8001744 <prvComputeSporadicServerProprierties+0x204>)
 8001576:	f7ff f969 	bl	800084c <__aeabi_ddiv>
 800157a:	4602      	mov	r2, r0
 800157c:	460b      	mov	r3, r1
 800157e:	ec43 2b17 	vmov	d7, r2, r3
 8001582:	eeb0 1a47 	vmov.f32	s2, s14
 8001586:	eef0 1a67 	vmov.f32	s3, s15
 800158a:	ed9f 0b6b 	vldr	d0, [pc, #428]	@ 8001738 <prvComputeSporadicServerProprierties+0x1f8>
 800158e:	f008 faed 	bl	8009b6c <pow>
 8001592:	ec51 0b10 	vmov	r0, r1, d0
 8001596:	f04f 0200 	mov.w	r2, #0
 800159a:	4b6a      	ldr	r3, [pc, #424]	@ (8001744 <prvComputeSporadicServerProprierties+0x204>)
 800159c:	f7fe fe74 	bl	8000288 <__aeabi_dsub>
 80015a0:	4602      	mov	r2, r0
 80015a2:	460b      	mov	r3, r1
 80015a4:	4620      	mov	r0, r4
 80015a6:	4629      	mov	r1, r5
 80015a8:	f7ff f826 	bl	80005f8 <__aeabi_dmul>
 80015ac:	4602      	mov	r2, r0
 80015ae:	460b      	mov	r3, r1
 80015b0:	4610      	mov	r0, r2
 80015b2:	4619      	mov	r1, r3
 80015b4:	f7ff fad0 	bl	8000b58 <__aeabi_d2f>
 80015b8:	4603      	mov	r3, r0
 80015ba:	627b      	str	r3, [r7, #36]	@ 0x24
	TickType_t min_css = 0;
 80015bc:	2300      	movs	r3, #0
 80015be:	647b      	str	r3, [r7, #68]	@ 0x44
	TickType_t max_css = 0;
 80015c0:	2300      	movs	r3, #0
 80015c2:	643b      	str	r3, [r7, #64]	@ 0x40
	float sum_up = 0; //
 80015c4:	f04f 0300 	mov.w	r3, #0
 80015c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	ListItem_t *xItm = listGET_HEAD_ENTRY(&xTasksList); // this is xListEnd.pxNext
 80015ca:	4b5d      	ldr	r3, [pc, #372]	@ (8001740 <prvComputeSporadicServerProprierties+0x200>)
 80015cc:	68db      	ldr	r3, [r3, #12]
 80015ce:	63bb      	str	r3, [r7, #56]	@ 0x38
	for (int i = 0; i < xListTasksNumber; i++) {
 80015d0:	2300      	movs	r3, #0
 80015d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80015d4:	e048      	b.n	8001668 <prvComputeSporadicServerProprierties+0x128>
		extTCB_t *xTCB = (extTCB_t*) xItm->pvOwner;
 80015d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80015d8:	68db      	ldr	r3, [r3, #12]
 80015da:	61fb      	str	r3, [r7, #28]
		configASSERT(xTCB != NULL);  // Make sure we don't dereference garbage
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d10b      	bne.n	80015fa <prvComputeSporadicServerProprierties+0xba>
	__asm volatile
 80015e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80015e6:	f383 8811 	msr	BASEPRI, r3
 80015ea:	f3bf 8f6f 	isb	sy
 80015ee:	f3bf 8f4f 	dsb	sy
 80015f2:	613b      	str	r3, [r7, #16]
}
 80015f4:	bf00      	nop
 80015f6:	bf00      	nop
 80015f8:	e7fd      	b.n	80015f6 <prvComputeSporadicServerProprierties+0xb6>
		TickType_t t_wcet = xTCB->xTaskWCET;
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015fe:	61bb      	str	r3, [r7, #24]
		TickType_t t_per = xTCB->xTaskPeriod;
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001604:	617b      	str	r3, [r7, #20]
		if (t_wcet > min_css) {
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800160a:	429a      	cmp	r2, r3
 800160c:	d901      	bls.n	8001612 <prvComputeSporadicServerProprierties+0xd2>
			min_css = t_wcet;
 800160e:	69bb      	ldr	r3, [r7, #24]
 8001610:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		max_css += t_wcet;
 8001612:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	4413      	add	r3, r2
 8001618:	643b      	str	r3, [r7, #64]	@ 0x40
		configASSERT(t_per > 0);
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d10b      	bne.n	8001638 <prvComputeSporadicServerProprierties+0xf8>
	__asm volatile
 8001620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001624:	f383 8811 	msr	BASEPRI, r3
 8001628:	f3bf 8f6f 	isb	sy
 800162c:	f3bf 8f4f 	dsb	sy
 8001630:	60fb      	str	r3, [r7, #12]
}
 8001632:	bf00      	nop
 8001634:	bf00      	nop
 8001636:	e7fd      	b.n	8001634 <prvComputeSporadicServerProprierties+0xf4>
		sum_up += ((float) (t_wcet) / (float) (t_per));
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	ee07 3a90 	vmov	s15, r3
 800163e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	ee07 3a90 	vmov	s15, r3
 8001648:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800164c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001650:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8001654:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001658:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		xItm = listGET_NEXT(xItm);
 800165c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	63bb      	str	r3, [r7, #56]	@ 0x38
	for (int i = 0; i < xListTasksNumber; i++) {
 8001662:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001664:	3301      	adds	r3, #1
 8001666:	637b      	str	r3, [r7, #52]	@ 0x34
 8001668:	4b37      	ldr	r3, [pc, #220]	@ (8001748 <prvComputeSporadicServerProprierties+0x208>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800166e:	429a      	cmp	r2, r3
 8001670:	dbb1      	blt.n	80015d6 <prvComputeSporadicServerProprierties+0x96>
	}
	float Css = max_css;
 8001672:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001674:	ee07 3a90 	vmov	s15, r3
 8001678:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800167c:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
	float Uss = U - sum_up;
 8001680:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001684:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001688:	ee77 7a67 	vsub.f32	s15, s14, s15
 800168c:	edc7 7a08 	vstr	s15, [r7, #32]
	TickType_t Tss = 0;
 8001690:	2300      	movs	r3, #0
 8001692:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (Css >= min_css) {
 8001694:	e032      	b.n	80016fc <prvComputeSporadicServerProprierties+0x1bc>
		configASSERT(Uss > 0);
 8001696:	edd7 7a08 	vldr	s15, [r7, #32]
 800169a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800169e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016a2:	bfcc      	ite	gt
 80016a4:	2301      	movgt	r3, #1
 80016a6:	2300      	movle	r3, #0
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	f083 0301 	eor.w	r3, r3, #1
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d00b      	beq.n	80016cc <prvComputeSporadicServerProprierties+0x18c>
	__asm volatile
 80016b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80016b8:	f383 8811 	msr	BASEPRI, r3
 80016bc:	f3bf 8f6f 	isb	sy
 80016c0:	f3bf 8f4f 	dsb	sy
 80016c4:	60bb      	str	r3, [r7, #8]
}
 80016c6:	bf00      	nop
 80016c8:	bf00      	nop
 80016ca:	e7fd      	b.n	80016c8 <prvComputeSporadicServerProprierties+0x188>
		Tss = Css / Uss;
 80016cc:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 80016d0:	ed97 7a08 	vldr	s14, [r7, #32]
 80016d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016dc:	ee17 3a90 	vmov	r3, s15
 80016e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (Tss > prvXMaxInterrarrivalTime) {
 80016e2:	4b1a      	ldr	r3, [pc, #104]	@ (800174c <prvComputeSporadicServerProprierties+0x20c>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d914      	bls.n	8001716 <prvComputeSporadicServerProprierties+0x1d6>
			//not ok tss, keep going
			Css -= 1;
 80016ec:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80016f0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80016f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80016f8:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
	while (Css >= min_css) {
 80016fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80016fe:	ee07 3a90 	vmov	s15, r3
 8001702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001706:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800170a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800170e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001712:	dac0      	bge.n	8001696 <prvComputeSporadicServerProprierties+0x156>
 8001714:	e000      	b.n	8001718 <prvComputeSporadicServerProprierties+0x1d8>
		} else {
			//ok tss
			break;
 8001716:	bf00      	nop
		}
	}
	*tSS_Period = Tss;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800171c:	601a      	str	r2, [r3, #0]
	*tSS_WCET = Css;
 800171e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001722:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001726:	ee17 2a90 	vmov	r2, s15
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	601a      	str	r2, [r3, #0]
}
 800172e:	bf00      	nop
 8001730:	3748      	adds	r7, #72	@ 0x48
 8001732:	46bd      	mov	sp, r7
 8001734:	bdb0      	pop	{r4, r5, r7, pc}
 8001736:	bf00      	nop
 8001738:	00000000 	.word	0x00000000
 800173c:	40000000 	.word	0x40000000
 8001740:	20000084 	.word	0x20000084
 8001744:	3ff00000 	.word	0x3ff00000
 8001748:	20000098 	.word	0x20000098
 800174c:	200000a0 	.word	0x200000a0

08001750 <prvMSTGenericReplenishmentTimerCallback>:
 */

#if (mst_USE_SPORADIC_SERVER == 1 && mst_schedSCHEDULING_POLICY == mst_schedSCHEDULING_RMS)

volatile BaseType_t SporadicServerBudget = 0;
static void prvMSTGenericReplenishmentTimerCallback(TimerHandle_t xTimer) {
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
	/*
	 Notify a sporadic task but make sure it knows it was the timer to notify, by passing a parameter
	 */
	taskENTER_CRITICAL();
 8001758:	f007 f866 	bl	8008828 <vPortEnterCritical>
	BaseType_t param = (BaseType_t) pvTimerGetTimerID(xTimer);
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f006 feef 	bl	8008540 <pvTimerGetTimerID>
 8001762:	4603      	mov	r3, r0
 8001764:	60fb      	str	r3, [r7, #12]
	SporadicServerBudget += param;
 8001766:	4b09      	ldr	r3, [pc, #36]	@ (800178c <prvMSTGenericReplenishmentTimerCallback+0x3c>)
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	4413      	add	r3, r2
 800176e:	4a07      	ldr	r2, [pc, #28]	@ (800178c <prvMSTGenericReplenishmentTimerCallback+0x3c>)
 8001770:	6013      	str	r3, [r2, #0]
	xTaskNotify(SporadicServerHandle, NOTIFY_SS_BUDGET_REPLENISHED, eSetBits);
 8001772:	4b07      	ldr	r3, [pc, #28]	@ (8001790 <prvMSTGenericReplenishmentTimerCallback+0x40>)
 8001774:	6818      	ldr	r0, [r3, #0]
 8001776:	2300      	movs	r3, #0
 8001778:	2201      	movs	r2, #1
 800177a:	2140      	movs	r1, #64	@ 0x40
 800177c:	f006 fa12 	bl	8007ba4 <xTaskGenericNotify>
	taskEXIT_CRITICAL();
 8001780:	f007 f884 	bl	800888c <vPortExitCritical>
}
 8001784:	bf00      	nop
 8001786:	3710      	adds	r7, #16
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	200000a4 	.word	0x200000a4
 8001790:	2000009c 	.word	0x2000009c

08001794 <prvMSTSporadicServerJob>:
volatile BaseType_t isNextTaskAvailable = pdFALSE;

static void prvMSTSporadicServerJob(void *pvParameters) {
 8001794:	b580      	push	{r7, lr}
 8001796:	b092      	sub	sp, #72	@ 0x48
 8001798:	af02      	add	r7, sp, #8
 800179a:	6078      	str	r0, [r7, #4]

	TaskHandle_t xCurrentHandle = xTaskGetCurrentTaskHandle();
 800179c:	f005 ffb8 	bl	8007710 <xTaskGetCurrentTaskHandle>
 80017a0:	63f8      	str	r0, [r7, #60]	@ 0x3c
	extTCB_t *xCurrExtTCB = (extTCB_t*) pvTaskGetThreadLocalStoragePointer(
 80017a2:	2100      	movs	r1, #0
 80017a4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80017a6:	f005 fdf5 	bl	8007394 <pvTaskGetThreadLocalStoragePointer>
 80017aa:	63b8      	str	r0, [r7, #56]	@ 0x38
			xCurrentHandle, mstLOCAL_STORAGE_DATA_INDEX);
	configASSERT(xCurrExtTCB != NULL);
 80017ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d10b      	bne.n	80017ca <prvMSTSporadicServerJob+0x36>
	__asm volatile
 80017b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80017b6:	f383 8811 	msr	BASEPRI, r3
 80017ba:	f3bf 8f6f 	isb	sy
 80017be:	f3bf 8f4f 	dsb	sy
 80017c2:	623b      	str	r3, [r7, #32]
}
 80017c4:	bf00      	nop
 80017c6:	bf00      	nop
 80017c8:	e7fd      	b.n	80017c6 <prvMSTSporadicServerJob+0x32>
	SporadicServerBudget = xCurrExtTCB->xTaskWCET;
 80017ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80017cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017ce:	461a      	mov	r2, r3
 80017d0:	4b5c      	ldr	r3, [pc, #368]	@ (8001944 <prvMSTSporadicServerJob+0x1b0>)
 80017d2:	601a      	str	r2, [r3, #0]

	TimerHandle_t xReplenishmentTimer = xTimerCreate(
 80017d4:	4b5c      	ldr	r3, [pc, #368]	@ (8001948 <prvMSTSporadicServerJob+0x1b4>)
 80017d6:	9300      	str	r3, [sp, #0]
 80017d8:	2300      	movs	r3, #0
 80017da:	2200      	movs	r2, #0
 80017dc:	2164      	movs	r1, #100	@ 0x64
 80017de:	485b      	ldr	r0, [pc, #364]	@ (800194c <prvMSTSporadicServerJob+0x1b8>)
 80017e0:	f006 fb40 	bl	8007e64 <xTimerCreate>
 80017e4:	6378      	str	r0, [r7, #52]	@ 0x34
 80017e6:	e000      	b.n	80017ea <prvMSTSporadicServerJob+0x56>
	    pdMS_TO_TICKS(100), // Temporary period
	    pdFALSE,
	    NULL,               // Temporary placeholder
	    prvMSTGenericReplenishmentTimerCallback
	);
	for (;;) {
 80017e8:	bf00      	nop
		do {
			uint32_t ulNotifyVal = 0;
 80017ea:	2300      	movs	r3, #0
 80017ec:	613b      	str	r3, [r7, #16]
			xTaskNotifyWait(0,
 80017ee:	f107 0210 	add.w	r2, r7, #16
 80017f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80017f6:	2160      	movs	r1, #96	@ 0x60
 80017f8:	2000      	movs	r0, #0
 80017fa:	f006 f973 	bl	8007ae4 <xTaskNotifyWait>
			NOTIFY_SS_NEW_JOB_AVAILABLE | NOTIFY_SS_BUDGET_REPLENISHED,
					&ulNotifyVal, portMAX_DELAY);
			/*
			 * Act on new job or replenishment. Otherwise sleep
			 */
		} while (SporadicServerBudget <= 0 || listLIST_IS_EMPTY(&xTasksList));
 80017fe:	4b51      	ldr	r3, [pc, #324]	@ (8001944 <prvMSTSporadicServerJob+0x1b0>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2b00      	cmp	r3, #0
 8001804:	ddf1      	ble.n	80017ea <prvMSTSporadicServerJob+0x56>
 8001806:	4b52      	ldr	r3, [pc, #328]	@ (8001950 <prvMSTSporadicServerJob+0x1bc>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d0ed      	beq.n	80017ea <prvMSTSporadicServerJob+0x56>
		ListItem_t *xItm = listGET_HEAD_ENTRY(&xTasksList);
 800180e:	4b50      	ldr	r3, [pc, #320]	@ (8001950 <prvMSTSporadicServerJob+0x1bc>)
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	633b      	str	r3, [r7, #48]	@ 0x30
		extTCB_t *xTCB = (extTCB_t*) xItm->pvOwner;
 8001814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (xTCB->xJobCalled) {
 800181a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800181c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800181e:	2b00      	cmp	r3, #0
 8001820:	d1e2      	bne.n	80017e8 <prvMSTSporadicServerJob+0x54>
		} else {
			/*run the task by notifying a SS request
			 This should put xJobCalled = pdTRUE
			 */
			//task is running
			xTaskNotify(*(xTCB->pxCreatedTask), NOTIFY_SS_REQUEST, eSetBits);
 8001822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001826:	6818      	ldr	r0, [r3, #0]
 8001828:	2300      	movs	r3, #0
 800182a:	2201      	movs	r2, #1
 800182c:	2104      	movs	r1, #4
 800182e:	f006 f9b9 	bl	8007ba4 <xTaskGenericNotify>
			uint32_t notificationGiver;
			if (xTaskNotifyWait(0,
 8001832:	f107 020c 	add.w	r2, r7, #12
 8001836:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800183a:	2118      	movs	r1, #24
 800183c:	2000      	movs	r0, #0
 800183e:	f006 f951 	bl	8007ae4 <xTaskNotifyWait>
 8001842:	4603      	mov	r3, r0
 8001844:	2b01      	cmp	r3, #1
 8001846:	d1cf      	bne.n	80017e8 <prvMSTSporadicServerJob+0x54>
			NOTIFY_SS_REQUEST_DONE | NOTIFY_SS_BUDGET_FINISHED,
					&notificationGiver, portMAX_DELAY) == pdPASS) {
				if (notificationGiver & NOTIFY_SS_REQUEST_DONE) {
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f003 0308 	and.w	r3, r3, #8
 800184e:	2b00      	cmp	r3, #0
 8001850:	d0ca      	beq.n	80017e8 <prvMSTSporadicServerJob+0x54>
					/*the Sporadic job finished, we remove budget and
					 schedule replenishment. Note that xPrevExecTime considers
					 only the time for which the job actually ran in us, time used
					 form preempted tasks by the FreeRTOS kernel are not considered
					 */
					taskENTER_CRITICAL();
 8001852:	f006 ffe9 	bl	8008828 <vPortEnterCritical>
					SporadicServerBudget = SporadicServerBudget
							- xTCB->xPrevExecTime;
 8001856:	4b3b      	ldr	r3, [pc, #236]	@ (8001944 <prvMSTSporadicServerJob+0x1b0>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	461a      	mov	r2, r3
 800185c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800185e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	461a      	mov	r2, r3
					SporadicServerBudget = SporadicServerBudget
 8001864:	4b37      	ldr	r3, [pc, #220]	@ (8001944 <prvMSTSporadicServerJob+0x1b0>)
 8001866:	601a      	str	r2, [r3, #0]
					if (SporadicServerBudget < 0) {
 8001868:	4b36      	ldr	r3, [pc, #216]	@ (8001944 <prvMSTSporadicServerJob+0x1b0>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2b00      	cmp	r3, #0
 800186e:	da02      	bge.n	8001876 <prvMSTSporadicServerJob+0xe2>
						//This should never happen
						SporadicServerBudget = 0;
 8001870:	4b34      	ldr	r3, [pc, #208]	@ (8001944 <prvMSTSporadicServerJob+0x1b0>)
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]
					 */

					/*
					 Now remove the job and start the replenishment timer
					 */
					if (listIS_CONTAINED_WITHIN(&xTasksList,
 8001876:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001878:	691b      	ldr	r3, [r3, #16]
 800187a:	4a35      	ldr	r2, [pc, #212]	@ (8001950 <prvMSTSporadicServerJob+0x1bc>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d10d      	bne.n	800189c <prvMSTSporadicServerJob+0x108>
							&(xTCB->pxTaskTCBListItem))) {
						uxListRemove(&(xTCB->pxTaskTCBListItem));
 8001880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001882:	4618      	mov	r0, r3
 8001884:	f003 ffc2 	bl	800580c <uxListRemove>
						xListTasksNumber--;
 8001888:	4b32      	ldr	r3, [pc, #200]	@ (8001954 <prvMSTSporadicServerJob+0x1c0>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	3b01      	subs	r3, #1
 800188e:	4a31      	ldr	r2, [pc, #196]	@ (8001954 <prvMSTSporadicServerJob+0x1c0>)
 8001890:	6013      	str	r3, [r2, #0]
					} else {
						configASSERT(pdFALSE);
					}
					if (xTCB->xPrevExecTime > 0) {
 8001892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001896:	2b00      	cmp	r3, #0
 8001898:	d051      	beq.n	800193e <prvMSTSporadicServerJob+0x1aa>
 800189a:	e00b      	b.n	80018b4 <prvMSTSporadicServerJob+0x120>
	__asm volatile
 800189c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80018a0:	f383 8811 	msr	BASEPRI, r3
 80018a4:	f3bf 8f6f 	isb	sy
 80018a8:	f3bf 8f4f 	dsb	sy
 80018ac:	61fb      	str	r3, [r7, #28]
}
 80018ae:	bf00      	nop
						configASSERT(pdFALSE);
 80018b0:	bf00      	nop
 80018b2:	e7fd      	b.n	80018b0 <prvMSTSporadicServerJob+0x11c>

						TickType_t xNewPeriod = pdMS_TO_TICKS(
 80018b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80018b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80018b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018bc:	4413      	add	r3, r2
 80018be:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80018c2:	fb02 f303 	mul.w	r3, r2, r3
 80018c6:	4a24      	ldr	r2, [pc, #144]	@ (8001958 <prvMSTSporadicServerJob+0x1c4>)
 80018c8:	fba2 2303 	umull	r2, r3, r2, r3
 80018cc:	099b      	lsrs	r3, r3, #6
 80018ce:	62bb      	str	r3, [r7, #40]	@ 0x28
								xCurrExtTCB->xTaskPeriod + xTCB->xPrevExecTime);
						BaseType_t xResult = xTimerChangePeriod( xReplenishmentTimer, xNewPeriod, 0);
 80018d0:	2300      	movs	r3, #0
 80018d2:	9300      	str	r3, [sp, #0]
 80018d4:	2300      	movs	r3, #0
 80018d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80018d8:	2104      	movs	r1, #4
 80018da:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80018dc:	f006 fb20 	bl	8007f20 <xTimerGenericCommand>
 80018e0:	6278      	str	r0, [r7, #36]	@ 0x24
						vTimerSetTimerID(xReplenishmentTimer, (void *) xTCB->xPrevExecTime);
 80018e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018e6:	4619      	mov	r1, r3
 80018e8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80018ea:	f006 fe4a 	bl	8008582 <vTimerSetTimerID>
						configASSERT(xResult == pdPASS);
 80018ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d00b      	beq.n	800190c <prvMSTSporadicServerJob+0x178>
	__asm volatile
 80018f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80018f8:	f383 8811 	msr	BASEPRI, r3
 80018fc:	f3bf 8f6f 	isb	sy
 8001900:	f3bf 8f4f 	dsb	sy
 8001904:	61bb      	str	r3, [r7, #24]
}
 8001906:	bf00      	nop
 8001908:	bf00      	nop
 800190a:	e7fd      	b.n	8001908 <prvMSTSporadicServerJob+0x174>
						configASSERT(xTimerStart(xReplenishmentTimer, 0) == pdPASS);
 800190c:	f005 f9f2 	bl	8006cf4 <xTaskGetTickCount>
 8001910:	4602      	mov	r2, r0
 8001912:	2300      	movs	r3, #0
 8001914:	9300      	str	r3, [sp, #0]
 8001916:	2300      	movs	r3, #0
 8001918:	2101      	movs	r1, #1
 800191a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800191c:	f006 fb00 	bl	8007f20 <xTimerGenericCommand>
 8001920:	4603      	mov	r3, r0
 8001922:	2b01      	cmp	r3, #1
 8001924:	d00b      	beq.n	800193e <prvMSTSporadicServerJob+0x1aa>
	__asm volatile
 8001926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800192a:	f383 8811 	msr	BASEPRI, r3
 800192e:	f3bf 8f6f 	isb	sy
 8001932:	f3bf 8f4f 	dsb	sy
 8001936:	617b      	str	r3, [r7, #20]
}
 8001938:	bf00      	nop
 800193a:	bf00      	nop
 800193c:	e7fd      	b.n	800193a <prvMSTSporadicServerJob+0x1a6>
					}

					taskEXIT_CRITICAL();
 800193e:	f006 ffa5 	bl	800888c <vPortExitCritical>
	for (;;) {
 8001942:	e751      	b.n	80017e8 <prvMSTSporadicServerJob+0x54>
 8001944:	200000a4 	.word	0x200000a4
 8001948:	08001751 	.word	0x08001751
 800194c:	0800aa58 	.word	0x0800aa58
 8001950:	20000084 	.word	0x20000084
 8001954:	20000098 	.word	0x20000098
 8001958:	10624dd3 	.word	0x10624dd3

0800195c <prvComputeOrderedPriorities>:
/*
 *TODO: This can be obviously optimized by using an appropriate data structure
 Now it does quicksort after getting list, we have O(n log n) in best case
 */

static BaseType_t prvComputeOrderedPriorities() {
 800195c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001960:	b08e      	sub	sp, #56	@ 0x38
 8001962:	af00      	add	r7, sp, #0
 8001964:	466b      	mov	r3, sp
 8001966:	4698      	mov	r8, r3
	static BaseType_t initialEvaluation = pdTRUE;
	extTCB_t *listArray[xListTasksNumber];
 8001968:	4b59      	ldr	r3, [pc, #356]	@ (8001ad0 <prvComputeOrderedPriorities+0x174>)
 800196a:	681e      	ldr	r6, [r3, #0]
 800196c:	1e73      	subs	r3, r6, #1
 800196e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001970:	4632      	mov	r2, r6
 8001972:	2300      	movs	r3, #0
 8001974:	4614      	mov	r4, r2
 8001976:	461d      	mov	r5, r3
 8001978:	f04f 0200 	mov.w	r2, #0
 800197c:	f04f 0300 	mov.w	r3, #0
 8001980:	016b      	lsls	r3, r5, #5
 8001982:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8001986:	0162      	lsls	r2, r4, #5
 8001988:	4632      	mov	r2, r6
 800198a:	2300      	movs	r3, #0
 800198c:	4610      	mov	r0, r2
 800198e:	4619      	mov	r1, r3
 8001990:	f04f 0200 	mov.w	r2, #0
 8001994:	f04f 0300 	mov.w	r3, #0
 8001998:	014b      	lsls	r3, r1, #5
 800199a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800199e:	0142      	lsls	r2, r0, #5
 80019a0:	4633      	mov	r3, r6
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	3307      	adds	r3, #7
 80019a6:	08db      	lsrs	r3, r3, #3
 80019a8:	00db      	lsls	r3, r3, #3
 80019aa:	ebad 0d03 	sub.w	sp, sp, r3
 80019ae:	466b      	mov	r3, sp
 80019b0:	3303      	adds	r3, #3
 80019b2:	089b      	lsrs	r3, r3, #2
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	623b      	str	r3, [r7, #32]
	//transfer linked list to array
	//configASSERT(xTasksList.uxNumberOfItems == xListTasksNumber);
	ListItem_t *xItm = listGET_HEAD_ENTRY(&xTasksList); // this is xListEnd.pxNext
 80019b8:	4b46      	ldr	r3, [pc, #280]	@ (8001ad4 <prvComputeOrderedPriorities+0x178>)
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	637b      	str	r3, [r7, #52]	@ 0x34
	for (int i = 0; i < xListTasksNumber; i++) {
 80019be:	2300      	movs	r3, #0
 80019c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80019c2:	e01c      	b.n	80019fe <prvComputeOrderedPriorities+0xa2>
		extTCB_t *xTCB = (extTCB_t*) xItm->pvOwner;
 80019c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	60fb      	str	r3, [r7, #12]

		configASSERT(xTCB != NULL);  // Make sure we don't dereference garbage
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d10b      	bne.n	80019e8 <prvComputeOrderedPriorities+0x8c>
	__asm volatile
 80019d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80019d4:	f383 8811 	msr	BASEPRI, r3
 80019d8:	f3bf 8f6f 	isb	sy
 80019dc:	f3bf 8f4f 	dsb	sy
 80019e0:	60bb      	str	r3, [r7, #8]
}
 80019e2:	bf00      	nop
 80019e4:	bf00      	nop
 80019e6:	e7fd      	b.n	80019e4 <prvComputeOrderedPriorities+0x88>
		listArray[i] = xTCB;
 80019e8:	6a3b      	ldr	r3, [r7, #32]
 80019ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80019ec:	68f9      	ldr	r1, [r7, #12]
 80019ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		xItm = listGET_NEXT(xItm);
 80019f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	637b      	str	r3, [r7, #52]	@ 0x34
	for (int i = 0; i < xListTasksNumber; i++) {
 80019f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019fa:	3301      	adds	r3, #1
 80019fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80019fe:	4b34      	ldr	r3, [pc, #208]	@ (8001ad0 <prvComputeOrderedPriorities+0x174>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001a04:	429a      	cmp	r2, r3
 8001a06:	dbdd      	blt.n	80019c4 <prvComputeOrderedPriorities+0x68>

	}

	qsort(listArray, xListTasksNumber, sizeof(extTCB_t*), prv_compare);
 8001a08:	4b31      	ldr	r3, [pc, #196]	@ (8001ad0 <prvComputeOrderedPriorities+0x174>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	4b32      	ldr	r3, [pc, #200]	@ (8001ad8 <prvComputeOrderedPriorities+0x17c>)
 8001a10:	2204      	movs	r2, #4
 8001a12:	6a38      	ldr	r0, [r7, #32]
 8001a14:	f007 fa51 	bl	8008eba <qsort>
#if mst_schedSCHEDULING_POLICY == mst_schedSCHEDULING_RMS
	if (initialEvaluation == pdTRUE) {
 8001a18:	4b30      	ldr	r3, [pc, #192]	@ (8001adc <prvComputeOrderedPriorities+0x180>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d107      	bne.n	8001a30 <prvComputeOrderedPriorities+0xd4>
		initialEvaluation = pdFALSE;
 8001a20:	4b2e      	ldr	r3, [pc, #184]	@ (8001adc <prvComputeOrderedPriorities+0x180>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]
		 * (but without changing the tasks priority)
		 */
		return pdPASS;
	}
#endif
	UBaseType_t uxUsedPriority = prvSTARTING_PRIORITY;
 8001a26:	2305      	movs	r3, #5
 8001a28:	62fb      	str	r3, [r7, #44]	@ 0x2c

	for (UBaseType_t xCurrInx = 0; xCurrInx < xListTasksNumber; xCurrInx++) {
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a2e:	e022      	b.n	8001a76 <prvComputeOrderedPriorities+0x11a>
		return pdPASS;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e047      	b.n	8001ac4 <prvComputeOrderedPriorities+0x168>
		extTCB_t *xTCB_Reference = listArray[xCurrInx];
 8001a34:	6a3b      	ldr	r3, [r7, #32]
 8001a36:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001a38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a3c:	617b      	str	r3, [r7, #20]
		UBaseType_t bNewPriority = uxUsedPriority++;
 8001a3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a40:	1c5a      	adds	r2, r3, #1
 8001a42:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001a44:	613b      	str	r3, [r7, #16]
		xTCB_Reference->uxPriority = bNewPriority;
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	693a      	ldr	r2, [r7, #16]
 8001a4a:	625a      	str	r2, [r3, #36]	@ 0x24
		/*
		 * Here we create the periodic tasks that we saved in the list
		 * For RMS this function is called at startup to set priorities,
		 * so we know these are all periodic tasks.
		 */
		configASSERT(prvPeriodicTaskCreate(xTCB_Reference));
 8001a4c:	6978      	ldr	r0, [r7, #20]
 8001a4e:	f7ff fa9b 	bl	8000f88 <prvPeriodicTaskCreate>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d10b      	bne.n	8001a70 <prvComputeOrderedPriorities+0x114>
	__asm volatile
 8001a58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001a5c:	f383 8811 	msr	BASEPRI, r3
 8001a60:	f3bf 8f6f 	isb	sy
 8001a64:	f3bf 8f4f 	dsb	sy
 8001a68:	607b      	str	r3, [r7, #4]
}
 8001a6a:	bf00      	nop
 8001a6c:	bf00      	nop
 8001a6e:	e7fd      	b.n	8001a6c <prvComputeOrderedPriorities+0x110>
	for (UBaseType_t xCurrInx = 0; xCurrInx < xListTasksNumber; xCurrInx++) {
 8001a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a72:	3301      	adds	r3, #1
 8001a74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a76:	4b16      	ldr	r3, [pc, #88]	@ (8001ad0 <prvComputeOrderedPriorities+0x174>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d3d8      	bcc.n	8001a34 <prvComputeOrderedPriorities+0xd8>
	/*
	 The list has been used to set priorities for RMS.
	 It now will be used to track sporadic jobs in EDF style to be handled
	 by the sporadic server, so we empty the list.
	 */
	while (!listLIST_IS_EMPTY(&xTasksList)) {
 8001a82:	e017      	b.n	8001ab4 <prvComputeOrderedPriorities+0x158>
		ListItem_t *pxItem = listGET_HEAD_ENTRY(&xTasksList); // first real item
 8001a84:	4b13      	ldr	r3, [pc, #76]	@ (8001ad4 <prvComputeOrderedPriorities+0x178>)
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	61fb      	str	r3, [r7, #28]
		extTCB_t *xTCB = (extTCB_t*) pxItem->pvOwner;
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	61bb      	str	r3, [r7, #24]
		configASSERT(xTCB != NULL);
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d10b      	bne.n	8001aae <prvComputeOrderedPriorities+0x152>
	__asm volatile
 8001a96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001a9a:	f383 8811 	msr	BASEPRI, r3
 8001a9e:	f3bf 8f6f 	isb	sy
 8001aa2:	f3bf 8f4f 	dsb	sy
 8001aa6:	603b      	str	r3, [r7, #0]
}
 8001aa8:	bf00      	nop
 8001aaa:	bf00      	nop
 8001aac:	e7fd      	b.n	8001aaa <prvComputeOrderedPriorities+0x14e>
		uxListRemove(pxItem);
 8001aae:	69f8      	ldr	r0, [r7, #28]
 8001ab0:	f003 feac 	bl	800580c <uxListRemove>
	while (!listLIST_IS_EMPTY(&xTasksList)) {
 8001ab4:	4b07      	ldr	r3, [pc, #28]	@ (8001ad4 <prvComputeOrderedPriorities+0x178>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d1e3      	bne.n	8001a84 <prvComputeOrderedPriorities+0x128>
	}
	xListTasksNumber = 0;
 8001abc:	4b04      	ldr	r3, [pc, #16]	@ (8001ad0 <prvComputeOrderedPriorities+0x174>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	601a      	str	r2, [r3, #0]
#endif
	return pdPASS;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	46c5      	mov	sp, r8
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3738      	adds	r7, #56	@ 0x38
 8001aca:	46bd      	mov	sp, r7
 8001acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ad0:	20000098 	.word	0x20000098
 8001ad4:	20000084 	.word	0x20000084
 8001ad8:	080014fb 	.word	0x080014fb
 8001adc:	20000000 	.word	0x20000000

08001ae0 <vMSTSchedulerStart>:

/*
 MST version of scheduler start
 */
void vMSTSchedulerStart(void) {
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b08a      	sub	sp, #40	@ 0x28
 8001ae4:	af06      	add	r7, sp, #24
#if(TESTING_STM32 == 1)
	prvMSTSetupUSClock();
 8001ae6:	f7ff fa1d 	bl	8000f24 <prvMSTSetupUSClock>
	/*
	 We compute the sporadic servers WCET and Tss, how this is done is better explained in the function called
	 */
	TickType_t tSS_Period;
	TickType_t tSS_WCET;
	prvComputeSporadicServerProprierties(&tSS_Period, &tSS_WCET);
 8001aea:	1d3a      	adds	r2, r7, #4
 8001aec:	f107 0308 	add.w	r3, r7, #8
 8001af0:	4611      	mov	r1, r2
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff fd24 	bl	8001540 <prvComputeSporadicServerProprierties>
	/*
	 The sporadic server task is created like a normal "user-space" periodic task (priority is not relevant as recomputed later for RMS)
	 */
	vMSTPeriodicTaskCreate(prvMSTSporadicServerJob, "SS",
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	68ba      	ldr	r2, [r7, #8]
 8001afc:	6879      	ldr	r1, [r7, #4]
 8001afe:	9105      	str	r1, [sp, #20]
 8001b00:	2100      	movs	r1, #0
 8001b02:	9104      	str	r1, [sp, #16]
 8001b04:	9203      	str	r2, [sp, #12]
 8001b06:	9302      	str	r3, [sp, #8]
 8001b08:	4b10      	ldr	r3, [pc, #64]	@ (8001b4c <vMSTSchedulerStart+0x6c>)
 8001b0a:	9301      	str	r3, [sp, #4]
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	9300      	str	r3, [sp, #0]
 8001b10:	2300      	movs	r3, #0
 8001b12:	2280      	movs	r2, #128	@ 0x80
 8001b14:	490e      	ldr	r1, [pc, #56]	@ (8001b50 <vMSTSchedulerStart+0x70>)
 8001b16:	480f      	ldr	r0, [pc, #60]	@ (8001b54 <vMSTSchedulerStart+0x74>)
 8001b18:	f7ff faf8 	bl	800110c <vMSTPeriodicTaskCreate>
	mst_SPORADIC_SERVER_STACK_SIZE, NULL, pdFALSE, &SporadicServerHandle,
			tSS_Period, tSS_Period, 0, tSS_WCET);
#endif
	configASSERT(prvComputeOrderedPriorities());
 8001b1c:	f7ff ff1e 	bl	800195c <prvComputeOrderedPriorities>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d10b      	bne.n	8001b3e <vMSTSchedulerStart+0x5e>
	__asm volatile
 8001b26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b2a:	f383 8811 	msr	BASEPRI, r3
 8001b2e:	f3bf 8f6f 	isb	sy
 8001b32:	f3bf 8f4f 	dsb	sy
 8001b36:	60fb      	str	r3, [r7, #12]
}
 8001b38:	bf00      	nop
 8001b3a:	bf00      	nop
 8001b3c:	e7fd      	b.n	8001b3a <vMSTSchedulerStart+0x5a>

#endif

	vTaskStartScheduler();
 8001b3e:	f004 ffbb 	bl	8006ab8 <vTaskStartScheduler>

}
 8001b42:	bf00      	nop
 8001b44:	3710      	adds	r7, #16
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	2000009c 	.word	0x2000009c
 8001b50:	0800aa6c 	.word	0x0800aa6c
 8001b54:	08001795 	.word	0x08001795

08001b58 <prvMSTDispatch>:
 * @param xOfTaskType the task can be periodic or sporadic
 * @param xFromUserRequest used for sporadic tasks. If true the user called the task to run. If false the interarrival timer asked to run the task
 */

static void prvMSTDispatch(TaskHandle_t *forTask, BaseType_t xAsCallee,
		taskType_e xOfTaskType, BaseType_t xFromUserRequest) {
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b088      	sub	sp, #32
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	603b      	str	r3, [r7, #0]
 8001b64:	4613      	mov	r3, r2
 8001b66:	71fb      	strb	r3, [r7, #7]

	if (xAsCallee == pdTRUE) {
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d13f      	bne.n	8001bee <prvMSTDispatch+0x96>
		/*
		 Direct call to run a job
		 */
		extTCB_t *xCurrExtTCB = (extTCB_t*) pvTaskGetThreadLocalStoragePointer(
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2100      	movs	r1, #0
 8001b74:	4618      	mov	r0, r3
 8001b76:	f005 fc0d 	bl	8007394 <pvTaskGetThreadLocalStoragePointer>
 8001b7a:	61f8      	str	r0, [r7, #28]
		}
		taskEXIT_CRITICAL();
#else
		//nothing
#endif
		switch (xOfTaskType) {
 8001b7c:	79fb      	ldrb	r3, [r7, #7]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d002      	beq.n	8001b88 <prvMSTDispatch+0x30>
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d008      	beq.n	8001b98 <prvMSTDispatch+0x40>
 8001b86:	e026      	b.n	8001bd6 <prvMSTDispatch+0x7e>
		case taskTypePeriodic:
			//run the periodic task by unlocking the semaphore
			xTaskNotifyGive(*forTask);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	6818      	ldr	r0, [r3, #0]
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	2202      	movs	r2, #2
 8001b90:	2100      	movs	r1, #0
 8001b92:	f006 f807 	bl	8007ba4 <xTaskGenericNotify>
			break;
 8001b96:	e02a      	b.n	8001bee <prvMSTDispatch+0x96>
		case taskTypeSporadic:
#if (mst_USE_SPORADIC_SERVER == 1)
			/*with sporadic server we update the runnable task thread,
			 the sporadic server task will handle it
			 */
			prvAddItemToxTasksList(xCurrExtTCB, xCurrExtTCB->xTaskDeadline);
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	69f8      	ldr	r0, [r7, #28]
 8001ba0:	f7ff fa7c 	bl	800109c <prvAddItemToxTasksList>
			configASSERT(prvComputeOrderedPriorities())
 8001ba4:	f7ff feda 	bl	800195c <prvComputeOrderedPriorities>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d10b      	bne.n	8001bc6 <prvMSTDispatch+0x6e>
	__asm volatile
 8001bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001bb2:	f383 8811 	msr	BASEPRI, r3
 8001bb6:	f3bf 8f6f 	isb	sy
 8001bba:	f3bf 8f4f 	dsb	sy
 8001bbe:	61bb      	str	r3, [r7, #24]
}
 8001bc0:	bf00      	nop
 8001bc2:	bf00      	nop
 8001bc4:	e7fd      	b.n	8001bc2 <prvMSTDispatch+0x6a>
			;
			xTaskNotify(SporadicServerHandle, NOTIFY_SS_NEW_JOB_AVAILABLE,
 8001bc6:	4b0c      	ldr	r3, [pc, #48]	@ (8001bf8 <prvMSTDispatch+0xa0>)
 8001bc8:	6818      	ldr	r0, [r3, #0]
 8001bca:	2300      	movs	r3, #0
 8001bcc:	2201      	movs	r2, #1
 8001bce:	2120      	movs	r1, #32
 8001bd0:	f005 ffe8 	bl	8007ba4 <xTaskGenericNotify>
				xTaskNotify(*forTask, NOTIFY_USER_REQUEST, eSetBits);
			} else {
				xTaskNotify(*forTask, NOTIFY_INTERARRIVAL_TIMER, eSetBits);
			}
			#endif
			break;
 8001bd4:	e00b      	b.n	8001bee <prvMSTDispatch+0x96>
	__asm volatile
 8001bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001bda:	f383 8811 	msr	BASEPRI, r3
 8001bde:	f3bf 8f6f 	isb	sy
 8001be2:	f3bf 8f4f 	dsb	sy
 8001be6:	617b      	str	r3, [r7, #20]
}
 8001be8:	bf00      	nop
		default:
			configASSERT(pdFALSE)
 8001bea:	bf00      	nop
 8001bec:	e7fd      	b.n	8001bea <prvMSTDispatch+0x92>
    taskEXIT_CRITICAL();

#endif
	}

}
 8001bee:	bf00      	nop
 8001bf0:	3720      	adds	r7, #32
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	2000009c 	.word	0x2000009c

08001bfc <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
	ulStatsTimerTicks = 0;
 8001c00:	4b03      	ldr	r3, [pc, #12]	@ (8001c10 <configureTimerForRunTimeStats+0x14>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim10);
 8001c06:	4803      	ldr	r0, [pc, #12]	@ (8001c14 <configureTimerForRunTimeStats+0x18>)
 8001c08:	f002 f8ee 	bl	8003de8 <HAL_TIM_Base_Start_IT>
}
 8001c0c:	bf00      	nop
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	200000a8 	.word	0x200000a8
 8001c14:	200000f4 	.word	0x200000f4

08001c18 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
return ulStatsTimerTicks;
 8001c1c:	4b03      	ldr	r3, [pc, #12]	@ (8001c2c <getRunTimeCounterValue+0x14>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	200000a8 	.word	0x200000a8

08001c30 <MSTTask1>:
TaskHandle_t Task1Handle;
TaskHandle_t Task2Handle;
TaskHandle_t Task3Handle;
TaskHandle_t Task4Handle;

void MSTTask1(void *pvParameters) {
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
	vMSTSporadicTaskRun(&Task3Handle);
 8001c38:	4812      	ldr	r0, [pc, #72]	@ (8001c84 <MSTTask1+0x54>)
 8001c3a:	f7ff fc43 	bl	80014c4 <vMSTSporadicTaskRun>
	if (xSemaphoreTake(xBinarySemUART2, portMAX_DELAY) == pdTRUE) {
 8001c3e:	4b12      	ldr	r3, [pc, #72]	@ (8001c88 <MSTTask1+0x58>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001c46:	4618      	mov	r0, r3
 8001c48:	f004 fa62 	bl	8006110 <xQueueSemaphoreTake>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d113      	bne.n	8001c7a <MSTTask1+0x4a>
		length = snprintf((char*) transmit, sizeof(transmit), "Task1\n");
 8001c52:	4a0e      	ldr	r2, [pc, #56]	@ (8001c8c <MSTTask1+0x5c>)
 8001c54:	2114      	movs	r1, #20
 8001c56:	480e      	ldr	r0, [pc, #56]	@ (8001c90 <MSTTask1+0x60>)
 8001c58:	f007 fa76 	bl	8009148 <sniprintf>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	4a0d      	ldr	r2, [pc, #52]	@ (8001c94 <MSTTask1+0x64>)
 8001c60:	6013      	str	r3, [r2, #0]
		HAL_Delay(300);
 8001c62:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001c66:	f000 fd59 	bl	800271c <HAL_Delay>
		HAL_UART_Transmit_DMA(&huart2, transmit, length);
 8001c6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c94 <MSTTask1+0x64>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	461a      	mov	r2, r3
 8001c72:	4907      	ldr	r1, [pc, #28]	@ (8001c90 <MSTTask1+0x60>)
 8001c74:	4808      	ldr	r0, [pc, #32]	@ (8001c98 <MSTTask1+0x68>)
 8001c76:	f002 fcf1 	bl	800465c <HAL_UART_Transmit_DMA>
	}
}
 8001c7a:	bf00      	nop
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	20000250 	.word	0x20000250
 8001c88:	2000022c 	.word	0x2000022c
 8001c8c:	0800aa70 	.word	0x0800aa70
 8001c90:	20000230 	.word	0x20000230
 8001c94:	20000244 	.word	0x20000244
 8001c98:	20000184 	.word	0x20000184

08001c9c <MSTTask2>:

void MSTTask2(void *pvParameters) {
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
	vMSTSporadicTaskRun(&Task4Handle);
 8001ca4:	4810      	ldr	r0, [pc, #64]	@ (8001ce8 <MSTTask2+0x4c>)
 8001ca6:	f7ff fc0d 	bl	80014c4 <vMSTSporadicTaskRun>
	if (xSemaphoreTake(xBinarySemUART2, portMAX_DELAY) == pdTRUE) {
 8001caa:	4b10      	ldr	r3, [pc, #64]	@ (8001cec <MSTTask2+0x50>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f004 fa2c 	bl	8006110 <xQueueSemaphoreTake>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d10f      	bne.n	8001cde <MSTTask2+0x42>
		length = snprintf((char*) transmit, sizeof(transmit), "Task2\n");
 8001cbe:	4a0c      	ldr	r2, [pc, #48]	@ (8001cf0 <MSTTask2+0x54>)
 8001cc0:	2114      	movs	r1, #20
 8001cc2:	480c      	ldr	r0, [pc, #48]	@ (8001cf4 <MSTTask2+0x58>)
 8001cc4:	f007 fa40 	bl	8009148 <sniprintf>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	4a0b      	ldr	r2, [pc, #44]	@ (8001cf8 <MSTTask2+0x5c>)
 8001ccc:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit_DMA(&huart2, transmit, length);
 8001cce:	4b0a      	ldr	r3, [pc, #40]	@ (8001cf8 <MSTTask2+0x5c>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	4907      	ldr	r1, [pc, #28]	@ (8001cf4 <MSTTask2+0x58>)
 8001cd8:	4808      	ldr	r0, [pc, #32]	@ (8001cfc <MSTTask2+0x60>)
 8001cda:	f002 fcbf 	bl	800465c <HAL_UART_Transmit_DMA>
	}
}
 8001cde:	bf00      	nop
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	20000254 	.word	0x20000254
 8001cec:	2000022c 	.word	0x2000022c
 8001cf0:	0800aa78 	.word	0x0800aa78
 8001cf4:	20000230 	.word	0x20000230
 8001cf8:	20000244 	.word	0x20000244
 8001cfc:	20000184 	.word	0x20000184

08001d00 <MSTTask3>:

void MSTTask3(void *pvParameters) {
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
	if (xSemaphoreTake(xBinarySemUART2, portMAX_DELAY) == pdTRUE) {
 8001d08:	4b0e      	ldr	r3, [pc, #56]	@ (8001d44 <MSTTask3+0x44>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001d10:	4618      	mov	r0, r3
 8001d12:	f004 f9fd 	bl	8006110 <xQueueSemaphoreTake>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d10f      	bne.n	8001d3c <MSTTask3+0x3c>
		length = snprintf((char*) transmit, sizeof(transmit), "SPORADIC1\n");
 8001d1c:	4a0a      	ldr	r2, [pc, #40]	@ (8001d48 <MSTTask3+0x48>)
 8001d1e:	2114      	movs	r1, #20
 8001d20:	480a      	ldr	r0, [pc, #40]	@ (8001d4c <MSTTask3+0x4c>)
 8001d22:	f007 fa11 	bl	8009148 <sniprintf>
 8001d26:	4603      	mov	r3, r0
 8001d28:	4a09      	ldr	r2, [pc, #36]	@ (8001d50 <MSTTask3+0x50>)
 8001d2a:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit_DMA(&huart2, transmit, length);
 8001d2c:	4b08      	ldr	r3, [pc, #32]	@ (8001d50 <MSTTask3+0x50>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	461a      	mov	r2, r3
 8001d34:	4905      	ldr	r1, [pc, #20]	@ (8001d4c <MSTTask3+0x4c>)
 8001d36:	4807      	ldr	r0, [pc, #28]	@ (8001d54 <MSTTask3+0x54>)
 8001d38:	f002 fc90 	bl	800465c <HAL_UART_Transmit_DMA>
	}
}
 8001d3c:	bf00      	nop
 8001d3e:	3708      	adds	r7, #8
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	2000022c 	.word	0x2000022c
 8001d48:	0800aa80 	.word	0x0800aa80
 8001d4c:	20000230 	.word	0x20000230
 8001d50:	20000244 	.word	0x20000244
 8001d54:	20000184 	.word	0x20000184

08001d58 <MSTTask4>:

void MSTTask4(void *pvParameters) {
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
	if (xSemaphoreTake(xBinarySemUART2, portMAX_DELAY) == pdTRUE) {
 8001d60:	4b0e      	ldr	r3, [pc, #56]	@ (8001d9c <MSTTask4+0x44>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f004 f9d1 	bl	8006110 <xQueueSemaphoreTake>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d10f      	bne.n	8001d94 <MSTTask4+0x3c>
		length = snprintf((char*) transmit, sizeof(transmit), "SPORADIC2\n");
 8001d74:	4a0a      	ldr	r2, [pc, #40]	@ (8001da0 <MSTTask4+0x48>)
 8001d76:	2114      	movs	r1, #20
 8001d78:	480a      	ldr	r0, [pc, #40]	@ (8001da4 <MSTTask4+0x4c>)
 8001d7a:	f007 f9e5 	bl	8009148 <sniprintf>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	4a09      	ldr	r2, [pc, #36]	@ (8001da8 <MSTTask4+0x50>)
 8001d82:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit_DMA(&huart2, transmit, length);
 8001d84:	4b08      	ldr	r3, [pc, #32]	@ (8001da8 <MSTTask4+0x50>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	4905      	ldr	r1, [pc, #20]	@ (8001da4 <MSTTask4+0x4c>)
 8001d8e:	4807      	ldr	r0, [pc, #28]	@ (8001dac <MSTTask4+0x54>)
 8001d90:	f002 fc64 	bl	800465c <HAL_UART_Transmit_DMA>
	}
}
 8001d94:	bf00      	nop
 8001d96:	3708      	adds	r7, #8
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	2000022c 	.word	0x2000022c
 8001da0:	0800aa8c 	.word	0x0800aa8c
 8001da4:	20000230 	.word	0x20000230
 8001da8:	20000244 	.word	0x20000244
 8001dac:	20000184 	.word	0x20000184

08001db0 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
	if (huart == &huart2) {
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	4a08      	ldr	r2, [pc, #32]	@ (8001ddc <HAL_UART_TxCpltCallback+0x2c>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d109      	bne.n	8001dd4 <HAL_UART_TxCpltCallback+0x24>
		//free sem
		BaseType_t xHigherPr = pdFALSE;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	60fb      	str	r3, [r7, #12]
		xSemaphoreGiveFromISR(xBinarySemUART2, &xHigherPr);
 8001dc4:	4b06      	ldr	r3, [pc, #24]	@ (8001de0 <HAL_UART_TxCpltCallback+0x30>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f107 020c 	add.w	r2, r7, #12
 8001dcc:	4611      	mov	r1, r2
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f004 f82c 	bl	8005e2c <xQueueGiveFromISR>
	}
}
 8001dd4:	bf00      	nop
 8001dd6:	3710      	adds	r7, #16
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	20000184 	.word	0x20000184
 8001de0:	2000022c 	.word	0x2000022c

08001de4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af06      	add	r7, sp, #24
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001dea:	f000 fc55 	bl	8002698 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001dee:	f000 f889 	bl	8001f04 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001df2:	f000 f9d3 	bl	800219c <MX_GPIO_Init>
	MX_DMA_Init();
 8001df6:	f000 f9b1 	bl	800215c <MX_DMA_Init>
	MX_USART2_UART_Init();
 8001dfa:	f000 f985 	bl	8002108 <MX_USART2_UART_Init>
	MX_USART1_UART_Init();
 8001dfe:	f000 f959 	bl	80020b4 <MX_USART1_UART_Init>
	MX_TIM10_Init();
 8001e02:	f000 f935 	bl	8002070 <MX_TIM10_Init>
	MX_TIM2_Init();
 8001e06:	f000 f8e7 	bl	8001fd8 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */

	xBinarySemUART2 = xSemaphoreCreateBinary();
 8001e0a:	2203      	movs	r2, #3
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	2001      	movs	r0, #1
 8001e10:	f003 fe0d 	bl	8005a2e <xQueueGenericCreate>
 8001e14:	4603      	mov	r3, r0
 8001e16:	4a2e      	ldr	r2, [pc, #184]	@ (8001ed0 <main+0xec>)
 8001e18:	6013      	str	r3, [r2, #0]
	xSemaphoreGive(xBinarySemUART2);
 8001e1a:	4b2d      	ldr	r3, [pc, #180]	@ (8001ed0 <main+0xec>)
 8001e1c:	6818      	ldr	r0, [r3, #0]
 8001e1e:	2300      	movs	r3, #0
 8001e20:	2200      	movs	r2, #0
 8001e22:	2100      	movs	r1, #0
 8001e24:	f003 fe62 	bl	8005aec <xQueueGenericSend>

	vMSTPeriodicTaskCreate(MSTTask1,                  // Function to execute
 8001e28:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8001e2c:	9305      	str	r3, [sp, #20]
 8001e2e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001e32:	9304      	str	r3, [sp, #16]
 8001e34:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001e38:	9303      	str	r3, [sp, #12]
 8001e3a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001e3e:	9302      	str	r3, [sp, #8]
 8001e40:	4b24      	ldr	r3, [pc, #144]	@ (8001ed4 <main+0xf0>)
 8001e42:	9301      	str	r3, [sp, #4]
 8001e44:	2305      	movs	r3, #5
 8001e46:	9300      	str	r3, [sp, #0]
 8001e48:	2300      	movs	r3, #0
 8001e4a:	2280      	movs	r2, #128	@ 0x80
 8001e4c:	4922      	ldr	r1, [pc, #136]	@ (8001ed8 <main+0xf4>)
 8001e4e:	4823      	ldr	r0, [pc, #140]	@ (8001edc <main+0xf8>)
 8001e50:	f7ff f95c 	bl	800110c <vMSTPeriodicTaskCreate>
	                       500,                       //deadline
	                       500,                       //phase
	                       300                        //WCET
	                      );

	vMSTPeriodicTaskCreate(MSTTask2, "2",
 8001e54:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8001e58:	9305      	str	r3, [sp, #20]
 8001e5a:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001e5e:	9304      	str	r3, [sp, #16]
 8001e60:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8001e64:	9303      	str	r3, [sp, #12]
 8001e66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e6a:	9302      	str	r3, [sp, #8]
 8001e6c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ee0 <main+0xfc>)
 8001e6e:	9301      	str	r3, [sp, #4]
 8001e70:	2302      	movs	r3, #2
 8001e72:	9300      	str	r3, [sp, #0]
 8001e74:	2300      	movs	r3, #0
 8001e76:	2280      	movs	r2, #128	@ 0x80
 8001e78:	491a      	ldr	r1, [pc, #104]	@ (8001ee4 <main+0x100>)
 8001e7a:	481b      	ldr	r0, [pc, #108]	@ (8001ee8 <main+0x104>)
 8001e7c:	f7ff f946 	bl	800110c <vMSTPeriodicTaskCreate>
	                       configMINIMAL_STACK_SIZE,
	                       NULL, 2, &Task2Handle, 1000, 300, 10000, 300);

	vMSTSporadicTaskCreate(MSTTask3, "3",
 8001e80:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8001e84:	9304      	str	r3, [sp, #16]
 8001e86:	23c8      	movs	r3, #200	@ 0xc8
 8001e88:	9303      	str	r3, [sp, #12]
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	9302      	str	r3, [sp, #8]
 8001e8e:	4b17      	ldr	r3, [pc, #92]	@ (8001eec <main+0x108>)
 8001e90:	9301      	str	r3, [sp, #4]
 8001e92:	2301      	movs	r3, #1
 8001e94:	9300      	str	r3, [sp, #0]
 8001e96:	2300      	movs	r3, #0
 8001e98:	2280      	movs	r2, #128	@ 0x80
 8001e9a:	4915      	ldr	r1, [pc, #84]	@ (8001ef0 <main+0x10c>)
 8001e9c:	4815      	ldr	r0, [pc, #84]	@ (8001ef4 <main+0x110>)
 8001e9e:	f7ff fa41 	bl	8001324 <vMSTSporadicTaskCreate>
	                       configMINIMAL_STACK_SIZE,
	                       NULL, 1, &Task3Handle, 1,
	                       200, 300);
	vMSTSporadicTaskCreate(MSTTask4, "4",
 8001ea2:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8001ea6:	9304      	str	r3, [sp, #16]
 8001ea8:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8001eac:	9303      	str	r3, [sp, #12]
 8001eae:	2301      	movs	r3, #1
 8001eb0:	9302      	str	r3, [sp, #8]
 8001eb2:	4b11      	ldr	r3, [pc, #68]	@ (8001ef8 <main+0x114>)
 8001eb4:	9301      	str	r3, [sp, #4]
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	9300      	str	r3, [sp, #0]
 8001eba:	2300      	movs	r3, #0
 8001ebc:	2280      	movs	r2, #128	@ 0x80
 8001ebe:	490f      	ldr	r1, [pc, #60]	@ (8001efc <main+0x118>)
 8001ec0:	480f      	ldr	r0, [pc, #60]	@ (8001f00 <main+0x11c>)
 8001ec2:	f7ff fa2f 	bl	8001324 <vMSTSporadicTaskCreate>
		                   configMINIMAL_STACK_SIZE,
		                   NULL, 1, &Task4Handle, 1,
		                   300, 300);

	vMSTSchedulerStart();
 8001ec6:	f7ff fe0b 	bl	8001ae0 <vMSTSchedulerStart>

	//shall never arrive here
	for (;;)
 8001eca:	bf00      	nop
 8001ecc:	e7fd      	b.n	8001eca <main+0xe6>
 8001ece:	bf00      	nop
 8001ed0:	2000022c 	.word	0x2000022c
 8001ed4:	20000248 	.word	0x20000248
 8001ed8:	0800aa98 	.word	0x0800aa98
 8001edc:	08001c31 	.word	0x08001c31
 8001ee0:	2000024c 	.word	0x2000024c
 8001ee4:	0800aa9c 	.word	0x0800aa9c
 8001ee8:	08001c9d 	.word	0x08001c9d
 8001eec:	20000250 	.word	0x20000250
 8001ef0:	0800aaa0 	.word	0x0800aaa0
 8001ef4:	08001d01 	.word	0x08001d01
 8001ef8:	20000254 	.word	0x20000254
 8001efc:	0800aaa4 	.word	0x0800aaa4
 8001f00:	08001d59 	.word	0x08001d59

08001f04 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b094      	sub	sp, #80	@ 0x50
 8001f08:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001f0a:	f107 0320 	add.w	r3, r7, #32
 8001f0e:	2230      	movs	r2, #48	@ 0x30
 8001f10:	2100      	movs	r1, #0
 8001f12:	4618      	mov	r0, r3
 8001f14:	f007 f94e 	bl	80091b4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001f18:	f107 030c 	add.w	r3, r7, #12
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	605a      	str	r2, [r3, #4]
 8001f22:	609a      	str	r2, [r3, #8]
 8001f24:	60da      	str	r2, [r3, #12]
 8001f26:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001f28:	2300      	movs	r3, #0
 8001f2a:	60bb      	str	r3, [r7, #8]
 8001f2c:	4b28      	ldr	r3, [pc, #160]	@ (8001fd0 <SystemClock_Config+0xcc>)
 8001f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f30:	4a27      	ldr	r2, [pc, #156]	@ (8001fd0 <SystemClock_Config+0xcc>)
 8001f32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f36:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f38:	4b25      	ldr	r3, [pc, #148]	@ (8001fd0 <SystemClock_Config+0xcc>)
 8001f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f40:	60bb      	str	r3, [r7, #8]
 8001f42:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f44:	2300      	movs	r3, #0
 8001f46:	607b      	str	r3, [r7, #4]
 8001f48:	4b22      	ldr	r3, [pc, #136]	@ (8001fd4 <SystemClock_Config+0xd0>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001f50:	4a20      	ldr	r2, [pc, #128]	@ (8001fd4 <SystemClock_Config+0xd0>)
 8001f52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f56:	6013      	str	r3, [r2, #0]
 8001f58:	4b1e      	ldr	r3, [pc, #120]	@ (8001fd4 <SystemClock_Config+0xd0>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001f60:	607b      	str	r3, [r7, #4]
 8001f62:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f64:	2302      	movs	r3, #2
 8001f66:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f6c:	2310      	movs	r3, #16
 8001f6e:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f70:	2302      	movs	r3, #2
 8001f72:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f74:	2300      	movs	r3, #0
 8001f76:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 8001f78:	2310      	movs	r3, #16
 8001f7a:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 192;
 8001f7c:	23c0      	movs	r3, #192	@ 0xc0
 8001f7e:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 8001f80:	2308      	movs	r3, #8
 8001f82:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001f84:	2304      	movs	r3, #4
 8001f86:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001f88:	f107 0320 	add.w	r3, r7, #32
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f001 fa51 	bl	8003434 <HAL_RCC_OscConfig>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <SystemClock_Config+0x98>
		Error_Handler();
 8001f98:	f000 f92c 	bl	80021f4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001f9c:	230f      	movs	r3, #15
 8001f9e:	60fb      	str	r3, [r7, #12]
	                              | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fac:	2300      	movs	r3, #0
 8001fae:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001fb0:	f107 030c 	add.w	r3, r7, #12
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f001 fcb4 	bl	8003924 <HAL_RCC_ClockConfig>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <SystemClock_Config+0xc2>
		Error_Handler();
 8001fc2:	f000 f917 	bl	80021f4 <Error_Handler>
	}
}
 8001fc6:	bf00      	nop
 8001fc8:	3750      	adds	r7, #80	@ 0x50
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	40023800 	.word	0x40023800
 8001fd4:	40007000 	.word	0x40007000

08001fd8 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b086      	sub	sp, #24
 8001fdc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001fde:	f107 0308 	add.w	r3, r7, #8
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	601a      	str	r2, [r3, #0]
 8001fe6:	605a      	str	r2, [r3, #4]
 8001fe8:	609a      	str	r2, [r3, #8]
 8001fea:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001fec:	463b      	mov	r3, r7
 8001fee:	2200      	movs	r2, #0
 8001ff0:	601a      	str	r2, [r3, #0]
 8001ff2:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001ff4:	4b1d      	ldr	r3, [pc, #116]	@ (800206c <MX_TIM2_Init+0x94>)
 8001ff6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001ffa:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 24 - 1;
 8001ffc:	4b1b      	ldr	r3, [pc, #108]	@ (800206c <MX_TIM2_Init+0x94>)
 8001ffe:	2217      	movs	r2, #23
 8002000:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002002:	4b1a      	ldr	r3, [pc, #104]	@ (800206c <MX_TIM2_Init+0x94>)
 8002004:	2200      	movs	r2, #0
 8002006:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 8002008:	4b18      	ldr	r3, [pc, #96]	@ (800206c <MX_TIM2_Init+0x94>)
 800200a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800200e:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002010:	4b16      	ldr	r3, [pc, #88]	@ (800206c <MX_TIM2_Init+0x94>)
 8002012:	2200      	movs	r2, #0
 8002014:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002016:	4b15      	ldr	r3, [pc, #84]	@ (800206c <MX_TIM2_Init+0x94>)
 8002018:	2200      	movs	r2, #0
 800201a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 800201c:	4813      	ldr	r0, [pc, #76]	@ (800206c <MX_TIM2_Init+0x94>)
 800201e:	f001 fe93 	bl	8003d48 <HAL_TIM_Base_Init>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <MX_TIM2_Init+0x54>
		Error_Handler();
 8002028:	f000 f8e4 	bl	80021f4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800202c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002030:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8002032:	f107 0308 	add.w	r3, r7, #8
 8002036:	4619      	mov	r1, r3
 8002038:	480c      	ldr	r0, [pc, #48]	@ (800206c <MX_TIM2_Init+0x94>)
 800203a:	f002 f827 	bl	800408c <HAL_TIM_ConfigClockSource>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <MX_TIM2_Init+0x70>
		Error_Handler();
 8002044:	f000 f8d6 	bl	80021f4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002048:	2300      	movs	r3, #0
 800204a:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800204c:	2300      	movs	r3, #0
 800204e:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8002050:	463b      	mov	r3, r7
 8002052:	4619      	mov	r1, r3
 8002054:	4805      	ldr	r0, [pc, #20]	@ (800206c <MX_TIM2_Init+0x94>)
 8002056:	f002 fa2f 	bl	80044b8 <HAL_TIMEx_MasterConfigSynchronization>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <MX_TIM2_Init+0x8c>
	        != HAL_OK) {
		Error_Handler();
 8002060:	f000 f8c8 	bl	80021f4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8002064:	bf00      	nop
 8002066:	3718      	adds	r7, #24
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	200000ac 	.word	0x200000ac

08002070 <MX_TIM10_Init>:
/**
 * @brief TIM10 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM10_Init(void) {
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
	/* USER CODE END TIM10_Init 0 */

	/* USER CODE BEGIN TIM10_Init 1 */

	/* USER CODE END TIM10_Init 1 */
	htim10.Instance = TIM10;
 8002074:	4b0d      	ldr	r3, [pc, #52]	@ (80020ac <MX_TIM10_Init+0x3c>)
 8002076:	4a0e      	ldr	r2, [pc, #56]	@ (80020b0 <MX_TIM10_Init+0x40>)
 8002078:	601a      	str	r2, [r3, #0]
	htim10.Init.Prescaler = 15;
 800207a:	4b0c      	ldr	r3, [pc, #48]	@ (80020ac <MX_TIM10_Init+0x3c>)
 800207c:	220f      	movs	r2, #15
 800207e:	605a      	str	r2, [r3, #4]
	htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002080:	4b0a      	ldr	r3, [pc, #40]	@ (80020ac <MX_TIM10_Init+0x3c>)
 8002082:	2200      	movs	r2, #0
 8002084:	609a      	str	r2, [r3, #8]
	htim10.Init.Period = 99;
 8002086:	4b09      	ldr	r3, [pc, #36]	@ (80020ac <MX_TIM10_Init+0x3c>)
 8002088:	2263      	movs	r2, #99	@ 0x63
 800208a:	60da      	str	r2, [r3, #12]
	htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800208c:	4b07      	ldr	r3, [pc, #28]	@ (80020ac <MX_TIM10_Init+0x3c>)
 800208e:	2200      	movs	r2, #0
 8002090:	611a      	str	r2, [r3, #16]
	htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002092:	4b06      	ldr	r3, [pc, #24]	@ (80020ac <MX_TIM10_Init+0x3c>)
 8002094:	2200      	movs	r2, #0
 8002096:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim10) != HAL_OK) {
 8002098:	4804      	ldr	r0, [pc, #16]	@ (80020ac <MX_TIM10_Init+0x3c>)
 800209a:	f001 fe55 	bl	8003d48 <HAL_TIM_Base_Init>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <MX_TIM10_Init+0x38>
		Error_Handler();
 80020a4:	f000 f8a6 	bl	80021f4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM10_Init 2 */

	/* USER CODE END TIM10_Init 2 */

}
 80020a8:	bf00      	nop
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	200000f4 	.word	0x200000f4
 80020b0:	40014400 	.word	0x40014400

080020b4 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80020b8:	4b11      	ldr	r3, [pc, #68]	@ (8002100 <MX_USART1_UART_Init+0x4c>)
 80020ba:	4a12      	ldr	r2, [pc, #72]	@ (8002104 <MX_USART1_UART_Init+0x50>)
 80020bc:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80020be:	4b10      	ldr	r3, [pc, #64]	@ (8002100 <MX_USART1_UART_Init+0x4c>)
 80020c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80020c4:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80020c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002100 <MX_USART1_UART_Init+0x4c>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80020cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002100 <MX_USART1_UART_Init+0x4c>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80020d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002100 <MX_USART1_UART_Init+0x4c>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80020d8:	4b09      	ldr	r3, [pc, #36]	@ (8002100 <MX_USART1_UART_Init+0x4c>)
 80020da:	220c      	movs	r2, #12
 80020dc:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020de:	4b08      	ldr	r3, [pc, #32]	@ (8002100 <MX_USART1_UART_Init+0x4c>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80020e4:	4b06      	ldr	r3, [pc, #24]	@ (8002100 <MX_USART1_UART_Init+0x4c>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80020ea:	4805      	ldr	r0, [pc, #20]	@ (8002100 <MX_USART1_UART_Init+0x4c>)
 80020ec:	f002 fa66 	bl	80045bc <HAL_UART_Init>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <MX_USART1_UART_Init+0x46>
		Error_Handler();
 80020f6:	f000 f87d 	bl	80021f4 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80020fa:	bf00      	nop
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	2000013c 	.word	0x2000013c
 8002104:	40011000 	.word	0x40011000

08002108 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800210c:	4b11      	ldr	r3, [pc, #68]	@ (8002154 <MX_USART2_UART_Init+0x4c>)
 800210e:	4a12      	ldr	r2, [pc, #72]	@ (8002158 <MX_USART2_UART_Init+0x50>)
 8002110:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 8002112:	4b10      	ldr	r3, [pc, #64]	@ (8002154 <MX_USART2_UART_Init+0x4c>)
 8002114:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002118:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800211a:	4b0e      	ldr	r3, [pc, #56]	@ (8002154 <MX_USART2_UART_Init+0x4c>)
 800211c:	2200      	movs	r2, #0
 800211e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002120:	4b0c      	ldr	r3, [pc, #48]	@ (8002154 <MX_USART2_UART_Init+0x4c>)
 8002122:	2200      	movs	r2, #0
 8002124:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8002126:	4b0b      	ldr	r3, [pc, #44]	@ (8002154 <MX_USART2_UART_Init+0x4c>)
 8002128:	2200      	movs	r2, #0
 800212a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800212c:	4b09      	ldr	r3, [pc, #36]	@ (8002154 <MX_USART2_UART_Init+0x4c>)
 800212e:	220c      	movs	r2, #12
 8002130:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002132:	4b08      	ldr	r3, [pc, #32]	@ (8002154 <MX_USART2_UART_Init+0x4c>)
 8002134:	2200      	movs	r2, #0
 8002136:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002138:	4b06      	ldr	r3, [pc, #24]	@ (8002154 <MX_USART2_UART_Init+0x4c>)
 800213a:	2200      	movs	r2, #0
 800213c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800213e:	4805      	ldr	r0, [pc, #20]	@ (8002154 <MX_USART2_UART_Init+0x4c>)
 8002140:	f002 fa3c 	bl	80045bc <HAL_UART_Init>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <MX_USART2_UART_Init+0x46>
		Error_Handler();
 800214a:	f000 f853 	bl	80021f4 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800214e:	bf00      	nop
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	20000184 	.word	0x20000184
 8002158:	40004400 	.word	0x40004400

0800215c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8002162:	2300      	movs	r3, #0
 8002164:	607b      	str	r3, [r7, #4]
 8002166:	4b0c      	ldr	r3, [pc, #48]	@ (8002198 <MX_DMA_Init+0x3c>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800216a:	4a0b      	ldr	r2, [pc, #44]	@ (8002198 <MX_DMA_Init+0x3c>)
 800216c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002170:	6313      	str	r3, [r2, #48]	@ 0x30
 8002172:	4b09      	ldr	r3, [pc, #36]	@ (8002198 <MX_DMA_Init+0x3c>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002176:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800217a:	607b      	str	r3, [r7, #4]
 800217c:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800217e:	2200      	movs	r2, #0
 8002180:	2105      	movs	r1, #5
 8002182:	2011      	movs	r0, #17
 8002184:	f000 fba6 	bl	80028d4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002188:	2011      	movs	r0, #17
 800218a:	f000 fbbf 	bl	800290c <HAL_NVIC_EnableIRQ>

}
 800218e:	bf00      	nop
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	40023800 	.word	0x40023800

0800219c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80021a2:	2300      	movs	r3, #0
 80021a4:	607b      	str	r3, [r7, #4]
 80021a6:	4b09      	ldr	r3, [pc, #36]	@ (80021cc <MX_GPIO_Init+0x30>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021aa:	4a08      	ldr	r2, [pc, #32]	@ (80021cc <MX_GPIO_Init+0x30>)
 80021ac:	f043 0301 	orr.w	r3, r3, #1
 80021b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80021b2:	4b06      	ldr	r3, [pc, #24]	@ (80021cc <MX_GPIO_Init+0x30>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	607b      	str	r3, [r7, #4]
 80021bc:	687b      	ldr	r3, [r7, #4]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80021be:	bf00      	nop
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	40023800 	.word	0x40023800

080021d0 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM9) {
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a04      	ldr	r2, [pc, #16]	@ (80021f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d101      	bne.n	80021e6 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80021e2:	f000 fa7b 	bl	80026dc <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80021e6:	bf00      	nop
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	40014000 	.word	0x40014000

080021f4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021f8:	b672      	cpsid	i
}
 80021fa:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80021fc:	bf00      	nop
 80021fe:	e7fd      	b.n	80021fc <Error_Handler+0x8>

08002200 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002206:	2300      	movs	r3, #0
 8002208:	607b      	str	r3, [r7, #4]
 800220a:	4b12      	ldr	r3, [pc, #72]	@ (8002254 <HAL_MspInit+0x54>)
 800220c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800220e:	4a11      	ldr	r2, [pc, #68]	@ (8002254 <HAL_MspInit+0x54>)
 8002210:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002214:	6453      	str	r3, [r2, #68]	@ 0x44
 8002216:	4b0f      	ldr	r3, [pc, #60]	@ (8002254 <HAL_MspInit+0x54>)
 8002218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800221a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800221e:	607b      	str	r3, [r7, #4]
 8002220:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002222:	2300      	movs	r3, #0
 8002224:	603b      	str	r3, [r7, #0]
 8002226:	4b0b      	ldr	r3, [pc, #44]	@ (8002254 <HAL_MspInit+0x54>)
 8002228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800222a:	4a0a      	ldr	r2, [pc, #40]	@ (8002254 <HAL_MspInit+0x54>)
 800222c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002230:	6413      	str	r3, [r2, #64]	@ 0x40
 8002232:	4b08      	ldr	r3, [pc, #32]	@ (8002254 <HAL_MspInit+0x54>)
 8002234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002236:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800223a:	603b      	str	r3, [r7, #0]
 800223c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800223e:	2200      	movs	r2, #0
 8002240:	210f      	movs	r1, #15
 8002242:	f06f 0001 	mvn.w	r0, #1
 8002246:	f000 fb45 	bl	80028d4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800224a:	bf00      	nop
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	40023800 	.word	0x40023800

08002258 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002268:	d10e      	bne.n	8002288 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800226a:	2300      	movs	r3, #0
 800226c:	60fb      	str	r3, [r7, #12]
 800226e:	4b16      	ldr	r3, [pc, #88]	@ (80022c8 <HAL_TIM_Base_MspInit+0x70>)
 8002270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002272:	4a15      	ldr	r2, [pc, #84]	@ (80022c8 <HAL_TIM_Base_MspInit+0x70>)
 8002274:	f043 0301 	orr.w	r3, r3, #1
 8002278:	6413      	str	r3, [r2, #64]	@ 0x40
 800227a:	4b13      	ldr	r3, [pc, #76]	@ (80022c8 <HAL_TIM_Base_MspInit+0x70>)
 800227c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8002286:	e01a      	b.n	80022be <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM10)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a0f      	ldr	r2, [pc, #60]	@ (80022cc <HAL_TIM_Base_MspInit+0x74>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d115      	bne.n	80022be <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002292:	2300      	movs	r3, #0
 8002294:	60bb      	str	r3, [r7, #8]
 8002296:	4b0c      	ldr	r3, [pc, #48]	@ (80022c8 <HAL_TIM_Base_MspInit+0x70>)
 8002298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800229a:	4a0b      	ldr	r2, [pc, #44]	@ (80022c8 <HAL_TIM_Base_MspInit+0x70>)
 800229c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80022a2:	4b09      	ldr	r3, [pc, #36]	@ (80022c8 <HAL_TIM_Base_MspInit+0x70>)
 80022a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022aa:	60bb      	str	r3, [r7, #8]
 80022ac:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 80022ae:	2200      	movs	r2, #0
 80022b0:	2105      	movs	r1, #5
 80022b2:	2019      	movs	r0, #25
 80022b4:	f000 fb0e 	bl	80028d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80022b8:	2019      	movs	r0, #25
 80022ba:	f000 fb27 	bl	800290c <HAL_NVIC_EnableIRQ>
}
 80022be:	bf00      	nop
 80022c0:	3710      	adds	r7, #16
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	40023800 	.word	0x40023800
 80022cc:	40014400 	.word	0x40014400

080022d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b08c      	sub	sp, #48	@ 0x30
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d8:	f107 031c 	add.w	r3, r7, #28
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	605a      	str	r2, [r3, #4]
 80022e2:	609a      	str	r2, [r3, #8]
 80022e4:	60da      	str	r2, [r3, #12]
 80022e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a4d      	ldr	r2, [pc, #308]	@ (8002424 <HAL_UART_MspInit+0x154>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d12d      	bne.n	800234e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80022f2:	2300      	movs	r3, #0
 80022f4:	61bb      	str	r3, [r7, #24]
 80022f6:	4b4c      	ldr	r3, [pc, #304]	@ (8002428 <HAL_UART_MspInit+0x158>)
 80022f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022fa:	4a4b      	ldr	r2, [pc, #300]	@ (8002428 <HAL_UART_MspInit+0x158>)
 80022fc:	f043 0310 	orr.w	r3, r3, #16
 8002300:	6453      	str	r3, [r2, #68]	@ 0x44
 8002302:	4b49      	ldr	r3, [pc, #292]	@ (8002428 <HAL_UART_MspInit+0x158>)
 8002304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002306:	f003 0310 	and.w	r3, r3, #16
 800230a:	61bb      	str	r3, [r7, #24]
 800230c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800230e:	2300      	movs	r3, #0
 8002310:	617b      	str	r3, [r7, #20]
 8002312:	4b45      	ldr	r3, [pc, #276]	@ (8002428 <HAL_UART_MspInit+0x158>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002316:	4a44      	ldr	r2, [pc, #272]	@ (8002428 <HAL_UART_MspInit+0x158>)
 8002318:	f043 0301 	orr.w	r3, r3, #1
 800231c:	6313      	str	r3, [r2, #48]	@ 0x30
 800231e:	4b42      	ldr	r3, [pc, #264]	@ (8002428 <HAL_UART_MspInit+0x158>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	617b      	str	r3, [r7, #20]
 8002328:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800232a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800232e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002330:	2302      	movs	r3, #2
 8002332:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002334:	2300      	movs	r3, #0
 8002336:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002338:	2303      	movs	r3, #3
 800233a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800233c:	2307      	movs	r3, #7
 800233e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002340:	f107 031c 	add.w	r3, r7, #28
 8002344:	4619      	mov	r1, r3
 8002346:	4839      	ldr	r0, [pc, #228]	@ (800242c <HAL_UART_MspInit+0x15c>)
 8002348:	f000 fef0 	bl	800312c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800234c:	e066      	b.n	800241c <HAL_UART_MspInit+0x14c>
  else if(huart->Instance==USART2)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a37      	ldr	r2, [pc, #220]	@ (8002430 <HAL_UART_MspInit+0x160>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d161      	bne.n	800241c <HAL_UART_MspInit+0x14c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002358:	2300      	movs	r3, #0
 800235a:	613b      	str	r3, [r7, #16]
 800235c:	4b32      	ldr	r3, [pc, #200]	@ (8002428 <HAL_UART_MspInit+0x158>)
 800235e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002360:	4a31      	ldr	r2, [pc, #196]	@ (8002428 <HAL_UART_MspInit+0x158>)
 8002362:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002366:	6413      	str	r3, [r2, #64]	@ 0x40
 8002368:	4b2f      	ldr	r3, [pc, #188]	@ (8002428 <HAL_UART_MspInit+0x158>)
 800236a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800236c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002370:	613b      	str	r3, [r7, #16]
 8002372:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002374:	2300      	movs	r3, #0
 8002376:	60fb      	str	r3, [r7, #12]
 8002378:	4b2b      	ldr	r3, [pc, #172]	@ (8002428 <HAL_UART_MspInit+0x158>)
 800237a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800237c:	4a2a      	ldr	r2, [pc, #168]	@ (8002428 <HAL_UART_MspInit+0x158>)
 800237e:	f043 0301 	orr.w	r3, r3, #1
 8002382:	6313      	str	r3, [r2, #48]	@ 0x30
 8002384:	4b28      	ldr	r3, [pc, #160]	@ (8002428 <HAL_UART_MspInit+0x158>)
 8002386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002388:	f003 0301 	and.w	r3, r3, #1
 800238c:	60fb      	str	r3, [r7, #12]
 800238e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002390:	230c      	movs	r3, #12
 8002392:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002394:	2302      	movs	r3, #2
 8002396:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002398:	2300      	movs	r3, #0
 800239a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800239c:	2303      	movs	r3, #3
 800239e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023a0:	2307      	movs	r3, #7
 80023a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023a4:	f107 031c 	add.w	r3, r7, #28
 80023a8:	4619      	mov	r1, r3
 80023aa:	4820      	ldr	r0, [pc, #128]	@ (800242c <HAL_UART_MspInit+0x15c>)
 80023ac:	f000 febe 	bl	800312c <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80023b0:	4b20      	ldr	r3, [pc, #128]	@ (8002434 <HAL_UART_MspInit+0x164>)
 80023b2:	4a21      	ldr	r2, [pc, #132]	@ (8002438 <HAL_UART_MspInit+0x168>)
 80023b4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80023b6:	4b1f      	ldr	r3, [pc, #124]	@ (8002434 <HAL_UART_MspInit+0x164>)
 80023b8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80023bc:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80023be:	4b1d      	ldr	r3, [pc, #116]	@ (8002434 <HAL_UART_MspInit+0x164>)
 80023c0:	2240      	movs	r2, #64	@ 0x40
 80023c2:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023c4:	4b1b      	ldr	r3, [pc, #108]	@ (8002434 <HAL_UART_MspInit+0x164>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80023ca:	4b1a      	ldr	r3, [pc, #104]	@ (8002434 <HAL_UART_MspInit+0x164>)
 80023cc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80023d0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023d2:	4b18      	ldr	r3, [pc, #96]	@ (8002434 <HAL_UART_MspInit+0x164>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023d8:	4b16      	ldr	r3, [pc, #88]	@ (8002434 <HAL_UART_MspInit+0x164>)
 80023da:	2200      	movs	r2, #0
 80023dc:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80023de:	4b15      	ldr	r3, [pc, #84]	@ (8002434 <HAL_UART_MspInit+0x164>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80023e4:	4b13      	ldr	r3, [pc, #76]	@ (8002434 <HAL_UART_MspInit+0x164>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023ea:	4b12      	ldr	r3, [pc, #72]	@ (8002434 <HAL_UART_MspInit+0x164>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80023f0:	4810      	ldr	r0, [pc, #64]	@ (8002434 <HAL_UART_MspInit+0x164>)
 80023f2:	f000 fa99 	bl	8002928 <HAL_DMA_Init>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <HAL_UART_MspInit+0x130>
      Error_Handler();
 80023fc:	f7ff fefa 	bl	80021f4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4a0c      	ldr	r2, [pc, #48]	@ (8002434 <HAL_UART_MspInit+0x164>)
 8002404:	639a      	str	r2, [r3, #56]	@ 0x38
 8002406:	4a0b      	ldr	r2, [pc, #44]	@ (8002434 <HAL_UART_MspInit+0x164>)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800240c:	2200      	movs	r2, #0
 800240e:	2105      	movs	r1, #5
 8002410:	2026      	movs	r0, #38	@ 0x26
 8002412:	f000 fa5f 	bl	80028d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002416:	2026      	movs	r0, #38	@ 0x26
 8002418:	f000 fa78 	bl	800290c <HAL_NVIC_EnableIRQ>
}
 800241c:	bf00      	nop
 800241e:	3730      	adds	r7, #48	@ 0x30
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	40011000 	.word	0x40011000
 8002428:	40023800 	.word	0x40023800
 800242c:	40020000 	.word	0x40020000
 8002430:	40004400 	.word	0x40004400
 8002434:	200001cc 	.word	0x200001cc
 8002438:	400260a0 	.word	0x400260a0

0800243c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b08c      	sub	sp, #48	@ 0x30
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002444:	2300      	movs	r3, #0
 8002446:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002448:	2300      	movs	r3, #0
 800244a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 800244c:	2300      	movs	r3, #0
 800244e:	60bb      	str	r3, [r7, #8]
 8002450:	4b2e      	ldr	r3, [pc, #184]	@ (800250c <HAL_InitTick+0xd0>)
 8002452:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002454:	4a2d      	ldr	r2, [pc, #180]	@ (800250c <HAL_InitTick+0xd0>)
 8002456:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800245a:	6453      	str	r3, [r2, #68]	@ 0x44
 800245c:	4b2b      	ldr	r3, [pc, #172]	@ (800250c <HAL_InitTick+0xd0>)
 800245e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002460:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002464:	60bb      	str	r3, [r7, #8]
 8002466:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002468:	f107 020c 	add.w	r2, r7, #12
 800246c:	f107 0310 	add.w	r3, r7, #16
 8002470:	4611      	mov	r1, r2
 8002472:	4618      	mov	r0, r3
 8002474:	f001 fc36 	bl	8003ce4 <HAL_RCC_GetClockConfig>
  /* Compute TIM9 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002478:	f001 fc20 	bl	8003cbc <HAL_RCC_GetPCLK2Freq>
 800247c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800247e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002480:	4a23      	ldr	r2, [pc, #140]	@ (8002510 <HAL_InitTick+0xd4>)
 8002482:	fba2 2303 	umull	r2, r3, r2, r3
 8002486:	0c9b      	lsrs	r3, r3, #18
 8002488:	3b01      	subs	r3, #1
 800248a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 800248c:	4b21      	ldr	r3, [pc, #132]	@ (8002514 <HAL_InitTick+0xd8>)
 800248e:	4a22      	ldr	r2, [pc, #136]	@ (8002518 <HAL_InitTick+0xdc>)
 8002490:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 8002492:	4b20      	ldr	r3, [pc, #128]	@ (8002514 <HAL_InitTick+0xd8>)
 8002494:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002498:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 800249a:	4a1e      	ldr	r2, [pc, #120]	@ (8002514 <HAL_InitTick+0xd8>)
 800249c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800249e:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 80024a0:	4b1c      	ldr	r3, [pc, #112]	@ (8002514 <HAL_InitTick+0xd8>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024a6:	4b1b      	ldr	r3, [pc, #108]	@ (8002514 <HAL_InitTick+0xd8>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	609a      	str	r2, [r3, #8]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024ac:	4b19      	ldr	r3, [pc, #100]	@ (8002514 <HAL_InitTick+0xd8>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim9);
 80024b2:	4818      	ldr	r0, [pc, #96]	@ (8002514 <HAL_InitTick+0xd8>)
 80024b4:	f001 fc48 	bl	8003d48 <HAL_TIM_Base_Init>
 80024b8:	4603      	mov	r3, r0
 80024ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80024be:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d11b      	bne.n	80024fe <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim9);
 80024c6:	4813      	ldr	r0, [pc, #76]	@ (8002514 <HAL_InitTick+0xd8>)
 80024c8:	f001 fc8e 	bl	8003de8 <HAL_TIM_Base_Start_IT>
 80024cc:	4603      	mov	r3, r0
 80024ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80024d2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d111      	bne.n	80024fe <HAL_InitTick+0xc2>
    {
    /* Enable the TIM9 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80024da:	2018      	movs	r0, #24
 80024dc:	f000 fa16 	bl	800290c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2b0f      	cmp	r3, #15
 80024e4:	d808      	bhi.n	80024f8 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority, 0U);
 80024e6:	2200      	movs	r2, #0
 80024e8:	6879      	ldr	r1, [r7, #4]
 80024ea:	2018      	movs	r0, #24
 80024ec:	f000 f9f2 	bl	80028d4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024f0:	4a0a      	ldr	r2, [pc, #40]	@ (800251c <HAL_InitTick+0xe0>)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6013      	str	r3, [r2, #0]
 80024f6:	e002      	b.n	80024fe <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80024fe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002502:	4618      	mov	r0, r3
 8002504:	3730      	adds	r7, #48	@ 0x30
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	40023800 	.word	0x40023800
 8002510:	431bde83 	.word	0x431bde83
 8002514:	20000258 	.word	0x20000258
 8002518:	40014000 	.word	0x40014000
 800251c:	20000008 	.word	0x20000008

08002520 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002524:	bf00      	nop
 8002526:	e7fd      	b.n	8002524 <NMI_Handler+0x4>

08002528 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800252c:	bf00      	nop
 800252e:	e7fd      	b.n	800252c <HardFault_Handler+0x4>

08002530 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002534:	bf00      	nop
 8002536:	e7fd      	b.n	8002534 <MemManage_Handler+0x4>

08002538 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800253c:	bf00      	nop
 800253e:	e7fd      	b.n	800253c <BusFault_Handler+0x4>

08002540 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002544:	bf00      	nop
 8002546:	e7fd      	b.n	8002544 <UsageFault_Handler+0x4>

08002548 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800254c:	bf00      	nop
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
	...

08002558 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800255c:	4802      	ldr	r0, [pc, #8]	@ (8002568 <DMA1_Stream6_IRQHandler+0x10>)
 800255e:	f000 fb7b 	bl	8002c58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002562:	bf00      	nop
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	200001cc 	.word	0x200001cc

0800256c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8002570:	4802      	ldr	r0, [pc, #8]	@ (800257c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8002572:	f001 fc9b 	bl	8003eac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8002576:	bf00      	nop
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	20000258 	.word	0x20000258

08002580 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	ulStatsTimerTicks++;
 8002584:	4b04      	ldr	r3, [pc, #16]	@ (8002598 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	3301      	adds	r3, #1
 800258a:	4a03      	ldr	r2, [pc, #12]	@ (8002598 <TIM1_UP_TIM10_IRQHandler+0x18>)
 800258c:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 800258e:	4803      	ldr	r0, [pc, #12]	@ (800259c <TIM1_UP_TIM10_IRQHandler+0x1c>)
 8002590:	f001 fc8c 	bl	8003eac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002594:	bf00      	nop
 8002596:	bd80      	pop	{r7, pc}
 8002598:	200000a8 	.word	0x200000a8
 800259c:	200000f4 	.word	0x200000f4

080025a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80025a4:	4802      	ldr	r0, [pc, #8]	@ (80025b0 <USART2_IRQHandler+0x10>)
 80025a6:	f002 f8c9 	bl	800473c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80025aa:	bf00      	nop
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	20000184 	.word	0x20000184

080025b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b086      	sub	sp, #24
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025bc:	4a14      	ldr	r2, [pc, #80]	@ (8002610 <_sbrk+0x5c>)
 80025be:	4b15      	ldr	r3, [pc, #84]	@ (8002614 <_sbrk+0x60>)
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025c8:	4b13      	ldr	r3, [pc, #76]	@ (8002618 <_sbrk+0x64>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d102      	bne.n	80025d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025d0:	4b11      	ldr	r3, [pc, #68]	@ (8002618 <_sbrk+0x64>)
 80025d2:	4a12      	ldr	r2, [pc, #72]	@ (800261c <_sbrk+0x68>)
 80025d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025d6:	4b10      	ldr	r3, [pc, #64]	@ (8002618 <_sbrk+0x64>)
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4413      	add	r3, r2
 80025de:	693a      	ldr	r2, [r7, #16]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d207      	bcs.n	80025f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025e4:	f006 fdee 	bl	80091c4 <__errno>
 80025e8:	4603      	mov	r3, r0
 80025ea:	220c      	movs	r2, #12
 80025ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80025f2:	e009      	b.n	8002608 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025f4:	4b08      	ldr	r3, [pc, #32]	@ (8002618 <_sbrk+0x64>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025fa:	4b07      	ldr	r3, [pc, #28]	@ (8002618 <_sbrk+0x64>)
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4413      	add	r3, r2
 8002602:	4a05      	ldr	r2, [pc, #20]	@ (8002618 <_sbrk+0x64>)
 8002604:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002606:	68fb      	ldr	r3, [r7, #12]
}
 8002608:	4618      	mov	r0, r3
 800260a:	3718      	adds	r7, #24
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	20018000 	.word	0x20018000
 8002614:	00000400 	.word	0x00000400
 8002618:	200002a0 	.word	0x200002a0
 800261c:	20004e40 	.word	0x20004e40

08002620 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002624:	4b06      	ldr	r3, [pc, #24]	@ (8002640 <SystemInit+0x20>)
 8002626:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800262a:	4a05      	ldr	r2, [pc, #20]	@ (8002640 <SystemInit+0x20>)
 800262c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002630:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002634:	bf00      	nop
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	e000ed00 	.word	0xe000ed00

08002644 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002644:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800267c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002648:	f7ff ffea 	bl	8002620 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800264c:	480c      	ldr	r0, [pc, #48]	@ (8002680 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800264e:	490d      	ldr	r1, [pc, #52]	@ (8002684 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002650:	4a0d      	ldr	r2, [pc, #52]	@ (8002688 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002652:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002654:	e002      	b.n	800265c <LoopCopyDataInit>

08002656 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002656:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002658:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800265a:	3304      	adds	r3, #4

0800265c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800265c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800265e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002660:	d3f9      	bcc.n	8002656 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002662:	4a0a      	ldr	r2, [pc, #40]	@ (800268c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002664:	4c0a      	ldr	r4, [pc, #40]	@ (8002690 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002666:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002668:	e001      	b.n	800266e <LoopFillZerobss>

0800266a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800266a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800266c:	3204      	adds	r2, #4

0800266e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800266e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002670:	d3fb      	bcc.n	800266a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002672:	f006 fdad 	bl	80091d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002676:	f7ff fbb5 	bl	8001de4 <main>
  bx  lr    
 800267a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800267c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002680:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002684:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8002688:	0800ab90 	.word	0x0800ab90
  ldr r2, =_sbss
 800268c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8002690:	20004e3c 	.word	0x20004e3c

08002694 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002694:	e7fe      	b.n	8002694 <ADC_IRQHandler>
	...

08002698 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800269c:	4b0e      	ldr	r3, [pc, #56]	@ (80026d8 <HAL_Init+0x40>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a0d      	ldr	r2, [pc, #52]	@ (80026d8 <HAL_Init+0x40>)
 80026a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80026a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80026a8:	4b0b      	ldr	r3, [pc, #44]	@ (80026d8 <HAL_Init+0x40>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a0a      	ldr	r2, [pc, #40]	@ (80026d8 <HAL_Init+0x40>)
 80026ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80026b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026b4:	4b08      	ldr	r3, [pc, #32]	@ (80026d8 <HAL_Init+0x40>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a07      	ldr	r2, [pc, #28]	@ (80026d8 <HAL_Init+0x40>)
 80026ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026c0:	2003      	movs	r0, #3
 80026c2:	f000 f8fc 	bl	80028be <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026c6:	200f      	movs	r0, #15
 80026c8:	f7ff feb8 	bl	800243c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026cc:	f7ff fd98 	bl	8002200 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	40023c00 	.word	0x40023c00

080026dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026e0:	4b06      	ldr	r3, [pc, #24]	@ (80026fc <HAL_IncTick+0x20>)
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	461a      	mov	r2, r3
 80026e6:	4b06      	ldr	r3, [pc, #24]	@ (8002700 <HAL_IncTick+0x24>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4413      	add	r3, r2
 80026ec:	4a04      	ldr	r2, [pc, #16]	@ (8002700 <HAL_IncTick+0x24>)
 80026ee:	6013      	str	r3, [r2, #0]
}
 80026f0:	bf00      	nop
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	2000000c 	.word	0x2000000c
 8002700:	200002a4 	.word	0x200002a4

08002704 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  return uwTick;
 8002708:	4b03      	ldr	r3, [pc, #12]	@ (8002718 <HAL_GetTick+0x14>)
 800270a:	681b      	ldr	r3, [r3, #0]
}
 800270c:	4618      	mov	r0, r3
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	200002a4 	.word	0x200002a4

0800271c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002724:	f7ff ffee 	bl	8002704 <HAL_GetTick>
 8002728:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002734:	d005      	beq.n	8002742 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002736:	4b0a      	ldr	r3, [pc, #40]	@ (8002760 <HAL_Delay+0x44>)
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	461a      	mov	r2, r3
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	4413      	add	r3, r2
 8002740:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002742:	bf00      	nop
 8002744:	f7ff ffde 	bl	8002704 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	68fa      	ldr	r2, [r7, #12]
 8002750:	429a      	cmp	r2, r3
 8002752:	d8f7      	bhi.n	8002744 <HAL_Delay+0x28>
  {
  }
}
 8002754:	bf00      	nop
 8002756:	bf00      	nop
 8002758:	3710      	adds	r7, #16
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	2000000c 	.word	0x2000000c

08002764 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002764:	b480      	push	{r7}
 8002766:	b085      	sub	sp, #20
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f003 0307 	and.w	r3, r3, #7
 8002772:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002774:	4b0c      	ldr	r3, [pc, #48]	@ (80027a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800277a:	68ba      	ldr	r2, [r7, #8]
 800277c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002780:	4013      	ands	r3, r2
 8002782:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800278c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002790:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002794:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002796:	4a04      	ldr	r2, [pc, #16]	@ (80027a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	60d3      	str	r3, [r2, #12]
}
 800279c:	bf00      	nop
 800279e:	3714      	adds	r7, #20
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr
 80027a8:	e000ed00 	.word	0xe000ed00

080027ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027b0:	4b04      	ldr	r3, [pc, #16]	@ (80027c4 <__NVIC_GetPriorityGrouping+0x18>)
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	0a1b      	lsrs	r3, r3, #8
 80027b6:	f003 0307 	and.w	r3, r3, #7
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr
 80027c4:	e000ed00 	.word	0xe000ed00

080027c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	4603      	mov	r3, r0
 80027d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	db0b      	blt.n	80027f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027da:	79fb      	ldrb	r3, [r7, #7]
 80027dc:	f003 021f 	and.w	r2, r3, #31
 80027e0:	4907      	ldr	r1, [pc, #28]	@ (8002800 <__NVIC_EnableIRQ+0x38>)
 80027e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e6:	095b      	lsrs	r3, r3, #5
 80027e8:	2001      	movs	r0, #1
 80027ea:	fa00 f202 	lsl.w	r2, r0, r2
 80027ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80027f2:	bf00      	nop
 80027f4:	370c      	adds	r7, #12
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	e000e100 	.word	0xe000e100

08002804 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	4603      	mov	r3, r0
 800280c:	6039      	str	r1, [r7, #0]
 800280e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002814:	2b00      	cmp	r3, #0
 8002816:	db0a      	blt.n	800282e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	b2da      	uxtb	r2, r3
 800281c:	490c      	ldr	r1, [pc, #48]	@ (8002850 <__NVIC_SetPriority+0x4c>)
 800281e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002822:	0112      	lsls	r2, r2, #4
 8002824:	b2d2      	uxtb	r2, r2
 8002826:	440b      	add	r3, r1
 8002828:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800282c:	e00a      	b.n	8002844 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	b2da      	uxtb	r2, r3
 8002832:	4908      	ldr	r1, [pc, #32]	@ (8002854 <__NVIC_SetPriority+0x50>)
 8002834:	79fb      	ldrb	r3, [r7, #7]
 8002836:	f003 030f 	and.w	r3, r3, #15
 800283a:	3b04      	subs	r3, #4
 800283c:	0112      	lsls	r2, r2, #4
 800283e:	b2d2      	uxtb	r2, r2
 8002840:	440b      	add	r3, r1
 8002842:	761a      	strb	r2, [r3, #24]
}
 8002844:	bf00      	nop
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr
 8002850:	e000e100 	.word	0xe000e100
 8002854:	e000ed00 	.word	0xe000ed00

08002858 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002858:	b480      	push	{r7}
 800285a:	b089      	sub	sp, #36	@ 0x24
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f003 0307 	and.w	r3, r3, #7
 800286a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	f1c3 0307 	rsb	r3, r3, #7
 8002872:	2b04      	cmp	r3, #4
 8002874:	bf28      	it	cs
 8002876:	2304      	movcs	r3, #4
 8002878:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	3304      	adds	r3, #4
 800287e:	2b06      	cmp	r3, #6
 8002880:	d902      	bls.n	8002888 <NVIC_EncodePriority+0x30>
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	3b03      	subs	r3, #3
 8002886:	e000      	b.n	800288a <NVIC_EncodePriority+0x32>
 8002888:	2300      	movs	r3, #0
 800288a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800288c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	fa02 f303 	lsl.w	r3, r2, r3
 8002896:	43da      	mvns	r2, r3
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	401a      	ands	r2, r3
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028a0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	fa01 f303 	lsl.w	r3, r1, r3
 80028aa:	43d9      	mvns	r1, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028b0:	4313      	orrs	r3, r2
         );
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3724      	adds	r7, #36	@ 0x24
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr

080028be <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b082      	sub	sp, #8
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f7ff ff4c 	bl	8002764 <__NVIC_SetPriorityGrouping>
}
 80028cc:	bf00      	nop
 80028ce:	3708      	adds	r7, #8
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b086      	sub	sp, #24
 80028d8:	af00      	add	r7, sp, #0
 80028da:	4603      	mov	r3, r0
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	607a      	str	r2, [r7, #4]
 80028e0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028e2:	2300      	movs	r3, #0
 80028e4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028e6:	f7ff ff61 	bl	80027ac <__NVIC_GetPriorityGrouping>
 80028ea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	68b9      	ldr	r1, [r7, #8]
 80028f0:	6978      	ldr	r0, [r7, #20]
 80028f2:	f7ff ffb1 	bl	8002858 <NVIC_EncodePriority>
 80028f6:	4602      	mov	r2, r0
 80028f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028fc:	4611      	mov	r1, r2
 80028fe:	4618      	mov	r0, r3
 8002900:	f7ff ff80 	bl	8002804 <__NVIC_SetPriority>
}
 8002904:	bf00      	nop
 8002906:	3718      	adds	r7, #24
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	4603      	mov	r3, r0
 8002914:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800291a:	4618      	mov	r0, r3
 800291c:	f7ff ff54 	bl	80027c8 <__NVIC_EnableIRQ>
}
 8002920:	bf00      	nop
 8002922:	3708      	adds	r7, #8
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b086      	sub	sp, #24
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002930:	2300      	movs	r3, #0
 8002932:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002934:	f7ff fee6 	bl	8002704 <HAL_GetTick>
 8002938:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d101      	bne.n	8002944 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e099      	b.n	8002a78 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2202      	movs	r2, #2
 8002948:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f022 0201 	bic.w	r2, r2, #1
 8002962:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002964:	e00f      	b.n	8002986 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002966:	f7ff fecd 	bl	8002704 <HAL_GetTick>
 800296a:	4602      	mov	r2, r0
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	2b05      	cmp	r3, #5
 8002972:	d908      	bls.n	8002986 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2220      	movs	r2, #32
 8002978:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2203      	movs	r2, #3
 800297e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e078      	b.n	8002a78 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0301 	and.w	r3, r3, #1
 8002990:	2b00      	cmp	r3, #0
 8002992:	d1e8      	bne.n	8002966 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800299c:	697a      	ldr	r2, [r7, #20]
 800299e:	4b38      	ldr	r3, [pc, #224]	@ (8002a80 <HAL_DMA_Init+0x158>)
 80029a0:	4013      	ands	r3, r2
 80029a2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685a      	ldr	r2, [r3, #4]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	691b      	ldr	r3, [r3, #16]
 80029b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	699b      	ldr	r3, [r3, #24]
 80029c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a1b      	ldr	r3, [r3, #32]
 80029d0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029d2:	697a      	ldr	r2, [r7, #20]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029dc:	2b04      	cmp	r3, #4
 80029de:	d107      	bne.n	80029f0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e8:	4313      	orrs	r3, r2
 80029ea:	697a      	ldr	r2, [r7, #20]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	697a      	ldr	r2, [r7, #20]
 80029f6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	695b      	ldr	r3, [r3, #20]
 80029fe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	f023 0307 	bic.w	r3, r3, #7
 8002a06:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a0c:	697a      	ldr	r2, [r7, #20]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a16:	2b04      	cmp	r3, #4
 8002a18:	d117      	bne.n	8002a4a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a1e:	697a      	ldr	r2, [r7, #20]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d00e      	beq.n	8002a4a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f000 fb01 	bl	8003034 <DMA_CheckFifoParam>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d008      	beq.n	8002a4a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2240      	movs	r2, #64	@ 0x40
 8002a3c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2201      	movs	r2, #1
 8002a42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002a46:	2301      	movs	r3, #1
 8002a48:	e016      	b.n	8002a78 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	697a      	ldr	r2, [r7, #20]
 8002a50:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f000 fab8 	bl	8002fc8 <DMA_CalcBaseAndBitshift>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a60:	223f      	movs	r2, #63	@ 0x3f
 8002a62:	409a      	lsls	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2201      	movs	r2, #1
 8002a72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002a76:	2300      	movs	r3, #0
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3718      	adds	r7, #24
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	f010803f 	.word	0xf010803f

08002a84 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b086      	sub	sp, #24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	607a      	str	r2, [r7, #4]
 8002a90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a92:	2300      	movs	r3, #0
 8002a94:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a9a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d101      	bne.n	8002aaa <HAL_DMA_Start_IT+0x26>
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	e040      	b.n	8002b2c <HAL_DMA_Start_IT+0xa8>
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2201      	movs	r2, #1
 8002aae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d12f      	bne.n	8002b1e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2202      	movs	r2, #2
 8002ac2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	68b9      	ldr	r1, [r7, #8]
 8002ad2:	68f8      	ldr	r0, [r7, #12]
 8002ad4:	f000 fa4a 	bl	8002f6c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002adc:	223f      	movs	r2, #63	@ 0x3f
 8002ade:	409a      	lsls	r2, r3
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f042 0216 	orr.w	r2, r2, #22
 8002af2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d007      	beq.n	8002b0c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f042 0208 	orr.w	r2, r2, #8
 8002b0a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f042 0201 	orr.w	r2, r2, #1
 8002b1a:	601a      	str	r2, [r3, #0]
 8002b1c:	e005      	b.n	8002b2a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002b26:	2302      	movs	r3, #2
 8002b28:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002b2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3718      	adds	r7, #24
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b40:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002b42:	f7ff fddf 	bl	8002704 <HAL_GetTick>
 8002b46:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d008      	beq.n	8002b66 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2280      	movs	r2, #128	@ 0x80
 8002b58:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e052      	b.n	8002c0c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f022 0216 	bic.w	r2, r2, #22
 8002b74:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	695a      	ldr	r2, [r3, #20]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002b84:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d103      	bne.n	8002b96 <HAL_DMA_Abort+0x62>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d007      	beq.n	8002ba6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f022 0208 	bic.w	r2, r2, #8
 8002ba4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f022 0201 	bic.w	r2, r2, #1
 8002bb4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bb6:	e013      	b.n	8002be0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002bb8:	f7ff fda4 	bl	8002704 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b05      	cmp	r3, #5
 8002bc4:	d90c      	bls.n	8002be0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2220      	movs	r2, #32
 8002bca:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2203      	movs	r2, #3
 8002bd0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e015      	b.n	8002c0c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d1e4      	bne.n	8002bb8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bf2:	223f      	movs	r2, #63	@ 0x3f
 8002bf4:	409a      	lsls	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3710      	adds	r7, #16
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d004      	beq.n	8002c32 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2280      	movs	r2, #128	@ 0x80
 8002c2c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e00c      	b.n	8002c4c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2205      	movs	r2, #5
 8002c36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f022 0201 	bic.w	r2, r2, #1
 8002c48:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b086      	sub	sp, #24
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002c60:	2300      	movs	r3, #0
 8002c62:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002c64:	4b8e      	ldr	r3, [pc, #568]	@ (8002ea0 <HAL_DMA_IRQHandler+0x248>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a8e      	ldr	r2, [pc, #568]	@ (8002ea4 <HAL_DMA_IRQHandler+0x24c>)
 8002c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c6e:	0a9b      	lsrs	r3, r3, #10
 8002c70:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c76:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c82:	2208      	movs	r2, #8
 8002c84:	409a      	lsls	r2, r3
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d01a      	beq.n	8002cc4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0304 	and.w	r3, r3, #4
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d013      	beq.n	8002cc4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f022 0204 	bic.w	r2, r2, #4
 8002caa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cb0:	2208      	movs	r2, #8
 8002cb2:	409a      	lsls	r2, r3
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cbc:	f043 0201 	orr.w	r2, r3, #1
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cc8:	2201      	movs	r2, #1
 8002cca:	409a      	lsls	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	4013      	ands	r3, r2
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d012      	beq.n	8002cfa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	695b      	ldr	r3, [r3, #20]
 8002cda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d00b      	beq.n	8002cfa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	409a      	lsls	r2, r3
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cf2:	f043 0202 	orr.w	r2, r3, #2
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cfe:	2204      	movs	r2, #4
 8002d00:	409a      	lsls	r2, r3
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	4013      	ands	r3, r2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d012      	beq.n	8002d30 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0302 	and.w	r3, r3, #2
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d00b      	beq.n	8002d30 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d1c:	2204      	movs	r2, #4
 8002d1e:	409a      	lsls	r2, r3
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d28:	f043 0204 	orr.w	r2, r3, #4
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d34:	2210      	movs	r2, #16
 8002d36:	409a      	lsls	r2, r3
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d043      	beq.n	8002dc8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0308 	and.w	r3, r3, #8
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d03c      	beq.n	8002dc8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d52:	2210      	movs	r2, #16
 8002d54:	409a      	lsls	r2, r3
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d018      	beq.n	8002d9a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d108      	bne.n	8002d88 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d024      	beq.n	8002dc8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	4798      	blx	r3
 8002d86:	e01f      	b.n	8002dc8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d01b      	beq.n	8002dc8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	4798      	blx	r3
 8002d98:	e016      	b.n	8002dc8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d107      	bne.n	8002db8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f022 0208 	bic.w	r2, r2, #8
 8002db6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d003      	beq.n	8002dc8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dcc:	2220      	movs	r2, #32
 8002dce:	409a      	lsls	r2, r3
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	f000 808f 	beq.w	8002ef8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0310 	and.w	r3, r3, #16
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	f000 8087 	beq.w	8002ef8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dee:	2220      	movs	r2, #32
 8002df0:	409a      	lsls	r2, r3
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b05      	cmp	r3, #5
 8002e00:	d136      	bne.n	8002e70 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f022 0216 	bic.w	r2, r2, #22
 8002e10:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	695a      	ldr	r2, [r3, #20]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e20:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d103      	bne.n	8002e32 <HAL_DMA_IRQHandler+0x1da>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d007      	beq.n	8002e42 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f022 0208 	bic.w	r2, r2, #8
 8002e40:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e46:	223f      	movs	r2, #63	@ 0x3f
 8002e48:	409a      	lsls	r2, r3
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2201      	movs	r2, #1
 8002e52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d07e      	beq.n	8002f64 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	4798      	blx	r3
        }
        return;
 8002e6e:	e079      	b.n	8002f64 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d01d      	beq.n	8002eba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d10d      	bne.n	8002ea8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d031      	beq.n	8002ef8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	4798      	blx	r3
 8002e9c:	e02c      	b.n	8002ef8 <HAL_DMA_IRQHandler+0x2a0>
 8002e9e:	bf00      	nop
 8002ea0:	20000004 	.word	0x20000004
 8002ea4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d023      	beq.n	8002ef8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	4798      	blx	r3
 8002eb8:	e01e      	b.n	8002ef8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d10f      	bne.n	8002ee8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f022 0210 	bic.w	r2, r2, #16
 8002ed6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d003      	beq.n	8002ef8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d032      	beq.n	8002f66 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f04:	f003 0301 	and.w	r3, r3, #1
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d022      	beq.n	8002f52 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2205      	movs	r2, #5
 8002f10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f022 0201 	bic.w	r2, r2, #1
 8002f22:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	3301      	adds	r3, #1
 8002f28:	60bb      	str	r3, [r7, #8]
 8002f2a:	697a      	ldr	r2, [r7, #20]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d307      	bcc.n	8002f40 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0301 	and.w	r3, r3, #1
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d1f2      	bne.n	8002f24 <HAL_DMA_IRQHandler+0x2cc>
 8002f3e:	e000      	b.n	8002f42 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002f40:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2201      	movs	r2, #1
 8002f46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d005      	beq.n	8002f66 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	4798      	blx	r3
 8002f62:	e000      	b.n	8002f66 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002f64:	bf00      	nop
    }
  }
}
 8002f66:	3718      	adds	r7, #24
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b085      	sub	sp, #20
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	607a      	str	r2, [r7, #4]
 8002f78:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002f88:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	683a      	ldr	r2, [r7, #0]
 8002f90:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	2b40      	cmp	r3, #64	@ 0x40
 8002f98:	d108      	bne.n	8002fac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68ba      	ldr	r2, [r7, #8]
 8002fa8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002faa:	e007      	b.n	8002fbc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68ba      	ldr	r2, [r7, #8]
 8002fb2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	60da      	str	r2, [r3, #12]
}
 8002fbc:	bf00      	nop
 8002fbe:	3714      	adds	r7, #20
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b085      	sub	sp, #20
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	3b10      	subs	r3, #16
 8002fd8:	4a14      	ldr	r2, [pc, #80]	@ (800302c <DMA_CalcBaseAndBitshift+0x64>)
 8002fda:	fba2 2303 	umull	r2, r3, r2, r3
 8002fde:	091b      	lsrs	r3, r3, #4
 8002fe0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002fe2:	4a13      	ldr	r2, [pc, #76]	@ (8003030 <DMA_CalcBaseAndBitshift+0x68>)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	461a      	mov	r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2b03      	cmp	r3, #3
 8002ff4:	d909      	bls.n	800300a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002ffe:	f023 0303 	bic.w	r3, r3, #3
 8003002:	1d1a      	adds	r2, r3, #4
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	659a      	str	r2, [r3, #88]	@ 0x58
 8003008:	e007      	b.n	800301a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003012:	f023 0303 	bic.w	r3, r3, #3
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800301e:	4618      	mov	r0, r3
 8003020:	3714      	adds	r7, #20
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	aaaaaaab 	.word	0xaaaaaaab
 8003030:	0800ab00 	.word	0x0800ab00

08003034 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003034:	b480      	push	{r7}
 8003036:	b085      	sub	sp, #20
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800303c:	2300      	movs	r3, #0
 800303e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003044:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d11f      	bne.n	800308e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	2b03      	cmp	r3, #3
 8003052:	d856      	bhi.n	8003102 <DMA_CheckFifoParam+0xce>
 8003054:	a201      	add	r2, pc, #4	@ (adr r2, 800305c <DMA_CheckFifoParam+0x28>)
 8003056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800305a:	bf00      	nop
 800305c:	0800306d 	.word	0x0800306d
 8003060:	0800307f 	.word	0x0800307f
 8003064:	0800306d 	.word	0x0800306d
 8003068:	08003103 	.word	0x08003103
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003070:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d046      	beq.n	8003106 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800307c:	e043      	b.n	8003106 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003082:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003086:	d140      	bne.n	800310a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800308c:	e03d      	b.n	800310a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003096:	d121      	bne.n	80030dc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	2b03      	cmp	r3, #3
 800309c:	d837      	bhi.n	800310e <DMA_CheckFifoParam+0xda>
 800309e:	a201      	add	r2, pc, #4	@ (adr r2, 80030a4 <DMA_CheckFifoParam+0x70>)
 80030a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030a4:	080030b5 	.word	0x080030b5
 80030a8:	080030bb 	.word	0x080030bb
 80030ac:	080030b5 	.word	0x080030b5
 80030b0:	080030cd 	.word	0x080030cd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	73fb      	strb	r3, [r7, #15]
      break;
 80030b8:	e030      	b.n	800311c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030be:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d025      	beq.n	8003112 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030ca:	e022      	b.n	8003112 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030d0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80030d4:	d11f      	bne.n	8003116 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80030da:	e01c      	b.n	8003116 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d903      	bls.n	80030ea <DMA_CheckFifoParam+0xb6>
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	2b03      	cmp	r3, #3
 80030e6:	d003      	beq.n	80030f0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80030e8:	e018      	b.n	800311c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	73fb      	strb	r3, [r7, #15]
      break;
 80030ee:	e015      	b.n	800311c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d00e      	beq.n	800311a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	73fb      	strb	r3, [r7, #15]
      break;
 8003100:	e00b      	b.n	800311a <DMA_CheckFifoParam+0xe6>
      break;
 8003102:	bf00      	nop
 8003104:	e00a      	b.n	800311c <DMA_CheckFifoParam+0xe8>
      break;
 8003106:	bf00      	nop
 8003108:	e008      	b.n	800311c <DMA_CheckFifoParam+0xe8>
      break;
 800310a:	bf00      	nop
 800310c:	e006      	b.n	800311c <DMA_CheckFifoParam+0xe8>
      break;
 800310e:	bf00      	nop
 8003110:	e004      	b.n	800311c <DMA_CheckFifoParam+0xe8>
      break;
 8003112:	bf00      	nop
 8003114:	e002      	b.n	800311c <DMA_CheckFifoParam+0xe8>
      break;   
 8003116:	bf00      	nop
 8003118:	e000      	b.n	800311c <DMA_CheckFifoParam+0xe8>
      break;
 800311a:	bf00      	nop
    }
  } 
  
  return status; 
 800311c:	7bfb      	ldrb	r3, [r7, #15]
}
 800311e:	4618      	mov	r0, r3
 8003120:	3714      	adds	r7, #20
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop

0800312c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800312c:	b480      	push	{r7}
 800312e:	b089      	sub	sp, #36	@ 0x24
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003136:	2300      	movs	r3, #0
 8003138:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800313a:	2300      	movs	r3, #0
 800313c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800313e:	2300      	movs	r3, #0
 8003140:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003142:	2300      	movs	r3, #0
 8003144:	61fb      	str	r3, [r7, #28]
 8003146:	e159      	b.n	80033fc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003148:	2201      	movs	r2, #1
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	fa02 f303 	lsl.w	r3, r2, r3
 8003150:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	697a      	ldr	r2, [r7, #20]
 8003158:	4013      	ands	r3, r2
 800315a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800315c:	693a      	ldr	r2, [r7, #16]
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	429a      	cmp	r2, r3
 8003162:	f040 8148 	bne.w	80033f6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f003 0303 	and.w	r3, r3, #3
 800316e:	2b01      	cmp	r3, #1
 8003170:	d005      	beq.n	800317e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800317a:	2b02      	cmp	r3, #2
 800317c:	d130      	bne.n	80031e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	005b      	lsls	r3, r3, #1
 8003188:	2203      	movs	r2, #3
 800318a:	fa02 f303 	lsl.w	r3, r2, r3
 800318e:	43db      	mvns	r3, r3
 8003190:	69ba      	ldr	r2, [r7, #24]
 8003192:	4013      	ands	r3, r2
 8003194:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	68da      	ldr	r2, [r3, #12]
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	005b      	lsls	r3, r3, #1
 800319e:	fa02 f303 	lsl.w	r3, r2, r3
 80031a2:	69ba      	ldr	r2, [r7, #24]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	69ba      	ldr	r2, [r7, #24]
 80031ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031b4:	2201      	movs	r2, #1
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	fa02 f303 	lsl.w	r3, r2, r3
 80031bc:	43db      	mvns	r3, r3
 80031be:	69ba      	ldr	r2, [r7, #24]
 80031c0:	4013      	ands	r3, r2
 80031c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	091b      	lsrs	r3, r3, #4
 80031ca:	f003 0201 	and.w	r2, r3, #1
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	fa02 f303 	lsl.w	r3, r2, r3
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	69ba      	ldr	r2, [r7, #24]
 80031de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f003 0303 	and.w	r3, r3, #3
 80031e8:	2b03      	cmp	r3, #3
 80031ea:	d017      	beq.n	800321c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	005b      	lsls	r3, r3, #1
 80031f6:	2203      	movs	r2, #3
 80031f8:	fa02 f303 	lsl.w	r3, r2, r3
 80031fc:	43db      	mvns	r3, r3
 80031fe:	69ba      	ldr	r2, [r7, #24]
 8003200:	4013      	ands	r3, r2
 8003202:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	689a      	ldr	r2, [r3, #8]
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	fa02 f303 	lsl.w	r3, r2, r3
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	4313      	orrs	r3, r2
 8003214:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	69ba      	ldr	r2, [r7, #24]
 800321a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f003 0303 	and.w	r3, r3, #3
 8003224:	2b02      	cmp	r3, #2
 8003226:	d123      	bne.n	8003270 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	08da      	lsrs	r2, r3, #3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	3208      	adds	r2, #8
 8003230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003234:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	f003 0307 	and.w	r3, r3, #7
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	220f      	movs	r2, #15
 8003240:	fa02 f303 	lsl.w	r3, r2, r3
 8003244:	43db      	mvns	r3, r3
 8003246:	69ba      	ldr	r2, [r7, #24]
 8003248:	4013      	ands	r3, r2
 800324a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	691a      	ldr	r2, [r3, #16]
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	f003 0307 	and.w	r3, r3, #7
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	fa02 f303 	lsl.w	r3, r2, r3
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	4313      	orrs	r3, r2
 8003260:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	08da      	lsrs	r2, r3, #3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	3208      	adds	r2, #8
 800326a:	69b9      	ldr	r1, [r7, #24]
 800326c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	005b      	lsls	r3, r3, #1
 800327a:	2203      	movs	r2, #3
 800327c:	fa02 f303 	lsl.w	r3, r2, r3
 8003280:	43db      	mvns	r3, r3
 8003282:	69ba      	ldr	r2, [r7, #24]
 8003284:	4013      	ands	r3, r2
 8003286:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f003 0203 	and.w	r2, r3, #3
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	005b      	lsls	r3, r3, #1
 8003294:	fa02 f303 	lsl.w	r3, r2, r3
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	4313      	orrs	r3, r2
 800329c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	69ba      	ldr	r2, [r7, #24]
 80032a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	f000 80a2 	beq.w	80033f6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032b2:	2300      	movs	r3, #0
 80032b4:	60fb      	str	r3, [r7, #12]
 80032b6:	4b57      	ldr	r3, [pc, #348]	@ (8003414 <HAL_GPIO_Init+0x2e8>)
 80032b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ba:	4a56      	ldr	r2, [pc, #344]	@ (8003414 <HAL_GPIO_Init+0x2e8>)
 80032bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80032c2:	4b54      	ldr	r3, [pc, #336]	@ (8003414 <HAL_GPIO_Init+0x2e8>)
 80032c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032ca:	60fb      	str	r3, [r7, #12]
 80032cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032ce:	4a52      	ldr	r2, [pc, #328]	@ (8003418 <HAL_GPIO_Init+0x2ec>)
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	089b      	lsrs	r3, r3, #2
 80032d4:	3302      	adds	r3, #2
 80032d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	f003 0303 	and.w	r3, r3, #3
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	220f      	movs	r2, #15
 80032e6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ea:	43db      	mvns	r3, r3
 80032ec:	69ba      	ldr	r2, [r7, #24]
 80032ee:	4013      	ands	r3, r2
 80032f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a49      	ldr	r2, [pc, #292]	@ (800341c <HAL_GPIO_Init+0x2f0>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d019      	beq.n	800332e <HAL_GPIO_Init+0x202>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a48      	ldr	r2, [pc, #288]	@ (8003420 <HAL_GPIO_Init+0x2f4>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d013      	beq.n	800332a <HAL_GPIO_Init+0x1fe>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a47      	ldr	r2, [pc, #284]	@ (8003424 <HAL_GPIO_Init+0x2f8>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d00d      	beq.n	8003326 <HAL_GPIO_Init+0x1fa>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a46      	ldr	r2, [pc, #280]	@ (8003428 <HAL_GPIO_Init+0x2fc>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d007      	beq.n	8003322 <HAL_GPIO_Init+0x1f6>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a45      	ldr	r2, [pc, #276]	@ (800342c <HAL_GPIO_Init+0x300>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d101      	bne.n	800331e <HAL_GPIO_Init+0x1f2>
 800331a:	2304      	movs	r3, #4
 800331c:	e008      	b.n	8003330 <HAL_GPIO_Init+0x204>
 800331e:	2307      	movs	r3, #7
 8003320:	e006      	b.n	8003330 <HAL_GPIO_Init+0x204>
 8003322:	2303      	movs	r3, #3
 8003324:	e004      	b.n	8003330 <HAL_GPIO_Init+0x204>
 8003326:	2302      	movs	r3, #2
 8003328:	e002      	b.n	8003330 <HAL_GPIO_Init+0x204>
 800332a:	2301      	movs	r3, #1
 800332c:	e000      	b.n	8003330 <HAL_GPIO_Init+0x204>
 800332e:	2300      	movs	r3, #0
 8003330:	69fa      	ldr	r2, [r7, #28]
 8003332:	f002 0203 	and.w	r2, r2, #3
 8003336:	0092      	lsls	r2, r2, #2
 8003338:	4093      	lsls	r3, r2
 800333a:	69ba      	ldr	r2, [r7, #24]
 800333c:	4313      	orrs	r3, r2
 800333e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003340:	4935      	ldr	r1, [pc, #212]	@ (8003418 <HAL_GPIO_Init+0x2ec>)
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	089b      	lsrs	r3, r3, #2
 8003346:	3302      	adds	r3, #2
 8003348:	69ba      	ldr	r2, [r7, #24]
 800334a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800334e:	4b38      	ldr	r3, [pc, #224]	@ (8003430 <HAL_GPIO_Init+0x304>)
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	43db      	mvns	r3, r3
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	4013      	ands	r3, r2
 800335c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d003      	beq.n	8003372 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800336a:	69ba      	ldr	r2, [r7, #24]
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	4313      	orrs	r3, r2
 8003370:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003372:	4a2f      	ldr	r2, [pc, #188]	@ (8003430 <HAL_GPIO_Init+0x304>)
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003378:	4b2d      	ldr	r3, [pc, #180]	@ (8003430 <HAL_GPIO_Init+0x304>)
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	43db      	mvns	r3, r3
 8003382:	69ba      	ldr	r2, [r7, #24]
 8003384:	4013      	ands	r3, r2
 8003386:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d003      	beq.n	800339c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003394:	69ba      	ldr	r2, [r7, #24]
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	4313      	orrs	r3, r2
 800339a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800339c:	4a24      	ldr	r2, [pc, #144]	@ (8003430 <HAL_GPIO_Init+0x304>)
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80033a2:	4b23      	ldr	r3, [pc, #140]	@ (8003430 <HAL_GPIO_Init+0x304>)
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	43db      	mvns	r3, r3
 80033ac:	69ba      	ldr	r2, [r7, #24]
 80033ae:	4013      	ands	r3, r2
 80033b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d003      	beq.n	80033c6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80033be:	69ba      	ldr	r2, [r7, #24]
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033c6:	4a1a      	ldr	r2, [pc, #104]	@ (8003430 <HAL_GPIO_Init+0x304>)
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033cc:	4b18      	ldr	r3, [pc, #96]	@ (8003430 <HAL_GPIO_Init+0x304>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	43db      	mvns	r3, r3
 80033d6:	69ba      	ldr	r2, [r7, #24]
 80033d8:	4013      	ands	r3, r2
 80033da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d003      	beq.n	80033f0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80033e8:	69ba      	ldr	r2, [r7, #24]
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033f0:	4a0f      	ldr	r2, [pc, #60]	@ (8003430 <HAL_GPIO_Init+0x304>)
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	3301      	adds	r3, #1
 80033fa:	61fb      	str	r3, [r7, #28]
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	2b0f      	cmp	r3, #15
 8003400:	f67f aea2 	bls.w	8003148 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003404:	bf00      	nop
 8003406:	bf00      	nop
 8003408:	3724      	adds	r7, #36	@ 0x24
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	40023800 	.word	0x40023800
 8003418:	40013800 	.word	0x40013800
 800341c:	40020000 	.word	0x40020000
 8003420:	40020400 	.word	0x40020400
 8003424:	40020800 	.word	0x40020800
 8003428:	40020c00 	.word	0x40020c00
 800342c:	40021000 	.word	0x40021000
 8003430:	40013c00 	.word	0x40013c00

08003434 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b086      	sub	sp, #24
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d101      	bne.n	8003446 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e267      	b.n	8003916 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	2b00      	cmp	r3, #0
 8003450:	d075      	beq.n	800353e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003452:	4b88      	ldr	r3, [pc, #544]	@ (8003674 <HAL_RCC_OscConfig+0x240>)
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f003 030c 	and.w	r3, r3, #12
 800345a:	2b04      	cmp	r3, #4
 800345c:	d00c      	beq.n	8003478 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800345e:	4b85      	ldr	r3, [pc, #532]	@ (8003674 <HAL_RCC_OscConfig+0x240>)
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003466:	2b08      	cmp	r3, #8
 8003468:	d112      	bne.n	8003490 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800346a:	4b82      	ldr	r3, [pc, #520]	@ (8003674 <HAL_RCC_OscConfig+0x240>)
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003472:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003476:	d10b      	bne.n	8003490 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003478:	4b7e      	ldr	r3, [pc, #504]	@ (8003674 <HAL_RCC_OscConfig+0x240>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d05b      	beq.n	800353c <HAL_RCC_OscConfig+0x108>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d157      	bne.n	800353c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e242      	b.n	8003916 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003498:	d106      	bne.n	80034a8 <HAL_RCC_OscConfig+0x74>
 800349a:	4b76      	ldr	r3, [pc, #472]	@ (8003674 <HAL_RCC_OscConfig+0x240>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a75      	ldr	r2, [pc, #468]	@ (8003674 <HAL_RCC_OscConfig+0x240>)
 80034a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034a4:	6013      	str	r3, [r2, #0]
 80034a6:	e01d      	b.n	80034e4 <HAL_RCC_OscConfig+0xb0>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80034b0:	d10c      	bne.n	80034cc <HAL_RCC_OscConfig+0x98>
 80034b2:	4b70      	ldr	r3, [pc, #448]	@ (8003674 <HAL_RCC_OscConfig+0x240>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a6f      	ldr	r2, [pc, #444]	@ (8003674 <HAL_RCC_OscConfig+0x240>)
 80034b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80034bc:	6013      	str	r3, [r2, #0]
 80034be:	4b6d      	ldr	r3, [pc, #436]	@ (8003674 <HAL_RCC_OscConfig+0x240>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a6c      	ldr	r2, [pc, #432]	@ (8003674 <HAL_RCC_OscConfig+0x240>)
 80034c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034c8:	6013      	str	r3, [r2, #0]
 80034ca:	e00b      	b.n	80034e4 <HAL_RCC_OscConfig+0xb0>
 80034cc:	4b69      	ldr	r3, [pc, #420]	@ (8003674 <HAL_RCC_OscConfig+0x240>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a68      	ldr	r2, [pc, #416]	@ (8003674 <HAL_RCC_OscConfig+0x240>)
 80034d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034d6:	6013      	str	r3, [r2, #0]
 80034d8:	4b66      	ldr	r3, [pc, #408]	@ (8003674 <HAL_RCC_OscConfig+0x240>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a65      	ldr	r2, [pc, #404]	@ (8003674 <HAL_RCC_OscConfig+0x240>)
 80034de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d013      	beq.n	8003514 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ec:	f7ff f90a 	bl	8002704 <HAL_GetTick>
 80034f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034f2:	e008      	b.n	8003506 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034f4:	f7ff f906 	bl	8002704 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b64      	cmp	r3, #100	@ 0x64
 8003500:	d901      	bls.n	8003506 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e207      	b.n	8003916 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003506:	4b5b      	ldr	r3, [pc, #364]	@ (8003674 <HAL_RCC_OscConfig+0x240>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d0f0      	beq.n	80034f4 <HAL_RCC_OscConfig+0xc0>
 8003512:	e014      	b.n	800353e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003514:	f7ff f8f6 	bl	8002704 <HAL_GetTick>
 8003518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800351a:	e008      	b.n	800352e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800351c:	f7ff f8f2 	bl	8002704 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	2b64      	cmp	r3, #100	@ 0x64
 8003528:	d901      	bls.n	800352e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e1f3      	b.n	8003916 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800352e:	4b51      	ldr	r3, [pc, #324]	@ (8003674 <HAL_RCC_OscConfig+0x240>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1f0      	bne.n	800351c <HAL_RCC_OscConfig+0xe8>
 800353a:	e000      	b.n	800353e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800353c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0302 	and.w	r3, r3, #2
 8003546:	2b00      	cmp	r3, #0
 8003548:	d063      	beq.n	8003612 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800354a:	4b4a      	ldr	r3, [pc, #296]	@ (8003674 <HAL_RCC_OscConfig+0x240>)
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f003 030c 	and.w	r3, r3, #12
 8003552:	2b00      	cmp	r3, #0
 8003554:	d00b      	beq.n	800356e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003556:	4b47      	ldr	r3, [pc, #284]	@ (8003674 <HAL_RCC_OscConfig+0x240>)
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800355e:	2b08      	cmp	r3, #8
 8003560:	d11c      	bne.n	800359c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003562:	4b44      	ldr	r3, [pc, #272]	@ (8003674 <HAL_RCC_OscConfig+0x240>)
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d116      	bne.n	800359c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800356e:	4b41      	ldr	r3, [pc, #260]	@ (8003674 <HAL_RCC_OscConfig+0x240>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0302 	and.w	r3, r3, #2
 8003576:	2b00      	cmp	r3, #0
 8003578:	d005      	beq.n	8003586 <HAL_RCC_OscConfig+0x152>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	2b01      	cmp	r3, #1
 8003580:	d001      	beq.n	8003586 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e1c7      	b.n	8003916 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003586:	4b3b      	ldr	r3, [pc, #236]	@ (8003674 <HAL_RCC_OscConfig+0x240>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	00db      	lsls	r3, r3, #3
 8003594:	4937      	ldr	r1, [pc, #220]	@ (8003674 <HAL_RCC_OscConfig+0x240>)
 8003596:	4313      	orrs	r3, r2
 8003598:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800359a:	e03a      	b.n	8003612 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d020      	beq.n	80035e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035a4:	4b34      	ldr	r3, [pc, #208]	@ (8003678 <HAL_RCC_OscConfig+0x244>)
 80035a6:	2201      	movs	r2, #1
 80035a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035aa:	f7ff f8ab 	bl	8002704 <HAL_GetTick>
 80035ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035b0:	e008      	b.n	80035c4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035b2:	f7ff f8a7 	bl	8002704 <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d901      	bls.n	80035c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e1a8      	b.n	8003916 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035c4:	4b2b      	ldr	r3, [pc, #172]	@ (8003674 <HAL_RCC_OscConfig+0x240>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0302 	and.w	r3, r3, #2
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d0f0      	beq.n	80035b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035d0:	4b28      	ldr	r3, [pc, #160]	@ (8003674 <HAL_RCC_OscConfig+0x240>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	691b      	ldr	r3, [r3, #16]
 80035dc:	00db      	lsls	r3, r3, #3
 80035de:	4925      	ldr	r1, [pc, #148]	@ (8003674 <HAL_RCC_OscConfig+0x240>)
 80035e0:	4313      	orrs	r3, r2
 80035e2:	600b      	str	r3, [r1, #0]
 80035e4:	e015      	b.n	8003612 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035e6:	4b24      	ldr	r3, [pc, #144]	@ (8003678 <HAL_RCC_OscConfig+0x244>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ec:	f7ff f88a 	bl	8002704 <HAL_GetTick>
 80035f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035f2:	e008      	b.n	8003606 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035f4:	f7ff f886 	bl	8002704 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d901      	bls.n	8003606 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e187      	b.n	8003916 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003606:	4b1b      	ldr	r3, [pc, #108]	@ (8003674 <HAL_RCC_OscConfig+0x240>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d1f0      	bne.n	80035f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0308 	and.w	r3, r3, #8
 800361a:	2b00      	cmp	r3, #0
 800361c:	d036      	beq.n	800368c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	695b      	ldr	r3, [r3, #20]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d016      	beq.n	8003654 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003626:	4b15      	ldr	r3, [pc, #84]	@ (800367c <HAL_RCC_OscConfig+0x248>)
 8003628:	2201      	movs	r2, #1
 800362a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800362c:	f7ff f86a 	bl	8002704 <HAL_GetTick>
 8003630:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003632:	e008      	b.n	8003646 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003634:	f7ff f866 	bl	8002704 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	2b02      	cmp	r3, #2
 8003640:	d901      	bls.n	8003646 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e167      	b.n	8003916 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003646:	4b0b      	ldr	r3, [pc, #44]	@ (8003674 <HAL_RCC_OscConfig+0x240>)
 8003648:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	2b00      	cmp	r3, #0
 8003650:	d0f0      	beq.n	8003634 <HAL_RCC_OscConfig+0x200>
 8003652:	e01b      	b.n	800368c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003654:	4b09      	ldr	r3, [pc, #36]	@ (800367c <HAL_RCC_OscConfig+0x248>)
 8003656:	2200      	movs	r2, #0
 8003658:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800365a:	f7ff f853 	bl	8002704 <HAL_GetTick>
 800365e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003660:	e00e      	b.n	8003680 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003662:	f7ff f84f 	bl	8002704 <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	2b02      	cmp	r3, #2
 800366e:	d907      	bls.n	8003680 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e150      	b.n	8003916 <HAL_RCC_OscConfig+0x4e2>
 8003674:	40023800 	.word	0x40023800
 8003678:	42470000 	.word	0x42470000
 800367c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003680:	4b88      	ldr	r3, [pc, #544]	@ (80038a4 <HAL_RCC_OscConfig+0x470>)
 8003682:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003684:	f003 0302 	and.w	r3, r3, #2
 8003688:	2b00      	cmp	r3, #0
 800368a:	d1ea      	bne.n	8003662 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0304 	and.w	r3, r3, #4
 8003694:	2b00      	cmp	r3, #0
 8003696:	f000 8097 	beq.w	80037c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800369a:	2300      	movs	r3, #0
 800369c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800369e:	4b81      	ldr	r3, [pc, #516]	@ (80038a4 <HAL_RCC_OscConfig+0x470>)
 80036a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d10f      	bne.n	80036ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036aa:	2300      	movs	r3, #0
 80036ac:	60bb      	str	r3, [r7, #8]
 80036ae:	4b7d      	ldr	r3, [pc, #500]	@ (80038a4 <HAL_RCC_OscConfig+0x470>)
 80036b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b2:	4a7c      	ldr	r2, [pc, #496]	@ (80038a4 <HAL_RCC_OscConfig+0x470>)
 80036b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80036ba:	4b7a      	ldr	r3, [pc, #488]	@ (80038a4 <HAL_RCC_OscConfig+0x470>)
 80036bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036c2:	60bb      	str	r3, [r7, #8]
 80036c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036c6:	2301      	movs	r3, #1
 80036c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ca:	4b77      	ldr	r3, [pc, #476]	@ (80038a8 <HAL_RCC_OscConfig+0x474>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d118      	bne.n	8003708 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036d6:	4b74      	ldr	r3, [pc, #464]	@ (80038a8 <HAL_RCC_OscConfig+0x474>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a73      	ldr	r2, [pc, #460]	@ (80038a8 <HAL_RCC_OscConfig+0x474>)
 80036dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036e2:	f7ff f80f 	bl	8002704 <HAL_GetTick>
 80036e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036e8:	e008      	b.n	80036fc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036ea:	f7ff f80b 	bl	8002704 <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d901      	bls.n	80036fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80036f8:	2303      	movs	r3, #3
 80036fa:	e10c      	b.n	8003916 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036fc:	4b6a      	ldr	r3, [pc, #424]	@ (80038a8 <HAL_RCC_OscConfig+0x474>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003704:	2b00      	cmp	r3, #0
 8003706:	d0f0      	beq.n	80036ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	2b01      	cmp	r3, #1
 800370e:	d106      	bne.n	800371e <HAL_RCC_OscConfig+0x2ea>
 8003710:	4b64      	ldr	r3, [pc, #400]	@ (80038a4 <HAL_RCC_OscConfig+0x470>)
 8003712:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003714:	4a63      	ldr	r2, [pc, #396]	@ (80038a4 <HAL_RCC_OscConfig+0x470>)
 8003716:	f043 0301 	orr.w	r3, r3, #1
 800371a:	6713      	str	r3, [r2, #112]	@ 0x70
 800371c:	e01c      	b.n	8003758 <HAL_RCC_OscConfig+0x324>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	2b05      	cmp	r3, #5
 8003724:	d10c      	bne.n	8003740 <HAL_RCC_OscConfig+0x30c>
 8003726:	4b5f      	ldr	r3, [pc, #380]	@ (80038a4 <HAL_RCC_OscConfig+0x470>)
 8003728:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800372a:	4a5e      	ldr	r2, [pc, #376]	@ (80038a4 <HAL_RCC_OscConfig+0x470>)
 800372c:	f043 0304 	orr.w	r3, r3, #4
 8003730:	6713      	str	r3, [r2, #112]	@ 0x70
 8003732:	4b5c      	ldr	r3, [pc, #368]	@ (80038a4 <HAL_RCC_OscConfig+0x470>)
 8003734:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003736:	4a5b      	ldr	r2, [pc, #364]	@ (80038a4 <HAL_RCC_OscConfig+0x470>)
 8003738:	f043 0301 	orr.w	r3, r3, #1
 800373c:	6713      	str	r3, [r2, #112]	@ 0x70
 800373e:	e00b      	b.n	8003758 <HAL_RCC_OscConfig+0x324>
 8003740:	4b58      	ldr	r3, [pc, #352]	@ (80038a4 <HAL_RCC_OscConfig+0x470>)
 8003742:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003744:	4a57      	ldr	r2, [pc, #348]	@ (80038a4 <HAL_RCC_OscConfig+0x470>)
 8003746:	f023 0301 	bic.w	r3, r3, #1
 800374a:	6713      	str	r3, [r2, #112]	@ 0x70
 800374c:	4b55      	ldr	r3, [pc, #340]	@ (80038a4 <HAL_RCC_OscConfig+0x470>)
 800374e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003750:	4a54      	ldr	r2, [pc, #336]	@ (80038a4 <HAL_RCC_OscConfig+0x470>)
 8003752:	f023 0304 	bic.w	r3, r3, #4
 8003756:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d015      	beq.n	800378c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003760:	f7fe ffd0 	bl	8002704 <HAL_GetTick>
 8003764:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003766:	e00a      	b.n	800377e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003768:	f7fe ffcc 	bl	8002704 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003776:	4293      	cmp	r3, r2
 8003778:	d901      	bls.n	800377e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e0cb      	b.n	8003916 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800377e:	4b49      	ldr	r3, [pc, #292]	@ (80038a4 <HAL_RCC_OscConfig+0x470>)
 8003780:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003782:	f003 0302 	and.w	r3, r3, #2
 8003786:	2b00      	cmp	r3, #0
 8003788:	d0ee      	beq.n	8003768 <HAL_RCC_OscConfig+0x334>
 800378a:	e014      	b.n	80037b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800378c:	f7fe ffba 	bl	8002704 <HAL_GetTick>
 8003790:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003792:	e00a      	b.n	80037aa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003794:	f7fe ffb6 	bl	8002704 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d901      	bls.n	80037aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e0b5      	b.n	8003916 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037aa:	4b3e      	ldr	r3, [pc, #248]	@ (80038a4 <HAL_RCC_OscConfig+0x470>)
 80037ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ae:	f003 0302 	and.w	r3, r3, #2
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d1ee      	bne.n	8003794 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80037b6:	7dfb      	ldrb	r3, [r7, #23]
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d105      	bne.n	80037c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037bc:	4b39      	ldr	r3, [pc, #228]	@ (80038a4 <HAL_RCC_OscConfig+0x470>)
 80037be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c0:	4a38      	ldr	r2, [pc, #224]	@ (80038a4 <HAL_RCC_OscConfig+0x470>)
 80037c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037c6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	699b      	ldr	r3, [r3, #24]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	f000 80a1 	beq.w	8003914 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037d2:	4b34      	ldr	r3, [pc, #208]	@ (80038a4 <HAL_RCC_OscConfig+0x470>)
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f003 030c 	and.w	r3, r3, #12
 80037da:	2b08      	cmp	r3, #8
 80037dc:	d05c      	beq.n	8003898 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	699b      	ldr	r3, [r3, #24]
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d141      	bne.n	800386a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037e6:	4b31      	ldr	r3, [pc, #196]	@ (80038ac <HAL_RCC_OscConfig+0x478>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ec:	f7fe ff8a 	bl	8002704 <HAL_GetTick>
 80037f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037f2:	e008      	b.n	8003806 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037f4:	f7fe ff86 	bl	8002704 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d901      	bls.n	8003806 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e087      	b.n	8003916 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003806:	4b27      	ldr	r3, [pc, #156]	@ (80038a4 <HAL_RCC_OscConfig+0x470>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d1f0      	bne.n	80037f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	69da      	ldr	r2, [r3, #28]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a1b      	ldr	r3, [r3, #32]
 800381a:	431a      	orrs	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003820:	019b      	lsls	r3, r3, #6
 8003822:	431a      	orrs	r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003828:	085b      	lsrs	r3, r3, #1
 800382a:	3b01      	subs	r3, #1
 800382c:	041b      	lsls	r3, r3, #16
 800382e:	431a      	orrs	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003834:	061b      	lsls	r3, r3, #24
 8003836:	491b      	ldr	r1, [pc, #108]	@ (80038a4 <HAL_RCC_OscConfig+0x470>)
 8003838:	4313      	orrs	r3, r2
 800383a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800383c:	4b1b      	ldr	r3, [pc, #108]	@ (80038ac <HAL_RCC_OscConfig+0x478>)
 800383e:	2201      	movs	r2, #1
 8003840:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003842:	f7fe ff5f 	bl	8002704 <HAL_GetTick>
 8003846:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003848:	e008      	b.n	800385c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800384a:	f7fe ff5b 	bl	8002704 <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	2b02      	cmp	r3, #2
 8003856:	d901      	bls.n	800385c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e05c      	b.n	8003916 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800385c:	4b11      	ldr	r3, [pc, #68]	@ (80038a4 <HAL_RCC_OscConfig+0x470>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d0f0      	beq.n	800384a <HAL_RCC_OscConfig+0x416>
 8003868:	e054      	b.n	8003914 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800386a:	4b10      	ldr	r3, [pc, #64]	@ (80038ac <HAL_RCC_OscConfig+0x478>)
 800386c:	2200      	movs	r2, #0
 800386e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003870:	f7fe ff48 	bl	8002704 <HAL_GetTick>
 8003874:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003876:	e008      	b.n	800388a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003878:	f7fe ff44 	bl	8002704 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	2b02      	cmp	r3, #2
 8003884:	d901      	bls.n	800388a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e045      	b.n	8003916 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800388a:	4b06      	ldr	r3, [pc, #24]	@ (80038a4 <HAL_RCC_OscConfig+0x470>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d1f0      	bne.n	8003878 <HAL_RCC_OscConfig+0x444>
 8003896:	e03d      	b.n	8003914 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	699b      	ldr	r3, [r3, #24]
 800389c:	2b01      	cmp	r3, #1
 800389e:	d107      	bne.n	80038b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e038      	b.n	8003916 <HAL_RCC_OscConfig+0x4e2>
 80038a4:	40023800 	.word	0x40023800
 80038a8:	40007000 	.word	0x40007000
 80038ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80038b0:	4b1b      	ldr	r3, [pc, #108]	@ (8003920 <HAL_RCC_OscConfig+0x4ec>)
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	699b      	ldr	r3, [r3, #24]
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d028      	beq.n	8003910 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d121      	bne.n	8003910 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d11a      	bne.n	8003910 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038da:	68fa      	ldr	r2, [r7, #12]
 80038dc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80038e0:	4013      	ands	r3, r2
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80038e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d111      	bne.n	8003910 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038f6:	085b      	lsrs	r3, r3, #1
 80038f8:	3b01      	subs	r3, #1
 80038fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d107      	bne.n	8003910 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800390a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800390c:	429a      	cmp	r2, r3
 800390e:	d001      	beq.n	8003914 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e000      	b.n	8003916 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3718      	adds	r7, #24
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	40023800 	.word	0x40023800

08003924 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d101      	bne.n	8003938 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e0cc      	b.n	8003ad2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003938:	4b68      	ldr	r3, [pc, #416]	@ (8003adc <HAL_RCC_ClockConfig+0x1b8>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0307 	and.w	r3, r3, #7
 8003940:	683a      	ldr	r2, [r7, #0]
 8003942:	429a      	cmp	r2, r3
 8003944:	d90c      	bls.n	8003960 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003946:	4b65      	ldr	r3, [pc, #404]	@ (8003adc <HAL_RCC_ClockConfig+0x1b8>)
 8003948:	683a      	ldr	r2, [r7, #0]
 800394a:	b2d2      	uxtb	r2, r2
 800394c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800394e:	4b63      	ldr	r3, [pc, #396]	@ (8003adc <HAL_RCC_ClockConfig+0x1b8>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0307 	and.w	r3, r3, #7
 8003956:	683a      	ldr	r2, [r7, #0]
 8003958:	429a      	cmp	r2, r3
 800395a:	d001      	beq.n	8003960 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e0b8      	b.n	8003ad2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0302 	and.w	r3, r3, #2
 8003968:	2b00      	cmp	r3, #0
 800396a:	d020      	beq.n	80039ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0304 	and.w	r3, r3, #4
 8003974:	2b00      	cmp	r3, #0
 8003976:	d005      	beq.n	8003984 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003978:	4b59      	ldr	r3, [pc, #356]	@ (8003ae0 <HAL_RCC_ClockConfig+0x1bc>)
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	4a58      	ldr	r2, [pc, #352]	@ (8003ae0 <HAL_RCC_ClockConfig+0x1bc>)
 800397e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003982:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0308 	and.w	r3, r3, #8
 800398c:	2b00      	cmp	r3, #0
 800398e:	d005      	beq.n	800399c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003990:	4b53      	ldr	r3, [pc, #332]	@ (8003ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	4a52      	ldr	r2, [pc, #328]	@ (8003ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8003996:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800399a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800399c:	4b50      	ldr	r3, [pc, #320]	@ (8003ae0 <HAL_RCC_ClockConfig+0x1bc>)
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	494d      	ldr	r1, [pc, #308]	@ (8003ae0 <HAL_RCC_ClockConfig+0x1bc>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d044      	beq.n	8003a44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d107      	bne.n	80039d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039c2:	4b47      	ldr	r3, [pc, #284]	@ (8003ae0 <HAL_RCC_ClockConfig+0x1bc>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d119      	bne.n	8003a02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e07f      	b.n	8003ad2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d003      	beq.n	80039e2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039de:	2b03      	cmp	r3, #3
 80039e0:	d107      	bne.n	80039f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039e2:	4b3f      	ldr	r3, [pc, #252]	@ (8003ae0 <HAL_RCC_ClockConfig+0x1bc>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d109      	bne.n	8003a02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e06f      	b.n	8003ad2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039f2:	4b3b      	ldr	r3, [pc, #236]	@ (8003ae0 <HAL_RCC_ClockConfig+0x1bc>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0302 	and.w	r3, r3, #2
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d101      	bne.n	8003a02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e067      	b.n	8003ad2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a02:	4b37      	ldr	r3, [pc, #220]	@ (8003ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f023 0203 	bic.w	r2, r3, #3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	4934      	ldr	r1, [pc, #208]	@ (8003ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a14:	f7fe fe76 	bl	8002704 <HAL_GetTick>
 8003a18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a1a:	e00a      	b.n	8003a32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a1c:	f7fe fe72 	bl	8002704 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d901      	bls.n	8003a32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e04f      	b.n	8003ad2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a32:	4b2b      	ldr	r3, [pc, #172]	@ (8003ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f003 020c 	and.w	r2, r3, #12
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d1eb      	bne.n	8003a1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a44:	4b25      	ldr	r3, [pc, #148]	@ (8003adc <HAL_RCC_ClockConfig+0x1b8>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0307 	and.w	r3, r3, #7
 8003a4c:	683a      	ldr	r2, [r7, #0]
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d20c      	bcs.n	8003a6c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a52:	4b22      	ldr	r3, [pc, #136]	@ (8003adc <HAL_RCC_ClockConfig+0x1b8>)
 8003a54:	683a      	ldr	r2, [r7, #0]
 8003a56:	b2d2      	uxtb	r2, r2
 8003a58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a5a:	4b20      	ldr	r3, [pc, #128]	@ (8003adc <HAL_RCC_ClockConfig+0x1b8>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0307 	and.w	r3, r3, #7
 8003a62:	683a      	ldr	r2, [r7, #0]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d001      	beq.n	8003a6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e032      	b.n	8003ad2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0304 	and.w	r3, r3, #4
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d008      	beq.n	8003a8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a78:	4b19      	ldr	r3, [pc, #100]	@ (8003ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	4916      	ldr	r1, [pc, #88]	@ (8003ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0308 	and.w	r3, r3, #8
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d009      	beq.n	8003aaa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a96:	4b12      	ldr	r3, [pc, #72]	@ (8003ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	00db      	lsls	r3, r3, #3
 8003aa4:	490e      	ldr	r1, [pc, #56]	@ (8003ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003aaa:	f000 f821 	bl	8003af0 <HAL_RCC_GetSysClockFreq>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	4b0b      	ldr	r3, [pc, #44]	@ (8003ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	091b      	lsrs	r3, r3, #4
 8003ab6:	f003 030f 	and.w	r3, r3, #15
 8003aba:	490a      	ldr	r1, [pc, #40]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1c0>)
 8003abc:	5ccb      	ldrb	r3, [r1, r3]
 8003abe:	fa22 f303 	lsr.w	r3, r2, r3
 8003ac2:	4a09      	ldr	r2, [pc, #36]	@ (8003ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ac4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003ac6:	4b09      	ldr	r3, [pc, #36]	@ (8003aec <HAL_RCC_ClockConfig+0x1c8>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7fe fcb6 	bl	800243c <HAL_InitTick>

  return HAL_OK;
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3710      	adds	r7, #16
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	40023c00 	.word	0x40023c00
 8003ae0:	40023800 	.word	0x40023800
 8003ae4:	0800aae8 	.word	0x0800aae8
 8003ae8:	20000004 	.word	0x20000004
 8003aec:	20000008 	.word	0x20000008

08003af0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003af0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003af4:	b090      	sub	sp, #64	@ 0x40
 8003af6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003af8:	2300      	movs	r3, #0
 8003afa:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003afc:	2300      	movs	r3, #0
 8003afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003b00:	2300      	movs	r3, #0
 8003b02:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003b04:	2300      	movs	r3, #0
 8003b06:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b08:	4b59      	ldr	r3, [pc, #356]	@ (8003c70 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	f003 030c 	and.w	r3, r3, #12
 8003b10:	2b08      	cmp	r3, #8
 8003b12:	d00d      	beq.n	8003b30 <HAL_RCC_GetSysClockFreq+0x40>
 8003b14:	2b08      	cmp	r3, #8
 8003b16:	f200 80a1 	bhi.w	8003c5c <HAL_RCC_GetSysClockFreq+0x16c>
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d002      	beq.n	8003b24 <HAL_RCC_GetSysClockFreq+0x34>
 8003b1e:	2b04      	cmp	r3, #4
 8003b20:	d003      	beq.n	8003b2a <HAL_RCC_GetSysClockFreq+0x3a>
 8003b22:	e09b      	b.n	8003c5c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b24:	4b53      	ldr	r3, [pc, #332]	@ (8003c74 <HAL_RCC_GetSysClockFreq+0x184>)
 8003b26:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003b28:	e09b      	b.n	8003c62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b2a:	4b53      	ldr	r3, [pc, #332]	@ (8003c78 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b2c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003b2e:	e098      	b.n	8003c62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b30:	4b4f      	ldr	r3, [pc, #316]	@ (8003c70 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b38:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b3a:	4b4d      	ldr	r3, [pc, #308]	@ (8003c70 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d028      	beq.n	8003b98 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b46:	4b4a      	ldr	r3, [pc, #296]	@ (8003c70 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	099b      	lsrs	r3, r3, #6
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	623b      	str	r3, [r7, #32]
 8003b50:	627a      	str	r2, [r7, #36]	@ 0x24
 8003b52:	6a3b      	ldr	r3, [r7, #32]
 8003b54:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003b58:	2100      	movs	r1, #0
 8003b5a:	4b47      	ldr	r3, [pc, #284]	@ (8003c78 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b5c:	fb03 f201 	mul.w	r2, r3, r1
 8003b60:	2300      	movs	r3, #0
 8003b62:	fb00 f303 	mul.w	r3, r0, r3
 8003b66:	4413      	add	r3, r2
 8003b68:	4a43      	ldr	r2, [pc, #268]	@ (8003c78 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b6a:	fba0 1202 	umull	r1, r2, r0, r2
 8003b6e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b70:	460a      	mov	r2, r1
 8003b72:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003b74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b76:	4413      	add	r3, r2
 8003b78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	61bb      	str	r3, [r7, #24]
 8003b80:	61fa      	str	r2, [r7, #28]
 8003b82:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b86:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003b8a:	f7fd f835 	bl	8000bf8 <__aeabi_uldivmod>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	460b      	mov	r3, r1
 8003b92:	4613      	mov	r3, r2
 8003b94:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b96:	e053      	b.n	8003c40 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b98:	4b35      	ldr	r3, [pc, #212]	@ (8003c70 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	099b      	lsrs	r3, r3, #6
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	613b      	str	r3, [r7, #16]
 8003ba2:	617a      	str	r2, [r7, #20]
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003baa:	f04f 0b00 	mov.w	fp, #0
 8003bae:	4652      	mov	r2, sl
 8003bb0:	465b      	mov	r3, fp
 8003bb2:	f04f 0000 	mov.w	r0, #0
 8003bb6:	f04f 0100 	mov.w	r1, #0
 8003bba:	0159      	lsls	r1, r3, #5
 8003bbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bc0:	0150      	lsls	r0, r2, #5
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	ebb2 080a 	subs.w	r8, r2, sl
 8003bca:	eb63 090b 	sbc.w	r9, r3, fp
 8003bce:	f04f 0200 	mov.w	r2, #0
 8003bd2:	f04f 0300 	mov.w	r3, #0
 8003bd6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003bda:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003bde:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003be2:	ebb2 0408 	subs.w	r4, r2, r8
 8003be6:	eb63 0509 	sbc.w	r5, r3, r9
 8003bea:	f04f 0200 	mov.w	r2, #0
 8003bee:	f04f 0300 	mov.w	r3, #0
 8003bf2:	00eb      	lsls	r3, r5, #3
 8003bf4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bf8:	00e2      	lsls	r2, r4, #3
 8003bfa:	4614      	mov	r4, r2
 8003bfc:	461d      	mov	r5, r3
 8003bfe:	eb14 030a 	adds.w	r3, r4, sl
 8003c02:	603b      	str	r3, [r7, #0]
 8003c04:	eb45 030b 	adc.w	r3, r5, fp
 8003c08:	607b      	str	r3, [r7, #4]
 8003c0a:	f04f 0200 	mov.w	r2, #0
 8003c0e:	f04f 0300 	mov.w	r3, #0
 8003c12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c16:	4629      	mov	r1, r5
 8003c18:	028b      	lsls	r3, r1, #10
 8003c1a:	4621      	mov	r1, r4
 8003c1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c20:	4621      	mov	r1, r4
 8003c22:	028a      	lsls	r2, r1, #10
 8003c24:	4610      	mov	r0, r2
 8003c26:	4619      	mov	r1, r3
 8003c28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	60bb      	str	r3, [r7, #8]
 8003c2e:	60fa      	str	r2, [r7, #12]
 8003c30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c34:	f7fc ffe0 	bl	8000bf8 <__aeabi_uldivmod>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	460b      	mov	r3, r1
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003c40:	4b0b      	ldr	r3, [pc, #44]	@ (8003c70 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	0c1b      	lsrs	r3, r3, #16
 8003c46:	f003 0303 	and.w	r3, r3, #3
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	005b      	lsls	r3, r3, #1
 8003c4e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003c50:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c58:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003c5a:	e002      	b.n	8003c62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c5c:	4b05      	ldr	r3, [pc, #20]	@ (8003c74 <HAL_RCC_GetSysClockFreq+0x184>)
 8003c5e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003c60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3740      	adds	r7, #64	@ 0x40
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c6e:	bf00      	nop
 8003c70:	40023800 	.word	0x40023800
 8003c74:	00f42400 	.word	0x00f42400
 8003c78:	017d7840 	.word	0x017d7840

08003c7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c80:	4b03      	ldr	r3, [pc, #12]	@ (8003c90 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c82:	681b      	ldr	r3, [r3, #0]
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr
 8003c8e:	bf00      	nop
 8003c90:	20000004 	.word	0x20000004

08003c94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c98:	f7ff fff0 	bl	8003c7c <HAL_RCC_GetHCLKFreq>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	4b05      	ldr	r3, [pc, #20]	@ (8003cb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	0a9b      	lsrs	r3, r3, #10
 8003ca4:	f003 0307 	and.w	r3, r3, #7
 8003ca8:	4903      	ldr	r1, [pc, #12]	@ (8003cb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003caa:	5ccb      	ldrb	r3, [r1, r3]
 8003cac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	40023800 	.word	0x40023800
 8003cb8:	0800aaf8 	.word	0x0800aaf8

08003cbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003cc0:	f7ff ffdc 	bl	8003c7c <HAL_RCC_GetHCLKFreq>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	4b05      	ldr	r3, [pc, #20]	@ (8003cdc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	0b5b      	lsrs	r3, r3, #13
 8003ccc:	f003 0307 	and.w	r3, r3, #7
 8003cd0:	4903      	ldr	r1, [pc, #12]	@ (8003ce0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cd2:	5ccb      	ldrb	r3, [r1, r3]
 8003cd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	40023800 	.word	0x40023800
 8003ce0:	0800aaf8 	.word	0x0800aaf8

08003ce4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	220f      	movs	r2, #15
 8003cf2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003cf4:	4b12      	ldr	r3, [pc, #72]	@ (8003d40 <HAL_RCC_GetClockConfig+0x5c>)
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	f003 0203 	and.w	r2, r3, #3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003d00:	4b0f      	ldr	r3, [pc, #60]	@ (8003d40 <HAL_RCC_GetClockConfig+0x5c>)
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003d0c:	4b0c      	ldr	r3, [pc, #48]	@ (8003d40 <HAL_RCC_GetClockConfig+0x5c>)
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003d18:	4b09      	ldr	r3, [pc, #36]	@ (8003d40 <HAL_RCC_GetClockConfig+0x5c>)
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	08db      	lsrs	r3, r3, #3
 8003d1e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003d26:	4b07      	ldr	r3, [pc, #28]	@ (8003d44 <HAL_RCC_GetClockConfig+0x60>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0207 	and.w	r2, r3, #7
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	601a      	str	r2, [r3, #0]
}
 8003d32:	bf00      	nop
 8003d34:	370c      	adds	r7, #12
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	40023800 	.word	0x40023800
 8003d44:	40023c00 	.word	0x40023c00

08003d48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d101      	bne.n	8003d5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e041      	b.n	8003dde <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d106      	bne.n	8003d74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f7fe fa72 	bl	8002258 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2202      	movs	r2, #2
 8003d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	3304      	adds	r3, #4
 8003d84:	4619      	mov	r1, r3
 8003d86:	4610      	mov	r0, r2
 8003d88:	f000 fa70 	bl	800426c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3708      	adds	r7, #8
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
	...

08003de8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b085      	sub	sp, #20
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d001      	beq.n	8003e00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e044      	b.n	8003e8a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2202      	movs	r2, #2
 8003e04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68da      	ldr	r2, [r3, #12]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f042 0201 	orr.w	r2, r2, #1
 8003e16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a1e      	ldr	r2, [pc, #120]	@ (8003e98 <HAL_TIM_Base_Start_IT+0xb0>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d018      	beq.n	8003e54 <HAL_TIM_Base_Start_IT+0x6c>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e2a:	d013      	beq.n	8003e54 <HAL_TIM_Base_Start_IT+0x6c>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a1a      	ldr	r2, [pc, #104]	@ (8003e9c <HAL_TIM_Base_Start_IT+0xb4>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d00e      	beq.n	8003e54 <HAL_TIM_Base_Start_IT+0x6c>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a19      	ldr	r2, [pc, #100]	@ (8003ea0 <HAL_TIM_Base_Start_IT+0xb8>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d009      	beq.n	8003e54 <HAL_TIM_Base_Start_IT+0x6c>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a17      	ldr	r2, [pc, #92]	@ (8003ea4 <HAL_TIM_Base_Start_IT+0xbc>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d004      	beq.n	8003e54 <HAL_TIM_Base_Start_IT+0x6c>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a16      	ldr	r2, [pc, #88]	@ (8003ea8 <HAL_TIM_Base_Start_IT+0xc0>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d111      	bne.n	8003e78 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f003 0307 	and.w	r3, r3, #7
 8003e5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2b06      	cmp	r3, #6
 8003e64:	d010      	beq.n	8003e88 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f042 0201 	orr.w	r2, r2, #1
 8003e74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e76:	e007      	b.n	8003e88 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f042 0201 	orr.w	r2, r2, #1
 8003e86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e88:	2300      	movs	r3, #0
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3714      	adds	r7, #20
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	40010000 	.word	0x40010000
 8003e9c:	40000400 	.word	0x40000400
 8003ea0:	40000800 	.word	0x40000800
 8003ea4:	40000c00 	.word	0x40000c00
 8003ea8:	40014000 	.word	0x40014000

08003eac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d020      	beq.n	8003f10 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f003 0302 	and.w	r3, r3, #2
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d01b      	beq.n	8003f10 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f06f 0202 	mvn.w	r2, #2
 8003ee0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	699b      	ldr	r3, [r3, #24]
 8003eee:	f003 0303 	and.w	r3, r3, #3
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d003      	beq.n	8003efe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 f999 	bl	800422e <HAL_TIM_IC_CaptureCallback>
 8003efc:	e005      	b.n	8003f0a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 f98b 	bl	800421a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f000 f99c 	bl	8004242 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	f003 0304 	and.w	r3, r3, #4
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d020      	beq.n	8003f5c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f003 0304 	and.w	r3, r3, #4
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d01b      	beq.n	8003f5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f06f 0204 	mvn.w	r2, #4
 8003f2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2202      	movs	r2, #2
 8003f32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d003      	beq.n	8003f4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f000 f973 	bl	800422e <HAL_TIM_IC_CaptureCallback>
 8003f48:	e005      	b.n	8003f56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f000 f965 	bl	800421a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f000 f976 	bl	8004242 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	f003 0308 	and.w	r3, r3, #8
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d020      	beq.n	8003fa8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f003 0308 	and.w	r3, r3, #8
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d01b      	beq.n	8003fa8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f06f 0208 	mvn.w	r2, #8
 8003f78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2204      	movs	r2, #4
 8003f7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	69db      	ldr	r3, [r3, #28]
 8003f86:	f003 0303 	and.w	r3, r3, #3
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d003      	beq.n	8003f96 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 f94d 	bl	800422e <HAL_TIM_IC_CaptureCallback>
 8003f94:	e005      	b.n	8003fa2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 f93f 	bl	800421a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f000 f950 	bl	8004242 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	f003 0310 	and.w	r3, r3, #16
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d020      	beq.n	8003ff4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f003 0310 	and.w	r3, r3, #16
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d01b      	beq.n	8003ff4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f06f 0210 	mvn.w	r2, #16
 8003fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2208      	movs	r2, #8
 8003fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	69db      	ldr	r3, [r3, #28]
 8003fd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d003      	beq.n	8003fe2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f000 f927 	bl	800422e <HAL_TIM_IC_CaptureCallback>
 8003fe0:	e005      	b.n	8003fee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 f919 	bl	800421a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f000 f92a 	bl	8004242 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	f003 0301 	and.w	r3, r3, #1
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d00c      	beq.n	8004018 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f003 0301 	and.w	r3, r3, #1
 8004004:	2b00      	cmp	r3, #0
 8004006:	d007      	beq.n	8004018 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f06f 0201 	mvn.w	r2, #1
 8004010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f7fe f8dc 	bl	80021d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00c      	beq.n	800403c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004028:	2b00      	cmp	r3, #0
 800402a:	d007      	beq.n	800403c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 fab6 	bl	80045a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004042:	2b00      	cmp	r3, #0
 8004044:	d00c      	beq.n	8004060 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800404c:	2b00      	cmp	r3, #0
 800404e:	d007      	beq.n	8004060 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004058:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 f8fb 	bl	8004256 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	f003 0320 	and.w	r3, r3, #32
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00c      	beq.n	8004084 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f003 0320 	and.w	r3, r3, #32
 8004070:	2b00      	cmp	r3, #0
 8004072:	d007      	beq.n	8004084 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f06f 0220 	mvn.w	r2, #32
 800407c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 fa88 	bl	8004594 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004084:	bf00      	nop
 8004086:	3710      	adds	r7, #16
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}

0800408c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004096:	2300      	movs	r3, #0
 8004098:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d101      	bne.n	80040a8 <HAL_TIM_ConfigClockSource+0x1c>
 80040a4:	2302      	movs	r3, #2
 80040a6:	e0b4      	b.n	8004212 <HAL_TIM_ConfigClockSource+0x186>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2202      	movs	r2, #2
 80040b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80040c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80040ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68ba      	ldr	r2, [r7, #8]
 80040d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040e0:	d03e      	beq.n	8004160 <HAL_TIM_ConfigClockSource+0xd4>
 80040e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040e6:	f200 8087 	bhi.w	80041f8 <HAL_TIM_ConfigClockSource+0x16c>
 80040ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040ee:	f000 8086 	beq.w	80041fe <HAL_TIM_ConfigClockSource+0x172>
 80040f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040f6:	d87f      	bhi.n	80041f8 <HAL_TIM_ConfigClockSource+0x16c>
 80040f8:	2b70      	cmp	r3, #112	@ 0x70
 80040fa:	d01a      	beq.n	8004132 <HAL_TIM_ConfigClockSource+0xa6>
 80040fc:	2b70      	cmp	r3, #112	@ 0x70
 80040fe:	d87b      	bhi.n	80041f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004100:	2b60      	cmp	r3, #96	@ 0x60
 8004102:	d050      	beq.n	80041a6 <HAL_TIM_ConfigClockSource+0x11a>
 8004104:	2b60      	cmp	r3, #96	@ 0x60
 8004106:	d877      	bhi.n	80041f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004108:	2b50      	cmp	r3, #80	@ 0x50
 800410a:	d03c      	beq.n	8004186 <HAL_TIM_ConfigClockSource+0xfa>
 800410c:	2b50      	cmp	r3, #80	@ 0x50
 800410e:	d873      	bhi.n	80041f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004110:	2b40      	cmp	r3, #64	@ 0x40
 8004112:	d058      	beq.n	80041c6 <HAL_TIM_ConfigClockSource+0x13a>
 8004114:	2b40      	cmp	r3, #64	@ 0x40
 8004116:	d86f      	bhi.n	80041f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004118:	2b30      	cmp	r3, #48	@ 0x30
 800411a:	d064      	beq.n	80041e6 <HAL_TIM_ConfigClockSource+0x15a>
 800411c:	2b30      	cmp	r3, #48	@ 0x30
 800411e:	d86b      	bhi.n	80041f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004120:	2b20      	cmp	r3, #32
 8004122:	d060      	beq.n	80041e6 <HAL_TIM_ConfigClockSource+0x15a>
 8004124:	2b20      	cmp	r3, #32
 8004126:	d867      	bhi.n	80041f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004128:	2b00      	cmp	r3, #0
 800412a:	d05c      	beq.n	80041e6 <HAL_TIM_ConfigClockSource+0x15a>
 800412c:	2b10      	cmp	r3, #16
 800412e:	d05a      	beq.n	80041e6 <HAL_TIM_ConfigClockSource+0x15a>
 8004130:	e062      	b.n	80041f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004142:	f000 f999 	bl	8004478 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004154:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	68ba      	ldr	r2, [r7, #8]
 800415c:	609a      	str	r2, [r3, #8]
      break;
 800415e:	e04f      	b.n	8004200 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004170:	f000 f982 	bl	8004478 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	689a      	ldr	r2, [r3, #8]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004182:	609a      	str	r2, [r3, #8]
      break;
 8004184:	e03c      	b.n	8004200 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004192:	461a      	mov	r2, r3
 8004194:	f000 f8f6 	bl	8004384 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	2150      	movs	r1, #80	@ 0x50
 800419e:	4618      	mov	r0, r3
 80041a0:	f000 f94f 	bl	8004442 <TIM_ITRx_SetConfig>
      break;
 80041a4:	e02c      	b.n	8004200 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80041b2:	461a      	mov	r2, r3
 80041b4:	f000 f915 	bl	80043e2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	2160      	movs	r1, #96	@ 0x60
 80041be:	4618      	mov	r0, r3
 80041c0:	f000 f93f 	bl	8004442 <TIM_ITRx_SetConfig>
      break;
 80041c4:	e01c      	b.n	8004200 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041d2:	461a      	mov	r2, r3
 80041d4:	f000 f8d6 	bl	8004384 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2140      	movs	r1, #64	@ 0x40
 80041de:	4618      	mov	r0, r3
 80041e0:	f000 f92f 	bl	8004442 <TIM_ITRx_SetConfig>
      break;
 80041e4:	e00c      	b.n	8004200 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4619      	mov	r1, r3
 80041f0:	4610      	mov	r0, r2
 80041f2:	f000 f926 	bl	8004442 <TIM_ITRx_SetConfig>
      break;
 80041f6:	e003      	b.n	8004200 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	73fb      	strb	r3, [r7, #15]
      break;
 80041fc:	e000      	b.n	8004200 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80041fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004210:	7bfb      	ldrb	r3, [r7, #15]
}
 8004212:	4618      	mov	r0, r3
 8004214:	3710      	adds	r7, #16
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}

0800421a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800421a:	b480      	push	{r7}
 800421c:	b083      	sub	sp, #12
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004222:	bf00      	nop
 8004224:	370c      	adds	r7, #12
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr

0800422e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800422e:	b480      	push	{r7}
 8004230:	b083      	sub	sp, #12
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004236:	bf00      	nop
 8004238:	370c      	adds	r7, #12
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr

08004242 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004242:	b480      	push	{r7}
 8004244:	b083      	sub	sp, #12
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800424a:	bf00      	nop
 800424c:	370c      	adds	r7, #12
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr

08004256 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004256:	b480      	push	{r7}
 8004258:	b083      	sub	sp, #12
 800425a:	af00      	add	r7, sp, #0
 800425c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800425e:	bf00      	nop
 8004260:	370c      	adds	r7, #12
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr
	...

0800426c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800426c:	b480      	push	{r7}
 800426e:	b085      	sub	sp, #20
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4a3a      	ldr	r2, [pc, #232]	@ (8004368 <TIM_Base_SetConfig+0xfc>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d00f      	beq.n	80042a4 <TIM_Base_SetConfig+0x38>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800428a:	d00b      	beq.n	80042a4 <TIM_Base_SetConfig+0x38>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4a37      	ldr	r2, [pc, #220]	@ (800436c <TIM_Base_SetConfig+0x100>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d007      	beq.n	80042a4 <TIM_Base_SetConfig+0x38>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4a36      	ldr	r2, [pc, #216]	@ (8004370 <TIM_Base_SetConfig+0x104>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d003      	beq.n	80042a4 <TIM_Base_SetConfig+0x38>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a35      	ldr	r2, [pc, #212]	@ (8004374 <TIM_Base_SetConfig+0x108>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d108      	bne.n	80042b6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	68fa      	ldr	r2, [r7, #12]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a2b      	ldr	r2, [pc, #172]	@ (8004368 <TIM_Base_SetConfig+0xfc>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d01b      	beq.n	80042f6 <TIM_Base_SetConfig+0x8a>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042c4:	d017      	beq.n	80042f6 <TIM_Base_SetConfig+0x8a>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a28      	ldr	r2, [pc, #160]	@ (800436c <TIM_Base_SetConfig+0x100>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d013      	beq.n	80042f6 <TIM_Base_SetConfig+0x8a>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a27      	ldr	r2, [pc, #156]	@ (8004370 <TIM_Base_SetConfig+0x104>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d00f      	beq.n	80042f6 <TIM_Base_SetConfig+0x8a>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a26      	ldr	r2, [pc, #152]	@ (8004374 <TIM_Base_SetConfig+0x108>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d00b      	beq.n	80042f6 <TIM_Base_SetConfig+0x8a>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a25      	ldr	r2, [pc, #148]	@ (8004378 <TIM_Base_SetConfig+0x10c>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d007      	beq.n	80042f6 <TIM_Base_SetConfig+0x8a>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a24      	ldr	r2, [pc, #144]	@ (800437c <TIM_Base_SetConfig+0x110>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d003      	beq.n	80042f6 <TIM_Base_SetConfig+0x8a>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a23      	ldr	r2, [pc, #140]	@ (8004380 <TIM_Base_SetConfig+0x114>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d108      	bne.n	8004308 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	68fa      	ldr	r2, [r7, #12]
 8004304:	4313      	orrs	r3, r2
 8004306:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	4313      	orrs	r3, r2
 8004314:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	68fa      	ldr	r2, [r7, #12]
 800431a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	689a      	ldr	r2, [r3, #8]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	4a0e      	ldr	r2, [pc, #56]	@ (8004368 <TIM_Base_SetConfig+0xfc>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d103      	bne.n	800433c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	691a      	ldr	r2, [r3, #16]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	691b      	ldr	r3, [r3, #16]
 8004346:	f003 0301 	and.w	r3, r3, #1
 800434a:	2b01      	cmp	r3, #1
 800434c:	d105      	bne.n	800435a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	f023 0201 	bic.w	r2, r3, #1
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	611a      	str	r2, [r3, #16]
  }
}
 800435a:	bf00      	nop
 800435c:	3714      	adds	r7, #20
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr
 8004366:	bf00      	nop
 8004368:	40010000 	.word	0x40010000
 800436c:	40000400 	.word	0x40000400
 8004370:	40000800 	.word	0x40000800
 8004374:	40000c00 	.word	0x40000c00
 8004378:	40014000 	.word	0x40014000
 800437c:	40014400 	.word	0x40014400
 8004380:	40014800 	.word	0x40014800

08004384 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004384:	b480      	push	{r7}
 8004386:	b087      	sub	sp, #28
 8004388:	af00      	add	r7, sp, #0
 800438a:	60f8      	str	r0, [r7, #12]
 800438c:	60b9      	str	r1, [r7, #8]
 800438e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6a1b      	ldr	r3, [r3, #32]
 8004394:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6a1b      	ldr	r3, [r3, #32]
 800439a:	f023 0201 	bic.w	r2, r3, #1
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80043ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	011b      	lsls	r3, r3, #4
 80043b4:	693a      	ldr	r2, [r7, #16]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	f023 030a 	bic.w	r3, r3, #10
 80043c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80043c2:	697a      	ldr	r2, [r7, #20]
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	693a      	ldr	r2, [r7, #16]
 80043ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	697a      	ldr	r2, [r7, #20]
 80043d4:	621a      	str	r2, [r3, #32]
}
 80043d6:	bf00      	nop
 80043d8:	371c      	adds	r7, #28
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr

080043e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043e2:	b480      	push	{r7}
 80043e4:	b087      	sub	sp, #28
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	60f8      	str	r0, [r7, #12]
 80043ea:	60b9      	str	r1, [r7, #8]
 80043ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	6a1b      	ldr	r3, [r3, #32]
 80043f2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6a1b      	ldr	r3, [r3, #32]
 80043f8:	f023 0210 	bic.w	r2, r3, #16
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	699b      	ldr	r3, [r3, #24]
 8004404:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800440c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	031b      	lsls	r3, r3, #12
 8004412:	693a      	ldr	r2, [r7, #16]
 8004414:	4313      	orrs	r3, r2
 8004416:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800441e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	011b      	lsls	r3, r3, #4
 8004424:	697a      	ldr	r2, [r7, #20]
 8004426:	4313      	orrs	r3, r2
 8004428:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	693a      	ldr	r2, [r7, #16]
 800442e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	697a      	ldr	r2, [r7, #20]
 8004434:	621a      	str	r2, [r3, #32]
}
 8004436:	bf00      	nop
 8004438:	371c      	adds	r7, #28
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr

08004442 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004442:	b480      	push	{r7}
 8004444:	b085      	sub	sp, #20
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
 800444a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004458:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800445a:	683a      	ldr	r2, [r7, #0]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	4313      	orrs	r3, r2
 8004460:	f043 0307 	orr.w	r3, r3, #7
 8004464:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	68fa      	ldr	r2, [r7, #12]
 800446a:	609a      	str	r2, [r3, #8]
}
 800446c:	bf00      	nop
 800446e:	3714      	adds	r7, #20
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004478:	b480      	push	{r7}
 800447a:	b087      	sub	sp, #28
 800447c:	af00      	add	r7, sp, #0
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	60b9      	str	r1, [r7, #8]
 8004482:	607a      	str	r2, [r7, #4]
 8004484:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004492:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	021a      	lsls	r2, r3, #8
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	431a      	orrs	r2, r3
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	4313      	orrs	r3, r2
 80044a0:	697a      	ldr	r2, [r7, #20]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	697a      	ldr	r2, [r7, #20]
 80044aa:	609a      	str	r2, [r3, #8]
}
 80044ac:	bf00      	nop
 80044ae:	371c      	adds	r7, #28
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b085      	sub	sp, #20
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d101      	bne.n	80044d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044cc:	2302      	movs	r3, #2
 80044ce:	e050      	b.n	8004572 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2202      	movs	r2, #2
 80044dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	4313      	orrs	r3, r2
 8004500:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68fa      	ldr	r2, [r7, #12]
 8004508:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a1c      	ldr	r2, [pc, #112]	@ (8004580 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d018      	beq.n	8004546 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800451c:	d013      	beq.n	8004546 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a18      	ldr	r2, [pc, #96]	@ (8004584 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d00e      	beq.n	8004546 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a16      	ldr	r2, [pc, #88]	@ (8004588 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d009      	beq.n	8004546 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a15      	ldr	r2, [pc, #84]	@ (800458c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d004      	beq.n	8004546 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a13      	ldr	r2, [pc, #76]	@ (8004590 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d10c      	bne.n	8004560 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800454c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	68ba      	ldr	r2, [r7, #8]
 8004554:	4313      	orrs	r3, r2
 8004556:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	68ba      	ldr	r2, [r7, #8]
 800455e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004570:	2300      	movs	r3, #0
}
 8004572:	4618      	mov	r0, r3
 8004574:	3714      	adds	r7, #20
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr
 800457e:	bf00      	nop
 8004580:	40010000 	.word	0x40010000
 8004584:	40000400 	.word	0x40000400
 8004588:	40000800 	.word	0x40000800
 800458c:	40000c00 	.word	0x40000c00
 8004590:	40014000 	.word	0x40014000

08004594 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004594:	b480      	push	{r7}
 8004596:	b083      	sub	sp, #12
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800459c:	bf00      	nop
 800459e:	370c      	adds	r7, #12
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr

080045a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b083      	sub	sp, #12
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045b0:	bf00      	nop
 80045b2:	370c      	adds	r7, #12
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr

080045bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b082      	sub	sp, #8
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d101      	bne.n	80045ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e042      	b.n	8004654 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d106      	bne.n	80045e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f7fd fe74 	bl	80022d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2224      	movs	r2, #36	@ 0x24
 80045ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68da      	ldr	r2, [r3, #12]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80045fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f000 fdc1 	bl	8005188 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	691a      	ldr	r2, [r3, #16]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004614:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	695a      	ldr	r2, [r3, #20]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004624:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	68da      	ldr	r2, [r3, #12]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004634:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2220      	movs	r2, #32
 8004640:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2220      	movs	r2, #32
 8004648:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004652:	2300      	movs	r3, #0
}
 8004654:	4618      	mov	r0, r3
 8004656:	3708      	adds	r7, #8
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b08c      	sub	sp, #48	@ 0x30
 8004660:	af00      	add	r7, sp, #0
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	60b9      	str	r1, [r7, #8]
 8004666:	4613      	mov	r3, r2
 8004668:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004670:	b2db      	uxtb	r3, r3
 8004672:	2b20      	cmp	r3, #32
 8004674:	d156      	bne.n	8004724 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d002      	beq.n	8004682 <HAL_UART_Transmit_DMA+0x26>
 800467c:	88fb      	ldrh	r3, [r7, #6]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d101      	bne.n	8004686 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e04f      	b.n	8004726 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8004686:	68ba      	ldr	r2, [r7, #8]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	88fa      	ldrh	r2, [r7, #6]
 8004690:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	88fa      	ldrh	r2, [r7, #6]
 8004696:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2200      	movs	r2, #0
 800469c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2221      	movs	r2, #33	@ 0x21
 80046a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046aa:	4a21      	ldr	r2, [pc, #132]	@ (8004730 <HAL_UART_Transmit_DMA+0xd4>)
 80046ac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046b2:	4a20      	ldr	r2, [pc, #128]	@ (8004734 <HAL_UART_Transmit_DMA+0xd8>)
 80046b4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046ba:	4a1f      	ldr	r2, [pc, #124]	@ (8004738 <HAL_UART_Transmit_DMA+0xdc>)
 80046bc:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046c2:	2200      	movs	r2, #0
 80046c4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80046c6:	f107 0308 	add.w	r3, r7, #8
 80046ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80046d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046d2:	6819      	ldr	r1, [r3, #0]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	3304      	adds	r3, #4
 80046da:	461a      	mov	r2, r3
 80046dc:	88fb      	ldrh	r3, [r7, #6]
 80046de:	f7fe f9d1 	bl	8002a84 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80046ea:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	3314      	adds	r3, #20
 80046f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	e853 3f00 	ldrex	r3, [r3]
 80046fa:	617b      	str	r3, [r7, #20]
   return(result);
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004702:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	3314      	adds	r3, #20
 800470a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800470c:	627a      	str	r2, [r7, #36]	@ 0x24
 800470e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004710:	6a39      	ldr	r1, [r7, #32]
 8004712:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004714:	e841 2300 	strex	r3, r2, [r1]
 8004718:	61fb      	str	r3, [r7, #28]
   return(result);
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d1e5      	bne.n	80046ec <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8004720:	2300      	movs	r3, #0
 8004722:	e000      	b.n	8004726 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8004724:	2302      	movs	r3, #2
  }
}
 8004726:	4618      	mov	r0, r3
 8004728:	3730      	adds	r7, #48	@ 0x30
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	08004cb5 	.word	0x08004cb5
 8004734:	08004d4f 	.word	0x08004d4f
 8004738:	08004d6b 	.word	0x08004d6b

0800473c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b0ba      	sub	sp, #232	@ 0xe8
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	695b      	ldr	r3, [r3, #20]
 800475e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004762:	2300      	movs	r3, #0
 8004764:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004768:	2300      	movs	r3, #0
 800476a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800476e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004772:	f003 030f 	and.w	r3, r3, #15
 8004776:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800477a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800477e:	2b00      	cmp	r3, #0
 8004780:	d10f      	bne.n	80047a2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004786:	f003 0320 	and.w	r3, r3, #32
 800478a:	2b00      	cmp	r3, #0
 800478c:	d009      	beq.n	80047a2 <HAL_UART_IRQHandler+0x66>
 800478e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004792:	f003 0320 	and.w	r3, r3, #32
 8004796:	2b00      	cmp	r3, #0
 8004798:	d003      	beq.n	80047a2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f000 fc36 	bl	800500c <UART_Receive_IT>
      return;
 80047a0:	e25b      	b.n	8004c5a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80047a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	f000 80de 	beq.w	8004968 <HAL_UART_IRQHandler+0x22c>
 80047ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80047b0:	f003 0301 	and.w	r3, r3, #1
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d106      	bne.n	80047c6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80047b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047bc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	f000 80d1 	beq.w	8004968 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80047c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047ca:	f003 0301 	and.w	r3, r3, #1
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d00b      	beq.n	80047ea <HAL_UART_IRQHandler+0xae>
 80047d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d005      	beq.n	80047ea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047e2:	f043 0201 	orr.w	r2, r3, #1
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80047ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047ee:	f003 0304 	and.w	r3, r3, #4
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d00b      	beq.n	800480e <HAL_UART_IRQHandler+0xd2>
 80047f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80047fa:	f003 0301 	and.w	r3, r3, #1
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d005      	beq.n	800480e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004806:	f043 0202 	orr.w	r2, r3, #2
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800480e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004812:	f003 0302 	and.w	r3, r3, #2
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00b      	beq.n	8004832 <HAL_UART_IRQHandler+0xf6>
 800481a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800481e:	f003 0301 	and.w	r3, r3, #1
 8004822:	2b00      	cmp	r3, #0
 8004824:	d005      	beq.n	8004832 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800482a:	f043 0204 	orr.w	r2, r3, #4
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004836:	f003 0308 	and.w	r3, r3, #8
 800483a:	2b00      	cmp	r3, #0
 800483c:	d011      	beq.n	8004862 <HAL_UART_IRQHandler+0x126>
 800483e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004842:	f003 0320 	and.w	r3, r3, #32
 8004846:	2b00      	cmp	r3, #0
 8004848:	d105      	bne.n	8004856 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800484a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800484e:	f003 0301 	and.w	r3, r3, #1
 8004852:	2b00      	cmp	r3, #0
 8004854:	d005      	beq.n	8004862 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800485a:	f043 0208 	orr.w	r2, r3, #8
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004866:	2b00      	cmp	r3, #0
 8004868:	f000 81f2 	beq.w	8004c50 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800486c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004870:	f003 0320 	and.w	r3, r3, #32
 8004874:	2b00      	cmp	r3, #0
 8004876:	d008      	beq.n	800488a <HAL_UART_IRQHandler+0x14e>
 8004878:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800487c:	f003 0320 	and.w	r3, r3, #32
 8004880:	2b00      	cmp	r3, #0
 8004882:	d002      	beq.n	800488a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f000 fbc1 	bl	800500c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	695b      	ldr	r3, [r3, #20]
 8004890:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004894:	2b40      	cmp	r3, #64	@ 0x40
 8004896:	bf0c      	ite	eq
 8004898:	2301      	moveq	r3, #1
 800489a:	2300      	movne	r3, #0
 800489c:	b2db      	uxtb	r3, r3
 800489e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048a6:	f003 0308 	and.w	r3, r3, #8
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d103      	bne.n	80048b6 <HAL_UART_IRQHandler+0x17a>
 80048ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d04f      	beq.n	8004956 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 fac9 	bl	8004e4e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	695b      	ldr	r3, [r3, #20]
 80048c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048c6:	2b40      	cmp	r3, #64	@ 0x40
 80048c8:	d141      	bne.n	800494e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	3314      	adds	r3, #20
 80048d0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80048d8:	e853 3f00 	ldrex	r3, [r3]
 80048dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80048e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80048e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80048e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	3314      	adds	r3, #20
 80048f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80048f6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80048fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004902:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004906:	e841 2300 	strex	r3, r2, [r1]
 800490a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800490e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d1d9      	bne.n	80048ca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800491a:	2b00      	cmp	r3, #0
 800491c:	d013      	beq.n	8004946 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004922:	4a7e      	ldr	r2, [pc, #504]	@ (8004b1c <HAL_UART_IRQHandler+0x3e0>)
 8004924:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800492a:	4618      	mov	r0, r3
 800492c:	f7fe f972 	bl	8002c14 <HAL_DMA_Abort_IT>
 8004930:	4603      	mov	r3, r0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d016      	beq.n	8004964 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800493a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004940:	4610      	mov	r0, r2
 8004942:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004944:	e00e      	b.n	8004964 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 f99e 	bl	8004c88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800494c:	e00a      	b.n	8004964 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 f99a 	bl	8004c88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004954:	e006      	b.n	8004964 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f000 f996 	bl	8004c88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004962:	e175      	b.n	8004c50 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004964:	bf00      	nop
    return;
 8004966:	e173      	b.n	8004c50 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800496c:	2b01      	cmp	r3, #1
 800496e:	f040 814f 	bne.w	8004c10 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004976:	f003 0310 	and.w	r3, r3, #16
 800497a:	2b00      	cmp	r3, #0
 800497c:	f000 8148 	beq.w	8004c10 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004980:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004984:	f003 0310 	and.w	r3, r3, #16
 8004988:	2b00      	cmp	r3, #0
 800498a:	f000 8141 	beq.w	8004c10 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800498e:	2300      	movs	r3, #0
 8004990:	60bb      	str	r3, [r7, #8]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	60bb      	str	r3, [r7, #8]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	60bb      	str	r3, [r7, #8]
 80049a2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	695b      	ldr	r3, [r3, #20]
 80049aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049ae:	2b40      	cmp	r3, #64	@ 0x40
 80049b0:	f040 80b6 	bne.w	8004b20 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80049c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	f000 8145 	beq.w	8004c54 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80049ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80049d2:	429a      	cmp	r2, r3
 80049d4:	f080 813e 	bcs.w	8004c54 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80049de:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049e4:	69db      	ldr	r3, [r3, #28]
 80049e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049ea:	f000 8088 	beq.w	8004afe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	330c      	adds	r3, #12
 80049f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80049fc:	e853 3f00 	ldrex	r3, [r3]
 8004a00:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004a04:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004a08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a0c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	330c      	adds	r3, #12
 8004a16:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004a1a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004a1e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a22:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004a26:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004a2a:	e841 2300 	strex	r3, r2, [r1]
 8004a2e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004a32:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d1d9      	bne.n	80049ee <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	3314      	adds	r3, #20
 8004a40:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a42:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a44:	e853 3f00 	ldrex	r3, [r3]
 8004a48:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004a4a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004a4c:	f023 0301 	bic.w	r3, r3, #1
 8004a50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	3314      	adds	r3, #20
 8004a5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004a5e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004a62:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a64:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004a66:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004a6a:	e841 2300 	strex	r3, r2, [r1]
 8004a6e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004a70:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d1e1      	bne.n	8004a3a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	3314      	adds	r3, #20
 8004a7c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a7e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004a80:	e853 3f00 	ldrex	r3, [r3]
 8004a84:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004a86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004a88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a8c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	3314      	adds	r3, #20
 8004a96:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004a9a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004a9c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a9e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004aa0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004aa2:	e841 2300 	strex	r3, r2, [r1]
 8004aa6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004aa8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d1e3      	bne.n	8004a76 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2220      	movs	r2, #32
 8004ab2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	330c      	adds	r3, #12
 8004ac2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ac6:	e853 3f00 	ldrex	r3, [r3]
 8004aca:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004acc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ace:	f023 0310 	bic.w	r3, r3, #16
 8004ad2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	330c      	adds	r3, #12
 8004adc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004ae0:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004ae2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004ae6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004ae8:	e841 2300 	strex	r3, r2, [r1]
 8004aec:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004aee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d1e3      	bne.n	8004abc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004af8:	4618      	mov	r0, r3
 8004afa:	f7fe f81b 	bl	8002b34 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2202      	movs	r2, #2
 8004b02:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	4619      	mov	r1, r3
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f000 f8c1 	bl	8004c9c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b1a:	e09b      	b.n	8004c54 <HAL_UART_IRQHandler+0x518>
 8004b1c:	08004f15 	.word	0x08004f15
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	1ad3      	subs	r3, r2, r3
 8004b2c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	f000 808e 	beq.w	8004c58 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004b3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	f000 8089 	beq.w	8004c58 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	330c      	adds	r3, #12
 8004b4c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b50:	e853 3f00 	ldrex	r3, [r3]
 8004b54:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004b56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b58:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b5c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	330c      	adds	r3, #12
 8004b66:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004b6a:	647a      	str	r2, [r7, #68]	@ 0x44
 8004b6c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b6e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004b70:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b72:	e841 2300 	strex	r3, r2, [r1]
 8004b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004b78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d1e3      	bne.n	8004b46 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	3314      	adds	r3, #20
 8004b84:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b88:	e853 3f00 	ldrex	r3, [r3]
 8004b8c:	623b      	str	r3, [r7, #32]
   return(result);
 8004b8e:	6a3b      	ldr	r3, [r7, #32]
 8004b90:	f023 0301 	bic.w	r3, r3, #1
 8004b94:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	3314      	adds	r3, #20
 8004b9e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004ba2:	633a      	str	r2, [r7, #48]	@ 0x30
 8004ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ba8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004baa:	e841 2300 	strex	r3, r2, [r1]
 8004bae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004bb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d1e3      	bne.n	8004b7e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2220      	movs	r2, #32
 8004bba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	330c      	adds	r3, #12
 8004bca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	e853 3f00 	ldrex	r3, [r3]
 8004bd2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f023 0310 	bic.w	r3, r3, #16
 8004bda:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	330c      	adds	r3, #12
 8004be4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004be8:	61fa      	str	r2, [r7, #28]
 8004bea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bec:	69b9      	ldr	r1, [r7, #24]
 8004bee:	69fa      	ldr	r2, [r7, #28]
 8004bf0:	e841 2300 	strex	r3, r2, [r1]
 8004bf4:	617b      	str	r3, [r7, #20]
   return(result);
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d1e3      	bne.n	8004bc4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2202      	movs	r2, #2
 8004c00:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004c02:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004c06:	4619      	mov	r1, r3
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f000 f847 	bl	8004c9c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004c0e:	e023      	b.n	8004c58 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004c10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d009      	beq.n	8004c30 <HAL_UART_IRQHandler+0x4f4>
 8004c1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d003      	beq.n	8004c30 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f000 f987 	bl	8004f3c <UART_Transmit_IT>
    return;
 8004c2e:	e014      	b.n	8004c5a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004c30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d00e      	beq.n	8004c5a <HAL_UART_IRQHandler+0x51e>
 8004c3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d008      	beq.n	8004c5a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f000 f9c7 	bl	8004fdc <UART_EndTransmit_IT>
    return;
 8004c4e:	e004      	b.n	8004c5a <HAL_UART_IRQHandler+0x51e>
    return;
 8004c50:	bf00      	nop
 8004c52:	e002      	b.n	8004c5a <HAL_UART_IRQHandler+0x51e>
      return;
 8004c54:	bf00      	nop
 8004c56:	e000      	b.n	8004c5a <HAL_UART_IRQHandler+0x51e>
      return;
 8004c58:	bf00      	nop
  }
}
 8004c5a:	37e8      	adds	r7, #232	@ 0xe8
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b083      	sub	sp, #12
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004c68:	bf00      	nop
 8004c6a:	370c      	adds	r7, #12
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004c7c:	bf00      	nop
 8004c7e:	370c      	adds	r7, #12
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004c90:	bf00      	nop
 8004c92:	370c      	adds	r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr

08004c9c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	460b      	mov	r3, r1
 8004ca6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004ca8:	bf00      	nop
 8004caa:	370c      	adds	r7, #12
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr

08004cb4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b090      	sub	sp, #64	@ 0x40
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d137      	bne.n	8004d40 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8004cd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004cd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	3314      	adds	r3, #20
 8004cdc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ce0:	e853 3f00 	ldrex	r3, [r3]
 8004ce4:	623b      	str	r3, [r7, #32]
   return(result);
 8004ce6:	6a3b      	ldr	r3, [r7, #32]
 8004ce8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004cec:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004cee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	3314      	adds	r3, #20
 8004cf4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004cf6:	633a      	str	r2, [r7, #48]	@ 0x30
 8004cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cfa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004cfc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004cfe:	e841 2300 	strex	r3, r2, [r1]
 8004d02:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004d04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d1e5      	bne.n	8004cd6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004d0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	330c      	adds	r3, #12
 8004d10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	e853 3f00 	ldrex	r3, [r3]
 8004d18:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d20:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	330c      	adds	r3, #12
 8004d28:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004d2a:	61fa      	str	r2, [r7, #28]
 8004d2c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d2e:	69b9      	ldr	r1, [r7, #24]
 8004d30:	69fa      	ldr	r2, [r7, #28]
 8004d32:	e841 2300 	strex	r3, r2, [r1]
 8004d36:	617b      	str	r3, [r7, #20]
   return(result);
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d1e5      	bne.n	8004d0a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004d3e:	e002      	b.n	8004d46 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004d40:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004d42:	f7fd f835 	bl	8001db0 <HAL_UART_TxCpltCallback>
}
 8004d46:	bf00      	nop
 8004d48:	3740      	adds	r7, #64	@ 0x40
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}

08004d4e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004d4e:	b580      	push	{r7, lr}
 8004d50:	b084      	sub	sp, #16
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d5a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004d5c:	68f8      	ldr	r0, [r7, #12]
 8004d5e:	f7ff ff7f 	bl	8004c60 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d62:	bf00      	nop
 8004d64:	3710      	adds	r7, #16
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}

08004d6a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004d6a:	b580      	push	{r7, lr}
 8004d6c:	b084      	sub	sp, #16
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004d72:	2300      	movs	r3, #0
 8004d74:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d7a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	695b      	ldr	r3, [r3, #20]
 8004d82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d86:	2b80      	cmp	r3, #128	@ 0x80
 8004d88:	bf0c      	ite	eq
 8004d8a:	2301      	moveq	r3, #1
 8004d8c:	2300      	movne	r3, #0
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	2b21      	cmp	r3, #33	@ 0x21
 8004d9c:	d108      	bne.n	8004db0 <UART_DMAError+0x46>
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d005      	beq.n	8004db0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	2200      	movs	r2, #0
 8004da8:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8004daa:	68b8      	ldr	r0, [r7, #8]
 8004dac:	f000 f827 	bl	8004dfe <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	695b      	ldr	r3, [r3, #20]
 8004db6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dba:	2b40      	cmp	r3, #64	@ 0x40
 8004dbc:	bf0c      	ite	eq
 8004dbe:	2301      	moveq	r3, #1
 8004dc0:	2300      	movne	r3, #0
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	2b22      	cmp	r3, #34	@ 0x22
 8004dd0:	d108      	bne.n	8004de4 <UART_DMAError+0x7a>
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d005      	beq.n	8004de4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8004dde:	68b8      	ldr	r0, [r7, #8]
 8004de0:	f000 f835 	bl	8004e4e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004de8:	f043 0210 	orr.w	r2, r3, #16
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004df0:	68b8      	ldr	r0, [r7, #8]
 8004df2:	f7ff ff49 	bl	8004c88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004df6:	bf00      	nop
 8004df8:	3710      	adds	r7, #16
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}

08004dfe <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004dfe:	b480      	push	{r7}
 8004e00:	b089      	sub	sp, #36	@ 0x24
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	330c      	adds	r3, #12
 8004e0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	e853 3f00 	ldrex	r3, [r3]
 8004e14:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004e1c:	61fb      	str	r3, [r7, #28]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	330c      	adds	r3, #12
 8004e24:	69fa      	ldr	r2, [r7, #28]
 8004e26:	61ba      	str	r2, [r7, #24]
 8004e28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e2a:	6979      	ldr	r1, [r7, #20]
 8004e2c:	69ba      	ldr	r2, [r7, #24]
 8004e2e:	e841 2300 	strex	r3, r2, [r1]
 8004e32:	613b      	str	r3, [r7, #16]
   return(result);
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d1e5      	bne.n	8004e06 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2220      	movs	r2, #32
 8004e3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8004e42:	bf00      	nop
 8004e44:	3724      	adds	r7, #36	@ 0x24
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr

08004e4e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e4e:	b480      	push	{r7}
 8004e50:	b095      	sub	sp, #84	@ 0x54
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	330c      	adds	r3, #12
 8004e5c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e60:	e853 3f00 	ldrex	r3, [r3]
 8004e64:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e68:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	330c      	adds	r3, #12
 8004e74:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004e76:	643a      	str	r2, [r7, #64]	@ 0x40
 8004e78:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e7a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004e7c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004e7e:	e841 2300 	strex	r3, r2, [r1]
 8004e82:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004e84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d1e5      	bne.n	8004e56 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	3314      	adds	r3, #20
 8004e90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e92:	6a3b      	ldr	r3, [r7, #32]
 8004e94:	e853 3f00 	ldrex	r3, [r3]
 8004e98:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	f023 0301 	bic.w	r3, r3, #1
 8004ea0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	3314      	adds	r3, #20
 8004ea8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004eaa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004eac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004eb0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004eb2:	e841 2300 	strex	r3, r2, [r1]
 8004eb6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d1e5      	bne.n	8004e8a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d119      	bne.n	8004efa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	330c      	adds	r3, #12
 8004ecc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	e853 3f00 	ldrex	r3, [r3]
 8004ed4:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	f023 0310 	bic.w	r3, r3, #16
 8004edc:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	330c      	adds	r3, #12
 8004ee4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ee6:	61ba      	str	r2, [r7, #24]
 8004ee8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eea:	6979      	ldr	r1, [r7, #20]
 8004eec:	69ba      	ldr	r2, [r7, #24]
 8004eee:	e841 2300 	strex	r3, r2, [r1]
 8004ef2:	613b      	str	r3, [r7, #16]
   return(result);
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d1e5      	bne.n	8004ec6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2220      	movs	r2, #32
 8004efe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004f08:	bf00      	nop
 8004f0a:	3754      	adds	r7, #84	@ 0x54
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f20:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2200      	movs	r2, #0
 8004f26:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f2e:	68f8      	ldr	r0, [r7, #12]
 8004f30:	f7ff feaa 	bl	8004c88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f34:	bf00      	nop
 8004f36:	3710      	adds	r7, #16
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}

08004f3c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b085      	sub	sp, #20
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	2b21      	cmp	r3, #33	@ 0x21
 8004f4e:	d13e      	bne.n	8004fce <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f58:	d114      	bne.n	8004f84 <UART_Transmit_IT+0x48>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d110      	bne.n	8004f84 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a1b      	ldr	r3, [r3, #32]
 8004f66:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	881b      	ldrh	r3, [r3, #0]
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f76:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6a1b      	ldr	r3, [r3, #32]
 8004f7c:	1c9a      	adds	r2, r3, #2
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	621a      	str	r2, [r3, #32]
 8004f82:	e008      	b.n	8004f96 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a1b      	ldr	r3, [r3, #32]
 8004f88:	1c59      	adds	r1, r3, #1
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	6211      	str	r1, [r2, #32]
 8004f8e:	781a      	ldrb	r2, [r3, #0]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	3b01      	subs	r3, #1
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d10f      	bne.n	8004fca <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	68da      	ldr	r2, [r3, #12]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004fb8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68da      	ldr	r2, [r3, #12]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004fc8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	e000      	b.n	8004fd0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004fce:	2302      	movs	r3, #2
  }
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3714      	adds	r7, #20
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr

08004fdc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b082      	sub	sp, #8
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	68da      	ldr	r2, [r3, #12]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ff2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2220      	movs	r2, #32
 8004ff8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f7fc fed7 	bl	8001db0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005002:	2300      	movs	r3, #0
}
 8005004:	4618      	mov	r0, r3
 8005006:	3708      	adds	r7, #8
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}

0800500c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b08c      	sub	sp, #48	@ 0x30
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800501a:	b2db      	uxtb	r3, r3
 800501c:	2b22      	cmp	r3, #34	@ 0x22
 800501e:	f040 80ae 	bne.w	800517e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800502a:	d117      	bne.n	800505c <UART_Receive_IT+0x50>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d113      	bne.n	800505c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005034:	2300      	movs	r3, #0
 8005036:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800503c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	b29b      	uxth	r3, r3
 8005046:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800504a:	b29a      	uxth	r2, r3
 800504c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800504e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005054:	1c9a      	adds	r2, r3, #2
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	629a      	str	r2, [r3, #40]	@ 0x28
 800505a:	e026      	b.n	80050aa <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005060:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005062:	2300      	movs	r3, #0
 8005064:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800506e:	d007      	beq.n	8005080 <UART_Receive_IT+0x74>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d10a      	bne.n	800508e <UART_Receive_IT+0x82>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d106      	bne.n	800508e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	b2da      	uxtb	r2, r3
 8005088:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800508a:	701a      	strb	r2, [r3, #0]
 800508c:	e008      	b.n	80050a0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	b2db      	uxtb	r3, r3
 8005096:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800509a:	b2da      	uxtb	r2, r3
 800509c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800509e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050a4:	1c5a      	adds	r2, r3, #1
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	3b01      	subs	r3, #1
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	4619      	mov	r1, r3
 80050b8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d15d      	bne.n	800517a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68da      	ldr	r2, [r3, #12]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f022 0220 	bic.w	r2, r2, #32
 80050cc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	68da      	ldr	r2, [r3, #12]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80050dc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	695a      	ldr	r2, [r3, #20]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f022 0201 	bic.w	r2, r2, #1
 80050ec:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2220      	movs	r2, #32
 80050f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005100:	2b01      	cmp	r3, #1
 8005102:	d135      	bne.n	8005170 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	330c      	adds	r3, #12
 8005110:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	e853 3f00 	ldrex	r3, [r3]
 8005118:	613b      	str	r3, [r7, #16]
   return(result);
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	f023 0310 	bic.w	r3, r3, #16
 8005120:	627b      	str	r3, [r7, #36]	@ 0x24
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	330c      	adds	r3, #12
 8005128:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800512a:	623a      	str	r2, [r7, #32]
 800512c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800512e:	69f9      	ldr	r1, [r7, #28]
 8005130:	6a3a      	ldr	r2, [r7, #32]
 8005132:	e841 2300 	strex	r3, r2, [r1]
 8005136:	61bb      	str	r3, [r7, #24]
   return(result);
 8005138:	69bb      	ldr	r3, [r7, #24]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d1e5      	bne.n	800510a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 0310 	and.w	r3, r3, #16
 8005148:	2b10      	cmp	r3, #16
 800514a:	d10a      	bne.n	8005162 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800514c:	2300      	movs	r3, #0
 800514e:	60fb      	str	r3, [r7, #12]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	60fb      	str	r3, [r7, #12]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	60fb      	str	r3, [r7, #12]
 8005160:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005166:	4619      	mov	r1, r3
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f7ff fd97 	bl	8004c9c <HAL_UARTEx_RxEventCallback>
 800516e:	e002      	b.n	8005176 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f7ff fd7f 	bl	8004c74 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005176:	2300      	movs	r3, #0
 8005178:	e002      	b.n	8005180 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800517a:	2300      	movs	r3, #0
 800517c:	e000      	b.n	8005180 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800517e:	2302      	movs	r3, #2
  }
}
 8005180:	4618      	mov	r0, r3
 8005182:	3730      	adds	r7, #48	@ 0x30
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005188:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800518c:	b0c0      	sub	sp, #256	@ 0x100
 800518e:	af00      	add	r7, sp, #0
 8005190:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	691b      	ldr	r3, [r3, #16]
 800519c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80051a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051a4:	68d9      	ldr	r1, [r3, #12]
 80051a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	ea40 0301 	orr.w	r3, r0, r1
 80051b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80051b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051b6:	689a      	ldr	r2, [r3, #8]
 80051b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051bc:	691b      	ldr	r3, [r3, #16]
 80051be:	431a      	orrs	r2, r3
 80051c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051c4:	695b      	ldr	r3, [r3, #20]
 80051c6:	431a      	orrs	r2, r3
 80051c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051cc:	69db      	ldr	r3, [r3, #28]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80051d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80051e0:	f021 010c 	bic.w	r1, r1, #12
 80051e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80051ee:	430b      	orrs	r3, r1
 80051f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80051f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	695b      	ldr	r3, [r3, #20]
 80051fa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80051fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005202:	6999      	ldr	r1, [r3, #24]
 8005204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	ea40 0301 	orr.w	r3, r0, r1
 800520e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	4b8f      	ldr	r3, [pc, #572]	@ (8005454 <UART_SetConfig+0x2cc>)
 8005218:	429a      	cmp	r2, r3
 800521a:	d005      	beq.n	8005228 <UART_SetConfig+0xa0>
 800521c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	4b8d      	ldr	r3, [pc, #564]	@ (8005458 <UART_SetConfig+0x2d0>)
 8005224:	429a      	cmp	r2, r3
 8005226:	d104      	bne.n	8005232 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005228:	f7fe fd48 	bl	8003cbc <HAL_RCC_GetPCLK2Freq>
 800522c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005230:	e003      	b.n	800523a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005232:	f7fe fd2f 	bl	8003c94 <HAL_RCC_GetPCLK1Freq>
 8005236:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800523a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800523e:	69db      	ldr	r3, [r3, #28]
 8005240:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005244:	f040 810c 	bne.w	8005460 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005248:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800524c:	2200      	movs	r2, #0
 800524e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005252:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005256:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800525a:	4622      	mov	r2, r4
 800525c:	462b      	mov	r3, r5
 800525e:	1891      	adds	r1, r2, r2
 8005260:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005262:	415b      	adcs	r3, r3
 8005264:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005266:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800526a:	4621      	mov	r1, r4
 800526c:	eb12 0801 	adds.w	r8, r2, r1
 8005270:	4629      	mov	r1, r5
 8005272:	eb43 0901 	adc.w	r9, r3, r1
 8005276:	f04f 0200 	mov.w	r2, #0
 800527a:	f04f 0300 	mov.w	r3, #0
 800527e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005282:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005286:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800528a:	4690      	mov	r8, r2
 800528c:	4699      	mov	r9, r3
 800528e:	4623      	mov	r3, r4
 8005290:	eb18 0303 	adds.w	r3, r8, r3
 8005294:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005298:	462b      	mov	r3, r5
 800529a:	eb49 0303 	adc.w	r3, r9, r3
 800529e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80052a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80052ae:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80052b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80052b6:	460b      	mov	r3, r1
 80052b8:	18db      	adds	r3, r3, r3
 80052ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80052bc:	4613      	mov	r3, r2
 80052be:	eb42 0303 	adc.w	r3, r2, r3
 80052c2:	657b      	str	r3, [r7, #84]	@ 0x54
 80052c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80052c8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80052cc:	f7fb fc94 	bl	8000bf8 <__aeabi_uldivmod>
 80052d0:	4602      	mov	r2, r0
 80052d2:	460b      	mov	r3, r1
 80052d4:	4b61      	ldr	r3, [pc, #388]	@ (800545c <UART_SetConfig+0x2d4>)
 80052d6:	fba3 2302 	umull	r2, r3, r3, r2
 80052da:	095b      	lsrs	r3, r3, #5
 80052dc:	011c      	lsls	r4, r3, #4
 80052de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052e2:	2200      	movs	r2, #0
 80052e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80052e8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80052ec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80052f0:	4642      	mov	r2, r8
 80052f2:	464b      	mov	r3, r9
 80052f4:	1891      	adds	r1, r2, r2
 80052f6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80052f8:	415b      	adcs	r3, r3
 80052fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005300:	4641      	mov	r1, r8
 8005302:	eb12 0a01 	adds.w	sl, r2, r1
 8005306:	4649      	mov	r1, r9
 8005308:	eb43 0b01 	adc.w	fp, r3, r1
 800530c:	f04f 0200 	mov.w	r2, #0
 8005310:	f04f 0300 	mov.w	r3, #0
 8005314:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005318:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800531c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005320:	4692      	mov	sl, r2
 8005322:	469b      	mov	fp, r3
 8005324:	4643      	mov	r3, r8
 8005326:	eb1a 0303 	adds.w	r3, sl, r3
 800532a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800532e:	464b      	mov	r3, r9
 8005330:	eb4b 0303 	adc.w	r3, fp, r3
 8005334:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005344:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005348:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800534c:	460b      	mov	r3, r1
 800534e:	18db      	adds	r3, r3, r3
 8005350:	643b      	str	r3, [r7, #64]	@ 0x40
 8005352:	4613      	mov	r3, r2
 8005354:	eb42 0303 	adc.w	r3, r2, r3
 8005358:	647b      	str	r3, [r7, #68]	@ 0x44
 800535a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800535e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005362:	f7fb fc49 	bl	8000bf8 <__aeabi_uldivmod>
 8005366:	4602      	mov	r2, r0
 8005368:	460b      	mov	r3, r1
 800536a:	4611      	mov	r1, r2
 800536c:	4b3b      	ldr	r3, [pc, #236]	@ (800545c <UART_SetConfig+0x2d4>)
 800536e:	fba3 2301 	umull	r2, r3, r3, r1
 8005372:	095b      	lsrs	r3, r3, #5
 8005374:	2264      	movs	r2, #100	@ 0x64
 8005376:	fb02 f303 	mul.w	r3, r2, r3
 800537a:	1acb      	subs	r3, r1, r3
 800537c:	00db      	lsls	r3, r3, #3
 800537e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005382:	4b36      	ldr	r3, [pc, #216]	@ (800545c <UART_SetConfig+0x2d4>)
 8005384:	fba3 2302 	umull	r2, r3, r3, r2
 8005388:	095b      	lsrs	r3, r3, #5
 800538a:	005b      	lsls	r3, r3, #1
 800538c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005390:	441c      	add	r4, r3
 8005392:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005396:	2200      	movs	r2, #0
 8005398:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800539c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80053a0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80053a4:	4642      	mov	r2, r8
 80053a6:	464b      	mov	r3, r9
 80053a8:	1891      	adds	r1, r2, r2
 80053aa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80053ac:	415b      	adcs	r3, r3
 80053ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80053b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80053b4:	4641      	mov	r1, r8
 80053b6:	1851      	adds	r1, r2, r1
 80053b8:	6339      	str	r1, [r7, #48]	@ 0x30
 80053ba:	4649      	mov	r1, r9
 80053bc:	414b      	adcs	r3, r1
 80053be:	637b      	str	r3, [r7, #52]	@ 0x34
 80053c0:	f04f 0200 	mov.w	r2, #0
 80053c4:	f04f 0300 	mov.w	r3, #0
 80053c8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80053cc:	4659      	mov	r1, fp
 80053ce:	00cb      	lsls	r3, r1, #3
 80053d0:	4651      	mov	r1, sl
 80053d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053d6:	4651      	mov	r1, sl
 80053d8:	00ca      	lsls	r2, r1, #3
 80053da:	4610      	mov	r0, r2
 80053dc:	4619      	mov	r1, r3
 80053de:	4603      	mov	r3, r0
 80053e0:	4642      	mov	r2, r8
 80053e2:	189b      	adds	r3, r3, r2
 80053e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80053e8:	464b      	mov	r3, r9
 80053ea:	460a      	mov	r2, r1
 80053ec:	eb42 0303 	adc.w	r3, r2, r3
 80053f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80053f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005400:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005404:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005408:	460b      	mov	r3, r1
 800540a:	18db      	adds	r3, r3, r3
 800540c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800540e:	4613      	mov	r3, r2
 8005410:	eb42 0303 	adc.w	r3, r2, r3
 8005414:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005416:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800541a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800541e:	f7fb fbeb 	bl	8000bf8 <__aeabi_uldivmod>
 8005422:	4602      	mov	r2, r0
 8005424:	460b      	mov	r3, r1
 8005426:	4b0d      	ldr	r3, [pc, #52]	@ (800545c <UART_SetConfig+0x2d4>)
 8005428:	fba3 1302 	umull	r1, r3, r3, r2
 800542c:	095b      	lsrs	r3, r3, #5
 800542e:	2164      	movs	r1, #100	@ 0x64
 8005430:	fb01 f303 	mul.w	r3, r1, r3
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	00db      	lsls	r3, r3, #3
 8005438:	3332      	adds	r3, #50	@ 0x32
 800543a:	4a08      	ldr	r2, [pc, #32]	@ (800545c <UART_SetConfig+0x2d4>)
 800543c:	fba2 2303 	umull	r2, r3, r2, r3
 8005440:	095b      	lsrs	r3, r3, #5
 8005442:	f003 0207 	and.w	r2, r3, #7
 8005446:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4422      	add	r2, r4
 800544e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005450:	e106      	b.n	8005660 <UART_SetConfig+0x4d8>
 8005452:	bf00      	nop
 8005454:	40011000 	.word	0x40011000
 8005458:	40011400 	.word	0x40011400
 800545c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005460:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005464:	2200      	movs	r2, #0
 8005466:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800546a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800546e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005472:	4642      	mov	r2, r8
 8005474:	464b      	mov	r3, r9
 8005476:	1891      	adds	r1, r2, r2
 8005478:	6239      	str	r1, [r7, #32]
 800547a:	415b      	adcs	r3, r3
 800547c:	627b      	str	r3, [r7, #36]	@ 0x24
 800547e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005482:	4641      	mov	r1, r8
 8005484:	1854      	adds	r4, r2, r1
 8005486:	4649      	mov	r1, r9
 8005488:	eb43 0501 	adc.w	r5, r3, r1
 800548c:	f04f 0200 	mov.w	r2, #0
 8005490:	f04f 0300 	mov.w	r3, #0
 8005494:	00eb      	lsls	r3, r5, #3
 8005496:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800549a:	00e2      	lsls	r2, r4, #3
 800549c:	4614      	mov	r4, r2
 800549e:	461d      	mov	r5, r3
 80054a0:	4643      	mov	r3, r8
 80054a2:	18e3      	adds	r3, r4, r3
 80054a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80054a8:	464b      	mov	r3, r9
 80054aa:	eb45 0303 	adc.w	r3, r5, r3
 80054ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80054b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80054be:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80054c2:	f04f 0200 	mov.w	r2, #0
 80054c6:	f04f 0300 	mov.w	r3, #0
 80054ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80054ce:	4629      	mov	r1, r5
 80054d0:	008b      	lsls	r3, r1, #2
 80054d2:	4621      	mov	r1, r4
 80054d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054d8:	4621      	mov	r1, r4
 80054da:	008a      	lsls	r2, r1, #2
 80054dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80054e0:	f7fb fb8a 	bl	8000bf8 <__aeabi_uldivmod>
 80054e4:	4602      	mov	r2, r0
 80054e6:	460b      	mov	r3, r1
 80054e8:	4b60      	ldr	r3, [pc, #384]	@ (800566c <UART_SetConfig+0x4e4>)
 80054ea:	fba3 2302 	umull	r2, r3, r3, r2
 80054ee:	095b      	lsrs	r3, r3, #5
 80054f0:	011c      	lsls	r4, r3, #4
 80054f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054f6:	2200      	movs	r2, #0
 80054f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80054fc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005500:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005504:	4642      	mov	r2, r8
 8005506:	464b      	mov	r3, r9
 8005508:	1891      	adds	r1, r2, r2
 800550a:	61b9      	str	r1, [r7, #24]
 800550c:	415b      	adcs	r3, r3
 800550e:	61fb      	str	r3, [r7, #28]
 8005510:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005514:	4641      	mov	r1, r8
 8005516:	1851      	adds	r1, r2, r1
 8005518:	6139      	str	r1, [r7, #16]
 800551a:	4649      	mov	r1, r9
 800551c:	414b      	adcs	r3, r1
 800551e:	617b      	str	r3, [r7, #20]
 8005520:	f04f 0200 	mov.w	r2, #0
 8005524:	f04f 0300 	mov.w	r3, #0
 8005528:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800552c:	4659      	mov	r1, fp
 800552e:	00cb      	lsls	r3, r1, #3
 8005530:	4651      	mov	r1, sl
 8005532:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005536:	4651      	mov	r1, sl
 8005538:	00ca      	lsls	r2, r1, #3
 800553a:	4610      	mov	r0, r2
 800553c:	4619      	mov	r1, r3
 800553e:	4603      	mov	r3, r0
 8005540:	4642      	mov	r2, r8
 8005542:	189b      	adds	r3, r3, r2
 8005544:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005548:	464b      	mov	r3, r9
 800554a:	460a      	mov	r2, r1
 800554c:	eb42 0303 	adc.w	r3, r2, r3
 8005550:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	2200      	movs	r2, #0
 800555c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800555e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005560:	f04f 0200 	mov.w	r2, #0
 8005564:	f04f 0300 	mov.w	r3, #0
 8005568:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800556c:	4649      	mov	r1, r9
 800556e:	008b      	lsls	r3, r1, #2
 8005570:	4641      	mov	r1, r8
 8005572:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005576:	4641      	mov	r1, r8
 8005578:	008a      	lsls	r2, r1, #2
 800557a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800557e:	f7fb fb3b 	bl	8000bf8 <__aeabi_uldivmod>
 8005582:	4602      	mov	r2, r0
 8005584:	460b      	mov	r3, r1
 8005586:	4611      	mov	r1, r2
 8005588:	4b38      	ldr	r3, [pc, #224]	@ (800566c <UART_SetConfig+0x4e4>)
 800558a:	fba3 2301 	umull	r2, r3, r3, r1
 800558e:	095b      	lsrs	r3, r3, #5
 8005590:	2264      	movs	r2, #100	@ 0x64
 8005592:	fb02 f303 	mul.w	r3, r2, r3
 8005596:	1acb      	subs	r3, r1, r3
 8005598:	011b      	lsls	r3, r3, #4
 800559a:	3332      	adds	r3, #50	@ 0x32
 800559c:	4a33      	ldr	r2, [pc, #204]	@ (800566c <UART_SetConfig+0x4e4>)
 800559e:	fba2 2303 	umull	r2, r3, r2, r3
 80055a2:	095b      	lsrs	r3, r3, #5
 80055a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80055a8:	441c      	add	r4, r3
 80055aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055ae:	2200      	movs	r2, #0
 80055b0:	673b      	str	r3, [r7, #112]	@ 0x70
 80055b2:	677a      	str	r2, [r7, #116]	@ 0x74
 80055b4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80055b8:	4642      	mov	r2, r8
 80055ba:	464b      	mov	r3, r9
 80055bc:	1891      	adds	r1, r2, r2
 80055be:	60b9      	str	r1, [r7, #8]
 80055c0:	415b      	adcs	r3, r3
 80055c2:	60fb      	str	r3, [r7, #12]
 80055c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80055c8:	4641      	mov	r1, r8
 80055ca:	1851      	adds	r1, r2, r1
 80055cc:	6039      	str	r1, [r7, #0]
 80055ce:	4649      	mov	r1, r9
 80055d0:	414b      	adcs	r3, r1
 80055d2:	607b      	str	r3, [r7, #4]
 80055d4:	f04f 0200 	mov.w	r2, #0
 80055d8:	f04f 0300 	mov.w	r3, #0
 80055dc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80055e0:	4659      	mov	r1, fp
 80055e2:	00cb      	lsls	r3, r1, #3
 80055e4:	4651      	mov	r1, sl
 80055e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055ea:	4651      	mov	r1, sl
 80055ec:	00ca      	lsls	r2, r1, #3
 80055ee:	4610      	mov	r0, r2
 80055f0:	4619      	mov	r1, r3
 80055f2:	4603      	mov	r3, r0
 80055f4:	4642      	mov	r2, r8
 80055f6:	189b      	adds	r3, r3, r2
 80055f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80055fa:	464b      	mov	r3, r9
 80055fc:	460a      	mov	r2, r1
 80055fe:	eb42 0303 	adc.w	r3, r2, r3
 8005602:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	663b      	str	r3, [r7, #96]	@ 0x60
 800560e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005610:	f04f 0200 	mov.w	r2, #0
 8005614:	f04f 0300 	mov.w	r3, #0
 8005618:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800561c:	4649      	mov	r1, r9
 800561e:	008b      	lsls	r3, r1, #2
 8005620:	4641      	mov	r1, r8
 8005622:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005626:	4641      	mov	r1, r8
 8005628:	008a      	lsls	r2, r1, #2
 800562a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800562e:	f7fb fae3 	bl	8000bf8 <__aeabi_uldivmod>
 8005632:	4602      	mov	r2, r0
 8005634:	460b      	mov	r3, r1
 8005636:	4b0d      	ldr	r3, [pc, #52]	@ (800566c <UART_SetConfig+0x4e4>)
 8005638:	fba3 1302 	umull	r1, r3, r3, r2
 800563c:	095b      	lsrs	r3, r3, #5
 800563e:	2164      	movs	r1, #100	@ 0x64
 8005640:	fb01 f303 	mul.w	r3, r1, r3
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	011b      	lsls	r3, r3, #4
 8005648:	3332      	adds	r3, #50	@ 0x32
 800564a:	4a08      	ldr	r2, [pc, #32]	@ (800566c <UART_SetConfig+0x4e4>)
 800564c:	fba2 2303 	umull	r2, r3, r2, r3
 8005650:	095b      	lsrs	r3, r3, #5
 8005652:	f003 020f 	and.w	r2, r3, #15
 8005656:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4422      	add	r2, r4
 800565e:	609a      	str	r2, [r3, #8]
}
 8005660:	bf00      	nop
 8005662:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005666:	46bd      	mov	sp, r7
 8005668:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800566c:	51eb851f 	.word	0x51eb851f

08005670 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005670:	b580      	push	{r7, lr}
 8005672:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005674:	4b05      	ldr	r3, [pc, #20]	@ (800568c <SysTick_Handler+0x1c>)
 8005676:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005678:	f002 f85a 	bl	8007730 <xTaskGetSchedulerState>
 800567c:	4603      	mov	r3, r0
 800567e:	2b01      	cmp	r3, #1
 8005680:	d001      	beq.n	8005686 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005682:	f003 f961 	bl	8008948 <xPortSysTickHandler>
  }
}
 8005686:	bf00      	nop
 8005688:	bd80      	pop	{r7, pc}
 800568a:	bf00      	nop
 800568c:	e000e010 	.word	0xe000e010

08005690 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005690:	b480      	push	{r7}
 8005692:	b085      	sub	sp, #20
 8005694:	af00      	add	r7, sp, #0
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	4a07      	ldr	r2, [pc, #28]	@ (80056bc <vApplicationGetIdleTaskMemory+0x2c>)
 80056a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	4a06      	ldr	r2, [pc, #24]	@ (80056c0 <vApplicationGetIdleTaskMemory+0x30>)
 80056a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2280      	movs	r2, #128	@ 0x80
 80056ac:	601a      	str	r2, [r3, #0]
}
 80056ae:	bf00      	nop
 80056b0:	3714      	adds	r7, #20
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr
 80056ba:	bf00      	nop
 80056bc:	200002a8 	.word	0x200002a8
 80056c0:	20000380 	.word	0x20000380

080056c4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80056c4:	b480      	push	{r7}
 80056c6:	b085      	sub	sp, #20
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	60b9      	str	r1, [r7, #8]
 80056ce:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	4a07      	ldr	r2, [pc, #28]	@ (80056f0 <vApplicationGetTimerTaskMemory+0x2c>)
 80056d4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	4a06      	ldr	r2, [pc, #24]	@ (80056f4 <vApplicationGetTimerTaskMemory+0x30>)
 80056da:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80056e2:	601a      	str	r2, [r3, #0]
}
 80056e4:	bf00      	nop
 80056e6:	3714      	adds	r7, #20
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr
 80056f0:	20000580 	.word	0x20000580
 80056f4:	20000658 	.word	0x20000658

080056f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80056f8:	b480      	push	{r7}
 80056fa:	b083      	sub	sp, #12
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f103 0208 	add.w	r2, r3, #8
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005710:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f103 0208 	add.w	r2, r3, #8
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f103 0208 	add.w	r2, r3, #8
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800572c:	bf00      	nop
 800572e:	370c      	adds	r7, #12
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr

08005738 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005738:	b480      	push	{r7}
 800573a:	b083      	sub	sp, #12
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2200      	movs	r2, #0
 8005744:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005746:	bf00      	nop
 8005748:	370c      	adds	r7, #12
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr

08005752 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005752:	b480      	push	{r7}
 8005754:	b085      	sub	sp, #20
 8005756:	af00      	add	r7, sp, #0
 8005758:	6078      	str	r0, [r7, #4]
 800575a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	689a      	ldr	r2, [r3, #8]
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	683a      	ldr	r2, [r7, #0]
 8005776:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	683a      	ldr	r2, [r7, #0]
 800577c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	1c5a      	adds	r2, r3, #1
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	601a      	str	r2, [r3, #0]
}
 800578e:	bf00      	nop
 8005790:	3714      	adds	r7, #20
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr

0800579a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800579a:	b480      	push	{r7}
 800579c:	b085      	sub	sp, #20
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
 80057a2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80057b0:	d103      	bne.n	80057ba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	60fb      	str	r3, [r7, #12]
 80057b8:	e00c      	b.n	80057d4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	3308      	adds	r3, #8
 80057be:	60fb      	str	r3, [r7, #12]
 80057c0:	e002      	b.n	80057c8 <vListInsert+0x2e>
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	60fb      	str	r3, [r7, #12]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	68ba      	ldr	r2, [r7, #8]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d2f6      	bcs.n	80057c2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	685a      	ldr	r2, [r3, #4]
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	683a      	ldr	r2, [r7, #0]
 80057e2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	68fa      	ldr	r2, [r7, #12]
 80057e8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	683a      	ldr	r2, [r7, #0]
 80057ee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	1c5a      	adds	r2, r3, #1
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	601a      	str	r2, [r3, #0]
}
 8005800:	bf00      	nop
 8005802:	3714      	adds	r7, #20
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr

0800580c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800580c:	b480      	push	{r7}
 800580e:	b085      	sub	sp, #20
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	691b      	ldr	r3, [r3, #16]
 8005818:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	6892      	ldr	r2, [r2, #8]
 8005822:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	6852      	ldr	r2, [r2, #4]
 800582c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	429a      	cmp	r2, r3
 8005836:	d103      	bne.n	8005840 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	689a      	ldr	r2, [r3, #8]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2200      	movs	r2, #0
 8005844:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	1e5a      	subs	r2, r3, #1
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
}
 8005854:	4618      	mov	r0, r3
 8005856:	3714      	adds	r7, #20
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr

08005860 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b084      	sub	sp, #16
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d10b      	bne.n	800588c <xQueueGenericReset+0x2c>
	__asm volatile
 8005874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005878:	f383 8811 	msr	BASEPRI, r3
 800587c:	f3bf 8f6f 	isb	sy
 8005880:	f3bf 8f4f 	dsb	sy
 8005884:	60bb      	str	r3, [r7, #8]
}
 8005886:	bf00      	nop
 8005888:	bf00      	nop
 800588a:	e7fd      	b.n	8005888 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800588c:	f002 ffcc 	bl	8008828 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005898:	68f9      	ldr	r1, [r7, #12]
 800589a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800589c:	fb01 f303 	mul.w	r3, r1, r3
 80058a0:	441a      	add	r2, r3
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2200      	movs	r2, #0
 80058aa:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058bc:	3b01      	subs	r3, #1
 80058be:	68f9      	ldr	r1, [r7, #12]
 80058c0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80058c2:	fb01 f303 	mul.w	r3, r1, r3
 80058c6:	441a      	add	r2, r3
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	22ff      	movs	r2, #255	@ 0xff
 80058d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	22ff      	movs	r2, #255	@ 0xff
 80058d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d114      	bne.n	800590c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d01a      	beq.n	8005920 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	3310      	adds	r3, #16
 80058ee:	4618      	mov	r0, r3
 80058f0:	f001 fc2e 	bl	8007150 <xTaskRemoveFromEventList>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d012      	beq.n	8005920 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80058fa:	4b0d      	ldr	r3, [pc, #52]	@ (8005930 <xQueueGenericReset+0xd0>)
 80058fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005900:	601a      	str	r2, [r3, #0]
 8005902:	f3bf 8f4f 	dsb	sy
 8005906:	f3bf 8f6f 	isb	sy
 800590a:	e009      	b.n	8005920 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	3310      	adds	r3, #16
 8005910:	4618      	mov	r0, r3
 8005912:	f7ff fef1 	bl	80056f8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	3324      	adds	r3, #36	@ 0x24
 800591a:	4618      	mov	r0, r3
 800591c:	f7ff feec 	bl	80056f8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005920:	f002 ffb4 	bl	800888c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005924:	2301      	movs	r3, #1
}
 8005926:	4618      	mov	r0, r3
 8005928:	3710      	adds	r7, #16
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	e000ed04 	.word	0xe000ed04

08005934 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005934:	b580      	push	{r7, lr}
 8005936:	b08e      	sub	sp, #56	@ 0x38
 8005938:	af02      	add	r7, sp, #8
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	60b9      	str	r1, [r7, #8]
 800593e:	607a      	str	r2, [r7, #4]
 8005940:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d10b      	bne.n	8005960 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005948:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800594c:	f383 8811 	msr	BASEPRI, r3
 8005950:	f3bf 8f6f 	isb	sy
 8005954:	f3bf 8f4f 	dsb	sy
 8005958:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800595a:	bf00      	nop
 800595c:	bf00      	nop
 800595e:	e7fd      	b.n	800595c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d10b      	bne.n	800597e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800596a:	f383 8811 	msr	BASEPRI, r3
 800596e:	f3bf 8f6f 	isb	sy
 8005972:	f3bf 8f4f 	dsb	sy
 8005976:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005978:	bf00      	nop
 800597a:	bf00      	nop
 800597c:	e7fd      	b.n	800597a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d002      	beq.n	800598a <xQueueGenericCreateStatic+0x56>
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d001      	beq.n	800598e <xQueueGenericCreateStatic+0x5a>
 800598a:	2301      	movs	r3, #1
 800598c:	e000      	b.n	8005990 <xQueueGenericCreateStatic+0x5c>
 800598e:	2300      	movs	r3, #0
 8005990:	2b00      	cmp	r3, #0
 8005992:	d10b      	bne.n	80059ac <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005994:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005998:	f383 8811 	msr	BASEPRI, r3
 800599c:	f3bf 8f6f 	isb	sy
 80059a0:	f3bf 8f4f 	dsb	sy
 80059a4:	623b      	str	r3, [r7, #32]
}
 80059a6:	bf00      	nop
 80059a8:	bf00      	nop
 80059aa:	e7fd      	b.n	80059a8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d102      	bne.n	80059b8 <xQueueGenericCreateStatic+0x84>
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d101      	bne.n	80059bc <xQueueGenericCreateStatic+0x88>
 80059b8:	2301      	movs	r3, #1
 80059ba:	e000      	b.n	80059be <xQueueGenericCreateStatic+0x8a>
 80059bc:	2300      	movs	r3, #0
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d10b      	bne.n	80059da <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80059c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059c6:	f383 8811 	msr	BASEPRI, r3
 80059ca:	f3bf 8f6f 	isb	sy
 80059ce:	f3bf 8f4f 	dsb	sy
 80059d2:	61fb      	str	r3, [r7, #28]
}
 80059d4:	bf00      	nop
 80059d6:	bf00      	nop
 80059d8:	e7fd      	b.n	80059d6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80059da:	2350      	movs	r3, #80	@ 0x50
 80059dc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	2b50      	cmp	r3, #80	@ 0x50
 80059e2:	d00b      	beq.n	80059fc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80059e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059e8:	f383 8811 	msr	BASEPRI, r3
 80059ec:	f3bf 8f6f 	isb	sy
 80059f0:	f3bf 8f4f 	dsb	sy
 80059f4:	61bb      	str	r3, [r7, #24]
}
 80059f6:	bf00      	nop
 80059f8:	bf00      	nop
 80059fa:	e7fd      	b.n	80059f8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80059fc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005a02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d00d      	beq.n	8005a24 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005a08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005a10:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005a14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a16:	9300      	str	r3, [sp, #0]
 8005a18:	4613      	mov	r3, r2
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	68b9      	ldr	r1, [r7, #8]
 8005a1e:	68f8      	ldr	r0, [r7, #12]
 8005a20:	f000 f840 	bl	8005aa4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005a24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3730      	adds	r7, #48	@ 0x30
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}

08005a2e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005a2e:	b580      	push	{r7, lr}
 8005a30:	b08a      	sub	sp, #40	@ 0x28
 8005a32:	af02      	add	r7, sp, #8
 8005a34:	60f8      	str	r0, [r7, #12]
 8005a36:	60b9      	str	r1, [r7, #8]
 8005a38:	4613      	mov	r3, r2
 8005a3a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d10b      	bne.n	8005a5a <xQueueGenericCreate+0x2c>
	__asm volatile
 8005a42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a46:	f383 8811 	msr	BASEPRI, r3
 8005a4a:	f3bf 8f6f 	isb	sy
 8005a4e:	f3bf 8f4f 	dsb	sy
 8005a52:	613b      	str	r3, [r7, #16]
}
 8005a54:	bf00      	nop
 8005a56:	bf00      	nop
 8005a58:	e7fd      	b.n	8005a56 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	68ba      	ldr	r2, [r7, #8]
 8005a5e:	fb02 f303 	mul.w	r3, r2, r3
 8005a62:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	3350      	adds	r3, #80	@ 0x50
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f002 ffff 	bl	8008a6c <pvPortMalloc>
 8005a6e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005a70:	69bb      	ldr	r3, [r7, #24]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d011      	beq.n	8005a9a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005a76:	69bb      	ldr	r3, [r7, #24]
 8005a78:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	3350      	adds	r3, #80	@ 0x50
 8005a7e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005a80:	69bb      	ldr	r3, [r7, #24]
 8005a82:	2200      	movs	r2, #0
 8005a84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005a88:	79fa      	ldrb	r2, [r7, #7]
 8005a8a:	69bb      	ldr	r3, [r7, #24]
 8005a8c:	9300      	str	r3, [sp, #0]
 8005a8e:	4613      	mov	r3, r2
 8005a90:	697a      	ldr	r2, [r7, #20]
 8005a92:	68b9      	ldr	r1, [r7, #8]
 8005a94:	68f8      	ldr	r0, [r7, #12]
 8005a96:	f000 f805 	bl	8005aa4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005a9a:	69bb      	ldr	r3, [r7, #24]
	}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3720      	adds	r7, #32
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b084      	sub	sp, #16
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	60f8      	str	r0, [r7, #12]
 8005aac:	60b9      	str	r1, [r7, #8]
 8005aae:	607a      	str	r2, [r7, #4]
 8005ab0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d103      	bne.n	8005ac0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005ab8:	69bb      	ldr	r3, [r7, #24]
 8005aba:	69ba      	ldr	r2, [r7, #24]
 8005abc:	601a      	str	r2, [r3, #0]
 8005abe:	e002      	b.n	8005ac6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005ac0:	69bb      	ldr	r3, [r7, #24]
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005ac6:	69bb      	ldr	r3, [r7, #24]
 8005ac8:	68fa      	ldr	r2, [r7, #12]
 8005aca:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005acc:	69bb      	ldr	r3, [r7, #24]
 8005ace:	68ba      	ldr	r2, [r7, #8]
 8005ad0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005ad2:	2101      	movs	r1, #1
 8005ad4:	69b8      	ldr	r0, [r7, #24]
 8005ad6:	f7ff fec3 	bl	8005860 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005ada:	69bb      	ldr	r3, [r7, #24]
 8005adc:	78fa      	ldrb	r2, [r7, #3]
 8005ade:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005ae2:	bf00      	nop
 8005ae4:	3710      	adds	r7, #16
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
	...

08005aec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b08e      	sub	sp, #56	@ 0x38
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	60f8      	str	r0, [r7, #12]
 8005af4:	60b9      	str	r1, [r7, #8]
 8005af6:	607a      	str	r2, [r7, #4]
 8005af8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005afa:	2300      	movs	r3, #0
 8005afc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d10b      	bne.n	8005b20 <xQueueGenericSend+0x34>
	__asm volatile
 8005b08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b0c:	f383 8811 	msr	BASEPRI, r3
 8005b10:	f3bf 8f6f 	isb	sy
 8005b14:	f3bf 8f4f 	dsb	sy
 8005b18:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005b1a:	bf00      	nop
 8005b1c:	bf00      	nop
 8005b1e:	e7fd      	b.n	8005b1c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d103      	bne.n	8005b2e <xQueueGenericSend+0x42>
 8005b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d101      	bne.n	8005b32 <xQueueGenericSend+0x46>
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e000      	b.n	8005b34 <xQueueGenericSend+0x48>
 8005b32:	2300      	movs	r3, #0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d10b      	bne.n	8005b50 <xQueueGenericSend+0x64>
	__asm volatile
 8005b38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b3c:	f383 8811 	msr	BASEPRI, r3
 8005b40:	f3bf 8f6f 	isb	sy
 8005b44:	f3bf 8f4f 	dsb	sy
 8005b48:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005b4a:	bf00      	nop
 8005b4c:	bf00      	nop
 8005b4e:	e7fd      	b.n	8005b4c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	2b02      	cmp	r3, #2
 8005b54:	d103      	bne.n	8005b5e <xQueueGenericSend+0x72>
 8005b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d101      	bne.n	8005b62 <xQueueGenericSend+0x76>
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e000      	b.n	8005b64 <xQueueGenericSend+0x78>
 8005b62:	2300      	movs	r3, #0
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d10b      	bne.n	8005b80 <xQueueGenericSend+0x94>
	__asm volatile
 8005b68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b6c:	f383 8811 	msr	BASEPRI, r3
 8005b70:	f3bf 8f6f 	isb	sy
 8005b74:	f3bf 8f4f 	dsb	sy
 8005b78:	623b      	str	r3, [r7, #32]
}
 8005b7a:	bf00      	nop
 8005b7c:	bf00      	nop
 8005b7e:	e7fd      	b.n	8005b7c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005b80:	f001 fdd6 	bl	8007730 <xTaskGetSchedulerState>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d102      	bne.n	8005b90 <xQueueGenericSend+0xa4>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d101      	bne.n	8005b94 <xQueueGenericSend+0xa8>
 8005b90:	2301      	movs	r3, #1
 8005b92:	e000      	b.n	8005b96 <xQueueGenericSend+0xaa>
 8005b94:	2300      	movs	r3, #0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d10b      	bne.n	8005bb2 <xQueueGenericSend+0xc6>
	__asm volatile
 8005b9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b9e:	f383 8811 	msr	BASEPRI, r3
 8005ba2:	f3bf 8f6f 	isb	sy
 8005ba6:	f3bf 8f4f 	dsb	sy
 8005baa:	61fb      	str	r3, [r7, #28]
}
 8005bac:	bf00      	nop
 8005bae:	bf00      	nop
 8005bb0:	e7fd      	b.n	8005bae <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005bb2:	f002 fe39 	bl	8008828 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bb8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d302      	bcc.n	8005bc8 <xQueueGenericSend+0xdc>
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	2b02      	cmp	r3, #2
 8005bc6:	d129      	bne.n	8005c1c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005bc8:	683a      	ldr	r2, [r7, #0]
 8005bca:	68b9      	ldr	r1, [r7, #8]
 8005bcc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005bce:	f000 fbc7 	bl	8006360 <prvCopyDataToQueue>
 8005bd2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d010      	beq.n	8005bfe <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005bdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bde:	3324      	adds	r3, #36	@ 0x24
 8005be0:	4618      	mov	r0, r3
 8005be2:	f001 fab5 	bl	8007150 <xTaskRemoveFromEventList>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d013      	beq.n	8005c14 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005bec:	4b3f      	ldr	r3, [pc, #252]	@ (8005cec <xQueueGenericSend+0x200>)
 8005bee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bf2:	601a      	str	r2, [r3, #0]
 8005bf4:	f3bf 8f4f 	dsb	sy
 8005bf8:	f3bf 8f6f 	isb	sy
 8005bfc:	e00a      	b.n	8005c14 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005bfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d007      	beq.n	8005c14 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005c04:	4b39      	ldr	r3, [pc, #228]	@ (8005cec <xQueueGenericSend+0x200>)
 8005c06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c0a:	601a      	str	r2, [r3, #0]
 8005c0c:	f3bf 8f4f 	dsb	sy
 8005c10:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005c14:	f002 fe3a 	bl	800888c <vPortExitCritical>
				return pdPASS;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	e063      	b.n	8005ce4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d103      	bne.n	8005c2a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005c22:	f002 fe33 	bl	800888c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005c26:	2300      	movs	r3, #0
 8005c28:	e05c      	b.n	8005ce4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005c2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d106      	bne.n	8005c3e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005c30:	f107 0314 	add.w	r3, r7, #20
 8005c34:	4618      	mov	r0, r3
 8005c36:	f001 faef 	bl	8007218 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005c3e:	f002 fe25 	bl	800888c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005c42:	f000 ffab 	bl	8006b9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c46:	f002 fdef 	bl	8008828 <vPortEnterCritical>
 8005c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c4c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005c50:	b25b      	sxtb	r3, r3
 8005c52:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c56:	d103      	bne.n	8005c60 <xQueueGenericSend+0x174>
 8005c58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c62:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005c66:	b25b      	sxtb	r3, r3
 8005c68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c6c:	d103      	bne.n	8005c76 <xQueueGenericSend+0x18a>
 8005c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c70:	2200      	movs	r2, #0
 8005c72:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005c76:	f002 fe09 	bl	800888c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005c7a:	1d3a      	adds	r2, r7, #4
 8005c7c:	f107 0314 	add.w	r3, r7, #20
 8005c80:	4611      	mov	r1, r2
 8005c82:	4618      	mov	r0, r3
 8005c84:	f001 fade 	bl	8007244 <xTaskCheckForTimeOut>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d124      	bne.n	8005cd8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005c8e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005c90:	f000 fc5e 	bl	8006550 <prvIsQueueFull>
 8005c94:	4603      	mov	r3, r0
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d018      	beq.n	8005ccc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c9c:	3310      	adds	r3, #16
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	4611      	mov	r1, r2
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f001 fa02 	bl	80070ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005ca8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005caa:	f000 fbe9 	bl	8006480 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005cae:	f000 ff83 	bl	8006bb8 <xTaskResumeAll>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	f47f af7c 	bne.w	8005bb2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005cba:	4b0c      	ldr	r3, [pc, #48]	@ (8005cec <xQueueGenericSend+0x200>)
 8005cbc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005cc0:	601a      	str	r2, [r3, #0]
 8005cc2:	f3bf 8f4f 	dsb	sy
 8005cc6:	f3bf 8f6f 	isb	sy
 8005cca:	e772      	b.n	8005bb2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005ccc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005cce:	f000 fbd7 	bl	8006480 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005cd2:	f000 ff71 	bl	8006bb8 <xTaskResumeAll>
 8005cd6:	e76c      	b.n	8005bb2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005cd8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005cda:	f000 fbd1 	bl	8006480 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005cde:	f000 ff6b 	bl	8006bb8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005ce2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3738      	adds	r7, #56	@ 0x38
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}
 8005cec:	e000ed04 	.word	0xe000ed04

08005cf0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b090      	sub	sp, #64	@ 0x40
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	60f8      	str	r0, [r7, #12]
 8005cf8:	60b9      	str	r1, [r7, #8]
 8005cfa:	607a      	str	r2, [r7, #4]
 8005cfc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005d02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d10b      	bne.n	8005d20 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005d08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d0c:	f383 8811 	msr	BASEPRI, r3
 8005d10:	f3bf 8f6f 	isb	sy
 8005d14:	f3bf 8f4f 	dsb	sy
 8005d18:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005d1a:	bf00      	nop
 8005d1c:	bf00      	nop
 8005d1e:	e7fd      	b.n	8005d1c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d103      	bne.n	8005d2e <xQueueGenericSendFromISR+0x3e>
 8005d26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d101      	bne.n	8005d32 <xQueueGenericSendFromISR+0x42>
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e000      	b.n	8005d34 <xQueueGenericSendFromISR+0x44>
 8005d32:	2300      	movs	r3, #0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d10b      	bne.n	8005d50 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005d38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d3c:	f383 8811 	msr	BASEPRI, r3
 8005d40:	f3bf 8f6f 	isb	sy
 8005d44:	f3bf 8f4f 	dsb	sy
 8005d48:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005d4a:	bf00      	nop
 8005d4c:	bf00      	nop
 8005d4e:	e7fd      	b.n	8005d4c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	2b02      	cmp	r3, #2
 8005d54:	d103      	bne.n	8005d5e <xQueueGenericSendFromISR+0x6e>
 8005d56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d101      	bne.n	8005d62 <xQueueGenericSendFromISR+0x72>
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e000      	b.n	8005d64 <xQueueGenericSendFromISR+0x74>
 8005d62:	2300      	movs	r3, #0
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d10b      	bne.n	8005d80 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005d68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d6c:	f383 8811 	msr	BASEPRI, r3
 8005d70:	f3bf 8f6f 	isb	sy
 8005d74:	f3bf 8f4f 	dsb	sy
 8005d78:	623b      	str	r3, [r7, #32]
}
 8005d7a:	bf00      	nop
 8005d7c:	bf00      	nop
 8005d7e:	e7fd      	b.n	8005d7c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005d80:	f002 fe32 	bl	80089e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005d84:	f3ef 8211 	mrs	r2, BASEPRI
 8005d88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d8c:	f383 8811 	msr	BASEPRI, r3
 8005d90:	f3bf 8f6f 	isb	sy
 8005d94:	f3bf 8f4f 	dsb	sy
 8005d98:	61fa      	str	r2, [r7, #28]
 8005d9a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005d9c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005d9e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005da0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005da2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005da4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005da6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d302      	bcc.n	8005db2 <xQueueGenericSendFromISR+0xc2>
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	2b02      	cmp	r3, #2
 8005db0:	d12f      	bne.n	8005e12 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005db2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005db4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005db8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005dbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005dc2:	683a      	ldr	r2, [r7, #0]
 8005dc4:	68b9      	ldr	r1, [r7, #8]
 8005dc6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005dc8:	f000 faca 	bl	8006360 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005dcc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005dd0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005dd4:	d112      	bne.n	8005dfc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005dd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d016      	beq.n	8005e0c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005dde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005de0:	3324      	adds	r3, #36	@ 0x24
 8005de2:	4618      	mov	r0, r3
 8005de4:	f001 f9b4 	bl	8007150 <xTaskRemoveFromEventList>
 8005de8:	4603      	mov	r3, r0
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d00e      	beq.n	8005e0c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d00b      	beq.n	8005e0c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2201      	movs	r2, #1
 8005df8:	601a      	str	r2, [r3, #0]
 8005dfa:	e007      	b.n	8005e0c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005dfc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005e00:	3301      	adds	r3, #1
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	b25a      	sxtb	r2, r3
 8005e06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005e10:	e001      	b.n	8005e16 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005e12:	2300      	movs	r3, #0
 8005e14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e18:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005e20:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005e22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3740      	adds	r7, #64	@ 0x40
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b08e      	sub	sp, #56	@ 0x38
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d10b      	bne.n	8005e58 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8005e40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e44:	f383 8811 	msr	BASEPRI, r3
 8005e48:	f3bf 8f6f 	isb	sy
 8005e4c:	f3bf 8f4f 	dsb	sy
 8005e50:	623b      	str	r3, [r7, #32]
}
 8005e52:	bf00      	nop
 8005e54:	bf00      	nop
 8005e56:	e7fd      	b.n	8005e54 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d00b      	beq.n	8005e78 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8005e60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e64:	f383 8811 	msr	BASEPRI, r3
 8005e68:	f3bf 8f6f 	isb	sy
 8005e6c:	f3bf 8f4f 	dsb	sy
 8005e70:	61fb      	str	r3, [r7, #28]
}
 8005e72:	bf00      	nop
 8005e74:	bf00      	nop
 8005e76:	e7fd      	b.n	8005e74 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d103      	bne.n	8005e88 <xQueueGiveFromISR+0x5c>
 8005e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d101      	bne.n	8005e8c <xQueueGiveFromISR+0x60>
 8005e88:	2301      	movs	r3, #1
 8005e8a:	e000      	b.n	8005e8e <xQueueGiveFromISR+0x62>
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d10b      	bne.n	8005eaa <xQueueGiveFromISR+0x7e>
	__asm volatile
 8005e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e96:	f383 8811 	msr	BASEPRI, r3
 8005e9a:	f3bf 8f6f 	isb	sy
 8005e9e:	f3bf 8f4f 	dsb	sy
 8005ea2:	61bb      	str	r3, [r7, #24]
}
 8005ea4:	bf00      	nop
 8005ea6:	bf00      	nop
 8005ea8:	e7fd      	b.n	8005ea6 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005eaa:	f002 fd9d 	bl	80089e8 <vPortValidateInterruptPriority>
	__asm volatile
 8005eae:	f3ef 8211 	mrs	r2, BASEPRI
 8005eb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eb6:	f383 8811 	msr	BASEPRI, r3
 8005eba:	f3bf 8f6f 	isb	sy
 8005ebe:	f3bf 8f4f 	dsb	sy
 8005ec2:	617a      	str	r2, [r7, #20]
 8005ec4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005ec6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005ec8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ecc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ece:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ed2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ed4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d22b      	bcs.n	8005f32 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005edc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005ee0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005ee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ee6:	1c5a      	adds	r2, r3, #1
 8005ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eea:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005eec:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005ef0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005ef4:	d112      	bne.n	8005f1c <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d016      	beq.n	8005f2c <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f00:	3324      	adds	r3, #36	@ 0x24
 8005f02:	4618      	mov	r0, r3
 8005f04:	f001 f924 	bl	8007150 <xTaskRemoveFromEventList>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d00e      	beq.n	8005f2c <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d00b      	beq.n	8005f2c <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	2201      	movs	r2, #1
 8005f18:	601a      	str	r2, [r3, #0]
 8005f1a:	e007      	b.n	8005f2c <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005f1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005f20:	3301      	adds	r3, #1
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	b25a      	sxtb	r2, r3
 8005f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f30:	e001      	b.n	8005f36 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005f32:	2300      	movs	r3, #0
 8005f34:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f38:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	f383 8811 	msr	BASEPRI, r3
}
 8005f40:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005f42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3738      	adds	r7, #56	@ 0x38
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b08c      	sub	sp, #48	@ 0x30
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	60f8      	str	r0, [r7, #12]
 8005f54:	60b9      	str	r1, [r7, #8]
 8005f56:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d10b      	bne.n	8005f7e <xQueueReceive+0x32>
	__asm volatile
 8005f66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f6a:	f383 8811 	msr	BASEPRI, r3
 8005f6e:	f3bf 8f6f 	isb	sy
 8005f72:	f3bf 8f4f 	dsb	sy
 8005f76:	623b      	str	r3, [r7, #32]
}
 8005f78:	bf00      	nop
 8005f7a:	bf00      	nop
 8005f7c:	e7fd      	b.n	8005f7a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d103      	bne.n	8005f8c <xQueueReceive+0x40>
 8005f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d101      	bne.n	8005f90 <xQueueReceive+0x44>
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e000      	b.n	8005f92 <xQueueReceive+0x46>
 8005f90:	2300      	movs	r3, #0
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d10b      	bne.n	8005fae <xQueueReceive+0x62>
	__asm volatile
 8005f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f9a:	f383 8811 	msr	BASEPRI, r3
 8005f9e:	f3bf 8f6f 	isb	sy
 8005fa2:	f3bf 8f4f 	dsb	sy
 8005fa6:	61fb      	str	r3, [r7, #28]
}
 8005fa8:	bf00      	nop
 8005faa:	bf00      	nop
 8005fac:	e7fd      	b.n	8005faa <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005fae:	f001 fbbf 	bl	8007730 <xTaskGetSchedulerState>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d102      	bne.n	8005fbe <xQueueReceive+0x72>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d101      	bne.n	8005fc2 <xQueueReceive+0x76>
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	e000      	b.n	8005fc4 <xQueueReceive+0x78>
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d10b      	bne.n	8005fe0 <xQueueReceive+0x94>
	__asm volatile
 8005fc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fcc:	f383 8811 	msr	BASEPRI, r3
 8005fd0:	f3bf 8f6f 	isb	sy
 8005fd4:	f3bf 8f4f 	dsb	sy
 8005fd8:	61bb      	str	r3, [r7, #24]
}
 8005fda:	bf00      	nop
 8005fdc:	bf00      	nop
 8005fde:	e7fd      	b.n	8005fdc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005fe0:	f002 fc22 	bl	8008828 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fe8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d01f      	beq.n	8006030 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005ff0:	68b9      	ldr	r1, [r7, #8]
 8005ff2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ff4:	f000 fa1e 	bl	8006434 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ffa:	1e5a      	subs	r2, r3, #1
 8005ffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ffe:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006002:	691b      	ldr	r3, [r3, #16]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d00f      	beq.n	8006028 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800600a:	3310      	adds	r3, #16
 800600c:	4618      	mov	r0, r3
 800600e:	f001 f89f 	bl	8007150 <xTaskRemoveFromEventList>
 8006012:	4603      	mov	r3, r0
 8006014:	2b00      	cmp	r3, #0
 8006016:	d007      	beq.n	8006028 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006018:	4b3c      	ldr	r3, [pc, #240]	@ (800610c <xQueueReceive+0x1c0>)
 800601a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800601e:	601a      	str	r2, [r3, #0]
 8006020:	f3bf 8f4f 	dsb	sy
 8006024:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006028:	f002 fc30 	bl	800888c <vPortExitCritical>
				return pdPASS;
 800602c:	2301      	movs	r3, #1
 800602e:	e069      	b.n	8006104 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d103      	bne.n	800603e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006036:	f002 fc29 	bl	800888c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800603a:	2300      	movs	r3, #0
 800603c:	e062      	b.n	8006104 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800603e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006040:	2b00      	cmp	r3, #0
 8006042:	d106      	bne.n	8006052 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006044:	f107 0310 	add.w	r3, r7, #16
 8006048:	4618      	mov	r0, r3
 800604a:	f001 f8e5 	bl	8007218 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800604e:	2301      	movs	r3, #1
 8006050:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006052:	f002 fc1b 	bl	800888c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006056:	f000 fda1 	bl	8006b9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800605a:	f002 fbe5 	bl	8008828 <vPortEnterCritical>
 800605e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006060:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006064:	b25b      	sxtb	r3, r3
 8006066:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800606a:	d103      	bne.n	8006074 <xQueueReceive+0x128>
 800606c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800606e:	2200      	movs	r2, #0
 8006070:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006076:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800607a:	b25b      	sxtb	r3, r3
 800607c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006080:	d103      	bne.n	800608a <xQueueReceive+0x13e>
 8006082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006084:	2200      	movs	r2, #0
 8006086:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800608a:	f002 fbff 	bl	800888c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800608e:	1d3a      	adds	r2, r7, #4
 8006090:	f107 0310 	add.w	r3, r7, #16
 8006094:	4611      	mov	r1, r2
 8006096:	4618      	mov	r0, r3
 8006098:	f001 f8d4 	bl	8007244 <xTaskCheckForTimeOut>
 800609c:	4603      	mov	r3, r0
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d123      	bne.n	80060ea <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80060a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80060a4:	f000 fa3e 	bl	8006524 <prvIsQueueEmpty>
 80060a8:	4603      	mov	r3, r0
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d017      	beq.n	80060de <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80060ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060b0:	3324      	adds	r3, #36	@ 0x24
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	4611      	mov	r1, r2
 80060b6:	4618      	mov	r0, r3
 80060b8:	f000 fff8 	bl	80070ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80060bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80060be:	f000 f9df 	bl	8006480 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80060c2:	f000 fd79 	bl	8006bb8 <xTaskResumeAll>
 80060c6:	4603      	mov	r3, r0
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d189      	bne.n	8005fe0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80060cc:	4b0f      	ldr	r3, [pc, #60]	@ (800610c <xQueueReceive+0x1c0>)
 80060ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060d2:	601a      	str	r2, [r3, #0]
 80060d4:	f3bf 8f4f 	dsb	sy
 80060d8:	f3bf 8f6f 	isb	sy
 80060dc:	e780      	b.n	8005fe0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80060de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80060e0:	f000 f9ce 	bl	8006480 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80060e4:	f000 fd68 	bl	8006bb8 <xTaskResumeAll>
 80060e8:	e77a      	b.n	8005fe0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80060ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80060ec:	f000 f9c8 	bl	8006480 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80060f0:	f000 fd62 	bl	8006bb8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80060f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80060f6:	f000 fa15 	bl	8006524 <prvIsQueueEmpty>
 80060fa:	4603      	mov	r3, r0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	f43f af6f 	beq.w	8005fe0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006102:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006104:	4618      	mov	r0, r3
 8006106:	3730      	adds	r7, #48	@ 0x30
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}
 800610c:	e000ed04 	.word	0xe000ed04

08006110 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b08e      	sub	sp, #56	@ 0x38
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800611a:	2300      	movs	r3, #0
 800611c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006122:	2300      	movs	r3, #0
 8006124:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006128:	2b00      	cmp	r3, #0
 800612a:	d10b      	bne.n	8006144 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800612c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006130:	f383 8811 	msr	BASEPRI, r3
 8006134:	f3bf 8f6f 	isb	sy
 8006138:	f3bf 8f4f 	dsb	sy
 800613c:	623b      	str	r3, [r7, #32]
}
 800613e:	bf00      	nop
 8006140:	bf00      	nop
 8006142:	e7fd      	b.n	8006140 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006144:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006148:	2b00      	cmp	r3, #0
 800614a:	d00b      	beq.n	8006164 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800614c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006150:	f383 8811 	msr	BASEPRI, r3
 8006154:	f3bf 8f6f 	isb	sy
 8006158:	f3bf 8f4f 	dsb	sy
 800615c:	61fb      	str	r3, [r7, #28]
}
 800615e:	bf00      	nop
 8006160:	bf00      	nop
 8006162:	e7fd      	b.n	8006160 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006164:	f001 fae4 	bl	8007730 <xTaskGetSchedulerState>
 8006168:	4603      	mov	r3, r0
 800616a:	2b00      	cmp	r3, #0
 800616c:	d102      	bne.n	8006174 <xQueueSemaphoreTake+0x64>
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d101      	bne.n	8006178 <xQueueSemaphoreTake+0x68>
 8006174:	2301      	movs	r3, #1
 8006176:	e000      	b.n	800617a <xQueueSemaphoreTake+0x6a>
 8006178:	2300      	movs	r3, #0
 800617a:	2b00      	cmp	r3, #0
 800617c:	d10b      	bne.n	8006196 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800617e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006182:	f383 8811 	msr	BASEPRI, r3
 8006186:	f3bf 8f6f 	isb	sy
 800618a:	f3bf 8f4f 	dsb	sy
 800618e:	61bb      	str	r3, [r7, #24]
}
 8006190:	bf00      	nop
 8006192:	bf00      	nop
 8006194:	e7fd      	b.n	8006192 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006196:	f002 fb47 	bl	8008828 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800619a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800619c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800619e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80061a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d024      	beq.n	80061f0 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80061a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061a8:	1e5a      	subs	r2, r3, #1
 80061aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061ac:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80061ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d104      	bne.n	80061c0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80061b6:	f001 fc35 	bl	8007a24 <pvTaskIncrementMutexHeldCount>
 80061ba:	4602      	mov	r2, r0
 80061bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061be:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061c2:	691b      	ldr	r3, [r3, #16]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d00f      	beq.n	80061e8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80061c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061ca:	3310      	adds	r3, #16
 80061cc:	4618      	mov	r0, r3
 80061ce:	f000 ffbf 	bl	8007150 <xTaskRemoveFromEventList>
 80061d2:	4603      	mov	r3, r0
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d007      	beq.n	80061e8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80061d8:	4b54      	ldr	r3, [pc, #336]	@ (800632c <xQueueSemaphoreTake+0x21c>)
 80061da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061de:	601a      	str	r2, [r3, #0]
 80061e0:	f3bf 8f4f 	dsb	sy
 80061e4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80061e8:	f002 fb50 	bl	800888c <vPortExitCritical>
				return pdPASS;
 80061ec:	2301      	movs	r3, #1
 80061ee:	e098      	b.n	8006322 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d112      	bne.n	800621c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80061f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d00b      	beq.n	8006214 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80061fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006200:	f383 8811 	msr	BASEPRI, r3
 8006204:	f3bf 8f6f 	isb	sy
 8006208:	f3bf 8f4f 	dsb	sy
 800620c:	617b      	str	r3, [r7, #20]
}
 800620e:	bf00      	nop
 8006210:	bf00      	nop
 8006212:	e7fd      	b.n	8006210 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006214:	f002 fb3a 	bl	800888c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006218:	2300      	movs	r3, #0
 800621a:	e082      	b.n	8006322 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800621c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800621e:	2b00      	cmp	r3, #0
 8006220:	d106      	bne.n	8006230 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006222:	f107 030c 	add.w	r3, r7, #12
 8006226:	4618      	mov	r0, r3
 8006228:	f000 fff6 	bl	8007218 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800622c:	2301      	movs	r3, #1
 800622e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006230:	f002 fb2c 	bl	800888c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006234:	f000 fcb2 	bl	8006b9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006238:	f002 faf6 	bl	8008828 <vPortEnterCritical>
 800623c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800623e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006242:	b25b      	sxtb	r3, r3
 8006244:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006248:	d103      	bne.n	8006252 <xQueueSemaphoreTake+0x142>
 800624a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800624c:	2200      	movs	r2, #0
 800624e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006252:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006254:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006258:	b25b      	sxtb	r3, r3
 800625a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800625e:	d103      	bne.n	8006268 <xQueueSemaphoreTake+0x158>
 8006260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006262:	2200      	movs	r2, #0
 8006264:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006268:	f002 fb10 	bl	800888c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800626c:	463a      	mov	r2, r7
 800626e:	f107 030c 	add.w	r3, r7, #12
 8006272:	4611      	mov	r1, r2
 8006274:	4618      	mov	r0, r3
 8006276:	f000 ffe5 	bl	8007244 <xTaskCheckForTimeOut>
 800627a:	4603      	mov	r3, r0
 800627c:	2b00      	cmp	r3, #0
 800627e:	d132      	bne.n	80062e6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006280:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006282:	f000 f94f 	bl	8006524 <prvIsQueueEmpty>
 8006286:	4603      	mov	r3, r0
 8006288:	2b00      	cmp	r3, #0
 800628a:	d026      	beq.n	80062da <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800628c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d109      	bne.n	80062a8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8006294:	f002 fac8 	bl	8008828 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	4618      	mov	r0, r3
 800629e:	f001 fa65 	bl	800776c <xTaskPriorityInherit>
 80062a2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80062a4:	f002 faf2 	bl	800888c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80062a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062aa:	3324      	adds	r3, #36	@ 0x24
 80062ac:	683a      	ldr	r2, [r7, #0]
 80062ae:	4611      	mov	r1, r2
 80062b0:	4618      	mov	r0, r3
 80062b2:	f000 fefb 	bl	80070ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80062b6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80062b8:	f000 f8e2 	bl	8006480 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80062bc:	f000 fc7c 	bl	8006bb8 <xTaskResumeAll>
 80062c0:	4603      	mov	r3, r0
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	f47f af67 	bne.w	8006196 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80062c8:	4b18      	ldr	r3, [pc, #96]	@ (800632c <xQueueSemaphoreTake+0x21c>)
 80062ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062ce:	601a      	str	r2, [r3, #0]
 80062d0:	f3bf 8f4f 	dsb	sy
 80062d4:	f3bf 8f6f 	isb	sy
 80062d8:	e75d      	b.n	8006196 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80062da:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80062dc:	f000 f8d0 	bl	8006480 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80062e0:	f000 fc6a 	bl	8006bb8 <xTaskResumeAll>
 80062e4:	e757      	b.n	8006196 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80062e6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80062e8:	f000 f8ca 	bl	8006480 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80062ec:	f000 fc64 	bl	8006bb8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80062f0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80062f2:	f000 f917 	bl	8006524 <prvIsQueueEmpty>
 80062f6:	4603      	mov	r3, r0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	f43f af4c 	beq.w	8006196 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80062fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006300:	2b00      	cmp	r3, #0
 8006302:	d00d      	beq.n	8006320 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8006304:	f002 fa90 	bl	8008828 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006308:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800630a:	f000 f811 	bl	8006330 <prvGetDisinheritPriorityAfterTimeout>
 800630e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006316:	4618      	mov	r0, r3
 8006318:	f001 fb00 	bl	800791c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800631c:	f002 fab6 	bl	800888c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006320:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006322:	4618      	mov	r0, r3
 8006324:	3738      	adds	r7, #56	@ 0x38
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	e000ed04 	.word	0xe000ed04

08006330 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006330:	b480      	push	{r7}
 8006332:	b085      	sub	sp, #20
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800633c:	2b00      	cmp	r3, #0
 800633e:	d006      	beq.n	800634e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800634a:	60fb      	str	r3, [r7, #12]
 800634c:	e001      	b.n	8006352 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800634e:	2300      	movs	r3, #0
 8006350:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006352:	68fb      	ldr	r3, [r7, #12]
	}
 8006354:	4618      	mov	r0, r3
 8006356:	3714      	adds	r7, #20
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr

08006360 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b086      	sub	sp, #24
 8006364:	af00      	add	r7, sp, #0
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800636c:	2300      	movs	r3, #0
 800636e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006374:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800637a:	2b00      	cmp	r3, #0
 800637c:	d10d      	bne.n	800639a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d14d      	bne.n	8006422 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	4618      	mov	r0, r3
 800638c:	f001 fa56 	bl	800783c <xTaskPriorityDisinherit>
 8006390:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2200      	movs	r2, #0
 8006396:	609a      	str	r2, [r3, #8]
 8006398:	e043      	b.n	8006422 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d119      	bne.n	80063d4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	6858      	ldr	r0, [r3, #4]
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063a8:	461a      	mov	r2, r3
 80063aa:	68b9      	ldr	r1, [r7, #8]
 80063ac:	f002 ff94 	bl	80092d8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	685a      	ldr	r2, [r3, #4]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063b8:	441a      	add	r2, r3
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	685a      	ldr	r2, [r3, #4]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d32b      	bcc.n	8006422 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	605a      	str	r2, [r3, #4]
 80063d2:	e026      	b.n	8006422 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	68d8      	ldr	r0, [r3, #12]
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063dc:	461a      	mov	r2, r3
 80063de:	68b9      	ldr	r1, [r7, #8]
 80063e0:	f002 ff7a 	bl	80092d8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	68da      	ldr	r2, [r3, #12]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063ec:	425b      	negs	r3, r3
 80063ee:	441a      	add	r2, r3
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	68da      	ldr	r2, [r3, #12]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d207      	bcs.n	8006410 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	689a      	ldr	r2, [r3, #8]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006408:	425b      	negs	r3, r3
 800640a:	441a      	add	r2, r3
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2b02      	cmp	r3, #2
 8006414:	d105      	bne.n	8006422 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d002      	beq.n	8006422 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	3b01      	subs	r3, #1
 8006420:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	1c5a      	adds	r2, r3, #1
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800642a:	697b      	ldr	r3, [r7, #20]
}
 800642c:	4618      	mov	r0, r3
 800642e:	3718      	adds	r7, #24
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}

08006434 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b082      	sub	sp, #8
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006442:	2b00      	cmp	r3, #0
 8006444:	d018      	beq.n	8006478 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	68da      	ldr	r2, [r3, #12]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800644e:	441a      	add	r2, r3
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	68da      	ldr	r2, [r3, #12]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	429a      	cmp	r2, r3
 800645e:	d303      	bcc.n	8006468 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	68d9      	ldr	r1, [r3, #12]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006470:	461a      	mov	r2, r3
 8006472:	6838      	ldr	r0, [r7, #0]
 8006474:	f002 ff30 	bl	80092d8 <memcpy>
	}
}
 8006478:	bf00      	nop
 800647a:	3708      	adds	r7, #8
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}

08006480 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006488:	f002 f9ce 	bl	8008828 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006492:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006494:	e011      	b.n	80064ba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800649a:	2b00      	cmp	r3, #0
 800649c:	d012      	beq.n	80064c4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	3324      	adds	r3, #36	@ 0x24
 80064a2:	4618      	mov	r0, r3
 80064a4:	f000 fe54 	bl	8007150 <xTaskRemoveFromEventList>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d001      	beq.n	80064b2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80064ae:	f000 ff2d 	bl	800730c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80064b2:	7bfb      	ldrb	r3, [r7, #15]
 80064b4:	3b01      	subs	r3, #1
 80064b6:	b2db      	uxtb	r3, r3
 80064b8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80064ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	dce9      	bgt.n	8006496 <prvUnlockQueue+0x16>
 80064c2:	e000      	b.n	80064c6 <prvUnlockQueue+0x46>
					break;
 80064c4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	22ff      	movs	r2, #255	@ 0xff
 80064ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80064ce:	f002 f9dd 	bl	800888c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80064d2:	f002 f9a9 	bl	8008828 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80064dc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80064de:	e011      	b.n	8006504 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	691b      	ldr	r3, [r3, #16]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d012      	beq.n	800650e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	3310      	adds	r3, #16
 80064ec:	4618      	mov	r0, r3
 80064ee:	f000 fe2f 	bl	8007150 <xTaskRemoveFromEventList>
 80064f2:	4603      	mov	r3, r0
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d001      	beq.n	80064fc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80064f8:	f000 ff08 	bl	800730c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80064fc:	7bbb      	ldrb	r3, [r7, #14]
 80064fe:	3b01      	subs	r3, #1
 8006500:	b2db      	uxtb	r3, r3
 8006502:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006504:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006508:	2b00      	cmp	r3, #0
 800650a:	dce9      	bgt.n	80064e0 <prvUnlockQueue+0x60>
 800650c:	e000      	b.n	8006510 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800650e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	22ff      	movs	r2, #255	@ 0xff
 8006514:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006518:	f002 f9b8 	bl	800888c <vPortExitCritical>
}
 800651c:	bf00      	nop
 800651e:	3710      	adds	r7, #16
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}

08006524 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b084      	sub	sp, #16
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800652c:	f002 f97c 	bl	8008828 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006534:	2b00      	cmp	r3, #0
 8006536:	d102      	bne.n	800653e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006538:	2301      	movs	r3, #1
 800653a:	60fb      	str	r3, [r7, #12]
 800653c:	e001      	b.n	8006542 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800653e:	2300      	movs	r3, #0
 8006540:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006542:	f002 f9a3 	bl	800888c <vPortExitCritical>

	return xReturn;
 8006546:	68fb      	ldr	r3, [r7, #12]
}
 8006548:	4618      	mov	r0, r3
 800654a:	3710      	adds	r7, #16
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}

08006550 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b084      	sub	sp, #16
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006558:	f002 f966 	bl	8008828 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006564:	429a      	cmp	r2, r3
 8006566:	d102      	bne.n	800656e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006568:	2301      	movs	r3, #1
 800656a:	60fb      	str	r3, [r7, #12]
 800656c:	e001      	b.n	8006572 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800656e:	2300      	movs	r3, #0
 8006570:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006572:	f002 f98b 	bl	800888c <vPortExitCritical>

	return xReturn;
 8006576:	68fb      	ldr	r3, [r7, #12]
}
 8006578:	4618      	mov	r0, r3
 800657a:	3710      	adds	r7, #16
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}

08006580 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006580:	b480      	push	{r7}
 8006582:	b085      	sub	sp, #20
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800658a:	2300      	movs	r3, #0
 800658c:	60fb      	str	r3, [r7, #12]
 800658e:	e014      	b.n	80065ba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006590:	4a0f      	ldr	r2, [pc, #60]	@ (80065d0 <vQueueAddToRegistry+0x50>)
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d10b      	bne.n	80065b4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800659c:	490c      	ldr	r1, [pc, #48]	@ (80065d0 <vQueueAddToRegistry+0x50>)
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	683a      	ldr	r2, [r7, #0]
 80065a2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80065a6:	4a0a      	ldr	r2, [pc, #40]	@ (80065d0 <vQueueAddToRegistry+0x50>)
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	00db      	lsls	r3, r3, #3
 80065ac:	4413      	add	r3, r2
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80065b2:	e006      	b.n	80065c2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	3301      	adds	r3, #1
 80065b8:	60fb      	str	r3, [r7, #12]
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2b07      	cmp	r3, #7
 80065be:	d9e7      	bls.n	8006590 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80065c0:	bf00      	nop
 80065c2:	bf00      	nop
 80065c4:	3714      	adds	r7, #20
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr
 80065ce:	bf00      	nop
 80065d0:	20000a58 	.word	0x20000a58

080065d4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b086      	sub	sp, #24
 80065d8:	af00      	add	r7, sp, #0
 80065da:	60f8      	str	r0, [r7, #12]
 80065dc:	60b9      	str	r1, [r7, #8]
 80065de:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80065e4:	f002 f920 	bl	8008828 <vPortEnterCritical>
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80065ee:	b25b      	sxtb	r3, r3
 80065f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80065f4:	d103      	bne.n	80065fe <vQueueWaitForMessageRestricted+0x2a>
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	2200      	movs	r2, #0
 80065fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006604:	b25b      	sxtb	r3, r3
 8006606:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800660a:	d103      	bne.n	8006614 <vQueueWaitForMessageRestricted+0x40>
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	2200      	movs	r2, #0
 8006610:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006614:	f002 f93a 	bl	800888c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800661c:	2b00      	cmp	r3, #0
 800661e:	d106      	bne.n	800662e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	3324      	adds	r3, #36	@ 0x24
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	68b9      	ldr	r1, [r7, #8]
 8006628:	4618      	mov	r0, r3
 800662a:	f000 fd65 	bl	80070f8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800662e:	6978      	ldr	r0, [r7, #20]
 8006630:	f7ff ff26 	bl	8006480 <prvUnlockQueue>
	}
 8006634:	bf00      	nop
 8006636:	3718      	adds	r7, #24
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}

0800663c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800663c:	b580      	push	{r7, lr}
 800663e:	b08e      	sub	sp, #56	@ 0x38
 8006640:	af04      	add	r7, sp, #16
 8006642:	60f8      	str	r0, [r7, #12]
 8006644:	60b9      	str	r1, [r7, #8]
 8006646:	607a      	str	r2, [r7, #4]
 8006648:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800664a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800664c:	2b00      	cmp	r3, #0
 800664e:	d10b      	bne.n	8006668 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006654:	f383 8811 	msr	BASEPRI, r3
 8006658:	f3bf 8f6f 	isb	sy
 800665c:	f3bf 8f4f 	dsb	sy
 8006660:	623b      	str	r3, [r7, #32]
}
 8006662:	bf00      	nop
 8006664:	bf00      	nop
 8006666:	e7fd      	b.n	8006664 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006668:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800666a:	2b00      	cmp	r3, #0
 800666c:	d10b      	bne.n	8006686 <xTaskCreateStatic+0x4a>
	__asm volatile
 800666e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006672:	f383 8811 	msr	BASEPRI, r3
 8006676:	f3bf 8f6f 	isb	sy
 800667a:	f3bf 8f4f 	dsb	sy
 800667e:	61fb      	str	r3, [r7, #28]
}
 8006680:	bf00      	nop
 8006682:	bf00      	nop
 8006684:	e7fd      	b.n	8006682 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006686:	23d8      	movs	r3, #216	@ 0xd8
 8006688:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	2bd8      	cmp	r3, #216	@ 0xd8
 800668e:	d00b      	beq.n	80066a8 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006694:	f383 8811 	msr	BASEPRI, r3
 8006698:	f3bf 8f6f 	isb	sy
 800669c:	f3bf 8f4f 	dsb	sy
 80066a0:	61bb      	str	r3, [r7, #24]
}
 80066a2:	bf00      	nop
 80066a4:	bf00      	nop
 80066a6:	e7fd      	b.n	80066a4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80066a8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80066aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d01e      	beq.n	80066ee <xTaskCreateStatic+0xb2>
 80066b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d01b      	beq.n	80066ee <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80066b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066b8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80066ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80066be:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80066c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066c2:	2202      	movs	r2, #2
 80066c4:	f883 20d5 	strb.w	r2, [r3, #213]	@ 0xd5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80066c8:	2300      	movs	r3, #0
 80066ca:	9303      	str	r3, [sp, #12]
 80066cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ce:	9302      	str	r3, [sp, #8]
 80066d0:	f107 0314 	add.w	r3, r7, #20
 80066d4:	9301      	str	r3, [sp, #4]
 80066d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066d8:	9300      	str	r3, [sp, #0]
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	68b9      	ldr	r1, [r7, #8]
 80066e0:	68f8      	ldr	r0, [r7, #12]
 80066e2:	f000 f851 	bl	8006788 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80066e6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80066e8:	f000 f90e 	bl	8006908 <prvAddNewTaskToReadyList>
 80066ec:	e001      	b.n	80066f2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80066ee:	2300      	movs	r3, #0
 80066f0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80066f2:	697b      	ldr	r3, [r7, #20]
	}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3728      	adds	r7, #40	@ 0x28
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}

080066fc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b08c      	sub	sp, #48	@ 0x30
 8006700:	af04      	add	r7, sp, #16
 8006702:	60f8      	str	r0, [r7, #12]
 8006704:	60b9      	str	r1, [r7, #8]
 8006706:	603b      	str	r3, [r7, #0]
 8006708:	4613      	mov	r3, r2
 800670a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800670c:	88fb      	ldrh	r3, [r7, #6]
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	4618      	mov	r0, r3
 8006712:	f002 f9ab 	bl	8008a6c <pvPortMalloc>
 8006716:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d00e      	beq.n	800673c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800671e:	20d8      	movs	r0, #216	@ 0xd8
 8006720:	f002 f9a4 	bl	8008a6c <pvPortMalloc>
 8006724:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006726:	69fb      	ldr	r3, [r7, #28]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d003      	beq.n	8006734 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800672c:	69fb      	ldr	r3, [r7, #28]
 800672e:	697a      	ldr	r2, [r7, #20]
 8006730:	631a      	str	r2, [r3, #48]	@ 0x30
 8006732:	e005      	b.n	8006740 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006734:	6978      	ldr	r0, [r7, #20]
 8006736:	f002 fa67 	bl	8008c08 <vPortFree>
 800673a:	e001      	b.n	8006740 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800673c:	2300      	movs	r3, #0
 800673e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006740:	69fb      	ldr	r3, [r7, #28]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d017      	beq.n	8006776 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006746:	69fb      	ldr	r3, [r7, #28]
 8006748:	2200      	movs	r2, #0
 800674a:	f883 20d5 	strb.w	r2, [r3, #213]	@ 0xd5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800674e:	88fa      	ldrh	r2, [r7, #6]
 8006750:	2300      	movs	r3, #0
 8006752:	9303      	str	r3, [sp, #12]
 8006754:	69fb      	ldr	r3, [r7, #28]
 8006756:	9302      	str	r3, [sp, #8]
 8006758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800675a:	9301      	str	r3, [sp, #4]
 800675c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800675e:	9300      	str	r3, [sp, #0]
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	68b9      	ldr	r1, [r7, #8]
 8006764:	68f8      	ldr	r0, [r7, #12]
 8006766:	f000 f80f 	bl	8006788 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800676a:	69f8      	ldr	r0, [r7, #28]
 800676c:	f000 f8cc 	bl	8006908 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006770:	2301      	movs	r3, #1
 8006772:	61bb      	str	r3, [r7, #24]
 8006774:	e002      	b.n	800677c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006776:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800677a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800677c:	69bb      	ldr	r3, [r7, #24]
	}
 800677e:	4618      	mov	r0, r3
 8006780:	3720      	adds	r7, #32
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}
	...

08006788 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b088      	sub	sp, #32
 800678c:	af00      	add	r7, sp, #0
 800678e:	60f8      	str	r0, [r7, #12]
 8006790:	60b9      	str	r1, [r7, #8]
 8006792:	607a      	str	r2, [r7, #4]
 8006794:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006798:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	009b      	lsls	r3, r3, #2
 800679e:	461a      	mov	r2, r3
 80067a0:	21a5      	movs	r1, #165	@ 0xa5
 80067a2:	f002 fd07 	bl	80091b4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80067a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80067b0:	3b01      	subs	r3, #1
 80067b2:	009b      	lsls	r3, r3, #2
 80067b4:	4413      	add	r3, r2
 80067b6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80067b8:	69bb      	ldr	r3, [r7, #24]
 80067ba:	f023 0307 	bic.w	r3, r3, #7
 80067be:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80067c0:	69bb      	ldr	r3, [r7, #24]
 80067c2:	f003 0307 	and.w	r3, r3, #7
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d00b      	beq.n	80067e2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80067ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067ce:	f383 8811 	msr	BASEPRI, r3
 80067d2:	f3bf 8f6f 	isb	sy
 80067d6:	f3bf 8f4f 	dsb	sy
 80067da:	617b      	str	r3, [r7, #20]
}
 80067dc:	bf00      	nop
 80067de:	bf00      	nop
 80067e0:	e7fd      	b.n	80067de <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 80067e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067e4:	69ba      	ldr	r2, [r7, #24]
 80067e6:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d01f      	beq.n	800682e <prvInitialiseNewTask+0xa6>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80067ee:	2300      	movs	r3, #0
 80067f0:	61fb      	str	r3, [r7, #28]
 80067f2:	e012      	b.n	800681a <prvInitialiseNewTask+0x92>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80067f4:	68ba      	ldr	r2, [r7, #8]
 80067f6:	69fb      	ldr	r3, [r7, #28]
 80067f8:	4413      	add	r3, r2
 80067fa:	7819      	ldrb	r1, [r3, #0]
 80067fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067fe:	69fb      	ldr	r3, [r7, #28]
 8006800:	4413      	add	r3, r2
 8006802:	3334      	adds	r3, #52	@ 0x34
 8006804:	460a      	mov	r2, r1
 8006806:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006808:	68ba      	ldr	r2, [r7, #8]
 800680a:	69fb      	ldr	r3, [r7, #28]
 800680c:	4413      	add	r3, r2
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d006      	beq.n	8006822 <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	3301      	adds	r3, #1
 8006818:	61fb      	str	r3, [r7, #28]
 800681a:	69fb      	ldr	r3, [r7, #28]
 800681c:	2b0f      	cmp	r3, #15
 800681e:	d9e9      	bls.n	80067f4 <prvInitialiseNewTask+0x6c>
 8006820:	e000      	b.n	8006824 <prvInitialiseNewTask+0x9c>
			{
				break;
 8006822:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006826:	2200      	movs	r2, #0
 8006828:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800682c:	e003      	b.n	8006836 <prvInitialiseNewTask+0xae>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800682e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006830:	2200      	movs	r2, #0
 8006832:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006838:	2b37      	cmp	r3, #55	@ 0x37
 800683a:	d901      	bls.n	8006840 <prvInitialiseNewTask+0xb8>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800683c:	2337      	movs	r3, #55	@ 0x37
 800683e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006842:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006844:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006848:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800684a:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->uxMutexesHeld = 0;
 800684c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800684e:	2200      	movs	r2, #0
 8006850:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006854:	3304      	adds	r3, #4
 8006856:	4618      	mov	r0, r3
 8006858:	f7fe ff6e 	bl	8005738 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800685c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800685e:	3318      	adds	r3, #24
 8006860:	4618      	mov	r0, r3
 8006862:	f7fe ff69 	bl	8005738 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006868:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800686a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800686c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800686e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006874:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006878:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800687a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800687c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800687e:	2200      	movs	r2, #0
 8006880:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	}
	#endif

	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
	{
		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 8006884:	2300      	movs	r3, #0
 8006886:	61fb      	str	r3, [r7, #28]
 8006888:	e008      	b.n	800689c <prvInitialiseNewTask+0x114>
		{
			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 800688a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800688c:	69fa      	ldr	r2, [r7, #28]
 800688e:	3216      	adds	r2, #22
 8006890:	2100      	movs	r1, #0
 8006892:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 8006896:	69fb      	ldr	r3, [r7, #28]
 8006898:	3301      	adds	r3, #1
 800689a:	61fb      	str	r3, [r7, #28]
 800689c:	69fb      	ldr	r3, [r7, #28]
 800689e:	2b09      	cmp	r3, #9
 80068a0:	d9f3      	bls.n	800688a <prvInitialiseNewTask+0x102>
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80068a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068a4:	2200      	movs	r2, #0
 80068a6:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80068aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ac:	2200      	movs	r2, #0
 80068ae:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80068b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068b4:	3384      	adds	r3, #132	@ 0x84
 80068b6:	224c      	movs	r2, #76	@ 0x4c
 80068b8:	2100      	movs	r1, #0
 80068ba:	4618      	mov	r0, r3
 80068bc:	f002 fc7a 	bl	80091b4 <memset>
 80068c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068c2:	4a0e      	ldr	r2, [pc, #56]	@ (80068fc <prvInitialiseNewTask+0x174>)
 80068c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 80068c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ca:	4a0d      	ldr	r2, [pc, #52]	@ (8006900 <prvInitialiseNewTask+0x178>)
 80068cc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 80068d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068d2:	4a0c      	ldr	r2, [pc, #48]	@ (8006904 <prvInitialiseNewTask+0x17c>)
 80068d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80068d8:	683a      	ldr	r2, [r7, #0]
 80068da:	68f9      	ldr	r1, [r7, #12]
 80068dc:	69b8      	ldr	r0, [r7, #24]
 80068de:	f001 fe71 	bl	80085c4 <pxPortInitialiseStack>
 80068e2:	4602      	mov	r2, r0
 80068e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068e6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80068e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d002      	beq.n	80068f4 <prvInitialiseNewTask+0x16c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80068ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068f2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80068f4:	bf00      	nop
 80068f6:	3720      	adds	r7, #32
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}
 80068fc:	20004cf4 	.word	0x20004cf4
 8006900:	20004d5c 	.word	0x20004d5c
 8006904:	20004dc4 	.word	0x20004dc4

08006908 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b082      	sub	sp, #8
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006910:	f001 ff8a 	bl	8008828 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006914:	4b2d      	ldr	r3, [pc, #180]	@ (80069cc <prvAddNewTaskToReadyList+0xc4>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	3301      	adds	r3, #1
 800691a:	4a2c      	ldr	r2, [pc, #176]	@ (80069cc <prvAddNewTaskToReadyList+0xc4>)
 800691c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800691e:	4b2c      	ldr	r3, [pc, #176]	@ (80069d0 <prvAddNewTaskToReadyList+0xc8>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d109      	bne.n	800693a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006926:	4a2a      	ldr	r2, [pc, #168]	@ (80069d0 <prvAddNewTaskToReadyList+0xc8>)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800692c:	4b27      	ldr	r3, [pc, #156]	@ (80069cc <prvAddNewTaskToReadyList+0xc4>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	2b01      	cmp	r3, #1
 8006932:	d110      	bne.n	8006956 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006934:	f000 fd52 	bl	80073dc <prvInitialiseTaskLists>
 8006938:	e00d      	b.n	8006956 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800693a:	4b26      	ldr	r3, [pc, #152]	@ (80069d4 <prvAddNewTaskToReadyList+0xcc>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d109      	bne.n	8006956 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006942:	4b23      	ldr	r3, [pc, #140]	@ (80069d0 <prvAddNewTaskToReadyList+0xc8>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800694c:	429a      	cmp	r2, r3
 800694e:	d802      	bhi.n	8006956 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006950:	4a1f      	ldr	r2, [pc, #124]	@ (80069d0 <prvAddNewTaskToReadyList+0xc8>)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006956:	4b20      	ldr	r3, [pc, #128]	@ (80069d8 <prvAddNewTaskToReadyList+0xd0>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	3301      	adds	r3, #1
 800695c:	4a1e      	ldr	r2, [pc, #120]	@ (80069d8 <prvAddNewTaskToReadyList+0xd0>)
 800695e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006960:	4b1d      	ldr	r3, [pc, #116]	@ (80069d8 <prvAddNewTaskToReadyList+0xd0>)
 8006962:	681a      	ldr	r2, [r3, #0]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	649a      	str	r2, [r3, #72]	@ 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800696c:	4b1b      	ldr	r3, [pc, #108]	@ (80069dc <prvAddNewTaskToReadyList+0xd4>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	429a      	cmp	r2, r3
 8006972:	d903      	bls.n	800697c <prvAddNewTaskToReadyList+0x74>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006978:	4a18      	ldr	r2, [pc, #96]	@ (80069dc <prvAddNewTaskToReadyList+0xd4>)
 800697a:	6013      	str	r3, [r2, #0]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006980:	4613      	mov	r3, r2
 8006982:	009b      	lsls	r3, r3, #2
 8006984:	4413      	add	r3, r2
 8006986:	009b      	lsls	r3, r3, #2
 8006988:	4a15      	ldr	r2, [pc, #84]	@ (80069e0 <prvAddNewTaskToReadyList+0xd8>)
 800698a:	441a      	add	r2, r3
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	3304      	adds	r3, #4
 8006990:	4619      	mov	r1, r3
 8006992:	4610      	mov	r0, r2
 8006994:	f7fe fedd 	bl	8005752 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006998:	f001 ff78 	bl	800888c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800699c:	4b0d      	ldr	r3, [pc, #52]	@ (80069d4 <prvAddNewTaskToReadyList+0xcc>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d00e      	beq.n	80069c2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80069a4:	4b0a      	ldr	r3, [pc, #40]	@ (80069d0 <prvAddNewTaskToReadyList+0xc8>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069ae:	429a      	cmp	r2, r3
 80069b0:	d207      	bcs.n	80069c2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80069b2:	4b0c      	ldr	r3, [pc, #48]	@ (80069e4 <prvAddNewTaskToReadyList+0xdc>)
 80069b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069b8:	601a      	str	r2, [r3, #0]
 80069ba:	f3bf 8f4f 	dsb	sy
 80069be:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80069c2:	bf00      	nop
 80069c4:	3708      	adds	r7, #8
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
 80069ca:	bf00      	nop
 80069cc:	20000f6c 	.word	0x20000f6c
 80069d0:	20000a98 	.word	0x20000a98
 80069d4:	20000f78 	.word	0x20000f78
 80069d8:	20000f88 	.word	0x20000f88
 80069dc:	20000f74 	.word	0x20000f74
 80069e0:	20000a9c 	.word	0x20000a9c
 80069e4:	e000ed04 	.word	0xe000ed04

080069e8 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b088      	sub	sp, #32
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 80069f4:	69bb      	ldr	r3, [r7, #24]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d10b      	bne.n	8006a12 <eTaskGetState+0x2a>
	__asm volatile
 80069fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069fe:	f383 8811 	msr	BASEPRI, r3
 8006a02:	f3bf 8f6f 	isb	sy
 8006a06:	f3bf 8f4f 	dsb	sy
 8006a0a:	60bb      	str	r3, [r7, #8]
}
 8006a0c:	bf00      	nop
 8006a0e:	bf00      	nop
 8006a10:	e7fd      	b.n	8006a0e <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8006a12:	4b24      	ldr	r3, [pc, #144]	@ (8006aa4 <eTaskGetState+0xbc>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	69ba      	ldr	r2, [r7, #24]
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d102      	bne.n	8006a22 <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	77fb      	strb	r3, [r7, #31]
 8006a20:	e03a      	b.n	8006a98 <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 8006a22:	f001 ff01 	bl	8008828 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8006a26:	69bb      	ldr	r3, [r7, #24]
 8006a28:	695b      	ldr	r3, [r3, #20]
 8006a2a:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8006a2c:	4b1e      	ldr	r3, [pc, #120]	@ (8006aa8 <eTaskGetState+0xc0>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8006a32:	4b1e      	ldr	r3, [pc, #120]	@ (8006aac <eTaskGetState+0xc4>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8006a38:	f001 ff28 	bl	800888c <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8006a3c:	697a      	ldr	r2, [r7, #20]
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	429a      	cmp	r2, r3
 8006a42:	d003      	beq.n	8006a4c <eTaskGetState+0x64>
 8006a44:	697a      	ldr	r2, [r7, #20]
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d102      	bne.n	8006a52 <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8006a4c:	2302      	movs	r3, #2
 8006a4e:	77fb      	strb	r3, [r7, #31]
 8006a50:	e022      	b.n	8006a98 <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	4a16      	ldr	r2, [pc, #88]	@ (8006ab0 <eTaskGetState+0xc8>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d112      	bne.n	8006a80 <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8006a5a:	69bb      	ldr	r3, [r7, #24]
 8006a5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d10b      	bne.n	8006a7a <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8006a62:	69bb      	ldr	r3, [r7, #24]
 8006a64:	f893 30d4 	ldrb.w	r3, [r3, #212]	@ 0xd4
 8006a68:	b2db      	uxtb	r3, r3
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	d102      	bne.n	8006a74 <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 8006a6e:	2302      	movs	r3, #2
 8006a70:	77fb      	strb	r3, [r7, #31]
 8006a72:	e011      	b.n	8006a98 <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 8006a74:	2303      	movs	r3, #3
 8006a76:	77fb      	strb	r3, [r7, #31]
 8006a78:	e00e      	b.n	8006a98 <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8006a7a:	2302      	movs	r3, #2
 8006a7c:	77fb      	strb	r3, [r7, #31]
 8006a7e:	e00b      	b.n	8006a98 <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	4a0c      	ldr	r2, [pc, #48]	@ (8006ab4 <eTaskGetState+0xcc>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d002      	beq.n	8006a8e <eTaskGetState+0xa6>
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d102      	bne.n	8006a94 <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8006a8e:	2304      	movs	r3, #4
 8006a90:	77fb      	strb	r3, [r7, #31]
 8006a92:	e001      	b.n	8006a98 <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8006a94:	2301      	movs	r3, #1
 8006a96:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8006a98:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3720      	adds	r7, #32
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}
 8006aa2:	bf00      	nop
 8006aa4:	20000a98 	.word	0x20000a98
 8006aa8:	20000f24 	.word	0x20000f24
 8006aac:	20000f28 	.word	0x20000f28
 8006ab0:	20000f58 	.word	0x20000f58
 8006ab4:	20000f40 	.word	0x20000f40

08006ab8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b08a      	sub	sp, #40	@ 0x28
 8006abc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006ac6:	463a      	mov	r2, r7
 8006ac8:	1d39      	adds	r1, r7, #4
 8006aca:	f107 0308 	add.w	r3, r7, #8
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f7fe fdde 	bl	8005690 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006ad4:	6839      	ldr	r1, [r7, #0]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	68ba      	ldr	r2, [r7, #8]
 8006ada:	9202      	str	r2, [sp, #8]
 8006adc:	9301      	str	r3, [sp, #4]
 8006ade:	2300      	movs	r3, #0
 8006ae0:	9300      	str	r3, [sp, #0]
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	460a      	mov	r2, r1
 8006ae6:	4925      	ldr	r1, [pc, #148]	@ (8006b7c <vTaskStartScheduler+0xc4>)
 8006ae8:	4825      	ldr	r0, [pc, #148]	@ (8006b80 <vTaskStartScheduler+0xc8>)
 8006aea:	f7ff fda7 	bl	800663c <xTaskCreateStatic>
 8006aee:	4603      	mov	r3, r0
 8006af0:	4a24      	ldr	r2, [pc, #144]	@ (8006b84 <vTaskStartScheduler+0xcc>)
 8006af2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006af4:	4b23      	ldr	r3, [pc, #140]	@ (8006b84 <vTaskStartScheduler+0xcc>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d002      	beq.n	8006b02 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006afc:	2301      	movs	r3, #1
 8006afe:	617b      	str	r3, [r7, #20]
 8006b00:	e001      	b.n	8006b06 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006b02:	2300      	movs	r3, #0
 8006b04:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	d102      	bne.n	8006b12 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006b0c:	f001 f960 	bl	8007dd0 <xTimerCreateTimerTask>
 8006b10:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d11d      	bne.n	8006b54 <vTaskStartScheduler+0x9c>
	__asm volatile
 8006b18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b1c:	f383 8811 	msr	BASEPRI, r3
 8006b20:	f3bf 8f6f 	isb	sy
 8006b24:	f3bf 8f4f 	dsb	sy
 8006b28:	613b      	str	r3, [r7, #16]
}
 8006b2a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006b2c:	4b16      	ldr	r3, [pc, #88]	@ (8006b88 <vTaskStartScheduler+0xd0>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	3384      	adds	r3, #132	@ 0x84
 8006b32:	4a16      	ldr	r2, [pc, #88]	@ (8006b8c <vTaskStartScheduler+0xd4>)
 8006b34:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006b36:	4b16      	ldr	r3, [pc, #88]	@ (8006b90 <vTaskStartScheduler+0xd8>)
 8006b38:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006b3c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006b3e:	4b15      	ldr	r3, [pc, #84]	@ (8006b94 <vTaskStartScheduler+0xdc>)
 8006b40:	2201      	movs	r2, #1
 8006b42:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006b44:	4b14      	ldr	r3, [pc, #80]	@ (8006b98 <vTaskStartScheduler+0xe0>)
 8006b46:	2200      	movs	r2, #0
 8006b48:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8006b4a:	f7fb f857 	bl	8001bfc <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006b4e:	f001 fdc7 	bl	80086e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006b52:	e00f      	b.n	8006b74 <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006b5a:	d10b      	bne.n	8006b74 <vTaskStartScheduler+0xbc>
	__asm volatile
 8006b5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b60:	f383 8811 	msr	BASEPRI, r3
 8006b64:	f3bf 8f6f 	isb	sy
 8006b68:	f3bf 8f4f 	dsb	sy
 8006b6c:	60fb      	str	r3, [r7, #12]
}
 8006b6e:	bf00      	nop
 8006b70:	bf00      	nop
 8006b72:	e7fd      	b.n	8006b70 <vTaskStartScheduler+0xb8>
}
 8006b74:	bf00      	nop
 8006b76:	3718      	adds	r7, #24
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}
 8006b7c:	0800aaa8 	.word	0x0800aaa8
 8006b80:	08007325 	.word	0x08007325
 8006b84:	20000f90 	.word	0x20000f90
 8006b88:	20000a98 	.word	0x20000a98
 8006b8c:	20000014 	.word	0x20000014
 8006b90:	20000f8c 	.word	0x20000f8c
 8006b94:	20000f78 	.word	0x20000f78
 8006b98:	20000f70 	.word	0x20000f70

08006b9c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006ba0:	4b04      	ldr	r3, [pc, #16]	@ (8006bb4 <vTaskSuspendAll+0x18>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	3301      	adds	r3, #1
 8006ba6:	4a03      	ldr	r2, [pc, #12]	@ (8006bb4 <vTaskSuspendAll+0x18>)
 8006ba8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006baa:	bf00      	nop
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr
 8006bb4:	20000f94 	.word	0x20000f94

08006bb8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b084      	sub	sp, #16
 8006bbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006bc6:	4b42      	ldr	r3, [pc, #264]	@ (8006cd0 <xTaskResumeAll+0x118>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d10b      	bne.n	8006be6 <xTaskResumeAll+0x2e>
	__asm volatile
 8006bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bd2:	f383 8811 	msr	BASEPRI, r3
 8006bd6:	f3bf 8f6f 	isb	sy
 8006bda:	f3bf 8f4f 	dsb	sy
 8006bde:	603b      	str	r3, [r7, #0]
}
 8006be0:	bf00      	nop
 8006be2:	bf00      	nop
 8006be4:	e7fd      	b.n	8006be2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006be6:	f001 fe1f 	bl	8008828 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006bea:	4b39      	ldr	r3, [pc, #228]	@ (8006cd0 <xTaskResumeAll+0x118>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	3b01      	subs	r3, #1
 8006bf0:	4a37      	ldr	r2, [pc, #220]	@ (8006cd0 <xTaskResumeAll+0x118>)
 8006bf2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006bf4:	4b36      	ldr	r3, [pc, #216]	@ (8006cd0 <xTaskResumeAll+0x118>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d162      	bne.n	8006cc2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006bfc:	4b35      	ldr	r3, [pc, #212]	@ (8006cd4 <xTaskResumeAll+0x11c>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d05e      	beq.n	8006cc2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006c04:	e02f      	b.n	8006c66 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c06:	4b34      	ldr	r3, [pc, #208]	@ (8006cd8 <xTaskResumeAll+0x120>)
 8006c08:	68db      	ldr	r3, [r3, #12]
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	3318      	adds	r3, #24
 8006c12:	4618      	mov	r0, r3
 8006c14:	f7fe fdfa 	bl	800580c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	3304      	adds	r3, #4
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f7fe fdf5 	bl	800580c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c26:	4b2d      	ldr	r3, [pc, #180]	@ (8006cdc <xTaskResumeAll+0x124>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d903      	bls.n	8006c36 <xTaskResumeAll+0x7e>
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c32:	4a2a      	ldr	r2, [pc, #168]	@ (8006cdc <xTaskResumeAll+0x124>)
 8006c34:	6013      	str	r3, [r2, #0]
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c3a:	4613      	mov	r3, r2
 8006c3c:	009b      	lsls	r3, r3, #2
 8006c3e:	4413      	add	r3, r2
 8006c40:	009b      	lsls	r3, r3, #2
 8006c42:	4a27      	ldr	r2, [pc, #156]	@ (8006ce0 <xTaskResumeAll+0x128>)
 8006c44:	441a      	add	r2, r3
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	3304      	adds	r3, #4
 8006c4a:	4619      	mov	r1, r3
 8006c4c:	4610      	mov	r0, r2
 8006c4e:	f7fe fd80 	bl	8005752 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c56:	4b23      	ldr	r3, [pc, #140]	@ (8006ce4 <xTaskResumeAll+0x12c>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d302      	bcc.n	8006c66 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006c60:	4b21      	ldr	r3, [pc, #132]	@ (8006ce8 <xTaskResumeAll+0x130>)
 8006c62:	2201      	movs	r2, #1
 8006c64:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006c66:	4b1c      	ldr	r3, [pc, #112]	@ (8006cd8 <xTaskResumeAll+0x120>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d1cb      	bne.n	8006c06 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d001      	beq.n	8006c78 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006c74:	f000 fd2c 	bl	80076d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006c78:	4b1c      	ldr	r3, [pc, #112]	@ (8006cec <xTaskResumeAll+0x134>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d010      	beq.n	8006ca6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006c84:	f000 f8d6 	bl	8006e34 <xTaskIncrementTick>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d002      	beq.n	8006c94 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006c8e:	4b16      	ldr	r3, [pc, #88]	@ (8006ce8 <xTaskResumeAll+0x130>)
 8006c90:	2201      	movs	r2, #1
 8006c92:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	3b01      	subs	r3, #1
 8006c98:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d1f1      	bne.n	8006c84 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006ca0:	4b12      	ldr	r3, [pc, #72]	@ (8006cec <xTaskResumeAll+0x134>)
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006ca6:	4b10      	ldr	r3, [pc, #64]	@ (8006ce8 <xTaskResumeAll+0x130>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d009      	beq.n	8006cc2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006cb2:	4b0f      	ldr	r3, [pc, #60]	@ (8006cf0 <xTaskResumeAll+0x138>)
 8006cb4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006cb8:	601a      	str	r2, [r3, #0]
 8006cba:	f3bf 8f4f 	dsb	sy
 8006cbe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006cc2:	f001 fde3 	bl	800888c <vPortExitCritical>

	return xAlreadyYielded;
 8006cc6:	68bb      	ldr	r3, [r7, #8]
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3710      	adds	r7, #16
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}
 8006cd0:	20000f94 	.word	0x20000f94
 8006cd4:	20000f6c 	.word	0x20000f6c
 8006cd8:	20000f2c 	.word	0x20000f2c
 8006cdc:	20000f74 	.word	0x20000f74
 8006ce0:	20000a9c 	.word	0x20000a9c
 8006ce4:	20000a98 	.word	0x20000a98
 8006ce8:	20000f80 	.word	0x20000f80
 8006cec:	20000f7c 	.word	0x20000f7c
 8006cf0:	e000ed04 	.word	0xe000ed04

08006cf4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b083      	sub	sp, #12
 8006cf8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006cfa:	4b05      	ldr	r3, [pc, #20]	@ (8006d10 <xTaskGetTickCount+0x1c>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006d00:	687b      	ldr	r3, [r7, #4]
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	370c      	adds	r7, #12
 8006d06:	46bd      	mov	sp, r7
 8006d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0c:	4770      	bx	lr
 8006d0e:	bf00      	nop
 8006d10:	20000f70 	.word	0x20000f70

08006d14 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b086      	sub	sp, #24
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	60f8      	str	r0, [r7, #12]
 8006d1c:	60b9      	str	r1, [r7, #8]
 8006d1e:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 8006d20:	2300      	movs	r3, #0
 8006d22:	617b      	str	r3, [r7, #20]
 8006d24:	2338      	movs	r3, #56	@ 0x38
 8006d26:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 8006d28:	f7ff ff38 	bl	8006b9c <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 8006d2c:	4b3b      	ldr	r3, [pc, #236]	@ (8006e1c <uxTaskGetSystemState+0x108>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	68ba      	ldr	r2, [r7, #8]
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d36a      	bcc.n	8006e0c <uxTaskGetSystemState+0xf8>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	3b01      	subs	r3, #1
 8006d3a:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 8006d3c:	697a      	ldr	r2, [r7, #20]
 8006d3e:	4613      	mov	r3, r2
 8006d40:	00db      	lsls	r3, r3, #3
 8006d42:	4413      	add	r3, r2
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	461a      	mov	r2, r3
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	1898      	adds	r0, r3, r2
 8006d4c:	693a      	ldr	r2, [r7, #16]
 8006d4e:	4613      	mov	r3, r2
 8006d50:	009b      	lsls	r3, r3, #2
 8006d52:	4413      	add	r3, r2
 8006d54:	009b      	lsls	r3, r3, #2
 8006d56:	4a32      	ldr	r2, [pc, #200]	@ (8006e20 <uxTaskGetSystemState+0x10c>)
 8006d58:	4413      	add	r3, r2
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	4619      	mov	r1, r3
 8006d5e:	f000 fc13 	bl	8007588 <prvListTasksWithinSingleList>
 8006d62:	4602      	mov	r2, r0
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	4413      	add	r3, r2
 8006d68:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d1e2      	bne.n	8006d36 <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 8006d70:	697a      	ldr	r2, [r7, #20]
 8006d72:	4613      	mov	r3, r2
 8006d74:	00db      	lsls	r3, r3, #3
 8006d76:	4413      	add	r3, r2
 8006d78:	009b      	lsls	r3, r3, #2
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	4413      	add	r3, r2
 8006d80:	4a28      	ldr	r2, [pc, #160]	@ (8006e24 <uxTaskGetSystemState+0x110>)
 8006d82:	6811      	ldr	r1, [r2, #0]
 8006d84:	2202      	movs	r2, #2
 8006d86:	4618      	mov	r0, r3
 8006d88:	f000 fbfe 	bl	8007588 <prvListTasksWithinSingleList>
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	4413      	add	r3, r2
 8006d92:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8006d94:	697a      	ldr	r2, [r7, #20]
 8006d96:	4613      	mov	r3, r2
 8006d98:	00db      	lsls	r3, r3, #3
 8006d9a:	4413      	add	r3, r2
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	461a      	mov	r2, r3
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	4413      	add	r3, r2
 8006da4:	4a20      	ldr	r2, [pc, #128]	@ (8006e28 <uxTaskGetSystemState+0x114>)
 8006da6:	6811      	ldr	r1, [r2, #0]
 8006da8:	2202      	movs	r2, #2
 8006daa:	4618      	mov	r0, r3
 8006dac:	f000 fbec 	bl	8007588 <prvListTasksWithinSingleList>
 8006db0:	4602      	mov	r2, r0
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	4413      	add	r3, r2
 8006db6:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8006db8:	697a      	ldr	r2, [r7, #20]
 8006dba:	4613      	mov	r3, r2
 8006dbc:	00db      	lsls	r3, r3, #3
 8006dbe:	4413      	add	r3, r2
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	4413      	add	r3, r2
 8006dc8:	2204      	movs	r2, #4
 8006dca:	4918      	ldr	r1, [pc, #96]	@ (8006e2c <uxTaskGetSystemState+0x118>)
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f000 fbdb 	bl	8007588 <prvListTasksWithinSingleList>
 8006dd2:	4602      	mov	r2, r0
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	4413      	add	r3, r2
 8006dd8:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 8006dda:	697a      	ldr	r2, [r7, #20]
 8006ddc:	4613      	mov	r3, r2
 8006dde:	00db      	lsls	r3, r3, #3
 8006de0:	4413      	add	r3, r2
 8006de2:	009b      	lsls	r3, r3, #2
 8006de4:	461a      	mov	r2, r3
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	4413      	add	r3, r2
 8006dea:	2203      	movs	r2, #3
 8006dec:	4910      	ldr	r1, [pc, #64]	@ (8006e30 <uxTaskGetSystemState+0x11c>)
 8006dee:	4618      	mov	r0, r3
 8006df0:	f000 fbca 	bl	8007588 <prvListTasksWithinSingleList>
 8006df4:	4602      	mov	r2, r0
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	4413      	add	r3, r2
 8006dfa:	617b      	str	r3, [r7, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1)
				{
					if( pulTotalRunTime != NULL )
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d004      	beq.n	8006e0c <uxTaskGetSystemState+0xf8>
					{
						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
						#else
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8006e02:	f7fa ff09 	bl	8001c18 <getRunTimeCounterValue>
 8006e06:	4602      	mov	r2, r0
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 8006e0c:	f7ff fed4 	bl	8006bb8 <xTaskResumeAll>

		return uxTask;
 8006e10:	697b      	ldr	r3, [r7, #20]
	}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3718      	adds	r7, #24
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}
 8006e1a:	bf00      	nop
 8006e1c:	20000f6c 	.word	0x20000f6c
 8006e20:	20000a9c 	.word	0x20000a9c
 8006e24:	20000f24 	.word	0x20000f24
 8006e28:	20000f28 	.word	0x20000f28
 8006e2c:	20000f40 	.word	0x20000f40
 8006e30:	20000f58 	.word	0x20000f58

08006e34 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b086      	sub	sp, #24
 8006e38:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e3e:	4b4f      	ldr	r3, [pc, #316]	@ (8006f7c <xTaskIncrementTick+0x148>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	f040 8090 	bne.w	8006f68 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006e48:	4b4d      	ldr	r3, [pc, #308]	@ (8006f80 <xTaskIncrementTick+0x14c>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	3301      	adds	r3, #1
 8006e4e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006e50:	4a4b      	ldr	r2, [pc, #300]	@ (8006f80 <xTaskIncrementTick+0x14c>)
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d121      	bne.n	8006ea0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006e5c:	4b49      	ldr	r3, [pc, #292]	@ (8006f84 <xTaskIncrementTick+0x150>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d00b      	beq.n	8006e7e <xTaskIncrementTick+0x4a>
	__asm volatile
 8006e66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e6a:	f383 8811 	msr	BASEPRI, r3
 8006e6e:	f3bf 8f6f 	isb	sy
 8006e72:	f3bf 8f4f 	dsb	sy
 8006e76:	603b      	str	r3, [r7, #0]
}
 8006e78:	bf00      	nop
 8006e7a:	bf00      	nop
 8006e7c:	e7fd      	b.n	8006e7a <xTaskIncrementTick+0x46>
 8006e7e:	4b41      	ldr	r3, [pc, #260]	@ (8006f84 <xTaskIncrementTick+0x150>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	60fb      	str	r3, [r7, #12]
 8006e84:	4b40      	ldr	r3, [pc, #256]	@ (8006f88 <xTaskIncrementTick+0x154>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a3e      	ldr	r2, [pc, #248]	@ (8006f84 <xTaskIncrementTick+0x150>)
 8006e8a:	6013      	str	r3, [r2, #0]
 8006e8c:	4a3e      	ldr	r2, [pc, #248]	@ (8006f88 <xTaskIncrementTick+0x154>)
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	6013      	str	r3, [r2, #0]
 8006e92:	4b3e      	ldr	r3, [pc, #248]	@ (8006f8c <xTaskIncrementTick+0x158>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	3301      	adds	r3, #1
 8006e98:	4a3c      	ldr	r2, [pc, #240]	@ (8006f8c <xTaskIncrementTick+0x158>)
 8006e9a:	6013      	str	r3, [r2, #0]
 8006e9c:	f000 fc18 	bl	80076d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006ea0:	4b3b      	ldr	r3, [pc, #236]	@ (8006f90 <xTaskIncrementTick+0x15c>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	693a      	ldr	r2, [r7, #16]
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	d349      	bcc.n	8006f3e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006eaa:	4b36      	ldr	r3, [pc, #216]	@ (8006f84 <xTaskIncrementTick+0x150>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d104      	bne.n	8006ebe <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006eb4:	4b36      	ldr	r3, [pc, #216]	@ (8006f90 <xTaskIncrementTick+0x15c>)
 8006eb6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006eba:	601a      	str	r2, [r3, #0]
					break;
 8006ebc:	e03f      	b.n	8006f3e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ebe:	4b31      	ldr	r3, [pc, #196]	@ (8006f84 <xTaskIncrementTick+0x150>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	68db      	ldr	r3, [r3, #12]
 8006ec4:	68db      	ldr	r3, [r3, #12]
 8006ec6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006ece:	693a      	ldr	r2, [r7, #16]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	d203      	bcs.n	8006ede <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006ed6:	4a2e      	ldr	r2, [pc, #184]	@ (8006f90 <xTaskIncrementTick+0x15c>)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006edc:	e02f      	b.n	8006f3e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	3304      	adds	r3, #4
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f7fe fc92 	bl	800580c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d004      	beq.n	8006efa <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	3318      	adds	r3, #24
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f7fe fc89 	bl	800580c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006efe:	4b25      	ldr	r3, [pc, #148]	@ (8006f94 <xTaskIncrementTick+0x160>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	429a      	cmp	r2, r3
 8006f04:	d903      	bls.n	8006f0e <xTaskIncrementTick+0xda>
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f0a:	4a22      	ldr	r2, [pc, #136]	@ (8006f94 <xTaskIncrementTick+0x160>)
 8006f0c:	6013      	str	r3, [r2, #0]
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f12:	4613      	mov	r3, r2
 8006f14:	009b      	lsls	r3, r3, #2
 8006f16:	4413      	add	r3, r2
 8006f18:	009b      	lsls	r3, r3, #2
 8006f1a:	4a1f      	ldr	r2, [pc, #124]	@ (8006f98 <xTaskIncrementTick+0x164>)
 8006f1c:	441a      	add	r2, r3
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	3304      	adds	r3, #4
 8006f22:	4619      	mov	r1, r3
 8006f24:	4610      	mov	r0, r2
 8006f26:	f7fe fc14 	bl	8005752 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f2e:	4b1b      	ldr	r3, [pc, #108]	@ (8006f9c <xTaskIncrementTick+0x168>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d3b8      	bcc.n	8006eaa <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f3c:	e7b5      	b.n	8006eaa <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006f3e:	4b17      	ldr	r3, [pc, #92]	@ (8006f9c <xTaskIncrementTick+0x168>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f44:	4914      	ldr	r1, [pc, #80]	@ (8006f98 <xTaskIncrementTick+0x164>)
 8006f46:	4613      	mov	r3, r2
 8006f48:	009b      	lsls	r3, r3, #2
 8006f4a:	4413      	add	r3, r2
 8006f4c:	009b      	lsls	r3, r3, #2
 8006f4e:	440b      	add	r3, r1
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	2b01      	cmp	r3, #1
 8006f54:	d901      	bls.n	8006f5a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006f56:	2301      	movs	r3, #1
 8006f58:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006f5a:	4b11      	ldr	r3, [pc, #68]	@ (8006fa0 <xTaskIncrementTick+0x16c>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d007      	beq.n	8006f72 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8006f62:	2301      	movs	r3, #1
 8006f64:	617b      	str	r3, [r7, #20]
 8006f66:	e004      	b.n	8006f72 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006f68:	4b0e      	ldr	r3, [pc, #56]	@ (8006fa4 <xTaskIncrementTick+0x170>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	3301      	adds	r3, #1
 8006f6e:	4a0d      	ldr	r2, [pc, #52]	@ (8006fa4 <xTaskIncrementTick+0x170>)
 8006f70:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006f72:	697b      	ldr	r3, [r7, #20]
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3718      	adds	r7, #24
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}
 8006f7c:	20000f94 	.word	0x20000f94
 8006f80:	20000f70 	.word	0x20000f70
 8006f84:	20000f24 	.word	0x20000f24
 8006f88:	20000f28 	.word	0x20000f28
 8006f8c:	20000f84 	.word	0x20000f84
 8006f90:	20000f8c 	.word	0x20000f8c
 8006f94:	20000f74 	.word	0x20000f74
 8006f98:	20000a9c 	.word	0x20000a9c
 8006f9c:	20000a98 	.word	0x20000a98
 8006fa0:	20000f80 	.word	0x20000f80
 8006fa4:	20000f7c 	.word	0x20000f7c

08006fa8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b084      	sub	sp, #16
 8006fac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006fae:	4b37      	ldr	r3, [pc, #220]	@ (800708c <vTaskSwitchContext+0xe4>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d003      	beq.n	8006fbe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006fb6:	4b36      	ldr	r3, [pc, #216]	@ (8007090 <vTaskSwitchContext+0xe8>)
 8006fb8:	2201      	movs	r2, #1
 8006fba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006fbc:	e062      	b.n	8007084 <vTaskSwitchContext+0xdc>
		xYieldPending = pdFALSE;
 8006fbe:	4b34      	ldr	r3, [pc, #208]	@ (8007090 <vTaskSwitchContext+0xe8>)
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8006fc4:	f7fa fe28 	bl	8001c18 <getRunTimeCounterValue>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	4a32      	ldr	r2, [pc, #200]	@ (8007094 <vTaskSwitchContext+0xec>)
 8006fcc:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8006fce:	4b31      	ldr	r3, [pc, #196]	@ (8007094 <vTaskSwitchContext+0xec>)
 8006fd0:	681a      	ldr	r2, [r3, #0]
 8006fd2:	4b31      	ldr	r3, [pc, #196]	@ (8007098 <vTaskSwitchContext+0xf0>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d90b      	bls.n	8006ff2 <vTaskSwitchContext+0x4a>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8006fda:	4b30      	ldr	r3, [pc, #192]	@ (800709c <vTaskSwitchContext+0xf4>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
 8006fe2:	4a2c      	ldr	r2, [pc, #176]	@ (8007094 <vTaskSwitchContext+0xec>)
 8006fe4:	6810      	ldr	r0, [r2, #0]
 8006fe6:	4a2c      	ldr	r2, [pc, #176]	@ (8007098 <vTaskSwitchContext+0xf0>)
 8006fe8:	6812      	ldr	r2, [r2, #0]
 8006fea:	1a82      	subs	r2, r0, r2
 8006fec:	440a      	add	r2, r1
 8006fee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
			ulTaskSwitchedInTime = ulTotalRunTime;
 8006ff2:	4b28      	ldr	r3, [pc, #160]	@ (8007094 <vTaskSwitchContext+0xec>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a28      	ldr	r2, [pc, #160]	@ (8007098 <vTaskSwitchContext+0xf0>)
 8006ff8:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ffa:	4b29      	ldr	r3, [pc, #164]	@ (80070a0 <vTaskSwitchContext+0xf8>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	60fb      	str	r3, [r7, #12]
 8007000:	e011      	b.n	8007026 <vTaskSwitchContext+0x7e>
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d10b      	bne.n	8007020 <vTaskSwitchContext+0x78>
	__asm volatile
 8007008:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800700c:	f383 8811 	msr	BASEPRI, r3
 8007010:	f3bf 8f6f 	isb	sy
 8007014:	f3bf 8f4f 	dsb	sy
 8007018:	607b      	str	r3, [r7, #4]
}
 800701a:	bf00      	nop
 800701c:	bf00      	nop
 800701e:	e7fd      	b.n	800701c <vTaskSwitchContext+0x74>
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	3b01      	subs	r3, #1
 8007024:	60fb      	str	r3, [r7, #12]
 8007026:	491f      	ldr	r1, [pc, #124]	@ (80070a4 <vTaskSwitchContext+0xfc>)
 8007028:	68fa      	ldr	r2, [r7, #12]
 800702a:	4613      	mov	r3, r2
 800702c:	009b      	lsls	r3, r3, #2
 800702e:	4413      	add	r3, r2
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	440b      	add	r3, r1
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d0e3      	beq.n	8007002 <vTaskSwitchContext+0x5a>
 800703a:	68fa      	ldr	r2, [r7, #12]
 800703c:	4613      	mov	r3, r2
 800703e:	009b      	lsls	r3, r3, #2
 8007040:	4413      	add	r3, r2
 8007042:	009b      	lsls	r3, r3, #2
 8007044:	4a17      	ldr	r2, [pc, #92]	@ (80070a4 <vTaskSwitchContext+0xfc>)
 8007046:	4413      	add	r3, r2
 8007048:	60bb      	str	r3, [r7, #8]
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	685a      	ldr	r2, [r3, #4]
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	605a      	str	r2, [r3, #4]
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	685a      	ldr	r2, [r3, #4]
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	3308      	adds	r3, #8
 800705c:	429a      	cmp	r2, r3
 800705e:	d104      	bne.n	800706a <vTaskSwitchContext+0xc2>
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	685a      	ldr	r2, [r3, #4]
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	605a      	str	r2, [r3, #4]
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	68db      	ldr	r3, [r3, #12]
 8007070:	4a0a      	ldr	r2, [pc, #40]	@ (800709c <vTaskSwitchContext+0xf4>)
 8007072:	6013      	str	r3, [r2, #0]
 8007074:	4a0a      	ldr	r2, [pc, #40]	@ (80070a0 <vTaskSwitchContext+0xf8>)
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800707a:	4b08      	ldr	r3, [pc, #32]	@ (800709c <vTaskSwitchContext+0xf4>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	3384      	adds	r3, #132	@ 0x84
 8007080:	4a09      	ldr	r2, [pc, #36]	@ (80070a8 <vTaskSwitchContext+0x100>)
 8007082:	6013      	str	r3, [r2, #0]
}
 8007084:	bf00      	nop
 8007086:	3710      	adds	r7, #16
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}
 800708c:	20000f94 	.word	0x20000f94
 8007090:	20000f80 	.word	0x20000f80
 8007094:	20000f9c 	.word	0x20000f9c
 8007098:	20000f98 	.word	0x20000f98
 800709c:	20000a98 	.word	0x20000a98
 80070a0:	20000f74 	.word	0x20000f74
 80070a4:	20000a9c 	.word	0x20000a9c
 80070a8:	20000014 	.word	0x20000014

080070ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b084      	sub	sp, #16
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d10b      	bne.n	80070d4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80070bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070c0:	f383 8811 	msr	BASEPRI, r3
 80070c4:	f3bf 8f6f 	isb	sy
 80070c8:	f3bf 8f4f 	dsb	sy
 80070cc:	60fb      	str	r3, [r7, #12]
}
 80070ce:	bf00      	nop
 80070d0:	bf00      	nop
 80070d2:	e7fd      	b.n	80070d0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80070d4:	4b07      	ldr	r3, [pc, #28]	@ (80070f4 <vTaskPlaceOnEventList+0x48>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	3318      	adds	r3, #24
 80070da:	4619      	mov	r1, r3
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f7fe fb5c 	bl	800579a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80070e2:	2101      	movs	r1, #1
 80070e4:	6838      	ldr	r0, [r7, #0]
 80070e6:	f000 fe1f 	bl	8007d28 <prvAddCurrentTaskToDelayedList>
}
 80070ea:	bf00      	nop
 80070ec:	3710      	adds	r7, #16
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
 80070f2:	bf00      	nop
 80070f4:	20000a98 	.word	0x20000a98

080070f8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b086      	sub	sp, #24
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	60f8      	str	r0, [r7, #12]
 8007100:	60b9      	str	r1, [r7, #8]
 8007102:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d10b      	bne.n	8007122 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800710a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800710e:	f383 8811 	msr	BASEPRI, r3
 8007112:	f3bf 8f6f 	isb	sy
 8007116:	f3bf 8f4f 	dsb	sy
 800711a:	617b      	str	r3, [r7, #20]
}
 800711c:	bf00      	nop
 800711e:	bf00      	nop
 8007120:	e7fd      	b.n	800711e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007122:	4b0a      	ldr	r3, [pc, #40]	@ (800714c <vTaskPlaceOnEventListRestricted+0x54>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	3318      	adds	r3, #24
 8007128:	4619      	mov	r1, r3
 800712a:	68f8      	ldr	r0, [r7, #12]
 800712c:	f7fe fb11 	bl	8005752 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d002      	beq.n	800713c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007136:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800713a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800713c:	6879      	ldr	r1, [r7, #4]
 800713e:	68b8      	ldr	r0, [r7, #8]
 8007140:	f000 fdf2 	bl	8007d28 <prvAddCurrentTaskToDelayedList>
	}
 8007144:	bf00      	nop
 8007146:	3718      	adds	r7, #24
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}
 800714c:	20000a98 	.word	0x20000a98

08007150 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b086      	sub	sp, #24
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	68db      	ldr	r3, [r3, #12]
 800715c:	68db      	ldr	r3, [r3, #12]
 800715e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d10b      	bne.n	800717e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800716a:	f383 8811 	msr	BASEPRI, r3
 800716e:	f3bf 8f6f 	isb	sy
 8007172:	f3bf 8f4f 	dsb	sy
 8007176:	60fb      	str	r3, [r7, #12]
}
 8007178:	bf00      	nop
 800717a:	bf00      	nop
 800717c:	e7fd      	b.n	800717a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	3318      	adds	r3, #24
 8007182:	4618      	mov	r0, r3
 8007184:	f7fe fb42 	bl	800580c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007188:	4b1d      	ldr	r3, [pc, #116]	@ (8007200 <xTaskRemoveFromEventList+0xb0>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d11d      	bne.n	80071cc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	3304      	adds	r3, #4
 8007194:	4618      	mov	r0, r3
 8007196:	f7fe fb39 	bl	800580c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800719e:	4b19      	ldr	r3, [pc, #100]	@ (8007204 <xTaskRemoveFromEventList+0xb4>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	429a      	cmp	r2, r3
 80071a4:	d903      	bls.n	80071ae <xTaskRemoveFromEventList+0x5e>
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071aa:	4a16      	ldr	r2, [pc, #88]	@ (8007204 <xTaskRemoveFromEventList+0xb4>)
 80071ac:	6013      	str	r3, [r2, #0]
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071b2:	4613      	mov	r3, r2
 80071b4:	009b      	lsls	r3, r3, #2
 80071b6:	4413      	add	r3, r2
 80071b8:	009b      	lsls	r3, r3, #2
 80071ba:	4a13      	ldr	r2, [pc, #76]	@ (8007208 <xTaskRemoveFromEventList+0xb8>)
 80071bc:	441a      	add	r2, r3
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	3304      	adds	r3, #4
 80071c2:	4619      	mov	r1, r3
 80071c4:	4610      	mov	r0, r2
 80071c6:	f7fe fac4 	bl	8005752 <vListInsertEnd>
 80071ca:	e005      	b.n	80071d8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	3318      	adds	r3, #24
 80071d0:	4619      	mov	r1, r3
 80071d2:	480e      	ldr	r0, [pc, #56]	@ (800720c <xTaskRemoveFromEventList+0xbc>)
 80071d4:	f7fe fabd 	bl	8005752 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071dc:	4b0c      	ldr	r3, [pc, #48]	@ (8007210 <xTaskRemoveFromEventList+0xc0>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071e2:	429a      	cmp	r2, r3
 80071e4:	d905      	bls.n	80071f2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80071e6:	2301      	movs	r3, #1
 80071e8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80071ea:	4b0a      	ldr	r3, [pc, #40]	@ (8007214 <xTaskRemoveFromEventList+0xc4>)
 80071ec:	2201      	movs	r2, #1
 80071ee:	601a      	str	r2, [r3, #0]
 80071f0:	e001      	b.n	80071f6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80071f2:	2300      	movs	r3, #0
 80071f4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80071f6:	697b      	ldr	r3, [r7, #20]
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3718      	adds	r7, #24
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}
 8007200:	20000f94 	.word	0x20000f94
 8007204:	20000f74 	.word	0x20000f74
 8007208:	20000a9c 	.word	0x20000a9c
 800720c:	20000f2c 	.word	0x20000f2c
 8007210:	20000a98 	.word	0x20000a98
 8007214:	20000f80 	.word	0x20000f80

08007218 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007218:	b480      	push	{r7}
 800721a:	b083      	sub	sp, #12
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007220:	4b06      	ldr	r3, [pc, #24]	@ (800723c <vTaskInternalSetTimeOutState+0x24>)
 8007222:	681a      	ldr	r2, [r3, #0]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007228:	4b05      	ldr	r3, [pc, #20]	@ (8007240 <vTaskInternalSetTimeOutState+0x28>)
 800722a:	681a      	ldr	r2, [r3, #0]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	605a      	str	r2, [r3, #4]
}
 8007230:	bf00      	nop
 8007232:	370c      	adds	r7, #12
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr
 800723c:	20000f84 	.word	0x20000f84
 8007240:	20000f70 	.word	0x20000f70

08007244 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b088      	sub	sp, #32
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d10b      	bne.n	800726c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007254:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007258:	f383 8811 	msr	BASEPRI, r3
 800725c:	f3bf 8f6f 	isb	sy
 8007260:	f3bf 8f4f 	dsb	sy
 8007264:	613b      	str	r3, [r7, #16]
}
 8007266:	bf00      	nop
 8007268:	bf00      	nop
 800726a:	e7fd      	b.n	8007268 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d10b      	bne.n	800728a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007276:	f383 8811 	msr	BASEPRI, r3
 800727a:	f3bf 8f6f 	isb	sy
 800727e:	f3bf 8f4f 	dsb	sy
 8007282:	60fb      	str	r3, [r7, #12]
}
 8007284:	bf00      	nop
 8007286:	bf00      	nop
 8007288:	e7fd      	b.n	8007286 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800728a:	f001 facd 	bl	8008828 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800728e:	4b1d      	ldr	r3, [pc, #116]	@ (8007304 <xTaskCheckForTimeOut+0xc0>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	69ba      	ldr	r2, [r7, #24]
 800729a:	1ad3      	subs	r3, r2, r3
 800729c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80072a6:	d102      	bne.n	80072ae <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80072a8:	2300      	movs	r3, #0
 80072aa:	61fb      	str	r3, [r7, #28]
 80072ac:	e023      	b.n	80072f6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	4b15      	ldr	r3, [pc, #84]	@ (8007308 <xTaskCheckForTimeOut+0xc4>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	429a      	cmp	r2, r3
 80072b8:	d007      	beq.n	80072ca <xTaskCheckForTimeOut+0x86>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	685b      	ldr	r3, [r3, #4]
 80072be:	69ba      	ldr	r2, [r7, #24]
 80072c0:	429a      	cmp	r2, r3
 80072c2:	d302      	bcc.n	80072ca <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80072c4:	2301      	movs	r3, #1
 80072c6:	61fb      	str	r3, [r7, #28]
 80072c8:	e015      	b.n	80072f6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	697a      	ldr	r2, [r7, #20]
 80072d0:	429a      	cmp	r2, r3
 80072d2:	d20b      	bcs.n	80072ec <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	1ad2      	subs	r2, r2, r3
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f7ff ff99 	bl	8007218 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80072e6:	2300      	movs	r3, #0
 80072e8:	61fb      	str	r3, [r7, #28]
 80072ea:	e004      	b.n	80072f6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	2200      	movs	r2, #0
 80072f0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80072f2:	2301      	movs	r3, #1
 80072f4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80072f6:	f001 fac9 	bl	800888c <vPortExitCritical>

	return xReturn;
 80072fa:	69fb      	ldr	r3, [r7, #28]
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3720      	adds	r7, #32
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}
 8007304:	20000f70 	.word	0x20000f70
 8007308:	20000f84 	.word	0x20000f84

0800730c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800730c:	b480      	push	{r7}
 800730e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007310:	4b03      	ldr	r3, [pc, #12]	@ (8007320 <vTaskMissedYield+0x14>)
 8007312:	2201      	movs	r2, #1
 8007314:	601a      	str	r2, [r3, #0]
}
 8007316:	bf00      	nop
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr
 8007320:	20000f80 	.word	0x20000f80

08007324 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b082      	sub	sp, #8
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800732c:	f000 f896 	bl	800745c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007330:	4b06      	ldr	r3, [pc, #24]	@ (800734c <prvIdleTask+0x28>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	2b01      	cmp	r3, #1
 8007336:	d9f9      	bls.n	800732c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007338:	4b05      	ldr	r3, [pc, #20]	@ (8007350 <prvIdleTask+0x2c>)
 800733a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800733e:	601a      	str	r2, [r3, #0]
 8007340:	f3bf 8f4f 	dsb	sy
 8007344:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007348:	e7f0      	b.n	800732c <prvIdleTask+0x8>
 800734a:	bf00      	nop
 800734c:	20000a9c 	.word	0x20000a9c
 8007350:	e000ed04 	.word	0xe000ed04

08007354 <vTaskSetThreadLocalStoragePointer>:
/*-----------------------------------------------------------*/

#if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )

	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue )
	{
 8007354:	b480      	push	{r7}
 8007356:	b087      	sub	sp, #28
 8007358:	af00      	add	r7, sp, #0
 800735a:	60f8      	str	r0, [r7, #12]
 800735c:	60b9      	str	r1, [r7, #8]
 800735e:	607a      	str	r2, [r7, #4]
	TCB_t *pxTCB;

		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	2b09      	cmp	r3, #9
 8007364:	dc0d      	bgt.n	8007382 <vTaskSetThreadLocalStoragePointer+0x2e>
		{
			pxTCB = prvGetTCBFromHandle( xTaskToSet );
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d102      	bne.n	8007372 <vTaskSetThreadLocalStoragePointer+0x1e>
 800736c:	4b08      	ldr	r3, [pc, #32]	@ (8007390 <vTaskSetThreadLocalStoragePointer+0x3c>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	e000      	b.n	8007374 <vTaskSetThreadLocalStoragePointer+0x20>
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	617b      	str	r3, [r7, #20]
			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	68ba      	ldr	r2, [r7, #8]
 800737a:	3216      	adds	r2, #22
 800737c:	6879      	ldr	r1, [r7, #4]
 800737e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		}
	}
 8007382:	bf00      	nop
 8007384:	371c      	adds	r7, #28
 8007386:	46bd      	mov	sp, r7
 8007388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738c:	4770      	bx	lr
 800738e:	bf00      	nop
 8007390:	20000a98 	.word	0x20000a98

08007394 <pvTaskGetThreadLocalStoragePointer>:
/*-----------------------------------------------------------*/

#if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )

	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
	{
 8007394:	b480      	push	{r7}
 8007396:	b085      	sub	sp, #20
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	6039      	str	r1, [r7, #0]
	void *pvReturn = NULL;
 800739e:	2300      	movs	r3, #0
 80073a0:	60fb      	str	r3, [r7, #12]
	TCB_t *pxTCB;

		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	2b09      	cmp	r3, #9
 80073a6:	dc0e      	bgt.n	80073c6 <pvTaskGetThreadLocalStoragePointer+0x32>
		{
			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d102      	bne.n	80073b4 <pvTaskGetThreadLocalStoragePointer+0x20>
 80073ae:	4b0a      	ldr	r3, [pc, #40]	@ (80073d8 <pvTaskGetThreadLocalStoragePointer+0x44>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	e000      	b.n	80073b6 <pvTaskGetThreadLocalStoragePointer+0x22>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	60bb      	str	r3, [r7, #8]
			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	683a      	ldr	r2, [r7, #0]
 80073bc:	3216      	adds	r2, #22
 80073be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073c2:	60fb      	str	r3, [r7, #12]
 80073c4:	e001      	b.n	80073ca <pvTaskGetThreadLocalStoragePointer+0x36>
		}
		else
		{
			pvReturn = NULL;
 80073c6:	2300      	movs	r3, #0
 80073c8:	60fb      	str	r3, [r7, #12]
		}

		return pvReturn;
 80073ca:	68fb      	ldr	r3, [r7, #12]
	}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3714      	adds	r7, #20
 80073d0:	46bd      	mov	sp, r7
 80073d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d6:	4770      	bx	lr
 80073d8:	20000a98 	.word	0x20000a98

080073dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b082      	sub	sp, #8
 80073e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80073e2:	2300      	movs	r3, #0
 80073e4:	607b      	str	r3, [r7, #4]
 80073e6:	e00c      	b.n	8007402 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80073e8:	687a      	ldr	r2, [r7, #4]
 80073ea:	4613      	mov	r3, r2
 80073ec:	009b      	lsls	r3, r3, #2
 80073ee:	4413      	add	r3, r2
 80073f0:	009b      	lsls	r3, r3, #2
 80073f2:	4a12      	ldr	r2, [pc, #72]	@ (800743c <prvInitialiseTaskLists+0x60>)
 80073f4:	4413      	add	r3, r2
 80073f6:	4618      	mov	r0, r3
 80073f8:	f7fe f97e 	bl	80056f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	3301      	adds	r3, #1
 8007400:	607b      	str	r3, [r7, #4]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2b37      	cmp	r3, #55	@ 0x37
 8007406:	d9ef      	bls.n	80073e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007408:	480d      	ldr	r0, [pc, #52]	@ (8007440 <prvInitialiseTaskLists+0x64>)
 800740a:	f7fe f975 	bl	80056f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800740e:	480d      	ldr	r0, [pc, #52]	@ (8007444 <prvInitialiseTaskLists+0x68>)
 8007410:	f7fe f972 	bl	80056f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007414:	480c      	ldr	r0, [pc, #48]	@ (8007448 <prvInitialiseTaskLists+0x6c>)
 8007416:	f7fe f96f 	bl	80056f8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800741a:	480c      	ldr	r0, [pc, #48]	@ (800744c <prvInitialiseTaskLists+0x70>)
 800741c:	f7fe f96c 	bl	80056f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007420:	480b      	ldr	r0, [pc, #44]	@ (8007450 <prvInitialiseTaskLists+0x74>)
 8007422:	f7fe f969 	bl	80056f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007426:	4b0b      	ldr	r3, [pc, #44]	@ (8007454 <prvInitialiseTaskLists+0x78>)
 8007428:	4a05      	ldr	r2, [pc, #20]	@ (8007440 <prvInitialiseTaskLists+0x64>)
 800742a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800742c:	4b0a      	ldr	r3, [pc, #40]	@ (8007458 <prvInitialiseTaskLists+0x7c>)
 800742e:	4a05      	ldr	r2, [pc, #20]	@ (8007444 <prvInitialiseTaskLists+0x68>)
 8007430:	601a      	str	r2, [r3, #0]
}
 8007432:	bf00      	nop
 8007434:	3708      	adds	r7, #8
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}
 800743a:	bf00      	nop
 800743c:	20000a9c 	.word	0x20000a9c
 8007440:	20000efc 	.word	0x20000efc
 8007444:	20000f10 	.word	0x20000f10
 8007448:	20000f2c 	.word	0x20000f2c
 800744c:	20000f40 	.word	0x20000f40
 8007450:	20000f58 	.word	0x20000f58
 8007454:	20000f24 	.word	0x20000f24
 8007458:	20000f28 	.word	0x20000f28

0800745c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b082      	sub	sp, #8
 8007460:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007462:	e019      	b.n	8007498 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007464:	f001 f9e0 	bl	8008828 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007468:	4b10      	ldr	r3, [pc, #64]	@ (80074ac <prvCheckTasksWaitingTermination+0x50>)
 800746a:	68db      	ldr	r3, [r3, #12]
 800746c:	68db      	ldr	r3, [r3, #12]
 800746e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	3304      	adds	r3, #4
 8007474:	4618      	mov	r0, r3
 8007476:	f7fe f9c9 	bl	800580c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800747a:	4b0d      	ldr	r3, [pc, #52]	@ (80074b0 <prvCheckTasksWaitingTermination+0x54>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	3b01      	subs	r3, #1
 8007480:	4a0b      	ldr	r2, [pc, #44]	@ (80074b0 <prvCheckTasksWaitingTermination+0x54>)
 8007482:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007484:	4b0b      	ldr	r3, [pc, #44]	@ (80074b4 <prvCheckTasksWaitingTermination+0x58>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	3b01      	subs	r3, #1
 800748a:	4a0a      	ldr	r2, [pc, #40]	@ (80074b4 <prvCheckTasksWaitingTermination+0x58>)
 800748c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800748e:	f001 f9fd 	bl	800888c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 f8e6 	bl	8007664 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007498:	4b06      	ldr	r3, [pc, #24]	@ (80074b4 <prvCheckTasksWaitingTermination+0x58>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d1e1      	bne.n	8007464 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80074a0:	bf00      	nop
 80074a2:	bf00      	nop
 80074a4:	3708      	adds	r7, #8
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}
 80074aa:	bf00      	nop
 80074ac:	20000f40 	.word	0x20000f40
 80074b0:	20000f6c 	.word	0x20000f6c
 80074b4:	20000f54 	.word	0x20000f54

080074b8 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b086      	sub	sp, #24
 80074bc:	af00      	add	r7, sp, #0
 80074be:	60f8      	str	r0, [r7, #12]
 80074c0:	60b9      	str	r1, [r7, #8]
 80074c2:	607a      	str	r2, [r7, #4]
 80074c4:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d102      	bne.n	80074d2 <vTaskGetInfo+0x1a>
 80074cc:	4b2d      	ldr	r3, [pc, #180]	@ (8007584 <vTaskGetInfo+0xcc>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	e000      	b.n	80074d4 <vTaskGetInfo+0x1c>
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	697a      	ldr	r2, [r7, #20]
 80074da:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	615a      	str	r2, [r3, #20]
		}
		#endif

		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 8007510:	78fb      	ldrb	r3, [r7, #3]
 8007512:	2b05      	cmp	r3, #5
 8007514:	d01a      	beq.n	800754c <vTaskGetInfo+0x94>
		{
			if( pxTCB == pxCurrentTCB )
 8007516:	4b1b      	ldr	r3, [pc, #108]	@ (8007584 <vTaskGetInfo+0xcc>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	697a      	ldr	r2, [r7, #20]
 800751c:	429a      	cmp	r2, r3
 800751e:	d103      	bne.n	8007528 <vTaskGetInfo+0x70>
			{
				pxTaskStatus->eCurrentState = eRunning;
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	2200      	movs	r2, #0
 8007524:	731a      	strb	r2, [r3, #12]
 8007526:	e018      	b.n	800755a <vTaskGetInfo+0xa2>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	78fa      	ldrb	r2, [r7, #3]
 800752c:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 800752e:	78fb      	ldrb	r3, [r7, #3]
 8007530:	2b03      	cmp	r3, #3
 8007532:	d112      	bne.n	800755a <vTaskGetInfo+0xa2>
					{
						vTaskSuspendAll();
 8007534:	f7ff fb32 	bl	8006b9c <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800753c:	2b00      	cmp	r3, #0
 800753e:	d002      	beq.n	8007546 <vTaskGetInfo+0x8e>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	2202      	movs	r2, #2
 8007544:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 8007546:	f7ff fb37 	bl	8006bb8 <xTaskResumeAll>
 800754a:	e006      	b.n	800755a <vTaskGetInfo+0xa2>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 800754c:	6978      	ldr	r0, [r7, #20]
 800754e:	f7ff fa4b 	bl	80069e8 <eTaskGetState>
 8007552:	4603      	mov	r3, r0
 8007554:	461a      	mov	r2, r3
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d009      	beq.n	8007574 <vTaskGetInfo+0xbc>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007564:	4618      	mov	r0, r3
 8007566:	f000 f861 	bl	800762c <prvTaskCheckFreeStackSpace>
 800756a:	4603      	mov	r3, r0
 800756c:	461a      	mov	r2, r3
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 8007572:	e002      	b.n	800757a <vTaskGetInfo+0xc2>
			pxTaskStatus->usStackHighWaterMark = 0;
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	2200      	movs	r2, #0
 8007578:	841a      	strh	r2, [r3, #32]
	}
 800757a:	bf00      	nop
 800757c:	3718      	adds	r7, #24
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}
 8007582:	bf00      	nop
 8007584:	20000a98 	.word	0x20000a98

08007588 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 8007588:	b580      	push	{r7, lr}
 800758a:	b08a      	sub	sp, #40	@ 0x28
 800758c:	af00      	add	r7, sp, #0
 800758e:	60f8      	str	r0, [r7, #12]
 8007590:	60b9      	str	r1, [r7, #8]
 8007592:	4613      	mov	r3, r2
 8007594:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 8007596:	2300      	movs	r3, #0
 8007598:	627b      	str	r3, [r7, #36]	@ 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d03f      	beq.n	8007622 <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	623b      	str	r3, [r7, #32]
 80075a6:	6a3b      	ldr	r3, [r7, #32]
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	685a      	ldr	r2, [r3, #4]
 80075ac:	6a3b      	ldr	r3, [r7, #32]
 80075ae:	605a      	str	r2, [r3, #4]
 80075b0:	6a3b      	ldr	r3, [r7, #32]
 80075b2:	685a      	ldr	r2, [r3, #4]
 80075b4:	6a3b      	ldr	r3, [r7, #32]
 80075b6:	3308      	adds	r3, #8
 80075b8:	429a      	cmp	r2, r3
 80075ba:	d104      	bne.n	80075c6 <prvListTasksWithinSingleList+0x3e>
 80075bc:	6a3b      	ldr	r3, [r7, #32]
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	685a      	ldr	r2, [r3, #4]
 80075c2:	6a3b      	ldr	r3, [r7, #32]
 80075c4:	605a      	str	r2, [r3, #4]
 80075c6:	6a3b      	ldr	r3, [r7, #32]
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	68db      	ldr	r3, [r3, #12]
 80075cc:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	61bb      	str	r3, [r7, #24]
 80075d2:	69bb      	ldr	r3, [r7, #24]
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	685a      	ldr	r2, [r3, #4]
 80075d8:	69bb      	ldr	r3, [r7, #24]
 80075da:	605a      	str	r2, [r3, #4]
 80075dc:	69bb      	ldr	r3, [r7, #24]
 80075de:	685a      	ldr	r2, [r3, #4]
 80075e0:	69bb      	ldr	r3, [r7, #24]
 80075e2:	3308      	adds	r3, #8
 80075e4:	429a      	cmp	r2, r3
 80075e6:	d104      	bne.n	80075f2 <prvListTasksWithinSingleList+0x6a>
 80075e8:	69bb      	ldr	r3, [r7, #24]
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	685a      	ldr	r2, [r3, #4]
 80075ee:	69bb      	ldr	r3, [r7, #24]
 80075f0:	605a      	str	r2, [r3, #4]
 80075f2:	69bb      	ldr	r3, [r7, #24]
 80075f4:	685b      	ldr	r3, [r3, #4]
 80075f6:	68db      	ldr	r3, [r3, #12]
 80075f8:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 80075fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075fc:	4613      	mov	r3, r2
 80075fe:	00db      	lsls	r3, r3, #3
 8007600:	4413      	add	r3, r2
 8007602:	009b      	lsls	r3, r3, #2
 8007604:	461a      	mov	r2, r3
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	1899      	adds	r1, r3, r2
 800760a:	79fb      	ldrb	r3, [r7, #7]
 800760c:	2201      	movs	r2, #1
 800760e:	6978      	ldr	r0, [r7, #20]
 8007610:	f7ff ff52 	bl	80074b8 <vTaskGetInfo>
				uxTask++;
 8007614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007616:	3301      	adds	r3, #1
 8007618:	627b      	str	r3, [r7, #36]	@ 0x24
			} while( pxNextTCB != pxFirstTCB );
 800761a:	697a      	ldr	r2, [r7, #20]
 800761c:	69fb      	ldr	r3, [r7, #28]
 800761e:	429a      	cmp	r2, r3
 8007620:	d1d5      	bne.n	80075ce <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 8007622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8007624:	4618      	mov	r0, r3
 8007626:	3728      	adds	r7, #40	@ 0x28
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}

0800762c <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800762c:	b480      	push	{r7}
 800762e:	b085      	sub	sp, #20
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8007634:	2300      	movs	r3, #0
 8007636:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8007638:	e005      	b.n	8007646 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	3301      	adds	r3, #1
 800763e:	607b      	str	r3, [r7, #4]
			ulCount++;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	3301      	adds	r3, #1
 8007644:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	781b      	ldrb	r3, [r3, #0]
 800764a:	2ba5      	cmp	r3, #165	@ 0xa5
 800764c:	d0f5      	beq.n	800763a <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	089b      	lsrs	r3, r3, #2
 8007652:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	b29b      	uxth	r3, r3
	}
 8007658:	4618      	mov	r0, r3
 800765a:	3714      	adds	r7, #20
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr

08007664 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007664:	b580      	push	{r7, lr}
 8007666:	b084      	sub	sp, #16
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	3384      	adds	r3, #132	@ 0x84
 8007670:	4618      	mov	r0, r3
 8007672:	f001 fdd3 	bl	800921c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 800767c:	2b00      	cmp	r3, #0
 800767e:	d108      	bne.n	8007692 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007684:	4618      	mov	r0, r3
 8007686:	f001 fabf 	bl	8008c08 <vPortFree>
				vPortFree( pxTCB );
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f001 fabc 	bl	8008c08 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007690:	e019      	b.n	80076c6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 8007698:	2b01      	cmp	r3, #1
 800769a:	d103      	bne.n	80076a4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f001 fab3 	bl	8008c08 <vPortFree>
	}
 80076a2:	e010      	b.n	80076c6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 80076aa:	2b02      	cmp	r3, #2
 80076ac:	d00b      	beq.n	80076c6 <prvDeleteTCB+0x62>
	__asm volatile
 80076ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076b2:	f383 8811 	msr	BASEPRI, r3
 80076b6:	f3bf 8f6f 	isb	sy
 80076ba:	f3bf 8f4f 	dsb	sy
 80076be:	60fb      	str	r3, [r7, #12]
}
 80076c0:	bf00      	nop
 80076c2:	bf00      	nop
 80076c4:	e7fd      	b.n	80076c2 <prvDeleteTCB+0x5e>
	}
 80076c6:	bf00      	nop
 80076c8:	3710      	adds	r7, #16
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}
	...

080076d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80076d0:	b480      	push	{r7}
 80076d2:	b083      	sub	sp, #12
 80076d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80076d6:	4b0c      	ldr	r3, [pc, #48]	@ (8007708 <prvResetNextTaskUnblockTime+0x38>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d104      	bne.n	80076ea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80076e0:	4b0a      	ldr	r3, [pc, #40]	@ (800770c <prvResetNextTaskUnblockTime+0x3c>)
 80076e2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80076e6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80076e8:	e008      	b.n	80076fc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076ea:	4b07      	ldr	r3, [pc, #28]	@ (8007708 <prvResetNextTaskUnblockTime+0x38>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	68db      	ldr	r3, [r3, #12]
 80076f0:	68db      	ldr	r3, [r3, #12]
 80076f2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	4a04      	ldr	r2, [pc, #16]	@ (800770c <prvResetNextTaskUnblockTime+0x3c>)
 80076fa:	6013      	str	r3, [r2, #0]
}
 80076fc:	bf00      	nop
 80076fe:	370c      	adds	r7, #12
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr
 8007708:	20000f24 	.word	0x20000f24
 800770c:	20000f8c 	.word	0x20000f8c

08007710 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007710:	b480      	push	{r7}
 8007712:	b083      	sub	sp, #12
 8007714:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8007716:	4b05      	ldr	r3, [pc, #20]	@ (800772c <xTaskGetCurrentTaskHandle+0x1c>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800771c:	687b      	ldr	r3, [r7, #4]
	}
 800771e:	4618      	mov	r0, r3
 8007720:	370c      	adds	r7, #12
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr
 800772a:	bf00      	nop
 800772c:	20000a98 	.word	0x20000a98

08007730 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007730:	b480      	push	{r7}
 8007732:	b083      	sub	sp, #12
 8007734:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007736:	4b0b      	ldr	r3, [pc, #44]	@ (8007764 <xTaskGetSchedulerState+0x34>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d102      	bne.n	8007744 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800773e:	2301      	movs	r3, #1
 8007740:	607b      	str	r3, [r7, #4]
 8007742:	e008      	b.n	8007756 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007744:	4b08      	ldr	r3, [pc, #32]	@ (8007768 <xTaskGetSchedulerState+0x38>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d102      	bne.n	8007752 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800774c:	2302      	movs	r3, #2
 800774e:	607b      	str	r3, [r7, #4]
 8007750:	e001      	b.n	8007756 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007752:	2300      	movs	r3, #0
 8007754:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007756:	687b      	ldr	r3, [r7, #4]
	}
 8007758:	4618      	mov	r0, r3
 800775a:	370c      	adds	r7, #12
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr
 8007764:	20000f78 	.word	0x20000f78
 8007768:	20000f94 	.word	0x20000f94

0800776c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800776c:	b580      	push	{r7, lr}
 800776e:	b084      	sub	sp, #16
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007778:	2300      	movs	r3, #0
 800777a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d051      	beq.n	8007826 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007786:	4b2a      	ldr	r3, [pc, #168]	@ (8007830 <xTaskPriorityInherit+0xc4>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800778c:	429a      	cmp	r2, r3
 800778e:	d241      	bcs.n	8007814 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	699b      	ldr	r3, [r3, #24]
 8007794:	2b00      	cmp	r3, #0
 8007796:	db06      	blt.n	80077a6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007798:	4b25      	ldr	r3, [pc, #148]	@ (8007830 <xTaskPriorityInherit+0xc4>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800779e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	6959      	ldr	r1, [r3, #20]
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077ae:	4613      	mov	r3, r2
 80077b0:	009b      	lsls	r3, r3, #2
 80077b2:	4413      	add	r3, r2
 80077b4:	009b      	lsls	r3, r3, #2
 80077b6:	4a1f      	ldr	r2, [pc, #124]	@ (8007834 <xTaskPriorityInherit+0xc8>)
 80077b8:	4413      	add	r3, r2
 80077ba:	4299      	cmp	r1, r3
 80077bc:	d122      	bne.n	8007804 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	3304      	adds	r3, #4
 80077c2:	4618      	mov	r0, r3
 80077c4:	f7fe f822 	bl	800580c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80077c8:	4b19      	ldr	r3, [pc, #100]	@ (8007830 <xTaskPriorityInherit+0xc4>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077d6:	4b18      	ldr	r3, [pc, #96]	@ (8007838 <xTaskPriorityInherit+0xcc>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	429a      	cmp	r2, r3
 80077dc:	d903      	bls.n	80077e6 <xTaskPriorityInherit+0x7a>
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077e2:	4a15      	ldr	r2, [pc, #84]	@ (8007838 <xTaskPriorityInherit+0xcc>)
 80077e4:	6013      	str	r3, [r2, #0]
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077ea:	4613      	mov	r3, r2
 80077ec:	009b      	lsls	r3, r3, #2
 80077ee:	4413      	add	r3, r2
 80077f0:	009b      	lsls	r3, r3, #2
 80077f2:	4a10      	ldr	r2, [pc, #64]	@ (8007834 <xTaskPriorityInherit+0xc8>)
 80077f4:	441a      	add	r2, r3
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	3304      	adds	r3, #4
 80077fa:	4619      	mov	r1, r3
 80077fc:	4610      	mov	r0, r2
 80077fe:	f7fd ffa8 	bl	8005752 <vListInsertEnd>
 8007802:	e004      	b.n	800780e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007804:	4b0a      	ldr	r3, [pc, #40]	@ (8007830 <xTaskPriorityInherit+0xc4>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800780e:	2301      	movs	r3, #1
 8007810:	60fb      	str	r3, [r7, #12]
 8007812:	e008      	b.n	8007826 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007818:	4b05      	ldr	r3, [pc, #20]	@ (8007830 <xTaskPriorityInherit+0xc4>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800781e:	429a      	cmp	r2, r3
 8007820:	d201      	bcs.n	8007826 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007822:	2301      	movs	r3, #1
 8007824:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007826:	68fb      	ldr	r3, [r7, #12]
	}
 8007828:	4618      	mov	r0, r3
 800782a:	3710      	adds	r7, #16
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}
 8007830:	20000a98 	.word	0x20000a98
 8007834:	20000a9c 	.word	0x20000a9c
 8007838:	20000f74 	.word	0x20000f74

0800783c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800783c:	b580      	push	{r7, lr}
 800783e:	b086      	sub	sp, #24
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007848:	2300      	movs	r3, #0
 800784a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d058      	beq.n	8007904 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007852:	4b2f      	ldr	r3, [pc, #188]	@ (8007910 <xTaskPriorityDisinherit+0xd4>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	693a      	ldr	r2, [r7, #16]
 8007858:	429a      	cmp	r2, r3
 800785a:	d00b      	beq.n	8007874 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800785c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007860:	f383 8811 	msr	BASEPRI, r3
 8007864:	f3bf 8f6f 	isb	sy
 8007868:	f3bf 8f4f 	dsb	sy
 800786c:	60fb      	str	r3, [r7, #12]
}
 800786e:	bf00      	nop
 8007870:	bf00      	nop
 8007872:	e7fd      	b.n	8007870 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007878:	2b00      	cmp	r3, #0
 800787a:	d10b      	bne.n	8007894 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800787c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007880:	f383 8811 	msr	BASEPRI, r3
 8007884:	f3bf 8f6f 	isb	sy
 8007888:	f3bf 8f4f 	dsb	sy
 800788c:	60bb      	str	r3, [r7, #8]
}
 800788e:	bf00      	nop
 8007890:	bf00      	nop
 8007892:	e7fd      	b.n	8007890 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007898:	1e5a      	subs	r2, r3, #1
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	655a      	str	r2, [r3, #84]	@ 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078a6:	429a      	cmp	r2, r3
 80078a8:	d02c      	beq.n	8007904 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d128      	bne.n	8007904 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	3304      	adds	r3, #4
 80078b6:	4618      	mov	r0, r3
 80078b8:	f7fd ffa8 	bl	800580c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078c8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078d4:	4b0f      	ldr	r3, [pc, #60]	@ (8007914 <xTaskPriorityDisinherit+0xd8>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	429a      	cmp	r2, r3
 80078da:	d903      	bls.n	80078e4 <xTaskPriorityDisinherit+0xa8>
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078e0:	4a0c      	ldr	r2, [pc, #48]	@ (8007914 <xTaskPriorityDisinherit+0xd8>)
 80078e2:	6013      	str	r3, [r2, #0]
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078e8:	4613      	mov	r3, r2
 80078ea:	009b      	lsls	r3, r3, #2
 80078ec:	4413      	add	r3, r2
 80078ee:	009b      	lsls	r3, r3, #2
 80078f0:	4a09      	ldr	r2, [pc, #36]	@ (8007918 <xTaskPriorityDisinherit+0xdc>)
 80078f2:	441a      	add	r2, r3
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	3304      	adds	r3, #4
 80078f8:	4619      	mov	r1, r3
 80078fa:	4610      	mov	r0, r2
 80078fc:	f7fd ff29 	bl	8005752 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007900:	2301      	movs	r3, #1
 8007902:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007904:	697b      	ldr	r3, [r7, #20]
	}
 8007906:	4618      	mov	r0, r3
 8007908:	3718      	adds	r7, #24
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}
 800790e:	bf00      	nop
 8007910:	20000a98 	.word	0x20000a98
 8007914:	20000f74 	.word	0x20000f74
 8007918:	20000a9c 	.word	0x20000a9c

0800791c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800791c:	b580      	push	{r7, lr}
 800791e:	b088      	sub	sp, #32
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800792a:	2301      	movs	r3, #1
 800792c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d06c      	beq.n	8007a0e <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007934:	69bb      	ldr	r3, [r7, #24]
 8007936:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007938:	2b00      	cmp	r3, #0
 800793a:	d10b      	bne.n	8007954 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800793c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007940:	f383 8811 	msr	BASEPRI, r3
 8007944:	f3bf 8f6f 	isb	sy
 8007948:	f3bf 8f4f 	dsb	sy
 800794c:	60fb      	str	r3, [r7, #12]
}
 800794e:	bf00      	nop
 8007950:	bf00      	nop
 8007952:	e7fd      	b.n	8007950 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007954:	69bb      	ldr	r3, [r7, #24]
 8007956:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007958:	683a      	ldr	r2, [r7, #0]
 800795a:	429a      	cmp	r2, r3
 800795c:	d902      	bls.n	8007964 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	61fb      	str	r3, [r7, #28]
 8007962:	e002      	b.n	800796a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007964:	69bb      	ldr	r3, [r7, #24]
 8007966:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007968:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800796a:	69bb      	ldr	r3, [r7, #24]
 800796c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800796e:	69fa      	ldr	r2, [r7, #28]
 8007970:	429a      	cmp	r2, r3
 8007972:	d04c      	beq.n	8007a0e <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007974:	69bb      	ldr	r3, [r7, #24]
 8007976:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007978:	697a      	ldr	r2, [r7, #20]
 800797a:	429a      	cmp	r2, r3
 800797c:	d147      	bne.n	8007a0e <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800797e:	4b26      	ldr	r3, [pc, #152]	@ (8007a18 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	69ba      	ldr	r2, [r7, #24]
 8007984:	429a      	cmp	r2, r3
 8007986:	d10b      	bne.n	80079a0 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8007988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800798c:	f383 8811 	msr	BASEPRI, r3
 8007990:	f3bf 8f6f 	isb	sy
 8007994:	f3bf 8f4f 	dsb	sy
 8007998:	60bb      	str	r3, [r7, #8]
}
 800799a:	bf00      	nop
 800799c:	bf00      	nop
 800799e:	e7fd      	b.n	800799c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80079a0:	69bb      	ldr	r3, [r7, #24]
 80079a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079a4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80079a6:	69bb      	ldr	r3, [r7, #24]
 80079a8:	69fa      	ldr	r2, [r7, #28]
 80079aa:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80079ac:	69bb      	ldr	r3, [r7, #24]
 80079ae:	699b      	ldr	r3, [r3, #24]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	db04      	blt.n	80079be <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079b4:	69fb      	ldr	r3, [r7, #28]
 80079b6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80079ba:	69bb      	ldr	r3, [r7, #24]
 80079bc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80079be:	69bb      	ldr	r3, [r7, #24]
 80079c0:	6959      	ldr	r1, [r3, #20]
 80079c2:	693a      	ldr	r2, [r7, #16]
 80079c4:	4613      	mov	r3, r2
 80079c6:	009b      	lsls	r3, r3, #2
 80079c8:	4413      	add	r3, r2
 80079ca:	009b      	lsls	r3, r3, #2
 80079cc:	4a13      	ldr	r2, [pc, #76]	@ (8007a1c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80079ce:	4413      	add	r3, r2
 80079d0:	4299      	cmp	r1, r3
 80079d2:	d11c      	bne.n	8007a0e <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80079d4:	69bb      	ldr	r3, [r7, #24]
 80079d6:	3304      	adds	r3, #4
 80079d8:	4618      	mov	r0, r3
 80079da:	f7fd ff17 	bl	800580c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80079de:	69bb      	ldr	r3, [r7, #24]
 80079e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079e2:	4b0f      	ldr	r3, [pc, #60]	@ (8007a20 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	429a      	cmp	r2, r3
 80079e8:	d903      	bls.n	80079f2 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 80079ea:	69bb      	ldr	r3, [r7, #24]
 80079ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079ee:	4a0c      	ldr	r2, [pc, #48]	@ (8007a20 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80079f0:	6013      	str	r3, [r2, #0]
 80079f2:	69bb      	ldr	r3, [r7, #24]
 80079f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079f6:	4613      	mov	r3, r2
 80079f8:	009b      	lsls	r3, r3, #2
 80079fa:	4413      	add	r3, r2
 80079fc:	009b      	lsls	r3, r3, #2
 80079fe:	4a07      	ldr	r2, [pc, #28]	@ (8007a1c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007a00:	441a      	add	r2, r3
 8007a02:	69bb      	ldr	r3, [r7, #24]
 8007a04:	3304      	adds	r3, #4
 8007a06:	4619      	mov	r1, r3
 8007a08:	4610      	mov	r0, r2
 8007a0a:	f7fd fea2 	bl	8005752 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007a0e:	bf00      	nop
 8007a10:	3720      	adds	r7, #32
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}
 8007a16:	bf00      	nop
 8007a18:	20000a98 	.word	0x20000a98
 8007a1c:	20000a9c 	.word	0x20000a9c
 8007a20:	20000f74 	.word	0x20000f74

08007a24 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007a24:	b480      	push	{r7}
 8007a26:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007a28:	4b07      	ldr	r3, [pc, #28]	@ (8007a48 <pvTaskIncrementMutexHeldCount+0x24>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d004      	beq.n	8007a3a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007a30:	4b05      	ldr	r3, [pc, #20]	@ (8007a48 <pvTaskIncrementMutexHeldCount+0x24>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007a36:	3201      	adds	r2, #1
 8007a38:	655a      	str	r2, [r3, #84]	@ 0x54
		}

		return pxCurrentTCB;
 8007a3a:	4b03      	ldr	r3, [pc, #12]	@ (8007a48 <pvTaskIncrementMutexHeldCount+0x24>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
	}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr
 8007a48:	20000a98 	.word	0x20000a98

08007a4c <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b084      	sub	sp, #16
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8007a56:	f000 fee7 	bl	8008828 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8007a5a:	4b20      	ldr	r3, [pc, #128]	@ (8007adc <ulTaskNotifyTake+0x90>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d113      	bne.n	8007a8e <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8007a66:	4b1d      	ldr	r3, [pc, #116]	@ (8007adc <ulTaskNotifyTake+0x90>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4

				if( xTicksToWait > ( TickType_t ) 0 )
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d00b      	beq.n	8007a8e <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007a76:	2101      	movs	r1, #1
 8007a78:	6838      	ldr	r0, [r7, #0]
 8007a7a:	f000 f955 	bl	8007d28 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8007a7e:	4b18      	ldr	r3, [pc, #96]	@ (8007ae0 <ulTaskNotifyTake+0x94>)
 8007a80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a84:	601a      	str	r2, [r3, #0]
 8007a86:	f3bf 8f4f 	dsb	sy
 8007a8a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007a8e:	f000 fefd 	bl	800888c <vPortExitCritical>

		taskENTER_CRITICAL();
 8007a92:	f000 fec9 	bl	8008828 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8007a96:	4b11      	ldr	r3, [pc, #68]	@ (8007adc <ulTaskNotifyTake+0x90>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8007a9e:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d00e      	beq.n	8007ac4 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d005      	beq.n	8007ab8 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8007aac:	4b0b      	ldr	r3, [pc, #44]	@ (8007adc <ulTaskNotifyTake+0x90>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8007ab6:	e005      	b.n	8007ac4 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8007ab8:	4b08      	ldr	r3, [pc, #32]	@ (8007adc <ulTaskNotifyTake+0x90>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	68fa      	ldr	r2, [r7, #12]
 8007abe:	3a01      	subs	r2, #1
 8007ac0:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007ac4:	4b05      	ldr	r3, [pc, #20]	@ (8007adc <ulTaskNotifyTake+0x90>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4
		}
		taskEXIT_CRITICAL();
 8007ace:	f000 fedd 	bl	800888c <vPortExitCritical>

		return ulReturn;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
	}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	3710      	adds	r7, #16
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}
 8007adc:	20000a98 	.word	0x20000a98
 8007ae0:	e000ed04 	.word	0xe000ed04

08007ae4 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b086      	sub	sp, #24
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	60f8      	str	r0, [r7, #12]
 8007aec:	60b9      	str	r1, [r7, #8]
 8007aee:	607a      	str	r2, [r7, #4]
 8007af0:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8007af2:	f000 fe99 	bl	8008828 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8007af6:	4b29      	ldr	r3, [pc, #164]	@ (8007b9c <xTaskNotifyWait+0xb8>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f893 30d4 	ldrb.w	r3, [r3, #212]	@ 0xd4
 8007afe:	b2db      	uxtb	r3, r3
 8007b00:	2b02      	cmp	r3, #2
 8007b02:	d01c      	beq.n	8007b3e <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8007b04:	4b25      	ldr	r3, [pc, #148]	@ (8007b9c <xTaskNotifyWait+0xb8>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f8d3 10d0 	ldr.w	r1, [r3, #208]	@ 0xd0
 8007b0c:	68fa      	ldr	r2, [r7, #12]
 8007b0e:	43d2      	mvns	r2, r2
 8007b10:	400a      	ands	r2, r1
 8007b12:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8007b16:	4b21      	ldr	r3, [pc, #132]	@ (8007b9c <xTaskNotifyWait+0xb8>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4

				if( xTicksToWait > ( TickType_t ) 0 )
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d00b      	beq.n	8007b3e <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007b26:	2101      	movs	r1, #1
 8007b28:	6838      	ldr	r0, [r7, #0]
 8007b2a:	f000 f8fd 	bl	8007d28 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8007b2e:	4b1c      	ldr	r3, [pc, #112]	@ (8007ba0 <xTaskNotifyWait+0xbc>)
 8007b30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b34:	601a      	str	r2, [r3, #0]
 8007b36:	f3bf 8f4f 	dsb	sy
 8007b3a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007b3e:	f000 fea5 	bl	800888c <vPortExitCritical>

		taskENTER_CRITICAL();
 8007b42:	f000 fe71 	bl	8008828 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d005      	beq.n	8007b58 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8007b4c:	4b13      	ldr	r3, [pc, #76]	@ (8007b9c <xTaskNotifyWait+0xb8>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8007b58:	4b10      	ldr	r3, [pc, #64]	@ (8007b9c <xTaskNotifyWait+0xb8>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f893 30d4 	ldrb.w	r3, [r3, #212]	@ 0xd4
 8007b60:	b2db      	uxtb	r3, r3
 8007b62:	2b02      	cmp	r3, #2
 8007b64:	d002      	beq.n	8007b6c <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8007b66:	2300      	movs	r3, #0
 8007b68:	617b      	str	r3, [r7, #20]
 8007b6a:	e00a      	b.n	8007b82 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8007b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8007b9c <xTaskNotifyWait+0xb8>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f8d3 10d0 	ldr.w	r1, [r3, #208]	@ 0xd0
 8007b74:	68ba      	ldr	r2, [r7, #8]
 8007b76:	43d2      	mvns	r2, r2
 8007b78:	400a      	ands	r2, r1
 8007b7a:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
				xReturn = pdTRUE;
 8007b7e:	2301      	movs	r3, #1
 8007b80:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007b82:	4b06      	ldr	r3, [pc, #24]	@ (8007b9c <xTaskNotifyWait+0xb8>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	2200      	movs	r2, #0
 8007b88:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4
		}
		taskEXIT_CRITICAL();
 8007b8c:	f000 fe7e 	bl	800888c <vPortExitCritical>

		return xReturn;
 8007b90:	697b      	ldr	r3, [r7, #20]
	}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3718      	adds	r7, #24
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}
 8007b9a:	bf00      	nop
 8007b9c:	20000a98 	.word	0x20000a98
 8007ba0:	e000ed04 	.word	0xe000ed04

08007ba4 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b08a      	sub	sp, #40	@ 0x28
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	60f8      	str	r0, [r7, #12]
 8007bac:	60b9      	str	r1, [r7, #8]
 8007bae:	603b      	str	r3, [r7, #0]
 8007bb0:	4613      	mov	r3, r2
 8007bb2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d10b      	bne.n	8007bd6 <xTaskGenericNotify+0x32>
	__asm volatile
 8007bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bc2:	f383 8811 	msr	BASEPRI, r3
 8007bc6:	f3bf 8f6f 	isb	sy
 8007bca:	f3bf 8f4f 	dsb	sy
 8007bce:	61bb      	str	r3, [r7, #24]
}
 8007bd0:	bf00      	nop
 8007bd2:	bf00      	nop
 8007bd4:	e7fd      	b.n	8007bd2 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8007bda:	f000 fe25 	bl	8008828 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d004      	beq.n	8007bee <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8007be4:	6a3b      	ldr	r3, [r7, #32]
 8007be6:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8007bee:	6a3b      	ldr	r3, [r7, #32]
 8007bf0:	f893 30d4 	ldrb.w	r3, [r3, #212]	@ 0xd4
 8007bf4:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8007bf6:	6a3b      	ldr	r3, [r7, #32]
 8007bf8:	2202      	movs	r2, #2
 8007bfa:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4

			switch( eAction )
 8007bfe:	79fb      	ldrb	r3, [r7, #7]
 8007c00:	2b04      	cmp	r3, #4
 8007c02:	d82e      	bhi.n	8007c62 <xTaskGenericNotify+0xbe>
 8007c04:	a201      	add	r2, pc, #4	@ (adr r2, 8007c0c <xTaskGenericNotify+0x68>)
 8007c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c0a:	bf00      	nop
 8007c0c:	08007c87 	.word	0x08007c87
 8007c10:	08007c21 	.word	0x08007c21
 8007c14:	08007c33 	.word	0x08007c33
 8007c18:	08007c43 	.word	0x08007c43
 8007c1c:	08007c4d 	.word	0x08007c4d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8007c20:	6a3b      	ldr	r3, [r7, #32]
 8007c22:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	431a      	orrs	r2, r3
 8007c2a:	6a3b      	ldr	r3, [r7, #32]
 8007c2c:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
					break;
 8007c30:	e02c      	b.n	8007c8c <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8007c32:	6a3b      	ldr	r3, [r7, #32]
 8007c34:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8007c38:	1c5a      	adds	r2, r3, #1
 8007c3a:	6a3b      	ldr	r3, [r7, #32]
 8007c3c:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
					break;
 8007c40:	e024      	b.n	8007c8c <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8007c42:	6a3b      	ldr	r3, [r7, #32]
 8007c44:	68ba      	ldr	r2, [r7, #8]
 8007c46:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
					break;
 8007c4a:	e01f      	b.n	8007c8c <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8007c4c:	7ffb      	ldrb	r3, [r7, #31]
 8007c4e:	2b02      	cmp	r3, #2
 8007c50:	d004      	beq.n	8007c5c <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8007c52:	6a3b      	ldr	r3, [r7, #32]
 8007c54:	68ba      	ldr	r2, [r7, #8]
 8007c56:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8007c5a:	e017      	b.n	8007c8c <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8007c60:	e014      	b.n	8007c8c <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8007c62:	6a3b      	ldr	r3, [r7, #32]
 8007c64:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8007c68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007c6c:	d00d      	beq.n	8007c8a <xTaskGenericNotify+0xe6>
	__asm volatile
 8007c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c72:	f383 8811 	msr	BASEPRI, r3
 8007c76:	f3bf 8f6f 	isb	sy
 8007c7a:	f3bf 8f4f 	dsb	sy
 8007c7e:	617b      	str	r3, [r7, #20]
}
 8007c80:	bf00      	nop
 8007c82:	bf00      	nop
 8007c84:	e7fd      	b.n	8007c82 <xTaskGenericNotify+0xde>
					break;
 8007c86:	bf00      	nop
 8007c88:	e000      	b.n	8007c8c <xTaskGenericNotify+0xe8>

					break;
 8007c8a:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007c8c:	7ffb      	ldrb	r3, [r7, #31]
 8007c8e:	2b01      	cmp	r3, #1
 8007c90:	d13b      	bne.n	8007d0a <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c92:	6a3b      	ldr	r3, [r7, #32]
 8007c94:	3304      	adds	r3, #4
 8007c96:	4618      	mov	r0, r3
 8007c98:	f7fd fdb8 	bl	800580c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8007c9c:	6a3b      	ldr	r3, [r7, #32]
 8007c9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ca0:	4b1d      	ldr	r3, [pc, #116]	@ (8007d18 <xTaskGenericNotify+0x174>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	429a      	cmp	r2, r3
 8007ca6:	d903      	bls.n	8007cb0 <xTaskGenericNotify+0x10c>
 8007ca8:	6a3b      	ldr	r3, [r7, #32]
 8007caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cac:	4a1a      	ldr	r2, [pc, #104]	@ (8007d18 <xTaskGenericNotify+0x174>)
 8007cae:	6013      	str	r3, [r2, #0]
 8007cb0:	6a3b      	ldr	r3, [r7, #32]
 8007cb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cb4:	4613      	mov	r3, r2
 8007cb6:	009b      	lsls	r3, r3, #2
 8007cb8:	4413      	add	r3, r2
 8007cba:	009b      	lsls	r3, r3, #2
 8007cbc:	4a17      	ldr	r2, [pc, #92]	@ (8007d1c <xTaskGenericNotify+0x178>)
 8007cbe:	441a      	add	r2, r3
 8007cc0:	6a3b      	ldr	r3, [r7, #32]
 8007cc2:	3304      	adds	r3, #4
 8007cc4:	4619      	mov	r1, r3
 8007cc6:	4610      	mov	r0, r2
 8007cc8:	f7fd fd43 	bl	8005752 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007ccc:	6a3b      	ldr	r3, [r7, #32]
 8007cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d00b      	beq.n	8007cec <xTaskGenericNotify+0x148>
	__asm volatile
 8007cd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cd8:	f383 8811 	msr	BASEPRI, r3
 8007cdc:	f3bf 8f6f 	isb	sy
 8007ce0:	f3bf 8f4f 	dsb	sy
 8007ce4:	613b      	str	r3, [r7, #16]
}
 8007ce6:	bf00      	nop
 8007ce8:	bf00      	nop
 8007cea:	e7fd      	b.n	8007ce8 <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007cec:	6a3b      	ldr	r3, [r7, #32]
 8007cee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cf0:	4b0b      	ldr	r3, [pc, #44]	@ (8007d20 <xTaskGenericNotify+0x17c>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cf6:	429a      	cmp	r2, r3
 8007cf8:	d907      	bls.n	8007d0a <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8007cfa:	4b0a      	ldr	r3, [pc, #40]	@ (8007d24 <xTaskGenericNotify+0x180>)
 8007cfc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d00:	601a      	str	r2, [r3, #0]
 8007d02:	f3bf 8f4f 	dsb	sy
 8007d06:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007d0a:	f000 fdbf 	bl	800888c <vPortExitCritical>

		return xReturn;
 8007d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3728      	adds	r7, #40	@ 0x28
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}
 8007d18:	20000f74 	.word	0x20000f74
 8007d1c:	20000a9c 	.word	0x20000a9c
 8007d20:	20000a98 	.word	0x20000a98
 8007d24:	e000ed04 	.word	0xe000ed04

08007d28 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b084      	sub	sp, #16
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007d32:	4b21      	ldr	r3, [pc, #132]	@ (8007db8 <prvAddCurrentTaskToDelayedList+0x90>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d38:	4b20      	ldr	r3, [pc, #128]	@ (8007dbc <prvAddCurrentTaskToDelayedList+0x94>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	3304      	adds	r3, #4
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f7fd fd64 	bl	800580c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007d4a:	d10a      	bne.n	8007d62 <prvAddCurrentTaskToDelayedList+0x3a>
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d007      	beq.n	8007d62 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d52:	4b1a      	ldr	r3, [pc, #104]	@ (8007dbc <prvAddCurrentTaskToDelayedList+0x94>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	3304      	adds	r3, #4
 8007d58:	4619      	mov	r1, r3
 8007d5a:	4819      	ldr	r0, [pc, #100]	@ (8007dc0 <prvAddCurrentTaskToDelayedList+0x98>)
 8007d5c:	f7fd fcf9 	bl	8005752 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007d60:	e026      	b.n	8007db0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007d62:	68fa      	ldr	r2, [r7, #12]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	4413      	add	r3, r2
 8007d68:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007d6a:	4b14      	ldr	r3, [pc, #80]	@ (8007dbc <prvAddCurrentTaskToDelayedList+0x94>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	68ba      	ldr	r2, [r7, #8]
 8007d70:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007d72:	68ba      	ldr	r2, [r7, #8]
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	429a      	cmp	r2, r3
 8007d78:	d209      	bcs.n	8007d8e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d7a:	4b12      	ldr	r3, [pc, #72]	@ (8007dc4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007d7c:	681a      	ldr	r2, [r3, #0]
 8007d7e:	4b0f      	ldr	r3, [pc, #60]	@ (8007dbc <prvAddCurrentTaskToDelayedList+0x94>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	3304      	adds	r3, #4
 8007d84:	4619      	mov	r1, r3
 8007d86:	4610      	mov	r0, r2
 8007d88:	f7fd fd07 	bl	800579a <vListInsert>
}
 8007d8c:	e010      	b.n	8007db0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d8e:	4b0e      	ldr	r3, [pc, #56]	@ (8007dc8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007d90:	681a      	ldr	r2, [r3, #0]
 8007d92:	4b0a      	ldr	r3, [pc, #40]	@ (8007dbc <prvAddCurrentTaskToDelayedList+0x94>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	3304      	adds	r3, #4
 8007d98:	4619      	mov	r1, r3
 8007d9a:	4610      	mov	r0, r2
 8007d9c:	f7fd fcfd 	bl	800579a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007da0:	4b0a      	ldr	r3, [pc, #40]	@ (8007dcc <prvAddCurrentTaskToDelayedList+0xa4>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	68ba      	ldr	r2, [r7, #8]
 8007da6:	429a      	cmp	r2, r3
 8007da8:	d202      	bcs.n	8007db0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007daa:	4a08      	ldr	r2, [pc, #32]	@ (8007dcc <prvAddCurrentTaskToDelayedList+0xa4>)
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	6013      	str	r3, [r2, #0]
}
 8007db0:	bf00      	nop
 8007db2:	3710      	adds	r7, #16
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}
 8007db8:	20000f70 	.word	0x20000f70
 8007dbc:	20000a98 	.word	0x20000a98
 8007dc0:	20000f58 	.word	0x20000f58
 8007dc4:	20000f28 	.word	0x20000f28
 8007dc8:	20000f24 	.word	0x20000f24
 8007dcc:	20000f8c 	.word	0x20000f8c

08007dd0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b08a      	sub	sp, #40	@ 0x28
 8007dd4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007dda:	f000 fb71 	bl	80084c0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007dde:	4b1d      	ldr	r3, [pc, #116]	@ (8007e54 <xTimerCreateTimerTask+0x84>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d021      	beq.n	8007e2a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007de6:	2300      	movs	r3, #0
 8007de8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007dea:	2300      	movs	r3, #0
 8007dec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007dee:	1d3a      	adds	r2, r7, #4
 8007df0:	f107 0108 	add.w	r1, r7, #8
 8007df4:	f107 030c 	add.w	r3, r7, #12
 8007df8:	4618      	mov	r0, r3
 8007dfa:	f7fd fc63 	bl	80056c4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007dfe:	6879      	ldr	r1, [r7, #4]
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	68fa      	ldr	r2, [r7, #12]
 8007e04:	9202      	str	r2, [sp, #8]
 8007e06:	9301      	str	r3, [sp, #4]
 8007e08:	2302      	movs	r3, #2
 8007e0a:	9300      	str	r3, [sp, #0]
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	460a      	mov	r2, r1
 8007e10:	4911      	ldr	r1, [pc, #68]	@ (8007e58 <xTimerCreateTimerTask+0x88>)
 8007e12:	4812      	ldr	r0, [pc, #72]	@ (8007e5c <xTimerCreateTimerTask+0x8c>)
 8007e14:	f7fe fc12 	bl	800663c <xTaskCreateStatic>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	4a11      	ldr	r2, [pc, #68]	@ (8007e60 <xTimerCreateTimerTask+0x90>)
 8007e1c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007e1e:	4b10      	ldr	r3, [pc, #64]	@ (8007e60 <xTimerCreateTimerTask+0x90>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d001      	beq.n	8007e2a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007e26:	2301      	movs	r3, #1
 8007e28:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d10b      	bne.n	8007e48 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007e30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e34:	f383 8811 	msr	BASEPRI, r3
 8007e38:	f3bf 8f6f 	isb	sy
 8007e3c:	f3bf 8f4f 	dsb	sy
 8007e40:	613b      	str	r3, [r7, #16]
}
 8007e42:	bf00      	nop
 8007e44:	bf00      	nop
 8007e46:	e7fd      	b.n	8007e44 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007e48:	697b      	ldr	r3, [r7, #20]
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3718      	adds	r7, #24
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}
 8007e52:	bf00      	nop
 8007e54:	20000fd0 	.word	0x20000fd0
 8007e58:	0800aad8 	.word	0x0800aad8
 8007e5c:	08008059 	.word	0x08008059
 8007e60:	20000fd4 	.word	0x20000fd4

08007e64 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b088      	sub	sp, #32
 8007e68:	af02      	add	r7, sp, #8
 8007e6a:	60f8      	str	r0, [r7, #12]
 8007e6c:	60b9      	str	r1, [r7, #8]
 8007e6e:	607a      	str	r2, [r7, #4]
 8007e70:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8007e72:	202c      	movs	r0, #44	@ 0x2c
 8007e74:	f000 fdfa 	bl	8008a6c <pvPortMalloc>
 8007e78:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d00d      	beq.n	8007e9c <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	2200      	movs	r2, #0
 8007e84:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	9301      	str	r3, [sp, #4]
 8007e8c:	6a3b      	ldr	r3, [r7, #32]
 8007e8e:	9300      	str	r3, [sp, #0]
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	687a      	ldr	r2, [r7, #4]
 8007e94:	68b9      	ldr	r1, [r7, #8]
 8007e96:	68f8      	ldr	r0, [r7, #12]
 8007e98:	f000 f805 	bl	8007ea6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8007e9c:	697b      	ldr	r3, [r7, #20]
	}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3718      	adds	r7, #24
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}

08007ea6 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8007ea6:	b580      	push	{r7, lr}
 8007ea8:	b086      	sub	sp, #24
 8007eaa:	af00      	add	r7, sp, #0
 8007eac:	60f8      	str	r0, [r7, #12]
 8007eae:	60b9      	str	r1, [r7, #8]
 8007eb0:	607a      	str	r2, [r7, #4]
 8007eb2:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d10b      	bne.n	8007ed2 <prvInitialiseNewTimer+0x2c>
	__asm volatile
 8007eba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ebe:	f383 8811 	msr	BASEPRI, r3
 8007ec2:	f3bf 8f6f 	isb	sy
 8007ec6:	f3bf 8f4f 	dsb	sy
 8007eca:	617b      	str	r3, [r7, #20]
}
 8007ecc:	bf00      	nop
 8007ece:	bf00      	nop
 8007ed0:	e7fd      	b.n	8007ece <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8007ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d01e      	beq.n	8007f16 <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8007ed8:	f000 faf2 	bl	80084c0 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8007edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ede:	68fa      	ldr	r2, [r7, #12]
 8007ee0:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8007ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ee4:	68ba      	ldr	r2, [r7, #8]
 8007ee6:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8007ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eea:	683a      	ldr	r2, [r7, #0]
 8007eec:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8007eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ef0:	6a3a      	ldr	r2, [r7, #32]
 8007ef2:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8007ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ef6:	3304      	adds	r3, #4
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f7fd fc1d 	bl	8005738 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d008      	beq.n	8007f16 <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8007f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f06:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007f0a:	f043 0304 	orr.w	r3, r3, #4
 8007f0e:	b2da      	uxtb	r2, r3
 8007f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f12:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8007f16:	bf00      	nop
 8007f18:	3718      	adds	r7, #24
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}
	...

08007f20 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b08a      	sub	sp, #40	@ 0x28
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	60f8      	str	r0, [r7, #12]
 8007f28:	60b9      	str	r1, [r7, #8]
 8007f2a:	607a      	str	r2, [r7, #4]
 8007f2c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d10b      	bne.n	8007f50 <xTimerGenericCommand+0x30>
	__asm volatile
 8007f38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f3c:	f383 8811 	msr	BASEPRI, r3
 8007f40:	f3bf 8f6f 	isb	sy
 8007f44:	f3bf 8f4f 	dsb	sy
 8007f48:	623b      	str	r3, [r7, #32]
}
 8007f4a:	bf00      	nop
 8007f4c:	bf00      	nop
 8007f4e:	e7fd      	b.n	8007f4c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007f50:	4b19      	ldr	r3, [pc, #100]	@ (8007fb8 <xTimerGenericCommand+0x98>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d02a      	beq.n	8007fae <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	2b05      	cmp	r3, #5
 8007f68:	dc18      	bgt.n	8007f9c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007f6a:	f7ff fbe1 	bl	8007730 <xTaskGetSchedulerState>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	2b02      	cmp	r3, #2
 8007f72:	d109      	bne.n	8007f88 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007f74:	4b10      	ldr	r3, [pc, #64]	@ (8007fb8 <xTimerGenericCommand+0x98>)
 8007f76:	6818      	ldr	r0, [r3, #0]
 8007f78:	f107 0110 	add.w	r1, r7, #16
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f80:	f7fd fdb4 	bl	8005aec <xQueueGenericSend>
 8007f84:	6278      	str	r0, [r7, #36]	@ 0x24
 8007f86:	e012      	b.n	8007fae <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007f88:	4b0b      	ldr	r3, [pc, #44]	@ (8007fb8 <xTimerGenericCommand+0x98>)
 8007f8a:	6818      	ldr	r0, [r3, #0]
 8007f8c:	f107 0110 	add.w	r1, r7, #16
 8007f90:	2300      	movs	r3, #0
 8007f92:	2200      	movs	r2, #0
 8007f94:	f7fd fdaa 	bl	8005aec <xQueueGenericSend>
 8007f98:	6278      	str	r0, [r7, #36]	@ 0x24
 8007f9a:	e008      	b.n	8007fae <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007f9c:	4b06      	ldr	r3, [pc, #24]	@ (8007fb8 <xTimerGenericCommand+0x98>)
 8007f9e:	6818      	ldr	r0, [r3, #0]
 8007fa0:	f107 0110 	add.w	r1, r7, #16
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	683a      	ldr	r2, [r7, #0]
 8007fa8:	f7fd fea2 	bl	8005cf0 <xQueueGenericSendFromISR>
 8007fac:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3728      	adds	r7, #40	@ 0x28
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}
 8007fb8:	20000fd0 	.word	0x20000fd0

08007fbc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b088      	sub	sp, #32
 8007fc0:	af02      	add	r7, sp, #8
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fc6:	4b23      	ldr	r3, [pc, #140]	@ (8008054 <prvProcessExpiredTimer+0x98>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	68db      	ldr	r3, [r3, #12]
 8007fcc:	68db      	ldr	r3, [r3, #12]
 8007fce:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	3304      	adds	r3, #4
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	f7fd fc19 	bl	800580c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007fe0:	f003 0304 	and.w	r3, r3, #4
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d023      	beq.n	8008030 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	699a      	ldr	r2, [r3, #24]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	18d1      	adds	r1, r2, r3
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	683a      	ldr	r2, [r7, #0]
 8007ff4:	6978      	ldr	r0, [r7, #20]
 8007ff6:	f000 f8d5 	bl	80081a4 <prvInsertTimerInActiveList>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d020      	beq.n	8008042 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008000:	2300      	movs	r3, #0
 8008002:	9300      	str	r3, [sp, #0]
 8008004:	2300      	movs	r3, #0
 8008006:	687a      	ldr	r2, [r7, #4]
 8008008:	2100      	movs	r1, #0
 800800a:	6978      	ldr	r0, [r7, #20]
 800800c:	f7ff ff88 	bl	8007f20 <xTimerGenericCommand>
 8008010:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d114      	bne.n	8008042 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800801c:	f383 8811 	msr	BASEPRI, r3
 8008020:	f3bf 8f6f 	isb	sy
 8008024:	f3bf 8f4f 	dsb	sy
 8008028:	60fb      	str	r3, [r7, #12]
}
 800802a:	bf00      	nop
 800802c:	bf00      	nop
 800802e:	e7fd      	b.n	800802c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008036:	f023 0301 	bic.w	r3, r3, #1
 800803a:	b2da      	uxtb	r2, r3
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	6a1b      	ldr	r3, [r3, #32]
 8008046:	6978      	ldr	r0, [r7, #20]
 8008048:	4798      	blx	r3
}
 800804a:	bf00      	nop
 800804c:	3718      	adds	r7, #24
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}
 8008052:	bf00      	nop
 8008054:	20000fc8 	.word	0x20000fc8

08008058 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b084      	sub	sp, #16
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008060:	f107 0308 	add.w	r3, r7, #8
 8008064:	4618      	mov	r0, r3
 8008066:	f000 f859 	bl	800811c <prvGetNextExpireTime>
 800806a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	4619      	mov	r1, r3
 8008070:	68f8      	ldr	r0, [r7, #12]
 8008072:	f000 f805 	bl	8008080 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008076:	f000 f8d7 	bl	8008228 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800807a:	bf00      	nop
 800807c:	e7f0      	b.n	8008060 <prvTimerTask+0x8>
	...

08008080 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b084      	sub	sp, #16
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
 8008088:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800808a:	f7fe fd87 	bl	8006b9c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800808e:	f107 0308 	add.w	r3, r7, #8
 8008092:	4618      	mov	r0, r3
 8008094:	f000 f866 	bl	8008164 <prvSampleTimeNow>
 8008098:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d130      	bne.n	8008102 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d10a      	bne.n	80080bc <prvProcessTimerOrBlockTask+0x3c>
 80080a6:	687a      	ldr	r2, [r7, #4]
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	429a      	cmp	r2, r3
 80080ac:	d806      	bhi.n	80080bc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80080ae:	f7fe fd83 	bl	8006bb8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80080b2:	68f9      	ldr	r1, [r7, #12]
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f7ff ff81 	bl	8007fbc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80080ba:	e024      	b.n	8008106 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d008      	beq.n	80080d4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80080c2:	4b13      	ldr	r3, [pc, #76]	@ (8008110 <prvProcessTimerOrBlockTask+0x90>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d101      	bne.n	80080d0 <prvProcessTimerOrBlockTask+0x50>
 80080cc:	2301      	movs	r3, #1
 80080ce:	e000      	b.n	80080d2 <prvProcessTimerOrBlockTask+0x52>
 80080d0:	2300      	movs	r3, #0
 80080d2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80080d4:	4b0f      	ldr	r3, [pc, #60]	@ (8008114 <prvProcessTimerOrBlockTask+0x94>)
 80080d6:	6818      	ldr	r0, [r3, #0]
 80080d8:	687a      	ldr	r2, [r7, #4]
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	1ad3      	subs	r3, r2, r3
 80080de:	683a      	ldr	r2, [r7, #0]
 80080e0:	4619      	mov	r1, r3
 80080e2:	f7fe fa77 	bl	80065d4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80080e6:	f7fe fd67 	bl	8006bb8 <xTaskResumeAll>
 80080ea:	4603      	mov	r3, r0
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d10a      	bne.n	8008106 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80080f0:	4b09      	ldr	r3, [pc, #36]	@ (8008118 <prvProcessTimerOrBlockTask+0x98>)
 80080f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80080f6:	601a      	str	r2, [r3, #0]
 80080f8:	f3bf 8f4f 	dsb	sy
 80080fc:	f3bf 8f6f 	isb	sy
}
 8008100:	e001      	b.n	8008106 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008102:	f7fe fd59 	bl	8006bb8 <xTaskResumeAll>
}
 8008106:	bf00      	nop
 8008108:	3710      	adds	r7, #16
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}
 800810e:	bf00      	nop
 8008110:	20000fcc 	.word	0x20000fcc
 8008114:	20000fd0 	.word	0x20000fd0
 8008118:	e000ed04 	.word	0xe000ed04

0800811c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800811c:	b480      	push	{r7}
 800811e:	b085      	sub	sp, #20
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008124:	4b0e      	ldr	r3, [pc, #56]	@ (8008160 <prvGetNextExpireTime+0x44>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d101      	bne.n	8008132 <prvGetNextExpireTime+0x16>
 800812e:	2201      	movs	r2, #1
 8008130:	e000      	b.n	8008134 <prvGetNextExpireTime+0x18>
 8008132:	2200      	movs	r2, #0
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d105      	bne.n	800814c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008140:	4b07      	ldr	r3, [pc, #28]	@ (8008160 <prvGetNextExpireTime+0x44>)
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	68db      	ldr	r3, [r3, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	60fb      	str	r3, [r7, #12]
 800814a:	e001      	b.n	8008150 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800814c:	2300      	movs	r3, #0
 800814e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008150:	68fb      	ldr	r3, [r7, #12]
}
 8008152:	4618      	mov	r0, r3
 8008154:	3714      	adds	r7, #20
 8008156:	46bd      	mov	sp, r7
 8008158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815c:	4770      	bx	lr
 800815e:	bf00      	nop
 8008160:	20000fc8 	.word	0x20000fc8

08008164 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b084      	sub	sp, #16
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800816c:	f7fe fdc2 	bl	8006cf4 <xTaskGetTickCount>
 8008170:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008172:	4b0b      	ldr	r3, [pc, #44]	@ (80081a0 <prvSampleTimeNow+0x3c>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	68fa      	ldr	r2, [r7, #12]
 8008178:	429a      	cmp	r2, r3
 800817a:	d205      	bcs.n	8008188 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800817c:	f000 f93a 	bl	80083f4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2201      	movs	r2, #1
 8008184:	601a      	str	r2, [r3, #0]
 8008186:	e002      	b.n	800818e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2200      	movs	r2, #0
 800818c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800818e:	4a04      	ldr	r2, [pc, #16]	@ (80081a0 <prvSampleTimeNow+0x3c>)
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008194:	68fb      	ldr	r3, [r7, #12]
}
 8008196:	4618      	mov	r0, r3
 8008198:	3710      	adds	r7, #16
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}
 800819e:	bf00      	nop
 80081a0:	20000fd8 	.word	0x20000fd8

080081a4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b086      	sub	sp, #24
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	60f8      	str	r0, [r7, #12]
 80081ac:	60b9      	str	r1, [r7, #8]
 80081ae:	607a      	str	r2, [r7, #4]
 80081b0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80081b2:	2300      	movs	r3, #0
 80081b4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	68ba      	ldr	r2, [r7, #8]
 80081ba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	68fa      	ldr	r2, [r7, #12]
 80081c0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80081c2:	68ba      	ldr	r2, [r7, #8]
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	429a      	cmp	r2, r3
 80081c8:	d812      	bhi.n	80081f0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081ca:	687a      	ldr	r2, [r7, #4]
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	1ad2      	subs	r2, r2, r3
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	699b      	ldr	r3, [r3, #24]
 80081d4:	429a      	cmp	r2, r3
 80081d6:	d302      	bcc.n	80081de <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80081d8:	2301      	movs	r3, #1
 80081da:	617b      	str	r3, [r7, #20]
 80081dc:	e01b      	b.n	8008216 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80081de:	4b10      	ldr	r3, [pc, #64]	@ (8008220 <prvInsertTimerInActiveList+0x7c>)
 80081e0:	681a      	ldr	r2, [r3, #0]
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	3304      	adds	r3, #4
 80081e6:	4619      	mov	r1, r3
 80081e8:	4610      	mov	r0, r2
 80081ea:	f7fd fad6 	bl	800579a <vListInsert>
 80081ee:	e012      	b.n	8008216 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80081f0:	687a      	ldr	r2, [r7, #4]
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	429a      	cmp	r2, r3
 80081f6:	d206      	bcs.n	8008206 <prvInsertTimerInActiveList+0x62>
 80081f8:	68ba      	ldr	r2, [r7, #8]
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	429a      	cmp	r2, r3
 80081fe:	d302      	bcc.n	8008206 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008200:	2301      	movs	r3, #1
 8008202:	617b      	str	r3, [r7, #20]
 8008204:	e007      	b.n	8008216 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008206:	4b07      	ldr	r3, [pc, #28]	@ (8008224 <prvInsertTimerInActiveList+0x80>)
 8008208:	681a      	ldr	r2, [r3, #0]
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	3304      	adds	r3, #4
 800820e:	4619      	mov	r1, r3
 8008210:	4610      	mov	r0, r2
 8008212:	f7fd fac2 	bl	800579a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008216:	697b      	ldr	r3, [r7, #20]
}
 8008218:	4618      	mov	r0, r3
 800821a:	3718      	adds	r7, #24
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}
 8008220:	20000fcc 	.word	0x20000fcc
 8008224:	20000fc8 	.word	0x20000fc8

08008228 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b08e      	sub	sp, #56	@ 0x38
 800822c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800822e:	e0ce      	b.n	80083ce <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2b00      	cmp	r3, #0
 8008234:	da19      	bge.n	800826a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008236:	1d3b      	adds	r3, r7, #4
 8008238:	3304      	adds	r3, #4
 800823a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800823c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800823e:	2b00      	cmp	r3, #0
 8008240:	d10b      	bne.n	800825a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8008242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008246:	f383 8811 	msr	BASEPRI, r3
 800824a:	f3bf 8f6f 	isb	sy
 800824e:	f3bf 8f4f 	dsb	sy
 8008252:	61fb      	str	r3, [r7, #28]
}
 8008254:	bf00      	nop
 8008256:	bf00      	nop
 8008258:	e7fd      	b.n	8008256 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800825a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008260:	6850      	ldr	r0, [r2, #4]
 8008262:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008264:	6892      	ldr	r2, [r2, #8]
 8008266:	4611      	mov	r1, r2
 8008268:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2b00      	cmp	r3, #0
 800826e:	f2c0 80ae 	blt.w	80083ce <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008278:	695b      	ldr	r3, [r3, #20]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d004      	beq.n	8008288 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800827e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008280:	3304      	adds	r3, #4
 8008282:	4618      	mov	r0, r3
 8008284:	f7fd fac2 	bl	800580c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008288:	463b      	mov	r3, r7
 800828a:	4618      	mov	r0, r3
 800828c:	f7ff ff6a 	bl	8008164 <prvSampleTimeNow>
 8008290:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2b09      	cmp	r3, #9
 8008296:	f200 8097 	bhi.w	80083c8 <prvProcessReceivedCommands+0x1a0>
 800829a:	a201      	add	r2, pc, #4	@ (adr r2, 80082a0 <prvProcessReceivedCommands+0x78>)
 800829c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082a0:	080082c9 	.word	0x080082c9
 80082a4:	080082c9 	.word	0x080082c9
 80082a8:	080082c9 	.word	0x080082c9
 80082ac:	0800833f 	.word	0x0800833f
 80082b0:	08008353 	.word	0x08008353
 80082b4:	0800839f 	.word	0x0800839f
 80082b8:	080082c9 	.word	0x080082c9
 80082bc:	080082c9 	.word	0x080082c9
 80082c0:	0800833f 	.word	0x0800833f
 80082c4:	08008353 	.word	0x08008353
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80082c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082ca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80082ce:	f043 0301 	orr.w	r3, r3, #1
 80082d2:	b2da      	uxtb	r2, r3
 80082d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082d6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80082da:	68ba      	ldr	r2, [r7, #8]
 80082dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082de:	699b      	ldr	r3, [r3, #24]
 80082e0:	18d1      	adds	r1, r2, r3
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80082e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80082e8:	f7ff ff5c 	bl	80081a4 <prvInsertTimerInActiveList>
 80082ec:	4603      	mov	r3, r0
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d06c      	beq.n	80083cc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80082f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082f4:	6a1b      	ldr	r3, [r3, #32]
 80082f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80082f8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80082fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008300:	f003 0304 	and.w	r3, r3, #4
 8008304:	2b00      	cmp	r3, #0
 8008306:	d061      	beq.n	80083cc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008308:	68ba      	ldr	r2, [r7, #8]
 800830a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800830c:	699b      	ldr	r3, [r3, #24]
 800830e:	441a      	add	r2, r3
 8008310:	2300      	movs	r3, #0
 8008312:	9300      	str	r3, [sp, #0]
 8008314:	2300      	movs	r3, #0
 8008316:	2100      	movs	r1, #0
 8008318:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800831a:	f7ff fe01 	bl	8007f20 <xTimerGenericCommand>
 800831e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008320:	6a3b      	ldr	r3, [r7, #32]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d152      	bne.n	80083cc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8008326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800832a:	f383 8811 	msr	BASEPRI, r3
 800832e:	f3bf 8f6f 	isb	sy
 8008332:	f3bf 8f4f 	dsb	sy
 8008336:	61bb      	str	r3, [r7, #24]
}
 8008338:	bf00      	nop
 800833a:	bf00      	nop
 800833c:	e7fd      	b.n	800833a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800833e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008340:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008344:	f023 0301 	bic.w	r3, r3, #1
 8008348:	b2da      	uxtb	r2, r3
 800834a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800834c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008350:	e03d      	b.n	80083ce <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008354:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008358:	f043 0301 	orr.w	r3, r3, #1
 800835c:	b2da      	uxtb	r2, r3
 800835e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008360:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008364:	68ba      	ldr	r2, [r7, #8]
 8008366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008368:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800836a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800836c:	699b      	ldr	r3, [r3, #24]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d10b      	bne.n	800838a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8008372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008376:	f383 8811 	msr	BASEPRI, r3
 800837a:	f3bf 8f6f 	isb	sy
 800837e:	f3bf 8f4f 	dsb	sy
 8008382:	617b      	str	r3, [r7, #20]
}
 8008384:	bf00      	nop
 8008386:	bf00      	nop
 8008388:	e7fd      	b.n	8008386 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800838a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800838c:	699a      	ldr	r2, [r3, #24]
 800838e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008390:	18d1      	adds	r1, r2, r3
 8008392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008394:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008396:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008398:	f7ff ff04 	bl	80081a4 <prvInsertTimerInActiveList>
					break;
 800839c:	e017      	b.n	80083ce <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800839e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80083a4:	f003 0302 	and.w	r3, r3, #2
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d103      	bne.n	80083b4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80083ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80083ae:	f000 fc2b 	bl	8008c08 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80083b2:	e00c      	b.n	80083ce <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80083b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083b6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80083ba:	f023 0301 	bic.w	r3, r3, #1
 80083be:	b2da      	uxtb	r2, r3
 80083c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083c2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80083c6:	e002      	b.n	80083ce <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80083c8:	bf00      	nop
 80083ca:	e000      	b.n	80083ce <prvProcessReceivedCommands+0x1a6>
					break;
 80083cc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80083ce:	4b08      	ldr	r3, [pc, #32]	@ (80083f0 <prvProcessReceivedCommands+0x1c8>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	1d39      	adds	r1, r7, #4
 80083d4:	2200      	movs	r2, #0
 80083d6:	4618      	mov	r0, r3
 80083d8:	f7fd fdb8 	bl	8005f4c <xQueueReceive>
 80083dc:	4603      	mov	r3, r0
 80083de:	2b00      	cmp	r3, #0
 80083e0:	f47f af26 	bne.w	8008230 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80083e4:	bf00      	nop
 80083e6:	bf00      	nop
 80083e8:	3730      	adds	r7, #48	@ 0x30
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}
 80083ee:	bf00      	nop
 80083f0:	20000fd0 	.word	0x20000fd0

080083f4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b088      	sub	sp, #32
 80083f8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80083fa:	e049      	b.n	8008490 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80083fc:	4b2e      	ldr	r3, [pc, #184]	@ (80084b8 <prvSwitchTimerLists+0xc4>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	68db      	ldr	r3, [r3, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008406:	4b2c      	ldr	r3, [pc, #176]	@ (80084b8 <prvSwitchTimerLists+0xc4>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	68db      	ldr	r3, [r3, #12]
 800840c:	68db      	ldr	r3, [r3, #12]
 800840e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	3304      	adds	r3, #4
 8008414:	4618      	mov	r0, r3
 8008416:	f7fd f9f9 	bl	800580c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	6a1b      	ldr	r3, [r3, #32]
 800841e:	68f8      	ldr	r0, [r7, #12]
 8008420:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008428:	f003 0304 	and.w	r3, r3, #4
 800842c:	2b00      	cmp	r3, #0
 800842e:	d02f      	beq.n	8008490 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	699b      	ldr	r3, [r3, #24]
 8008434:	693a      	ldr	r2, [r7, #16]
 8008436:	4413      	add	r3, r2
 8008438:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800843a:	68ba      	ldr	r2, [r7, #8]
 800843c:	693b      	ldr	r3, [r7, #16]
 800843e:	429a      	cmp	r2, r3
 8008440:	d90e      	bls.n	8008460 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	68ba      	ldr	r2, [r7, #8]
 8008446:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	68fa      	ldr	r2, [r7, #12]
 800844c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800844e:	4b1a      	ldr	r3, [pc, #104]	@ (80084b8 <prvSwitchTimerLists+0xc4>)
 8008450:	681a      	ldr	r2, [r3, #0]
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	3304      	adds	r3, #4
 8008456:	4619      	mov	r1, r3
 8008458:	4610      	mov	r0, r2
 800845a:	f7fd f99e 	bl	800579a <vListInsert>
 800845e:	e017      	b.n	8008490 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008460:	2300      	movs	r3, #0
 8008462:	9300      	str	r3, [sp, #0]
 8008464:	2300      	movs	r3, #0
 8008466:	693a      	ldr	r2, [r7, #16]
 8008468:	2100      	movs	r1, #0
 800846a:	68f8      	ldr	r0, [r7, #12]
 800846c:	f7ff fd58 	bl	8007f20 <xTimerGenericCommand>
 8008470:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d10b      	bne.n	8008490 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800847c:	f383 8811 	msr	BASEPRI, r3
 8008480:	f3bf 8f6f 	isb	sy
 8008484:	f3bf 8f4f 	dsb	sy
 8008488:	603b      	str	r3, [r7, #0]
}
 800848a:	bf00      	nop
 800848c:	bf00      	nop
 800848e:	e7fd      	b.n	800848c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008490:	4b09      	ldr	r3, [pc, #36]	@ (80084b8 <prvSwitchTimerLists+0xc4>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d1b0      	bne.n	80083fc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800849a:	4b07      	ldr	r3, [pc, #28]	@ (80084b8 <prvSwitchTimerLists+0xc4>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80084a0:	4b06      	ldr	r3, [pc, #24]	@ (80084bc <prvSwitchTimerLists+0xc8>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4a04      	ldr	r2, [pc, #16]	@ (80084b8 <prvSwitchTimerLists+0xc4>)
 80084a6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80084a8:	4a04      	ldr	r2, [pc, #16]	@ (80084bc <prvSwitchTimerLists+0xc8>)
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	6013      	str	r3, [r2, #0]
}
 80084ae:	bf00      	nop
 80084b0:	3718      	adds	r7, #24
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}
 80084b6:	bf00      	nop
 80084b8:	20000fc8 	.word	0x20000fc8
 80084bc:	20000fcc 	.word	0x20000fcc

080084c0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b082      	sub	sp, #8
 80084c4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80084c6:	f000 f9af 	bl	8008828 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80084ca:	4b15      	ldr	r3, [pc, #84]	@ (8008520 <prvCheckForValidListAndQueue+0x60>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d120      	bne.n	8008514 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80084d2:	4814      	ldr	r0, [pc, #80]	@ (8008524 <prvCheckForValidListAndQueue+0x64>)
 80084d4:	f7fd f910 	bl	80056f8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80084d8:	4813      	ldr	r0, [pc, #76]	@ (8008528 <prvCheckForValidListAndQueue+0x68>)
 80084da:	f7fd f90d 	bl	80056f8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80084de:	4b13      	ldr	r3, [pc, #76]	@ (800852c <prvCheckForValidListAndQueue+0x6c>)
 80084e0:	4a10      	ldr	r2, [pc, #64]	@ (8008524 <prvCheckForValidListAndQueue+0x64>)
 80084e2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80084e4:	4b12      	ldr	r3, [pc, #72]	@ (8008530 <prvCheckForValidListAndQueue+0x70>)
 80084e6:	4a10      	ldr	r2, [pc, #64]	@ (8008528 <prvCheckForValidListAndQueue+0x68>)
 80084e8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80084ea:	2300      	movs	r3, #0
 80084ec:	9300      	str	r3, [sp, #0]
 80084ee:	4b11      	ldr	r3, [pc, #68]	@ (8008534 <prvCheckForValidListAndQueue+0x74>)
 80084f0:	4a11      	ldr	r2, [pc, #68]	@ (8008538 <prvCheckForValidListAndQueue+0x78>)
 80084f2:	2110      	movs	r1, #16
 80084f4:	200a      	movs	r0, #10
 80084f6:	f7fd fa1d 	bl	8005934 <xQueueGenericCreateStatic>
 80084fa:	4603      	mov	r3, r0
 80084fc:	4a08      	ldr	r2, [pc, #32]	@ (8008520 <prvCheckForValidListAndQueue+0x60>)
 80084fe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008500:	4b07      	ldr	r3, [pc, #28]	@ (8008520 <prvCheckForValidListAndQueue+0x60>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d005      	beq.n	8008514 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008508:	4b05      	ldr	r3, [pc, #20]	@ (8008520 <prvCheckForValidListAndQueue+0x60>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	490b      	ldr	r1, [pc, #44]	@ (800853c <prvCheckForValidListAndQueue+0x7c>)
 800850e:	4618      	mov	r0, r3
 8008510:	f7fe f836 	bl	8006580 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008514:	f000 f9ba 	bl	800888c <vPortExitCritical>
}
 8008518:	bf00      	nop
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}
 800851e:	bf00      	nop
 8008520:	20000fd0 	.word	0x20000fd0
 8008524:	20000fa0 	.word	0x20000fa0
 8008528:	20000fb4 	.word	0x20000fb4
 800852c:	20000fc8 	.word	0x20000fc8
 8008530:	20000fcc 	.word	0x20000fcc
 8008534:	2000107c 	.word	0x2000107c
 8008538:	20000fdc 	.word	0x20000fdc
 800853c:	0800aae0 	.word	0x0800aae0

08008540 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b086      	sub	sp, #24
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d10b      	bne.n	800856a <pvTimerGetTimerID+0x2a>
	__asm volatile
 8008552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008556:	f383 8811 	msr	BASEPRI, r3
 800855a:	f3bf 8f6f 	isb	sy
 800855e:	f3bf 8f4f 	dsb	sy
 8008562:	60fb      	str	r3, [r7, #12]
}
 8008564:	bf00      	nop
 8008566:	bf00      	nop
 8008568:	e7fd      	b.n	8008566 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800856a:	f000 f95d 	bl	8008828 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	69db      	ldr	r3, [r3, #28]
 8008572:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8008574:	f000 f98a 	bl	800888c <vPortExitCritical>

	return pvReturn;
 8008578:	693b      	ldr	r3, [r7, #16]
}
 800857a:	4618      	mov	r0, r3
 800857c:	3718      	adds	r7, #24
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}

08008582 <vTimerSetTimerID>:
/*-----------------------------------------------------------*/

void vTimerSetTimerID( TimerHandle_t xTimer, void *pvNewID )
{
 8008582:	b580      	push	{r7, lr}
 8008584:	b084      	sub	sp, #16
 8008586:	af00      	add	r7, sp, #0
 8008588:	6078      	str	r0, [r7, #4]
 800858a:	6039      	str	r1, [r7, #0]
Timer_t * const pxTimer = xTimer;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	60fb      	str	r3, [r7, #12]

	configASSERT( xTimer );
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d10b      	bne.n	80085ae <vTimerSetTimerID+0x2c>
	__asm volatile
 8008596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800859a:	f383 8811 	msr	BASEPRI, r3
 800859e:	f3bf 8f6f 	isb	sy
 80085a2:	f3bf 8f4f 	dsb	sy
 80085a6:	60bb      	str	r3, [r7, #8]
}
 80085a8:	bf00      	nop
 80085aa:	bf00      	nop
 80085ac:	e7fd      	b.n	80085aa <vTimerSetTimerID+0x28>

	taskENTER_CRITICAL();
 80085ae:	f000 f93b 	bl	8008828 <vPortEnterCritical>
	{
		pxTimer->pvTimerID = pvNewID;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	683a      	ldr	r2, [r7, #0]
 80085b6:	61da      	str	r2, [r3, #28]
	}
	taskEXIT_CRITICAL();
 80085b8:	f000 f968 	bl	800888c <vPortExitCritical>
}
 80085bc:	bf00      	nop
 80085be:	3710      	adds	r7, #16
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}

080085c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80085c4:	b480      	push	{r7}
 80085c6:	b085      	sub	sp, #20
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	60f8      	str	r0, [r7, #12]
 80085cc:	60b9      	str	r1, [r7, #8]
 80085ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	3b04      	subs	r3, #4
 80085d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80085dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	3b04      	subs	r3, #4
 80085e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	f023 0201 	bic.w	r2, r3, #1
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	3b04      	subs	r3, #4
 80085f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80085f4:	4a0c      	ldr	r2, [pc, #48]	@ (8008628 <pxPortInitialiseStack+0x64>)
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	3b14      	subs	r3, #20
 80085fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008600:	687a      	ldr	r2, [r7, #4]
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	3b04      	subs	r3, #4
 800860a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	f06f 0202 	mvn.w	r2, #2
 8008612:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	3b20      	subs	r3, #32
 8008618:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800861a:	68fb      	ldr	r3, [r7, #12]
}
 800861c:	4618      	mov	r0, r3
 800861e:	3714      	adds	r7, #20
 8008620:	46bd      	mov	sp, r7
 8008622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008626:	4770      	bx	lr
 8008628:	0800862d 	.word	0x0800862d

0800862c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800862c:	b480      	push	{r7}
 800862e:	b085      	sub	sp, #20
 8008630:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008632:	2300      	movs	r3, #0
 8008634:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008636:	4b13      	ldr	r3, [pc, #76]	@ (8008684 <prvTaskExitError+0x58>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800863e:	d00b      	beq.n	8008658 <prvTaskExitError+0x2c>
	__asm volatile
 8008640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008644:	f383 8811 	msr	BASEPRI, r3
 8008648:	f3bf 8f6f 	isb	sy
 800864c:	f3bf 8f4f 	dsb	sy
 8008650:	60fb      	str	r3, [r7, #12]
}
 8008652:	bf00      	nop
 8008654:	bf00      	nop
 8008656:	e7fd      	b.n	8008654 <prvTaskExitError+0x28>
	__asm volatile
 8008658:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800865c:	f383 8811 	msr	BASEPRI, r3
 8008660:	f3bf 8f6f 	isb	sy
 8008664:	f3bf 8f4f 	dsb	sy
 8008668:	60bb      	str	r3, [r7, #8]
}
 800866a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800866c:	bf00      	nop
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d0fc      	beq.n	800866e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008674:	bf00      	nop
 8008676:	bf00      	nop
 8008678:	3714      	adds	r7, #20
 800867a:	46bd      	mov	sp, r7
 800867c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008680:	4770      	bx	lr
 8008682:	bf00      	nop
 8008684:	20000010 	.word	0x20000010
	...

08008690 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008690:	4b07      	ldr	r3, [pc, #28]	@ (80086b0 <pxCurrentTCBConst2>)
 8008692:	6819      	ldr	r1, [r3, #0]
 8008694:	6808      	ldr	r0, [r1, #0]
 8008696:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800869a:	f380 8809 	msr	PSP, r0
 800869e:	f3bf 8f6f 	isb	sy
 80086a2:	f04f 0000 	mov.w	r0, #0
 80086a6:	f380 8811 	msr	BASEPRI, r0
 80086aa:	4770      	bx	lr
 80086ac:	f3af 8000 	nop.w

080086b0 <pxCurrentTCBConst2>:
 80086b0:	20000a98 	.word	0x20000a98
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80086b4:	bf00      	nop
 80086b6:	bf00      	nop

080086b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80086b8:	4808      	ldr	r0, [pc, #32]	@ (80086dc <prvPortStartFirstTask+0x24>)
 80086ba:	6800      	ldr	r0, [r0, #0]
 80086bc:	6800      	ldr	r0, [r0, #0]
 80086be:	f380 8808 	msr	MSP, r0
 80086c2:	f04f 0000 	mov.w	r0, #0
 80086c6:	f380 8814 	msr	CONTROL, r0
 80086ca:	b662      	cpsie	i
 80086cc:	b661      	cpsie	f
 80086ce:	f3bf 8f4f 	dsb	sy
 80086d2:	f3bf 8f6f 	isb	sy
 80086d6:	df00      	svc	0
 80086d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80086da:	bf00      	nop
 80086dc:	e000ed08 	.word	0xe000ed08

080086e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b086      	sub	sp, #24
 80086e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80086e6:	4b47      	ldr	r3, [pc, #284]	@ (8008804 <xPortStartScheduler+0x124>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	4a47      	ldr	r2, [pc, #284]	@ (8008808 <xPortStartScheduler+0x128>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d10b      	bne.n	8008708 <xPortStartScheduler+0x28>
	__asm volatile
 80086f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086f4:	f383 8811 	msr	BASEPRI, r3
 80086f8:	f3bf 8f6f 	isb	sy
 80086fc:	f3bf 8f4f 	dsb	sy
 8008700:	60fb      	str	r3, [r7, #12]
}
 8008702:	bf00      	nop
 8008704:	bf00      	nop
 8008706:	e7fd      	b.n	8008704 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008708:	4b3e      	ldr	r3, [pc, #248]	@ (8008804 <xPortStartScheduler+0x124>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	4a3f      	ldr	r2, [pc, #252]	@ (800880c <xPortStartScheduler+0x12c>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d10b      	bne.n	800872a <xPortStartScheduler+0x4a>
	__asm volatile
 8008712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008716:	f383 8811 	msr	BASEPRI, r3
 800871a:	f3bf 8f6f 	isb	sy
 800871e:	f3bf 8f4f 	dsb	sy
 8008722:	613b      	str	r3, [r7, #16]
}
 8008724:	bf00      	nop
 8008726:	bf00      	nop
 8008728:	e7fd      	b.n	8008726 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800872a:	4b39      	ldr	r3, [pc, #228]	@ (8008810 <xPortStartScheduler+0x130>)
 800872c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	781b      	ldrb	r3, [r3, #0]
 8008732:	b2db      	uxtb	r3, r3
 8008734:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	22ff      	movs	r2, #255	@ 0xff
 800873a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	781b      	ldrb	r3, [r3, #0]
 8008740:	b2db      	uxtb	r3, r3
 8008742:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008744:	78fb      	ldrb	r3, [r7, #3]
 8008746:	b2db      	uxtb	r3, r3
 8008748:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800874c:	b2da      	uxtb	r2, r3
 800874e:	4b31      	ldr	r3, [pc, #196]	@ (8008814 <xPortStartScheduler+0x134>)
 8008750:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008752:	4b31      	ldr	r3, [pc, #196]	@ (8008818 <xPortStartScheduler+0x138>)
 8008754:	2207      	movs	r2, #7
 8008756:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008758:	e009      	b.n	800876e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800875a:	4b2f      	ldr	r3, [pc, #188]	@ (8008818 <xPortStartScheduler+0x138>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	3b01      	subs	r3, #1
 8008760:	4a2d      	ldr	r2, [pc, #180]	@ (8008818 <xPortStartScheduler+0x138>)
 8008762:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008764:	78fb      	ldrb	r3, [r7, #3]
 8008766:	b2db      	uxtb	r3, r3
 8008768:	005b      	lsls	r3, r3, #1
 800876a:	b2db      	uxtb	r3, r3
 800876c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800876e:	78fb      	ldrb	r3, [r7, #3]
 8008770:	b2db      	uxtb	r3, r3
 8008772:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008776:	2b80      	cmp	r3, #128	@ 0x80
 8008778:	d0ef      	beq.n	800875a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800877a:	4b27      	ldr	r3, [pc, #156]	@ (8008818 <xPortStartScheduler+0x138>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f1c3 0307 	rsb	r3, r3, #7
 8008782:	2b04      	cmp	r3, #4
 8008784:	d00b      	beq.n	800879e <xPortStartScheduler+0xbe>
	__asm volatile
 8008786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800878a:	f383 8811 	msr	BASEPRI, r3
 800878e:	f3bf 8f6f 	isb	sy
 8008792:	f3bf 8f4f 	dsb	sy
 8008796:	60bb      	str	r3, [r7, #8]
}
 8008798:	bf00      	nop
 800879a:	bf00      	nop
 800879c:	e7fd      	b.n	800879a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800879e:	4b1e      	ldr	r3, [pc, #120]	@ (8008818 <xPortStartScheduler+0x138>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	021b      	lsls	r3, r3, #8
 80087a4:	4a1c      	ldr	r2, [pc, #112]	@ (8008818 <xPortStartScheduler+0x138>)
 80087a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80087a8:	4b1b      	ldr	r3, [pc, #108]	@ (8008818 <xPortStartScheduler+0x138>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80087b0:	4a19      	ldr	r2, [pc, #100]	@ (8008818 <xPortStartScheduler+0x138>)
 80087b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	b2da      	uxtb	r2, r3
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80087bc:	4b17      	ldr	r3, [pc, #92]	@ (800881c <xPortStartScheduler+0x13c>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4a16      	ldr	r2, [pc, #88]	@ (800881c <xPortStartScheduler+0x13c>)
 80087c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80087c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80087c8:	4b14      	ldr	r3, [pc, #80]	@ (800881c <xPortStartScheduler+0x13c>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4a13      	ldr	r2, [pc, #76]	@ (800881c <xPortStartScheduler+0x13c>)
 80087ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80087d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80087d4:	f000 f8da 	bl	800898c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80087d8:	4b11      	ldr	r3, [pc, #68]	@ (8008820 <xPortStartScheduler+0x140>)
 80087da:	2200      	movs	r2, #0
 80087dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80087de:	f000 f8f9 	bl	80089d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80087e2:	4b10      	ldr	r3, [pc, #64]	@ (8008824 <xPortStartScheduler+0x144>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	4a0f      	ldr	r2, [pc, #60]	@ (8008824 <xPortStartScheduler+0x144>)
 80087e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80087ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80087ee:	f7ff ff63 	bl	80086b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80087f2:	f7fe fbd9 	bl	8006fa8 <vTaskSwitchContext>
	prvTaskExitError();
 80087f6:	f7ff ff19 	bl	800862c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80087fa:	2300      	movs	r3, #0
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	3718      	adds	r7, #24
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}
 8008804:	e000ed00 	.word	0xe000ed00
 8008808:	410fc271 	.word	0x410fc271
 800880c:	410fc270 	.word	0x410fc270
 8008810:	e000e400 	.word	0xe000e400
 8008814:	200010cc 	.word	0x200010cc
 8008818:	200010d0 	.word	0x200010d0
 800881c:	e000ed20 	.word	0xe000ed20
 8008820:	20000010 	.word	0x20000010
 8008824:	e000ef34 	.word	0xe000ef34

08008828 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008828:	b480      	push	{r7}
 800882a:	b083      	sub	sp, #12
 800882c:	af00      	add	r7, sp, #0
	__asm volatile
 800882e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008832:	f383 8811 	msr	BASEPRI, r3
 8008836:	f3bf 8f6f 	isb	sy
 800883a:	f3bf 8f4f 	dsb	sy
 800883e:	607b      	str	r3, [r7, #4]
}
 8008840:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008842:	4b10      	ldr	r3, [pc, #64]	@ (8008884 <vPortEnterCritical+0x5c>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	3301      	adds	r3, #1
 8008848:	4a0e      	ldr	r2, [pc, #56]	@ (8008884 <vPortEnterCritical+0x5c>)
 800884a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800884c:	4b0d      	ldr	r3, [pc, #52]	@ (8008884 <vPortEnterCritical+0x5c>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	2b01      	cmp	r3, #1
 8008852:	d110      	bne.n	8008876 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008854:	4b0c      	ldr	r3, [pc, #48]	@ (8008888 <vPortEnterCritical+0x60>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	b2db      	uxtb	r3, r3
 800885a:	2b00      	cmp	r3, #0
 800885c:	d00b      	beq.n	8008876 <vPortEnterCritical+0x4e>
	__asm volatile
 800885e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008862:	f383 8811 	msr	BASEPRI, r3
 8008866:	f3bf 8f6f 	isb	sy
 800886a:	f3bf 8f4f 	dsb	sy
 800886e:	603b      	str	r3, [r7, #0]
}
 8008870:	bf00      	nop
 8008872:	bf00      	nop
 8008874:	e7fd      	b.n	8008872 <vPortEnterCritical+0x4a>
	}
}
 8008876:	bf00      	nop
 8008878:	370c      	adds	r7, #12
 800887a:	46bd      	mov	sp, r7
 800887c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008880:	4770      	bx	lr
 8008882:	bf00      	nop
 8008884:	20000010 	.word	0x20000010
 8008888:	e000ed04 	.word	0xe000ed04

0800888c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800888c:	b480      	push	{r7}
 800888e:	b083      	sub	sp, #12
 8008890:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008892:	4b12      	ldr	r3, [pc, #72]	@ (80088dc <vPortExitCritical+0x50>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d10b      	bne.n	80088b2 <vPortExitCritical+0x26>
	__asm volatile
 800889a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800889e:	f383 8811 	msr	BASEPRI, r3
 80088a2:	f3bf 8f6f 	isb	sy
 80088a6:	f3bf 8f4f 	dsb	sy
 80088aa:	607b      	str	r3, [r7, #4]
}
 80088ac:	bf00      	nop
 80088ae:	bf00      	nop
 80088b0:	e7fd      	b.n	80088ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80088b2:	4b0a      	ldr	r3, [pc, #40]	@ (80088dc <vPortExitCritical+0x50>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	3b01      	subs	r3, #1
 80088b8:	4a08      	ldr	r2, [pc, #32]	@ (80088dc <vPortExitCritical+0x50>)
 80088ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80088bc:	4b07      	ldr	r3, [pc, #28]	@ (80088dc <vPortExitCritical+0x50>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d105      	bne.n	80088d0 <vPortExitCritical+0x44>
 80088c4:	2300      	movs	r3, #0
 80088c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	f383 8811 	msr	BASEPRI, r3
}
 80088ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80088d0:	bf00      	nop
 80088d2:	370c      	adds	r7, #12
 80088d4:	46bd      	mov	sp, r7
 80088d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088da:	4770      	bx	lr
 80088dc:	20000010 	.word	0x20000010

080088e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80088e0:	f3ef 8009 	mrs	r0, PSP
 80088e4:	f3bf 8f6f 	isb	sy
 80088e8:	4b15      	ldr	r3, [pc, #84]	@ (8008940 <pxCurrentTCBConst>)
 80088ea:	681a      	ldr	r2, [r3, #0]
 80088ec:	f01e 0f10 	tst.w	lr, #16
 80088f0:	bf08      	it	eq
 80088f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80088f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088fa:	6010      	str	r0, [r2, #0]
 80088fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008900:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008904:	f380 8811 	msr	BASEPRI, r0
 8008908:	f3bf 8f4f 	dsb	sy
 800890c:	f3bf 8f6f 	isb	sy
 8008910:	f7fe fb4a 	bl	8006fa8 <vTaskSwitchContext>
 8008914:	f04f 0000 	mov.w	r0, #0
 8008918:	f380 8811 	msr	BASEPRI, r0
 800891c:	bc09      	pop	{r0, r3}
 800891e:	6819      	ldr	r1, [r3, #0]
 8008920:	6808      	ldr	r0, [r1, #0]
 8008922:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008926:	f01e 0f10 	tst.w	lr, #16
 800892a:	bf08      	it	eq
 800892c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008930:	f380 8809 	msr	PSP, r0
 8008934:	f3bf 8f6f 	isb	sy
 8008938:	4770      	bx	lr
 800893a:	bf00      	nop
 800893c:	f3af 8000 	nop.w

08008940 <pxCurrentTCBConst>:
 8008940:	20000a98 	.word	0x20000a98
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008944:	bf00      	nop
 8008946:	bf00      	nop

08008948 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b082      	sub	sp, #8
 800894c:	af00      	add	r7, sp, #0
	__asm volatile
 800894e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008952:	f383 8811 	msr	BASEPRI, r3
 8008956:	f3bf 8f6f 	isb	sy
 800895a:	f3bf 8f4f 	dsb	sy
 800895e:	607b      	str	r3, [r7, #4]
}
 8008960:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008962:	f7fe fa67 	bl	8006e34 <xTaskIncrementTick>
 8008966:	4603      	mov	r3, r0
 8008968:	2b00      	cmp	r3, #0
 800896a:	d003      	beq.n	8008974 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800896c:	4b06      	ldr	r3, [pc, #24]	@ (8008988 <xPortSysTickHandler+0x40>)
 800896e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008972:	601a      	str	r2, [r3, #0]
 8008974:	2300      	movs	r3, #0
 8008976:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	f383 8811 	msr	BASEPRI, r3
}
 800897e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008980:	bf00      	nop
 8008982:	3708      	adds	r7, #8
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}
 8008988:	e000ed04 	.word	0xe000ed04

0800898c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800898c:	b480      	push	{r7}
 800898e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008990:	4b0b      	ldr	r3, [pc, #44]	@ (80089c0 <vPortSetupTimerInterrupt+0x34>)
 8008992:	2200      	movs	r2, #0
 8008994:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008996:	4b0b      	ldr	r3, [pc, #44]	@ (80089c4 <vPortSetupTimerInterrupt+0x38>)
 8008998:	2200      	movs	r2, #0
 800899a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800899c:	4b0a      	ldr	r3, [pc, #40]	@ (80089c8 <vPortSetupTimerInterrupt+0x3c>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	4a0a      	ldr	r2, [pc, #40]	@ (80089cc <vPortSetupTimerInterrupt+0x40>)
 80089a2:	fba2 2303 	umull	r2, r3, r2, r3
 80089a6:	099b      	lsrs	r3, r3, #6
 80089a8:	4a09      	ldr	r2, [pc, #36]	@ (80089d0 <vPortSetupTimerInterrupt+0x44>)
 80089aa:	3b01      	subs	r3, #1
 80089ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80089ae:	4b04      	ldr	r3, [pc, #16]	@ (80089c0 <vPortSetupTimerInterrupt+0x34>)
 80089b0:	2207      	movs	r2, #7
 80089b2:	601a      	str	r2, [r3, #0]
}
 80089b4:	bf00      	nop
 80089b6:	46bd      	mov	sp, r7
 80089b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089bc:	4770      	bx	lr
 80089be:	bf00      	nop
 80089c0:	e000e010 	.word	0xe000e010
 80089c4:	e000e018 	.word	0xe000e018
 80089c8:	20000004 	.word	0x20000004
 80089cc:	10624dd3 	.word	0x10624dd3
 80089d0:	e000e014 	.word	0xe000e014

080089d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80089d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80089e4 <vPortEnableVFP+0x10>
 80089d8:	6801      	ldr	r1, [r0, #0]
 80089da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80089de:	6001      	str	r1, [r0, #0]
 80089e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80089e2:	bf00      	nop
 80089e4:	e000ed88 	.word	0xe000ed88

080089e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80089e8:	b480      	push	{r7}
 80089ea:	b085      	sub	sp, #20
 80089ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80089ee:	f3ef 8305 	mrs	r3, IPSR
 80089f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	2b0f      	cmp	r3, #15
 80089f8:	d915      	bls.n	8008a26 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80089fa:	4a18      	ldr	r2, [pc, #96]	@ (8008a5c <vPortValidateInterruptPriority+0x74>)
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	4413      	add	r3, r2
 8008a00:	781b      	ldrb	r3, [r3, #0]
 8008a02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008a04:	4b16      	ldr	r3, [pc, #88]	@ (8008a60 <vPortValidateInterruptPriority+0x78>)
 8008a06:	781b      	ldrb	r3, [r3, #0]
 8008a08:	7afa      	ldrb	r2, [r7, #11]
 8008a0a:	429a      	cmp	r2, r3
 8008a0c:	d20b      	bcs.n	8008a26 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a12:	f383 8811 	msr	BASEPRI, r3
 8008a16:	f3bf 8f6f 	isb	sy
 8008a1a:	f3bf 8f4f 	dsb	sy
 8008a1e:	607b      	str	r3, [r7, #4]
}
 8008a20:	bf00      	nop
 8008a22:	bf00      	nop
 8008a24:	e7fd      	b.n	8008a22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008a26:	4b0f      	ldr	r3, [pc, #60]	@ (8008a64 <vPortValidateInterruptPriority+0x7c>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008a2e:	4b0e      	ldr	r3, [pc, #56]	@ (8008a68 <vPortValidateInterruptPriority+0x80>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	429a      	cmp	r2, r3
 8008a34:	d90b      	bls.n	8008a4e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008a36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a3a:	f383 8811 	msr	BASEPRI, r3
 8008a3e:	f3bf 8f6f 	isb	sy
 8008a42:	f3bf 8f4f 	dsb	sy
 8008a46:	603b      	str	r3, [r7, #0]
}
 8008a48:	bf00      	nop
 8008a4a:	bf00      	nop
 8008a4c:	e7fd      	b.n	8008a4a <vPortValidateInterruptPriority+0x62>
	}
 8008a4e:	bf00      	nop
 8008a50:	3714      	adds	r7, #20
 8008a52:	46bd      	mov	sp, r7
 8008a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a58:	4770      	bx	lr
 8008a5a:	bf00      	nop
 8008a5c:	e000e3f0 	.word	0xe000e3f0
 8008a60:	200010cc 	.word	0x200010cc
 8008a64:	e000ed0c 	.word	0xe000ed0c
 8008a68:	200010d0 	.word	0x200010d0

08008a6c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b08a      	sub	sp, #40	@ 0x28
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008a74:	2300      	movs	r3, #0
 8008a76:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008a78:	f7fe f890 	bl	8006b9c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008a7c:	4b5c      	ldr	r3, [pc, #368]	@ (8008bf0 <pvPortMalloc+0x184>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d101      	bne.n	8008a88 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008a84:	f000 f924 	bl	8008cd0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008a88:	4b5a      	ldr	r3, [pc, #360]	@ (8008bf4 <pvPortMalloc+0x188>)
 8008a8a:	681a      	ldr	r2, [r3, #0]
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	4013      	ands	r3, r2
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	f040 8095 	bne.w	8008bc0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d01e      	beq.n	8008ada <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008a9c:	2208      	movs	r2, #8
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	4413      	add	r3, r2
 8008aa2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f003 0307 	and.w	r3, r3, #7
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d015      	beq.n	8008ada <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f023 0307 	bic.w	r3, r3, #7
 8008ab4:	3308      	adds	r3, #8
 8008ab6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f003 0307 	and.w	r3, r3, #7
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d00b      	beq.n	8008ada <pvPortMalloc+0x6e>
	__asm volatile
 8008ac2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ac6:	f383 8811 	msr	BASEPRI, r3
 8008aca:	f3bf 8f6f 	isb	sy
 8008ace:	f3bf 8f4f 	dsb	sy
 8008ad2:	617b      	str	r3, [r7, #20]
}
 8008ad4:	bf00      	nop
 8008ad6:	bf00      	nop
 8008ad8:	e7fd      	b.n	8008ad6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d06f      	beq.n	8008bc0 <pvPortMalloc+0x154>
 8008ae0:	4b45      	ldr	r3, [pc, #276]	@ (8008bf8 <pvPortMalloc+0x18c>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	687a      	ldr	r2, [r7, #4]
 8008ae6:	429a      	cmp	r2, r3
 8008ae8:	d86a      	bhi.n	8008bc0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008aea:	4b44      	ldr	r3, [pc, #272]	@ (8008bfc <pvPortMalloc+0x190>)
 8008aec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008aee:	4b43      	ldr	r3, [pc, #268]	@ (8008bfc <pvPortMalloc+0x190>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008af4:	e004      	b.n	8008b00 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008af8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b02:	685b      	ldr	r3, [r3, #4]
 8008b04:	687a      	ldr	r2, [r7, #4]
 8008b06:	429a      	cmp	r2, r3
 8008b08:	d903      	bls.n	8008b12 <pvPortMalloc+0xa6>
 8008b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d1f1      	bne.n	8008af6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008b12:	4b37      	ldr	r3, [pc, #220]	@ (8008bf0 <pvPortMalloc+0x184>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b18:	429a      	cmp	r2, r3
 8008b1a:	d051      	beq.n	8008bc0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008b1c:	6a3b      	ldr	r3, [r7, #32]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	2208      	movs	r2, #8
 8008b22:	4413      	add	r3, r2
 8008b24:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b28:	681a      	ldr	r2, [r3, #0]
 8008b2a:	6a3b      	ldr	r3, [r7, #32]
 8008b2c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b30:	685a      	ldr	r2, [r3, #4]
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	1ad2      	subs	r2, r2, r3
 8008b36:	2308      	movs	r3, #8
 8008b38:	005b      	lsls	r3, r3, #1
 8008b3a:	429a      	cmp	r2, r3
 8008b3c:	d920      	bls.n	8008b80 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008b3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	4413      	add	r3, r2
 8008b44:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b46:	69bb      	ldr	r3, [r7, #24]
 8008b48:	f003 0307 	and.w	r3, r3, #7
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d00b      	beq.n	8008b68 <pvPortMalloc+0xfc>
	__asm volatile
 8008b50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b54:	f383 8811 	msr	BASEPRI, r3
 8008b58:	f3bf 8f6f 	isb	sy
 8008b5c:	f3bf 8f4f 	dsb	sy
 8008b60:	613b      	str	r3, [r7, #16]
}
 8008b62:	bf00      	nop
 8008b64:	bf00      	nop
 8008b66:	e7fd      	b.n	8008b64 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b6a:	685a      	ldr	r2, [r3, #4]
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	1ad2      	subs	r2, r2, r3
 8008b70:	69bb      	ldr	r3, [r7, #24]
 8008b72:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b76:	687a      	ldr	r2, [r7, #4]
 8008b78:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008b7a:	69b8      	ldr	r0, [r7, #24]
 8008b7c:	f000 f90a 	bl	8008d94 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008b80:	4b1d      	ldr	r3, [pc, #116]	@ (8008bf8 <pvPortMalloc+0x18c>)
 8008b82:	681a      	ldr	r2, [r3, #0]
 8008b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b86:	685b      	ldr	r3, [r3, #4]
 8008b88:	1ad3      	subs	r3, r2, r3
 8008b8a:	4a1b      	ldr	r2, [pc, #108]	@ (8008bf8 <pvPortMalloc+0x18c>)
 8008b8c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008b8e:	4b1a      	ldr	r3, [pc, #104]	@ (8008bf8 <pvPortMalloc+0x18c>)
 8008b90:	681a      	ldr	r2, [r3, #0]
 8008b92:	4b1b      	ldr	r3, [pc, #108]	@ (8008c00 <pvPortMalloc+0x194>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	429a      	cmp	r2, r3
 8008b98:	d203      	bcs.n	8008ba2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008b9a:	4b17      	ldr	r3, [pc, #92]	@ (8008bf8 <pvPortMalloc+0x18c>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	4a18      	ldr	r2, [pc, #96]	@ (8008c00 <pvPortMalloc+0x194>)
 8008ba0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ba4:	685a      	ldr	r2, [r3, #4]
 8008ba6:	4b13      	ldr	r3, [pc, #76]	@ (8008bf4 <pvPortMalloc+0x188>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	431a      	orrs	r2, r3
 8008bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008bb6:	4b13      	ldr	r3, [pc, #76]	@ (8008c04 <pvPortMalloc+0x198>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	3301      	adds	r3, #1
 8008bbc:	4a11      	ldr	r2, [pc, #68]	@ (8008c04 <pvPortMalloc+0x198>)
 8008bbe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008bc0:	f7fd fffa 	bl	8006bb8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008bc4:	69fb      	ldr	r3, [r7, #28]
 8008bc6:	f003 0307 	and.w	r3, r3, #7
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d00b      	beq.n	8008be6 <pvPortMalloc+0x17a>
	__asm volatile
 8008bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bd2:	f383 8811 	msr	BASEPRI, r3
 8008bd6:	f3bf 8f6f 	isb	sy
 8008bda:	f3bf 8f4f 	dsb	sy
 8008bde:	60fb      	str	r3, [r7, #12]
}
 8008be0:	bf00      	nop
 8008be2:	bf00      	nop
 8008be4:	e7fd      	b.n	8008be2 <pvPortMalloc+0x176>
	return pvReturn;
 8008be6:	69fb      	ldr	r3, [r7, #28]
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	3728      	adds	r7, #40	@ 0x28
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}
 8008bf0:	20004cdc 	.word	0x20004cdc
 8008bf4:	20004cf0 	.word	0x20004cf0
 8008bf8:	20004ce0 	.word	0x20004ce0
 8008bfc:	20004cd4 	.word	0x20004cd4
 8008c00:	20004ce4 	.word	0x20004ce4
 8008c04:	20004ce8 	.word	0x20004ce8

08008c08 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b086      	sub	sp, #24
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d04f      	beq.n	8008cba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008c1a:	2308      	movs	r3, #8
 8008c1c:	425b      	negs	r3, r3
 8008c1e:	697a      	ldr	r2, [r7, #20]
 8008c20:	4413      	add	r3, r2
 8008c22:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008c24:	697b      	ldr	r3, [r7, #20]
 8008c26:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	685a      	ldr	r2, [r3, #4]
 8008c2c:	4b25      	ldr	r3, [pc, #148]	@ (8008cc4 <vPortFree+0xbc>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	4013      	ands	r3, r2
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d10b      	bne.n	8008c4e <vPortFree+0x46>
	__asm volatile
 8008c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c3a:	f383 8811 	msr	BASEPRI, r3
 8008c3e:	f3bf 8f6f 	isb	sy
 8008c42:	f3bf 8f4f 	dsb	sy
 8008c46:	60fb      	str	r3, [r7, #12]
}
 8008c48:	bf00      	nop
 8008c4a:	bf00      	nop
 8008c4c:	e7fd      	b.n	8008c4a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d00b      	beq.n	8008c6e <vPortFree+0x66>
	__asm volatile
 8008c56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c5a:	f383 8811 	msr	BASEPRI, r3
 8008c5e:	f3bf 8f6f 	isb	sy
 8008c62:	f3bf 8f4f 	dsb	sy
 8008c66:	60bb      	str	r3, [r7, #8]
}
 8008c68:	bf00      	nop
 8008c6a:	bf00      	nop
 8008c6c:	e7fd      	b.n	8008c6a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	685a      	ldr	r2, [r3, #4]
 8008c72:	4b14      	ldr	r3, [pc, #80]	@ (8008cc4 <vPortFree+0xbc>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	4013      	ands	r3, r2
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d01e      	beq.n	8008cba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d11a      	bne.n	8008cba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008c84:	693b      	ldr	r3, [r7, #16]
 8008c86:	685a      	ldr	r2, [r3, #4]
 8008c88:	4b0e      	ldr	r3, [pc, #56]	@ (8008cc4 <vPortFree+0xbc>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	43db      	mvns	r3, r3
 8008c8e:	401a      	ands	r2, r3
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008c94:	f7fd ff82 	bl	8006b9c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	685a      	ldr	r2, [r3, #4]
 8008c9c:	4b0a      	ldr	r3, [pc, #40]	@ (8008cc8 <vPortFree+0xc0>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4413      	add	r3, r2
 8008ca2:	4a09      	ldr	r2, [pc, #36]	@ (8008cc8 <vPortFree+0xc0>)
 8008ca4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008ca6:	6938      	ldr	r0, [r7, #16]
 8008ca8:	f000 f874 	bl	8008d94 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008cac:	4b07      	ldr	r3, [pc, #28]	@ (8008ccc <vPortFree+0xc4>)
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	3301      	adds	r3, #1
 8008cb2:	4a06      	ldr	r2, [pc, #24]	@ (8008ccc <vPortFree+0xc4>)
 8008cb4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008cb6:	f7fd ff7f 	bl	8006bb8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008cba:	bf00      	nop
 8008cbc:	3718      	adds	r7, #24
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}
 8008cc2:	bf00      	nop
 8008cc4:	20004cf0 	.word	0x20004cf0
 8008cc8:	20004ce0 	.word	0x20004ce0
 8008ccc:	20004cec 	.word	0x20004cec

08008cd0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b085      	sub	sp, #20
 8008cd4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008cd6:	f643 33ff 	movw	r3, #15359	@ 0x3bff
 8008cda:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008cdc:	4b27      	ldr	r3, [pc, #156]	@ (8008d7c <prvHeapInit+0xac>)
 8008cde:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	f003 0307 	and.w	r3, r3, #7
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d00c      	beq.n	8008d04 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	3307      	adds	r3, #7
 8008cee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	f023 0307 	bic.w	r3, r3, #7
 8008cf6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008cf8:	68ba      	ldr	r2, [r7, #8]
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	1ad3      	subs	r3, r2, r3
 8008cfe:	4a1f      	ldr	r2, [pc, #124]	@ (8008d7c <prvHeapInit+0xac>)
 8008d00:	4413      	add	r3, r2
 8008d02:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008d08:	4a1d      	ldr	r2, [pc, #116]	@ (8008d80 <prvHeapInit+0xb0>)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008d0e:	4b1c      	ldr	r3, [pc, #112]	@ (8008d80 <prvHeapInit+0xb0>)
 8008d10:	2200      	movs	r2, #0
 8008d12:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	68ba      	ldr	r2, [r7, #8]
 8008d18:	4413      	add	r3, r2
 8008d1a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008d1c:	2208      	movs	r2, #8
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	1a9b      	subs	r3, r3, r2
 8008d22:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	f023 0307 	bic.w	r3, r3, #7
 8008d2a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	4a15      	ldr	r2, [pc, #84]	@ (8008d84 <prvHeapInit+0xb4>)
 8008d30:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008d32:	4b14      	ldr	r3, [pc, #80]	@ (8008d84 <prvHeapInit+0xb4>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	2200      	movs	r2, #0
 8008d38:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008d3a:	4b12      	ldr	r3, [pc, #72]	@ (8008d84 <prvHeapInit+0xb4>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	68fa      	ldr	r2, [r7, #12]
 8008d4a:	1ad2      	subs	r2, r2, r3
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008d50:	4b0c      	ldr	r3, [pc, #48]	@ (8008d84 <prvHeapInit+0xb4>)
 8008d52:	681a      	ldr	r2, [r3, #0]
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	685b      	ldr	r3, [r3, #4]
 8008d5c:	4a0a      	ldr	r2, [pc, #40]	@ (8008d88 <prvHeapInit+0xb8>)
 8008d5e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	685b      	ldr	r3, [r3, #4]
 8008d64:	4a09      	ldr	r2, [pc, #36]	@ (8008d8c <prvHeapInit+0xbc>)
 8008d66:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008d68:	4b09      	ldr	r3, [pc, #36]	@ (8008d90 <prvHeapInit+0xc0>)
 8008d6a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008d6e:	601a      	str	r2, [r3, #0]
}
 8008d70:	bf00      	nop
 8008d72:	3714      	adds	r7, #20
 8008d74:	46bd      	mov	sp, r7
 8008d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7a:	4770      	bx	lr
 8008d7c:	200010d4 	.word	0x200010d4
 8008d80:	20004cd4 	.word	0x20004cd4
 8008d84:	20004cdc 	.word	0x20004cdc
 8008d88:	20004ce4 	.word	0x20004ce4
 8008d8c:	20004ce0 	.word	0x20004ce0
 8008d90:	20004cf0 	.word	0x20004cf0

08008d94 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008d94:	b480      	push	{r7}
 8008d96:	b085      	sub	sp, #20
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008d9c:	4b28      	ldr	r3, [pc, #160]	@ (8008e40 <prvInsertBlockIntoFreeList+0xac>)
 8008d9e:	60fb      	str	r3, [r7, #12]
 8008da0:	e002      	b.n	8008da8 <prvInsertBlockIntoFreeList+0x14>
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	60fb      	str	r3, [r7, #12]
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	687a      	ldr	r2, [r7, #4]
 8008dae:	429a      	cmp	r2, r3
 8008db0:	d8f7      	bhi.n	8008da2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	685b      	ldr	r3, [r3, #4]
 8008dba:	68ba      	ldr	r2, [r7, #8]
 8008dbc:	4413      	add	r3, r2
 8008dbe:	687a      	ldr	r2, [r7, #4]
 8008dc0:	429a      	cmp	r2, r3
 8008dc2:	d108      	bne.n	8008dd6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	685a      	ldr	r2, [r3, #4]
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	685b      	ldr	r3, [r3, #4]
 8008dcc:	441a      	add	r2, r3
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	685b      	ldr	r3, [r3, #4]
 8008dde:	68ba      	ldr	r2, [r7, #8]
 8008de0:	441a      	add	r2, r3
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	429a      	cmp	r2, r3
 8008de8:	d118      	bne.n	8008e1c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681a      	ldr	r2, [r3, #0]
 8008dee:	4b15      	ldr	r3, [pc, #84]	@ (8008e44 <prvInsertBlockIntoFreeList+0xb0>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	429a      	cmp	r2, r3
 8008df4:	d00d      	beq.n	8008e12 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	685a      	ldr	r2, [r3, #4]
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	685b      	ldr	r3, [r3, #4]
 8008e00:	441a      	add	r2, r3
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	681a      	ldr	r2, [r3, #0]
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	601a      	str	r2, [r3, #0]
 8008e10:	e008      	b.n	8008e24 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008e12:	4b0c      	ldr	r3, [pc, #48]	@ (8008e44 <prvInsertBlockIntoFreeList+0xb0>)
 8008e14:	681a      	ldr	r2, [r3, #0]
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	601a      	str	r2, [r3, #0]
 8008e1a:	e003      	b.n	8008e24 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681a      	ldr	r2, [r3, #0]
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008e24:	68fa      	ldr	r2, [r7, #12]
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	429a      	cmp	r2, r3
 8008e2a:	d002      	beq.n	8008e32 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	687a      	ldr	r2, [r7, #4]
 8008e30:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e32:	bf00      	nop
 8008e34:	3714      	adds	r7, #20
 8008e36:	46bd      	mov	sp, r7
 8008e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3c:	4770      	bx	lr
 8008e3e:	bf00      	nop
 8008e40:	20004cd4 	.word	0x20004cd4
 8008e44:	20004cdc 	.word	0x20004cdc

08008e48 <swapfunc>:
 8008e48:	2b02      	cmp	r3, #2
 8008e4a:	b510      	push	{r4, lr}
 8008e4c:	d00a      	beq.n	8008e64 <swapfunc+0x1c>
 8008e4e:	0892      	lsrs	r2, r2, #2
 8008e50:	3a01      	subs	r2, #1
 8008e52:	6803      	ldr	r3, [r0, #0]
 8008e54:	680c      	ldr	r4, [r1, #0]
 8008e56:	f840 4b04 	str.w	r4, [r0], #4
 8008e5a:	2a00      	cmp	r2, #0
 8008e5c:	f841 3b04 	str.w	r3, [r1], #4
 8008e60:	dcf6      	bgt.n	8008e50 <swapfunc+0x8>
 8008e62:	bd10      	pop	{r4, pc}
 8008e64:	4402      	add	r2, r0
 8008e66:	780c      	ldrb	r4, [r1, #0]
 8008e68:	7803      	ldrb	r3, [r0, #0]
 8008e6a:	f800 4b01 	strb.w	r4, [r0], #1
 8008e6e:	f801 3b01 	strb.w	r3, [r1], #1
 8008e72:	1a13      	subs	r3, r2, r0
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	dcf6      	bgt.n	8008e66 <swapfunc+0x1e>
 8008e78:	e7f3      	b.n	8008e62 <swapfunc+0x1a>

08008e7a <med3.constprop.0>:
 8008e7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e7c:	460f      	mov	r7, r1
 8008e7e:	4616      	mov	r6, r2
 8008e80:	4604      	mov	r4, r0
 8008e82:	461d      	mov	r5, r3
 8008e84:	4798      	blx	r3
 8008e86:	2800      	cmp	r0, #0
 8008e88:	4631      	mov	r1, r6
 8008e8a:	4638      	mov	r0, r7
 8008e8c:	da0c      	bge.n	8008ea8 <med3.constprop.0+0x2e>
 8008e8e:	47a8      	blx	r5
 8008e90:	2800      	cmp	r0, #0
 8008e92:	da02      	bge.n	8008e9a <med3.constprop.0+0x20>
 8008e94:	463c      	mov	r4, r7
 8008e96:	4620      	mov	r0, r4
 8008e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e9a:	4631      	mov	r1, r6
 8008e9c:	4620      	mov	r0, r4
 8008e9e:	47a8      	blx	r5
 8008ea0:	2800      	cmp	r0, #0
 8008ea2:	daf8      	bge.n	8008e96 <med3.constprop.0+0x1c>
 8008ea4:	4634      	mov	r4, r6
 8008ea6:	e7f6      	b.n	8008e96 <med3.constprop.0+0x1c>
 8008ea8:	47a8      	blx	r5
 8008eaa:	2800      	cmp	r0, #0
 8008eac:	dcf2      	bgt.n	8008e94 <med3.constprop.0+0x1a>
 8008eae:	4631      	mov	r1, r6
 8008eb0:	4620      	mov	r0, r4
 8008eb2:	47a8      	blx	r5
 8008eb4:	2800      	cmp	r0, #0
 8008eb6:	daf5      	bge.n	8008ea4 <med3.constprop.0+0x2a>
 8008eb8:	e7ed      	b.n	8008e96 <med3.constprop.0+0x1c>

08008eba <qsort>:
 8008eba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ebe:	b095      	sub	sp, #84	@ 0x54
 8008ec0:	4607      	mov	r7, r0
 8008ec2:	9300      	str	r3, [sp, #0]
 8008ec4:	ea40 0302 	orr.w	r3, r0, r2
 8008ec8:	079b      	lsls	r3, r3, #30
 8008eca:	4615      	mov	r5, r2
 8008ecc:	d118      	bne.n	8008f00 <qsort+0x46>
 8008ece:	f1b2 0804 	subs.w	r8, r2, #4
 8008ed2:	bf18      	it	ne
 8008ed4:	f04f 0801 	movne.w	r8, #1
 8008ed8:	2300      	movs	r3, #0
 8008eda:	9301      	str	r3, [sp, #4]
 8008edc:	fb05 f401 	mul.w	r4, r5, r1
 8008ee0:	193b      	adds	r3, r7, r4
 8008ee2:	2906      	cmp	r1, #6
 8008ee4:	eb07 0b05 	add.w	fp, r7, r5
 8008ee8:	9302      	str	r3, [sp, #8]
 8008eea:	d828      	bhi.n	8008f3e <qsort+0x84>
 8008eec:	9b02      	ldr	r3, [sp, #8]
 8008eee:	459b      	cmp	fp, r3
 8008ef0:	d310      	bcc.n	8008f14 <qsort+0x5a>
 8008ef2:	9b01      	ldr	r3, [sp, #4]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	f040 8117 	bne.w	8009128 <qsort+0x26e>
 8008efa:	b015      	add	sp, #84	@ 0x54
 8008efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f00:	f04f 0802 	mov.w	r8, #2
 8008f04:	e7e8      	b.n	8008ed8 <qsort+0x1e>
 8008f06:	4643      	mov	r3, r8
 8008f08:	462a      	mov	r2, r5
 8008f0a:	4631      	mov	r1, r6
 8008f0c:	4620      	mov	r0, r4
 8008f0e:	f7ff ff9b 	bl	8008e48 <swapfunc>
 8008f12:	e00f      	b.n	8008f34 <qsort+0x7a>
 8008f14:	465c      	mov	r4, fp
 8008f16:	e00e      	b.n	8008f36 <qsort+0x7c>
 8008f18:	1b66      	subs	r6, r4, r5
 8008f1a:	9b00      	ldr	r3, [sp, #0]
 8008f1c:	4621      	mov	r1, r4
 8008f1e:	4630      	mov	r0, r6
 8008f20:	4798      	blx	r3
 8008f22:	2800      	cmp	r0, #0
 8008f24:	dd09      	ble.n	8008f3a <qsort+0x80>
 8008f26:	f1b8 0f00 	cmp.w	r8, #0
 8008f2a:	d1ec      	bne.n	8008f06 <qsort+0x4c>
 8008f2c:	6823      	ldr	r3, [r4, #0]
 8008f2e:	6832      	ldr	r2, [r6, #0]
 8008f30:	6022      	str	r2, [r4, #0]
 8008f32:	6033      	str	r3, [r6, #0]
 8008f34:	4634      	mov	r4, r6
 8008f36:	42a7      	cmp	r7, r4
 8008f38:	d3ee      	bcc.n	8008f18 <qsort+0x5e>
 8008f3a:	44ab      	add	fp, r5
 8008f3c:	e7d6      	b.n	8008eec <qsort+0x32>
 8008f3e:	ea4f 0951 	mov.w	r9, r1, lsr #1
 8008f42:	1b64      	subs	r4, r4, r5
 8008f44:	2907      	cmp	r1, #7
 8008f46:	fb05 7909 	mla	r9, r5, r9, r7
 8008f4a:	443c      	add	r4, r7
 8008f4c:	d021      	beq.n	8008f92 <qsort+0xd8>
 8008f4e:	2928      	cmp	r1, #40	@ 0x28
 8008f50:	d944      	bls.n	8008fdc <qsort+0x122>
 8008f52:	08ce      	lsrs	r6, r1, #3
 8008f54:	436e      	muls	r6, r5
 8008f56:	9b00      	ldr	r3, [sp, #0]
 8008f58:	eb07 0246 	add.w	r2, r7, r6, lsl #1
 8008f5c:	19b9      	adds	r1, r7, r6
 8008f5e:	4638      	mov	r0, r7
 8008f60:	f7ff ff8b 	bl	8008e7a <med3.constprop.0>
 8008f64:	4649      	mov	r1, r9
 8008f66:	eb09 0206 	add.w	r2, r9, r6
 8008f6a:	9b00      	ldr	r3, [sp, #0]
 8008f6c:	4682      	mov	sl, r0
 8008f6e:	1b88      	subs	r0, r1, r6
 8008f70:	f7ff ff83 	bl	8008e7a <med3.constprop.0>
 8008f74:	4622      	mov	r2, r4
 8008f76:	9b00      	ldr	r3, [sp, #0]
 8008f78:	4681      	mov	r9, r0
 8008f7a:	1ba1      	subs	r1, r4, r6
 8008f7c:	eba4 0046 	sub.w	r0, r4, r6, lsl #1
 8008f80:	f7ff ff7b 	bl	8008e7a <med3.constprop.0>
 8008f84:	4602      	mov	r2, r0
 8008f86:	4649      	mov	r1, r9
 8008f88:	9b00      	ldr	r3, [sp, #0]
 8008f8a:	4650      	mov	r0, sl
 8008f8c:	f7ff ff75 	bl	8008e7a <med3.constprop.0>
 8008f90:	4681      	mov	r9, r0
 8008f92:	f1b8 0f00 	cmp.w	r8, #0
 8008f96:	d124      	bne.n	8008fe2 <qsort+0x128>
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	f8d9 2000 	ldr.w	r2, [r9]
 8008f9e:	603a      	str	r2, [r7, #0]
 8008fa0:	f8c9 3000 	str.w	r3, [r9]
 8008fa4:	46d9      	mov	r9, fp
 8008fa6:	46a2      	mov	sl, r4
 8008fa8:	465e      	mov	r6, fp
 8008faa:	2300      	movs	r3, #0
 8008fac:	45a1      	cmp	r9, r4
 8008fae:	d836      	bhi.n	800901e <qsort+0x164>
 8008fb0:	9303      	str	r3, [sp, #12]
 8008fb2:	4639      	mov	r1, r7
 8008fb4:	9b00      	ldr	r3, [sp, #0]
 8008fb6:	4648      	mov	r0, r9
 8008fb8:	4798      	blx	r3
 8008fba:	2800      	cmp	r0, #0
 8008fbc:	9b03      	ldr	r3, [sp, #12]
 8008fbe:	dc2c      	bgt.n	800901a <qsort+0x160>
 8008fc0:	d10a      	bne.n	8008fd8 <qsort+0x11e>
 8008fc2:	f1b8 0f00 	cmp.w	r8, #0
 8008fc6:	d113      	bne.n	8008ff0 <qsort+0x136>
 8008fc8:	6833      	ldr	r3, [r6, #0]
 8008fca:	f8d9 2000 	ldr.w	r2, [r9]
 8008fce:	6032      	str	r2, [r6, #0]
 8008fd0:	f8c9 3000 	str.w	r3, [r9]
 8008fd4:	442e      	add	r6, r5
 8008fd6:	2301      	movs	r3, #1
 8008fd8:	44a9      	add	r9, r5
 8008fda:	e7e7      	b.n	8008fac <qsort+0xf2>
 8008fdc:	4622      	mov	r2, r4
 8008fde:	46ba      	mov	sl, r7
 8008fe0:	e7d1      	b.n	8008f86 <qsort+0xcc>
 8008fe2:	4643      	mov	r3, r8
 8008fe4:	462a      	mov	r2, r5
 8008fe6:	4649      	mov	r1, r9
 8008fe8:	4638      	mov	r0, r7
 8008fea:	f7ff ff2d 	bl	8008e48 <swapfunc>
 8008fee:	e7d9      	b.n	8008fa4 <qsort+0xea>
 8008ff0:	4643      	mov	r3, r8
 8008ff2:	462a      	mov	r2, r5
 8008ff4:	4649      	mov	r1, r9
 8008ff6:	4630      	mov	r0, r6
 8008ff8:	f7ff ff26 	bl	8008e48 <swapfunc>
 8008ffc:	e7ea      	b.n	8008fd4 <qsort+0x11a>
 8008ffe:	d10b      	bne.n	8009018 <qsort+0x15e>
 8009000:	f1b8 0f00 	cmp.w	r8, #0
 8009004:	d113      	bne.n	800902e <qsort+0x174>
 8009006:	6823      	ldr	r3, [r4, #0]
 8009008:	f8da 2000 	ldr.w	r2, [sl]
 800900c:	6022      	str	r2, [r4, #0]
 800900e:	f8ca 3000 	str.w	r3, [sl]
 8009012:	ebaa 0a05 	sub.w	sl, sl, r5
 8009016:	2301      	movs	r3, #1
 8009018:	1b64      	subs	r4, r4, r5
 800901a:	45a1      	cmp	r9, r4
 800901c:	d90e      	bls.n	800903c <qsort+0x182>
 800901e:	2b00      	cmp	r3, #0
 8009020:	d140      	bne.n	80090a4 <qsort+0x1ea>
 8009022:	9b02      	ldr	r3, [sp, #8]
 8009024:	459b      	cmp	fp, r3
 8009026:	f4bf af64 	bcs.w	8008ef2 <qsort+0x38>
 800902a:	465c      	mov	r4, fp
 800902c:	e036      	b.n	800909c <qsort+0x1e2>
 800902e:	4643      	mov	r3, r8
 8009030:	462a      	mov	r2, r5
 8009032:	4651      	mov	r1, sl
 8009034:	4620      	mov	r0, r4
 8009036:	f7ff ff07 	bl	8008e48 <swapfunc>
 800903a:	e7ea      	b.n	8009012 <qsort+0x158>
 800903c:	9303      	str	r3, [sp, #12]
 800903e:	4639      	mov	r1, r7
 8009040:	9b00      	ldr	r3, [sp, #0]
 8009042:	4620      	mov	r0, r4
 8009044:	4798      	blx	r3
 8009046:	2800      	cmp	r0, #0
 8009048:	9b03      	ldr	r3, [sp, #12]
 800904a:	dad8      	bge.n	8008ffe <qsort+0x144>
 800904c:	f1b8 0f00 	cmp.w	r8, #0
 8009050:	d107      	bne.n	8009062 <qsort+0x1a8>
 8009052:	f8d9 3000 	ldr.w	r3, [r9]
 8009056:	6822      	ldr	r2, [r4, #0]
 8009058:	f8c9 2000 	str.w	r2, [r9]
 800905c:	6023      	str	r3, [r4, #0]
 800905e:	1b64      	subs	r4, r4, r5
 8009060:	e7b9      	b.n	8008fd6 <qsort+0x11c>
 8009062:	4643      	mov	r3, r8
 8009064:	462a      	mov	r2, r5
 8009066:	4621      	mov	r1, r4
 8009068:	4648      	mov	r0, r9
 800906a:	f7ff feed 	bl	8008e48 <swapfunc>
 800906e:	e7f6      	b.n	800905e <qsort+0x1a4>
 8009070:	4643      	mov	r3, r8
 8009072:	462a      	mov	r2, r5
 8009074:	4631      	mov	r1, r6
 8009076:	4620      	mov	r0, r4
 8009078:	f7ff fee6 	bl	8008e48 <swapfunc>
 800907c:	e00d      	b.n	800909a <qsort+0x1e0>
 800907e:	1b66      	subs	r6, r4, r5
 8009080:	9b00      	ldr	r3, [sp, #0]
 8009082:	4621      	mov	r1, r4
 8009084:	4630      	mov	r0, r6
 8009086:	4798      	blx	r3
 8009088:	2800      	cmp	r0, #0
 800908a:	dd09      	ble.n	80090a0 <qsort+0x1e6>
 800908c:	f1b8 0f00 	cmp.w	r8, #0
 8009090:	d1ee      	bne.n	8009070 <qsort+0x1b6>
 8009092:	6823      	ldr	r3, [r4, #0]
 8009094:	6832      	ldr	r2, [r6, #0]
 8009096:	6022      	str	r2, [r4, #0]
 8009098:	6033      	str	r3, [r6, #0]
 800909a:	4634      	mov	r4, r6
 800909c:	42a7      	cmp	r7, r4
 800909e:	d3ee      	bcc.n	800907e <qsort+0x1c4>
 80090a0:	44ab      	add	fp, r5
 80090a2:	e7be      	b.n	8009022 <qsort+0x168>
 80090a4:	eba9 0b06 	sub.w	fp, r9, r6
 80090a8:	1bf2      	subs	r2, r6, r7
 80090aa:	455a      	cmp	r2, fp
 80090ac:	bfa8      	it	ge
 80090ae:	465a      	movge	r2, fp
 80090b0:	b12a      	cbz	r2, 80090be <qsort+0x204>
 80090b2:	4643      	mov	r3, r8
 80090b4:	eba9 0102 	sub.w	r1, r9, r2
 80090b8:	4638      	mov	r0, r7
 80090ba:	f7ff fec5 	bl	8008e48 <swapfunc>
 80090be:	9b02      	ldr	r3, [sp, #8]
 80090c0:	eba3 020a 	sub.w	r2, r3, sl
 80090c4:	ebaa 0404 	sub.w	r4, sl, r4
 80090c8:	1b52      	subs	r2, r2, r5
 80090ca:	42a2      	cmp	r2, r4
 80090cc:	bf28      	it	cs
 80090ce:	4622      	movcs	r2, r4
 80090d0:	b12a      	cbz	r2, 80090de <qsort+0x224>
 80090d2:	9902      	ldr	r1, [sp, #8]
 80090d4:	4643      	mov	r3, r8
 80090d6:	1a89      	subs	r1, r1, r2
 80090d8:	4648      	mov	r0, r9
 80090da:	f7ff feb5 	bl	8008e48 <swapfunc>
 80090de:	9b02      	ldr	r3, [sp, #8]
 80090e0:	455c      	cmp	r4, fp
 80090e2:	eba3 0604 	sub.w	r6, r3, r4
 80090e6:	d805      	bhi.n	80090f4 <qsort+0x23a>
 80090e8:	4623      	mov	r3, r4
 80090ea:	465c      	mov	r4, fp
 80090ec:	469b      	mov	fp, r3
 80090ee:	4633      	mov	r3, r6
 80090f0:	463e      	mov	r6, r7
 80090f2:	461f      	mov	r7, r3
 80090f4:	45ab      	cmp	fp, r5
 80090f6:	d920      	bls.n	800913a <qsort+0x280>
 80090f8:	fbbb f1f5 	udiv	r1, fp, r5
 80090fc:	9b01      	ldr	r3, [sp, #4]
 80090fe:	2b07      	cmp	r3, #7
 8009100:	d80b      	bhi.n	800911a <qsort+0x260>
 8009102:	fbb4 f4f5 	udiv	r4, r4, r5
 8009106:	aa14      	add	r2, sp, #80	@ 0x50
 8009108:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800910c:	f843 6c40 	str.w	r6, [r3, #-64]
 8009110:	f843 4c3c 	str.w	r4, [r3, #-60]
 8009114:	9b01      	ldr	r3, [sp, #4]
 8009116:	3301      	adds	r3, #1
 8009118:	e6df      	b.n	8008eda <qsort+0x20>
 800911a:	9b00      	ldr	r3, [sp, #0]
 800911c:	462a      	mov	r2, r5
 800911e:	4638      	mov	r0, r7
 8009120:	f7ff fecb 	bl	8008eba <qsort>
 8009124:	42ac      	cmp	r4, r5
 8009126:	d80b      	bhi.n	8009140 <qsort+0x286>
 8009128:	9b01      	ldr	r3, [sp, #4]
 800912a:	aa14      	add	r2, sp, #80	@ 0x50
 800912c:	3b01      	subs	r3, #1
 800912e:	9301      	str	r3, [sp, #4]
 8009130:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009134:	e953 7110 	ldrd	r7, r1, [r3, #-64]	@ 0x40
 8009138:	e6d0      	b.n	8008edc <qsort+0x22>
 800913a:	42ac      	cmp	r4, r5
 800913c:	f67f aed9 	bls.w	8008ef2 <qsort+0x38>
 8009140:	fbb4 f1f5 	udiv	r1, r4, r5
 8009144:	4637      	mov	r7, r6
 8009146:	e6c9      	b.n	8008edc <qsort+0x22>

08009148 <sniprintf>:
 8009148:	b40c      	push	{r2, r3}
 800914a:	b530      	push	{r4, r5, lr}
 800914c:	4b18      	ldr	r3, [pc, #96]	@ (80091b0 <sniprintf+0x68>)
 800914e:	1e0c      	subs	r4, r1, #0
 8009150:	681d      	ldr	r5, [r3, #0]
 8009152:	b09d      	sub	sp, #116	@ 0x74
 8009154:	da08      	bge.n	8009168 <sniprintf+0x20>
 8009156:	238b      	movs	r3, #139	@ 0x8b
 8009158:	602b      	str	r3, [r5, #0]
 800915a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800915e:	b01d      	add	sp, #116	@ 0x74
 8009160:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009164:	b002      	add	sp, #8
 8009166:	4770      	bx	lr
 8009168:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800916c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009170:	f04f 0300 	mov.w	r3, #0
 8009174:	931b      	str	r3, [sp, #108]	@ 0x6c
 8009176:	bf14      	ite	ne
 8009178:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800917c:	4623      	moveq	r3, r4
 800917e:	9304      	str	r3, [sp, #16]
 8009180:	9307      	str	r3, [sp, #28]
 8009182:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009186:	9002      	str	r0, [sp, #8]
 8009188:	9006      	str	r0, [sp, #24]
 800918a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800918e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009190:	ab21      	add	r3, sp, #132	@ 0x84
 8009192:	a902      	add	r1, sp, #8
 8009194:	4628      	mov	r0, r5
 8009196:	9301      	str	r3, [sp, #4]
 8009198:	f000 f952 	bl	8009440 <_svfiprintf_r>
 800919c:	1c43      	adds	r3, r0, #1
 800919e:	bfbc      	itt	lt
 80091a0:	238b      	movlt	r3, #139	@ 0x8b
 80091a2:	602b      	strlt	r3, [r5, #0]
 80091a4:	2c00      	cmp	r4, #0
 80091a6:	d0da      	beq.n	800915e <sniprintf+0x16>
 80091a8:	9b02      	ldr	r3, [sp, #8]
 80091aa:	2200      	movs	r2, #0
 80091ac:	701a      	strb	r2, [r3, #0]
 80091ae:	e7d6      	b.n	800915e <sniprintf+0x16>
 80091b0:	20000014 	.word	0x20000014

080091b4 <memset>:
 80091b4:	4402      	add	r2, r0
 80091b6:	4603      	mov	r3, r0
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d100      	bne.n	80091be <memset+0xa>
 80091bc:	4770      	bx	lr
 80091be:	f803 1b01 	strb.w	r1, [r3], #1
 80091c2:	e7f9      	b.n	80091b8 <memset+0x4>

080091c4 <__errno>:
 80091c4:	4b01      	ldr	r3, [pc, #4]	@ (80091cc <__errno+0x8>)
 80091c6:	6818      	ldr	r0, [r3, #0]
 80091c8:	4770      	bx	lr
 80091ca:	bf00      	nop
 80091cc:	20000014 	.word	0x20000014

080091d0 <__libc_init_array>:
 80091d0:	b570      	push	{r4, r5, r6, lr}
 80091d2:	4d0d      	ldr	r5, [pc, #52]	@ (8009208 <__libc_init_array+0x38>)
 80091d4:	4c0d      	ldr	r4, [pc, #52]	@ (800920c <__libc_init_array+0x3c>)
 80091d6:	1b64      	subs	r4, r4, r5
 80091d8:	10a4      	asrs	r4, r4, #2
 80091da:	2600      	movs	r6, #0
 80091dc:	42a6      	cmp	r6, r4
 80091de:	d109      	bne.n	80091f4 <__libc_init_array+0x24>
 80091e0:	4d0b      	ldr	r5, [pc, #44]	@ (8009210 <__libc_init_array+0x40>)
 80091e2:	4c0c      	ldr	r4, [pc, #48]	@ (8009214 <__libc_init_array+0x44>)
 80091e4:	f001 fc20 	bl	800aa28 <_init>
 80091e8:	1b64      	subs	r4, r4, r5
 80091ea:	10a4      	asrs	r4, r4, #2
 80091ec:	2600      	movs	r6, #0
 80091ee:	42a6      	cmp	r6, r4
 80091f0:	d105      	bne.n	80091fe <__libc_init_array+0x2e>
 80091f2:	bd70      	pop	{r4, r5, r6, pc}
 80091f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80091f8:	4798      	blx	r3
 80091fa:	3601      	adds	r6, #1
 80091fc:	e7ee      	b.n	80091dc <__libc_init_array+0xc>
 80091fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8009202:	4798      	blx	r3
 8009204:	3601      	adds	r6, #1
 8009206:	e7f2      	b.n	80091ee <__libc_init_array+0x1e>
 8009208:	0800ab88 	.word	0x0800ab88
 800920c:	0800ab88 	.word	0x0800ab88
 8009210:	0800ab88 	.word	0x0800ab88
 8009214:	0800ab8c 	.word	0x0800ab8c

08009218 <__retarget_lock_acquire_recursive>:
 8009218:	4770      	bx	lr

0800921a <__retarget_lock_release_recursive>:
 800921a:	4770      	bx	lr

0800921c <_reclaim_reent>:
 800921c:	4b2d      	ldr	r3, [pc, #180]	@ (80092d4 <_reclaim_reent+0xb8>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	4283      	cmp	r3, r0
 8009222:	b570      	push	{r4, r5, r6, lr}
 8009224:	4604      	mov	r4, r0
 8009226:	d053      	beq.n	80092d0 <_reclaim_reent+0xb4>
 8009228:	69c3      	ldr	r3, [r0, #28]
 800922a:	b31b      	cbz	r3, 8009274 <_reclaim_reent+0x58>
 800922c:	68db      	ldr	r3, [r3, #12]
 800922e:	b163      	cbz	r3, 800924a <_reclaim_reent+0x2e>
 8009230:	2500      	movs	r5, #0
 8009232:	69e3      	ldr	r3, [r4, #28]
 8009234:	68db      	ldr	r3, [r3, #12]
 8009236:	5959      	ldr	r1, [r3, r5]
 8009238:	b9b1      	cbnz	r1, 8009268 <_reclaim_reent+0x4c>
 800923a:	3504      	adds	r5, #4
 800923c:	2d80      	cmp	r5, #128	@ 0x80
 800923e:	d1f8      	bne.n	8009232 <_reclaim_reent+0x16>
 8009240:	69e3      	ldr	r3, [r4, #28]
 8009242:	4620      	mov	r0, r4
 8009244:	68d9      	ldr	r1, [r3, #12]
 8009246:	f000 f855 	bl	80092f4 <_free_r>
 800924a:	69e3      	ldr	r3, [r4, #28]
 800924c:	6819      	ldr	r1, [r3, #0]
 800924e:	b111      	cbz	r1, 8009256 <_reclaim_reent+0x3a>
 8009250:	4620      	mov	r0, r4
 8009252:	f000 f84f 	bl	80092f4 <_free_r>
 8009256:	69e3      	ldr	r3, [r4, #28]
 8009258:	689d      	ldr	r5, [r3, #8]
 800925a:	b15d      	cbz	r5, 8009274 <_reclaim_reent+0x58>
 800925c:	4629      	mov	r1, r5
 800925e:	4620      	mov	r0, r4
 8009260:	682d      	ldr	r5, [r5, #0]
 8009262:	f000 f847 	bl	80092f4 <_free_r>
 8009266:	e7f8      	b.n	800925a <_reclaim_reent+0x3e>
 8009268:	680e      	ldr	r6, [r1, #0]
 800926a:	4620      	mov	r0, r4
 800926c:	f000 f842 	bl	80092f4 <_free_r>
 8009270:	4631      	mov	r1, r6
 8009272:	e7e1      	b.n	8009238 <_reclaim_reent+0x1c>
 8009274:	6961      	ldr	r1, [r4, #20]
 8009276:	b111      	cbz	r1, 800927e <_reclaim_reent+0x62>
 8009278:	4620      	mov	r0, r4
 800927a:	f000 f83b 	bl	80092f4 <_free_r>
 800927e:	69e1      	ldr	r1, [r4, #28]
 8009280:	b111      	cbz	r1, 8009288 <_reclaim_reent+0x6c>
 8009282:	4620      	mov	r0, r4
 8009284:	f000 f836 	bl	80092f4 <_free_r>
 8009288:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800928a:	b111      	cbz	r1, 8009292 <_reclaim_reent+0x76>
 800928c:	4620      	mov	r0, r4
 800928e:	f000 f831 	bl	80092f4 <_free_r>
 8009292:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009294:	b111      	cbz	r1, 800929c <_reclaim_reent+0x80>
 8009296:	4620      	mov	r0, r4
 8009298:	f000 f82c 	bl	80092f4 <_free_r>
 800929c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800929e:	b111      	cbz	r1, 80092a6 <_reclaim_reent+0x8a>
 80092a0:	4620      	mov	r0, r4
 80092a2:	f000 f827 	bl	80092f4 <_free_r>
 80092a6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80092a8:	b111      	cbz	r1, 80092b0 <_reclaim_reent+0x94>
 80092aa:	4620      	mov	r0, r4
 80092ac:	f000 f822 	bl	80092f4 <_free_r>
 80092b0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80092b2:	b111      	cbz	r1, 80092ba <_reclaim_reent+0x9e>
 80092b4:	4620      	mov	r0, r4
 80092b6:	f000 f81d 	bl	80092f4 <_free_r>
 80092ba:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80092bc:	b111      	cbz	r1, 80092c4 <_reclaim_reent+0xa8>
 80092be:	4620      	mov	r0, r4
 80092c0:	f000 f818 	bl	80092f4 <_free_r>
 80092c4:	6a23      	ldr	r3, [r4, #32]
 80092c6:	b11b      	cbz	r3, 80092d0 <_reclaim_reent+0xb4>
 80092c8:	4620      	mov	r0, r4
 80092ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80092ce:	4718      	bx	r3
 80092d0:	bd70      	pop	{r4, r5, r6, pc}
 80092d2:	bf00      	nop
 80092d4:	20000014 	.word	0x20000014

080092d8 <memcpy>:
 80092d8:	440a      	add	r2, r1
 80092da:	4291      	cmp	r1, r2
 80092dc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80092e0:	d100      	bne.n	80092e4 <memcpy+0xc>
 80092e2:	4770      	bx	lr
 80092e4:	b510      	push	{r4, lr}
 80092e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80092ee:	4291      	cmp	r1, r2
 80092f0:	d1f9      	bne.n	80092e6 <memcpy+0xe>
 80092f2:	bd10      	pop	{r4, pc}

080092f4 <_free_r>:
 80092f4:	b538      	push	{r3, r4, r5, lr}
 80092f6:	4605      	mov	r5, r0
 80092f8:	2900      	cmp	r1, #0
 80092fa:	d041      	beq.n	8009380 <_free_r+0x8c>
 80092fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009300:	1f0c      	subs	r4, r1, #4
 8009302:	2b00      	cmp	r3, #0
 8009304:	bfb8      	it	lt
 8009306:	18e4      	addlt	r4, r4, r3
 8009308:	f000 fbc4 	bl	8009a94 <__malloc_lock>
 800930c:	4a1d      	ldr	r2, [pc, #116]	@ (8009384 <_free_r+0x90>)
 800930e:	6813      	ldr	r3, [r2, #0]
 8009310:	b933      	cbnz	r3, 8009320 <_free_r+0x2c>
 8009312:	6063      	str	r3, [r4, #4]
 8009314:	6014      	str	r4, [r2, #0]
 8009316:	4628      	mov	r0, r5
 8009318:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800931c:	f000 bbc0 	b.w	8009aa0 <__malloc_unlock>
 8009320:	42a3      	cmp	r3, r4
 8009322:	d908      	bls.n	8009336 <_free_r+0x42>
 8009324:	6820      	ldr	r0, [r4, #0]
 8009326:	1821      	adds	r1, r4, r0
 8009328:	428b      	cmp	r3, r1
 800932a:	bf01      	itttt	eq
 800932c:	6819      	ldreq	r1, [r3, #0]
 800932e:	685b      	ldreq	r3, [r3, #4]
 8009330:	1809      	addeq	r1, r1, r0
 8009332:	6021      	streq	r1, [r4, #0]
 8009334:	e7ed      	b.n	8009312 <_free_r+0x1e>
 8009336:	461a      	mov	r2, r3
 8009338:	685b      	ldr	r3, [r3, #4]
 800933a:	b10b      	cbz	r3, 8009340 <_free_r+0x4c>
 800933c:	42a3      	cmp	r3, r4
 800933e:	d9fa      	bls.n	8009336 <_free_r+0x42>
 8009340:	6811      	ldr	r1, [r2, #0]
 8009342:	1850      	adds	r0, r2, r1
 8009344:	42a0      	cmp	r0, r4
 8009346:	d10b      	bne.n	8009360 <_free_r+0x6c>
 8009348:	6820      	ldr	r0, [r4, #0]
 800934a:	4401      	add	r1, r0
 800934c:	1850      	adds	r0, r2, r1
 800934e:	4283      	cmp	r3, r0
 8009350:	6011      	str	r1, [r2, #0]
 8009352:	d1e0      	bne.n	8009316 <_free_r+0x22>
 8009354:	6818      	ldr	r0, [r3, #0]
 8009356:	685b      	ldr	r3, [r3, #4]
 8009358:	6053      	str	r3, [r2, #4]
 800935a:	4408      	add	r0, r1
 800935c:	6010      	str	r0, [r2, #0]
 800935e:	e7da      	b.n	8009316 <_free_r+0x22>
 8009360:	d902      	bls.n	8009368 <_free_r+0x74>
 8009362:	230c      	movs	r3, #12
 8009364:	602b      	str	r3, [r5, #0]
 8009366:	e7d6      	b.n	8009316 <_free_r+0x22>
 8009368:	6820      	ldr	r0, [r4, #0]
 800936a:	1821      	adds	r1, r4, r0
 800936c:	428b      	cmp	r3, r1
 800936e:	bf04      	itt	eq
 8009370:	6819      	ldreq	r1, [r3, #0]
 8009372:	685b      	ldreq	r3, [r3, #4]
 8009374:	6063      	str	r3, [r4, #4]
 8009376:	bf04      	itt	eq
 8009378:	1809      	addeq	r1, r1, r0
 800937a:	6021      	streq	r1, [r4, #0]
 800937c:	6054      	str	r4, [r2, #4]
 800937e:	e7ca      	b.n	8009316 <_free_r+0x22>
 8009380:	bd38      	pop	{r3, r4, r5, pc}
 8009382:	bf00      	nop
 8009384:	20004e38 	.word	0x20004e38

08009388 <__ssputs_r>:
 8009388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800938c:	688e      	ldr	r6, [r1, #8]
 800938e:	461f      	mov	r7, r3
 8009390:	42be      	cmp	r6, r7
 8009392:	680b      	ldr	r3, [r1, #0]
 8009394:	4682      	mov	sl, r0
 8009396:	460c      	mov	r4, r1
 8009398:	4690      	mov	r8, r2
 800939a:	d82d      	bhi.n	80093f8 <__ssputs_r+0x70>
 800939c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80093a0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80093a4:	d026      	beq.n	80093f4 <__ssputs_r+0x6c>
 80093a6:	6965      	ldr	r5, [r4, #20]
 80093a8:	6909      	ldr	r1, [r1, #16]
 80093aa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80093ae:	eba3 0901 	sub.w	r9, r3, r1
 80093b2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80093b6:	1c7b      	adds	r3, r7, #1
 80093b8:	444b      	add	r3, r9
 80093ba:	106d      	asrs	r5, r5, #1
 80093bc:	429d      	cmp	r5, r3
 80093be:	bf38      	it	cc
 80093c0:	461d      	movcc	r5, r3
 80093c2:	0553      	lsls	r3, r2, #21
 80093c4:	d527      	bpl.n	8009416 <__ssputs_r+0x8e>
 80093c6:	4629      	mov	r1, r5
 80093c8:	f000 f958 	bl	800967c <_malloc_r>
 80093cc:	4606      	mov	r6, r0
 80093ce:	b360      	cbz	r0, 800942a <__ssputs_r+0xa2>
 80093d0:	6921      	ldr	r1, [r4, #16]
 80093d2:	464a      	mov	r2, r9
 80093d4:	f7ff ff80 	bl	80092d8 <memcpy>
 80093d8:	89a3      	ldrh	r3, [r4, #12]
 80093da:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80093de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093e2:	81a3      	strh	r3, [r4, #12]
 80093e4:	6126      	str	r6, [r4, #16]
 80093e6:	6165      	str	r5, [r4, #20]
 80093e8:	444e      	add	r6, r9
 80093ea:	eba5 0509 	sub.w	r5, r5, r9
 80093ee:	6026      	str	r6, [r4, #0]
 80093f0:	60a5      	str	r5, [r4, #8]
 80093f2:	463e      	mov	r6, r7
 80093f4:	42be      	cmp	r6, r7
 80093f6:	d900      	bls.n	80093fa <__ssputs_r+0x72>
 80093f8:	463e      	mov	r6, r7
 80093fa:	6820      	ldr	r0, [r4, #0]
 80093fc:	4632      	mov	r2, r6
 80093fe:	4641      	mov	r1, r8
 8009400:	f000 fb82 	bl	8009b08 <memmove>
 8009404:	68a3      	ldr	r3, [r4, #8]
 8009406:	1b9b      	subs	r3, r3, r6
 8009408:	60a3      	str	r3, [r4, #8]
 800940a:	6823      	ldr	r3, [r4, #0]
 800940c:	4433      	add	r3, r6
 800940e:	6023      	str	r3, [r4, #0]
 8009410:	2000      	movs	r0, #0
 8009412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009416:	462a      	mov	r2, r5
 8009418:	f000 fb48 	bl	8009aac <_realloc_r>
 800941c:	4606      	mov	r6, r0
 800941e:	2800      	cmp	r0, #0
 8009420:	d1e0      	bne.n	80093e4 <__ssputs_r+0x5c>
 8009422:	6921      	ldr	r1, [r4, #16]
 8009424:	4650      	mov	r0, sl
 8009426:	f7ff ff65 	bl	80092f4 <_free_r>
 800942a:	230c      	movs	r3, #12
 800942c:	f8ca 3000 	str.w	r3, [sl]
 8009430:	89a3      	ldrh	r3, [r4, #12]
 8009432:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009436:	81a3      	strh	r3, [r4, #12]
 8009438:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800943c:	e7e9      	b.n	8009412 <__ssputs_r+0x8a>
	...

08009440 <_svfiprintf_r>:
 8009440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009444:	4698      	mov	r8, r3
 8009446:	898b      	ldrh	r3, [r1, #12]
 8009448:	061b      	lsls	r3, r3, #24
 800944a:	b09d      	sub	sp, #116	@ 0x74
 800944c:	4607      	mov	r7, r0
 800944e:	460d      	mov	r5, r1
 8009450:	4614      	mov	r4, r2
 8009452:	d510      	bpl.n	8009476 <_svfiprintf_r+0x36>
 8009454:	690b      	ldr	r3, [r1, #16]
 8009456:	b973      	cbnz	r3, 8009476 <_svfiprintf_r+0x36>
 8009458:	2140      	movs	r1, #64	@ 0x40
 800945a:	f000 f90f 	bl	800967c <_malloc_r>
 800945e:	6028      	str	r0, [r5, #0]
 8009460:	6128      	str	r0, [r5, #16]
 8009462:	b930      	cbnz	r0, 8009472 <_svfiprintf_r+0x32>
 8009464:	230c      	movs	r3, #12
 8009466:	603b      	str	r3, [r7, #0]
 8009468:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800946c:	b01d      	add	sp, #116	@ 0x74
 800946e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009472:	2340      	movs	r3, #64	@ 0x40
 8009474:	616b      	str	r3, [r5, #20]
 8009476:	2300      	movs	r3, #0
 8009478:	9309      	str	r3, [sp, #36]	@ 0x24
 800947a:	2320      	movs	r3, #32
 800947c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009480:	f8cd 800c 	str.w	r8, [sp, #12]
 8009484:	2330      	movs	r3, #48	@ 0x30
 8009486:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009624 <_svfiprintf_r+0x1e4>
 800948a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800948e:	f04f 0901 	mov.w	r9, #1
 8009492:	4623      	mov	r3, r4
 8009494:	469a      	mov	sl, r3
 8009496:	f813 2b01 	ldrb.w	r2, [r3], #1
 800949a:	b10a      	cbz	r2, 80094a0 <_svfiprintf_r+0x60>
 800949c:	2a25      	cmp	r2, #37	@ 0x25
 800949e:	d1f9      	bne.n	8009494 <_svfiprintf_r+0x54>
 80094a0:	ebba 0b04 	subs.w	fp, sl, r4
 80094a4:	d00b      	beq.n	80094be <_svfiprintf_r+0x7e>
 80094a6:	465b      	mov	r3, fp
 80094a8:	4622      	mov	r2, r4
 80094aa:	4629      	mov	r1, r5
 80094ac:	4638      	mov	r0, r7
 80094ae:	f7ff ff6b 	bl	8009388 <__ssputs_r>
 80094b2:	3001      	adds	r0, #1
 80094b4:	f000 80a7 	beq.w	8009606 <_svfiprintf_r+0x1c6>
 80094b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80094ba:	445a      	add	r2, fp
 80094bc:	9209      	str	r2, [sp, #36]	@ 0x24
 80094be:	f89a 3000 	ldrb.w	r3, [sl]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	f000 809f 	beq.w	8009606 <_svfiprintf_r+0x1c6>
 80094c8:	2300      	movs	r3, #0
 80094ca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80094ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80094d2:	f10a 0a01 	add.w	sl, sl, #1
 80094d6:	9304      	str	r3, [sp, #16]
 80094d8:	9307      	str	r3, [sp, #28]
 80094da:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80094de:	931a      	str	r3, [sp, #104]	@ 0x68
 80094e0:	4654      	mov	r4, sl
 80094e2:	2205      	movs	r2, #5
 80094e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094e8:	484e      	ldr	r0, [pc, #312]	@ (8009624 <_svfiprintf_r+0x1e4>)
 80094ea:	f7f6 fe79 	bl	80001e0 <memchr>
 80094ee:	9a04      	ldr	r2, [sp, #16]
 80094f0:	b9d8      	cbnz	r0, 800952a <_svfiprintf_r+0xea>
 80094f2:	06d0      	lsls	r0, r2, #27
 80094f4:	bf44      	itt	mi
 80094f6:	2320      	movmi	r3, #32
 80094f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80094fc:	0711      	lsls	r1, r2, #28
 80094fe:	bf44      	itt	mi
 8009500:	232b      	movmi	r3, #43	@ 0x2b
 8009502:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009506:	f89a 3000 	ldrb.w	r3, [sl]
 800950a:	2b2a      	cmp	r3, #42	@ 0x2a
 800950c:	d015      	beq.n	800953a <_svfiprintf_r+0xfa>
 800950e:	9a07      	ldr	r2, [sp, #28]
 8009510:	4654      	mov	r4, sl
 8009512:	2000      	movs	r0, #0
 8009514:	f04f 0c0a 	mov.w	ip, #10
 8009518:	4621      	mov	r1, r4
 800951a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800951e:	3b30      	subs	r3, #48	@ 0x30
 8009520:	2b09      	cmp	r3, #9
 8009522:	d94b      	bls.n	80095bc <_svfiprintf_r+0x17c>
 8009524:	b1b0      	cbz	r0, 8009554 <_svfiprintf_r+0x114>
 8009526:	9207      	str	r2, [sp, #28]
 8009528:	e014      	b.n	8009554 <_svfiprintf_r+0x114>
 800952a:	eba0 0308 	sub.w	r3, r0, r8
 800952e:	fa09 f303 	lsl.w	r3, r9, r3
 8009532:	4313      	orrs	r3, r2
 8009534:	9304      	str	r3, [sp, #16]
 8009536:	46a2      	mov	sl, r4
 8009538:	e7d2      	b.n	80094e0 <_svfiprintf_r+0xa0>
 800953a:	9b03      	ldr	r3, [sp, #12]
 800953c:	1d19      	adds	r1, r3, #4
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	9103      	str	r1, [sp, #12]
 8009542:	2b00      	cmp	r3, #0
 8009544:	bfbb      	ittet	lt
 8009546:	425b      	neglt	r3, r3
 8009548:	f042 0202 	orrlt.w	r2, r2, #2
 800954c:	9307      	strge	r3, [sp, #28]
 800954e:	9307      	strlt	r3, [sp, #28]
 8009550:	bfb8      	it	lt
 8009552:	9204      	strlt	r2, [sp, #16]
 8009554:	7823      	ldrb	r3, [r4, #0]
 8009556:	2b2e      	cmp	r3, #46	@ 0x2e
 8009558:	d10a      	bne.n	8009570 <_svfiprintf_r+0x130>
 800955a:	7863      	ldrb	r3, [r4, #1]
 800955c:	2b2a      	cmp	r3, #42	@ 0x2a
 800955e:	d132      	bne.n	80095c6 <_svfiprintf_r+0x186>
 8009560:	9b03      	ldr	r3, [sp, #12]
 8009562:	1d1a      	adds	r2, r3, #4
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	9203      	str	r2, [sp, #12]
 8009568:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800956c:	3402      	adds	r4, #2
 800956e:	9305      	str	r3, [sp, #20]
 8009570:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009634 <_svfiprintf_r+0x1f4>
 8009574:	7821      	ldrb	r1, [r4, #0]
 8009576:	2203      	movs	r2, #3
 8009578:	4650      	mov	r0, sl
 800957a:	f7f6 fe31 	bl	80001e0 <memchr>
 800957e:	b138      	cbz	r0, 8009590 <_svfiprintf_r+0x150>
 8009580:	9b04      	ldr	r3, [sp, #16]
 8009582:	eba0 000a 	sub.w	r0, r0, sl
 8009586:	2240      	movs	r2, #64	@ 0x40
 8009588:	4082      	lsls	r2, r0
 800958a:	4313      	orrs	r3, r2
 800958c:	3401      	adds	r4, #1
 800958e:	9304      	str	r3, [sp, #16]
 8009590:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009594:	4824      	ldr	r0, [pc, #144]	@ (8009628 <_svfiprintf_r+0x1e8>)
 8009596:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800959a:	2206      	movs	r2, #6
 800959c:	f7f6 fe20 	bl	80001e0 <memchr>
 80095a0:	2800      	cmp	r0, #0
 80095a2:	d036      	beq.n	8009612 <_svfiprintf_r+0x1d2>
 80095a4:	4b21      	ldr	r3, [pc, #132]	@ (800962c <_svfiprintf_r+0x1ec>)
 80095a6:	bb1b      	cbnz	r3, 80095f0 <_svfiprintf_r+0x1b0>
 80095a8:	9b03      	ldr	r3, [sp, #12]
 80095aa:	3307      	adds	r3, #7
 80095ac:	f023 0307 	bic.w	r3, r3, #7
 80095b0:	3308      	adds	r3, #8
 80095b2:	9303      	str	r3, [sp, #12]
 80095b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095b6:	4433      	add	r3, r6
 80095b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80095ba:	e76a      	b.n	8009492 <_svfiprintf_r+0x52>
 80095bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80095c0:	460c      	mov	r4, r1
 80095c2:	2001      	movs	r0, #1
 80095c4:	e7a8      	b.n	8009518 <_svfiprintf_r+0xd8>
 80095c6:	2300      	movs	r3, #0
 80095c8:	3401      	adds	r4, #1
 80095ca:	9305      	str	r3, [sp, #20]
 80095cc:	4619      	mov	r1, r3
 80095ce:	f04f 0c0a 	mov.w	ip, #10
 80095d2:	4620      	mov	r0, r4
 80095d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80095d8:	3a30      	subs	r2, #48	@ 0x30
 80095da:	2a09      	cmp	r2, #9
 80095dc:	d903      	bls.n	80095e6 <_svfiprintf_r+0x1a6>
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d0c6      	beq.n	8009570 <_svfiprintf_r+0x130>
 80095e2:	9105      	str	r1, [sp, #20]
 80095e4:	e7c4      	b.n	8009570 <_svfiprintf_r+0x130>
 80095e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80095ea:	4604      	mov	r4, r0
 80095ec:	2301      	movs	r3, #1
 80095ee:	e7f0      	b.n	80095d2 <_svfiprintf_r+0x192>
 80095f0:	ab03      	add	r3, sp, #12
 80095f2:	9300      	str	r3, [sp, #0]
 80095f4:	462a      	mov	r2, r5
 80095f6:	4b0e      	ldr	r3, [pc, #56]	@ (8009630 <_svfiprintf_r+0x1f0>)
 80095f8:	a904      	add	r1, sp, #16
 80095fa:	4638      	mov	r0, r7
 80095fc:	f3af 8000 	nop.w
 8009600:	1c42      	adds	r2, r0, #1
 8009602:	4606      	mov	r6, r0
 8009604:	d1d6      	bne.n	80095b4 <_svfiprintf_r+0x174>
 8009606:	89ab      	ldrh	r3, [r5, #12]
 8009608:	065b      	lsls	r3, r3, #25
 800960a:	f53f af2d 	bmi.w	8009468 <_svfiprintf_r+0x28>
 800960e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009610:	e72c      	b.n	800946c <_svfiprintf_r+0x2c>
 8009612:	ab03      	add	r3, sp, #12
 8009614:	9300      	str	r3, [sp, #0]
 8009616:	462a      	mov	r2, r5
 8009618:	4b05      	ldr	r3, [pc, #20]	@ (8009630 <_svfiprintf_r+0x1f0>)
 800961a:	a904      	add	r1, sp, #16
 800961c:	4638      	mov	r0, r7
 800961e:	f000 f91b 	bl	8009858 <_printf_i>
 8009622:	e7ed      	b.n	8009600 <_svfiprintf_r+0x1c0>
 8009624:	0800ab08 	.word	0x0800ab08
 8009628:	0800ab12 	.word	0x0800ab12
 800962c:	00000000 	.word	0x00000000
 8009630:	08009389 	.word	0x08009389
 8009634:	0800ab0e 	.word	0x0800ab0e

08009638 <sbrk_aligned>:
 8009638:	b570      	push	{r4, r5, r6, lr}
 800963a:	4e0f      	ldr	r6, [pc, #60]	@ (8009678 <sbrk_aligned+0x40>)
 800963c:	460c      	mov	r4, r1
 800963e:	6831      	ldr	r1, [r6, #0]
 8009640:	4605      	mov	r5, r0
 8009642:	b911      	cbnz	r1, 800964a <sbrk_aligned+0x12>
 8009644:	f000 fa7a 	bl	8009b3c <_sbrk_r>
 8009648:	6030      	str	r0, [r6, #0]
 800964a:	4621      	mov	r1, r4
 800964c:	4628      	mov	r0, r5
 800964e:	f000 fa75 	bl	8009b3c <_sbrk_r>
 8009652:	1c43      	adds	r3, r0, #1
 8009654:	d103      	bne.n	800965e <sbrk_aligned+0x26>
 8009656:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800965a:	4620      	mov	r0, r4
 800965c:	bd70      	pop	{r4, r5, r6, pc}
 800965e:	1cc4      	adds	r4, r0, #3
 8009660:	f024 0403 	bic.w	r4, r4, #3
 8009664:	42a0      	cmp	r0, r4
 8009666:	d0f8      	beq.n	800965a <sbrk_aligned+0x22>
 8009668:	1a21      	subs	r1, r4, r0
 800966a:	4628      	mov	r0, r5
 800966c:	f000 fa66 	bl	8009b3c <_sbrk_r>
 8009670:	3001      	adds	r0, #1
 8009672:	d1f2      	bne.n	800965a <sbrk_aligned+0x22>
 8009674:	e7ef      	b.n	8009656 <sbrk_aligned+0x1e>
 8009676:	bf00      	nop
 8009678:	20004e34 	.word	0x20004e34

0800967c <_malloc_r>:
 800967c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009680:	1ccd      	adds	r5, r1, #3
 8009682:	f025 0503 	bic.w	r5, r5, #3
 8009686:	3508      	adds	r5, #8
 8009688:	2d0c      	cmp	r5, #12
 800968a:	bf38      	it	cc
 800968c:	250c      	movcc	r5, #12
 800968e:	2d00      	cmp	r5, #0
 8009690:	4606      	mov	r6, r0
 8009692:	db01      	blt.n	8009698 <_malloc_r+0x1c>
 8009694:	42a9      	cmp	r1, r5
 8009696:	d904      	bls.n	80096a2 <_malloc_r+0x26>
 8009698:	230c      	movs	r3, #12
 800969a:	6033      	str	r3, [r6, #0]
 800969c:	2000      	movs	r0, #0
 800969e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009778 <_malloc_r+0xfc>
 80096a6:	f000 f9f5 	bl	8009a94 <__malloc_lock>
 80096aa:	f8d8 3000 	ldr.w	r3, [r8]
 80096ae:	461c      	mov	r4, r3
 80096b0:	bb44      	cbnz	r4, 8009704 <_malloc_r+0x88>
 80096b2:	4629      	mov	r1, r5
 80096b4:	4630      	mov	r0, r6
 80096b6:	f7ff ffbf 	bl	8009638 <sbrk_aligned>
 80096ba:	1c43      	adds	r3, r0, #1
 80096bc:	4604      	mov	r4, r0
 80096be:	d158      	bne.n	8009772 <_malloc_r+0xf6>
 80096c0:	f8d8 4000 	ldr.w	r4, [r8]
 80096c4:	4627      	mov	r7, r4
 80096c6:	2f00      	cmp	r7, #0
 80096c8:	d143      	bne.n	8009752 <_malloc_r+0xd6>
 80096ca:	2c00      	cmp	r4, #0
 80096cc:	d04b      	beq.n	8009766 <_malloc_r+0xea>
 80096ce:	6823      	ldr	r3, [r4, #0]
 80096d0:	4639      	mov	r1, r7
 80096d2:	4630      	mov	r0, r6
 80096d4:	eb04 0903 	add.w	r9, r4, r3
 80096d8:	f000 fa30 	bl	8009b3c <_sbrk_r>
 80096dc:	4581      	cmp	r9, r0
 80096de:	d142      	bne.n	8009766 <_malloc_r+0xea>
 80096e0:	6821      	ldr	r1, [r4, #0]
 80096e2:	1a6d      	subs	r5, r5, r1
 80096e4:	4629      	mov	r1, r5
 80096e6:	4630      	mov	r0, r6
 80096e8:	f7ff ffa6 	bl	8009638 <sbrk_aligned>
 80096ec:	3001      	adds	r0, #1
 80096ee:	d03a      	beq.n	8009766 <_malloc_r+0xea>
 80096f0:	6823      	ldr	r3, [r4, #0]
 80096f2:	442b      	add	r3, r5
 80096f4:	6023      	str	r3, [r4, #0]
 80096f6:	f8d8 3000 	ldr.w	r3, [r8]
 80096fa:	685a      	ldr	r2, [r3, #4]
 80096fc:	bb62      	cbnz	r2, 8009758 <_malloc_r+0xdc>
 80096fe:	f8c8 7000 	str.w	r7, [r8]
 8009702:	e00f      	b.n	8009724 <_malloc_r+0xa8>
 8009704:	6822      	ldr	r2, [r4, #0]
 8009706:	1b52      	subs	r2, r2, r5
 8009708:	d420      	bmi.n	800974c <_malloc_r+0xd0>
 800970a:	2a0b      	cmp	r2, #11
 800970c:	d917      	bls.n	800973e <_malloc_r+0xc2>
 800970e:	1961      	adds	r1, r4, r5
 8009710:	42a3      	cmp	r3, r4
 8009712:	6025      	str	r5, [r4, #0]
 8009714:	bf18      	it	ne
 8009716:	6059      	strne	r1, [r3, #4]
 8009718:	6863      	ldr	r3, [r4, #4]
 800971a:	bf08      	it	eq
 800971c:	f8c8 1000 	streq.w	r1, [r8]
 8009720:	5162      	str	r2, [r4, r5]
 8009722:	604b      	str	r3, [r1, #4]
 8009724:	4630      	mov	r0, r6
 8009726:	f000 f9bb 	bl	8009aa0 <__malloc_unlock>
 800972a:	f104 000b 	add.w	r0, r4, #11
 800972e:	1d23      	adds	r3, r4, #4
 8009730:	f020 0007 	bic.w	r0, r0, #7
 8009734:	1ac2      	subs	r2, r0, r3
 8009736:	bf1c      	itt	ne
 8009738:	1a1b      	subne	r3, r3, r0
 800973a:	50a3      	strne	r3, [r4, r2]
 800973c:	e7af      	b.n	800969e <_malloc_r+0x22>
 800973e:	6862      	ldr	r2, [r4, #4]
 8009740:	42a3      	cmp	r3, r4
 8009742:	bf0c      	ite	eq
 8009744:	f8c8 2000 	streq.w	r2, [r8]
 8009748:	605a      	strne	r2, [r3, #4]
 800974a:	e7eb      	b.n	8009724 <_malloc_r+0xa8>
 800974c:	4623      	mov	r3, r4
 800974e:	6864      	ldr	r4, [r4, #4]
 8009750:	e7ae      	b.n	80096b0 <_malloc_r+0x34>
 8009752:	463c      	mov	r4, r7
 8009754:	687f      	ldr	r7, [r7, #4]
 8009756:	e7b6      	b.n	80096c6 <_malloc_r+0x4a>
 8009758:	461a      	mov	r2, r3
 800975a:	685b      	ldr	r3, [r3, #4]
 800975c:	42a3      	cmp	r3, r4
 800975e:	d1fb      	bne.n	8009758 <_malloc_r+0xdc>
 8009760:	2300      	movs	r3, #0
 8009762:	6053      	str	r3, [r2, #4]
 8009764:	e7de      	b.n	8009724 <_malloc_r+0xa8>
 8009766:	230c      	movs	r3, #12
 8009768:	6033      	str	r3, [r6, #0]
 800976a:	4630      	mov	r0, r6
 800976c:	f000 f998 	bl	8009aa0 <__malloc_unlock>
 8009770:	e794      	b.n	800969c <_malloc_r+0x20>
 8009772:	6005      	str	r5, [r0, #0]
 8009774:	e7d6      	b.n	8009724 <_malloc_r+0xa8>
 8009776:	bf00      	nop
 8009778:	20004e38 	.word	0x20004e38

0800977c <_printf_common>:
 800977c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009780:	4616      	mov	r6, r2
 8009782:	4698      	mov	r8, r3
 8009784:	688a      	ldr	r2, [r1, #8]
 8009786:	690b      	ldr	r3, [r1, #16]
 8009788:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800978c:	4293      	cmp	r3, r2
 800978e:	bfb8      	it	lt
 8009790:	4613      	movlt	r3, r2
 8009792:	6033      	str	r3, [r6, #0]
 8009794:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009798:	4607      	mov	r7, r0
 800979a:	460c      	mov	r4, r1
 800979c:	b10a      	cbz	r2, 80097a2 <_printf_common+0x26>
 800979e:	3301      	adds	r3, #1
 80097a0:	6033      	str	r3, [r6, #0]
 80097a2:	6823      	ldr	r3, [r4, #0]
 80097a4:	0699      	lsls	r1, r3, #26
 80097a6:	bf42      	ittt	mi
 80097a8:	6833      	ldrmi	r3, [r6, #0]
 80097aa:	3302      	addmi	r3, #2
 80097ac:	6033      	strmi	r3, [r6, #0]
 80097ae:	6825      	ldr	r5, [r4, #0]
 80097b0:	f015 0506 	ands.w	r5, r5, #6
 80097b4:	d106      	bne.n	80097c4 <_printf_common+0x48>
 80097b6:	f104 0a19 	add.w	sl, r4, #25
 80097ba:	68e3      	ldr	r3, [r4, #12]
 80097bc:	6832      	ldr	r2, [r6, #0]
 80097be:	1a9b      	subs	r3, r3, r2
 80097c0:	42ab      	cmp	r3, r5
 80097c2:	dc26      	bgt.n	8009812 <_printf_common+0x96>
 80097c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80097c8:	6822      	ldr	r2, [r4, #0]
 80097ca:	3b00      	subs	r3, #0
 80097cc:	bf18      	it	ne
 80097ce:	2301      	movne	r3, #1
 80097d0:	0692      	lsls	r2, r2, #26
 80097d2:	d42b      	bmi.n	800982c <_printf_common+0xb0>
 80097d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80097d8:	4641      	mov	r1, r8
 80097da:	4638      	mov	r0, r7
 80097dc:	47c8      	blx	r9
 80097de:	3001      	adds	r0, #1
 80097e0:	d01e      	beq.n	8009820 <_printf_common+0xa4>
 80097e2:	6823      	ldr	r3, [r4, #0]
 80097e4:	6922      	ldr	r2, [r4, #16]
 80097e6:	f003 0306 	and.w	r3, r3, #6
 80097ea:	2b04      	cmp	r3, #4
 80097ec:	bf02      	ittt	eq
 80097ee:	68e5      	ldreq	r5, [r4, #12]
 80097f0:	6833      	ldreq	r3, [r6, #0]
 80097f2:	1aed      	subeq	r5, r5, r3
 80097f4:	68a3      	ldr	r3, [r4, #8]
 80097f6:	bf0c      	ite	eq
 80097f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80097fc:	2500      	movne	r5, #0
 80097fe:	4293      	cmp	r3, r2
 8009800:	bfc4      	itt	gt
 8009802:	1a9b      	subgt	r3, r3, r2
 8009804:	18ed      	addgt	r5, r5, r3
 8009806:	2600      	movs	r6, #0
 8009808:	341a      	adds	r4, #26
 800980a:	42b5      	cmp	r5, r6
 800980c:	d11a      	bne.n	8009844 <_printf_common+0xc8>
 800980e:	2000      	movs	r0, #0
 8009810:	e008      	b.n	8009824 <_printf_common+0xa8>
 8009812:	2301      	movs	r3, #1
 8009814:	4652      	mov	r2, sl
 8009816:	4641      	mov	r1, r8
 8009818:	4638      	mov	r0, r7
 800981a:	47c8      	blx	r9
 800981c:	3001      	adds	r0, #1
 800981e:	d103      	bne.n	8009828 <_printf_common+0xac>
 8009820:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009828:	3501      	adds	r5, #1
 800982a:	e7c6      	b.n	80097ba <_printf_common+0x3e>
 800982c:	18e1      	adds	r1, r4, r3
 800982e:	1c5a      	adds	r2, r3, #1
 8009830:	2030      	movs	r0, #48	@ 0x30
 8009832:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009836:	4422      	add	r2, r4
 8009838:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800983c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009840:	3302      	adds	r3, #2
 8009842:	e7c7      	b.n	80097d4 <_printf_common+0x58>
 8009844:	2301      	movs	r3, #1
 8009846:	4622      	mov	r2, r4
 8009848:	4641      	mov	r1, r8
 800984a:	4638      	mov	r0, r7
 800984c:	47c8      	blx	r9
 800984e:	3001      	adds	r0, #1
 8009850:	d0e6      	beq.n	8009820 <_printf_common+0xa4>
 8009852:	3601      	adds	r6, #1
 8009854:	e7d9      	b.n	800980a <_printf_common+0x8e>
	...

08009858 <_printf_i>:
 8009858:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800985c:	7e0f      	ldrb	r7, [r1, #24]
 800985e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009860:	2f78      	cmp	r7, #120	@ 0x78
 8009862:	4691      	mov	r9, r2
 8009864:	4680      	mov	r8, r0
 8009866:	460c      	mov	r4, r1
 8009868:	469a      	mov	sl, r3
 800986a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800986e:	d807      	bhi.n	8009880 <_printf_i+0x28>
 8009870:	2f62      	cmp	r7, #98	@ 0x62
 8009872:	d80a      	bhi.n	800988a <_printf_i+0x32>
 8009874:	2f00      	cmp	r7, #0
 8009876:	f000 80d1 	beq.w	8009a1c <_printf_i+0x1c4>
 800987a:	2f58      	cmp	r7, #88	@ 0x58
 800987c:	f000 80b8 	beq.w	80099f0 <_printf_i+0x198>
 8009880:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009884:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009888:	e03a      	b.n	8009900 <_printf_i+0xa8>
 800988a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800988e:	2b15      	cmp	r3, #21
 8009890:	d8f6      	bhi.n	8009880 <_printf_i+0x28>
 8009892:	a101      	add	r1, pc, #4	@ (adr r1, 8009898 <_printf_i+0x40>)
 8009894:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009898:	080098f1 	.word	0x080098f1
 800989c:	08009905 	.word	0x08009905
 80098a0:	08009881 	.word	0x08009881
 80098a4:	08009881 	.word	0x08009881
 80098a8:	08009881 	.word	0x08009881
 80098ac:	08009881 	.word	0x08009881
 80098b0:	08009905 	.word	0x08009905
 80098b4:	08009881 	.word	0x08009881
 80098b8:	08009881 	.word	0x08009881
 80098bc:	08009881 	.word	0x08009881
 80098c0:	08009881 	.word	0x08009881
 80098c4:	08009a03 	.word	0x08009a03
 80098c8:	0800992f 	.word	0x0800992f
 80098cc:	080099bd 	.word	0x080099bd
 80098d0:	08009881 	.word	0x08009881
 80098d4:	08009881 	.word	0x08009881
 80098d8:	08009a25 	.word	0x08009a25
 80098dc:	08009881 	.word	0x08009881
 80098e0:	0800992f 	.word	0x0800992f
 80098e4:	08009881 	.word	0x08009881
 80098e8:	08009881 	.word	0x08009881
 80098ec:	080099c5 	.word	0x080099c5
 80098f0:	6833      	ldr	r3, [r6, #0]
 80098f2:	1d1a      	adds	r2, r3, #4
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	6032      	str	r2, [r6, #0]
 80098f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80098fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009900:	2301      	movs	r3, #1
 8009902:	e09c      	b.n	8009a3e <_printf_i+0x1e6>
 8009904:	6833      	ldr	r3, [r6, #0]
 8009906:	6820      	ldr	r0, [r4, #0]
 8009908:	1d19      	adds	r1, r3, #4
 800990a:	6031      	str	r1, [r6, #0]
 800990c:	0606      	lsls	r6, r0, #24
 800990e:	d501      	bpl.n	8009914 <_printf_i+0xbc>
 8009910:	681d      	ldr	r5, [r3, #0]
 8009912:	e003      	b.n	800991c <_printf_i+0xc4>
 8009914:	0645      	lsls	r5, r0, #25
 8009916:	d5fb      	bpl.n	8009910 <_printf_i+0xb8>
 8009918:	f9b3 5000 	ldrsh.w	r5, [r3]
 800991c:	2d00      	cmp	r5, #0
 800991e:	da03      	bge.n	8009928 <_printf_i+0xd0>
 8009920:	232d      	movs	r3, #45	@ 0x2d
 8009922:	426d      	negs	r5, r5
 8009924:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009928:	4858      	ldr	r0, [pc, #352]	@ (8009a8c <_printf_i+0x234>)
 800992a:	230a      	movs	r3, #10
 800992c:	e011      	b.n	8009952 <_printf_i+0xfa>
 800992e:	6821      	ldr	r1, [r4, #0]
 8009930:	6833      	ldr	r3, [r6, #0]
 8009932:	0608      	lsls	r0, r1, #24
 8009934:	f853 5b04 	ldr.w	r5, [r3], #4
 8009938:	d402      	bmi.n	8009940 <_printf_i+0xe8>
 800993a:	0649      	lsls	r1, r1, #25
 800993c:	bf48      	it	mi
 800993e:	b2ad      	uxthmi	r5, r5
 8009940:	2f6f      	cmp	r7, #111	@ 0x6f
 8009942:	4852      	ldr	r0, [pc, #328]	@ (8009a8c <_printf_i+0x234>)
 8009944:	6033      	str	r3, [r6, #0]
 8009946:	bf14      	ite	ne
 8009948:	230a      	movne	r3, #10
 800994a:	2308      	moveq	r3, #8
 800994c:	2100      	movs	r1, #0
 800994e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009952:	6866      	ldr	r6, [r4, #4]
 8009954:	60a6      	str	r6, [r4, #8]
 8009956:	2e00      	cmp	r6, #0
 8009958:	db05      	blt.n	8009966 <_printf_i+0x10e>
 800995a:	6821      	ldr	r1, [r4, #0]
 800995c:	432e      	orrs	r6, r5
 800995e:	f021 0104 	bic.w	r1, r1, #4
 8009962:	6021      	str	r1, [r4, #0]
 8009964:	d04b      	beq.n	80099fe <_printf_i+0x1a6>
 8009966:	4616      	mov	r6, r2
 8009968:	fbb5 f1f3 	udiv	r1, r5, r3
 800996c:	fb03 5711 	mls	r7, r3, r1, r5
 8009970:	5dc7      	ldrb	r7, [r0, r7]
 8009972:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009976:	462f      	mov	r7, r5
 8009978:	42bb      	cmp	r3, r7
 800997a:	460d      	mov	r5, r1
 800997c:	d9f4      	bls.n	8009968 <_printf_i+0x110>
 800997e:	2b08      	cmp	r3, #8
 8009980:	d10b      	bne.n	800999a <_printf_i+0x142>
 8009982:	6823      	ldr	r3, [r4, #0]
 8009984:	07df      	lsls	r7, r3, #31
 8009986:	d508      	bpl.n	800999a <_printf_i+0x142>
 8009988:	6923      	ldr	r3, [r4, #16]
 800998a:	6861      	ldr	r1, [r4, #4]
 800998c:	4299      	cmp	r1, r3
 800998e:	bfde      	ittt	le
 8009990:	2330      	movle	r3, #48	@ 0x30
 8009992:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009996:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800999a:	1b92      	subs	r2, r2, r6
 800999c:	6122      	str	r2, [r4, #16]
 800999e:	f8cd a000 	str.w	sl, [sp]
 80099a2:	464b      	mov	r3, r9
 80099a4:	aa03      	add	r2, sp, #12
 80099a6:	4621      	mov	r1, r4
 80099a8:	4640      	mov	r0, r8
 80099aa:	f7ff fee7 	bl	800977c <_printf_common>
 80099ae:	3001      	adds	r0, #1
 80099b0:	d14a      	bne.n	8009a48 <_printf_i+0x1f0>
 80099b2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80099b6:	b004      	add	sp, #16
 80099b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099bc:	6823      	ldr	r3, [r4, #0]
 80099be:	f043 0320 	orr.w	r3, r3, #32
 80099c2:	6023      	str	r3, [r4, #0]
 80099c4:	4832      	ldr	r0, [pc, #200]	@ (8009a90 <_printf_i+0x238>)
 80099c6:	2778      	movs	r7, #120	@ 0x78
 80099c8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80099cc:	6823      	ldr	r3, [r4, #0]
 80099ce:	6831      	ldr	r1, [r6, #0]
 80099d0:	061f      	lsls	r7, r3, #24
 80099d2:	f851 5b04 	ldr.w	r5, [r1], #4
 80099d6:	d402      	bmi.n	80099de <_printf_i+0x186>
 80099d8:	065f      	lsls	r7, r3, #25
 80099da:	bf48      	it	mi
 80099dc:	b2ad      	uxthmi	r5, r5
 80099de:	6031      	str	r1, [r6, #0]
 80099e0:	07d9      	lsls	r1, r3, #31
 80099e2:	bf44      	itt	mi
 80099e4:	f043 0320 	orrmi.w	r3, r3, #32
 80099e8:	6023      	strmi	r3, [r4, #0]
 80099ea:	b11d      	cbz	r5, 80099f4 <_printf_i+0x19c>
 80099ec:	2310      	movs	r3, #16
 80099ee:	e7ad      	b.n	800994c <_printf_i+0xf4>
 80099f0:	4826      	ldr	r0, [pc, #152]	@ (8009a8c <_printf_i+0x234>)
 80099f2:	e7e9      	b.n	80099c8 <_printf_i+0x170>
 80099f4:	6823      	ldr	r3, [r4, #0]
 80099f6:	f023 0320 	bic.w	r3, r3, #32
 80099fa:	6023      	str	r3, [r4, #0]
 80099fc:	e7f6      	b.n	80099ec <_printf_i+0x194>
 80099fe:	4616      	mov	r6, r2
 8009a00:	e7bd      	b.n	800997e <_printf_i+0x126>
 8009a02:	6833      	ldr	r3, [r6, #0]
 8009a04:	6825      	ldr	r5, [r4, #0]
 8009a06:	6961      	ldr	r1, [r4, #20]
 8009a08:	1d18      	adds	r0, r3, #4
 8009a0a:	6030      	str	r0, [r6, #0]
 8009a0c:	062e      	lsls	r6, r5, #24
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	d501      	bpl.n	8009a16 <_printf_i+0x1be>
 8009a12:	6019      	str	r1, [r3, #0]
 8009a14:	e002      	b.n	8009a1c <_printf_i+0x1c4>
 8009a16:	0668      	lsls	r0, r5, #25
 8009a18:	d5fb      	bpl.n	8009a12 <_printf_i+0x1ba>
 8009a1a:	8019      	strh	r1, [r3, #0]
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	6123      	str	r3, [r4, #16]
 8009a20:	4616      	mov	r6, r2
 8009a22:	e7bc      	b.n	800999e <_printf_i+0x146>
 8009a24:	6833      	ldr	r3, [r6, #0]
 8009a26:	1d1a      	adds	r2, r3, #4
 8009a28:	6032      	str	r2, [r6, #0]
 8009a2a:	681e      	ldr	r6, [r3, #0]
 8009a2c:	6862      	ldr	r2, [r4, #4]
 8009a2e:	2100      	movs	r1, #0
 8009a30:	4630      	mov	r0, r6
 8009a32:	f7f6 fbd5 	bl	80001e0 <memchr>
 8009a36:	b108      	cbz	r0, 8009a3c <_printf_i+0x1e4>
 8009a38:	1b80      	subs	r0, r0, r6
 8009a3a:	6060      	str	r0, [r4, #4]
 8009a3c:	6863      	ldr	r3, [r4, #4]
 8009a3e:	6123      	str	r3, [r4, #16]
 8009a40:	2300      	movs	r3, #0
 8009a42:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009a46:	e7aa      	b.n	800999e <_printf_i+0x146>
 8009a48:	6923      	ldr	r3, [r4, #16]
 8009a4a:	4632      	mov	r2, r6
 8009a4c:	4649      	mov	r1, r9
 8009a4e:	4640      	mov	r0, r8
 8009a50:	47d0      	blx	sl
 8009a52:	3001      	adds	r0, #1
 8009a54:	d0ad      	beq.n	80099b2 <_printf_i+0x15a>
 8009a56:	6823      	ldr	r3, [r4, #0]
 8009a58:	079b      	lsls	r3, r3, #30
 8009a5a:	d413      	bmi.n	8009a84 <_printf_i+0x22c>
 8009a5c:	68e0      	ldr	r0, [r4, #12]
 8009a5e:	9b03      	ldr	r3, [sp, #12]
 8009a60:	4298      	cmp	r0, r3
 8009a62:	bfb8      	it	lt
 8009a64:	4618      	movlt	r0, r3
 8009a66:	e7a6      	b.n	80099b6 <_printf_i+0x15e>
 8009a68:	2301      	movs	r3, #1
 8009a6a:	4632      	mov	r2, r6
 8009a6c:	4649      	mov	r1, r9
 8009a6e:	4640      	mov	r0, r8
 8009a70:	47d0      	blx	sl
 8009a72:	3001      	adds	r0, #1
 8009a74:	d09d      	beq.n	80099b2 <_printf_i+0x15a>
 8009a76:	3501      	adds	r5, #1
 8009a78:	68e3      	ldr	r3, [r4, #12]
 8009a7a:	9903      	ldr	r1, [sp, #12]
 8009a7c:	1a5b      	subs	r3, r3, r1
 8009a7e:	42ab      	cmp	r3, r5
 8009a80:	dcf2      	bgt.n	8009a68 <_printf_i+0x210>
 8009a82:	e7eb      	b.n	8009a5c <_printf_i+0x204>
 8009a84:	2500      	movs	r5, #0
 8009a86:	f104 0619 	add.w	r6, r4, #25
 8009a8a:	e7f5      	b.n	8009a78 <_printf_i+0x220>
 8009a8c:	0800ab19 	.word	0x0800ab19
 8009a90:	0800ab2a 	.word	0x0800ab2a

08009a94 <__malloc_lock>:
 8009a94:	4801      	ldr	r0, [pc, #4]	@ (8009a9c <__malloc_lock+0x8>)
 8009a96:	f7ff bbbf 	b.w	8009218 <__retarget_lock_acquire_recursive>
 8009a9a:	bf00      	nop
 8009a9c:	20004e2c 	.word	0x20004e2c

08009aa0 <__malloc_unlock>:
 8009aa0:	4801      	ldr	r0, [pc, #4]	@ (8009aa8 <__malloc_unlock+0x8>)
 8009aa2:	f7ff bbba 	b.w	800921a <__retarget_lock_release_recursive>
 8009aa6:	bf00      	nop
 8009aa8:	20004e2c 	.word	0x20004e2c

08009aac <_realloc_r>:
 8009aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ab0:	4607      	mov	r7, r0
 8009ab2:	4614      	mov	r4, r2
 8009ab4:	460d      	mov	r5, r1
 8009ab6:	b921      	cbnz	r1, 8009ac2 <_realloc_r+0x16>
 8009ab8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009abc:	4611      	mov	r1, r2
 8009abe:	f7ff bddd 	b.w	800967c <_malloc_r>
 8009ac2:	b92a      	cbnz	r2, 8009ad0 <_realloc_r+0x24>
 8009ac4:	f7ff fc16 	bl	80092f4 <_free_r>
 8009ac8:	4625      	mov	r5, r4
 8009aca:	4628      	mov	r0, r5
 8009acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ad0:	f000 f844 	bl	8009b5c <_malloc_usable_size_r>
 8009ad4:	4284      	cmp	r4, r0
 8009ad6:	4606      	mov	r6, r0
 8009ad8:	d802      	bhi.n	8009ae0 <_realloc_r+0x34>
 8009ada:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009ade:	d8f4      	bhi.n	8009aca <_realloc_r+0x1e>
 8009ae0:	4621      	mov	r1, r4
 8009ae2:	4638      	mov	r0, r7
 8009ae4:	f7ff fdca 	bl	800967c <_malloc_r>
 8009ae8:	4680      	mov	r8, r0
 8009aea:	b908      	cbnz	r0, 8009af0 <_realloc_r+0x44>
 8009aec:	4645      	mov	r5, r8
 8009aee:	e7ec      	b.n	8009aca <_realloc_r+0x1e>
 8009af0:	42b4      	cmp	r4, r6
 8009af2:	4622      	mov	r2, r4
 8009af4:	4629      	mov	r1, r5
 8009af6:	bf28      	it	cs
 8009af8:	4632      	movcs	r2, r6
 8009afa:	f7ff fbed 	bl	80092d8 <memcpy>
 8009afe:	4629      	mov	r1, r5
 8009b00:	4638      	mov	r0, r7
 8009b02:	f7ff fbf7 	bl	80092f4 <_free_r>
 8009b06:	e7f1      	b.n	8009aec <_realloc_r+0x40>

08009b08 <memmove>:
 8009b08:	4288      	cmp	r0, r1
 8009b0a:	b510      	push	{r4, lr}
 8009b0c:	eb01 0402 	add.w	r4, r1, r2
 8009b10:	d902      	bls.n	8009b18 <memmove+0x10>
 8009b12:	4284      	cmp	r4, r0
 8009b14:	4623      	mov	r3, r4
 8009b16:	d807      	bhi.n	8009b28 <memmove+0x20>
 8009b18:	1e43      	subs	r3, r0, #1
 8009b1a:	42a1      	cmp	r1, r4
 8009b1c:	d008      	beq.n	8009b30 <memmove+0x28>
 8009b1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009b22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009b26:	e7f8      	b.n	8009b1a <memmove+0x12>
 8009b28:	4402      	add	r2, r0
 8009b2a:	4601      	mov	r1, r0
 8009b2c:	428a      	cmp	r2, r1
 8009b2e:	d100      	bne.n	8009b32 <memmove+0x2a>
 8009b30:	bd10      	pop	{r4, pc}
 8009b32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009b36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009b3a:	e7f7      	b.n	8009b2c <memmove+0x24>

08009b3c <_sbrk_r>:
 8009b3c:	b538      	push	{r3, r4, r5, lr}
 8009b3e:	4d06      	ldr	r5, [pc, #24]	@ (8009b58 <_sbrk_r+0x1c>)
 8009b40:	2300      	movs	r3, #0
 8009b42:	4604      	mov	r4, r0
 8009b44:	4608      	mov	r0, r1
 8009b46:	602b      	str	r3, [r5, #0]
 8009b48:	f7f8 fd34 	bl	80025b4 <_sbrk>
 8009b4c:	1c43      	adds	r3, r0, #1
 8009b4e:	d102      	bne.n	8009b56 <_sbrk_r+0x1a>
 8009b50:	682b      	ldr	r3, [r5, #0]
 8009b52:	b103      	cbz	r3, 8009b56 <_sbrk_r+0x1a>
 8009b54:	6023      	str	r3, [r4, #0]
 8009b56:	bd38      	pop	{r3, r4, r5, pc}
 8009b58:	20004e30 	.word	0x20004e30

08009b5c <_malloc_usable_size_r>:
 8009b5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b60:	1f18      	subs	r0, r3, #4
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	bfbc      	itt	lt
 8009b66:	580b      	ldrlt	r3, [r1, r0]
 8009b68:	18c0      	addlt	r0, r0, r3
 8009b6a:	4770      	bx	lr

08009b6c <pow>:
 8009b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b6e:	ed2d 8b02 	vpush	{d8}
 8009b72:	eeb0 8a40 	vmov.f32	s16, s0
 8009b76:	eef0 8a60 	vmov.f32	s17, s1
 8009b7a:	ec55 4b11 	vmov	r4, r5, d1
 8009b7e:	f000 f873 	bl	8009c68 <__ieee754_pow>
 8009b82:	4622      	mov	r2, r4
 8009b84:	462b      	mov	r3, r5
 8009b86:	4620      	mov	r0, r4
 8009b88:	4629      	mov	r1, r5
 8009b8a:	ec57 6b10 	vmov	r6, r7, d0
 8009b8e:	f7f6 ffcd 	bl	8000b2c <__aeabi_dcmpun>
 8009b92:	2800      	cmp	r0, #0
 8009b94:	d13b      	bne.n	8009c0e <pow+0xa2>
 8009b96:	ec51 0b18 	vmov	r0, r1, d8
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	f7f6 ff93 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ba2:	b1b8      	cbz	r0, 8009bd4 <pow+0x68>
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	4620      	mov	r0, r4
 8009baa:	4629      	mov	r1, r5
 8009bac:	f7f6 ff8c 	bl	8000ac8 <__aeabi_dcmpeq>
 8009bb0:	2800      	cmp	r0, #0
 8009bb2:	d146      	bne.n	8009c42 <pow+0xd6>
 8009bb4:	ec45 4b10 	vmov	d0, r4, r5
 8009bb8:	f000 f848 	bl	8009c4c <finite>
 8009bbc:	b338      	cbz	r0, 8009c0e <pow+0xa2>
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	4620      	mov	r0, r4
 8009bc4:	4629      	mov	r1, r5
 8009bc6:	f7f6 ff89 	bl	8000adc <__aeabi_dcmplt>
 8009bca:	b300      	cbz	r0, 8009c0e <pow+0xa2>
 8009bcc:	f7ff fafa 	bl	80091c4 <__errno>
 8009bd0:	2322      	movs	r3, #34	@ 0x22
 8009bd2:	e01b      	b.n	8009c0c <pow+0xa0>
 8009bd4:	ec47 6b10 	vmov	d0, r6, r7
 8009bd8:	f000 f838 	bl	8009c4c <finite>
 8009bdc:	b9e0      	cbnz	r0, 8009c18 <pow+0xac>
 8009bde:	eeb0 0a48 	vmov.f32	s0, s16
 8009be2:	eef0 0a68 	vmov.f32	s1, s17
 8009be6:	f000 f831 	bl	8009c4c <finite>
 8009bea:	b1a8      	cbz	r0, 8009c18 <pow+0xac>
 8009bec:	ec45 4b10 	vmov	d0, r4, r5
 8009bf0:	f000 f82c 	bl	8009c4c <finite>
 8009bf4:	b180      	cbz	r0, 8009c18 <pow+0xac>
 8009bf6:	4632      	mov	r2, r6
 8009bf8:	463b      	mov	r3, r7
 8009bfa:	4630      	mov	r0, r6
 8009bfc:	4639      	mov	r1, r7
 8009bfe:	f7f6 ff95 	bl	8000b2c <__aeabi_dcmpun>
 8009c02:	2800      	cmp	r0, #0
 8009c04:	d0e2      	beq.n	8009bcc <pow+0x60>
 8009c06:	f7ff fadd 	bl	80091c4 <__errno>
 8009c0a:	2321      	movs	r3, #33	@ 0x21
 8009c0c:	6003      	str	r3, [r0, #0]
 8009c0e:	ecbd 8b02 	vpop	{d8}
 8009c12:	ec47 6b10 	vmov	d0, r6, r7
 8009c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c18:	2200      	movs	r2, #0
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	4630      	mov	r0, r6
 8009c1e:	4639      	mov	r1, r7
 8009c20:	f7f6 ff52 	bl	8000ac8 <__aeabi_dcmpeq>
 8009c24:	2800      	cmp	r0, #0
 8009c26:	d0f2      	beq.n	8009c0e <pow+0xa2>
 8009c28:	eeb0 0a48 	vmov.f32	s0, s16
 8009c2c:	eef0 0a68 	vmov.f32	s1, s17
 8009c30:	f000 f80c 	bl	8009c4c <finite>
 8009c34:	2800      	cmp	r0, #0
 8009c36:	d0ea      	beq.n	8009c0e <pow+0xa2>
 8009c38:	ec45 4b10 	vmov	d0, r4, r5
 8009c3c:	f000 f806 	bl	8009c4c <finite>
 8009c40:	e7c3      	b.n	8009bca <pow+0x5e>
 8009c42:	4f01      	ldr	r7, [pc, #4]	@ (8009c48 <pow+0xdc>)
 8009c44:	2600      	movs	r6, #0
 8009c46:	e7e2      	b.n	8009c0e <pow+0xa2>
 8009c48:	3ff00000 	.word	0x3ff00000

08009c4c <finite>:
 8009c4c:	b082      	sub	sp, #8
 8009c4e:	ed8d 0b00 	vstr	d0, [sp]
 8009c52:	9801      	ldr	r0, [sp, #4]
 8009c54:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8009c58:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8009c5c:	0fc0      	lsrs	r0, r0, #31
 8009c5e:	b002      	add	sp, #8
 8009c60:	4770      	bx	lr
 8009c62:	0000      	movs	r0, r0
 8009c64:	0000      	movs	r0, r0
	...

08009c68 <__ieee754_pow>:
 8009c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c6c:	b091      	sub	sp, #68	@ 0x44
 8009c6e:	ed8d 1b00 	vstr	d1, [sp]
 8009c72:	e9dd 1900 	ldrd	r1, r9, [sp]
 8009c76:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8009c7a:	ea5a 0001 	orrs.w	r0, sl, r1
 8009c7e:	ec57 6b10 	vmov	r6, r7, d0
 8009c82:	d113      	bne.n	8009cac <__ieee754_pow+0x44>
 8009c84:	19b3      	adds	r3, r6, r6
 8009c86:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8009c8a:	4152      	adcs	r2, r2
 8009c8c:	4298      	cmp	r0, r3
 8009c8e:	4b9a      	ldr	r3, [pc, #616]	@ (8009ef8 <__ieee754_pow+0x290>)
 8009c90:	4193      	sbcs	r3, r2
 8009c92:	f080 84ee 	bcs.w	800a672 <__ieee754_pow+0xa0a>
 8009c96:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c9a:	4630      	mov	r0, r6
 8009c9c:	4639      	mov	r1, r7
 8009c9e:	f7f6 faf5 	bl	800028c <__adddf3>
 8009ca2:	ec41 0b10 	vmov	d0, r0, r1
 8009ca6:	b011      	add	sp, #68	@ 0x44
 8009ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cac:	4a93      	ldr	r2, [pc, #588]	@ (8009efc <__ieee754_pow+0x294>)
 8009cae:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 8009cb2:	4295      	cmp	r5, r2
 8009cb4:	46b8      	mov	r8, r7
 8009cb6:	4633      	mov	r3, r6
 8009cb8:	d80a      	bhi.n	8009cd0 <__ieee754_pow+0x68>
 8009cba:	d104      	bne.n	8009cc6 <__ieee754_pow+0x5e>
 8009cbc:	2e00      	cmp	r6, #0
 8009cbe:	d1ea      	bne.n	8009c96 <__ieee754_pow+0x2e>
 8009cc0:	45aa      	cmp	sl, r5
 8009cc2:	d8e8      	bhi.n	8009c96 <__ieee754_pow+0x2e>
 8009cc4:	e001      	b.n	8009cca <__ieee754_pow+0x62>
 8009cc6:	4592      	cmp	sl, r2
 8009cc8:	d802      	bhi.n	8009cd0 <__ieee754_pow+0x68>
 8009cca:	4592      	cmp	sl, r2
 8009ccc:	d10f      	bne.n	8009cee <__ieee754_pow+0x86>
 8009cce:	b171      	cbz	r1, 8009cee <__ieee754_pow+0x86>
 8009cd0:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8009cd4:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8009cd8:	ea58 0803 	orrs.w	r8, r8, r3
 8009cdc:	d1db      	bne.n	8009c96 <__ieee754_pow+0x2e>
 8009cde:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009ce2:	18db      	adds	r3, r3, r3
 8009ce4:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8009ce8:	4152      	adcs	r2, r2
 8009cea:	4598      	cmp	r8, r3
 8009cec:	e7cf      	b.n	8009c8e <__ieee754_pow+0x26>
 8009cee:	f1b8 0f00 	cmp.w	r8, #0
 8009cf2:	46ab      	mov	fp, r5
 8009cf4:	da43      	bge.n	8009d7e <__ieee754_pow+0x116>
 8009cf6:	4a82      	ldr	r2, [pc, #520]	@ (8009f00 <__ieee754_pow+0x298>)
 8009cf8:	4592      	cmp	sl, r2
 8009cfa:	d856      	bhi.n	8009daa <__ieee754_pow+0x142>
 8009cfc:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8009d00:	4592      	cmp	sl, r2
 8009d02:	f240 84c5 	bls.w	800a690 <__ieee754_pow+0xa28>
 8009d06:	ea4f 522a 	mov.w	r2, sl, asr #20
 8009d0a:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8009d0e:	2a14      	cmp	r2, #20
 8009d10:	dd18      	ble.n	8009d44 <__ieee754_pow+0xdc>
 8009d12:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8009d16:	fa21 f402 	lsr.w	r4, r1, r2
 8009d1a:	fa04 f202 	lsl.w	r2, r4, r2
 8009d1e:	428a      	cmp	r2, r1
 8009d20:	f040 84b6 	bne.w	800a690 <__ieee754_pow+0xa28>
 8009d24:	f004 0401 	and.w	r4, r4, #1
 8009d28:	f1c4 0402 	rsb	r4, r4, #2
 8009d2c:	2900      	cmp	r1, #0
 8009d2e:	d159      	bne.n	8009de4 <__ieee754_pow+0x17c>
 8009d30:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8009d34:	d148      	bne.n	8009dc8 <__ieee754_pow+0x160>
 8009d36:	4632      	mov	r2, r6
 8009d38:	463b      	mov	r3, r7
 8009d3a:	4630      	mov	r0, r6
 8009d3c:	4639      	mov	r1, r7
 8009d3e:	f7f6 fc5b 	bl	80005f8 <__aeabi_dmul>
 8009d42:	e7ae      	b.n	8009ca2 <__ieee754_pow+0x3a>
 8009d44:	2900      	cmp	r1, #0
 8009d46:	d14c      	bne.n	8009de2 <__ieee754_pow+0x17a>
 8009d48:	f1c2 0214 	rsb	r2, r2, #20
 8009d4c:	fa4a f402 	asr.w	r4, sl, r2
 8009d50:	fa04 f202 	lsl.w	r2, r4, r2
 8009d54:	4552      	cmp	r2, sl
 8009d56:	f040 8498 	bne.w	800a68a <__ieee754_pow+0xa22>
 8009d5a:	f004 0401 	and.w	r4, r4, #1
 8009d5e:	f1c4 0402 	rsb	r4, r4, #2
 8009d62:	4a68      	ldr	r2, [pc, #416]	@ (8009f04 <__ieee754_pow+0x29c>)
 8009d64:	4592      	cmp	sl, r2
 8009d66:	d1e3      	bne.n	8009d30 <__ieee754_pow+0xc8>
 8009d68:	f1b9 0f00 	cmp.w	r9, #0
 8009d6c:	f280 8489 	bge.w	800a682 <__ieee754_pow+0xa1a>
 8009d70:	4964      	ldr	r1, [pc, #400]	@ (8009f04 <__ieee754_pow+0x29c>)
 8009d72:	4632      	mov	r2, r6
 8009d74:	463b      	mov	r3, r7
 8009d76:	2000      	movs	r0, #0
 8009d78:	f7f6 fd68 	bl	800084c <__aeabi_ddiv>
 8009d7c:	e791      	b.n	8009ca2 <__ieee754_pow+0x3a>
 8009d7e:	2400      	movs	r4, #0
 8009d80:	bb81      	cbnz	r1, 8009de4 <__ieee754_pow+0x17c>
 8009d82:	4a5e      	ldr	r2, [pc, #376]	@ (8009efc <__ieee754_pow+0x294>)
 8009d84:	4592      	cmp	sl, r2
 8009d86:	d1ec      	bne.n	8009d62 <__ieee754_pow+0xfa>
 8009d88:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 8009d8c:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8009d90:	431a      	orrs	r2, r3
 8009d92:	f000 846e 	beq.w	800a672 <__ieee754_pow+0xa0a>
 8009d96:	4b5c      	ldr	r3, [pc, #368]	@ (8009f08 <__ieee754_pow+0x2a0>)
 8009d98:	429d      	cmp	r5, r3
 8009d9a:	d908      	bls.n	8009dae <__ieee754_pow+0x146>
 8009d9c:	f1b9 0f00 	cmp.w	r9, #0
 8009da0:	f280 846b 	bge.w	800a67a <__ieee754_pow+0xa12>
 8009da4:	2000      	movs	r0, #0
 8009da6:	2100      	movs	r1, #0
 8009da8:	e77b      	b.n	8009ca2 <__ieee754_pow+0x3a>
 8009daa:	2402      	movs	r4, #2
 8009dac:	e7e8      	b.n	8009d80 <__ieee754_pow+0x118>
 8009dae:	f1b9 0f00 	cmp.w	r9, #0
 8009db2:	f04f 0000 	mov.w	r0, #0
 8009db6:	f04f 0100 	mov.w	r1, #0
 8009dba:	f6bf af72 	bge.w	8009ca2 <__ieee754_pow+0x3a>
 8009dbe:	e9dd 0300 	ldrd	r0, r3, [sp]
 8009dc2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8009dc6:	e76c      	b.n	8009ca2 <__ieee754_pow+0x3a>
 8009dc8:	4a50      	ldr	r2, [pc, #320]	@ (8009f0c <__ieee754_pow+0x2a4>)
 8009dca:	4591      	cmp	r9, r2
 8009dcc:	d10a      	bne.n	8009de4 <__ieee754_pow+0x17c>
 8009dce:	f1b8 0f00 	cmp.w	r8, #0
 8009dd2:	db07      	blt.n	8009de4 <__ieee754_pow+0x17c>
 8009dd4:	ec47 6b10 	vmov	d0, r6, r7
 8009dd8:	b011      	add	sp, #68	@ 0x44
 8009dda:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dde:	f000 bd4d 	b.w	800a87c <__ieee754_sqrt>
 8009de2:	2400      	movs	r4, #0
 8009de4:	ec47 6b10 	vmov	d0, r6, r7
 8009de8:	9302      	str	r3, [sp, #8]
 8009dea:	f000 fcc5 	bl	800a778 <fabs>
 8009dee:	9b02      	ldr	r3, [sp, #8]
 8009df0:	ec51 0b10 	vmov	r0, r1, d0
 8009df4:	bb43      	cbnz	r3, 8009e48 <__ieee754_pow+0x1e0>
 8009df6:	4b43      	ldr	r3, [pc, #268]	@ (8009f04 <__ieee754_pow+0x29c>)
 8009df8:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 8009dfc:	429a      	cmp	r2, r3
 8009dfe:	d000      	beq.n	8009e02 <__ieee754_pow+0x19a>
 8009e00:	bb15      	cbnz	r5, 8009e48 <__ieee754_pow+0x1e0>
 8009e02:	f1b9 0f00 	cmp.w	r9, #0
 8009e06:	da05      	bge.n	8009e14 <__ieee754_pow+0x1ac>
 8009e08:	4602      	mov	r2, r0
 8009e0a:	460b      	mov	r3, r1
 8009e0c:	2000      	movs	r0, #0
 8009e0e:	493d      	ldr	r1, [pc, #244]	@ (8009f04 <__ieee754_pow+0x29c>)
 8009e10:	f7f6 fd1c 	bl	800084c <__aeabi_ddiv>
 8009e14:	f1b8 0f00 	cmp.w	r8, #0
 8009e18:	f6bf af43 	bge.w	8009ca2 <__ieee754_pow+0x3a>
 8009e1c:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8009e20:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8009e24:	4325      	orrs	r5, r4
 8009e26:	d108      	bne.n	8009e3a <__ieee754_pow+0x1d2>
 8009e28:	4602      	mov	r2, r0
 8009e2a:	460b      	mov	r3, r1
 8009e2c:	4610      	mov	r0, r2
 8009e2e:	4619      	mov	r1, r3
 8009e30:	f7f6 fa2a 	bl	8000288 <__aeabi_dsub>
 8009e34:	4602      	mov	r2, r0
 8009e36:	460b      	mov	r3, r1
 8009e38:	e79e      	b.n	8009d78 <__ieee754_pow+0x110>
 8009e3a:	2c01      	cmp	r4, #1
 8009e3c:	f47f af31 	bne.w	8009ca2 <__ieee754_pow+0x3a>
 8009e40:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009e44:	4619      	mov	r1, r3
 8009e46:	e72c      	b.n	8009ca2 <__ieee754_pow+0x3a>
 8009e48:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 8009e4c:	3b01      	subs	r3, #1
 8009e4e:	ea53 0204 	orrs.w	r2, r3, r4
 8009e52:	d102      	bne.n	8009e5a <__ieee754_pow+0x1f2>
 8009e54:	4632      	mov	r2, r6
 8009e56:	463b      	mov	r3, r7
 8009e58:	e7e8      	b.n	8009e2c <__ieee754_pow+0x1c4>
 8009e5a:	3c01      	subs	r4, #1
 8009e5c:	431c      	orrs	r4, r3
 8009e5e:	d016      	beq.n	8009e8e <__ieee754_pow+0x226>
 8009e60:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009ee8 <__ieee754_pow+0x280>
 8009e64:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8009e68:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009e6c:	f240 8110 	bls.w	800a090 <__ieee754_pow+0x428>
 8009e70:	4b27      	ldr	r3, [pc, #156]	@ (8009f10 <__ieee754_pow+0x2a8>)
 8009e72:	459a      	cmp	sl, r3
 8009e74:	4b24      	ldr	r3, [pc, #144]	@ (8009f08 <__ieee754_pow+0x2a0>)
 8009e76:	d916      	bls.n	8009ea6 <__ieee754_pow+0x23e>
 8009e78:	429d      	cmp	r5, r3
 8009e7a:	d80b      	bhi.n	8009e94 <__ieee754_pow+0x22c>
 8009e7c:	f1b9 0f00 	cmp.w	r9, #0
 8009e80:	da0b      	bge.n	8009e9a <__ieee754_pow+0x232>
 8009e82:	2000      	movs	r0, #0
 8009e84:	b011      	add	sp, #68	@ 0x44
 8009e86:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e8a:	f000 bc6d 	b.w	800a768 <__math_oflow>
 8009e8e:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 8009ef0 <__ieee754_pow+0x288>
 8009e92:	e7e7      	b.n	8009e64 <__ieee754_pow+0x1fc>
 8009e94:	f1b9 0f00 	cmp.w	r9, #0
 8009e98:	dcf3      	bgt.n	8009e82 <__ieee754_pow+0x21a>
 8009e9a:	2000      	movs	r0, #0
 8009e9c:	b011      	add	sp, #68	@ 0x44
 8009e9e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ea2:	f000 bc59 	b.w	800a758 <__math_uflow>
 8009ea6:	429d      	cmp	r5, r3
 8009ea8:	d20c      	bcs.n	8009ec4 <__ieee754_pow+0x25c>
 8009eaa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009eae:	2200      	movs	r2, #0
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	f7f6 fe13 	bl	8000adc <__aeabi_dcmplt>
 8009eb6:	3800      	subs	r0, #0
 8009eb8:	bf18      	it	ne
 8009eba:	2001      	movne	r0, #1
 8009ebc:	f1b9 0f00 	cmp.w	r9, #0
 8009ec0:	daec      	bge.n	8009e9c <__ieee754_pow+0x234>
 8009ec2:	e7df      	b.n	8009e84 <__ieee754_pow+0x21c>
 8009ec4:	4b0f      	ldr	r3, [pc, #60]	@ (8009f04 <__ieee754_pow+0x29c>)
 8009ec6:	429d      	cmp	r5, r3
 8009ec8:	f04f 0200 	mov.w	r2, #0
 8009ecc:	d922      	bls.n	8009f14 <__ieee754_pow+0x2ac>
 8009ece:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	f7f6 fe02 	bl	8000adc <__aeabi_dcmplt>
 8009ed8:	3800      	subs	r0, #0
 8009eda:	bf18      	it	ne
 8009edc:	2001      	movne	r0, #1
 8009ede:	f1b9 0f00 	cmp.w	r9, #0
 8009ee2:	dccf      	bgt.n	8009e84 <__ieee754_pow+0x21c>
 8009ee4:	e7da      	b.n	8009e9c <__ieee754_pow+0x234>
 8009ee6:	bf00      	nop
 8009ee8:	00000000 	.word	0x00000000
 8009eec:	3ff00000 	.word	0x3ff00000
 8009ef0:	00000000 	.word	0x00000000
 8009ef4:	bff00000 	.word	0xbff00000
 8009ef8:	fff00000 	.word	0xfff00000
 8009efc:	7ff00000 	.word	0x7ff00000
 8009f00:	433fffff 	.word	0x433fffff
 8009f04:	3ff00000 	.word	0x3ff00000
 8009f08:	3fefffff 	.word	0x3fefffff
 8009f0c:	3fe00000 	.word	0x3fe00000
 8009f10:	43f00000 	.word	0x43f00000
 8009f14:	4b5a      	ldr	r3, [pc, #360]	@ (800a080 <__ieee754_pow+0x418>)
 8009f16:	f7f6 f9b7 	bl	8000288 <__aeabi_dsub>
 8009f1a:	a351      	add	r3, pc, #324	@ (adr r3, 800a060 <__ieee754_pow+0x3f8>)
 8009f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f20:	4604      	mov	r4, r0
 8009f22:	460d      	mov	r5, r1
 8009f24:	f7f6 fb68 	bl	80005f8 <__aeabi_dmul>
 8009f28:	a34f      	add	r3, pc, #316	@ (adr r3, 800a068 <__ieee754_pow+0x400>)
 8009f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f2e:	4606      	mov	r6, r0
 8009f30:	460f      	mov	r7, r1
 8009f32:	4620      	mov	r0, r4
 8009f34:	4629      	mov	r1, r5
 8009f36:	f7f6 fb5f 	bl	80005f8 <__aeabi_dmul>
 8009f3a:	4b52      	ldr	r3, [pc, #328]	@ (800a084 <__ieee754_pow+0x41c>)
 8009f3c:	4682      	mov	sl, r0
 8009f3e:	468b      	mov	fp, r1
 8009f40:	2200      	movs	r2, #0
 8009f42:	4620      	mov	r0, r4
 8009f44:	4629      	mov	r1, r5
 8009f46:	f7f6 fb57 	bl	80005f8 <__aeabi_dmul>
 8009f4a:	4602      	mov	r2, r0
 8009f4c:	460b      	mov	r3, r1
 8009f4e:	a148      	add	r1, pc, #288	@ (adr r1, 800a070 <__ieee754_pow+0x408>)
 8009f50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f54:	f7f6 f998 	bl	8000288 <__aeabi_dsub>
 8009f58:	4622      	mov	r2, r4
 8009f5a:	462b      	mov	r3, r5
 8009f5c:	f7f6 fb4c 	bl	80005f8 <__aeabi_dmul>
 8009f60:	4602      	mov	r2, r0
 8009f62:	460b      	mov	r3, r1
 8009f64:	2000      	movs	r0, #0
 8009f66:	4948      	ldr	r1, [pc, #288]	@ (800a088 <__ieee754_pow+0x420>)
 8009f68:	f7f6 f98e 	bl	8000288 <__aeabi_dsub>
 8009f6c:	4622      	mov	r2, r4
 8009f6e:	4680      	mov	r8, r0
 8009f70:	4689      	mov	r9, r1
 8009f72:	462b      	mov	r3, r5
 8009f74:	4620      	mov	r0, r4
 8009f76:	4629      	mov	r1, r5
 8009f78:	f7f6 fb3e 	bl	80005f8 <__aeabi_dmul>
 8009f7c:	4602      	mov	r2, r0
 8009f7e:	460b      	mov	r3, r1
 8009f80:	4640      	mov	r0, r8
 8009f82:	4649      	mov	r1, r9
 8009f84:	f7f6 fb38 	bl	80005f8 <__aeabi_dmul>
 8009f88:	a33b      	add	r3, pc, #236	@ (adr r3, 800a078 <__ieee754_pow+0x410>)
 8009f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f8e:	f7f6 fb33 	bl	80005f8 <__aeabi_dmul>
 8009f92:	4602      	mov	r2, r0
 8009f94:	460b      	mov	r3, r1
 8009f96:	4650      	mov	r0, sl
 8009f98:	4659      	mov	r1, fp
 8009f9a:	f7f6 f975 	bl	8000288 <__aeabi_dsub>
 8009f9e:	4602      	mov	r2, r0
 8009fa0:	460b      	mov	r3, r1
 8009fa2:	4680      	mov	r8, r0
 8009fa4:	4689      	mov	r9, r1
 8009fa6:	4630      	mov	r0, r6
 8009fa8:	4639      	mov	r1, r7
 8009faa:	f7f6 f96f 	bl	800028c <__adddf3>
 8009fae:	2400      	movs	r4, #0
 8009fb0:	4632      	mov	r2, r6
 8009fb2:	463b      	mov	r3, r7
 8009fb4:	4620      	mov	r0, r4
 8009fb6:	460d      	mov	r5, r1
 8009fb8:	f7f6 f966 	bl	8000288 <__aeabi_dsub>
 8009fbc:	4602      	mov	r2, r0
 8009fbe:	460b      	mov	r3, r1
 8009fc0:	4640      	mov	r0, r8
 8009fc2:	4649      	mov	r1, r9
 8009fc4:	f7f6 f960 	bl	8000288 <__aeabi_dsub>
 8009fc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009fcc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	9304      	str	r3, [sp, #16]
 8009fd4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8009fd8:	4606      	mov	r6, r0
 8009fda:	460f      	mov	r7, r1
 8009fdc:	465b      	mov	r3, fp
 8009fde:	4652      	mov	r2, sl
 8009fe0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009fe4:	f7f6 f950 	bl	8000288 <__aeabi_dsub>
 8009fe8:	4622      	mov	r2, r4
 8009fea:	462b      	mov	r3, r5
 8009fec:	f7f6 fb04 	bl	80005f8 <__aeabi_dmul>
 8009ff0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ff4:	4680      	mov	r8, r0
 8009ff6:	4689      	mov	r9, r1
 8009ff8:	4630      	mov	r0, r6
 8009ffa:	4639      	mov	r1, r7
 8009ffc:	f7f6 fafc 	bl	80005f8 <__aeabi_dmul>
 800a000:	4602      	mov	r2, r0
 800a002:	460b      	mov	r3, r1
 800a004:	4640      	mov	r0, r8
 800a006:	4649      	mov	r1, r9
 800a008:	f7f6 f940 	bl	800028c <__adddf3>
 800a00c:	465b      	mov	r3, fp
 800a00e:	4606      	mov	r6, r0
 800a010:	460f      	mov	r7, r1
 800a012:	4652      	mov	r2, sl
 800a014:	4620      	mov	r0, r4
 800a016:	4629      	mov	r1, r5
 800a018:	f7f6 faee 	bl	80005f8 <__aeabi_dmul>
 800a01c:	460b      	mov	r3, r1
 800a01e:	4602      	mov	r2, r0
 800a020:	4680      	mov	r8, r0
 800a022:	4689      	mov	r9, r1
 800a024:	4630      	mov	r0, r6
 800a026:	4639      	mov	r1, r7
 800a028:	f7f6 f930 	bl	800028c <__adddf3>
 800a02c:	4b17      	ldr	r3, [pc, #92]	@ (800a08c <__ieee754_pow+0x424>)
 800a02e:	4299      	cmp	r1, r3
 800a030:	4604      	mov	r4, r0
 800a032:	460d      	mov	r5, r1
 800a034:	468b      	mov	fp, r1
 800a036:	f340 820b 	ble.w	800a450 <__ieee754_pow+0x7e8>
 800a03a:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800a03e:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800a042:	4303      	orrs	r3, r0
 800a044:	f000 81ea 	beq.w	800a41c <__ieee754_pow+0x7b4>
 800a048:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a04c:	2200      	movs	r2, #0
 800a04e:	2300      	movs	r3, #0
 800a050:	f7f6 fd44 	bl	8000adc <__aeabi_dcmplt>
 800a054:	3800      	subs	r0, #0
 800a056:	bf18      	it	ne
 800a058:	2001      	movne	r0, #1
 800a05a:	e713      	b.n	8009e84 <__ieee754_pow+0x21c>
 800a05c:	f3af 8000 	nop.w
 800a060:	60000000 	.word	0x60000000
 800a064:	3ff71547 	.word	0x3ff71547
 800a068:	f85ddf44 	.word	0xf85ddf44
 800a06c:	3e54ae0b 	.word	0x3e54ae0b
 800a070:	55555555 	.word	0x55555555
 800a074:	3fd55555 	.word	0x3fd55555
 800a078:	652b82fe 	.word	0x652b82fe
 800a07c:	3ff71547 	.word	0x3ff71547
 800a080:	3ff00000 	.word	0x3ff00000
 800a084:	3fd00000 	.word	0x3fd00000
 800a088:	3fe00000 	.word	0x3fe00000
 800a08c:	408fffff 	.word	0x408fffff
 800a090:	4bd5      	ldr	r3, [pc, #852]	@ (800a3e8 <__ieee754_pow+0x780>)
 800a092:	ea08 0303 	and.w	r3, r8, r3
 800a096:	2200      	movs	r2, #0
 800a098:	b92b      	cbnz	r3, 800a0a6 <__ieee754_pow+0x43e>
 800a09a:	4bd4      	ldr	r3, [pc, #848]	@ (800a3ec <__ieee754_pow+0x784>)
 800a09c:	f7f6 faac 	bl	80005f8 <__aeabi_dmul>
 800a0a0:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800a0a4:	468b      	mov	fp, r1
 800a0a6:	ea4f 532b 	mov.w	r3, fp, asr #20
 800a0aa:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800a0ae:	4413      	add	r3, r2
 800a0b0:	930a      	str	r3, [sp, #40]	@ 0x28
 800a0b2:	4bcf      	ldr	r3, [pc, #828]	@ (800a3f0 <__ieee754_pow+0x788>)
 800a0b4:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800a0b8:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800a0bc:	459b      	cmp	fp, r3
 800a0be:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a0c2:	dd08      	ble.n	800a0d6 <__ieee754_pow+0x46e>
 800a0c4:	4bcb      	ldr	r3, [pc, #812]	@ (800a3f4 <__ieee754_pow+0x78c>)
 800a0c6:	459b      	cmp	fp, r3
 800a0c8:	f340 81a5 	ble.w	800a416 <__ieee754_pow+0x7ae>
 800a0cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a0ce:	3301      	adds	r3, #1
 800a0d0:	930a      	str	r3, [sp, #40]	@ 0x28
 800a0d2:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800a0d6:	f04f 0a00 	mov.w	sl, #0
 800a0da:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800a0de:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a0e0:	4bc5      	ldr	r3, [pc, #788]	@ (800a3f8 <__ieee754_pow+0x790>)
 800a0e2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a0e6:	ed93 7b00 	vldr	d7, [r3]
 800a0ea:	4629      	mov	r1, r5
 800a0ec:	ec53 2b17 	vmov	r2, r3, d7
 800a0f0:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a0f4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a0f8:	f7f6 f8c6 	bl	8000288 <__aeabi_dsub>
 800a0fc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a100:	4606      	mov	r6, r0
 800a102:	460f      	mov	r7, r1
 800a104:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a108:	f7f6 f8c0 	bl	800028c <__adddf3>
 800a10c:	4602      	mov	r2, r0
 800a10e:	460b      	mov	r3, r1
 800a110:	2000      	movs	r0, #0
 800a112:	49ba      	ldr	r1, [pc, #744]	@ (800a3fc <__ieee754_pow+0x794>)
 800a114:	f7f6 fb9a 	bl	800084c <__aeabi_ddiv>
 800a118:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800a11c:	4602      	mov	r2, r0
 800a11e:	460b      	mov	r3, r1
 800a120:	4630      	mov	r0, r6
 800a122:	4639      	mov	r1, r7
 800a124:	f7f6 fa68 	bl	80005f8 <__aeabi_dmul>
 800a128:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a12c:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800a130:	106d      	asrs	r5, r5, #1
 800a132:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800a136:	f04f 0b00 	mov.w	fp, #0
 800a13a:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800a13e:	4661      	mov	r1, ip
 800a140:	2200      	movs	r2, #0
 800a142:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800a146:	4658      	mov	r0, fp
 800a148:	46e1      	mov	r9, ip
 800a14a:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800a14e:	4614      	mov	r4, r2
 800a150:	461d      	mov	r5, r3
 800a152:	f7f6 fa51 	bl	80005f8 <__aeabi_dmul>
 800a156:	4602      	mov	r2, r0
 800a158:	460b      	mov	r3, r1
 800a15a:	4630      	mov	r0, r6
 800a15c:	4639      	mov	r1, r7
 800a15e:	f7f6 f893 	bl	8000288 <__aeabi_dsub>
 800a162:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a166:	4606      	mov	r6, r0
 800a168:	460f      	mov	r7, r1
 800a16a:	4620      	mov	r0, r4
 800a16c:	4629      	mov	r1, r5
 800a16e:	f7f6 f88b 	bl	8000288 <__aeabi_dsub>
 800a172:	4602      	mov	r2, r0
 800a174:	460b      	mov	r3, r1
 800a176:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a17a:	f7f6 f885 	bl	8000288 <__aeabi_dsub>
 800a17e:	465a      	mov	r2, fp
 800a180:	464b      	mov	r3, r9
 800a182:	f7f6 fa39 	bl	80005f8 <__aeabi_dmul>
 800a186:	4602      	mov	r2, r0
 800a188:	460b      	mov	r3, r1
 800a18a:	4630      	mov	r0, r6
 800a18c:	4639      	mov	r1, r7
 800a18e:	f7f6 f87b 	bl	8000288 <__aeabi_dsub>
 800a192:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a196:	f7f6 fa2f 	bl	80005f8 <__aeabi_dmul>
 800a19a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a19e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a1a2:	4610      	mov	r0, r2
 800a1a4:	4619      	mov	r1, r3
 800a1a6:	f7f6 fa27 	bl	80005f8 <__aeabi_dmul>
 800a1aa:	a37d      	add	r3, pc, #500	@ (adr r3, 800a3a0 <__ieee754_pow+0x738>)
 800a1ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1b0:	4604      	mov	r4, r0
 800a1b2:	460d      	mov	r5, r1
 800a1b4:	f7f6 fa20 	bl	80005f8 <__aeabi_dmul>
 800a1b8:	a37b      	add	r3, pc, #492	@ (adr r3, 800a3a8 <__ieee754_pow+0x740>)
 800a1ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1be:	f7f6 f865 	bl	800028c <__adddf3>
 800a1c2:	4622      	mov	r2, r4
 800a1c4:	462b      	mov	r3, r5
 800a1c6:	f7f6 fa17 	bl	80005f8 <__aeabi_dmul>
 800a1ca:	a379      	add	r3, pc, #484	@ (adr r3, 800a3b0 <__ieee754_pow+0x748>)
 800a1cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1d0:	f7f6 f85c 	bl	800028c <__adddf3>
 800a1d4:	4622      	mov	r2, r4
 800a1d6:	462b      	mov	r3, r5
 800a1d8:	f7f6 fa0e 	bl	80005f8 <__aeabi_dmul>
 800a1dc:	a376      	add	r3, pc, #472	@ (adr r3, 800a3b8 <__ieee754_pow+0x750>)
 800a1de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1e2:	f7f6 f853 	bl	800028c <__adddf3>
 800a1e6:	4622      	mov	r2, r4
 800a1e8:	462b      	mov	r3, r5
 800a1ea:	f7f6 fa05 	bl	80005f8 <__aeabi_dmul>
 800a1ee:	a374      	add	r3, pc, #464	@ (adr r3, 800a3c0 <__ieee754_pow+0x758>)
 800a1f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1f4:	f7f6 f84a 	bl	800028c <__adddf3>
 800a1f8:	4622      	mov	r2, r4
 800a1fa:	462b      	mov	r3, r5
 800a1fc:	f7f6 f9fc 	bl	80005f8 <__aeabi_dmul>
 800a200:	a371      	add	r3, pc, #452	@ (adr r3, 800a3c8 <__ieee754_pow+0x760>)
 800a202:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a206:	f7f6 f841 	bl	800028c <__adddf3>
 800a20a:	4622      	mov	r2, r4
 800a20c:	4606      	mov	r6, r0
 800a20e:	460f      	mov	r7, r1
 800a210:	462b      	mov	r3, r5
 800a212:	4620      	mov	r0, r4
 800a214:	4629      	mov	r1, r5
 800a216:	f7f6 f9ef 	bl	80005f8 <__aeabi_dmul>
 800a21a:	4602      	mov	r2, r0
 800a21c:	460b      	mov	r3, r1
 800a21e:	4630      	mov	r0, r6
 800a220:	4639      	mov	r1, r7
 800a222:	f7f6 f9e9 	bl	80005f8 <__aeabi_dmul>
 800a226:	465a      	mov	r2, fp
 800a228:	4604      	mov	r4, r0
 800a22a:	460d      	mov	r5, r1
 800a22c:	464b      	mov	r3, r9
 800a22e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a232:	f7f6 f82b 	bl	800028c <__adddf3>
 800a236:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a23a:	f7f6 f9dd 	bl	80005f8 <__aeabi_dmul>
 800a23e:	4622      	mov	r2, r4
 800a240:	462b      	mov	r3, r5
 800a242:	f7f6 f823 	bl	800028c <__adddf3>
 800a246:	465a      	mov	r2, fp
 800a248:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a24c:	464b      	mov	r3, r9
 800a24e:	4658      	mov	r0, fp
 800a250:	4649      	mov	r1, r9
 800a252:	f7f6 f9d1 	bl	80005f8 <__aeabi_dmul>
 800a256:	4b6a      	ldr	r3, [pc, #424]	@ (800a400 <__ieee754_pow+0x798>)
 800a258:	2200      	movs	r2, #0
 800a25a:	4606      	mov	r6, r0
 800a25c:	460f      	mov	r7, r1
 800a25e:	f7f6 f815 	bl	800028c <__adddf3>
 800a262:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a266:	f7f6 f811 	bl	800028c <__adddf3>
 800a26a:	46d8      	mov	r8, fp
 800a26c:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800a270:	460d      	mov	r5, r1
 800a272:	465a      	mov	r2, fp
 800a274:	460b      	mov	r3, r1
 800a276:	4640      	mov	r0, r8
 800a278:	4649      	mov	r1, r9
 800a27a:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800a27e:	f7f6 f9bb 	bl	80005f8 <__aeabi_dmul>
 800a282:	465c      	mov	r4, fp
 800a284:	4680      	mov	r8, r0
 800a286:	4689      	mov	r9, r1
 800a288:	4b5d      	ldr	r3, [pc, #372]	@ (800a400 <__ieee754_pow+0x798>)
 800a28a:	2200      	movs	r2, #0
 800a28c:	4620      	mov	r0, r4
 800a28e:	4629      	mov	r1, r5
 800a290:	f7f5 fffa 	bl	8000288 <__aeabi_dsub>
 800a294:	4632      	mov	r2, r6
 800a296:	463b      	mov	r3, r7
 800a298:	f7f5 fff6 	bl	8000288 <__aeabi_dsub>
 800a29c:	4602      	mov	r2, r0
 800a29e:	460b      	mov	r3, r1
 800a2a0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a2a4:	f7f5 fff0 	bl	8000288 <__aeabi_dsub>
 800a2a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a2ac:	f7f6 f9a4 	bl	80005f8 <__aeabi_dmul>
 800a2b0:	4622      	mov	r2, r4
 800a2b2:	4606      	mov	r6, r0
 800a2b4:	460f      	mov	r7, r1
 800a2b6:	462b      	mov	r3, r5
 800a2b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a2bc:	f7f6 f99c 	bl	80005f8 <__aeabi_dmul>
 800a2c0:	4602      	mov	r2, r0
 800a2c2:	460b      	mov	r3, r1
 800a2c4:	4630      	mov	r0, r6
 800a2c6:	4639      	mov	r1, r7
 800a2c8:	f7f5 ffe0 	bl	800028c <__adddf3>
 800a2cc:	4606      	mov	r6, r0
 800a2ce:	460f      	mov	r7, r1
 800a2d0:	4602      	mov	r2, r0
 800a2d2:	460b      	mov	r3, r1
 800a2d4:	4640      	mov	r0, r8
 800a2d6:	4649      	mov	r1, r9
 800a2d8:	f7f5 ffd8 	bl	800028c <__adddf3>
 800a2dc:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800a2e0:	a33b      	add	r3, pc, #236	@ (adr r3, 800a3d0 <__ieee754_pow+0x768>)
 800a2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2e6:	4658      	mov	r0, fp
 800a2e8:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800a2ec:	460d      	mov	r5, r1
 800a2ee:	f7f6 f983 	bl	80005f8 <__aeabi_dmul>
 800a2f2:	465c      	mov	r4, fp
 800a2f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a2f8:	4642      	mov	r2, r8
 800a2fa:	464b      	mov	r3, r9
 800a2fc:	4620      	mov	r0, r4
 800a2fe:	4629      	mov	r1, r5
 800a300:	f7f5 ffc2 	bl	8000288 <__aeabi_dsub>
 800a304:	4602      	mov	r2, r0
 800a306:	460b      	mov	r3, r1
 800a308:	4630      	mov	r0, r6
 800a30a:	4639      	mov	r1, r7
 800a30c:	f7f5 ffbc 	bl	8000288 <__aeabi_dsub>
 800a310:	a331      	add	r3, pc, #196	@ (adr r3, 800a3d8 <__ieee754_pow+0x770>)
 800a312:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a316:	f7f6 f96f 	bl	80005f8 <__aeabi_dmul>
 800a31a:	a331      	add	r3, pc, #196	@ (adr r3, 800a3e0 <__ieee754_pow+0x778>)
 800a31c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a320:	4606      	mov	r6, r0
 800a322:	460f      	mov	r7, r1
 800a324:	4620      	mov	r0, r4
 800a326:	4629      	mov	r1, r5
 800a328:	f7f6 f966 	bl	80005f8 <__aeabi_dmul>
 800a32c:	4602      	mov	r2, r0
 800a32e:	460b      	mov	r3, r1
 800a330:	4630      	mov	r0, r6
 800a332:	4639      	mov	r1, r7
 800a334:	f7f5 ffaa 	bl	800028c <__adddf3>
 800a338:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a33a:	4b32      	ldr	r3, [pc, #200]	@ (800a404 <__ieee754_pow+0x79c>)
 800a33c:	4413      	add	r3, r2
 800a33e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a342:	f7f5 ffa3 	bl	800028c <__adddf3>
 800a346:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a34a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a34c:	f7f6 f8ea 	bl	8000524 <__aeabi_i2d>
 800a350:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a352:	4b2d      	ldr	r3, [pc, #180]	@ (800a408 <__ieee754_pow+0x7a0>)
 800a354:	4413      	add	r3, r2
 800a356:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a35a:	4606      	mov	r6, r0
 800a35c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a360:	460f      	mov	r7, r1
 800a362:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a366:	f7f5 ff91 	bl	800028c <__adddf3>
 800a36a:	4642      	mov	r2, r8
 800a36c:	464b      	mov	r3, r9
 800a36e:	f7f5 ff8d 	bl	800028c <__adddf3>
 800a372:	4632      	mov	r2, r6
 800a374:	463b      	mov	r3, r7
 800a376:	f7f5 ff89 	bl	800028c <__adddf3>
 800a37a:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800a37e:	4632      	mov	r2, r6
 800a380:	463b      	mov	r3, r7
 800a382:	4658      	mov	r0, fp
 800a384:	460d      	mov	r5, r1
 800a386:	f7f5 ff7f 	bl	8000288 <__aeabi_dsub>
 800a38a:	4642      	mov	r2, r8
 800a38c:	464b      	mov	r3, r9
 800a38e:	f7f5 ff7b 	bl	8000288 <__aeabi_dsub>
 800a392:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a396:	f7f5 ff77 	bl	8000288 <__aeabi_dsub>
 800a39a:	465c      	mov	r4, fp
 800a39c:	e036      	b.n	800a40c <__ieee754_pow+0x7a4>
 800a39e:	bf00      	nop
 800a3a0:	4a454eef 	.word	0x4a454eef
 800a3a4:	3fca7e28 	.word	0x3fca7e28
 800a3a8:	93c9db65 	.word	0x93c9db65
 800a3ac:	3fcd864a 	.word	0x3fcd864a
 800a3b0:	a91d4101 	.word	0xa91d4101
 800a3b4:	3fd17460 	.word	0x3fd17460
 800a3b8:	518f264d 	.word	0x518f264d
 800a3bc:	3fd55555 	.word	0x3fd55555
 800a3c0:	db6fabff 	.word	0xdb6fabff
 800a3c4:	3fdb6db6 	.word	0x3fdb6db6
 800a3c8:	33333303 	.word	0x33333303
 800a3cc:	3fe33333 	.word	0x3fe33333
 800a3d0:	e0000000 	.word	0xe0000000
 800a3d4:	3feec709 	.word	0x3feec709
 800a3d8:	dc3a03fd 	.word	0xdc3a03fd
 800a3dc:	3feec709 	.word	0x3feec709
 800a3e0:	145b01f5 	.word	0x145b01f5
 800a3e4:	be3e2fe0 	.word	0xbe3e2fe0
 800a3e8:	7ff00000 	.word	0x7ff00000
 800a3ec:	43400000 	.word	0x43400000
 800a3f0:	0003988e 	.word	0x0003988e
 800a3f4:	000bb679 	.word	0x000bb679
 800a3f8:	0800ab60 	.word	0x0800ab60
 800a3fc:	3ff00000 	.word	0x3ff00000
 800a400:	40080000 	.word	0x40080000
 800a404:	0800ab40 	.word	0x0800ab40
 800a408:	0800ab50 	.word	0x0800ab50
 800a40c:	4602      	mov	r2, r0
 800a40e:	460b      	mov	r3, r1
 800a410:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a414:	e5d6      	b.n	8009fc4 <__ieee754_pow+0x35c>
 800a416:	f04f 0a01 	mov.w	sl, #1
 800a41a:	e65e      	b.n	800a0da <__ieee754_pow+0x472>
 800a41c:	a3b5      	add	r3, pc, #724	@ (adr r3, 800a6f4 <__ieee754_pow+0xa8c>)
 800a41e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a422:	4630      	mov	r0, r6
 800a424:	4639      	mov	r1, r7
 800a426:	f7f5 ff31 	bl	800028c <__adddf3>
 800a42a:	4642      	mov	r2, r8
 800a42c:	e9cd 0100 	strd	r0, r1, [sp]
 800a430:	464b      	mov	r3, r9
 800a432:	4620      	mov	r0, r4
 800a434:	4629      	mov	r1, r5
 800a436:	f7f5 ff27 	bl	8000288 <__aeabi_dsub>
 800a43a:	4602      	mov	r2, r0
 800a43c:	460b      	mov	r3, r1
 800a43e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a442:	f7f6 fb69 	bl	8000b18 <__aeabi_dcmpgt>
 800a446:	2800      	cmp	r0, #0
 800a448:	f47f adfe 	bne.w	800a048 <__ieee754_pow+0x3e0>
 800a44c:	4ba2      	ldr	r3, [pc, #648]	@ (800a6d8 <__ieee754_pow+0xa70>)
 800a44e:	e022      	b.n	800a496 <__ieee754_pow+0x82e>
 800a450:	4ca2      	ldr	r4, [pc, #648]	@ (800a6dc <__ieee754_pow+0xa74>)
 800a452:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a456:	42a3      	cmp	r3, r4
 800a458:	d919      	bls.n	800a48e <__ieee754_pow+0x826>
 800a45a:	4ba1      	ldr	r3, [pc, #644]	@ (800a6e0 <__ieee754_pow+0xa78>)
 800a45c:	440b      	add	r3, r1
 800a45e:	4303      	orrs	r3, r0
 800a460:	d009      	beq.n	800a476 <__ieee754_pow+0x80e>
 800a462:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a466:	2200      	movs	r2, #0
 800a468:	2300      	movs	r3, #0
 800a46a:	f7f6 fb37 	bl	8000adc <__aeabi_dcmplt>
 800a46e:	3800      	subs	r0, #0
 800a470:	bf18      	it	ne
 800a472:	2001      	movne	r0, #1
 800a474:	e512      	b.n	8009e9c <__ieee754_pow+0x234>
 800a476:	4642      	mov	r2, r8
 800a478:	464b      	mov	r3, r9
 800a47a:	f7f5 ff05 	bl	8000288 <__aeabi_dsub>
 800a47e:	4632      	mov	r2, r6
 800a480:	463b      	mov	r3, r7
 800a482:	f7f6 fb3f 	bl	8000b04 <__aeabi_dcmpge>
 800a486:	2800      	cmp	r0, #0
 800a488:	d1eb      	bne.n	800a462 <__ieee754_pow+0x7fa>
 800a48a:	4b96      	ldr	r3, [pc, #600]	@ (800a6e4 <__ieee754_pow+0xa7c>)
 800a48c:	e003      	b.n	800a496 <__ieee754_pow+0x82e>
 800a48e:	4a96      	ldr	r2, [pc, #600]	@ (800a6e8 <__ieee754_pow+0xa80>)
 800a490:	4293      	cmp	r3, r2
 800a492:	f240 80e7 	bls.w	800a664 <__ieee754_pow+0x9fc>
 800a496:	151b      	asrs	r3, r3, #20
 800a498:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 800a49c:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 800a4a0:	fa4a fa03 	asr.w	sl, sl, r3
 800a4a4:	44da      	add	sl, fp
 800a4a6:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800a4aa:	4890      	ldr	r0, [pc, #576]	@ (800a6ec <__ieee754_pow+0xa84>)
 800a4ac:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800a4b0:	4108      	asrs	r0, r1
 800a4b2:	ea00 030a 	and.w	r3, r0, sl
 800a4b6:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800a4ba:	f1c1 0114 	rsb	r1, r1, #20
 800a4be:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800a4c2:	fa4a fa01 	asr.w	sl, sl, r1
 800a4c6:	f1bb 0f00 	cmp.w	fp, #0
 800a4ca:	4640      	mov	r0, r8
 800a4cc:	4649      	mov	r1, r9
 800a4ce:	f04f 0200 	mov.w	r2, #0
 800a4d2:	bfb8      	it	lt
 800a4d4:	f1ca 0a00 	rsblt	sl, sl, #0
 800a4d8:	f7f5 fed6 	bl	8000288 <__aeabi_dsub>
 800a4dc:	4680      	mov	r8, r0
 800a4de:	4689      	mov	r9, r1
 800a4e0:	4632      	mov	r2, r6
 800a4e2:	463b      	mov	r3, r7
 800a4e4:	4640      	mov	r0, r8
 800a4e6:	4649      	mov	r1, r9
 800a4e8:	f7f5 fed0 	bl	800028c <__adddf3>
 800a4ec:	2400      	movs	r4, #0
 800a4ee:	a36a      	add	r3, pc, #424	@ (adr r3, 800a698 <__ieee754_pow+0xa30>)
 800a4f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4f4:	4620      	mov	r0, r4
 800a4f6:	460d      	mov	r5, r1
 800a4f8:	f7f6 f87e 	bl	80005f8 <__aeabi_dmul>
 800a4fc:	4642      	mov	r2, r8
 800a4fe:	e9cd 0100 	strd	r0, r1, [sp]
 800a502:	464b      	mov	r3, r9
 800a504:	4620      	mov	r0, r4
 800a506:	4629      	mov	r1, r5
 800a508:	f7f5 febe 	bl	8000288 <__aeabi_dsub>
 800a50c:	4602      	mov	r2, r0
 800a50e:	460b      	mov	r3, r1
 800a510:	4630      	mov	r0, r6
 800a512:	4639      	mov	r1, r7
 800a514:	f7f5 feb8 	bl	8000288 <__aeabi_dsub>
 800a518:	a361      	add	r3, pc, #388	@ (adr r3, 800a6a0 <__ieee754_pow+0xa38>)
 800a51a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a51e:	f7f6 f86b 	bl	80005f8 <__aeabi_dmul>
 800a522:	a361      	add	r3, pc, #388	@ (adr r3, 800a6a8 <__ieee754_pow+0xa40>)
 800a524:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a528:	4680      	mov	r8, r0
 800a52a:	4689      	mov	r9, r1
 800a52c:	4620      	mov	r0, r4
 800a52e:	4629      	mov	r1, r5
 800a530:	f7f6 f862 	bl	80005f8 <__aeabi_dmul>
 800a534:	4602      	mov	r2, r0
 800a536:	460b      	mov	r3, r1
 800a538:	4640      	mov	r0, r8
 800a53a:	4649      	mov	r1, r9
 800a53c:	f7f5 fea6 	bl	800028c <__adddf3>
 800a540:	4604      	mov	r4, r0
 800a542:	460d      	mov	r5, r1
 800a544:	4602      	mov	r2, r0
 800a546:	460b      	mov	r3, r1
 800a548:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a54c:	f7f5 fe9e 	bl	800028c <__adddf3>
 800a550:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a554:	4680      	mov	r8, r0
 800a556:	4689      	mov	r9, r1
 800a558:	f7f5 fe96 	bl	8000288 <__aeabi_dsub>
 800a55c:	4602      	mov	r2, r0
 800a55e:	460b      	mov	r3, r1
 800a560:	4620      	mov	r0, r4
 800a562:	4629      	mov	r1, r5
 800a564:	f7f5 fe90 	bl	8000288 <__aeabi_dsub>
 800a568:	4642      	mov	r2, r8
 800a56a:	4606      	mov	r6, r0
 800a56c:	460f      	mov	r7, r1
 800a56e:	464b      	mov	r3, r9
 800a570:	4640      	mov	r0, r8
 800a572:	4649      	mov	r1, r9
 800a574:	f7f6 f840 	bl	80005f8 <__aeabi_dmul>
 800a578:	a34d      	add	r3, pc, #308	@ (adr r3, 800a6b0 <__ieee754_pow+0xa48>)
 800a57a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a57e:	4604      	mov	r4, r0
 800a580:	460d      	mov	r5, r1
 800a582:	f7f6 f839 	bl	80005f8 <__aeabi_dmul>
 800a586:	a34c      	add	r3, pc, #304	@ (adr r3, 800a6b8 <__ieee754_pow+0xa50>)
 800a588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a58c:	f7f5 fe7c 	bl	8000288 <__aeabi_dsub>
 800a590:	4622      	mov	r2, r4
 800a592:	462b      	mov	r3, r5
 800a594:	f7f6 f830 	bl	80005f8 <__aeabi_dmul>
 800a598:	a349      	add	r3, pc, #292	@ (adr r3, 800a6c0 <__ieee754_pow+0xa58>)
 800a59a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a59e:	f7f5 fe75 	bl	800028c <__adddf3>
 800a5a2:	4622      	mov	r2, r4
 800a5a4:	462b      	mov	r3, r5
 800a5a6:	f7f6 f827 	bl	80005f8 <__aeabi_dmul>
 800a5aa:	a347      	add	r3, pc, #284	@ (adr r3, 800a6c8 <__ieee754_pow+0xa60>)
 800a5ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5b0:	f7f5 fe6a 	bl	8000288 <__aeabi_dsub>
 800a5b4:	4622      	mov	r2, r4
 800a5b6:	462b      	mov	r3, r5
 800a5b8:	f7f6 f81e 	bl	80005f8 <__aeabi_dmul>
 800a5bc:	a344      	add	r3, pc, #272	@ (adr r3, 800a6d0 <__ieee754_pow+0xa68>)
 800a5be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5c2:	f7f5 fe63 	bl	800028c <__adddf3>
 800a5c6:	4622      	mov	r2, r4
 800a5c8:	462b      	mov	r3, r5
 800a5ca:	f7f6 f815 	bl	80005f8 <__aeabi_dmul>
 800a5ce:	4602      	mov	r2, r0
 800a5d0:	460b      	mov	r3, r1
 800a5d2:	4640      	mov	r0, r8
 800a5d4:	4649      	mov	r1, r9
 800a5d6:	f7f5 fe57 	bl	8000288 <__aeabi_dsub>
 800a5da:	4604      	mov	r4, r0
 800a5dc:	460d      	mov	r5, r1
 800a5de:	4602      	mov	r2, r0
 800a5e0:	460b      	mov	r3, r1
 800a5e2:	4640      	mov	r0, r8
 800a5e4:	4649      	mov	r1, r9
 800a5e6:	f7f6 f807 	bl	80005f8 <__aeabi_dmul>
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	e9cd 0100 	strd	r0, r1, [sp]
 800a5f0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a5f4:	4620      	mov	r0, r4
 800a5f6:	4629      	mov	r1, r5
 800a5f8:	f7f5 fe46 	bl	8000288 <__aeabi_dsub>
 800a5fc:	4602      	mov	r2, r0
 800a5fe:	460b      	mov	r3, r1
 800a600:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a604:	f7f6 f922 	bl	800084c <__aeabi_ddiv>
 800a608:	4632      	mov	r2, r6
 800a60a:	4604      	mov	r4, r0
 800a60c:	460d      	mov	r5, r1
 800a60e:	463b      	mov	r3, r7
 800a610:	4640      	mov	r0, r8
 800a612:	4649      	mov	r1, r9
 800a614:	f7f5 fff0 	bl	80005f8 <__aeabi_dmul>
 800a618:	4632      	mov	r2, r6
 800a61a:	463b      	mov	r3, r7
 800a61c:	f7f5 fe36 	bl	800028c <__adddf3>
 800a620:	4602      	mov	r2, r0
 800a622:	460b      	mov	r3, r1
 800a624:	4620      	mov	r0, r4
 800a626:	4629      	mov	r1, r5
 800a628:	f7f5 fe2e 	bl	8000288 <__aeabi_dsub>
 800a62c:	4642      	mov	r2, r8
 800a62e:	464b      	mov	r3, r9
 800a630:	f7f5 fe2a 	bl	8000288 <__aeabi_dsub>
 800a634:	460b      	mov	r3, r1
 800a636:	4602      	mov	r2, r0
 800a638:	492d      	ldr	r1, [pc, #180]	@ (800a6f0 <__ieee754_pow+0xa88>)
 800a63a:	2000      	movs	r0, #0
 800a63c:	f7f5 fe24 	bl	8000288 <__aeabi_dsub>
 800a640:	ec41 0b10 	vmov	d0, r0, r1
 800a644:	ee10 3a90 	vmov	r3, s1
 800a648:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800a64c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a650:	da0b      	bge.n	800a66a <__ieee754_pow+0xa02>
 800a652:	4650      	mov	r0, sl
 800a654:	f000 f898 	bl	800a788 <scalbn>
 800a658:	ec51 0b10 	vmov	r0, r1, d0
 800a65c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a660:	f7ff bb6d 	b.w	8009d3e <__ieee754_pow+0xd6>
 800a664:	f8dd a010 	ldr.w	sl, [sp, #16]
 800a668:	e73a      	b.n	800a4e0 <__ieee754_pow+0x878>
 800a66a:	ec51 0b10 	vmov	r0, r1, d0
 800a66e:	4619      	mov	r1, r3
 800a670:	e7f4      	b.n	800a65c <__ieee754_pow+0x9f4>
 800a672:	491f      	ldr	r1, [pc, #124]	@ (800a6f0 <__ieee754_pow+0xa88>)
 800a674:	2000      	movs	r0, #0
 800a676:	f7ff bb14 	b.w	8009ca2 <__ieee754_pow+0x3a>
 800a67a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a67e:	f7ff bb10 	b.w	8009ca2 <__ieee754_pow+0x3a>
 800a682:	4630      	mov	r0, r6
 800a684:	4639      	mov	r1, r7
 800a686:	f7ff bb0c 	b.w	8009ca2 <__ieee754_pow+0x3a>
 800a68a:	460c      	mov	r4, r1
 800a68c:	f7ff bb69 	b.w	8009d62 <__ieee754_pow+0xfa>
 800a690:	2400      	movs	r4, #0
 800a692:	f7ff bb4b 	b.w	8009d2c <__ieee754_pow+0xc4>
 800a696:	bf00      	nop
 800a698:	00000000 	.word	0x00000000
 800a69c:	3fe62e43 	.word	0x3fe62e43
 800a6a0:	fefa39ef 	.word	0xfefa39ef
 800a6a4:	3fe62e42 	.word	0x3fe62e42
 800a6a8:	0ca86c39 	.word	0x0ca86c39
 800a6ac:	be205c61 	.word	0xbe205c61
 800a6b0:	72bea4d0 	.word	0x72bea4d0
 800a6b4:	3e663769 	.word	0x3e663769
 800a6b8:	c5d26bf1 	.word	0xc5d26bf1
 800a6bc:	3ebbbd41 	.word	0x3ebbbd41
 800a6c0:	af25de2c 	.word	0xaf25de2c
 800a6c4:	3f11566a 	.word	0x3f11566a
 800a6c8:	16bebd93 	.word	0x16bebd93
 800a6cc:	3f66c16c 	.word	0x3f66c16c
 800a6d0:	5555553e 	.word	0x5555553e
 800a6d4:	3fc55555 	.word	0x3fc55555
 800a6d8:	40900000 	.word	0x40900000
 800a6dc:	4090cbff 	.word	0x4090cbff
 800a6e0:	3f6f3400 	.word	0x3f6f3400
 800a6e4:	4090cc00 	.word	0x4090cc00
 800a6e8:	3fe00000 	.word	0x3fe00000
 800a6ec:	fff00000 	.word	0xfff00000
 800a6f0:	3ff00000 	.word	0x3ff00000
 800a6f4:	652b82fe 	.word	0x652b82fe
 800a6f8:	3c971547 	.word	0x3c971547

0800a6fc <with_errno>:
 800a6fc:	b510      	push	{r4, lr}
 800a6fe:	ed2d 8b02 	vpush	{d8}
 800a702:	eeb0 8a40 	vmov.f32	s16, s0
 800a706:	eef0 8a60 	vmov.f32	s17, s1
 800a70a:	4604      	mov	r4, r0
 800a70c:	f7fe fd5a 	bl	80091c4 <__errno>
 800a710:	eeb0 0a48 	vmov.f32	s0, s16
 800a714:	eef0 0a68 	vmov.f32	s1, s17
 800a718:	ecbd 8b02 	vpop	{d8}
 800a71c:	6004      	str	r4, [r0, #0]
 800a71e:	bd10      	pop	{r4, pc}

0800a720 <xflow>:
 800a720:	4603      	mov	r3, r0
 800a722:	b507      	push	{r0, r1, r2, lr}
 800a724:	ec51 0b10 	vmov	r0, r1, d0
 800a728:	b183      	cbz	r3, 800a74c <xflow+0x2c>
 800a72a:	4602      	mov	r2, r0
 800a72c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a730:	e9cd 2300 	strd	r2, r3, [sp]
 800a734:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a738:	f7f5 ff5e 	bl	80005f8 <__aeabi_dmul>
 800a73c:	ec41 0b10 	vmov	d0, r0, r1
 800a740:	2022      	movs	r0, #34	@ 0x22
 800a742:	b003      	add	sp, #12
 800a744:	f85d eb04 	ldr.w	lr, [sp], #4
 800a748:	f7ff bfd8 	b.w	800a6fc <with_errno>
 800a74c:	4602      	mov	r2, r0
 800a74e:	460b      	mov	r3, r1
 800a750:	e7ee      	b.n	800a730 <xflow+0x10>
 800a752:	0000      	movs	r0, r0
 800a754:	0000      	movs	r0, r0
	...

0800a758 <__math_uflow>:
 800a758:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a760 <__math_uflow+0x8>
 800a75c:	f7ff bfe0 	b.w	800a720 <xflow>
 800a760:	00000000 	.word	0x00000000
 800a764:	10000000 	.word	0x10000000

0800a768 <__math_oflow>:
 800a768:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a770 <__math_oflow+0x8>
 800a76c:	f7ff bfd8 	b.w	800a720 <xflow>
 800a770:	00000000 	.word	0x00000000
 800a774:	70000000 	.word	0x70000000

0800a778 <fabs>:
 800a778:	ec51 0b10 	vmov	r0, r1, d0
 800a77c:	4602      	mov	r2, r0
 800a77e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a782:	ec43 2b10 	vmov	d0, r2, r3
 800a786:	4770      	bx	lr

0800a788 <scalbn>:
 800a788:	b570      	push	{r4, r5, r6, lr}
 800a78a:	ec55 4b10 	vmov	r4, r5, d0
 800a78e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800a792:	4606      	mov	r6, r0
 800a794:	462b      	mov	r3, r5
 800a796:	b991      	cbnz	r1, 800a7be <scalbn+0x36>
 800a798:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800a79c:	4323      	orrs	r3, r4
 800a79e:	d03b      	beq.n	800a818 <scalbn+0x90>
 800a7a0:	4b33      	ldr	r3, [pc, #204]	@ (800a870 <scalbn+0xe8>)
 800a7a2:	4620      	mov	r0, r4
 800a7a4:	4629      	mov	r1, r5
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	f7f5 ff26 	bl	80005f8 <__aeabi_dmul>
 800a7ac:	4b31      	ldr	r3, [pc, #196]	@ (800a874 <scalbn+0xec>)
 800a7ae:	429e      	cmp	r6, r3
 800a7b0:	4604      	mov	r4, r0
 800a7b2:	460d      	mov	r5, r1
 800a7b4:	da0f      	bge.n	800a7d6 <scalbn+0x4e>
 800a7b6:	a326      	add	r3, pc, #152	@ (adr r3, 800a850 <scalbn+0xc8>)
 800a7b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7bc:	e01e      	b.n	800a7fc <scalbn+0x74>
 800a7be:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800a7c2:	4291      	cmp	r1, r2
 800a7c4:	d10b      	bne.n	800a7de <scalbn+0x56>
 800a7c6:	4622      	mov	r2, r4
 800a7c8:	4620      	mov	r0, r4
 800a7ca:	4629      	mov	r1, r5
 800a7cc:	f7f5 fd5e 	bl	800028c <__adddf3>
 800a7d0:	4604      	mov	r4, r0
 800a7d2:	460d      	mov	r5, r1
 800a7d4:	e020      	b.n	800a818 <scalbn+0x90>
 800a7d6:	460b      	mov	r3, r1
 800a7d8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800a7dc:	3936      	subs	r1, #54	@ 0x36
 800a7de:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800a7e2:	4296      	cmp	r6, r2
 800a7e4:	dd0d      	ble.n	800a802 <scalbn+0x7a>
 800a7e6:	2d00      	cmp	r5, #0
 800a7e8:	a11b      	add	r1, pc, #108	@ (adr r1, 800a858 <scalbn+0xd0>)
 800a7ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a7ee:	da02      	bge.n	800a7f6 <scalbn+0x6e>
 800a7f0:	a11b      	add	r1, pc, #108	@ (adr r1, 800a860 <scalbn+0xd8>)
 800a7f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a7f6:	a318      	add	r3, pc, #96	@ (adr r3, 800a858 <scalbn+0xd0>)
 800a7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7fc:	f7f5 fefc 	bl	80005f8 <__aeabi_dmul>
 800a800:	e7e6      	b.n	800a7d0 <scalbn+0x48>
 800a802:	1872      	adds	r2, r6, r1
 800a804:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800a808:	428a      	cmp	r2, r1
 800a80a:	dcec      	bgt.n	800a7e6 <scalbn+0x5e>
 800a80c:	2a00      	cmp	r2, #0
 800a80e:	dd06      	ble.n	800a81e <scalbn+0x96>
 800a810:	f36f 531e 	bfc	r3, #20, #11
 800a814:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a818:	ec45 4b10 	vmov	d0, r4, r5
 800a81c:	bd70      	pop	{r4, r5, r6, pc}
 800a81e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800a822:	da08      	bge.n	800a836 <scalbn+0xae>
 800a824:	2d00      	cmp	r5, #0
 800a826:	a10a      	add	r1, pc, #40	@ (adr r1, 800a850 <scalbn+0xc8>)
 800a828:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a82c:	dac3      	bge.n	800a7b6 <scalbn+0x2e>
 800a82e:	a10e      	add	r1, pc, #56	@ (adr r1, 800a868 <scalbn+0xe0>)
 800a830:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a834:	e7bf      	b.n	800a7b6 <scalbn+0x2e>
 800a836:	3236      	adds	r2, #54	@ 0x36
 800a838:	f36f 531e 	bfc	r3, #20, #11
 800a83c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a840:	4620      	mov	r0, r4
 800a842:	4b0d      	ldr	r3, [pc, #52]	@ (800a878 <scalbn+0xf0>)
 800a844:	4629      	mov	r1, r5
 800a846:	2200      	movs	r2, #0
 800a848:	e7d8      	b.n	800a7fc <scalbn+0x74>
 800a84a:	bf00      	nop
 800a84c:	f3af 8000 	nop.w
 800a850:	c2f8f359 	.word	0xc2f8f359
 800a854:	01a56e1f 	.word	0x01a56e1f
 800a858:	8800759c 	.word	0x8800759c
 800a85c:	7e37e43c 	.word	0x7e37e43c
 800a860:	8800759c 	.word	0x8800759c
 800a864:	fe37e43c 	.word	0xfe37e43c
 800a868:	c2f8f359 	.word	0xc2f8f359
 800a86c:	81a56e1f 	.word	0x81a56e1f
 800a870:	43500000 	.word	0x43500000
 800a874:	ffff3cb0 	.word	0xffff3cb0
 800a878:	3c900000 	.word	0x3c900000

0800a87c <__ieee754_sqrt>:
 800a87c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a880:	4a66      	ldr	r2, [pc, #408]	@ (800aa1c <__ieee754_sqrt+0x1a0>)
 800a882:	ec55 4b10 	vmov	r4, r5, d0
 800a886:	43aa      	bics	r2, r5
 800a888:	462b      	mov	r3, r5
 800a88a:	4621      	mov	r1, r4
 800a88c:	d110      	bne.n	800a8b0 <__ieee754_sqrt+0x34>
 800a88e:	4622      	mov	r2, r4
 800a890:	4620      	mov	r0, r4
 800a892:	4629      	mov	r1, r5
 800a894:	f7f5 feb0 	bl	80005f8 <__aeabi_dmul>
 800a898:	4602      	mov	r2, r0
 800a89a:	460b      	mov	r3, r1
 800a89c:	4620      	mov	r0, r4
 800a89e:	4629      	mov	r1, r5
 800a8a0:	f7f5 fcf4 	bl	800028c <__adddf3>
 800a8a4:	4604      	mov	r4, r0
 800a8a6:	460d      	mov	r5, r1
 800a8a8:	ec45 4b10 	vmov	d0, r4, r5
 800a8ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8b0:	2d00      	cmp	r5, #0
 800a8b2:	dc0e      	bgt.n	800a8d2 <__ieee754_sqrt+0x56>
 800a8b4:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800a8b8:	4322      	orrs	r2, r4
 800a8ba:	d0f5      	beq.n	800a8a8 <__ieee754_sqrt+0x2c>
 800a8bc:	b19d      	cbz	r5, 800a8e6 <__ieee754_sqrt+0x6a>
 800a8be:	4622      	mov	r2, r4
 800a8c0:	4620      	mov	r0, r4
 800a8c2:	4629      	mov	r1, r5
 800a8c4:	f7f5 fce0 	bl	8000288 <__aeabi_dsub>
 800a8c8:	4602      	mov	r2, r0
 800a8ca:	460b      	mov	r3, r1
 800a8cc:	f7f5 ffbe 	bl	800084c <__aeabi_ddiv>
 800a8d0:	e7e8      	b.n	800a8a4 <__ieee754_sqrt+0x28>
 800a8d2:	152a      	asrs	r2, r5, #20
 800a8d4:	d115      	bne.n	800a902 <__ieee754_sqrt+0x86>
 800a8d6:	2000      	movs	r0, #0
 800a8d8:	e009      	b.n	800a8ee <__ieee754_sqrt+0x72>
 800a8da:	0acb      	lsrs	r3, r1, #11
 800a8dc:	3a15      	subs	r2, #21
 800a8de:	0549      	lsls	r1, r1, #21
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d0fa      	beq.n	800a8da <__ieee754_sqrt+0x5e>
 800a8e4:	e7f7      	b.n	800a8d6 <__ieee754_sqrt+0x5a>
 800a8e6:	462a      	mov	r2, r5
 800a8e8:	e7fa      	b.n	800a8e0 <__ieee754_sqrt+0x64>
 800a8ea:	005b      	lsls	r3, r3, #1
 800a8ec:	3001      	adds	r0, #1
 800a8ee:	02dc      	lsls	r4, r3, #11
 800a8f0:	d5fb      	bpl.n	800a8ea <__ieee754_sqrt+0x6e>
 800a8f2:	1e44      	subs	r4, r0, #1
 800a8f4:	1b12      	subs	r2, r2, r4
 800a8f6:	f1c0 0420 	rsb	r4, r0, #32
 800a8fa:	fa21 f404 	lsr.w	r4, r1, r4
 800a8fe:	4323      	orrs	r3, r4
 800a900:	4081      	lsls	r1, r0
 800a902:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a906:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800a90a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a90e:	07d2      	lsls	r2, r2, #31
 800a910:	bf5c      	itt	pl
 800a912:	005b      	lslpl	r3, r3, #1
 800a914:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800a918:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a91c:	bf58      	it	pl
 800a91e:	0049      	lslpl	r1, r1, #1
 800a920:	2600      	movs	r6, #0
 800a922:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800a926:	107f      	asrs	r7, r7, #1
 800a928:	0049      	lsls	r1, r1, #1
 800a92a:	2016      	movs	r0, #22
 800a92c:	4632      	mov	r2, r6
 800a92e:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800a932:	1915      	adds	r5, r2, r4
 800a934:	429d      	cmp	r5, r3
 800a936:	bfde      	ittt	le
 800a938:	192a      	addle	r2, r5, r4
 800a93a:	1b5b      	suble	r3, r3, r5
 800a93c:	1936      	addle	r6, r6, r4
 800a93e:	0fcd      	lsrs	r5, r1, #31
 800a940:	3801      	subs	r0, #1
 800a942:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800a946:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a94a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800a94e:	d1f0      	bne.n	800a932 <__ieee754_sqrt+0xb6>
 800a950:	4605      	mov	r5, r0
 800a952:	2420      	movs	r4, #32
 800a954:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800a958:	4293      	cmp	r3, r2
 800a95a:	eb0c 0e00 	add.w	lr, ip, r0
 800a95e:	dc02      	bgt.n	800a966 <__ieee754_sqrt+0xea>
 800a960:	d113      	bne.n	800a98a <__ieee754_sqrt+0x10e>
 800a962:	458e      	cmp	lr, r1
 800a964:	d811      	bhi.n	800a98a <__ieee754_sqrt+0x10e>
 800a966:	f1be 0f00 	cmp.w	lr, #0
 800a96a:	eb0e 000c 	add.w	r0, lr, ip
 800a96e:	da3f      	bge.n	800a9f0 <__ieee754_sqrt+0x174>
 800a970:	2800      	cmp	r0, #0
 800a972:	db3d      	blt.n	800a9f0 <__ieee754_sqrt+0x174>
 800a974:	f102 0801 	add.w	r8, r2, #1
 800a978:	1a9b      	subs	r3, r3, r2
 800a97a:	458e      	cmp	lr, r1
 800a97c:	bf88      	it	hi
 800a97e:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 800a982:	eba1 010e 	sub.w	r1, r1, lr
 800a986:	4465      	add	r5, ip
 800a988:	4642      	mov	r2, r8
 800a98a:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800a98e:	3c01      	subs	r4, #1
 800a990:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800a994:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a998:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800a99c:	d1dc      	bne.n	800a958 <__ieee754_sqrt+0xdc>
 800a99e:	4319      	orrs	r1, r3
 800a9a0:	d01b      	beq.n	800a9da <__ieee754_sqrt+0x15e>
 800a9a2:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 800aa20 <__ieee754_sqrt+0x1a4>
 800a9a6:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 800aa24 <__ieee754_sqrt+0x1a8>
 800a9aa:	e9da 0100 	ldrd	r0, r1, [sl]
 800a9ae:	e9db 2300 	ldrd	r2, r3, [fp]
 800a9b2:	f7f5 fc69 	bl	8000288 <__aeabi_dsub>
 800a9b6:	e9da 8900 	ldrd	r8, r9, [sl]
 800a9ba:	4602      	mov	r2, r0
 800a9bc:	460b      	mov	r3, r1
 800a9be:	4640      	mov	r0, r8
 800a9c0:	4649      	mov	r1, r9
 800a9c2:	f7f6 f895 	bl	8000af0 <__aeabi_dcmple>
 800a9c6:	b140      	cbz	r0, 800a9da <__ieee754_sqrt+0x15e>
 800a9c8:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 800a9cc:	e9da 0100 	ldrd	r0, r1, [sl]
 800a9d0:	e9db 2300 	ldrd	r2, r3, [fp]
 800a9d4:	d10e      	bne.n	800a9f4 <__ieee754_sqrt+0x178>
 800a9d6:	3601      	adds	r6, #1
 800a9d8:	4625      	mov	r5, r4
 800a9da:	1073      	asrs	r3, r6, #1
 800a9dc:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 800a9e0:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 800a9e4:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 800a9e8:	086b      	lsrs	r3, r5, #1
 800a9ea:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 800a9ee:	e759      	b.n	800a8a4 <__ieee754_sqrt+0x28>
 800a9f0:	4690      	mov	r8, r2
 800a9f2:	e7c1      	b.n	800a978 <__ieee754_sqrt+0xfc>
 800a9f4:	f7f5 fc4a 	bl	800028c <__adddf3>
 800a9f8:	e9da 8900 	ldrd	r8, r9, [sl]
 800a9fc:	4602      	mov	r2, r0
 800a9fe:	460b      	mov	r3, r1
 800aa00:	4640      	mov	r0, r8
 800aa02:	4649      	mov	r1, r9
 800aa04:	f7f6 f86a 	bl	8000adc <__aeabi_dcmplt>
 800aa08:	b120      	cbz	r0, 800aa14 <__ieee754_sqrt+0x198>
 800aa0a:	1cab      	adds	r3, r5, #2
 800aa0c:	bf08      	it	eq
 800aa0e:	3601      	addeq	r6, #1
 800aa10:	3502      	adds	r5, #2
 800aa12:	e7e2      	b.n	800a9da <__ieee754_sqrt+0x15e>
 800aa14:	1c6b      	adds	r3, r5, #1
 800aa16:	f023 0501 	bic.w	r5, r3, #1
 800aa1a:	e7de      	b.n	800a9da <__ieee754_sqrt+0x15e>
 800aa1c:	7ff00000 	.word	0x7ff00000
 800aa20:	0800ab78 	.word	0x0800ab78
 800aa24:	0800ab70 	.word	0x0800ab70

0800aa28 <_init>:
 800aa28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa2a:	bf00      	nop
 800aa2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa2e:	bc08      	pop	{r3}
 800aa30:	469e      	mov	lr, r3
 800aa32:	4770      	bx	lr

0800aa34 <_fini>:
 800aa34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa36:	bf00      	nop
 800aa38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa3a:	bc08      	pop	{r3}
 800aa3c:	469e      	mov	lr, r3
 800aa3e:	4770      	bx	lr
