
MST-FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081b4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08008354  08008354  00009354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008444  08008444  0000a060  2**0
                  CONTENTS
  4 .ARM          00000008  08008444  08008444  00009444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800844c  0800844c  0000a060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800844c  0800844c  0000944c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008450  08008450  00009450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08008454  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004d70  20000060  080084b4  0000a060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004dd0  080084b4  0000add0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a0a5  00000000  00000000  0000a090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039ee  00000000  00000000  00024135  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001580  00000000  00000000  00027b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010ae  00000000  00000000  000290a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d9e  00000000  00000000  0002a156  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017d7f  00000000  00000000  00042ef4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098166  00000000  00000000  0005ac73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f2dd9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f30  00000000  00000000  000f2e1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000f8d4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800833c 	.word	0x0800833c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	0800833c 	.word	0x0800833c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <tstMSTGiveTimerReference>:
/*
 * Timer reference given from user and used by MST to count nanoseconds
 */
static TIM_TypeDef *tstMSTTimerReferenceFromUser = NULL;

void tstMSTGiveTimerReference(TIM_TypeDef *fromUser) {
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
	tstMSTTimerReferenceFromUser = fromUser;
 8000578:	4a04      	ldr	r2, [pc, #16]	@ (800058c <tstMSTGiveTimerReference+0x1c>)
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	6013      	str	r3, [r2, #0]
}
 800057e:	bf00      	nop
 8000580:	370c      	adds	r7, #12
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	2000007c 	.word	0x2000007c

08000590 <prvMSTSetupUSClock>:

static float prvMSTSetupUSClock() {
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
	//set prescaler equal to MHz of clock
	__HAL_RCC_TIM2_CLK_ENABLE();
 8000596:	2300      	movs	r3, #0
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	4b1f      	ldr	r3, [pc, #124]	@ (8000618 <prvMSTSetupUSClock+0x88>)
 800059c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800059e:	4a1e      	ldr	r2, [pc, #120]	@ (8000618 <prvMSTSetupUSClock+0x88>)
 80005a0:	f043 0301 	orr.w	r3, r3, #1
 80005a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80005a6:	4b1c      	ldr	r3, [pc, #112]	@ (8000618 <prvMSTSetupUSClock+0x88>)
 80005a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005aa:	f003 0301 	and.w	r3, r3, #1
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	687b      	ldr	r3, [r7, #4]
	tstMSTTimerReferenceFromUser->PSC = (HAL_RCC_GetPCLK1Freq() / 1000000 - 1);
 80005b2:	f002 fac5 	bl	8002b40 <HAL_RCC_GetPCLK1Freq>
 80005b6:	4603      	mov	r3, r0
 80005b8:	4a18      	ldr	r2, [pc, #96]	@ (800061c <prvMSTSetupUSClock+0x8c>)
 80005ba:	fba2 2303 	umull	r2, r3, r2, r3
 80005be:	0c9a      	lsrs	r2, r3, #18
 80005c0:	4b17      	ldr	r3, [pc, #92]	@ (8000620 <prvMSTSetupUSClock+0x90>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	3a01      	subs	r2, #1
 80005c6:	629a      	str	r2, [r3, #40]	@ 0x28
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80005c8:	4b13      	ldr	r3, [pc, #76]	@ (8000618 <prvMSTSetupUSClock+0x88>)
 80005ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005cc:	4a12      	ldr	r2, [pc, #72]	@ (8000618 <prvMSTSetupUSClock+0x88>)
 80005ce:	f043 0301 	orr.w	r3, r3, #1
 80005d2:	6413      	str	r3, [r2, #64]	@ 0x40
	tstMSTTimerReferenceFromUser->ARR = 0xFFFFFFFF;
 80005d4:	4b12      	ldr	r3, [pc, #72]	@ (8000620 <prvMSTSetupUSClock+0x90>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80005dc:	62da      	str	r2, [r3, #44]	@ 0x2c
	tstMSTTimerReferenceFromUser->CR1 |= TIM_CR1_CEN;
 80005de:	4b10      	ldr	r3, [pc, #64]	@ (8000620 <prvMSTSetupUSClock+0x90>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	681a      	ldr	r2, [r3, #0]
 80005e4:	4b0e      	ldr	r3, [pc, #56]	@ (8000620 <prvMSTSetupUSClock+0x90>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f042 0201 	orr.w	r2, r2, #1
 80005ec:	601a      	str	r2, [r3, #0]
	//we have that f_step = 1Mhz and Tstep = 1us, this way we can count us
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80005ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000624 <prvMSTSetupUSClock+0x94>)
 80005f0:	68db      	ldr	r3, [r3, #12]
 80005f2:	4a0c      	ldr	r2, [pc, #48]	@ (8000624 <prvMSTSetupUSClock+0x94>)
 80005f4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80005f8:	60d3      	str	r3, [r2, #12]
	DWT->CYCCNT = 0;
 80005fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000628 <prvMSTSetupUSClock+0x98>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000600:	4b09      	ldr	r3, [pc, #36]	@ (8000628 <prvMSTSetupUSClock+0x98>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a08      	ldr	r2, [pc, #32]	@ (8000628 <prvMSTSetupUSClock+0x98>)
 8000606:	f043 0301 	orr.w	r3, r3, #1
 800060a:	6013      	str	r3, [r2, #0]

}
 800060c:	bf00      	nop
 800060e:	eeb0 0a67 	vmov.f32	s0, s15
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	40023800 	.word	0x40023800
 800061c:	431bde83 	.word	0x431bde83
 8000620:	2000007c 	.word	0x2000007c
 8000624:	e000edf0 	.word	0xe000edf0
 8000628:	e0001000 	.word	0xe0001000

0800062c <prvMSTGetUS>:
static uint32_t prvMSTGetUS() {
 800062c:	b580      	push	{r7, lr}
 800062e:	b086      	sub	sp, #24
 8000630:	af00      	add	r7, sp, #0
	uint32_t out = tstMSTTimerReferenceFromUser->CNT;
 8000632:	4b13      	ldr	r3, [pc, #76]	@ (8000680 <prvMSTGetUS+0x54>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000638:	617b      	str	r3, [r7, #20]
	BaseType_t clckFreq = HAL_RCC_GetPCLK1Freq();
 800063a:	f002 fa81 	bl	8002b40 <HAL_RCC_GetPCLK1Freq>
 800063e:	4603      	mov	r3, r0
 8000640:	613b      	str	r3, [r7, #16]
	BaseType_t countFreq = clckFreq / (tstMSTTimerReferenceFromUser->PSC + 1);
 8000642:	693a      	ldr	r2, [r7, #16]
 8000644:	4b0e      	ldr	r3, [pc, #56]	@ (8000680 <prvMSTGetUS+0x54>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800064a:	3301      	adds	r3, #1
 800064c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000650:	60fb      	str	r3, [r7, #12]
	float timing = 1.0 / (float) countFreq;
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	ee07 3a90 	vmov	s15, r3
 8000658:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800065c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000660:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000664:	edc7 7a02 	vstr	s15, [r7, #8]
	uint32_t outUS = (DWT->CYCCNT / (24));
 8000668:	4b06      	ldr	r3, [pc, #24]	@ (8000684 <prvMSTGetUS+0x58>)
 800066a:	685b      	ldr	r3, [r3, #4]
 800066c:	4a06      	ldr	r2, [pc, #24]	@ (8000688 <prvMSTGetUS+0x5c>)
 800066e:	fba2 2303 	umull	r2, r3, r2, r3
 8000672:	091b      	lsrs	r3, r3, #4
 8000674:	607b      	str	r3, [r7, #4]
	return outUS;
 8000676:	687b      	ldr	r3, [r7, #4]
}
 8000678:	4618      	mov	r0, r3
 800067a:	3718      	adds	r7, #24
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	2000007c 	.word	0x2000007c
 8000684:	e0001000 	.word	0xe0001000
 8000688:	aaaaaaab 	.word	0xaaaaaaab

0800068c <vMSTPeriodicTaskCreate>:
TaskHandle_t vMSTPeriodicTaskCreate(TaskFunction_t pvJobCode,
		const char *pcName, uint16_t usStackDepth, void *pvParameters,
		UBaseType_t uxPriority, TaskHandle_t *pxCreatedTask,
		/* library-specific parameters */
		TickType_t xTaskPeriod, TickType_t xTaskDeadline, TickType_t xTaskPhase,
		TickType_t xTaskWCET) {
 800068c:	b580      	push	{r7, lr}
 800068e:	b0a2      	sub	sp, #136	@ 0x88
 8000690:	af02      	add	r7, sp, #8
 8000692:	60f8      	str	r0, [r7, #12]
 8000694:	60b9      	str	r1, [r7, #8]
 8000696:	603b      	str	r3, [r7, #0]
 8000698:	4613      	mov	r3, r2
 800069a:	80fb      	strh	r3, [r7, #6]
	extTCB_t *xNewExtTCB;
	/*
	 We manage task using normal delay wrapper
	 We create the specific data structure to hold data about the job
	 */
	if (xTaskCreate(prvMSTPeriodicGenericJob, pcName, usStackDepth,
 800069c:	88fa      	ldrh	r2, [r7, #6]
 800069e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80006a2:	9301      	str	r3, [sp, #4]
 80006a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80006a8:	9300      	str	r3, [sp, #0]
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	68b9      	ldr	r1, [r7, #8]
 80006ae:	4838      	ldr	r0, [pc, #224]	@ (8000790 <vMSTPeriodicTaskCreate+0x104>)
 80006b0:	f004 ff7a 	bl	80055a8 <xTaskCreate>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b01      	cmp	r3, #1
 80006b8:	d164      	bne.n	8000784 <vMSTPeriodicTaskCreate+0xf8>
			pvParameters, uxPriority, pxCreatedTask) == pdPASS) {
		/*
		 Allocate, fill extended TCB using local task storage
		 */
		xNewExtTCB = (extTCB_t*) pvPortMalloc(sizeof(extTCB_t));
 80006ba:	2064      	movs	r0, #100	@ 0x64
 80006bc:	f006 ff46 	bl	800754c <pvPortMalloc>
 80006c0:	67f8      	str	r0, [r7, #124]	@ 0x7c
		*xNewExtTCB = (extTCB_t ) { .pvJobCode = pvJobCode, .pcName = pcName,
 80006c2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80006c4:	4618      	mov	r0, r3
 80006c6:	2364      	movs	r3, #100	@ 0x64
 80006c8:	461a      	mov	r2, r3
 80006ca:	2100      	movs	r1, #0
 80006cc:	f007 f960 	bl	8007990 <memset>
 80006d0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80006d2:	68fa      	ldr	r2, [r7, #12]
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80006d8:	68ba      	ldr	r2, [r7, #8]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80006de:	683a      	ldr	r2, [r7, #0]
 80006e0:	609a      	str	r2, [r3, #8]
 80006e2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80006e4:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80006e8:	60da      	str	r2, [r3, #12]
 80006ea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80006ec:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80006f0:	611a      	str	r2, [r3, #16]
 80006f2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80006f4:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80006f8:	619a      	str	r2, [r3, #24]
 80006fa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80006fc:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8000700:	61da      	str	r2, [r3, #28]
 8000702:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000704:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8000708:	621a      	str	r2, [r3, #32]
 800070a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800070c:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8000710:	625a      	str	r2, [r3, #36]	@ 0x24
		    /*
		     Create the timer,
		     Handle the specific semaphore for the callback
		     */
		    TimerHandle_t xTimer = xTimerCreate("generic periodic timer", // Name of the timer
		    		pdMS_TO_TICKS(xTaskPhase + xTaskPeriod), // Timer period in ticks
 8000712:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8000716:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800071a:	4413      	add	r3, r2
 800071c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000720:	fb02 f303 	mul.w	r3, r2, r3
		    TimerHandle_t xTimer = xTimerCreate("generic periodic timer", // Name of the timer
 8000724:	4a1b      	ldr	r2, [pc, #108]	@ (8000794 <vMSTPeriodicTaskCreate+0x108>)
 8000726:	fba2 2303 	umull	r2, r3, r2, r3
 800072a:	0999      	lsrs	r1, r3, #6
 800072c:	4b1a      	ldr	r3, [pc, #104]	@ (8000798 <vMSTPeriodicTaskCreate+0x10c>)
 800072e:	9300      	str	r3, [sp, #0]
 8000730:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000734:	2201      	movs	r2, #1
 8000736:	4819      	ldr	r0, [pc, #100]	@ (800079c <vMSTPeriodicTaskCreate+0x110>)
 8000738:	f006 f924 	bl	8006984 <xTimerCreate>
 800073c:	67b8      	str	r0, [r7, #120]	@ 0x78
		    		pdTRUE,                                // Auto-reload (periodic)
		    		(void*) pxCreatedTask,               // Task handle as parameter
		    		prvMSTPeriodicTimerCallback                 // Callback function
		    		);
		    xNewExtTCB->xTaskSpecificTimer = xTimer;
 800073e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000740:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8000742:	649a      	str	r2, [r3, #72]	@ 0x48
		    configASSERT(xTimerStart(xTimer, 0) == pdPASS)
 8000744:	f005 f9c0 	bl	8005ac8 <xTaskGetTickCount>
 8000748:	4602      	mov	r2, r0
 800074a:	2300      	movs	r3, #0
 800074c:	9300      	str	r3, [sp, #0]
 800074e:	2300      	movs	r3, #0
 8000750:	2101      	movs	r1, #1
 8000752:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8000754:	f006 f974 	bl	8006a40 <xTimerGenericCommand>
 8000758:	4603      	mov	r3, r0
 800075a:	2b01      	cmp	r3, #1
 800075c:	d00b      	beq.n	8000776 <vMSTPeriodicTaskCreate+0xea>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800075e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000762:	f383 8811 	msr	BASEPRI, r3
 8000766:	f3bf 8f6f 	isb	sy
 800076a:	f3bf 8f4f 	dsb	sy
 800076e:	677b      	str	r3, [r7, #116]	@ 0x74
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000770:	bf00      	nop
 8000772:	bf00      	nop
 8000774:	e7fd      	b.n	8000772 <vMSTPeriodicTaskCreate+0xe6>
        #endif
		vTaskSetThreadLocalStoragePointer(pvParameters, mstLOCAL_STORAGE_DATA_INDEX, xNewExtTCB);
 8000776:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000778:	2100      	movs	r1, #0
 800077a:	6838      	ldr	r0, [r7, #0]
 800077c:	f005 fc42 	bl	8006004 <vTaskSetThreadLocalStoragePointer>
		return pdPASS;
 8000780:	2301      	movs	r3, #1
 8000782:	e000      	b.n	8000786 <vMSTPeriodicTaskCreate+0xfa>
	} else {
		//task created unsuccesfully
		return pdFAIL;
 8000784:	2300      	movs	r3, #0
	}

}
 8000786:	4618      	mov	r0, r3
 8000788:	3780      	adds	r7, #128	@ 0x80
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	080007a1 	.word	0x080007a1
 8000794:	10624dd3 	.word	0x10624dd3
 8000798:	080008dd 	.word	0x080008dd
 800079c:	08008354 	.word	0x08008354

080007a0 <prvMSTPeriodicGenericJob>:
 * This version uses delays
 * 
 * @param pvParameters 
 */

static void prvMSTPeriodicGenericJob(void *pvParameters) {
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b088      	sub	sp, #32
 80007a4:	af02      	add	r7, sp, #8
 80007a6:	6078      	str	r0, [r7, #4]
	#if(mst_test_PERIODIC_METHOD == 2)
		/*
		 Takes notification for current task
		 */
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80007a8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80007ac:	2001      	movs	r0, #1
 80007ae:	f005 fedd 	bl	800656c <ulTaskNotifyTake>
	#endif
	/*
	 Get values about current job
	 */
	TaskHandle_t xCurrentHandle = xTaskGetCurrentTaskHandle();
 80007b2:	f005 fd3d 	bl	8006230 <xTaskGetCurrentTaskHandle>
 80007b6:	6178      	str	r0, [r7, #20]
	extTCB_t *xCurrExtTCB = (extTCB_t*) pvTaskGetThreadLocalStoragePointer(
 80007b8:	2100      	movs	r1, #0
 80007ba:	6978      	ldr	r0, [r7, #20]
 80007bc:	f005 fc50 	bl	8006060 <pvTaskGetThreadLocalStoragePointer>
 80007c0:	6138      	str	r0, [r7, #16]
			xCurrentHandle, mstLOCAL_STORAGE_DATA_INDEX);
	/*
	 We assert that the TCB has been retreived, else we compromised exec
	 */
	configASSERT(xCurrExtTCB != NULL);
 80007c2:	693b      	ldr	r3, [r7, #16]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d10b      	bne.n	80007e0 <prvMSTPeriodicGenericJob+0x40>
	__asm volatile
 80007c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80007cc:	f383 8811 	msr	BASEPRI, r3
 80007d0:	f3bf 8f6f 	isb	sy
 80007d4:	f3bf 8f4f 	dsb	sy
 80007d8:	60bb      	str	r3, [r7, #8]
}
 80007da:	bf00      	nop
 80007dc:	bf00      	nop
 80007de:	e7fd      	b.n	80007dc <prvMSTPeriodicGenericJob+0x3c>
	/*
	 First iteration with phase passed, change the period to not have the phase
	 */
	if (xCurrExtTCB->xTaskInitDone == pdFALSE) {
 80007e0:	693b      	ldr	r3, [r7, #16]
 80007e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d11f      	bne.n	8000828 <prvMSTPeriodicGenericJob+0x88>
		xCurrExtTCB->xTaskInitDone = pdTRUE;
 80007e8:	693b      	ldr	r3, [r7, #16]
 80007ea:	2201      	movs	r2, #1
 80007ec:	645a      	str	r2, [r3, #68]	@ 0x44
		#if(TESTING_STM32)
				//this is the us at start
				xCurrExtTCB->xUsFromIdealRelease = 0;
 80007ee:	693b      	ldr	r3, [r7, #16]
 80007f0:	2200      	movs	r2, #0
 80007f2:	64da      	str	r2, [r3, #76]	@ 0x4c
				xCurrExtTCB->xUsAverageReleaseGap = 0;
 80007f4:	693b      	ldr	r3, [r7, #16]
 80007f6:	2200      	movs	r2, #0
 80007f8:	655a      	str	r2, [r3, #84]	@ 0x54
		#endif

		if (xCurrExtTCB->xTaskPhase > 0) {
 80007fa:	693b      	ldr	r3, [r7, #16]
 80007fc:	6a1b      	ldr	r3, [r3, #32]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d012      	beq.n	8000828 <prvMSTPeriodicGenericJob+0x88>
			 If we have a phase, we should have just passed it
			 */
			#if(mst_test_PERIODIC_METHOD == 1)
                vTaskDelayUntil(&(xCurrExtTCB->xPrevReleaseTime), xCurrExtTCB->xTaskPhase);
            #elif(mst_test_PERIODIC_METHOD == 2)
                xTimerChangePeriod(xCurrExtTCB->xTaskSpecificTimer,
 8000802:	693b      	ldr	r3, [r7, #16]
 8000804:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8000806:	693b      	ldr	r3, [r7, #16]
 8000808:	699b      	ldr	r3, [r3, #24]
 800080a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800080e:	fb02 f303 	mul.w	r3, r2, r3
 8000812:	4a31      	ldr	r2, [pc, #196]	@ (80008d8 <prvMSTPeriodicGenericJob+0x138>)
 8000814:	fba2 2303 	umull	r2, r3, r2, r3
 8000818:	099a      	lsrs	r2, r3, #6
 800081a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800081e:	9300      	str	r3, [sp, #0]
 8000820:	2300      	movs	r3, #0
 8000822:	2104      	movs	r1, #4
 8000824:	f006 f90c 	bl	8006a40 <xTimerGenericCommand>
			#endif
		}

	}

	xCurrExtTCB->xPrevReleaseTime = xTaskGetTickCount();
 8000828:	f005 f94e 	bl	8005ac8 <xTaskGetTickCount>
 800082c:	4602      	mov	r2, r0
 800082e:	693b      	ldr	r3, [r7, #16]
 8000830:	629a      	str	r2, [r3, #40]	@ 0x28
	for (;;) {

		#if(TESTING_STM32)
				//count gap from execution if testing
		#if(mst_test_PERIODIC_METHOD == 2)
				xCurrExtTCB->xNumOfIterations++;
 8000832:	693b      	ldr	r3, [r7, #16]
 8000834:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000836:	1c5a      	adds	r2, r3, #1
 8000838:	693b      	ldr	r3, [r7, #16]
 800083a:	651a      	str	r2, [r3, #80]	@ 0x50
		#endif
				//calculate the absolute perfect release in us
				uint32_t perfRelease = xCurrExtTCB->xTaskPhase * 1000
 800083c:	693b      	ldr	r3, [r7, #16]
 800083e:	6a1a      	ldr	r2, [r3, #32]
						+ xCurrExtTCB->xTaskPeriod * 1000
 8000840:	693b      	ldr	r3, [r7, #16]
 8000842:	699b      	ldr	r3, [r3, #24]
								* (xCurrExtTCB->xNumOfIterations);
 8000844:	6939      	ldr	r1, [r7, #16]
 8000846:	6d09      	ldr	r1, [r1, #80]	@ 0x50
 8000848:	fb01 f303 	mul.w	r3, r1, r3
						+ xCurrExtTCB->xTaskPeriod * 1000
 800084c:	4413      	add	r3, r2
				uint32_t perfRelease = xCurrExtTCB->xTaskPhase * 1000
 800084e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000852:	fb02 f303 	mul.w	r3, r2, r3
 8000856:	60fb      	str	r3, [r7, #12]
				//calculate the gap between perfect and absolute gap in us and update the avg
				xCurrExtTCB->xUsFromIdealRelease += prvMSTGetUS() - perfRelease;
 8000858:	f7ff fee8 	bl	800062c <prvMSTGetUS>
 800085c:	4602      	mov	r2, r0
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	1ad3      	subs	r3, r2, r3
 8000862:	693a      	ldr	r2, [r7, #16]
 8000864:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8000866:	4413      	add	r3, r2
 8000868:	461a      	mov	r2, r3
 800086a:	693b      	ldr	r3, [r7, #16]
 800086c:	64da      	str	r2, [r3, #76]	@ 0x4c
				if (xCurrExtTCB->xNumOfIterations > 0) {
 800086e:	693b      	ldr	r3, [r7, #16]
 8000870:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000872:	2b00      	cmp	r3, #0
 8000874:	d009      	beq.n	800088a <prvMSTPeriodicGenericJob+0xea>
					xCurrExtTCB->xUsAverageReleaseGap =
							(xCurrExtTCB->xUsFromIdealRelease)
 8000876:	693b      	ldr	r3, [r7, #16]
 8000878:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800087a:	461a      	mov	r2, r3
									/ (xCurrExtTCB->xNumOfIterations);
 800087c:	693b      	ldr	r3, [r7, #16]
 800087e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000880:	fbb2 f3f3 	udiv	r3, r2, r3
 8000884:	461a      	mov	r2, r3
					xCurrExtTCB->xUsAverageReleaseGap =
 8000886:	693b      	ldr	r3, [r7, #16]
 8000888:	655a      	str	r2, [r3, #84]	@ 0x54
			#endif
		#endif
		/*
		 Run user code
		 */
		xCurrExtTCB->xPrevStartTime = xTaskGetTickCount();
 800088a:	f005 f91d 	bl	8005ac8 <xTaskGetTickCount>
 800088e:	4602      	mov	r2, r0
 8000890:	693b      	ldr	r3, [r7, #16]
 8000892:	635a      	str	r2, [r3, #52]	@ 0x34
		xCurrExtTCB->pvJobCode(pvParameters);
 8000894:	693b      	ldr	r3, [r7, #16]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	6878      	ldr	r0, [r7, #4]
 800089a:	4798      	blx	r3
		xCurrExtTCB->xPrevFinishTime = xTaskGetTickCount();
 800089c:	f005 f914 	bl	8005ac8 <xTaskGetTickCount>
 80008a0:	4602      	mov	r2, r0
 80008a2:	693b      	ldr	r3, [r7, #16]
 80008a4:	639a      	str	r2, [r3, #56]	@ 0x38
		xCurrExtTCB->xPrevExecTime = xCurrExtTCB->xPrevFinishTime
 80008a6:	693b      	ldr	r3, [r7, #16]
 80008a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
				- xCurrExtTCB->xPrevStartTime;
 80008aa:	693b      	ldr	r3, [r7, #16]
 80008ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008ae:	1ad2      	subs	r2, r2, r3
		xCurrExtTCB->xPrevExecTime = xCurrExtTCB->xPrevFinishTime
 80008b0:	693b      	ldr	r3, [r7, #16]
 80008b2:	62da      	str	r2, [r3, #44]	@ 0x2c

		if (xCurrExtTCB->xPrevExecTime > xCurrExtTCB->xTaskDeadline) {
 80008b4:	693b      	ldr	r3, [r7, #16]
 80008b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80008b8:	693b      	ldr	r3, [r7, #16]
 80008ba:	69db      	ldr	r3, [r3, #28]
 80008bc:	429a      	cmp	r2, r3
 80008be:	d904      	bls.n	80008ca <prvMSTPeriodicGenericJob+0x12a>
			//current task got over the deadline, make notice of the event
			xCurrExtTCB->uNumOfMissedDeadlines++;
 80008c0:	693b      	ldr	r3, [r7, #16]
 80008c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80008c4:	1c5a      	adds	r2, r3, #1
 80008c6:	693b      	ldr	r3, [r7, #16]
 80008c8:	63da      	str	r2, [r3, #60]	@ 0x3c
			Update scheduler-referenced release time
			*/
			//vTaskDelay(pdMS_TO_TICKS(xCurrExtTCB->xTaskPeriod));
			vTaskDelayUntil(&(xCurrExtTCB->xPrevReleaseTime), pdMS_TO_TICKS(xCurrExtTCB->xTaskPeriod));
        #elif(mst_test_PERIODIC_METHOD == 2)
			ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80008ca:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80008ce:	2001      	movs	r0, #1
 80008d0:	f005 fe4c 	bl	800656c <ulTaskNotifyTake>
	for (;;) {
 80008d4:	e7ad      	b.n	8000832 <prvMSTPeriodicGenericJob+0x92>
 80008d6:	bf00      	nop
 80008d8:	10624dd3 	.word	0x10624dd3

080008dc <prvMSTPeriodicTimerCallback>:

#if(mst_test_PERIODIC_METHOD == 2)
/*
 Using periodic timers with mutexes
 */
static void prvMSTPeriodicTimerCallback(TimerHandle_t xTimer) {
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
	/*
	 Here the callback of a ceratin task timer is called, it shall have the semaphore
	 as parameter
	 */
	TaskHandle_t *param = (TaskHandle_t*) pvTimerGetTimerID(xTimer);
 80008e4:	6878      	ldr	r0, [r7, #4]
 80008e6:	f006 fbbb 	bl	8007060 <pvTimerGetTimerID>
 80008ea:	60f8      	str	r0, [r7, #12]

	xTaskNotifyGive(*param);
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	6818      	ldr	r0, [r3, #0]
 80008f0:	2300      	movs	r3, #0
 80008f2:	2202      	movs	r2, #2
 80008f4:	2100      	movs	r1, #0
 80008f6:	f005 fee5 	bl	80066c4 <xTaskGenericNotify>
}
 80008fa:	bf00      	nop
 80008fc:	3710      	adds	r7, #16
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}

08000902 <prvMSTSporadicTimerCallback>:

static void prvMSTSporadicTimerCallback(TimerHandle_t xTimer) {
 8000902:	b580      	push	{r7, lr}
 8000904:	b084      	sub	sp, #16
 8000906:	af00      	add	r7, sp, #0
 8000908:	6078      	str	r0, [r7, #4]
	/*
	 Notify a sporadic task but make sure it knows it was the timer to notify, by passing a parameter
	 */
	TaskHandle_t *param = (TaskHandle_t*) pvTimerGetTimerID(xTimer);
 800090a:	6878      	ldr	r0, [r7, #4]
 800090c:	f006 fba8 	bl	8007060 <pvTimerGetTimerID>
 8000910:	60f8      	str	r0, [r7, #12]
	enum sporadicTaskNotifyGiver_e giver = interarrivalTimer;
 8000912:	2301      	movs	r3, #1
 8000914:	72fb      	strb	r3, [r7, #11]
	xTaskNotify(*param, (uint32_t )giver, eSetValueWithOverwrite);
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	6818      	ldr	r0, [r3, #0]
 800091a:	7af9      	ldrb	r1, [r7, #11]
 800091c:	2300      	movs	r3, #0
 800091e:	2203      	movs	r2, #3
 8000920:	f005 fed0 	bl	80066c4 <xTaskGenericNotify>
}
 8000924:	bf00      	nop
 8000926:	3710      	adds	r7, #16
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}

0800092c <vMSTSporadicTaskCreate>:
BaseType_t vMSTSporadicTaskCreate(TaskFunction_t pvJobCode, const char *pcName,
		uint16_t usStackDepth, void *pvParameters, UBaseType_t uxPriority,
		TaskHandle_t *pxCreatedTask,
		/* library-specific parameters */
		TickType_t xTaskInterarrivalTime, TickType_t xTaskDeadline,
		TickType_t xTaskWCET) {
 800092c:	b580      	push	{r7, lr}
 800092e:	b0a0      	sub	sp, #128	@ 0x80
 8000930:	af02      	add	r7, sp, #8
 8000932:	60f8      	str	r0, [r7, #12]
 8000934:	60b9      	str	r1, [r7, #8]
 8000936:	603b      	str	r3, [r7, #0]
 8000938:	4613      	mov	r3, r2
 800093a:	80fb      	strh	r3, [r7, #6]

	extTCB_t *xNewExtTCB;
	if (xTaskCreate(prvMSTSporadicGenericJob, pcName, usStackDepth,
 800093c:	88fa      	ldrh	r2, [r7, #6]
 800093e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000942:	9301      	str	r3, [sp, #4]
 8000944:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000948:	9300      	str	r3, [sp, #0]
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	68b9      	ldr	r1, [r7, #8]
 800094e:	481b      	ldr	r0, [pc, #108]	@ (80009bc <vMSTSporadicTaskCreate+0x90>)
 8000950:	f004 fe2a 	bl	80055a8 <xTaskCreate>
 8000954:	4603      	mov	r3, r0
 8000956:	2b01      	cmp	r3, #1
 8000958:	d12a      	bne.n	80009b0 <vMSTSporadicTaskCreate+0x84>
			pvParameters, uxPriority, pxCreatedTask) == pdPASS) {
		/*
		 Allocate, fill extended TCB using local task storage
		 */
		xNewExtTCB = (extTCB_t*) pvPortMalloc(sizeof(extTCB_t));
 800095a:	2064      	movs	r0, #100	@ 0x64
 800095c:	f006 fdf6 	bl	800754c <pvPortMalloc>
 8000960:	6778      	str	r0, [r7, #116]	@ 0x74
		*xNewExtTCB = (extTCB_t ) { .pvJobCode = pvJobCode, .pcName = pcName,
 8000962:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000964:	4618      	mov	r0, r3
 8000966:	2364      	movs	r3, #100	@ 0x64
 8000968:	461a      	mov	r2, r3
 800096a:	2100      	movs	r1, #0
 800096c:	f007 f810 	bl	8007990 <memset>
 8000970:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000972:	68fa      	ldr	r2, [r7, #12]
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000978:	68ba      	ldr	r2, [r7, #8]
 800097a:	605a      	str	r2, [r3, #4]
 800097c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800097e:	683a      	ldr	r2, [r7, #0]
 8000980:	609a      	str	r2, [r3, #8]
 8000982:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000984:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8000988:	60da      	str	r2, [r3, #12]
 800098a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800098c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8000990:	611a      	str	r2, [r3, #16]
 8000992:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000994:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8000998:	61da      	str	r2, [r3, #28]
 800099a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800099c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80009a0:	659a      	str	r2, [r3, #88]	@ 0x58

		//TODO: implement with delays ( == 1)
		/*
		 We create the task and allocate, but we do not clear the mutex nor start the timer
		 */
		vTaskSetThreadLocalStoragePointer(pvParameters, mstLOCAL_STORAGE_DATA_INDEX, xNewExtTCB);
 80009a2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80009a4:	2100      	movs	r1, #0
 80009a6:	6838      	ldr	r0, [r7, #0]
 80009a8:	f005 fb2c 	bl	8006004 <vTaskSetThreadLocalStoragePointer>
		return pdPASS;
 80009ac:	2301      	movs	r3, #1
 80009ae:	e000      	b.n	80009b2 <vMSTSporadicTaskCreate+0x86>
	} else {
		//task created unsuccesfully
		return pdFAIL;
 80009b0:	2300      	movs	r3, #0
	}
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3778      	adds	r7, #120	@ 0x78
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	080009c1 	.word	0x080009c1

080009c0 <prvMSTSporadicGenericJob>:
 * This version uses delays
 * 
 * @param pvParameters 
 */

static void prvMSTSporadicGenericJob(void *pvParameters) {
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b08a      	sub	sp, #40	@ 0x28
 80009c4:	af02      	add	r7, sp, #8
 80009c6:	6078      	str	r0, [r7, #4]

	TaskHandle_t xCurrentHandle = xTaskGetCurrentTaskHandle();
 80009c8:	f005 fc32 	bl	8006230 <xTaskGetCurrentTaskHandle>
 80009cc:	61f8      	str	r0, [r7, #28]
	extTCB_t *xCurrExtTCB = (extTCB_t*) pvTaskGetThreadLocalStoragePointer(
 80009ce:	2100      	movs	r1, #0
 80009d0:	69f8      	ldr	r0, [r7, #28]
 80009d2:	f005 fb45 	bl	8006060 <pvTaskGetThreadLocalStoragePointer>
 80009d6:	61b8      	str	r0, [r7, #24]
			xCurrentHandle, mstLOCAL_STORAGE_DATA_INDEX);
	configASSERT(xCurrExtTCB != NULL);
 80009d8:	69bb      	ldr	r3, [r7, #24]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d10b      	bne.n	80009f6 <prvMSTSporadicGenericJob+0x36>
	__asm volatile
 80009de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80009e2:	f383 8811 	msr	BASEPRI, r3
 80009e6:	f3bf 8f6f 	isb	sy
 80009ea:	f3bf 8f4f 	dsb	sy
 80009ee:	613b      	str	r3, [r7, #16]
}
 80009f0:	bf00      	nop
 80009f2:	bf00      	nop
 80009f4:	e7fd      	b.n	80009f2 <prvMSTSporadicGenericJob+0x32>
        #elif(mst_test_PERIODIC_METHOD == 2)
		/*
		 Takes notification for current task, could be from timer or user
		 */
		uint32_t notificationGiver;
		if (xTaskNotifyWait(0, 0, &notificationGiver, portMAX_DELAY) == pdPASS) {
 80009f6:	f107 0208 	add.w	r2, r7, #8
 80009fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80009fe:	2100      	movs	r1, #0
 8000a00:	2000      	movs	r0, #0
 8000a02:	f005 fdff 	bl	8006604 <xTaskNotifyWait>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b01      	cmp	r3, #1
 8000a0a:	d115      	bne.n	8000a38 <prvMSTSporadicGenericJob+0x78>
			if (notificationGiver == interarrivalTimer) {
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	2b01      	cmp	r3, #1
 8000a10:	d107      	bne.n	8000a22 <prvMSTSporadicGenericJob+0x62>
				//it was the interarrival timer that woke up the task
				xCurrExtTCB->xInterarrivalTimerRunning = pdFALSE;
 8000a12:	69bb      	ldr	r3, [r7, #24]
 8000a14:	2200      	movs	r2, #0
 8000a16:	65da      	str	r2, [r3, #92]	@ 0x5c
				if (xCurrExtTCB->xJobCalled == pdFALSE) {
 8000a18:	69bb      	ldr	r3, [r7, #24]
 8000a1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d10b      	bne.n	8000a38 <prvMSTSporadicGenericJob+0x78>
					continue;
 8000a20:	e05b      	b.n	8000ada <prvMSTSporadicGenericJob+0x11a>
				}
			} else if (notificationGiver == userRequest) {
 8000a22:	68bb      	ldr	r3, [r7, #8]
 8000a24:	2b02      	cmp	r3, #2
 8000a26:	d107      	bne.n	8000a38 <prvMSTSporadicGenericJob+0x78>
				//user requested to run
				if (xCurrExtTCB->xInterarrivalTimerRunning == pdTRUE) {
 8000a28:	69bb      	ldr	r3, [r7, #24]
 8000a2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000a2c:	2b01      	cmp	r3, #1
 8000a2e:	d103      	bne.n	8000a38 <prvMSTSporadicGenericJob+0x78>
					xCurrExtTCB->xJobCalled = pdTRUE;
 8000a30:	69bb      	ldr	r3, [r7, #24]
 8000a32:	2201      	movs	r2, #1
 8000a34:	661a      	str	r2, [r3, #96]	@ 0x60
					continue;
 8000a36:	e050      	b.n	8000ada <prvMSTSporadicGenericJob+0x11a>
			}
		}
		/*
		 Notify job called and interarrival timer from release
		 */
		xCurrExtTCB->xJobCalled = pdTRUE;
 8000a38:	69bb      	ldr	r3, [r7, #24]
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	661a      	str	r2, [r3, #96]	@ 0x60
		TimerHandle_t xTimer = xTimerCreate("sporadic interarrival timer", // Name of the timer
				pdMS_TO_TICKS(xCurrExtTCB->xTaskInterarrivalTime), // Timer period in ticks
 8000a3e:	69bb      	ldr	r3, [r7, #24]
 8000a40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a42:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000a46:	fb02 f303 	mul.w	r3, r2, r3
		TimerHandle_t xTimer = xTimerCreate("sporadic interarrival timer", // Name of the timer
 8000a4a:	4a24      	ldr	r2, [pc, #144]	@ (8000adc <prvMSTSporadicGenericJob+0x11c>)
 8000a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8000a50:	0999      	lsrs	r1, r3, #6
				pdFALSE,                               // Auto-reload (periodic)
				(void*) (xCurrExtTCB->pxCreatedTask), // Task handle as parameter
 8000a52:	69bb      	ldr	r3, [r7, #24]
 8000a54:	691b      	ldr	r3, [r3, #16]
		TimerHandle_t xTimer = xTimerCreate("sporadic interarrival timer", // Name of the timer
 8000a56:	4a22      	ldr	r2, [pc, #136]	@ (8000ae0 <prvMSTSporadicGenericJob+0x120>)
 8000a58:	9200      	str	r2, [sp, #0]
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	4821      	ldr	r0, [pc, #132]	@ (8000ae4 <prvMSTSporadicGenericJob+0x124>)
 8000a5e:	f005 ff91 	bl	8006984 <xTimerCreate>
 8000a62:	6178      	str	r0, [r7, #20]
				prvMSTSporadicTimerCallback                 // Callback function
				);
		configASSERT(xTimerStart(xTimer, 0) == pdPASS)
 8000a64:	f005 f830 	bl	8005ac8 <xTaskGetTickCount>
 8000a68:	4602      	mov	r2, r0
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	9300      	str	r3, [sp, #0]
 8000a6e:	2300      	movs	r3, #0
 8000a70:	2101      	movs	r1, #1
 8000a72:	6978      	ldr	r0, [r7, #20]
 8000a74:	f005 ffe4 	bl	8006a40 <xTimerGenericCommand>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	d00b      	beq.n	8000a96 <prvMSTSporadicGenericJob+0xd6>
	__asm volatile
 8000a7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000a82:	f383 8811 	msr	BASEPRI, r3
 8000a86:	f3bf 8f6f 	isb	sy
 8000a8a:	f3bf 8f4f 	dsb	sy
 8000a8e:	60fb      	str	r3, [r7, #12]
}
 8000a90:	bf00      	nop
 8000a92:	bf00      	nop
 8000a94:	e7fd      	b.n	8000a92 <prvMSTSporadicGenericJob+0xd2>
		xCurrExtTCB->xTaskSpecificTimer = xTimer;
 8000a96:	69bb      	ldr	r3, [r7, #24]
 8000a98:	697a      	ldr	r2, [r7, #20]
 8000a9a:	649a      	str	r2, [r3, #72]	@ 0x48
		taskENTER_CRITICAL(); //maybe not needed
 8000a9c:	f006 fc34 	bl	8007308 <vPortEnterCritical>
		xCurrExtTCB->xInterarrivalTimerRunning = pdTRUE;
 8000aa0:	69bb      	ldr	r3, [r7, #24]
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	65da      	str	r2, [r3, #92]	@ 0x5c
		xCurrExtTCB->xJobCalled = pdFALSE;
 8000aa6:	69bb      	ldr	r3, [r7, #24]
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	661a      	str	r2, [r3, #96]	@ 0x60
		taskEXIT_CRITICAL();
 8000aac:	f006 fc5e 	bl	800736c <vPortExitCritical>
#endif
		xCurrExtTCB->xPrevStartTime = xTaskGetTickCount();
 8000ab0:	f005 f80a 	bl	8005ac8 <xTaskGetTickCount>
 8000ab4:	4602      	mov	r2, r0
 8000ab6:	69bb      	ldr	r3, [r7, #24]
 8000ab8:	635a      	str	r2, [r3, #52]	@ 0x34
		xCurrExtTCB->pvJobCode(pvParameters);
 8000aba:	69bb      	ldr	r3, [r7, #24]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	6878      	ldr	r0, [r7, #4]
 8000ac0:	4798      	blx	r3
		/*
		 If periodic job is called within the task itself its no problem since the timer is going
		 */
		xCurrExtTCB->xPrevFinishTime = xTaskGetTickCount();
 8000ac2:	f005 f801 	bl	8005ac8 <xTaskGetTickCount>
 8000ac6:	4602      	mov	r2, r0
 8000ac8:	69bb      	ldr	r3, [r7, #24]
 8000aca:	639a      	str	r2, [r3, #56]	@ 0x38
		xCurrExtTCB->xPrevExecTime = xCurrExtTCB->xPrevFinishTime
 8000acc:	69bb      	ldr	r3, [r7, #24]
 8000ace:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
				- xCurrExtTCB->xPrevStartTime;
 8000ad0:	69bb      	ldr	r3, [r7, #24]
 8000ad2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ad4:	1ad2      	subs	r2, r2, r3
		xCurrExtTCB->xPrevExecTime = xCurrExtTCB->xPrevFinishTime
 8000ad6:	69bb      	ldr	r3, [r7, #24]
 8000ad8:	62da      	str	r2, [r3, #44]	@ 0x2c
	for (;;) {
 8000ada:	e78c      	b.n	80009f6 <prvMSTSporadicGenericJob+0x36>
 8000adc:	10624dd3 	.word	0x10624dd3
 8000ae0:	08000903 	.word	0x08000903
 8000ae4:	0800836c 	.word	0x0800836c

08000ae8 <vMSTSporadicTaskRun>:
	}
}

BaseType_t vMSTSporadicTaskRun(TaskHandle_t *pxTaskToRunHandle) {
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
	/*
	 We check if the task has been created, one way of doing this is by seeing if the TCB is ok
	 maybe there are other better ways
	 */
	extTCB_t *xCurrExtTCB = (extTCB_t*) pvTaskGetThreadLocalStoragePointer(
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	2100      	movs	r1, #0
 8000af6:	4618      	mov	r0, r3
 8000af8:	f005 fab2 	bl	8006060 <pvTaskGetThreadLocalStoragePointer>
 8000afc:	60f8      	str	r0, [r7, #12]
			*pxTaskToRunHandle, mstLOCAL_STORAGE_DATA_INDEX);
	enum sporadicTaskNotifyGiver_e giver = userRequest;
 8000afe:	2302      	movs	r3, #2
 8000b00:	72fb      	strb	r3, [r7, #11]
	xTaskNotify(*pxTaskToRunHandle, (uint32_t )giver, eSetValueWithOverwrite);
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	6818      	ldr	r0, [r3, #0]
 8000b06:	7af9      	ldrb	r1, [r7, #11]
 8000b08:	2300      	movs	r3, #0
 8000b0a:	2203      	movs	r2, #3
 8000b0c:	f005 fdda 	bl	80066c4 <xTaskGenericNotify>
	if (xCurrExtTCB == NULL) {
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d101      	bne.n	8000b1a <vMSTSporadicTaskRun+0x32>
		return pdFAIL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	e000      	b.n	8000b1c <vMSTSporadicTaskRun+0x34>
	} else {
		return pdPASS;
 8000b1a:	2301      	movs	r3, #1
	}
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	3710      	adds	r7, #16
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}

08000b24 <vMSTSchedulerStart>:

/*
 MST version of scheduler start
 */
void vMSTSchedulerStart(void) {
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
	prvMSTSetupUSClock();
 8000b28:	f7ff fd32 	bl	8000590 <prvMSTSetupUSClock>
	vTaskStartScheduler();
 8000b2c:	f004 feae 	bl	800588c <vTaskStartScheduler>
}
 8000b30:	bf00      	nop
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
	ulStatsTimerTicks = 0;
 8000b38:	4b03      	ldr	r3, [pc, #12]	@ (8000b48 <configureTimerForRunTimeStats+0x14>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim10);
 8000b3e:	4803      	ldr	r0, [pc, #12]	@ (8000b4c <configureTimerForRunTimeStats+0x18>)
 8000b40:	f002 f8a8 	bl	8002c94 <HAL_TIM_Base_Start_IT>
}
 8000b44:	bf00      	nop
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	20000080 	.word	0x20000080
 8000b4c:	200000cc 	.word	0x200000cc

08000b50 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
return ulStatsTimerTicks;
 8000b54:	4b03      	ldr	r3, [pc, #12]	@ (8000b64 <getRunTimeCounterValue+0x14>)
 8000b56:	681b      	ldr	r3, [r3, #0]
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	20000080 	.word	0x20000080

08000b68 <MSTTask1>:
TaskHandle_t Task1Handle;
TaskHandle_t Task2Handle;
TaskHandle_t Task3Handle;

void MSTTask1(void *pvParameters)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
	if (xSemaphoreTake(xBinarySemUART2, portMAX_DELAY) == pdTRUE){
 8000b70:	4b10      	ldr	r3, [pc, #64]	@ (8000bb4 <MSTTask1+0x4c>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f004 fa1f 	bl	8004fbc <xQueueSemaphoreTake>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	d113      	bne.n	8000bac <MSTTask1+0x44>
		length = snprintf((char *)transmit, sizeof(transmit), "Task1\n");
 8000b84:	4a0c      	ldr	r2, [pc, #48]	@ (8000bb8 <MSTTask1+0x50>)
 8000b86:	210a      	movs	r1, #10
 8000b88:	480c      	ldr	r0, [pc, #48]	@ (8000bbc <MSTTask1+0x54>)
 8000b8a:	f006 fecd 	bl	8007928 <sniprintf>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	4a0b      	ldr	r2, [pc, #44]	@ (8000bc0 <MSTTask1+0x58>)
 8000b92:	6013      	str	r3, [r2, #0]
		HAL_Delay(300);
 8000b94:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000b98:	f000 fd16 	bl	80015c8 <HAL_Delay>
		HAL_UART_Transmit_DMA(&huart2, transmit, length);
 8000b9c:	4b08      	ldr	r3, [pc, #32]	@ (8000bc0 <MSTTask1+0x58>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	b29b      	uxth	r3, r3
 8000ba2:	461a      	mov	r2, r3
 8000ba4:	4905      	ldr	r1, [pc, #20]	@ (8000bbc <MSTTask1+0x54>)
 8000ba6:	4807      	ldr	r0, [pc, #28]	@ (8000bc4 <MSTTask1+0x5c>)
 8000ba8:	f002 fcae 	bl	8003508 <HAL_UART_Transmit_DMA>
	}
}
 8000bac:	bf00      	nop
 8000bae:	3708      	adds	r7, #8
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	20000204 	.word	0x20000204
 8000bb8:	08008388 	.word	0x08008388
 8000bbc:	20000208 	.word	0x20000208
 8000bc0:	20000214 	.word	0x20000214
 8000bc4:	2000015c 	.word	0x2000015c

08000bc8 <MSTTask2>:

void MSTTask2(void *pvParameters)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
	vMSTSporadicTaskRun(&Task3Handle);
 8000bd0:	4810      	ldr	r0, [pc, #64]	@ (8000c14 <MSTTask2+0x4c>)
 8000bd2:	f7ff ff89 	bl	8000ae8 <vMSTSporadicTaskRun>
	if (xSemaphoreTake(xBinarySemUART2, portMAX_DELAY) == pdTRUE){
 8000bd6:	4b10      	ldr	r3, [pc, #64]	@ (8000c18 <MSTTask2+0x50>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000bde:	4618      	mov	r0, r3
 8000be0:	f004 f9ec 	bl	8004fbc <xQueueSemaphoreTake>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d10f      	bne.n	8000c0a <MSTTask2+0x42>
		length = snprintf((char *)transmit, sizeof(transmit), "Task2\n");
 8000bea:	4a0c      	ldr	r2, [pc, #48]	@ (8000c1c <MSTTask2+0x54>)
 8000bec:	210a      	movs	r1, #10
 8000bee:	480c      	ldr	r0, [pc, #48]	@ (8000c20 <MSTTask2+0x58>)
 8000bf0:	f006 fe9a 	bl	8007928 <sniprintf>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	4a0b      	ldr	r2, [pc, #44]	@ (8000c24 <MSTTask2+0x5c>)
 8000bf8:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit_DMA(&huart2, transmit, length);
 8000bfa:	4b0a      	ldr	r3, [pc, #40]	@ (8000c24 <MSTTask2+0x5c>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	b29b      	uxth	r3, r3
 8000c00:	461a      	mov	r2, r3
 8000c02:	4907      	ldr	r1, [pc, #28]	@ (8000c20 <MSTTask2+0x58>)
 8000c04:	4808      	ldr	r0, [pc, #32]	@ (8000c28 <MSTTask2+0x60>)
 8000c06:	f002 fc7f 	bl	8003508 <HAL_UART_Transmit_DMA>
	}
}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	20000220 	.word	0x20000220
 8000c18:	20000204 	.word	0x20000204
 8000c1c:	08008390 	.word	0x08008390
 8000c20:	20000208 	.word	0x20000208
 8000c24:	20000214 	.word	0x20000214
 8000c28:	2000015c 	.word	0x2000015c

08000c2c <MSTTask3>:

void MSTTask3(void *pvParameters)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
	if (xSemaphoreTake(xBinarySemUART2, portMAX_DELAY) == pdTRUE){
 8000c34:	4b0e      	ldr	r3, [pc, #56]	@ (8000c70 <MSTTask3+0x44>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f004 f9bd 	bl	8004fbc <xQueueSemaphoreTake>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d10f      	bne.n	8000c68 <MSTTask3+0x3c>
		length = snprintf((char *)transmit, sizeof(transmit), "SPORADIC\n");
 8000c48:	4a0a      	ldr	r2, [pc, #40]	@ (8000c74 <MSTTask3+0x48>)
 8000c4a:	210a      	movs	r1, #10
 8000c4c:	480a      	ldr	r0, [pc, #40]	@ (8000c78 <MSTTask3+0x4c>)
 8000c4e:	f006 fe6b 	bl	8007928 <sniprintf>
 8000c52:	4603      	mov	r3, r0
 8000c54:	4a09      	ldr	r2, [pc, #36]	@ (8000c7c <MSTTask3+0x50>)
 8000c56:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit_DMA(&huart2, transmit, length);
 8000c58:	4b08      	ldr	r3, [pc, #32]	@ (8000c7c <MSTTask3+0x50>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	b29b      	uxth	r3, r3
 8000c5e:	461a      	mov	r2, r3
 8000c60:	4905      	ldr	r1, [pc, #20]	@ (8000c78 <MSTTask3+0x4c>)
 8000c62:	4807      	ldr	r0, [pc, #28]	@ (8000c80 <MSTTask3+0x54>)
 8000c64:	f002 fc50 	bl	8003508 <HAL_UART_Transmit_DMA>
	}
}
 8000c68:	bf00      	nop
 8000c6a:	3708      	adds	r7, #8
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	20000204 	.word	0x20000204
 8000c74:	08008398 	.word	0x08008398
 8000c78:	20000208 	.word	0x20000208
 8000c7c:	20000214 	.word	0x20000214
 8000c80:	2000015c 	.word	0x2000015c

08000c84 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
	if(huart == &huart2){
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	4a08      	ldr	r2, [pc, #32]	@ (8000cb0 <HAL_UART_TxCpltCallback+0x2c>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d109      	bne.n	8000ca8 <HAL_UART_TxCpltCallback+0x24>
		//free sem
		BaseType_t xHigherPr = pdFALSE;
 8000c94:	2300      	movs	r3, #0
 8000c96:	60fb      	str	r3, [r7, #12]
		xSemaphoreGiveFromISR(xBinarySemUART2, &xHigherPr);
 8000c98:	4b06      	ldr	r3, [pc, #24]	@ (8000cb4 <HAL_UART_TxCpltCallback+0x30>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f107 020c 	add.w	r2, r7, #12
 8000ca0:	4611      	mov	r1, r2
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f004 f818 	bl	8004cd8 <xQueueGiveFromISR>
	}
}
 8000ca8:	bf00      	nop
 8000caa:	3710      	adds	r7, #16
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	2000015c 	.word	0x2000015c
 8000cb4:	20000204 	.word	0x20000204

08000cb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b086      	sub	sp, #24
 8000cbc:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cbe:	f000 fc41 	bl	8001544 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cc2:	f000 f875 	bl	8000db0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cc6:	f000 f9bf 	bl	8001048 <MX_GPIO_Init>
  MX_DMA_Init();
 8000cca:	f000 f99d 	bl	8001008 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000cce:	f000 f971 	bl	8000fb4 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000cd2:	f000 f945 	bl	8000f60 <MX_USART1_UART_Init>
  MX_TIM10_Init();
 8000cd6:	f000 f921 	bl	8000f1c <MX_TIM10_Init>
  MX_TIM2_Init();
 8000cda:	f000 f8d3 	bl	8000e84 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */


	#if(TESTING_STM32==1)
  	  tstMSTGiveTimerReference(TIM2);
 8000cde:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000ce2:	f7ff fc45 	bl	8000570 <tstMSTGiveTimerReference>
	#endif



  	  vMSTPeriodicTaskCreate(
 8000ce6:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000cea:	9305      	str	r3, [sp, #20]
 8000cec:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000cf0:	9304      	str	r3, [sp, #16]
 8000cf2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000cf6:	9303      	str	r3, [sp, #12]
 8000cf8:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000cfc:	9302      	str	r3, [sp, #8]
 8000cfe:	4b22      	ldr	r3, [pc, #136]	@ (8000d88 <main+0xd0>)
 8000d00:	9301      	str	r3, [sp, #4]
 8000d02:	2301      	movs	r3, #1
 8000d04:	9300      	str	r3, [sp, #0]
 8000d06:	2300      	movs	r3, #0
 8000d08:	2280      	movs	r2, #128	@ 0x80
 8000d0a:	4920      	ldr	r1, [pc, #128]	@ (8000d8c <main+0xd4>)
 8000d0c:	4820      	ldr	r0, [pc, #128]	@ (8000d90 <main+0xd8>)
 8000d0e:	f7ff fcbd 	bl	800068c <vMSTPeriodicTaskCreate>
			      300                        //WCET
  	         );



  	vMSTPeriodicTaskCreate(
 8000d12:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000d16:	9305      	str	r3, [sp, #20]
 8000d18:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000d1c:	9304      	str	r3, [sp, #16]
 8000d1e:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000d22:	9303      	str	r3, [sp, #12]
 8000d24:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000d28:	9302      	str	r3, [sp, #8]
 8000d2a:	4b1a      	ldr	r3, [pc, #104]	@ (8000d94 <main+0xdc>)
 8000d2c:	9301      	str	r3, [sp, #4]
 8000d2e:	2301      	movs	r3, #1
 8000d30:	9300      	str	r3, [sp, #0]
 8000d32:	2300      	movs	r3, #0
 8000d34:	2280      	movs	r2, #128	@ 0x80
 8000d36:	4918      	ldr	r1, [pc, #96]	@ (8000d98 <main+0xe0>)
 8000d38:	4818      	ldr	r0, [pc, #96]	@ (8000d9c <main+0xe4>)
 8000d3a:	f7ff fca7 	bl	800068c <vMSTPeriodicTaskCreate>
  				  300,
				    10000,
  				  300
  	  	    );

  	vMSTSporadicTaskCreate(
 8000d3e:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000d42:	9304      	str	r3, [sp, #16]
 8000d44:	23c8      	movs	r3, #200	@ 0xc8
 8000d46:	9303      	str	r3, [sp, #12]
 8000d48:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000d4c:	9302      	str	r3, [sp, #8]
 8000d4e:	4b14      	ldr	r3, [pc, #80]	@ (8000da0 <main+0xe8>)
 8000d50:	9301      	str	r3, [sp, #4]
 8000d52:	2301      	movs	r3, #1
 8000d54:	9300      	str	r3, [sp, #0]
 8000d56:	2300      	movs	r3, #0
 8000d58:	2280      	movs	r2, #128	@ 0x80
 8000d5a:	4912      	ldr	r1, [pc, #72]	@ (8000da4 <main+0xec>)
 8000d5c:	4812      	ldr	r0, [pc, #72]	@ (8000da8 <main+0xf0>)
 8000d5e:	f7ff fde5 	bl	800092c <vMSTSporadicTaskCreate>
  					5000,              //interarrival time
  					200,                
  	  			300 
  	  	  	);

  	 xBinarySemUART2 = xSemaphoreCreateBinary();
 8000d62:	2203      	movs	r2, #3
 8000d64:	2100      	movs	r1, #0
 8000d66:	2001      	movs	r0, #1
 8000d68:	f003 fdb7 	bl	80048da <xQueueGenericCreate>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	4a0f      	ldr	r2, [pc, #60]	@ (8000dac <main+0xf4>)
 8000d70:	6013      	str	r3, [r2, #0]
  	 xSemaphoreGive(xBinarySemUART2);
 8000d72:	4b0e      	ldr	r3, [pc, #56]	@ (8000dac <main+0xf4>)
 8000d74:	6818      	ldr	r0, [r3, #0]
 8000d76:	2300      	movs	r3, #0
 8000d78:	2200      	movs	r2, #0
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	f003 fe0c 	bl	8004998 <xQueueGenericSend>

  	 vMSTSchedulerStart();
 8000d80:	f7ff fed0 	bl	8000b24 <vMSTSchedulerStart>


     //shall never arrive here
     for(;;);
 8000d84:	bf00      	nop
 8000d86:	e7fd      	b.n	8000d84 <main+0xcc>
 8000d88:	20000218 	.word	0x20000218
 8000d8c:	080083a4 	.word	0x080083a4
 8000d90:	08000b69 	.word	0x08000b69
 8000d94:	2000021c 	.word	0x2000021c
 8000d98:	080083a8 	.word	0x080083a8
 8000d9c:	08000bc9 	.word	0x08000bc9
 8000da0:	20000220 	.word	0x20000220
 8000da4:	080083ac 	.word	0x080083ac
 8000da8:	08000c2d 	.word	0x08000c2d
 8000dac:	20000204 	.word	0x20000204

08000db0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b094      	sub	sp, #80	@ 0x50
 8000db4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000db6:	f107 0320 	add.w	r3, r7, #32
 8000dba:	2230      	movs	r2, #48	@ 0x30
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f006 fde6 	bl	8007990 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dc4:	f107 030c 	add.w	r3, r7, #12
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
 8000dd2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	60bb      	str	r3, [r7, #8]
 8000dd8:	4b28      	ldr	r3, [pc, #160]	@ (8000e7c <SystemClock_Config+0xcc>)
 8000dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ddc:	4a27      	ldr	r2, [pc, #156]	@ (8000e7c <SystemClock_Config+0xcc>)
 8000dde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000de2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000de4:	4b25      	ldr	r3, [pc, #148]	@ (8000e7c <SystemClock_Config+0xcc>)
 8000de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000de8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dec:	60bb      	str	r3, [r7, #8]
 8000dee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000df0:	2300      	movs	r3, #0
 8000df2:	607b      	str	r3, [r7, #4]
 8000df4:	4b22      	ldr	r3, [pc, #136]	@ (8000e80 <SystemClock_Config+0xd0>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000dfc:	4a20      	ldr	r2, [pc, #128]	@ (8000e80 <SystemClock_Config+0xd0>)
 8000dfe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e02:	6013      	str	r3, [r2, #0]
 8000e04:	4b1e      	ldr	r3, [pc, #120]	@ (8000e80 <SystemClock_Config+0xd0>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e0c:	607b      	str	r3, [r7, #4]
 8000e0e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e10:	2302      	movs	r3, #2
 8000e12:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e14:	2301      	movs	r3, #1
 8000e16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e18:	2310      	movs	r3, #16
 8000e1a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e20:	2300      	movs	r3, #0
 8000e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000e24:	2310      	movs	r3, #16
 8000e26:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000e28:	23c0      	movs	r3, #192	@ 0xc0
 8000e2a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 8000e2c:	2308      	movs	r3, #8
 8000e2e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e30:	2304      	movs	r3, #4
 8000e32:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e34:	f107 0320 	add.w	r3, r7, #32
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f001 fa51 	bl	80022e0 <HAL_RCC_OscConfig>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000e44:	f000 f92c 	bl	80010a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e48:	230f      	movs	r3, #15
 8000e4a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e50:	2300      	movs	r3, #0
 8000e52:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e54:	2300      	movs	r3, #0
 8000e56:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e5c:	f107 030c 	add.w	r3, r7, #12
 8000e60:	2100      	movs	r1, #0
 8000e62:	4618      	mov	r0, r3
 8000e64:	f001 fcb4 	bl	80027d0 <HAL_RCC_ClockConfig>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000e6e:	f000 f917 	bl	80010a0 <Error_Handler>
  }
}
 8000e72:	bf00      	nop
 8000e74:	3750      	adds	r7, #80	@ 0x50
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40023800 	.word	0x40023800
 8000e80:	40007000 	.word	0x40007000

08000e84 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b086      	sub	sp, #24
 8000e88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e8a:	f107 0308 	add.w	r3, r7, #8
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	605a      	str	r2, [r3, #4]
 8000e94:	609a      	str	r2, [r3, #8]
 8000e96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e98:	463b      	mov	r3, r7
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ea0:	4b1d      	ldr	r3, [pc, #116]	@ (8000f18 <MX_TIM2_Init+0x94>)
 8000ea2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ea6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 24-1;
 8000ea8:	4b1b      	ldr	r3, [pc, #108]	@ (8000f18 <MX_TIM2_Init+0x94>)
 8000eaa:	2217      	movs	r2, #23
 8000eac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eae:	4b1a      	ldr	r3, [pc, #104]	@ (8000f18 <MX_TIM2_Init+0x94>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000eb4:	4b18      	ldr	r3, [pc, #96]	@ (8000f18 <MX_TIM2_Init+0x94>)
 8000eb6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000eba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ebc:	4b16      	ldr	r3, [pc, #88]	@ (8000f18 <MX_TIM2_Init+0x94>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ec2:	4b15      	ldr	r3, [pc, #84]	@ (8000f18 <MX_TIM2_Init+0x94>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ec8:	4813      	ldr	r0, [pc, #76]	@ (8000f18 <MX_TIM2_Init+0x94>)
 8000eca:	f001 fe93 	bl	8002bf4 <HAL_TIM_Base_Init>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000ed4:	f000 f8e4 	bl	80010a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ed8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000edc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ede:	f107 0308 	add.w	r3, r7, #8
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	480c      	ldr	r0, [pc, #48]	@ (8000f18 <MX_TIM2_Init+0x94>)
 8000ee6:	f002 f827 	bl	8002f38 <HAL_TIM_ConfigClockSource>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000ef0:	f000 f8d6 	bl	80010a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000efc:	463b      	mov	r3, r7
 8000efe:	4619      	mov	r1, r3
 8000f00:	4805      	ldr	r0, [pc, #20]	@ (8000f18 <MX_TIM2_Init+0x94>)
 8000f02:	f002 fa2f 	bl	8003364 <HAL_TIMEx_MasterConfigSynchronization>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000f0c:	f000 f8c8 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f10:	bf00      	nop
 8000f12:	3718      	adds	r7, #24
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20000084 	.word	0x20000084

08000f1c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000f20:	4b0d      	ldr	r3, [pc, #52]	@ (8000f58 <MX_TIM10_Init+0x3c>)
 8000f22:	4a0e      	ldr	r2, [pc, #56]	@ (8000f5c <MX_TIM10_Init+0x40>)
 8000f24:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 15;
 8000f26:	4b0c      	ldr	r3, [pc, #48]	@ (8000f58 <MX_TIM10_Init+0x3c>)
 8000f28:	220f      	movs	r2, #15
 8000f2a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000f58 <MX_TIM10_Init+0x3c>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 99;
 8000f32:	4b09      	ldr	r3, [pc, #36]	@ (8000f58 <MX_TIM10_Init+0x3c>)
 8000f34:	2263      	movs	r2, #99	@ 0x63
 8000f36:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f38:	4b07      	ldr	r3, [pc, #28]	@ (8000f58 <MX_TIM10_Init+0x3c>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f3e:	4b06      	ldr	r3, [pc, #24]	@ (8000f58 <MX_TIM10_Init+0x3c>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000f44:	4804      	ldr	r0, [pc, #16]	@ (8000f58 <MX_TIM10_Init+0x3c>)
 8000f46:	f001 fe55 	bl	8002bf4 <HAL_TIM_Base_Init>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_TIM10_Init+0x38>
  {
    Error_Handler();
 8000f50:	f000 f8a6 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000f54:	bf00      	nop
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	200000cc 	.word	0x200000cc
 8000f5c:	40014400 	.word	0x40014400

08000f60 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f64:	4b11      	ldr	r3, [pc, #68]	@ (8000fac <MX_USART1_UART_Init+0x4c>)
 8000f66:	4a12      	ldr	r2, [pc, #72]	@ (8000fb0 <MX_USART1_UART_Init+0x50>)
 8000f68:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f6a:	4b10      	ldr	r3, [pc, #64]	@ (8000fac <MX_USART1_UART_Init+0x4c>)
 8000f6c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f70:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f72:	4b0e      	ldr	r3, [pc, #56]	@ (8000fac <MX_USART1_UART_Init+0x4c>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f78:	4b0c      	ldr	r3, [pc, #48]	@ (8000fac <MX_USART1_UART_Init+0x4c>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000fac <MX_USART1_UART_Init+0x4c>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f84:	4b09      	ldr	r3, [pc, #36]	@ (8000fac <MX_USART1_UART_Init+0x4c>)
 8000f86:	220c      	movs	r2, #12
 8000f88:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f8a:	4b08      	ldr	r3, [pc, #32]	@ (8000fac <MX_USART1_UART_Init+0x4c>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f90:	4b06      	ldr	r3, [pc, #24]	@ (8000fac <MX_USART1_UART_Init+0x4c>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f96:	4805      	ldr	r0, [pc, #20]	@ (8000fac <MX_USART1_UART_Init+0x4c>)
 8000f98:	f002 fa66 	bl	8003468 <HAL_UART_Init>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000fa2:	f000 f87d 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20000114 	.word	0x20000114
 8000fb0:	40011000 	.word	0x40011000

08000fb4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fb8:	4b11      	ldr	r3, [pc, #68]	@ (8001000 <MX_USART2_UART_Init+0x4c>)
 8000fba:	4a12      	ldr	r2, [pc, #72]	@ (8001004 <MX_USART2_UART_Init+0x50>)
 8000fbc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000fbe:	4b10      	ldr	r3, [pc, #64]	@ (8001000 <MX_USART2_UART_Init+0x4c>)
 8000fc0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000fc4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fc6:	4b0e      	ldr	r3, [pc, #56]	@ (8001000 <MX_USART2_UART_Init+0x4c>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fcc:	4b0c      	ldr	r3, [pc, #48]	@ (8001000 <MX_USART2_UART_Init+0x4c>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fd2:	4b0b      	ldr	r3, [pc, #44]	@ (8001000 <MX_USART2_UART_Init+0x4c>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fd8:	4b09      	ldr	r3, [pc, #36]	@ (8001000 <MX_USART2_UART_Init+0x4c>)
 8000fda:	220c      	movs	r2, #12
 8000fdc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fde:	4b08      	ldr	r3, [pc, #32]	@ (8001000 <MX_USART2_UART_Init+0x4c>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fe4:	4b06      	ldr	r3, [pc, #24]	@ (8001000 <MX_USART2_UART_Init+0x4c>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fea:	4805      	ldr	r0, [pc, #20]	@ (8001000 <MX_USART2_UART_Init+0x4c>)
 8000fec:	f002 fa3c 	bl	8003468 <HAL_UART_Init>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ff6:	f000 f853 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	2000015c 	.word	0x2000015c
 8001004:	40004400 	.word	0x40004400

08001008 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	607b      	str	r3, [r7, #4]
 8001012:	4b0c      	ldr	r3, [pc, #48]	@ (8001044 <MX_DMA_Init+0x3c>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001016:	4a0b      	ldr	r2, [pc, #44]	@ (8001044 <MX_DMA_Init+0x3c>)
 8001018:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800101c:	6313      	str	r3, [r2, #48]	@ 0x30
 800101e:	4b09      	ldr	r3, [pc, #36]	@ (8001044 <MX_DMA_Init+0x3c>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001022:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001026:	607b      	str	r3, [r7, #4]
 8001028:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800102a:	2200      	movs	r2, #0
 800102c:	2105      	movs	r1, #5
 800102e:	2011      	movs	r0, #17
 8001030:	f000 fba6 	bl	8001780 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001034:	2011      	movs	r0, #17
 8001036:	f000 fbbf 	bl	80017b8 <HAL_NVIC_EnableIRQ>

}
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40023800 	.word	0x40023800

08001048 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	607b      	str	r3, [r7, #4]
 8001052:	4b09      	ldr	r3, [pc, #36]	@ (8001078 <MX_GPIO_Init+0x30>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001056:	4a08      	ldr	r2, [pc, #32]	@ (8001078 <MX_GPIO_Init+0x30>)
 8001058:	f043 0301 	orr.w	r3, r3, #1
 800105c:	6313      	str	r3, [r2, #48]	@ 0x30
 800105e:	4b06      	ldr	r3, [pc, #24]	@ (8001078 <MX_GPIO_Init+0x30>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001062:	f003 0301 	and.w	r3, r3, #1
 8001066:	607b      	str	r3, [r7, #4]
 8001068:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800106a:	bf00      	nop
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	40023800 	.word	0x40023800

0800107c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a04      	ldr	r2, [pc, #16]	@ (800109c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d101      	bne.n	8001092 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800108e:	f000 fa7b 	bl	8001588 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40014000 	.word	0x40014000

080010a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010a4:	b672      	cpsid	i
}
 80010a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010a8:	bf00      	nop
 80010aa:	e7fd      	b.n	80010a8 <Error_Handler+0x8>

080010ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	607b      	str	r3, [r7, #4]
 80010b6:	4b12      	ldr	r3, [pc, #72]	@ (8001100 <HAL_MspInit+0x54>)
 80010b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ba:	4a11      	ldr	r2, [pc, #68]	@ (8001100 <HAL_MspInit+0x54>)
 80010bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80010c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001100 <HAL_MspInit+0x54>)
 80010c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010ca:	607b      	str	r3, [r7, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	603b      	str	r3, [r7, #0]
 80010d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001100 <HAL_MspInit+0x54>)
 80010d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001100 <HAL_MspInit+0x54>)
 80010d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80010de:	4b08      	ldr	r3, [pc, #32]	@ (8001100 <HAL_MspInit+0x54>)
 80010e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010e6:	603b      	str	r3, [r7, #0]
 80010e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80010ea:	2200      	movs	r2, #0
 80010ec:	210f      	movs	r1, #15
 80010ee:	f06f 0001 	mvn.w	r0, #1
 80010f2:	f000 fb45 	bl	8001780 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40023800 	.word	0x40023800

08001104 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001114:	d10e      	bne.n	8001134 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	4b16      	ldr	r3, [pc, #88]	@ (8001174 <HAL_TIM_Base_MspInit+0x70>)
 800111c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800111e:	4a15      	ldr	r2, [pc, #84]	@ (8001174 <HAL_TIM_Base_MspInit+0x70>)
 8001120:	f043 0301 	orr.w	r3, r3, #1
 8001124:	6413      	str	r3, [r2, #64]	@ 0x40
 8001126:	4b13      	ldr	r3, [pc, #76]	@ (8001174 <HAL_TIM_Base_MspInit+0x70>)
 8001128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001132:	e01a      	b.n	800116a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM10)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a0f      	ldr	r2, [pc, #60]	@ (8001178 <HAL_TIM_Base_MspInit+0x74>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d115      	bne.n	800116a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	60bb      	str	r3, [r7, #8]
 8001142:	4b0c      	ldr	r3, [pc, #48]	@ (8001174 <HAL_TIM_Base_MspInit+0x70>)
 8001144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001146:	4a0b      	ldr	r2, [pc, #44]	@ (8001174 <HAL_TIM_Base_MspInit+0x70>)
 8001148:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800114c:	6453      	str	r3, [r2, #68]	@ 0x44
 800114e:	4b09      	ldr	r3, [pc, #36]	@ (8001174 <HAL_TIM_Base_MspInit+0x70>)
 8001150:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001152:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001156:	60bb      	str	r3, [r7, #8]
 8001158:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 800115a:	2200      	movs	r2, #0
 800115c:	2105      	movs	r1, #5
 800115e:	2019      	movs	r0, #25
 8001160:	f000 fb0e 	bl	8001780 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001164:	2019      	movs	r0, #25
 8001166:	f000 fb27 	bl	80017b8 <HAL_NVIC_EnableIRQ>
}
 800116a:	bf00      	nop
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40023800 	.word	0x40023800
 8001178:	40014400 	.word	0x40014400

0800117c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b08c      	sub	sp, #48	@ 0x30
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001184:	f107 031c 	add.w	r3, r7, #28
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	609a      	str	r2, [r3, #8]
 8001190:	60da      	str	r2, [r3, #12]
 8001192:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a4d      	ldr	r2, [pc, #308]	@ (80012d0 <HAL_UART_MspInit+0x154>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d12d      	bne.n	80011fa <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	61bb      	str	r3, [r7, #24]
 80011a2:	4b4c      	ldr	r3, [pc, #304]	@ (80012d4 <HAL_UART_MspInit+0x158>)
 80011a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011a6:	4a4b      	ldr	r2, [pc, #300]	@ (80012d4 <HAL_UART_MspInit+0x158>)
 80011a8:	f043 0310 	orr.w	r3, r3, #16
 80011ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80011ae:	4b49      	ldr	r3, [pc, #292]	@ (80012d4 <HAL_UART_MspInit+0x158>)
 80011b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011b2:	f003 0310 	and.w	r3, r3, #16
 80011b6:	61bb      	str	r3, [r7, #24]
 80011b8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	617b      	str	r3, [r7, #20]
 80011be:	4b45      	ldr	r3, [pc, #276]	@ (80012d4 <HAL_UART_MspInit+0x158>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c2:	4a44      	ldr	r2, [pc, #272]	@ (80012d4 <HAL_UART_MspInit+0x158>)
 80011c4:	f043 0301 	orr.w	r3, r3, #1
 80011c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ca:	4b42      	ldr	r3, [pc, #264]	@ (80012d4 <HAL_UART_MspInit+0x158>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	617b      	str	r3, [r7, #20]
 80011d4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80011d6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80011da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011dc:	2302      	movs	r3, #2
 80011de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e4:	2303      	movs	r3, #3
 80011e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011e8:	2307      	movs	r3, #7
 80011ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ec:	f107 031c 	add.w	r3, r7, #28
 80011f0:	4619      	mov	r1, r3
 80011f2:	4839      	ldr	r0, [pc, #228]	@ (80012d8 <HAL_UART_MspInit+0x15c>)
 80011f4:	f000 fef0 	bl	8001fd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011f8:	e066      	b.n	80012c8 <HAL_UART_MspInit+0x14c>
  else if(huart->Instance==USART2)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a37      	ldr	r2, [pc, #220]	@ (80012dc <HAL_UART_MspInit+0x160>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d161      	bne.n	80012c8 <HAL_UART_MspInit+0x14c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001204:	2300      	movs	r3, #0
 8001206:	613b      	str	r3, [r7, #16]
 8001208:	4b32      	ldr	r3, [pc, #200]	@ (80012d4 <HAL_UART_MspInit+0x158>)
 800120a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800120c:	4a31      	ldr	r2, [pc, #196]	@ (80012d4 <HAL_UART_MspInit+0x158>)
 800120e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001212:	6413      	str	r3, [r2, #64]	@ 0x40
 8001214:	4b2f      	ldr	r3, [pc, #188]	@ (80012d4 <HAL_UART_MspInit+0x158>)
 8001216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001218:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800121c:	613b      	str	r3, [r7, #16]
 800121e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001220:	2300      	movs	r3, #0
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	4b2b      	ldr	r3, [pc, #172]	@ (80012d4 <HAL_UART_MspInit+0x158>)
 8001226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001228:	4a2a      	ldr	r2, [pc, #168]	@ (80012d4 <HAL_UART_MspInit+0x158>)
 800122a:	f043 0301 	orr.w	r3, r3, #1
 800122e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001230:	4b28      	ldr	r3, [pc, #160]	@ (80012d4 <HAL_UART_MspInit+0x158>)
 8001232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001234:	f003 0301 	and.w	r3, r3, #1
 8001238:	60fb      	str	r3, [r7, #12]
 800123a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800123c:	230c      	movs	r3, #12
 800123e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001240:	2302      	movs	r3, #2
 8001242:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001248:	2303      	movs	r3, #3
 800124a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800124c:	2307      	movs	r3, #7
 800124e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001250:	f107 031c 	add.w	r3, r7, #28
 8001254:	4619      	mov	r1, r3
 8001256:	4820      	ldr	r0, [pc, #128]	@ (80012d8 <HAL_UART_MspInit+0x15c>)
 8001258:	f000 febe 	bl	8001fd8 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800125c:	4b20      	ldr	r3, [pc, #128]	@ (80012e0 <HAL_UART_MspInit+0x164>)
 800125e:	4a21      	ldr	r2, [pc, #132]	@ (80012e4 <HAL_UART_MspInit+0x168>)
 8001260:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001262:	4b1f      	ldr	r3, [pc, #124]	@ (80012e0 <HAL_UART_MspInit+0x164>)
 8001264:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001268:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800126a:	4b1d      	ldr	r3, [pc, #116]	@ (80012e0 <HAL_UART_MspInit+0x164>)
 800126c:	2240      	movs	r2, #64	@ 0x40
 800126e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001270:	4b1b      	ldr	r3, [pc, #108]	@ (80012e0 <HAL_UART_MspInit+0x164>)
 8001272:	2200      	movs	r2, #0
 8001274:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001276:	4b1a      	ldr	r3, [pc, #104]	@ (80012e0 <HAL_UART_MspInit+0x164>)
 8001278:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800127c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800127e:	4b18      	ldr	r3, [pc, #96]	@ (80012e0 <HAL_UART_MspInit+0x164>)
 8001280:	2200      	movs	r2, #0
 8001282:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001284:	4b16      	ldr	r3, [pc, #88]	@ (80012e0 <HAL_UART_MspInit+0x164>)
 8001286:	2200      	movs	r2, #0
 8001288:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800128a:	4b15      	ldr	r3, [pc, #84]	@ (80012e0 <HAL_UART_MspInit+0x164>)
 800128c:	2200      	movs	r2, #0
 800128e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001290:	4b13      	ldr	r3, [pc, #76]	@ (80012e0 <HAL_UART_MspInit+0x164>)
 8001292:	2200      	movs	r2, #0
 8001294:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001296:	4b12      	ldr	r3, [pc, #72]	@ (80012e0 <HAL_UART_MspInit+0x164>)
 8001298:	2200      	movs	r2, #0
 800129a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800129c:	4810      	ldr	r0, [pc, #64]	@ (80012e0 <HAL_UART_MspInit+0x164>)
 800129e:	f000 fa99 	bl	80017d4 <HAL_DMA_Init>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <HAL_UART_MspInit+0x130>
      Error_Handler();
 80012a8:	f7ff fefa 	bl	80010a0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	4a0c      	ldr	r2, [pc, #48]	@ (80012e0 <HAL_UART_MspInit+0x164>)
 80012b0:	639a      	str	r2, [r3, #56]	@ 0x38
 80012b2:	4a0b      	ldr	r2, [pc, #44]	@ (80012e0 <HAL_UART_MspInit+0x164>)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80012b8:	2200      	movs	r2, #0
 80012ba:	2105      	movs	r1, #5
 80012bc:	2026      	movs	r0, #38	@ 0x26
 80012be:	f000 fa5f 	bl	8001780 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80012c2:	2026      	movs	r0, #38	@ 0x26
 80012c4:	f000 fa78 	bl	80017b8 <HAL_NVIC_EnableIRQ>
}
 80012c8:	bf00      	nop
 80012ca:	3730      	adds	r7, #48	@ 0x30
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	40011000 	.word	0x40011000
 80012d4:	40023800 	.word	0x40023800
 80012d8:	40020000 	.word	0x40020000
 80012dc:	40004400 	.word	0x40004400
 80012e0:	200001a4 	.word	0x200001a4
 80012e4:	400260a0 	.word	0x400260a0

080012e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b08c      	sub	sp, #48	@ 0x30
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80012f0:	2300      	movs	r3, #0
 80012f2:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80012f4:	2300      	movs	r3, #0
 80012f6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 80012f8:	2300      	movs	r3, #0
 80012fa:	60bb      	str	r3, [r7, #8]
 80012fc:	4b2e      	ldr	r3, [pc, #184]	@ (80013b8 <HAL_InitTick+0xd0>)
 80012fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001300:	4a2d      	ldr	r2, [pc, #180]	@ (80013b8 <HAL_InitTick+0xd0>)
 8001302:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001306:	6453      	str	r3, [r2, #68]	@ 0x44
 8001308:	4b2b      	ldr	r3, [pc, #172]	@ (80013b8 <HAL_InitTick+0xd0>)
 800130a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800130c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001310:	60bb      	str	r3, [r7, #8]
 8001312:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001314:	f107 020c 	add.w	r2, r7, #12
 8001318:	f107 0310 	add.w	r3, r7, #16
 800131c:	4611      	mov	r1, r2
 800131e:	4618      	mov	r0, r3
 8001320:	f001 fc36 	bl	8002b90 <HAL_RCC_GetClockConfig>
  /* Compute TIM9 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001324:	f001 fc20 	bl	8002b68 <HAL_RCC_GetPCLK2Freq>
 8001328:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800132a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800132c:	4a23      	ldr	r2, [pc, #140]	@ (80013bc <HAL_InitTick+0xd4>)
 800132e:	fba2 2303 	umull	r2, r3, r2, r3
 8001332:	0c9b      	lsrs	r3, r3, #18
 8001334:	3b01      	subs	r3, #1
 8001336:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8001338:	4b21      	ldr	r3, [pc, #132]	@ (80013c0 <HAL_InitTick+0xd8>)
 800133a:	4a22      	ldr	r2, [pc, #136]	@ (80013c4 <HAL_InitTick+0xdc>)
 800133c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 800133e:	4b20      	ldr	r3, [pc, #128]	@ (80013c0 <HAL_InitTick+0xd8>)
 8001340:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001344:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 8001346:	4a1e      	ldr	r2, [pc, #120]	@ (80013c0 <HAL_InitTick+0xd8>)
 8001348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800134a:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 800134c:	4b1c      	ldr	r3, [pc, #112]	@ (80013c0 <HAL_InitTick+0xd8>)
 800134e:	2200      	movs	r2, #0
 8001350:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001352:	4b1b      	ldr	r3, [pc, #108]	@ (80013c0 <HAL_InitTick+0xd8>)
 8001354:	2200      	movs	r2, #0
 8001356:	609a      	str	r2, [r3, #8]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001358:	4b19      	ldr	r3, [pc, #100]	@ (80013c0 <HAL_InitTick+0xd8>)
 800135a:	2200      	movs	r2, #0
 800135c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim9);
 800135e:	4818      	ldr	r0, [pc, #96]	@ (80013c0 <HAL_InitTick+0xd8>)
 8001360:	f001 fc48 	bl	8002bf4 <HAL_TIM_Base_Init>
 8001364:	4603      	mov	r3, r0
 8001366:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800136a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800136e:	2b00      	cmp	r3, #0
 8001370:	d11b      	bne.n	80013aa <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim9);
 8001372:	4813      	ldr	r0, [pc, #76]	@ (80013c0 <HAL_InitTick+0xd8>)
 8001374:	f001 fc8e 	bl	8002c94 <HAL_TIM_Base_Start_IT>
 8001378:	4603      	mov	r3, r0
 800137a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800137e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001382:	2b00      	cmp	r3, #0
 8001384:	d111      	bne.n	80013aa <HAL_InitTick+0xc2>
    {
    /* Enable the TIM9 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001386:	2018      	movs	r0, #24
 8001388:	f000 fa16 	bl	80017b8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2b0f      	cmp	r3, #15
 8001390:	d808      	bhi.n	80013a4 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority, 0U);
 8001392:	2200      	movs	r2, #0
 8001394:	6879      	ldr	r1, [r7, #4]
 8001396:	2018      	movs	r0, #24
 8001398:	f000 f9f2 	bl	8001780 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800139c:	4a0a      	ldr	r2, [pc, #40]	@ (80013c8 <HAL_InitTick+0xe0>)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6013      	str	r3, [r2, #0]
 80013a2:	e002      	b.n	80013aa <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80013aa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3730      	adds	r7, #48	@ 0x30
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40023800 	.word	0x40023800
 80013bc:	431bde83 	.word	0x431bde83
 80013c0:	20000224 	.word	0x20000224
 80013c4:	40014000 	.word	0x40014000
 80013c8:	20000004 	.word	0x20000004

080013cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013d0:	bf00      	nop
 80013d2:	e7fd      	b.n	80013d0 <NMI_Handler+0x4>

080013d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013d8:	bf00      	nop
 80013da:	e7fd      	b.n	80013d8 <HardFault_Handler+0x4>

080013dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013e0:	bf00      	nop
 80013e2:	e7fd      	b.n	80013e0 <MemManage_Handler+0x4>

080013e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013e8:	bf00      	nop
 80013ea:	e7fd      	b.n	80013e8 <BusFault_Handler+0x4>

080013ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013f0:	bf00      	nop
 80013f2:	e7fd      	b.n	80013f0 <UsageFault_Handler+0x4>

080013f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
	...

08001404 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001408:	4802      	ldr	r0, [pc, #8]	@ (8001414 <DMA1_Stream6_IRQHandler+0x10>)
 800140a:	f000 fb7b 	bl	8001b04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	200001a4 	.word	0x200001a4

08001418 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 800141c:	4802      	ldr	r0, [pc, #8]	@ (8001428 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800141e:	f001 fc9b 	bl	8002d58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20000224 	.word	0x20000224

0800142c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	ulStatsTimerTicks++;
 8001430:	4b04      	ldr	r3, [pc, #16]	@ (8001444 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	3301      	adds	r3, #1
 8001436:	4a03      	ldr	r2, [pc, #12]	@ (8001444 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8001438:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 800143a:	4803      	ldr	r0, [pc, #12]	@ (8001448 <TIM1_UP_TIM10_IRQHandler+0x1c>)
 800143c:	f001 fc8c 	bl	8002d58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001440:	bf00      	nop
 8001442:	bd80      	pop	{r7, pc}
 8001444:	20000080 	.word	0x20000080
 8001448:	200000cc 	.word	0x200000cc

0800144c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001450:	4802      	ldr	r0, [pc, #8]	@ (800145c <USART2_IRQHandler+0x10>)
 8001452:	f002 f8c9 	bl	80035e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	2000015c 	.word	0x2000015c

08001460 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b086      	sub	sp, #24
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001468:	4a14      	ldr	r2, [pc, #80]	@ (80014bc <_sbrk+0x5c>)
 800146a:	4b15      	ldr	r3, [pc, #84]	@ (80014c0 <_sbrk+0x60>)
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001474:	4b13      	ldr	r3, [pc, #76]	@ (80014c4 <_sbrk+0x64>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d102      	bne.n	8001482 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800147c:	4b11      	ldr	r3, [pc, #68]	@ (80014c4 <_sbrk+0x64>)
 800147e:	4a12      	ldr	r2, [pc, #72]	@ (80014c8 <_sbrk+0x68>)
 8001480:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001482:	4b10      	ldr	r3, [pc, #64]	@ (80014c4 <_sbrk+0x64>)
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4413      	add	r3, r2
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	429a      	cmp	r2, r3
 800148e:	d207      	bcs.n	80014a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001490:	f006 fadc 	bl	8007a4c <__errno>
 8001494:	4603      	mov	r3, r0
 8001496:	220c      	movs	r2, #12
 8001498:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800149a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800149e:	e009      	b.n	80014b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014a0:	4b08      	ldr	r3, [pc, #32]	@ (80014c4 <_sbrk+0x64>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014a6:	4b07      	ldr	r3, [pc, #28]	@ (80014c4 <_sbrk+0x64>)
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4413      	add	r3, r2
 80014ae:	4a05      	ldr	r2, [pc, #20]	@ (80014c4 <_sbrk+0x64>)
 80014b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014b2:	68fb      	ldr	r3, [r7, #12]
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3718      	adds	r7, #24
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20018000 	.word	0x20018000
 80014c0:	00000400 	.word	0x00000400
 80014c4:	2000026c 	.word	0x2000026c
 80014c8:	20004dd0 	.word	0x20004dd0

080014cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014d0:	4b06      	ldr	r3, [pc, #24]	@ (80014ec <SystemInit+0x20>)
 80014d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014d6:	4a05      	ldr	r2, [pc, #20]	@ (80014ec <SystemInit+0x20>)
 80014d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	e000ed00 	.word	0xe000ed00

080014f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80014f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001528 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80014f4:	f7ff ffea 	bl	80014cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014f8:	480c      	ldr	r0, [pc, #48]	@ (800152c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014fa:	490d      	ldr	r1, [pc, #52]	@ (8001530 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001534 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001500:	e002      	b.n	8001508 <LoopCopyDataInit>

08001502 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001502:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001504:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001506:	3304      	adds	r3, #4

08001508 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001508:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800150a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800150c:	d3f9      	bcc.n	8001502 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800150e:	4a0a      	ldr	r2, [pc, #40]	@ (8001538 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001510:	4c0a      	ldr	r4, [pc, #40]	@ (800153c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001512:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001514:	e001      	b.n	800151a <LoopFillZerobss>

08001516 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001516:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001518:	3204      	adds	r2, #4

0800151a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800151a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800151c:	d3fb      	bcc.n	8001516 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800151e:	f006 fa9b 	bl	8007a58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001522:	f7ff fbc9 	bl	8000cb8 <main>
  bx  lr    
 8001526:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001528:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800152c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001530:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001534:	08008454 	.word	0x08008454
  ldr r2, =_sbss
 8001538:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800153c:	20004dd0 	.word	0x20004dd0

08001540 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001540:	e7fe      	b.n	8001540 <ADC_IRQHandler>
	...

08001544 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001548:	4b0e      	ldr	r3, [pc, #56]	@ (8001584 <HAL_Init+0x40>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a0d      	ldr	r2, [pc, #52]	@ (8001584 <HAL_Init+0x40>)
 800154e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001552:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001554:	4b0b      	ldr	r3, [pc, #44]	@ (8001584 <HAL_Init+0x40>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a0a      	ldr	r2, [pc, #40]	@ (8001584 <HAL_Init+0x40>)
 800155a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800155e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001560:	4b08      	ldr	r3, [pc, #32]	@ (8001584 <HAL_Init+0x40>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a07      	ldr	r2, [pc, #28]	@ (8001584 <HAL_Init+0x40>)
 8001566:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800156a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800156c:	2003      	movs	r0, #3
 800156e:	f000 f8fc 	bl	800176a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001572:	200f      	movs	r0, #15
 8001574:	f7ff feb8 	bl	80012e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001578:	f7ff fd98 	bl	80010ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40023c00 	.word	0x40023c00

08001588 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800158c:	4b06      	ldr	r3, [pc, #24]	@ (80015a8 <HAL_IncTick+0x20>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	461a      	mov	r2, r3
 8001592:	4b06      	ldr	r3, [pc, #24]	@ (80015ac <HAL_IncTick+0x24>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4413      	add	r3, r2
 8001598:	4a04      	ldr	r2, [pc, #16]	@ (80015ac <HAL_IncTick+0x24>)
 800159a:	6013      	str	r3, [r2, #0]
}
 800159c:	bf00      	nop
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	20000008 	.word	0x20000008
 80015ac:	20000270 	.word	0x20000270

080015b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  return uwTick;
 80015b4:	4b03      	ldr	r3, [pc, #12]	@ (80015c4 <HAL_GetTick+0x14>)
 80015b6:	681b      	ldr	r3, [r3, #0]
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	20000270 	.word	0x20000270

080015c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015d0:	f7ff ffee 	bl	80015b0 <HAL_GetTick>
 80015d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80015e0:	d005      	beq.n	80015ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015e2:	4b0a      	ldr	r3, [pc, #40]	@ (800160c <HAL_Delay+0x44>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	461a      	mov	r2, r3
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	4413      	add	r3, r2
 80015ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015ee:	bf00      	nop
 80015f0:	f7ff ffde 	bl	80015b0 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	68fa      	ldr	r2, [r7, #12]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d8f7      	bhi.n	80015f0 <HAL_Delay+0x28>
  {
  }
}
 8001600:	bf00      	nop
 8001602:	bf00      	nop
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	20000008 	.word	0x20000008

08001610 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f003 0307 	and.w	r3, r3, #7
 800161e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001620:	4b0c      	ldr	r3, [pc, #48]	@ (8001654 <__NVIC_SetPriorityGrouping+0x44>)
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001626:	68ba      	ldr	r2, [r7, #8]
 8001628:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800162c:	4013      	ands	r3, r2
 800162e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001638:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800163c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001640:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001642:	4a04      	ldr	r2, [pc, #16]	@ (8001654 <__NVIC_SetPriorityGrouping+0x44>)
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	60d3      	str	r3, [r2, #12]
}
 8001648:	bf00      	nop
 800164a:	3714      	adds	r7, #20
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	e000ed00 	.word	0xe000ed00

08001658 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800165c:	4b04      	ldr	r3, [pc, #16]	@ (8001670 <__NVIC_GetPriorityGrouping+0x18>)
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	0a1b      	lsrs	r3, r3, #8
 8001662:	f003 0307 	and.w	r3, r3, #7
}
 8001666:	4618      	mov	r0, r3
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr
 8001670:	e000ed00 	.word	0xe000ed00

08001674 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	4603      	mov	r3, r0
 800167c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800167e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001682:	2b00      	cmp	r3, #0
 8001684:	db0b      	blt.n	800169e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001686:	79fb      	ldrb	r3, [r7, #7]
 8001688:	f003 021f 	and.w	r2, r3, #31
 800168c:	4907      	ldr	r1, [pc, #28]	@ (80016ac <__NVIC_EnableIRQ+0x38>)
 800168e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001692:	095b      	lsrs	r3, r3, #5
 8001694:	2001      	movs	r0, #1
 8001696:	fa00 f202 	lsl.w	r2, r0, r2
 800169a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800169e:	bf00      	nop
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	e000e100 	.word	0xe000e100

080016b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	6039      	str	r1, [r7, #0]
 80016ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	db0a      	blt.n	80016da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	b2da      	uxtb	r2, r3
 80016c8:	490c      	ldr	r1, [pc, #48]	@ (80016fc <__NVIC_SetPriority+0x4c>)
 80016ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ce:	0112      	lsls	r2, r2, #4
 80016d0:	b2d2      	uxtb	r2, r2
 80016d2:	440b      	add	r3, r1
 80016d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016d8:	e00a      	b.n	80016f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	b2da      	uxtb	r2, r3
 80016de:	4908      	ldr	r1, [pc, #32]	@ (8001700 <__NVIC_SetPriority+0x50>)
 80016e0:	79fb      	ldrb	r3, [r7, #7]
 80016e2:	f003 030f 	and.w	r3, r3, #15
 80016e6:	3b04      	subs	r3, #4
 80016e8:	0112      	lsls	r2, r2, #4
 80016ea:	b2d2      	uxtb	r2, r2
 80016ec:	440b      	add	r3, r1
 80016ee:	761a      	strb	r2, [r3, #24]
}
 80016f0:	bf00      	nop
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr
 80016fc:	e000e100 	.word	0xe000e100
 8001700:	e000ed00 	.word	0xe000ed00

08001704 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001704:	b480      	push	{r7}
 8001706:	b089      	sub	sp, #36	@ 0x24
 8001708:	af00      	add	r7, sp, #0
 800170a:	60f8      	str	r0, [r7, #12]
 800170c:	60b9      	str	r1, [r7, #8]
 800170e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	f003 0307 	and.w	r3, r3, #7
 8001716:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	f1c3 0307 	rsb	r3, r3, #7
 800171e:	2b04      	cmp	r3, #4
 8001720:	bf28      	it	cs
 8001722:	2304      	movcs	r3, #4
 8001724:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	3304      	adds	r3, #4
 800172a:	2b06      	cmp	r3, #6
 800172c:	d902      	bls.n	8001734 <NVIC_EncodePriority+0x30>
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	3b03      	subs	r3, #3
 8001732:	e000      	b.n	8001736 <NVIC_EncodePriority+0x32>
 8001734:	2300      	movs	r3, #0
 8001736:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001738:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	43da      	mvns	r2, r3
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	401a      	ands	r2, r3
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800174c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	fa01 f303 	lsl.w	r3, r1, r3
 8001756:	43d9      	mvns	r1, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800175c:	4313      	orrs	r3, r2
         );
}
 800175e:	4618      	mov	r0, r3
 8001760:	3724      	adds	r7, #36	@ 0x24
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr

0800176a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b082      	sub	sp, #8
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f7ff ff4c 	bl	8001610 <__NVIC_SetPriorityGrouping>
}
 8001778:	bf00      	nop
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}

08001780 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001780:	b580      	push	{r7, lr}
 8001782:	b086      	sub	sp, #24
 8001784:	af00      	add	r7, sp, #0
 8001786:	4603      	mov	r3, r0
 8001788:	60b9      	str	r1, [r7, #8]
 800178a:	607a      	str	r2, [r7, #4]
 800178c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800178e:	2300      	movs	r3, #0
 8001790:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001792:	f7ff ff61 	bl	8001658 <__NVIC_GetPriorityGrouping>
 8001796:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	68b9      	ldr	r1, [r7, #8]
 800179c:	6978      	ldr	r0, [r7, #20]
 800179e:	f7ff ffb1 	bl	8001704 <NVIC_EncodePriority>
 80017a2:	4602      	mov	r2, r0
 80017a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017a8:	4611      	mov	r1, r2
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff ff80 	bl	80016b0 <__NVIC_SetPriority>
}
 80017b0:	bf00      	nop
 80017b2:	3718      	adds	r7, #24
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff ff54 	bl	8001674 <__NVIC_EnableIRQ>
}
 80017cc:	bf00      	nop
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b086      	sub	sp, #24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80017dc:	2300      	movs	r3, #0
 80017de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80017e0:	f7ff fee6 	bl	80015b0 <HAL_GetTick>
 80017e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d101      	bne.n	80017f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e099      	b.n	8001924 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2202      	movs	r2, #2
 80017f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2200      	movs	r2, #0
 80017fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f022 0201 	bic.w	r2, r2, #1
 800180e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001810:	e00f      	b.n	8001832 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001812:	f7ff fecd 	bl	80015b0 <HAL_GetTick>
 8001816:	4602      	mov	r2, r0
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	2b05      	cmp	r3, #5
 800181e:	d908      	bls.n	8001832 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2220      	movs	r2, #32
 8001824:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2203      	movs	r2, #3
 800182a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e078      	b.n	8001924 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0301 	and.w	r3, r3, #1
 800183c:	2b00      	cmp	r3, #0
 800183e:	d1e8      	bne.n	8001812 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001848:	697a      	ldr	r2, [r7, #20]
 800184a:	4b38      	ldr	r3, [pc, #224]	@ (800192c <HAL_DMA_Init+0x158>)
 800184c:	4013      	ands	r3, r2
 800184e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	685a      	ldr	r2, [r3, #4]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800185e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	691b      	ldr	r3, [r3, #16]
 8001864:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800186a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001876:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6a1b      	ldr	r3, [r3, #32]
 800187c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800187e:	697a      	ldr	r2, [r7, #20]
 8001880:	4313      	orrs	r3, r2
 8001882:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001888:	2b04      	cmp	r3, #4
 800188a:	d107      	bne.n	800189c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001894:	4313      	orrs	r3, r2
 8001896:	697a      	ldr	r2, [r7, #20]
 8001898:	4313      	orrs	r3, r2
 800189a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	697a      	ldr	r2, [r7, #20]
 80018a2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	695b      	ldr	r3, [r3, #20]
 80018aa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	f023 0307 	bic.w	r3, r3, #7
 80018b2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018b8:	697a      	ldr	r2, [r7, #20]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018c2:	2b04      	cmp	r3, #4
 80018c4:	d117      	bne.n	80018f6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018ca:	697a      	ldr	r2, [r7, #20]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d00e      	beq.n	80018f6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f000 fb01 	bl	8001ee0 <DMA_CheckFifoParam>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d008      	beq.n	80018f6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2240      	movs	r2, #64	@ 0x40
 80018e8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2201      	movs	r2, #1
 80018ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80018f2:	2301      	movs	r3, #1
 80018f4:	e016      	b.n	8001924 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	697a      	ldr	r2, [r7, #20]
 80018fc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f000 fab8 	bl	8001e74 <DMA_CalcBaseAndBitshift>
 8001904:	4603      	mov	r3, r0
 8001906:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800190c:	223f      	movs	r2, #63	@ 0x3f
 800190e:	409a      	lsls	r2, r3
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2200      	movs	r2, #0
 8001918:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2201      	movs	r2, #1
 800191e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001922:	2300      	movs	r3, #0
}
 8001924:	4618      	mov	r0, r3
 8001926:	3718      	adds	r7, #24
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	f010803f 	.word	0xf010803f

08001930 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	607a      	str	r2, [r7, #4]
 800193c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800193e:	2300      	movs	r3, #0
 8001940:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001946:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800194e:	2b01      	cmp	r3, #1
 8001950:	d101      	bne.n	8001956 <HAL_DMA_Start_IT+0x26>
 8001952:	2302      	movs	r3, #2
 8001954:	e040      	b.n	80019d8 <HAL_DMA_Start_IT+0xa8>
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2201      	movs	r2, #1
 800195a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001964:	b2db      	uxtb	r3, r3
 8001966:	2b01      	cmp	r3, #1
 8001968:	d12f      	bne.n	80019ca <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2202      	movs	r2, #2
 800196e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2200      	movs	r2, #0
 8001976:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	68b9      	ldr	r1, [r7, #8]
 800197e:	68f8      	ldr	r0, [r7, #12]
 8001980:	f000 fa4a 	bl	8001e18 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001988:	223f      	movs	r2, #63	@ 0x3f
 800198a:	409a      	lsls	r2, r3
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f042 0216 	orr.w	r2, r2, #22
 800199e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d007      	beq.n	80019b8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f042 0208 	orr.w	r2, r2, #8
 80019b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f042 0201 	orr.w	r2, r2, #1
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	e005      	b.n	80019d6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	2200      	movs	r2, #0
 80019ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80019d2:	2302      	movs	r3, #2
 80019d4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80019d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3718      	adds	r7, #24
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}

080019e0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019ec:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80019ee:	f7ff fddf 	bl	80015b0 <HAL_GetTick>
 80019f2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d008      	beq.n	8001a12 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2280      	movs	r2, #128	@ 0x80
 8001a04:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e052      	b.n	8001ab8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f022 0216 	bic.w	r2, r2, #22
 8001a20:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	695a      	ldr	r2, [r3, #20]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001a30:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d103      	bne.n	8001a42 <HAL_DMA_Abort+0x62>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d007      	beq.n	8001a52 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f022 0208 	bic.w	r2, r2, #8
 8001a50:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f022 0201 	bic.w	r2, r2, #1
 8001a60:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a62:	e013      	b.n	8001a8c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a64:	f7ff fda4 	bl	80015b0 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b05      	cmp	r3, #5
 8001a70:	d90c      	bls.n	8001a8c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2220      	movs	r2, #32
 8001a76:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2203      	movs	r2, #3
 8001a7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2200      	movs	r2, #0
 8001a84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e015      	b.n	8001ab8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d1e4      	bne.n	8001a64 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a9e:	223f      	movs	r2, #63	@ 0x3f
 8001aa0:	409a      	lsls	r2, r3
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001ab6:	2300      	movs	r3, #0
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3710      	adds	r7, #16
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d004      	beq.n	8001ade <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2280      	movs	r2, #128	@ 0x80
 8001ad8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e00c      	b.n	8001af8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2205      	movs	r2, #5
 8001ae2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f022 0201 	bic.w	r2, r2, #1
 8001af4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001af6:	2300      	movs	r3, #0
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001b10:	4b8e      	ldr	r3, [pc, #568]	@ (8001d4c <HAL_DMA_IRQHandler+0x248>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a8e      	ldr	r2, [pc, #568]	@ (8001d50 <HAL_DMA_IRQHandler+0x24c>)
 8001b16:	fba2 2303 	umull	r2, r3, r2, r3
 8001b1a:	0a9b      	lsrs	r3, r3, #10
 8001b1c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b22:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b2e:	2208      	movs	r2, #8
 8001b30:	409a      	lsls	r2, r3
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	4013      	ands	r3, r2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d01a      	beq.n	8001b70 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0304 	and.w	r3, r3, #4
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d013      	beq.n	8001b70 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f022 0204 	bic.w	r2, r2, #4
 8001b56:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b5c:	2208      	movs	r2, #8
 8001b5e:	409a      	lsls	r2, r3
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b68:	f043 0201 	orr.w	r2, r3, #1
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b74:	2201      	movs	r2, #1
 8001b76:	409a      	lsls	r2, r3
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d012      	beq.n	8001ba6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	695b      	ldr	r3, [r3, #20]
 8001b86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d00b      	beq.n	8001ba6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b92:	2201      	movs	r2, #1
 8001b94:	409a      	lsls	r2, r3
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b9e:	f043 0202 	orr.w	r2, r3, #2
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001baa:	2204      	movs	r2, #4
 8001bac:	409a      	lsls	r2, r3
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d012      	beq.n	8001bdc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0302 	and.w	r3, r3, #2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d00b      	beq.n	8001bdc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bc8:	2204      	movs	r2, #4
 8001bca:	409a      	lsls	r2, r3
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bd4:	f043 0204 	orr.w	r2, r3, #4
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001be0:	2210      	movs	r2, #16
 8001be2:	409a      	lsls	r2, r3
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	4013      	ands	r3, r2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d043      	beq.n	8001c74 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0308 	and.w	r3, r3, #8
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d03c      	beq.n	8001c74 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bfe:	2210      	movs	r2, #16
 8001c00:	409a      	lsls	r2, r3
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d018      	beq.n	8001c46 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d108      	bne.n	8001c34 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d024      	beq.n	8001c74 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	4798      	blx	r3
 8001c32:	e01f      	b.n	8001c74 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d01b      	beq.n	8001c74 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	4798      	blx	r3
 8001c44:	e016      	b.n	8001c74 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d107      	bne.n	8001c64 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f022 0208 	bic.w	r2, r2, #8
 8001c62:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d003      	beq.n	8001c74 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c78:	2220      	movs	r2, #32
 8001c7a:	409a      	lsls	r2, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	f000 808f 	beq.w	8001da4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0310 	and.w	r3, r3, #16
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	f000 8087 	beq.w	8001da4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c9a:	2220      	movs	r2, #32
 8001c9c:	409a      	lsls	r2, r3
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	2b05      	cmp	r3, #5
 8001cac:	d136      	bne.n	8001d1c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f022 0216 	bic.w	r2, r2, #22
 8001cbc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	695a      	ldr	r2, [r3, #20]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ccc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d103      	bne.n	8001cde <HAL_DMA_IRQHandler+0x1da>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d007      	beq.n	8001cee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f022 0208 	bic.w	r2, r2, #8
 8001cec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cf2:	223f      	movs	r2, #63	@ 0x3f
 8001cf4:	409a      	lsls	r2, r3
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d07e      	beq.n	8001e10 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	4798      	blx	r3
        }
        return;
 8001d1a:	e079      	b.n	8001e10 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d01d      	beq.n	8001d66 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d10d      	bne.n	8001d54 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d031      	beq.n	8001da4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	4798      	blx	r3
 8001d48:	e02c      	b.n	8001da4 <HAL_DMA_IRQHandler+0x2a0>
 8001d4a:	bf00      	nop
 8001d4c:	20000000 	.word	0x20000000
 8001d50:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d023      	beq.n	8001da4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	4798      	blx	r3
 8001d64:	e01e      	b.n	8001da4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d10f      	bne.n	8001d94 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f022 0210 	bic.w	r2, r2, #16
 8001d82:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d003      	beq.n	8001da4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d032      	beq.n	8001e12 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001db0:	f003 0301 	and.w	r3, r3, #1
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d022      	beq.n	8001dfe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2205      	movs	r2, #5
 8001dbc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f022 0201 	bic.w	r2, r2, #1
 8001dce:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	60bb      	str	r3, [r7, #8]
 8001dd6:	697a      	ldr	r2, [r7, #20]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d307      	bcc.n	8001dec <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d1f2      	bne.n	8001dd0 <HAL_DMA_IRQHandler+0x2cc>
 8001dea:	e000      	b.n	8001dee <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001dec:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2201      	movs	r2, #1
 8001df2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d005      	beq.n	8001e12 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	4798      	blx	r3
 8001e0e:	e000      	b.n	8001e12 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001e10:	bf00      	nop
    }
  }
}
 8001e12:	3718      	adds	r7, #24
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
 8001e24:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001e34:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	683a      	ldr	r2, [r7, #0]
 8001e3c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	2b40      	cmp	r3, #64	@ 0x40
 8001e44:	d108      	bne.n	8001e58 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	68ba      	ldr	r2, [r7, #8]
 8001e54:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001e56:	e007      	b.n	8001e68 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	68ba      	ldr	r2, [r7, #8]
 8001e5e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	60da      	str	r2, [r3, #12]
}
 8001e68:	bf00      	nop
 8001e6a:	3714      	adds	r7, #20
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	3b10      	subs	r3, #16
 8001e84:	4a14      	ldr	r2, [pc, #80]	@ (8001ed8 <DMA_CalcBaseAndBitshift+0x64>)
 8001e86:	fba2 2303 	umull	r2, r3, r2, r3
 8001e8a:	091b      	lsrs	r3, r3, #4
 8001e8c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001e8e:	4a13      	ldr	r2, [pc, #76]	@ (8001edc <DMA_CalcBaseAndBitshift+0x68>)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	4413      	add	r3, r2
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	461a      	mov	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2b03      	cmp	r3, #3
 8001ea0:	d909      	bls.n	8001eb6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001eaa:	f023 0303 	bic.w	r3, r3, #3
 8001eae:	1d1a      	adds	r2, r3, #4
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	659a      	str	r2, [r3, #88]	@ 0x58
 8001eb4:	e007      	b.n	8001ec6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001ebe:	f023 0303 	bic.w	r3, r3, #3
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3714      	adds	r7, #20
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	aaaaaaab 	.word	0xaaaaaaab
 8001edc:	08008408 	.word	0x08008408

08001ee0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b085      	sub	sp, #20
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ef0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	699b      	ldr	r3, [r3, #24]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d11f      	bne.n	8001f3a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	2b03      	cmp	r3, #3
 8001efe:	d856      	bhi.n	8001fae <DMA_CheckFifoParam+0xce>
 8001f00:	a201      	add	r2, pc, #4	@ (adr r2, 8001f08 <DMA_CheckFifoParam+0x28>)
 8001f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f06:	bf00      	nop
 8001f08:	08001f19 	.word	0x08001f19
 8001f0c:	08001f2b 	.word	0x08001f2b
 8001f10:	08001f19 	.word	0x08001f19
 8001f14:	08001faf 	.word	0x08001faf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f1c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d046      	beq.n	8001fb2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f28:	e043      	b.n	8001fb2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f2e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001f32:	d140      	bne.n	8001fb6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f38:	e03d      	b.n	8001fb6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	699b      	ldr	r3, [r3, #24]
 8001f3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f42:	d121      	bne.n	8001f88 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	2b03      	cmp	r3, #3
 8001f48:	d837      	bhi.n	8001fba <DMA_CheckFifoParam+0xda>
 8001f4a:	a201      	add	r2, pc, #4	@ (adr r2, 8001f50 <DMA_CheckFifoParam+0x70>)
 8001f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f50:	08001f61 	.word	0x08001f61
 8001f54:	08001f67 	.word	0x08001f67
 8001f58:	08001f61 	.word	0x08001f61
 8001f5c:	08001f79 	.word	0x08001f79
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	73fb      	strb	r3, [r7, #15]
      break;
 8001f64:	e030      	b.n	8001fc8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f6a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d025      	beq.n	8001fbe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f76:	e022      	b.n	8001fbe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f7c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001f80:	d11f      	bne.n	8001fc2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001f86:	e01c      	b.n	8001fc2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d903      	bls.n	8001f96 <DMA_CheckFifoParam+0xb6>
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	2b03      	cmp	r3, #3
 8001f92:	d003      	beq.n	8001f9c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001f94:	e018      	b.n	8001fc8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	73fb      	strb	r3, [r7, #15]
      break;
 8001f9a:	e015      	b.n	8001fc8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fa0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d00e      	beq.n	8001fc6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	73fb      	strb	r3, [r7, #15]
      break;
 8001fac:	e00b      	b.n	8001fc6 <DMA_CheckFifoParam+0xe6>
      break;
 8001fae:	bf00      	nop
 8001fb0:	e00a      	b.n	8001fc8 <DMA_CheckFifoParam+0xe8>
      break;
 8001fb2:	bf00      	nop
 8001fb4:	e008      	b.n	8001fc8 <DMA_CheckFifoParam+0xe8>
      break;
 8001fb6:	bf00      	nop
 8001fb8:	e006      	b.n	8001fc8 <DMA_CheckFifoParam+0xe8>
      break;
 8001fba:	bf00      	nop
 8001fbc:	e004      	b.n	8001fc8 <DMA_CheckFifoParam+0xe8>
      break;
 8001fbe:	bf00      	nop
 8001fc0:	e002      	b.n	8001fc8 <DMA_CheckFifoParam+0xe8>
      break;   
 8001fc2:	bf00      	nop
 8001fc4:	e000      	b.n	8001fc8 <DMA_CheckFifoParam+0xe8>
      break;
 8001fc6:	bf00      	nop
    }
  } 
  
  return status; 
 8001fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3714      	adds	r7, #20
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop

08001fd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b089      	sub	sp, #36	@ 0x24
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fea:	2300      	movs	r3, #0
 8001fec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fee:	2300      	movs	r3, #0
 8001ff0:	61fb      	str	r3, [r7, #28]
 8001ff2:	e159      	b.n	80022a8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	697a      	ldr	r2, [r7, #20]
 8002004:	4013      	ands	r3, r2
 8002006:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002008:	693a      	ldr	r2, [r7, #16]
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	429a      	cmp	r2, r3
 800200e:	f040 8148 	bne.w	80022a2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f003 0303 	and.w	r3, r3, #3
 800201a:	2b01      	cmp	r3, #1
 800201c:	d005      	beq.n	800202a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002026:	2b02      	cmp	r3, #2
 8002028:	d130      	bne.n	800208c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	2203      	movs	r2, #3
 8002036:	fa02 f303 	lsl.w	r3, r2, r3
 800203a:	43db      	mvns	r3, r3
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	4013      	ands	r3, r2
 8002040:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	68da      	ldr	r2, [r3, #12]
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	fa02 f303 	lsl.w	r3, r2, r3
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	4313      	orrs	r3, r2
 8002052:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002060:	2201      	movs	r2, #1
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	43db      	mvns	r3, r3
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	4013      	ands	r3, r2
 800206e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	091b      	lsrs	r3, r3, #4
 8002076:	f003 0201 	and.w	r2, r3, #1
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	4313      	orrs	r3, r2
 8002084:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f003 0303 	and.w	r3, r3, #3
 8002094:	2b03      	cmp	r3, #3
 8002096:	d017      	beq.n	80020c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	2203      	movs	r2, #3
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	43db      	mvns	r3, r3
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4013      	ands	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	689a      	ldr	r2, [r3, #8]
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	4313      	orrs	r3, r2
 80020c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f003 0303 	and.w	r3, r3, #3
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d123      	bne.n	800211c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	08da      	lsrs	r2, r3, #3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	3208      	adds	r2, #8
 80020dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	f003 0307 	and.w	r3, r3, #7
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	220f      	movs	r2, #15
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	43db      	mvns	r3, r3
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	4013      	ands	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	691a      	ldr	r2, [r3, #16]
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	f003 0307 	and.w	r3, r3, #7
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	4313      	orrs	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	08da      	lsrs	r2, r3, #3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	3208      	adds	r2, #8
 8002116:	69b9      	ldr	r1, [r7, #24]
 8002118:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	2203      	movs	r2, #3
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	43db      	mvns	r3, r3
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	4013      	ands	r3, r2
 8002132:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f003 0203 	and.w	r2, r3, #3
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	4313      	orrs	r3, r2
 8002148:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002158:	2b00      	cmp	r3, #0
 800215a:	f000 80a2 	beq.w	80022a2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800215e:	2300      	movs	r3, #0
 8002160:	60fb      	str	r3, [r7, #12]
 8002162:	4b57      	ldr	r3, [pc, #348]	@ (80022c0 <HAL_GPIO_Init+0x2e8>)
 8002164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002166:	4a56      	ldr	r2, [pc, #344]	@ (80022c0 <HAL_GPIO_Init+0x2e8>)
 8002168:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800216c:	6453      	str	r3, [r2, #68]	@ 0x44
 800216e:	4b54      	ldr	r3, [pc, #336]	@ (80022c0 <HAL_GPIO_Init+0x2e8>)
 8002170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002172:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002176:	60fb      	str	r3, [r7, #12]
 8002178:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800217a:	4a52      	ldr	r2, [pc, #328]	@ (80022c4 <HAL_GPIO_Init+0x2ec>)
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	089b      	lsrs	r3, r3, #2
 8002180:	3302      	adds	r3, #2
 8002182:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002186:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	f003 0303 	and.w	r3, r3, #3
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	220f      	movs	r2, #15
 8002192:	fa02 f303 	lsl.w	r3, r2, r3
 8002196:	43db      	mvns	r3, r3
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	4013      	ands	r3, r2
 800219c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a49      	ldr	r2, [pc, #292]	@ (80022c8 <HAL_GPIO_Init+0x2f0>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d019      	beq.n	80021da <HAL_GPIO_Init+0x202>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a48      	ldr	r2, [pc, #288]	@ (80022cc <HAL_GPIO_Init+0x2f4>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d013      	beq.n	80021d6 <HAL_GPIO_Init+0x1fe>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a47      	ldr	r2, [pc, #284]	@ (80022d0 <HAL_GPIO_Init+0x2f8>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d00d      	beq.n	80021d2 <HAL_GPIO_Init+0x1fa>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a46      	ldr	r2, [pc, #280]	@ (80022d4 <HAL_GPIO_Init+0x2fc>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d007      	beq.n	80021ce <HAL_GPIO_Init+0x1f6>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a45      	ldr	r2, [pc, #276]	@ (80022d8 <HAL_GPIO_Init+0x300>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d101      	bne.n	80021ca <HAL_GPIO_Init+0x1f2>
 80021c6:	2304      	movs	r3, #4
 80021c8:	e008      	b.n	80021dc <HAL_GPIO_Init+0x204>
 80021ca:	2307      	movs	r3, #7
 80021cc:	e006      	b.n	80021dc <HAL_GPIO_Init+0x204>
 80021ce:	2303      	movs	r3, #3
 80021d0:	e004      	b.n	80021dc <HAL_GPIO_Init+0x204>
 80021d2:	2302      	movs	r3, #2
 80021d4:	e002      	b.n	80021dc <HAL_GPIO_Init+0x204>
 80021d6:	2301      	movs	r3, #1
 80021d8:	e000      	b.n	80021dc <HAL_GPIO_Init+0x204>
 80021da:	2300      	movs	r3, #0
 80021dc:	69fa      	ldr	r2, [r7, #28]
 80021de:	f002 0203 	and.w	r2, r2, #3
 80021e2:	0092      	lsls	r2, r2, #2
 80021e4:	4093      	lsls	r3, r2
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021ec:	4935      	ldr	r1, [pc, #212]	@ (80022c4 <HAL_GPIO_Init+0x2ec>)
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	089b      	lsrs	r3, r3, #2
 80021f2:	3302      	adds	r3, #2
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021fa:	4b38      	ldr	r3, [pc, #224]	@ (80022dc <HAL_GPIO_Init+0x304>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	43db      	mvns	r3, r3
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	4013      	ands	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d003      	beq.n	800221e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	4313      	orrs	r3, r2
 800221c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800221e:	4a2f      	ldr	r2, [pc, #188]	@ (80022dc <HAL_GPIO_Init+0x304>)
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002224:	4b2d      	ldr	r3, [pc, #180]	@ (80022dc <HAL_GPIO_Init+0x304>)
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	43db      	mvns	r3, r3
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	4013      	ands	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d003      	beq.n	8002248 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	4313      	orrs	r3, r2
 8002246:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002248:	4a24      	ldr	r2, [pc, #144]	@ (80022dc <HAL_GPIO_Init+0x304>)
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800224e:	4b23      	ldr	r3, [pc, #140]	@ (80022dc <HAL_GPIO_Init+0x304>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	43db      	mvns	r3, r3
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	4013      	ands	r3, r2
 800225c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d003      	beq.n	8002272 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	4313      	orrs	r3, r2
 8002270:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002272:	4a1a      	ldr	r2, [pc, #104]	@ (80022dc <HAL_GPIO_Init+0x304>)
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002278:	4b18      	ldr	r3, [pc, #96]	@ (80022dc <HAL_GPIO_Init+0x304>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	43db      	mvns	r3, r3
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	4013      	ands	r3, r2
 8002286:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d003      	beq.n	800229c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	4313      	orrs	r3, r2
 800229a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800229c:	4a0f      	ldr	r2, [pc, #60]	@ (80022dc <HAL_GPIO_Init+0x304>)
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	3301      	adds	r3, #1
 80022a6:	61fb      	str	r3, [r7, #28]
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	2b0f      	cmp	r3, #15
 80022ac:	f67f aea2 	bls.w	8001ff4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022b0:	bf00      	nop
 80022b2:	bf00      	nop
 80022b4:	3724      	adds	r7, #36	@ 0x24
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	40023800 	.word	0x40023800
 80022c4:	40013800 	.word	0x40013800
 80022c8:	40020000 	.word	0x40020000
 80022cc:	40020400 	.word	0x40020400
 80022d0:	40020800 	.word	0x40020800
 80022d4:	40020c00 	.word	0x40020c00
 80022d8:	40021000 	.word	0x40021000
 80022dc:	40013c00 	.word	0x40013c00

080022e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b086      	sub	sp, #24
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d101      	bne.n	80022f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e267      	b.n	80027c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d075      	beq.n	80023ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80022fe:	4b88      	ldr	r3, [pc, #544]	@ (8002520 <HAL_RCC_OscConfig+0x240>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f003 030c 	and.w	r3, r3, #12
 8002306:	2b04      	cmp	r3, #4
 8002308:	d00c      	beq.n	8002324 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800230a:	4b85      	ldr	r3, [pc, #532]	@ (8002520 <HAL_RCC_OscConfig+0x240>)
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002312:	2b08      	cmp	r3, #8
 8002314:	d112      	bne.n	800233c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002316:	4b82      	ldr	r3, [pc, #520]	@ (8002520 <HAL_RCC_OscConfig+0x240>)
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800231e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002322:	d10b      	bne.n	800233c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002324:	4b7e      	ldr	r3, [pc, #504]	@ (8002520 <HAL_RCC_OscConfig+0x240>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d05b      	beq.n	80023e8 <HAL_RCC_OscConfig+0x108>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d157      	bne.n	80023e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e242      	b.n	80027c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002344:	d106      	bne.n	8002354 <HAL_RCC_OscConfig+0x74>
 8002346:	4b76      	ldr	r3, [pc, #472]	@ (8002520 <HAL_RCC_OscConfig+0x240>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a75      	ldr	r2, [pc, #468]	@ (8002520 <HAL_RCC_OscConfig+0x240>)
 800234c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002350:	6013      	str	r3, [r2, #0]
 8002352:	e01d      	b.n	8002390 <HAL_RCC_OscConfig+0xb0>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800235c:	d10c      	bne.n	8002378 <HAL_RCC_OscConfig+0x98>
 800235e:	4b70      	ldr	r3, [pc, #448]	@ (8002520 <HAL_RCC_OscConfig+0x240>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a6f      	ldr	r2, [pc, #444]	@ (8002520 <HAL_RCC_OscConfig+0x240>)
 8002364:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002368:	6013      	str	r3, [r2, #0]
 800236a:	4b6d      	ldr	r3, [pc, #436]	@ (8002520 <HAL_RCC_OscConfig+0x240>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a6c      	ldr	r2, [pc, #432]	@ (8002520 <HAL_RCC_OscConfig+0x240>)
 8002370:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002374:	6013      	str	r3, [r2, #0]
 8002376:	e00b      	b.n	8002390 <HAL_RCC_OscConfig+0xb0>
 8002378:	4b69      	ldr	r3, [pc, #420]	@ (8002520 <HAL_RCC_OscConfig+0x240>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a68      	ldr	r2, [pc, #416]	@ (8002520 <HAL_RCC_OscConfig+0x240>)
 800237e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002382:	6013      	str	r3, [r2, #0]
 8002384:	4b66      	ldr	r3, [pc, #408]	@ (8002520 <HAL_RCC_OscConfig+0x240>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a65      	ldr	r2, [pc, #404]	@ (8002520 <HAL_RCC_OscConfig+0x240>)
 800238a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800238e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d013      	beq.n	80023c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002398:	f7ff f90a 	bl	80015b0 <HAL_GetTick>
 800239c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800239e:	e008      	b.n	80023b2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023a0:	f7ff f906 	bl	80015b0 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b64      	cmp	r3, #100	@ 0x64
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e207      	b.n	80027c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023b2:	4b5b      	ldr	r3, [pc, #364]	@ (8002520 <HAL_RCC_OscConfig+0x240>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d0f0      	beq.n	80023a0 <HAL_RCC_OscConfig+0xc0>
 80023be:	e014      	b.n	80023ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c0:	f7ff f8f6 	bl	80015b0 <HAL_GetTick>
 80023c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023c8:	f7ff f8f2 	bl	80015b0 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b64      	cmp	r3, #100	@ 0x64
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e1f3      	b.n	80027c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023da:	4b51      	ldr	r3, [pc, #324]	@ (8002520 <HAL_RCC_OscConfig+0x240>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1f0      	bne.n	80023c8 <HAL_RCC_OscConfig+0xe8>
 80023e6:	e000      	b.n	80023ea <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d063      	beq.n	80024be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80023f6:	4b4a      	ldr	r3, [pc, #296]	@ (8002520 <HAL_RCC_OscConfig+0x240>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f003 030c 	and.w	r3, r3, #12
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d00b      	beq.n	800241a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002402:	4b47      	ldr	r3, [pc, #284]	@ (8002520 <HAL_RCC_OscConfig+0x240>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800240a:	2b08      	cmp	r3, #8
 800240c:	d11c      	bne.n	8002448 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800240e:	4b44      	ldr	r3, [pc, #272]	@ (8002520 <HAL_RCC_OscConfig+0x240>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d116      	bne.n	8002448 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800241a:	4b41      	ldr	r3, [pc, #260]	@ (8002520 <HAL_RCC_OscConfig+0x240>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d005      	beq.n	8002432 <HAL_RCC_OscConfig+0x152>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d001      	beq.n	8002432 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e1c7      	b.n	80027c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002432:	4b3b      	ldr	r3, [pc, #236]	@ (8002520 <HAL_RCC_OscConfig+0x240>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	00db      	lsls	r3, r3, #3
 8002440:	4937      	ldr	r1, [pc, #220]	@ (8002520 <HAL_RCC_OscConfig+0x240>)
 8002442:	4313      	orrs	r3, r2
 8002444:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002446:	e03a      	b.n	80024be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d020      	beq.n	8002492 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002450:	4b34      	ldr	r3, [pc, #208]	@ (8002524 <HAL_RCC_OscConfig+0x244>)
 8002452:	2201      	movs	r2, #1
 8002454:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002456:	f7ff f8ab 	bl	80015b0 <HAL_GetTick>
 800245a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800245c:	e008      	b.n	8002470 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800245e:	f7ff f8a7 	bl	80015b0 <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	2b02      	cmp	r3, #2
 800246a:	d901      	bls.n	8002470 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	e1a8      	b.n	80027c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002470:	4b2b      	ldr	r3, [pc, #172]	@ (8002520 <HAL_RCC_OscConfig+0x240>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0302 	and.w	r3, r3, #2
 8002478:	2b00      	cmp	r3, #0
 800247a:	d0f0      	beq.n	800245e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800247c:	4b28      	ldr	r3, [pc, #160]	@ (8002520 <HAL_RCC_OscConfig+0x240>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	691b      	ldr	r3, [r3, #16]
 8002488:	00db      	lsls	r3, r3, #3
 800248a:	4925      	ldr	r1, [pc, #148]	@ (8002520 <HAL_RCC_OscConfig+0x240>)
 800248c:	4313      	orrs	r3, r2
 800248e:	600b      	str	r3, [r1, #0]
 8002490:	e015      	b.n	80024be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002492:	4b24      	ldr	r3, [pc, #144]	@ (8002524 <HAL_RCC_OscConfig+0x244>)
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002498:	f7ff f88a 	bl	80015b0 <HAL_GetTick>
 800249c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800249e:	e008      	b.n	80024b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024a0:	f7ff f886 	bl	80015b0 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e187      	b.n	80027c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024b2:	4b1b      	ldr	r3, [pc, #108]	@ (8002520 <HAL_RCC_OscConfig+0x240>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1f0      	bne.n	80024a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0308 	and.w	r3, r3, #8
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d036      	beq.n	8002538 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	695b      	ldr	r3, [r3, #20]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d016      	beq.n	8002500 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024d2:	4b15      	ldr	r3, [pc, #84]	@ (8002528 <HAL_RCC_OscConfig+0x248>)
 80024d4:	2201      	movs	r2, #1
 80024d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024d8:	f7ff f86a 	bl	80015b0 <HAL_GetTick>
 80024dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024de:	e008      	b.n	80024f2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024e0:	f7ff f866 	bl	80015b0 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e167      	b.n	80027c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024f2:	4b0b      	ldr	r3, [pc, #44]	@ (8002520 <HAL_RCC_OscConfig+0x240>)
 80024f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d0f0      	beq.n	80024e0 <HAL_RCC_OscConfig+0x200>
 80024fe:	e01b      	b.n	8002538 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002500:	4b09      	ldr	r3, [pc, #36]	@ (8002528 <HAL_RCC_OscConfig+0x248>)
 8002502:	2200      	movs	r2, #0
 8002504:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002506:	f7ff f853 	bl	80015b0 <HAL_GetTick>
 800250a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800250c:	e00e      	b.n	800252c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800250e:	f7ff f84f 	bl	80015b0 <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	2b02      	cmp	r3, #2
 800251a:	d907      	bls.n	800252c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e150      	b.n	80027c2 <HAL_RCC_OscConfig+0x4e2>
 8002520:	40023800 	.word	0x40023800
 8002524:	42470000 	.word	0x42470000
 8002528:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800252c:	4b88      	ldr	r3, [pc, #544]	@ (8002750 <HAL_RCC_OscConfig+0x470>)
 800252e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002530:	f003 0302 	and.w	r3, r3, #2
 8002534:	2b00      	cmp	r3, #0
 8002536:	d1ea      	bne.n	800250e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0304 	and.w	r3, r3, #4
 8002540:	2b00      	cmp	r3, #0
 8002542:	f000 8097 	beq.w	8002674 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002546:	2300      	movs	r3, #0
 8002548:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800254a:	4b81      	ldr	r3, [pc, #516]	@ (8002750 <HAL_RCC_OscConfig+0x470>)
 800254c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800254e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d10f      	bne.n	8002576 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002556:	2300      	movs	r3, #0
 8002558:	60bb      	str	r3, [r7, #8]
 800255a:	4b7d      	ldr	r3, [pc, #500]	@ (8002750 <HAL_RCC_OscConfig+0x470>)
 800255c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800255e:	4a7c      	ldr	r2, [pc, #496]	@ (8002750 <HAL_RCC_OscConfig+0x470>)
 8002560:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002564:	6413      	str	r3, [r2, #64]	@ 0x40
 8002566:	4b7a      	ldr	r3, [pc, #488]	@ (8002750 <HAL_RCC_OscConfig+0x470>)
 8002568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800256a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800256e:	60bb      	str	r3, [r7, #8]
 8002570:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002572:	2301      	movs	r3, #1
 8002574:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002576:	4b77      	ldr	r3, [pc, #476]	@ (8002754 <HAL_RCC_OscConfig+0x474>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800257e:	2b00      	cmp	r3, #0
 8002580:	d118      	bne.n	80025b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002582:	4b74      	ldr	r3, [pc, #464]	@ (8002754 <HAL_RCC_OscConfig+0x474>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a73      	ldr	r2, [pc, #460]	@ (8002754 <HAL_RCC_OscConfig+0x474>)
 8002588:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800258c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800258e:	f7ff f80f 	bl	80015b0 <HAL_GetTick>
 8002592:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002594:	e008      	b.n	80025a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002596:	f7ff f80b 	bl	80015b0 <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d901      	bls.n	80025a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e10c      	b.n	80027c2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025a8:	4b6a      	ldr	r3, [pc, #424]	@ (8002754 <HAL_RCC_OscConfig+0x474>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d0f0      	beq.n	8002596 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d106      	bne.n	80025ca <HAL_RCC_OscConfig+0x2ea>
 80025bc:	4b64      	ldr	r3, [pc, #400]	@ (8002750 <HAL_RCC_OscConfig+0x470>)
 80025be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025c0:	4a63      	ldr	r2, [pc, #396]	@ (8002750 <HAL_RCC_OscConfig+0x470>)
 80025c2:	f043 0301 	orr.w	r3, r3, #1
 80025c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80025c8:	e01c      	b.n	8002604 <HAL_RCC_OscConfig+0x324>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	2b05      	cmp	r3, #5
 80025d0:	d10c      	bne.n	80025ec <HAL_RCC_OscConfig+0x30c>
 80025d2:	4b5f      	ldr	r3, [pc, #380]	@ (8002750 <HAL_RCC_OscConfig+0x470>)
 80025d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025d6:	4a5e      	ldr	r2, [pc, #376]	@ (8002750 <HAL_RCC_OscConfig+0x470>)
 80025d8:	f043 0304 	orr.w	r3, r3, #4
 80025dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80025de:	4b5c      	ldr	r3, [pc, #368]	@ (8002750 <HAL_RCC_OscConfig+0x470>)
 80025e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025e2:	4a5b      	ldr	r2, [pc, #364]	@ (8002750 <HAL_RCC_OscConfig+0x470>)
 80025e4:	f043 0301 	orr.w	r3, r3, #1
 80025e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80025ea:	e00b      	b.n	8002604 <HAL_RCC_OscConfig+0x324>
 80025ec:	4b58      	ldr	r3, [pc, #352]	@ (8002750 <HAL_RCC_OscConfig+0x470>)
 80025ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025f0:	4a57      	ldr	r2, [pc, #348]	@ (8002750 <HAL_RCC_OscConfig+0x470>)
 80025f2:	f023 0301 	bic.w	r3, r3, #1
 80025f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80025f8:	4b55      	ldr	r3, [pc, #340]	@ (8002750 <HAL_RCC_OscConfig+0x470>)
 80025fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025fc:	4a54      	ldr	r2, [pc, #336]	@ (8002750 <HAL_RCC_OscConfig+0x470>)
 80025fe:	f023 0304 	bic.w	r3, r3, #4
 8002602:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d015      	beq.n	8002638 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800260c:	f7fe ffd0 	bl	80015b0 <HAL_GetTick>
 8002610:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002612:	e00a      	b.n	800262a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002614:	f7fe ffcc 	bl	80015b0 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002622:	4293      	cmp	r3, r2
 8002624:	d901      	bls.n	800262a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e0cb      	b.n	80027c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800262a:	4b49      	ldr	r3, [pc, #292]	@ (8002750 <HAL_RCC_OscConfig+0x470>)
 800262c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b00      	cmp	r3, #0
 8002634:	d0ee      	beq.n	8002614 <HAL_RCC_OscConfig+0x334>
 8002636:	e014      	b.n	8002662 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002638:	f7fe ffba 	bl	80015b0 <HAL_GetTick>
 800263c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800263e:	e00a      	b.n	8002656 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002640:	f7fe ffb6 	bl	80015b0 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800264e:	4293      	cmp	r3, r2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e0b5      	b.n	80027c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002656:	4b3e      	ldr	r3, [pc, #248]	@ (8002750 <HAL_RCC_OscConfig+0x470>)
 8002658:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1ee      	bne.n	8002640 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002662:	7dfb      	ldrb	r3, [r7, #23]
 8002664:	2b01      	cmp	r3, #1
 8002666:	d105      	bne.n	8002674 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002668:	4b39      	ldr	r3, [pc, #228]	@ (8002750 <HAL_RCC_OscConfig+0x470>)
 800266a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266c:	4a38      	ldr	r2, [pc, #224]	@ (8002750 <HAL_RCC_OscConfig+0x470>)
 800266e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002672:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	2b00      	cmp	r3, #0
 800267a:	f000 80a1 	beq.w	80027c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800267e:	4b34      	ldr	r3, [pc, #208]	@ (8002750 <HAL_RCC_OscConfig+0x470>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f003 030c 	and.w	r3, r3, #12
 8002686:	2b08      	cmp	r3, #8
 8002688:	d05c      	beq.n	8002744 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	2b02      	cmp	r3, #2
 8002690:	d141      	bne.n	8002716 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002692:	4b31      	ldr	r3, [pc, #196]	@ (8002758 <HAL_RCC_OscConfig+0x478>)
 8002694:	2200      	movs	r2, #0
 8002696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002698:	f7fe ff8a 	bl	80015b0 <HAL_GetTick>
 800269c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800269e:	e008      	b.n	80026b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026a0:	f7fe ff86 	bl	80015b0 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e087      	b.n	80027c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026b2:	4b27      	ldr	r3, [pc, #156]	@ (8002750 <HAL_RCC_OscConfig+0x470>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d1f0      	bne.n	80026a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	69da      	ldr	r2, [r3, #28]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a1b      	ldr	r3, [r3, #32]
 80026c6:	431a      	orrs	r2, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026cc:	019b      	lsls	r3, r3, #6
 80026ce:	431a      	orrs	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026d4:	085b      	lsrs	r3, r3, #1
 80026d6:	3b01      	subs	r3, #1
 80026d8:	041b      	lsls	r3, r3, #16
 80026da:	431a      	orrs	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026e0:	061b      	lsls	r3, r3, #24
 80026e2:	491b      	ldr	r1, [pc, #108]	@ (8002750 <HAL_RCC_OscConfig+0x470>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026e8:	4b1b      	ldr	r3, [pc, #108]	@ (8002758 <HAL_RCC_OscConfig+0x478>)
 80026ea:	2201      	movs	r2, #1
 80026ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ee:	f7fe ff5f 	bl	80015b0 <HAL_GetTick>
 80026f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026f4:	e008      	b.n	8002708 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026f6:	f7fe ff5b 	bl	80015b0 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	2b02      	cmp	r3, #2
 8002702:	d901      	bls.n	8002708 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e05c      	b.n	80027c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002708:	4b11      	ldr	r3, [pc, #68]	@ (8002750 <HAL_RCC_OscConfig+0x470>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d0f0      	beq.n	80026f6 <HAL_RCC_OscConfig+0x416>
 8002714:	e054      	b.n	80027c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002716:	4b10      	ldr	r3, [pc, #64]	@ (8002758 <HAL_RCC_OscConfig+0x478>)
 8002718:	2200      	movs	r2, #0
 800271a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800271c:	f7fe ff48 	bl	80015b0 <HAL_GetTick>
 8002720:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002722:	e008      	b.n	8002736 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002724:	f7fe ff44 	bl	80015b0 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b02      	cmp	r3, #2
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e045      	b.n	80027c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002736:	4b06      	ldr	r3, [pc, #24]	@ (8002750 <HAL_RCC_OscConfig+0x470>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1f0      	bne.n	8002724 <HAL_RCC_OscConfig+0x444>
 8002742:	e03d      	b.n	80027c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	2b01      	cmp	r3, #1
 800274a:	d107      	bne.n	800275c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e038      	b.n	80027c2 <HAL_RCC_OscConfig+0x4e2>
 8002750:	40023800 	.word	0x40023800
 8002754:	40007000 	.word	0x40007000
 8002758:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800275c:	4b1b      	ldr	r3, [pc, #108]	@ (80027cc <HAL_RCC_OscConfig+0x4ec>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	699b      	ldr	r3, [r3, #24]
 8002766:	2b01      	cmp	r3, #1
 8002768:	d028      	beq.n	80027bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002774:	429a      	cmp	r2, r3
 8002776:	d121      	bne.n	80027bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002782:	429a      	cmp	r2, r3
 8002784:	d11a      	bne.n	80027bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002786:	68fa      	ldr	r2, [r7, #12]
 8002788:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800278c:	4013      	ands	r3, r2
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002792:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002794:	4293      	cmp	r3, r2
 8002796:	d111      	bne.n	80027bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027a2:	085b      	lsrs	r3, r3, #1
 80027a4:	3b01      	subs	r3, #1
 80027a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d107      	bne.n	80027bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d001      	beq.n	80027c0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e000      	b.n	80027c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3718      	adds	r7, #24
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	40023800 	.word	0x40023800

080027d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d101      	bne.n	80027e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e0cc      	b.n	800297e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027e4:	4b68      	ldr	r3, [pc, #416]	@ (8002988 <HAL_RCC_ClockConfig+0x1b8>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0307 	and.w	r3, r3, #7
 80027ec:	683a      	ldr	r2, [r7, #0]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d90c      	bls.n	800280c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027f2:	4b65      	ldr	r3, [pc, #404]	@ (8002988 <HAL_RCC_ClockConfig+0x1b8>)
 80027f4:	683a      	ldr	r2, [r7, #0]
 80027f6:	b2d2      	uxtb	r2, r2
 80027f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027fa:	4b63      	ldr	r3, [pc, #396]	@ (8002988 <HAL_RCC_ClockConfig+0x1b8>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0307 	and.w	r3, r3, #7
 8002802:	683a      	ldr	r2, [r7, #0]
 8002804:	429a      	cmp	r2, r3
 8002806:	d001      	beq.n	800280c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e0b8      	b.n	800297e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0302 	and.w	r3, r3, #2
 8002814:	2b00      	cmp	r3, #0
 8002816:	d020      	beq.n	800285a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0304 	and.w	r3, r3, #4
 8002820:	2b00      	cmp	r3, #0
 8002822:	d005      	beq.n	8002830 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002824:	4b59      	ldr	r3, [pc, #356]	@ (800298c <HAL_RCC_ClockConfig+0x1bc>)
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	4a58      	ldr	r2, [pc, #352]	@ (800298c <HAL_RCC_ClockConfig+0x1bc>)
 800282a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800282e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0308 	and.w	r3, r3, #8
 8002838:	2b00      	cmp	r3, #0
 800283a:	d005      	beq.n	8002848 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800283c:	4b53      	ldr	r3, [pc, #332]	@ (800298c <HAL_RCC_ClockConfig+0x1bc>)
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	4a52      	ldr	r2, [pc, #328]	@ (800298c <HAL_RCC_ClockConfig+0x1bc>)
 8002842:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002846:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002848:	4b50      	ldr	r3, [pc, #320]	@ (800298c <HAL_RCC_ClockConfig+0x1bc>)
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	494d      	ldr	r1, [pc, #308]	@ (800298c <HAL_RCC_ClockConfig+0x1bc>)
 8002856:	4313      	orrs	r3, r2
 8002858:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	2b00      	cmp	r3, #0
 8002864:	d044      	beq.n	80028f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d107      	bne.n	800287e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800286e:	4b47      	ldr	r3, [pc, #284]	@ (800298c <HAL_RCC_ClockConfig+0x1bc>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d119      	bne.n	80028ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e07f      	b.n	800297e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	2b02      	cmp	r3, #2
 8002884:	d003      	beq.n	800288e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800288a:	2b03      	cmp	r3, #3
 800288c:	d107      	bne.n	800289e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800288e:	4b3f      	ldr	r3, [pc, #252]	@ (800298c <HAL_RCC_ClockConfig+0x1bc>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d109      	bne.n	80028ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e06f      	b.n	800297e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800289e:	4b3b      	ldr	r3, [pc, #236]	@ (800298c <HAL_RCC_ClockConfig+0x1bc>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d101      	bne.n	80028ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e067      	b.n	800297e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028ae:	4b37      	ldr	r3, [pc, #220]	@ (800298c <HAL_RCC_ClockConfig+0x1bc>)
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f023 0203 	bic.w	r2, r3, #3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	4934      	ldr	r1, [pc, #208]	@ (800298c <HAL_RCC_ClockConfig+0x1bc>)
 80028bc:	4313      	orrs	r3, r2
 80028be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028c0:	f7fe fe76 	bl	80015b0 <HAL_GetTick>
 80028c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028c6:	e00a      	b.n	80028de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028c8:	f7fe fe72 	bl	80015b0 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d901      	bls.n	80028de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e04f      	b.n	800297e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028de:	4b2b      	ldr	r3, [pc, #172]	@ (800298c <HAL_RCC_ClockConfig+0x1bc>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f003 020c 	and.w	r2, r3, #12
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d1eb      	bne.n	80028c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028f0:	4b25      	ldr	r3, [pc, #148]	@ (8002988 <HAL_RCC_ClockConfig+0x1b8>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0307 	and.w	r3, r3, #7
 80028f8:	683a      	ldr	r2, [r7, #0]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d20c      	bcs.n	8002918 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028fe:	4b22      	ldr	r3, [pc, #136]	@ (8002988 <HAL_RCC_ClockConfig+0x1b8>)
 8002900:	683a      	ldr	r2, [r7, #0]
 8002902:	b2d2      	uxtb	r2, r2
 8002904:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002906:	4b20      	ldr	r3, [pc, #128]	@ (8002988 <HAL_RCC_ClockConfig+0x1b8>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0307 	and.w	r3, r3, #7
 800290e:	683a      	ldr	r2, [r7, #0]
 8002910:	429a      	cmp	r2, r3
 8002912:	d001      	beq.n	8002918 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e032      	b.n	800297e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0304 	and.w	r3, r3, #4
 8002920:	2b00      	cmp	r3, #0
 8002922:	d008      	beq.n	8002936 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002924:	4b19      	ldr	r3, [pc, #100]	@ (800298c <HAL_RCC_ClockConfig+0x1bc>)
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	4916      	ldr	r1, [pc, #88]	@ (800298c <HAL_RCC_ClockConfig+0x1bc>)
 8002932:	4313      	orrs	r3, r2
 8002934:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0308 	and.w	r3, r3, #8
 800293e:	2b00      	cmp	r3, #0
 8002940:	d009      	beq.n	8002956 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002942:	4b12      	ldr	r3, [pc, #72]	@ (800298c <HAL_RCC_ClockConfig+0x1bc>)
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	490e      	ldr	r1, [pc, #56]	@ (800298c <HAL_RCC_ClockConfig+0x1bc>)
 8002952:	4313      	orrs	r3, r2
 8002954:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002956:	f000 f821 	bl	800299c <HAL_RCC_GetSysClockFreq>
 800295a:	4602      	mov	r2, r0
 800295c:	4b0b      	ldr	r3, [pc, #44]	@ (800298c <HAL_RCC_ClockConfig+0x1bc>)
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	091b      	lsrs	r3, r3, #4
 8002962:	f003 030f 	and.w	r3, r3, #15
 8002966:	490a      	ldr	r1, [pc, #40]	@ (8002990 <HAL_RCC_ClockConfig+0x1c0>)
 8002968:	5ccb      	ldrb	r3, [r1, r3]
 800296a:	fa22 f303 	lsr.w	r3, r2, r3
 800296e:	4a09      	ldr	r2, [pc, #36]	@ (8002994 <HAL_RCC_ClockConfig+0x1c4>)
 8002970:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002972:	4b09      	ldr	r3, [pc, #36]	@ (8002998 <HAL_RCC_ClockConfig+0x1c8>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4618      	mov	r0, r3
 8002978:	f7fe fcb6 	bl	80012e8 <HAL_InitTick>

  return HAL_OK;
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	40023c00 	.word	0x40023c00
 800298c:	40023800 	.word	0x40023800
 8002990:	080083f0 	.word	0x080083f0
 8002994:	20000000 	.word	0x20000000
 8002998:	20000004 	.word	0x20000004

0800299c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800299c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029a0:	b090      	sub	sp, #64	@ 0x40
 80029a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80029a4:	2300      	movs	r3, #0
 80029a6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80029a8:	2300      	movs	r3, #0
 80029aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80029ac:	2300      	movs	r3, #0
 80029ae:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80029b0:	2300      	movs	r3, #0
 80029b2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029b4:	4b59      	ldr	r3, [pc, #356]	@ (8002b1c <HAL_RCC_GetSysClockFreq+0x180>)
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f003 030c 	and.w	r3, r3, #12
 80029bc:	2b08      	cmp	r3, #8
 80029be:	d00d      	beq.n	80029dc <HAL_RCC_GetSysClockFreq+0x40>
 80029c0:	2b08      	cmp	r3, #8
 80029c2:	f200 80a1 	bhi.w	8002b08 <HAL_RCC_GetSysClockFreq+0x16c>
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d002      	beq.n	80029d0 <HAL_RCC_GetSysClockFreq+0x34>
 80029ca:	2b04      	cmp	r3, #4
 80029cc:	d003      	beq.n	80029d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80029ce:	e09b      	b.n	8002b08 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029d0:	4b53      	ldr	r3, [pc, #332]	@ (8002b20 <HAL_RCC_GetSysClockFreq+0x184>)
 80029d2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80029d4:	e09b      	b.n	8002b0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029d6:	4b53      	ldr	r3, [pc, #332]	@ (8002b24 <HAL_RCC_GetSysClockFreq+0x188>)
 80029d8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80029da:	e098      	b.n	8002b0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029dc:	4b4f      	ldr	r3, [pc, #316]	@ (8002b1c <HAL_RCC_GetSysClockFreq+0x180>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80029e4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029e6:	4b4d      	ldr	r3, [pc, #308]	@ (8002b1c <HAL_RCC_GetSysClockFreq+0x180>)
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d028      	beq.n	8002a44 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029f2:	4b4a      	ldr	r3, [pc, #296]	@ (8002b1c <HAL_RCC_GetSysClockFreq+0x180>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	099b      	lsrs	r3, r3, #6
 80029f8:	2200      	movs	r2, #0
 80029fa:	623b      	str	r3, [r7, #32]
 80029fc:	627a      	str	r2, [r7, #36]	@ 0x24
 80029fe:	6a3b      	ldr	r3, [r7, #32]
 8002a00:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002a04:	2100      	movs	r1, #0
 8002a06:	4b47      	ldr	r3, [pc, #284]	@ (8002b24 <HAL_RCC_GetSysClockFreq+0x188>)
 8002a08:	fb03 f201 	mul.w	r2, r3, r1
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	fb00 f303 	mul.w	r3, r0, r3
 8002a12:	4413      	add	r3, r2
 8002a14:	4a43      	ldr	r2, [pc, #268]	@ (8002b24 <HAL_RCC_GetSysClockFreq+0x188>)
 8002a16:	fba0 1202 	umull	r1, r2, r0, r2
 8002a1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002a1c:	460a      	mov	r2, r1
 8002a1e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002a20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a22:	4413      	add	r3, r2
 8002a24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a28:	2200      	movs	r2, #0
 8002a2a:	61bb      	str	r3, [r7, #24]
 8002a2c:	61fa      	str	r2, [r7, #28]
 8002a2e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a32:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002a36:	f7fd fc23 	bl	8000280 <__aeabi_uldivmod>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	4613      	mov	r3, r2
 8002a40:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a42:	e053      	b.n	8002aec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a44:	4b35      	ldr	r3, [pc, #212]	@ (8002b1c <HAL_RCC_GetSysClockFreq+0x180>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	099b      	lsrs	r3, r3, #6
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	613b      	str	r3, [r7, #16]
 8002a4e:	617a      	str	r2, [r7, #20]
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002a56:	f04f 0b00 	mov.w	fp, #0
 8002a5a:	4652      	mov	r2, sl
 8002a5c:	465b      	mov	r3, fp
 8002a5e:	f04f 0000 	mov.w	r0, #0
 8002a62:	f04f 0100 	mov.w	r1, #0
 8002a66:	0159      	lsls	r1, r3, #5
 8002a68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a6c:	0150      	lsls	r0, r2, #5
 8002a6e:	4602      	mov	r2, r0
 8002a70:	460b      	mov	r3, r1
 8002a72:	ebb2 080a 	subs.w	r8, r2, sl
 8002a76:	eb63 090b 	sbc.w	r9, r3, fp
 8002a7a:	f04f 0200 	mov.w	r2, #0
 8002a7e:	f04f 0300 	mov.w	r3, #0
 8002a82:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002a86:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002a8a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002a8e:	ebb2 0408 	subs.w	r4, r2, r8
 8002a92:	eb63 0509 	sbc.w	r5, r3, r9
 8002a96:	f04f 0200 	mov.w	r2, #0
 8002a9a:	f04f 0300 	mov.w	r3, #0
 8002a9e:	00eb      	lsls	r3, r5, #3
 8002aa0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002aa4:	00e2      	lsls	r2, r4, #3
 8002aa6:	4614      	mov	r4, r2
 8002aa8:	461d      	mov	r5, r3
 8002aaa:	eb14 030a 	adds.w	r3, r4, sl
 8002aae:	603b      	str	r3, [r7, #0]
 8002ab0:	eb45 030b 	adc.w	r3, r5, fp
 8002ab4:	607b      	str	r3, [r7, #4]
 8002ab6:	f04f 0200 	mov.w	r2, #0
 8002aba:	f04f 0300 	mov.w	r3, #0
 8002abe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ac2:	4629      	mov	r1, r5
 8002ac4:	028b      	lsls	r3, r1, #10
 8002ac6:	4621      	mov	r1, r4
 8002ac8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002acc:	4621      	mov	r1, r4
 8002ace:	028a      	lsls	r2, r1, #10
 8002ad0:	4610      	mov	r0, r2
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	60bb      	str	r3, [r7, #8]
 8002ada:	60fa      	str	r2, [r7, #12]
 8002adc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ae0:	f7fd fbce 	bl	8000280 <__aeabi_uldivmod>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	460b      	mov	r3, r1
 8002ae8:	4613      	mov	r3, r2
 8002aea:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002aec:	4b0b      	ldr	r3, [pc, #44]	@ (8002b1c <HAL_RCC_GetSysClockFreq+0x180>)
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	0c1b      	lsrs	r3, r3, #16
 8002af2:	f003 0303 	and.w	r3, r3, #3
 8002af6:	3301      	adds	r3, #1
 8002af8:	005b      	lsls	r3, r3, #1
 8002afa:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002afc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b04:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002b06:	e002      	b.n	8002b0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b08:	4b05      	ldr	r3, [pc, #20]	@ (8002b20 <HAL_RCC_GetSysClockFreq+0x184>)
 8002b0a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002b0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3740      	adds	r7, #64	@ 0x40
 8002b14:	46bd      	mov	sp, r7
 8002b16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b1a:	bf00      	nop
 8002b1c:	40023800 	.word	0x40023800
 8002b20:	00f42400 	.word	0x00f42400
 8002b24:	017d7840 	.word	0x017d7840

08002b28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b2c:	4b03      	ldr	r3, [pc, #12]	@ (8002b3c <HAL_RCC_GetHCLKFreq+0x14>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	20000000 	.word	0x20000000

08002b40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b44:	f7ff fff0 	bl	8002b28 <HAL_RCC_GetHCLKFreq>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	4b05      	ldr	r3, [pc, #20]	@ (8002b60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	0a9b      	lsrs	r3, r3, #10
 8002b50:	f003 0307 	and.w	r3, r3, #7
 8002b54:	4903      	ldr	r1, [pc, #12]	@ (8002b64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b56:	5ccb      	ldrb	r3, [r1, r3]
 8002b58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	40023800 	.word	0x40023800
 8002b64:	08008400 	.word	0x08008400

08002b68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b6c:	f7ff ffdc 	bl	8002b28 <HAL_RCC_GetHCLKFreq>
 8002b70:	4602      	mov	r2, r0
 8002b72:	4b05      	ldr	r3, [pc, #20]	@ (8002b88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	0b5b      	lsrs	r3, r3, #13
 8002b78:	f003 0307 	and.w	r3, r3, #7
 8002b7c:	4903      	ldr	r1, [pc, #12]	@ (8002b8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b7e:	5ccb      	ldrb	r3, [r1, r3]
 8002b80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	40023800 	.word	0x40023800
 8002b8c:	08008400 	.word	0x08008400

08002b90 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	220f      	movs	r2, #15
 8002b9e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002ba0:	4b12      	ldr	r3, [pc, #72]	@ (8002bec <HAL_RCC_GetClockConfig+0x5c>)
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f003 0203 	and.w	r2, r3, #3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002bac:	4b0f      	ldr	r3, [pc, #60]	@ (8002bec <HAL_RCC_GetClockConfig+0x5c>)
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002bb8:	4b0c      	ldr	r3, [pc, #48]	@ (8002bec <HAL_RCC_GetClockConfig+0x5c>)
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002bc4:	4b09      	ldr	r3, [pc, #36]	@ (8002bec <HAL_RCC_GetClockConfig+0x5c>)
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	08db      	lsrs	r3, r3, #3
 8002bca:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002bd2:	4b07      	ldr	r3, [pc, #28]	@ (8002bf0 <HAL_RCC_GetClockConfig+0x60>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0207 	and.w	r2, r3, #7
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	601a      	str	r2, [r3, #0]
}
 8002bde:	bf00      	nop
 8002be0:	370c      	adds	r7, #12
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	40023800 	.word	0x40023800
 8002bf0:	40023c00 	.word	0x40023c00

08002bf4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d101      	bne.n	8002c06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e041      	b.n	8002c8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d106      	bne.n	8002c20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f7fe fa72 	bl	8001104 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2202      	movs	r2, #2
 8002c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	3304      	adds	r3, #4
 8002c30:	4619      	mov	r1, r3
 8002c32:	4610      	mov	r0, r2
 8002c34:	f000 fa70 	bl	8003118 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3708      	adds	r7, #8
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
	...

08002c94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b085      	sub	sp, #20
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d001      	beq.n	8002cac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e044      	b.n	8002d36 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2202      	movs	r2, #2
 8002cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68da      	ldr	r2, [r3, #12]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f042 0201 	orr.w	r2, r2, #1
 8002cc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a1e      	ldr	r2, [pc, #120]	@ (8002d44 <HAL_TIM_Base_Start_IT+0xb0>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d018      	beq.n	8002d00 <HAL_TIM_Base_Start_IT+0x6c>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cd6:	d013      	beq.n	8002d00 <HAL_TIM_Base_Start_IT+0x6c>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a1a      	ldr	r2, [pc, #104]	@ (8002d48 <HAL_TIM_Base_Start_IT+0xb4>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d00e      	beq.n	8002d00 <HAL_TIM_Base_Start_IT+0x6c>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a19      	ldr	r2, [pc, #100]	@ (8002d4c <HAL_TIM_Base_Start_IT+0xb8>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d009      	beq.n	8002d00 <HAL_TIM_Base_Start_IT+0x6c>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a17      	ldr	r2, [pc, #92]	@ (8002d50 <HAL_TIM_Base_Start_IT+0xbc>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d004      	beq.n	8002d00 <HAL_TIM_Base_Start_IT+0x6c>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a16      	ldr	r2, [pc, #88]	@ (8002d54 <HAL_TIM_Base_Start_IT+0xc0>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d111      	bne.n	8002d24 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f003 0307 	and.w	r3, r3, #7
 8002d0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2b06      	cmp	r3, #6
 8002d10:	d010      	beq.n	8002d34 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f042 0201 	orr.w	r2, r2, #1
 8002d20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d22:	e007      	b.n	8002d34 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f042 0201 	orr.w	r2, r2, #1
 8002d32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3714      	adds	r7, #20
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	40010000 	.word	0x40010000
 8002d48:	40000400 	.word	0x40000400
 8002d4c:	40000800 	.word	0x40000800
 8002d50:	40000c00 	.word	0x40000c00
 8002d54:	40014000 	.word	0x40014000

08002d58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d020      	beq.n	8002dbc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f003 0302 	and.w	r3, r3, #2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d01b      	beq.n	8002dbc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f06f 0202 	mvn.w	r2, #2
 8002d8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2201      	movs	r2, #1
 8002d92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	699b      	ldr	r3, [r3, #24]
 8002d9a:	f003 0303 	and.w	r3, r3, #3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d003      	beq.n	8002daa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 f999 	bl	80030da <HAL_TIM_IC_CaptureCallback>
 8002da8:	e005      	b.n	8002db6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 f98b 	bl	80030c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f000 f99c 	bl	80030ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	f003 0304 	and.w	r3, r3, #4
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d020      	beq.n	8002e08 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f003 0304 	and.w	r3, r3, #4
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d01b      	beq.n	8002e08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f06f 0204 	mvn.w	r2, #4
 8002dd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2202      	movs	r2, #2
 8002dde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d003      	beq.n	8002df6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f000 f973 	bl	80030da <HAL_TIM_IC_CaptureCallback>
 8002df4:	e005      	b.n	8002e02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 f965 	bl	80030c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f000 f976 	bl	80030ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	f003 0308 	and.w	r3, r3, #8
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d020      	beq.n	8002e54 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f003 0308 	and.w	r3, r3, #8
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d01b      	beq.n	8002e54 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f06f 0208 	mvn.w	r2, #8
 8002e24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2204      	movs	r2, #4
 8002e2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	69db      	ldr	r3, [r3, #28]
 8002e32:	f003 0303 	and.w	r3, r3, #3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d003      	beq.n	8002e42 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f000 f94d 	bl	80030da <HAL_TIM_IC_CaptureCallback>
 8002e40:	e005      	b.n	8002e4e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f000 f93f 	bl	80030c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f000 f950 	bl	80030ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	f003 0310 	and.w	r3, r3, #16
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d020      	beq.n	8002ea0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f003 0310 	and.w	r3, r3, #16
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d01b      	beq.n	8002ea0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f06f 0210 	mvn.w	r2, #16
 8002e70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2208      	movs	r2, #8
 8002e76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	69db      	ldr	r3, [r3, #28]
 8002e7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d003      	beq.n	8002e8e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f000 f927 	bl	80030da <HAL_TIM_IC_CaptureCallback>
 8002e8c:	e005      	b.n	8002e9a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f000 f919 	bl	80030c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f000 f92a 	bl	80030ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	f003 0301 	and.w	r3, r3, #1
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00c      	beq.n	8002ec4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	f003 0301 	and.w	r3, r3, #1
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d007      	beq.n	8002ec4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f06f 0201 	mvn.w	r2, #1
 8002ebc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f7fe f8dc 	bl	800107c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d00c      	beq.n	8002ee8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d007      	beq.n	8002ee8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002ee0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 fab6 	bl	8003454 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d00c      	beq.n	8002f0c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d007      	beq.n	8002f0c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002f04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f000 f8fb 	bl	8003102 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	f003 0320 	and.w	r3, r3, #32
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d00c      	beq.n	8002f30 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	f003 0320 	and.w	r3, r3, #32
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d007      	beq.n	8002f30 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f06f 0220 	mvn.w	r2, #32
 8002f28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f000 fa88 	bl	8003440 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f30:	bf00      	nop
 8002f32:	3710      	adds	r7, #16
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f42:	2300      	movs	r3, #0
 8002f44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d101      	bne.n	8002f54 <HAL_TIM_ConfigClockSource+0x1c>
 8002f50:	2302      	movs	r3, #2
 8002f52:	e0b4      	b.n	80030be <HAL_TIM_ConfigClockSource+0x186>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2202      	movs	r2, #2
 8002f60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002f72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002f7a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	68ba      	ldr	r2, [r7, #8]
 8002f82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f8c:	d03e      	beq.n	800300c <HAL_TIM_ConfigClockSource+0xd4>
 8002f8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f92:	f200 8087 	bhi.w	80030a4 <HAL_TIM_ConfigClockSource+0x16c>
 8002f96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f9a:	f000 8086 	beq.w	80030aa <HAL_TIM_ConfigClockSource+0x172>
 8002f9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fa2:	d87f      	bhi.n	80030a4 <HAL_TIM_ConfigClockSource+0x16c>
 8002fa4:	2b70      	cmp	r3, #112	@ 0x70
 8002fa6:	d01a      	beq.n	8002fde <HAL_TIM_ConfigClockSource+0xa6>
 8002fa8:	2b70      	cmp	r3, #112	@ 0x70
 8002faa:	d87b      	bhi.n	80030a4 <HAL_TIM_ConfigClockSource+0x16c>
 8002fac:	2b60      	cmp	r3, #96	@ 0x60
 8002fae:	d050      	beq.n	8003052 <HAL_TIM_ConfigClockSource+0x11a>
 8002fb0:	2b60      	cmp	r3, #96	@ 0x60
 8002fb2:	d877      	bhi.n	80030a4 <HAL_TIM_ConfigClockSource+0x16c>
 8002fb4:	2b50      	cmp	r3, #80	@ 0x50
 8002fb6:	d03c      	beq.n	8003032 <HAL_TIM_ConfigClockSource+0xfa>
 8002fb8:	2b50      	cmp	r3, #80	@ 0x50
 8002fba:	d873      	bhi.n	80030a4 <HAL_TIM_ConfigClockSource+0x16c>
 8002fbc:	2b40      	cmp	r3, #64	@ 0x40
 8002fbe:	d058      	beq.n	8003072 <HAL_TIM_ConfigClockSource+0x13a>
 8002fc0:	2b40      	cmp	r3, #64	@ 0x40
 8002fc2:	d86f      	bhi.n	80030a4 <HAL_TIM_ConfigClockSource+0x16c>
 8002fc4:	2b30      	cmp	r3, #48	@ 0x30
 8002fc6:	d064      	beq.n	8003092 <HAL_TIM_ConfigClockSource+0x15a>
 8002fc8:	2b30      	cmp	r3, #48	@ 0x30
 8002fca:	d86b      	bhi.n	80030a4 <HAL_TIM_ConfigClockSource+0x16c>
 8002fcc:	2b20      	cmp	r3, #32
 8002fce:	d060      	beq.n	8003092 <HAL_TIM_ConfigClockSource+0x15a>
 8002fd0:	2b20      	cmp	r3, #32
 8002fd2:	d867      	bhi.n	80030a4 <HAL_TIM_ConfigClockSource+0x16c>
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d05c      	beq.n	8003092 <HAL_TIM_ConfigClockSource+0x15a>
 8002fd8:	2b10      	cmp	r3, #16
 8002fda:	d05a      	beq.n	8003092 <HAL_TIM_ConfigClockSource+0x15a>
 8002fdc:	e062      	b.n	80030a4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002fee:	f000 f999 	bl	8003324 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003000:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	68ba      	ldr	r2, [r7, #8]
 8003008:	609a      	str	r2, [r3, #8]
      break;
 800300a:	e04f      	b.n	80030ac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800301c:	f000 f982 	bl	8003324 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	689a      	ldr	r2, [r3, #8]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800302e:	609a      	str	r2, [r3, #8]
      break;
 8003030:	e03c      	b.n	80030ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800303e:	461a      	mov	r2, r3
 8003040:	f000 f8f6 	bl	8003230 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2150      	movs	r1, #80	@ 0x50
 800304a:	4618      	mov	r0, r3
 800304c:	f000 f94f 	bl	80032ee <TIM_ITRx_SetConfig>
      break;
 8003050:	e02c      	b.n	80030ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800305e:	461a      	mov	r2, r3
 8003060:	f000 f915 	bl	800328e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2160      	movs	r1, #96	@ 0x60
 800306a:	4618      	mov	r0, r3
 800306c:	f000 f93f 	bl	80032ee <TIM_ITRx_SetConfig>
      break;
 8003070:	e01c      	b.n	80030ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800307e:	461a      	mov	r2, r3
 8003080:	f000 f8d6 	bl	8003230 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2140      	movs	r1, #64	@ 0x40
 800308a:	4618      	mov	r0, r3
 800308c:	f000 f92f 	bl	80032ee <TIM_ITRx_SetConfig>
      break;
 8003090:	e00c      	b.n	80030ac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4619      	mov	r1, r3
 800309c:	4610      	mov	r0, r2
 800309e:	f000 f926 	bl	80032ee <TIM_ITRx_SetConfig>
      break;
 80030a2:	e003      	b.n	80030ac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	73fb      	strb	r3, [r7, #15]
      break;
 80030a8:	e000      	b.n	80030ac <HAL_TIM_ConfigClockSource+0x174>
      break;
 80030aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80030bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3710      	adds	r7, #16
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030c6:	b480      	push	{r7}
 80030c8:	b083      	sub	sp, #12
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030ce:	bf00      	nop
 80030d0:	370c      	adds	r7, #12
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr

080030da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030da:	b480      	push	{r7}
 80030dc:	b083      	sub	sp, #12
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030e2:	bf00      	nop
 80030e4:	370c      	adds	r7, #12
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr

080030ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80030ee:	b480      	push	{r7}
 80030f0:	b083      	sub	sp, #12
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030f6:	bf00      	nop
 80030f8:	370c      	adds	r7, #12
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr

08003102 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003102:	b480      	push	{r7}
 8003104:	b083      	sub	sp, #12
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800310a:	bf00      	nop
 800310c:	370c      	adds	r7, #12
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
	...

08003118 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003118:	b480      	push	{r7}
 800311a:	b085      	sub	sp, #20
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4a3a      	ldr	r2, [pc, #232]	@ (8003214 <TIM_Base_SetConfig+0xfc>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d00f      	beq.n	8003150 <TIM_Base_SetConfig+0x38>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003136:	d00b      	beq.n	8003150 <TIM_Base_SetConfig+0x38>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4a37      	ldr	r2, [pc, #220]	@ (8003218 <TIM_Base_SetConfig+0x100>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d007      	beq.n	8003150 <TIM_Base_SetConfig+0x38>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4a36      	ldr	r2, [pc, #216]	@ (800321c <TIM_Base_SetConfig+0x104>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d003      	beq.n	8003150 <TIM_Base_SetConfig+0x38>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4a35      	ldr	r2, [pc, #212]	@ (8003220 <TIM_Base_SetConfig+0x108>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d108      	bne.n	8003162 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003156:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	68fa      	ldr	r2, [r7, #12]
 800315e:	4313      	orrs	r3, r2
 8003160:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a2b      	ldr	r2, [pc, #172]	@ (8003214 <TIM_Base_SetConfig+0xfc>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d01b      	beq.n	80031a2 <TIM_Base_SetConfig+0x8a>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003170:	d017      	beq.n	80031a2 <TIM_Base_SetConfig+0x8a>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a28      	ldr	r2, [pc, #160]	@ (8003218 <TIM_Base_SetConfig+0x100>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d013      	beq.n	80031a2 <TIM_Base_SetConfig+0x8a>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a27      	ldr	r2, [pc, #156]	@ (800321c <TIM_Base_SetConfig+0x104>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d00f      	beq.n	80031a2 <TIM_Base_SetConfig+0x8a>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a26      	ldr	r2, [pc, #152]	@ (8003220 <TIM_Base_SetConfig+0x108>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d00b      	beq.n	80031a2 <TIM_Base_SetConfig+0x8a>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a25      	ldr	r2, [pc, #148]	@ (8003224 <TIM_Base_SetConfig+0x10c>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d007      	beq.n	80031a2 <TIM_Base_SetConfig+0x8a>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a24      	ldr	r2, [pc, #144]	@ (8003228 <TIM_Base_SetConfig+0x110>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d003      	beq.n	80031a2 <TIM_Base_SetConfig+0x8a>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a23      	ldr	r2, [pc, #140]	@ (800322c <TIM_Base_SetConfig+0x114>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d108      	bne.n	80031b4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	68fa      	ldr	r2, [r7, #12]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	4313      	orrs	r3, r2
 80031c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	68fa      	ldr	r2, [r7, #12]
 80031c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	689a      	ldr	r2, [r3, #8]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a0e      	ldr	r2, [pc, #56]	@ (8003214 <TIM_Base_SetConfig+0xfc>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d103      	bne.n	80031e8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	691a      	ldr	r2, [r3, #16]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d105      	bne.n	8003206 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	f023 0201 	bic.w	r2, r3, #1
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	611a      	str	r2, [r3, #16]
  }
}
 8003206:	bf00      	nop
 8003208:	3714      	adds	r7, #20
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	40010000 	.word	0x40010000
 8003218:	40000400 	.word	0x40000400
 800321c:	40000800 	.word	0x40000800
 8003220:	40000c00 	.word	0x40000c00
 8003224:	40014000 	.word	0x40014000
 8003228:	40014400 	.word	0x40014400
 800322c:	40014800 	.word	0x40014800

08003230 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003230:	b480      	push	{r7}
 8003232:	b087      	sub	sp, #28
 8003234:	af00      	add	r7, sp, #0
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	60b9      	str	r1, [r7, #8]
 800323a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6a1b      	ldr	r3, [r3, #32]
 8003240:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6a1b      	ldr	r3, [r3, #32]
 8003246:	f023 0201 	bic.w	r2, r3, #1
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	699b      	ldr	r3, [r3, #24]
 8003252:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800325a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	011b      	lsls	r3, r3, #4
 8003260:	693a      	ldr	r2, [r7, #16]
 8003262:	4313      	orrs	r3, r2
 8003264:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	f023 030a 	bic.w	r3, r3, #10
 800326c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800326e:	697a      	ldr	r2, [r7, #20]
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	4313      	orrs	r3, r2
 8003274:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	693a      	ldr	r2, [r7, #16]
 800327a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	697a      	ldr	r2, [r7, #20]
 8003280:	621a      	str	r2, [r3, #32]
}
 8003282:	bf00      	nop
 8003284:	371c      	adds	r7, #28
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr

0800328e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800328e:	b480      	push	{r7}
 8003290:	b087      	sub	sp, #28
 8003292:	af00      	add	r7, sp, #0
 8003294:	60f8      	str	r0, [r7, #12]
 8003296:	60b9      	str	r1, [r7, #8]
 8003298:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6a1b      	ldr	r3, [r3, #32]
 800329e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6a1b      	ldr	r3, [r3, #32]
 80032a4:	f023 0210 	bic.w	r2, r3, #16
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	699b      	ldr	r3, [r3, #24]
 80032b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80032b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	031b      	lsls	r3, r3, #12
 80032be:	693a      	ldr	r2, [r7, #16]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80032ca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	011b      	lsls	r3, r3, #4
 80032d0:	697a      	ldr	r2, [r7, #20]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	693a      	ldr	r2, [r7, #16]
 80032da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	697a      	ldr	r2, [r7, #20]
 80032e0:	621a      	str	r2, [r3, #32]
}
 80032e2:	bf00      	nop
 80032e4:	371c      	adds	r7, #28
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr

080032ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80032ee:	b480      	push	{r7}
 80032f0:	b085      	sub	sp, #20
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
 80032f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003304:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003306:	683a      	ldr	r2, [r7, #0]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	4313      	orrs	r3, r2
 800330c:	f043 0307 	orr.w	r3, r3, #7
 8003310:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	68fa      	ldr	r2, [r7, #12]
 8003316:	609a      	str	r2, [r3, #8]
}
 8003318:	bf00      	nop
 800331a:	3714      	adds	r7, #20
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003324:	b480      	push	{r7}
 8003326:	b087      	sub	sp, #28
 8003328:	af00      	add	r7, sp, #0
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	60b9      	str	r1, [r7, #8]
 800332e:	607a      	str	r2, [r7, #4]
 8003330:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800333e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	021a      	lsls	r2, r3, #8
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	431a      	orrs	r2, r3
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	4313      	orrs	r3, r2
 800334c:	697a      	ldr	r2, [r7, #20]
 800334e:	4313      	orrs	r3, r2
 8003350:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	697a      	ldr	r2, [r7, #20]
 8003356:	609a      	str	r2, [r3, #8]
}
 8003358:	bf00      	nop
 800335a:	371c      	adds	r7, #28
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003364:	b480      	push	{r7}
 8003366:	b085      	sub	sp, #20
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003374:	2b01      	cmp	r3, #1
 8003376:	d101      	bne.n	800337c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003378:	2302      	movs	r3, #2
 800337a:	e050      	b.n	800341e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2202      	movs	r2, #2
 8003388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a1c      	ldr	r2, [pc, #112]	@ (800342c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d018      	beq.n	80033f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033c8:	d013      	beq.n	80033f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a18      	ldr	r2, [pc, #96]	@ (8003430 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d00e      	beq.n	80033f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a16      	ldr	r2, [pc, #88]	@ (8003434 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d009      	beq.n	80033f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a15      	ldr	r2, [pc, #84]	@ (8003438 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d004      	beq.n	80033f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a13      	ldr	r2, [pc, #76]	@ (800343c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d10c      	bne.n	800340c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80033f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	68ba      	ldr	r2, [r7, #8]
 8003400:	4313      	orrs	r3, r2
 8003402:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	68ba      	ldr	r2, [r7, #8]
 800340a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3714      	adds	r7, #20
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop
 800342c:	40010000 	.word	0x40010000
 8003430:	40000400 	.word	0x40000400
 8003434:	40000800 	.word	0x40000800
 8003438:	40000c00 	.word	0x40000c00
 800343c:	40014000 	.word	0x40014000

08003440 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003448:	bf00      	nop
 800344a:	370c      	adds	r7, #12
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr

08003454 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800345c:	bf00      	nop
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d101      	bne.n	800347a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e042      	b.n	8003500 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b00      	cmp	r3, #0
 8003484:	d106      	bne.n	8003494 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f7fd fe74 	bl	800117c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2224      	movs	r2, #36	@ 0x24
 8003498:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	68da      	ldr	r2, [r3, #12]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80034aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f000 fdc1 	bl	8004034 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	691a      	ldr	r2, [r3, #16]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80034c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	695a      	ldr	r2, [r3, #20]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80034d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68da      	ldr	r2, [r3, #12]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80034e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2220      	movs	r2, #32
 80034ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2220      	movs	r2, #32
 80034f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80034fe:	2300      	movs	r3, #0
}
 8003500:	4618      	mov	r0, r3
 8003502:	3708      	adds	r7, #8
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}

08003508 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b08c      	sub	sp, #48	@ 0x30
 800350c:	af00      	add	r7, sp, #0
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	4613      	mov	r3, r2
 8003514:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b20      	cmp	r3, #32
 8003520:	d156      	bne.n	80035d0 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d002      	beq.n	800352e <HAL_UART_Transmit_DMA+0x26>
 8003528:	88fb      	ldrh	r3, [r7, #6]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d101      	bne.n	8003532 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e04f      	b.n	80035d2 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8003532:	68ba      	ldr	r2, [r7, #8]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	88fa      	ldrh	r2, [r7, #6]
 800353c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	88fa      	ldrh	r2, [r7, #6]
 8003542:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2200      	movs	r2, #0
 8003548:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2221      	movs	r2, #33	@ 0x21
 800354e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003556:	4a21      	ldr	r2, [pc, #132]	@ (80035dc <HAL_UART_Transmit_DMA+0xd4>)
 8003558:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800355e:	4a20      	ldr	r2, [pc, #128]	@ (80035e0 <HAL_UART_Transmit_DMA+0xd8>)
 8003560:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003566:	4a1f      	ldr	r2, [pc, #124]	@ (80035e4 <HAL_UART_Transmit_DMA+0xdc>)
 8003568:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800356e:	2200      	movs	r2, #0
 8003570:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8003572:	f107 0308 	add.w	r3, r7, #8
 8003576:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800357c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800357e:	6819      	ldr	r1, [r3, #0]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	3304      	adds	r3, #4
 8003586:	461a      	mov	r2, r3
 8003588:	88fb      	ldrh	r3, [r7, #6]
 800358a:	f7fe f9d1 	bl	8001930 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003596:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	3314      	adds	r3, #20
 800359e:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	e853 3f00 	ldrex	r3, [r3]
 80035a6:	617b      	str	r3, [r7, #20]
   return(result);
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	3314      	adds	r3, #20
 80035b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80035b8:	627a      	str	r2, [r7, #36]	@ 0x24
 80035ba:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035bc:	6a39      	ldr	r1, [r7, #32]
 80035be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035c0:	e841 2300 	strex	r3, r2, [r1]
 80035c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d1e5      	bne.n	8003598 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80035cc:	2300      	movs	r3, #0
 80035ce:	e000      	b.n	80035d2 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80035d0:	2302      	movs	r3, #2
  }
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3730      	adds	r7, #48	@ 0x30
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	08003b61 	.word	0x08003b61
 80035e0:	08003bfb 	.word	0x08003bfb
 80035e4:	08003c17 	.word	0x08003c17

080035e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b0ba      	sub	sp, #232	@ 0xe8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	695b      	ldr	r3, [r3, #20]
 800360a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800360e:	2300      	movs	r3, #0
 8003610:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003614:	2300      	movs	r3, #0
 8003616:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800361a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800361e:	f003 030f 	and.w	r3, r3, #15
 8003622:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003626:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800362a:	2b00      	cmp	r3, #0
 800362c:	d10f      	bne.n	800364e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800362e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003632:	f003 0320 	and.w	r3, r3, #32
 8003636:	2b00      	cmp	r3, #0
 8003638:	d009      	beq.n	800364e <HAL_UART_IRQHandler+0x66>
 800363a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800363e:	f003 0320 	and.w	r3, r3, #32
 8003642:	2b00      	cmp	r3, #0
 8003644:	d003      	beq.n	800364e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 fc36 	bl	8003eb8 <UART_Receive_IT>
      return;
 800364c:	e25b      	b.n	8003b06 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800364e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003652:	2b00      	cmp	r3, #0
 8003654:	f000 80de 	beq.w	8003814 <HAL_UART_IRQHandler+0x22c>
 8003658:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800365c:	f003 0301 	and.w	r3, r3, #1
 8003660:	2b00      	cmp	r3, #0
 8003662:	d106      	bne.n	8003672 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003664:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003668:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800366c:	2b00      	cmp	r3, #0
 800366e:	f000 80d1 	beq.w	8003814 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003672:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00b      	beq.n	8003696 <HAL_UART_IRQHandler+0xae>
 800367e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003682:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003686:	2b00      	cmp	r3, #0
 8003688:	d005      	beq.n	8003696 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800368e:	f043 0201 	orr.w	r2, r3, #1
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003696:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800369a:	f003 0304 	and.w	r3, r3, #4
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00b      	beq.n	80036ba <HAL_UART_IRQHandler+0xd2>
 80036a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d005      	beq.n	80036ba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036b2:	f043 0202 	orr.w	r2, r3, #2
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036be:	f003 0302 	and.w	r3, r3, #2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d00b      	beq.n	80036de <HAL_UART_IRQHandler+0xf6>
 80036c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036ca:	f003 0301 	and.w	r3, r3, #1
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d005      	beq.n	80036de <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036d6:	f043 0204 	orr.w	r2, r3, #4
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80036de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036e2:	f003 0308 	and.w	r3, r3, #8
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d011      	beq.n	800370e <HAL_UART_IRQHandler+0x126>
 80036ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036ee:	f003 0320 	and.w	r3, r3, #32
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d105      	bne.n	8003702 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80036f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036fa:	f003 0301 	and.w	r3, r3, #1
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d005      	beq.n	800370e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003706:	f043 0208 	orr.w	r2, r3, #8
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003712:	2b00      	cmp	r3, #0
 8003714:	f000 81f2 	beq.w	8003afc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003718:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800371c:	f003 0320 	and.w	r3, r3, #32
 8003720:	2b00      	cmp	r3, #0
 8003722:	d008      	beq.n	8003736 <HAL_UART_IRQHandler+0x14e>
 8003724:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003728:	f003 0320 	and.w	r3, r3, #32
 800372c:	2b00      	cmp	r3, #0
 800372e:	d002      	beq.n	8003736 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f000 fbc1 	bl	8003eb8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	695b      	ldr	r3, [r3, #20]
 800373c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003740:	2b40      	cmp	r3, #64	@ 0x40
 8003742:	bf0c      	ite	eq
 8003744:	2301      	moveq	r3, #1
 8003746:	2300      	movne	r3, #0
 8003748:	b2db      	uxtb	r3, r3
 800374a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003752:	f003 0308 	and.w	r3, r3, #8
 8003756:	2b00      	cmp	r3, #0
 8003758:	d103      	bne.n	8003762 <HAL_UART_IRQHandler+0x17a>
 800375a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800375e:	2b00      	cmp	r3, #0
 8003760:	d04f      	beq.n	8003802 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 fac9 	bl	8003cfa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003772:	2b40      	cmp	r3, #64	@ 0x40
 8003774:	d141      	bne.n	80037fa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	3314      	adds	r3, #20
 800377c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003780:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003784:	e853 3f00 	ldrex	r3, [r3]
 8003788:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800378c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003790:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003794:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	3314      	adds	r3, #20
 800379e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80037a2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80037a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80037ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80037b2:	e841 2300 	strex	r3, r2, [r1]
 80037b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80037ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d1d9      	bne.n	8003776 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d013      	beq.n	80037f2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037ce:	4a7e      	ldr	r2, [pc, #504]	@ (80039c8 <HAL_UART_IRQHandler+0x3e0>)
 80037d0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7fe f972 	bl	8001ac0 <HAL_DMA_Abort_IT>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d016      	beq.n	8003810 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80037ec:	4610      	mov	r0, r2
 80037ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037f0:	e00e      	b.n	8003810 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 f99e 	bl	8003b34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037f8:	e00a      	b.n	8003810 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 f99a 	bl	8003b34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003800:	e006      	b.n	8003810 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 f996 	bl	8003b34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800380e:	e175      	b.n	8003afc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003810:	bf00      	nop
    return;
 8003812:	e173      	b.n	8003afc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003818:	2b01      	cmp	r3, #1
 800381a:	f040 814f 	bne.w	8003abc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800381e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003822:	f003 0310 	and.w	r3, r3, #16
 8003826:	2b00      	cmp	r3, #0
 8003828:	f000 8148 	beq.w	8003abc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800382c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003830:	f003 0310 	and.w	r3, r3, #16
 8003834:	2b00      	cmp	r3, #0
 8003836:	f000 8141 	beq.w	8003abc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800383a:	2300      	movs	r3, #0
 800383c:	60bb      	str	r3, [r7, #8]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	60bb      	str	r3, [r7, #8]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	60bb      	str	r3, [r7, #8]
 800384e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800385a:	2b40      	cmp	r3, #64	@ 0x40
 800385c:	f040 80b6 	bne.w	80039cc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800386c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003870:	2b00      	cmp	r3, #0
 8003872:	f000 8145 	beq.w	8003b00 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800387a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800387e:	429a      	cmp	r2, r3
 8003880:	f080 813e 	bcs.w	8003b00 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800388a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003890:	69db      	ldr	r3, [r3, #28]
 8003892:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003896:	f000 8088 	beq.w	80039aa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	330c      	adds	r3, #12
 80038a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80038a8:	e853 3f00 	ldrex	r3, [r3]
 80038ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80038b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80038b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	330c      	adds	r3, #12
 80038c2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80038c6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80038ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80038d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80038d6:	e841 2300 	strex	r3, r2, [r1]
 80038da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80038de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d1d9      	bne.n	800389a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	3314      	adds	r3, #20
 80038ec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038f0:	e853 3f00 	ldrex	r3, [r3]
 80038f4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80038f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80038f8:	f023 0301 	bic.w	r3, r3, #1
 80038fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	3314      	adds	r3, #20
 8003906:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800390a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800390e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003910:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003912:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003916:	e841 2300 	strex	r3, r2, [r1]
 800391a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800391c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800391e:	2b00      	cmp	r3, #0
 8003920:	d1e1      	bne.n	80038e6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	3314      	adds	r3, #20
 8003928:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800392a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800392c:	e853 3f00 	ldrex	r3, [r3]
 8003930:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003932:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003934:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003938:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	3314      	adds	r3, #20
 8003942:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003946:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003948:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800394a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800394c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800394e:	e841 2300 	strex	r3, r2, [r1]
 8003952:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003954:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003956:	2b00      	cmp	r3, #0
 8003958:	d1e3      	bne.n	8003922 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2220      	movs	r2, #32
 800395e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	330c      	adds	r3, #12
 800396e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003970:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003972:	e853 3f00 	ldrex	r3, [r3]
 8003976:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003978:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800397a:	f023 0310 	bic.w	r3, r3, #16
 800397e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	330c      	adds	r3, #12
 8003988:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800398c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800398e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003990:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003992:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003994:	e841 2300 	strex	r3, r2, [r1]
 8003998:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800399a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800399c:	2b00      	cmp	r3, #0
 800399e:	d1e3      	bne.n	8003968 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7fe f81b 	bl	80019e0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2202      	movs	r2, #2
 80039ae:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	b29b      	uxth	r3, r3
 80039be:	4619      	mov	r1, r3
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f000 f8c1 	bl	8003b48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80039c6:	e09b      	b.n	8003b00 <HAL_UART_IRQHandler+0x518>
 80039c8:	08003dc1 	.word	0x08003dc1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	f000 808e 	beq.w	8003b04 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80039e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	f000 8089 	beq.w	8003b04 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	330c      	adds	r3, #12
 80039f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039fc:	e853 3f00 	ldrex	r3, [r3]
 8003a00:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003a02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a04:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a08:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	330c      	adds	r3, #12
 8003a12:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003a16:	647a      	str	r2, [r7, #68]	@ 0x44
 8003a18:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a1a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003a1c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a1e:	e841 2300 	strex	r3, r2, [r1]
 8003a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003a24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d1e3      	bne.n	80039f2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	3314      	adds	r3, #20
 8003a30:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a34:	e853 3f00 	ldrex	r3, [r3]
 8003a38:	623b      	str	r3, [r7, #32]
   return(result);
 8003a3a:	6a3b      	ldr	r3, [r7, #32]
 8003a3c:	f023 0301 	bic.w	r3, r3, #1
 8003a40:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	3314      	adds	r3, #20
 8003a4a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003a4e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003a50:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a52:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a56:	e841 2300 	strex	r3, r2, [r1]
 8003a5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003a5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d1e3      	bne.n	8003a2a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2220      	movs	r2, #32
 8003a66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	330c      	adds	r3, #12
 8003a76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	e853 3f00 	ldrex	r3, [r3]
 8003a7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f023 0310 	bic.w	r3, r3, #16
 8003a86:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	330c      	adds	r3, #12
 8003a90:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003a94:	61fa      	str	r2, [r7, #28]
 8003a96:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a98:	69b9      	ldr	r1, [r7, #24]
 8003a9a:	69fa      	ldr	r2, [r7, #28]
 8003a9c:	e841 2300 	strex	r3, r2, [r1]
 8003aa0:	617b      	str	r3, [r7, #20]
   return(result);
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d1e3      	bne.n	8003a70 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2202      	movs	r2, #2
 8003aac:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003aae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f000 f847 	bl	8003b48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003aba:	e023      	b.n	8003b04 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003abc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ac0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d009      	beq.n	8003adc <HAL_UART_IRQHandler+0x4f4>
 8003ac8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003acc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d003      	beq.n	8003adc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f000 f987 	bl	8003de8 <UART_Transmit_IT>
    return;
 8003ada:	e014      	b.n	8003b06 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003adc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ae0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d00e      	beq.n	8003b06 <HAL_UART_IRQHandler+0x51e>
 8003ae8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003aec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d008      	beq.n	8003b06 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f000 f9c7 	bl	8003e88 <UART_EndTransmit_IT>
    return;
 8003afa:	e004      	b.n	8003b06 <HAL_UART_IRQHandler+0x51e>
    return;
 8003afc:	bf00      	nop
 8003afe:	e002      	b.n	8003b06 <HAL_UART_IRQHandler+0x51e>
      return;
 8003b00:	bf00      	nop
 8003b02:	e000      	b.n	8003b06 <HAL_UART_IRQHandler+0x51e>
      return;
 8003b04:	bf00      	nop
  }
}
 8003b06:	37e8      	adds	r7, #232	@ 0xe8
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003b14:	bf00      	nop
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003b28:	bf00      	nop
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003b3c:	bf00      	nop
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	460b      	mov	r3, r1
 8003b52:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b54:	bf00      	nop
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b090      	sub	sp, #64	@ 0x40
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d137      	bne.n	8003bec <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8003b7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b7e:	2200      	movs	r2, #0
 8003b80:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003b82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	3314      	adds	r3, #20
 8003b88:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b8c:	e853 3f00 	ldrex	r3, [r3]
 8003b90:	623b      	str	r3, [r7, #32]
   return(result);
 8003b92:	6a3b      	ldr	r3, [r7, #32]
 8003b94:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b98:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	3314      	adds	r3, #20
 8003ba0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003ba2:	633a      	str	r2, [r7, #48]	@ 0x30
 8003ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003ba8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003baa:	e841 2300 	strex	r3, r2, [r1]
 8003bae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003bb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d1e5      	bne.n	8003b82 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003bb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	330c      	adds	r3, #12
 8003bbc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	e853 3f00 	ldrex	r3, [r3]
 8003bc4:	60fb      	str	r3, [r7, #12]
   return(result);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003bcc:	637b      	str	r3, [r7, #52]	@ 0x34
 8003bce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	330c      	adds	r3, #12
 8003bd4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003bd6:	61fa      	str	r2, [r7, #28]
 8003bd8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bda:	69b9      	ldr	r1, [r7, #24]
 8003bdc:	69fa      	ldr	r2, [r7, #28]
 8003bde:	e841 2300 	strex	r3, r2, [r1]
 8003be2:	617b      	str	r3, [r7, #20]
   return(result);
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d1e5      	bne.n	8003bb6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003bea:	e002      	b.n	8003bf2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8003bec:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003bee:	f7fd f849 	bl	8000c84 <HAL_UART_TxCpltCallback>
}
 8003bf2:	bf00      	nop
 8003bf4:	3740      	adds	r7, #64	@ 0x40
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}

08003bfa <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003bfa:	b580      	push	{r7, lr}
 8003bfc:	b084      	sub	sp, #16
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c06:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003c08:	68f8      	ldr	r0, [r7, #12]
 8003c0a:	f7ff ff7f 	bl	8003b0c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c0e:	bf00      	nop
 8003c10:	3710      	adds	r7, #16
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}

08003c16 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003c16:	b580      	push	{r7, lr}
 8003c18:	b084      	sub	sp, #16
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c26:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	695b      	ldr	r3, [r3, #20]
 8003c2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c32:	2b80      	cmp	r3, #128	@ 0x80
 8003c34:	bf0c      	ite	eq
 8003c36:	2301      	moveq	r3, #1
 8003c38:	2300      	movne	r3, #0
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	2b21      	cmp	r3, #33	@ 0x21
 8003c48:	d108      	bne.n	8003c5c <UART_DMAError+0x46>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d005      	beq.n	8003c5c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	2200      	movs	r2, #0
 8003c54:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8003c56:	68b8      	ldr	r0, [r7, #8]
 8003c58:	f000 f827 	bl	8003caa <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	695b      	ldr	r3, [r3, #20]
 8003c62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c66:	2b40      	cmp	r3, #64	@ 0x40
 8003c68:	bf0c      	ite	eq
 8003c6a:	2301      	moveq	r3, #1
 8003c6c:	2300      	movne	r3, #0
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b22      	cmp	r3, #34	@ 0x22
 8003c7c:	d108      	bne.n	8003c90 <UART_DMAError+0x7a>
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d005      	beq.n	8003c90 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	2200      	movs	r2, #0
 8003c88:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8003c8a:	68b8      	ldr	r0, [r7, #8]
 8003c8c:	f000 f835 	bl	8003cfa <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c94:	f043 0210 	orr.w	r2, r3, #16
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c9c:	68b8      	ldr	r0, [r7, #8]
 8003c9e:	f7ff ff49 	bl	8003b34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ca2:	bf00      	nop
 8003ca4:	3710      	adds	r7, #16
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}

08003caa <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003caa:	b480      	push	{r7}
 8003cac:	b089      	sub	sp, #36	@ 0x24
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	330c      	adds	r3, #12
 8003cb8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	e853 3f00 	ldrex	r3, [r3]
 8003cc0:	60bb      	str	r3, [r7, #8]
   return(result);
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003cc8:	61fb      	str	r3, [r7, #28]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	330c      	adds	r3, #12
 8003cd0:	69fa      	ldr	r2, [r7, #28]
 8003cd2:	61ba      	str	r2, [r7, #24]
 8003cd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd6:	6979      	ldr	r1, [r7, #20]
 8003cd8:	69ba      	ldr	r2, [r7, #24]
 8003cda:	e841 2300 	strex	r3, r2, [r1]
 8003cde:	613b      	str	r3, [r7, #16]
   return(result);
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1e5      	bne.n	8003cb2 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2220      	movs	r2, #32
 8003cea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8003cee:	bf00      	nop
 8003cf0:	3724      	adds	r7, #36	@ 0x24
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr

08003cfa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003cfa:	b480      	push	{r7}
 8003cfc:	b095      	sub	sp, #84	@ 0x54
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	330c      	adds	r3, #12
 8003d08:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d0c:	e853 3f00 	ldrex	r3, [r3]
 8003d10:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d14:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d18:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	330c      	adds	r3, #12
 8003d20:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d22:	643a      	str	r2, [r7, #64]	@ 0x40
 8003d24:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d26:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003d28:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003d2a:	e841 2300 	strex	r3, r2, [r1]
 8003d2e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003d30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1e5      	bne.n	8003d02 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	3314      	adds	r3, #20
 8003d3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d3e:	6a3b      	ldr	r3, [r7, #32]
 8003d40:	e853 3f00 	ldrex	r3, [r3]
 8003d44:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	f023 0301 	bic.w	r3, r3, #1
 8003d4c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	3314      	adds	r3, #20
 8003d54:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d56:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d58:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d5a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d5e:	e841 2300 	strex	r3, r2, [r1]
 8003d62:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d1e5      	bne.n	8003d36 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d119      	bne.n	8003da6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	330c      	adds	r3, #12
 8003d78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	e853 3f00 	ldrex	r3, [r3]
 8003d80:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	f023 0310 	bic.w	r3, r3, #16
 8003d88:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	330c      	adds	r3, #12
 8003d90:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d92:	61ba      	str	r2, [r7, #24]
 8003d94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d96:	6979      	ldr	r1, [r7, #20]
 8003d98:	69ba      	ldr	r2, [r7, #24]
 8003d9a:	e841 2300 	strex	r3, r2, [r1]
 8003d9e:	613b      	str	r3, [r7, #16]
   return(result);
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1e5      	bne.n	8003d72 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2220      	movs	r2, #32
 8003daa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003db4:	bf00      	nop
 8003db6:	3754      	adds	r7, #84	@ 0x54
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dcc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003dda:	68f8      	ldr	r0, [r7, #12]
 8003ddc:	f7ff feaa 	bl	8003b34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003de0:	bf00      	nop
 8003de2:	3710      	adds	r7, #16
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b085      	sub	sp, #20
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	2b21      	cmp	r3, #33	@ 0x21
 8003dfa:	d13e      	bne.n	8003e7a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e04:	d114      	bne.n	8003e30 <UART_Transmit_IT+0x48>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d110      	bne.n	8003e30 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a1b      	ldr	r3, [r3, #32]
 8003e12:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	881b      	ldrh	r3, [r3, #0]
 8003e18:	461a      	mov	r2, r3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e22:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a1b      	ldr	r3, [r3, #32]
 8003e28:	1c9a      	adds	r2, r3, #2
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	621a      	str	r2, [r3, #32]
 8003e2e:	e008      	b.n	8003e42 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a1b      	ldr	r3, [r3, #32]
 8003e34:	1c59      	adds	r1, r3, #1
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	6211      	str	r1, [r2, #32]
 8003e3a:	781a      	ldrb	r2, [r3, #0]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	3b01      	subs	r3, #1
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	4619      	mov	r1, r3
 8003e50:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d10f      	bne.n	8003e76 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68da      	ldr	r2, [r3, #12]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003e64:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68da      	ldr	r2, [r3, #12]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003e74:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003e76:	2300      	movs	r3, #0
 8003e78:	e000      	b.n	8003e7c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003e7a:	2302      	movs	r3, #2
  }
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3714      	adds	r7, #20
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68da      	ldr	r2, [r3, #12]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e9e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2220      	movs	r2, #32
 8003ea4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f7fc feeb 	bl	8000c84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003eae:	2300      	movs	r3, #0
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3708      	adds	r7, #8
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b08c      	sub	sp, #48	@ 0x30
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	2b22      	cmp	r3, #34	@ 0x22
 8003eca:	f040 80ae 	bne.w	800402a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ed6:	d117      	bne.n	8003f08 <UART_Receive_IT+0x50>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	691b      	ldr	r3, [r3, #16]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d113      	bne.n	8003f08 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ee8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ef6:	b29a      	uxth	r2, r3
 8003ef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003efa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f00:	1c9a      	adds	r2, r3, #2
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	629a      	str	r2, [r3, #40]	@ 0x28
 8003f06:	e026      	b.n	8003f56 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f1a:	d007      	beq.n	8003f2c <UART_Receive_IT+0x74>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d10a      	bne.n	8003f3a <UART_Receive_IT+0x82>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	691b      	ldr	r3, [r3, #16]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d106      	bne.n	8003f3a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	b2da      	uxtb	r2, r3
 8003f34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f36:	701a      	strb	r2, [r3, #0]
 8003f38:	e008      	b.n	8003f4c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f46:	b2da      	uxtb	r2, r3
 8003f48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f4a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f50:	1c5a      	adds	r2, r3, #1
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	3b01      	subs	r3, #1
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	4619      	mov	r1, r3
 8003f64:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d15d      	bne.n	8004026 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	68da      	ldr	r2, [r3, #12]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f022 0220 	bic.w	r2, r2, #32
 8003f78:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	68da      	ldr	r2, [r3, #12]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f88:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	695a      	ldr	r2, [r3, #20]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f022 0201 	bic.w	r2, r2, #1
 8003f98:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2220      	movs	r2, #32
 8003f9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d135      	bne.n	800401c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	330c      	adds	r3, #12
 8003fbc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	e853 3f00 	ldrex	r3, [r3]
 8003fc4:	613b      	str	r3, [r7, #16]
   return(result);
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	f023 0310 	bic.w	r3, r3, #16
 8003fcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	330c      	adds	r3, #12
 8003fd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fd6:	623a      	str	r2, [r7, #32]
 8003fd8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fda:	69f9      	ldr	r1, [r7, #28]
 8003fdc:	6a3a      	ldr	r2, [r7, #32]
 8003fde:	e841 2300 	strex	r3, r2, [r1]
 8003fe2:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d1e5      	bne.n	8003fb6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0310 	and.w	r3, r3, #16
 8003ff4:	2b10      	cmp	r3, #16
 8003ff6:	d10a      	bne.n	800400e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	60fb      	str	r3, [r7, #12]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	60fb      	str	r3, [r7, #12]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	60fb      	str	r3, [r7, #12]
 800400c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004012:	4619      	mov	r1, r3
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f7ff fd97 	bl	8003b48 <HAL_UARTEx_RxEventCallback>
 800401a:	e002      	b.n	8004022 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f7ff fd7f 	bl	8003b20 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004022:	2300      	movs	r3, #0
 8004024:	e002      	b.n	800402c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004026:	2300      	movs	r3, #0
 8004028:	e000      	b.n	800402c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800402a:	2302      	movs	r3, #2
  }
}
 800402c:	4618      	mov	r0, r3
 800402e:	3730      	adds	r7, #48	@ 0x30
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004034:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004038:	b0c0      	sub	sp, #256	@ 0x100
 800403a:	af00      	add	r7, sp, #0
 800403c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	691b      	ldr	r3, [r3, #16]
 8004048:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800404c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004050:	68d9      	ldr	r1, [r3, #12]
 8004052:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	ea40 0301 	orr.w	r3, r0, r1
 800405c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800405e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004062:	689a      	ldr	r2, [r3, #8]
 8004064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	431a      	orrs	r2, r3
 800406c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004070:	695b      	ldr	r3, [r3, #20]
 8004072:	431a      	orrs	r2, r3
 8004074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004078:	69db      	ldr	r3, [r3, #28]
 800407a:	4313      	orrs	r3, r2
 800407c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800408c:	f021 010c 	bic.w	r1, r1, #12
 8004090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800409a:	430b      	orrs	r3, r1
 800409c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800409e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	695b      	ldr	r3, [r3, #20]
 80040a6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80040aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040ae:	6999      	ldr	r1, [r3, #24]
 80040b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	ea40 0301 	orr.w	r3, r0, r1
 80040ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80040bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	4b8f      	ldr	r3, [pc, #572]	@ (8004300 <UART_SetConfig+0x2cc>)
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d005      	beq.n	80040d4 <UART_SetConfig+0xa0>
 80040c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	4b8d      	ldr	r3, [pc, #564]	@ (8004304 <UART_SetConfig+0x2d0>)
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d104      	bne.n	80040de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80040d4:	f7fe fd48 	bl	8002b68 <HAL_RCC_GetPCLK2Freq>
 80040d8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80040dc:	e003      	b.n	80040e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80040de:	f7fe fd2f 	bl	8002b40 <HAL_RCC_GetPCLK1Freq>
 80040e2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040ea:	69db      	ldr	r3, [r3, #28]
 80040ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040f0:	f040 810c 	bne.w	800430c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80040f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040f8:	2200      	movs	r2, #0
 80040fa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80040fe:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004102:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004106:	4622      	mov	r2, r4
 8004108:	462b      	mov	r3, r5
 800410a:	1891      	adds	r1, r2, r2
 800410c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800410e:	415b      	adcs	r3, r3
 8004110:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004112:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004116:	4621      	mov	r1, r4
 8004118:	eb12 0801 	adds.w	r8, r2, r1
 800411c:	4629      	mov	r1, r5
 800411e:	eb43 0901 	adc.w	r9, r3, r1
 8004122:	f04f 0200 	mov.w	r2, #0
 8004126:	f04f 0300 	mov.w	r3, #0
 800412a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800412e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004132:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004136:	4690      	mov	r8, r2
 8004138:	4699      	mov	r9, r3
 800413a:	4623      	mov	r3, r4
 800413c:	eb18 0303 	adds.w	r3, r8, r3
 8004140:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004144:	462b      	mov	r3, r5
 8004146:	eb49 0303 	adc.w	r3, r9, r3
 800414a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800414e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800415a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800415e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004162:	460b      	mov	r3, r1
 8004164:	18db      	adds	r3, r3, r3
 8004166:	653b      	str	r3, [r7, #80]	@ 0x50
 8004168:	4613      	mov	r3, r2
 800416a:	eb42 0303 	adc.w	r3, r2, r3
 800416e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004170:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004174:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004178:	f7fc f882 	bl	8000280 <__aeabi_uldivmod>
 800417c:	4602      	mov	r2, r0
 800417e:	460b      	mov	r3, r1
 8004180:	4b61      	ldr	r3, [pc, #388]	@ (8004308 <UART_SetConfig+0x2d4>)
 8004182:	fba3 2302 	umull	r2, r3, r3, r2
 8004186:	095b      	lsrs	r3, r3, #5
 8004188:	011c      	lsls	r4, r3, #4
 800418a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800418e:	2200      	movs	r2, #0
 8004190:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004194:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004198:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800419c:	4642      	mov	r2, r8
 800419e:	464b      	mov	r3, r9
 80041a0:	1891      	adds	r1, r2, r2
 80041a2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80041a4:	415b      	adcs	r3, r3
 80041a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80041ac:	4641      	mov	r1, r8
 80041ae:	eb12 0a01 	adds.w	sl, r2, r1
 80041b2:	4649      	mov	r1, r9
 80041b4:	eb43 0b01 	adc.w	fp, r3, r1
 80041b8:	f04f 0200 	mov.w	r2, #0
 80041bc:	f04f 0300 	mov.w	r3, #0
 80041c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80041c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80041c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041cc:	4692      	mov	sl, r2
 80041ce:	469b      	mov	fp, r3
 80041d0:	4643      	mov	r3, r8
 80041d2:	eb1a 0303 	adds.w	r3, sl, r3
 80041d6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80041da:	464b      	mov	r3, r9
 80041dc:	eb4b 0303 	adc.w	r3, fp, r3
 80041e0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80041e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80041f0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80041f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80041f8:	460b      	mov	r3, r1
 80041fa:	18db      	adds	r3, r3, r3
 80041fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80041fe:	4613      	mov	r3, r2
 8004200:	eb42 0303 	adc.w	r3, r2, r3
 8004204:	647b      	str	r3, [r7, #68]	@ 0x44
 8004206:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800420a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800420e:	f7fc f837 	bl	8000280 <__aeabi_uldivmod>
 8004212:	4602      	mov	r2, r0
 8004214:	460b      	mov	r3, r1
 8004216:	4611      	mov	r1, r2
 8004218:	4b3b      	ldr	r3, [pc, #236]	@ (8004308 <UART_SetConfig+0x2d4>)
 800421a:	fba3 2301 	umull	r2, r3, r3, r1
 800421e:	095b      	lsrs	r3, r3, #5
 8004220:	2264      	movs	r2, #100	@ 0x64
 8004222:	fb02 f303 	mul.w	r3, r2, r3
 8004226:	1acb      	subs	r3, r1, r3
 8004228:	00db      	lsls	r3, r3, #3
 800422a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800422e:	4b36      	ldr	r3, [pc, #216]	@ (8004308 <UART_SetConfig+0x2d4>)
 8004230:	fba3 2302 	umull	r2, r3, r3, r2
 8004234:	095b      	lsrs	r3, r3, #5
 8004236:	005b      	lsls	r3, r3, #1
 8004238:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800423c:	441c      	add	r4, r3
 800423e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004242:	2200      	movs	r2, #0
 8004244:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004248:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800424c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004250:	4642      	mov	r2, r8
 8004252:	464b      	mov	r3, r9
 8004254:	1891      	adds	r1, r2, r2
 8004256:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004258:	415b      	adcs	r3, r3
 800425a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800425c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004260:	4641      	mov	r1, r8
 8004262:	1851      	adds	r1, r2, r1
 8004264:	6339      	str	r1, [r7, #48]	@ 0x30
 8004266:	4649      	mov	r1, r9
 8004268:	414b      	adcs	r3, r1
 800426a:	637b      	str	r3, [r7, #52]	@ 0x34
 800426c:	f04f 0200 	mov.w	r2, #0
 8004270:	f04f 0300 	mov.w	r3, #0
 8004274:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004278:	4659      	mov	r1, fp
 800427a:	00cb      	lsls	r3, r1, #3
 800427c:	4651      	mov	r1, sl
 800427e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004282:	4651      	mov	r1, sl
 8004284:	00ca      	lsls	r2, r1, #3
 8004286:	4610      	mov	r0, r2
 8004288:	4619      	mov	r1, r3
 800428a:	4603      	mov	r3, r0
 800428c:	4642      	mov	r2, r8
 800428e:	189b      	adds	r3, r3, r2
 8004290:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004294:	464b      	mov	r3, r9
 8004296:	460a      	mov	r2, r1
 8004298:	eb42 0303 	adc.w	r3, r2, r3
 800429c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80042a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80042ac:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80042b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80042b4:	460b      	mov	r3, r1
 80042b6:	18db      	adds	r3, r3, r3
 80042b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042ba:	4613      	mov	r3, r2
 80042bc:	eb42 0303 	adc.w	r3, r2, r3
 80042c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80042c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80042ca:	f7fb ffd9 	bl	8000280 <__aeabi_uldivmod>
 80042ce:	4602      	mov	r2, r0
 80042d0:	460b      	mov	r3, r1
 80042d2:	4b0d      	ldr	r3, [pc, #52]	@ (8004308 <UART_SetConfig+0x2d4>)
 80042d4:	fba3 1302 	umull	r1, r3, r3, r2
 80042d8:	095b      	lsrs	r3, r3, #5
 80042da:	2164      	movs	r1, #100	@ 0x64
 80042dc:	fb01 f303 	mul.w	r3, r1, r3
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	00db      	lsls	r3, r3, #3
 80042e4:	3332      	adds	r3, #50	@ 0x32
 80042e6:	4a08      	ldr	r2, [pc, #32]	@ (8004308 <UART_SetConfig+0x2d4>)
 80042e8:	fba2 2303 	umull	r2, r3, r2, r3
 80042ec:	095b      	lsrs	r3, r3, #5
 80042ee:	f003 0207 	and.w	r2, r3, #7
 80042f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4422      	add	r2, r4
 80042fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80042fc:	e106      	b.n	800450c <UART_SetConfig+0x4d8>
 80042fe:	bf00      	nop
 8004300:	40011000 	.word	0x40011000
 8004304:	40011400 	.word	0x40011400
 8004308:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800430c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004310:	2200      	movs	r2, #0
 8004312:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004316:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800431a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800431e:	4642      	mov	r2, r8
 8004320:	464b      	mov	r3, r9
 8004322:	1891      	adds	r1, r2, r2
 8004324:	6239      	str	r1, [r7, #32]
 8004326:	415b      	adcs	r3, r3
 8004328:	627b      	str	r3, [r7, #36]	@ 0x24
 800432a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800432e:	4641      	mov	r1, r8
 8004330:	1854      	adds	r4, r2, r1
 8004332:	4649      	mov	r1, r9
 8004334:	eb43 0501 	adc.w	r5, r3, r1
 8004338:	f04f 0200 	mov.w	r2, #0
 800433c:	f04f 0300 	mov.w	r3, #0
 8004340:	00eb      	lsls	r3, r5, #3
 8004342:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004346:	00e2      	lsls	r2, r4, #3
 8004348:	4614      	mov	r4, r2
 800434a:	461d      	mov	r5, r3
 800434c:	4643      	mov	r3, r8
 800434e:	18e3      	adds	r3, r4, r3
 8004350:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004354:	464b      	mov	r3, r9
 8004356:	eb45 0303 	adc.w	r3, r5, r3
 800435a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800435e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800436a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800436e:	f04f 0200 	mov.w	r2, #0
 8004372:	f04f 0300 	mov.w	r3, #0
 8004376:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800437a:	4629      	mov	r1, r5
 800437c:	008b      	lsls	r3, r1, #2
 800437e:	4621      	mov	r1, r4
 8004380:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004384:	4621      	mov	r1, r4
 8004386:	008a      	lsls	r2, r1, #2
 8004388:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800438c:	f7fb ff78 	bl	8000280 <__aeabi_uldivmod>
 8004390:	4602      	mov	r2, r0
 8004392:	460b      	mov	r3, r1
 8004394:	4b60      	ldr	r3, [pc, #384]	@ (8004518 <UART_SetConfig+0x4e4>)
 8004396:	fba3 2302 	umull	r2, r3, r3, r2
 800439a:	095b      	lsrs	r3, r3, #5
 800439c:	011c      	lsls	r4, r3, #4
 800439e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043a2:	2200      	movs	r2, #0
 80043a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80043a8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80043ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80043b0:	4642      	mov	r2, r8
 80043b2:	464b      	mov	r3, r9
 80043b4:	1891      	adds	r1, r2, r2
 80043b6:	61b9      	str	r1, [r7, #24]
 80043b8:	415b      	adcs	r3, r3
 80043ba:	61fb      	str	r3, [r7, #28]
 80043bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043c0:	4641      	mov	r1, r8
 80043c2:	1851      	adds	r1, r2, r1
 80043c4:	6139      	str	r1, [r7, #16]
 80043c6:	4649      	mov	r1, r9
 80043c8:	414b      	adcs	r3, r1
 80043ca:	617b      	str	r3, [r7, #20]
 80043cc:	f04f 0200 	mov.w	r2, #0
 80043d0:	f04f 0300 	mov.w	r3, #0
 80043d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043d8:	4659      	mov	r1, fp
 80043da:	00cb      	lsls	r3, r1, #3
 80043dc:	4651      	mov	r1, sl
 80043de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043e2:	4651      	mov	r1, sl
 80043e4:	00ca      	lsls	r2, r1, #3
 80043e6:	4610      	mov	r0, r2
 80043e8:	4619      	mov	r1, r3
 80043ea:	4603      	mov	r3, r0
 80043ec:	4642      	mov	r2, r8
 80043ee:	189b      	adds	r3, r3, r2
 80043f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80043f4:	464b      	mov	r3, r9
 80043f6:	460a      	mov	r2, r1
 80043f8:	eb42 0303 	adc.w	r3, r2, r3
 80043fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	67bb      	str	r3, [r7, #120]	@ 0x78
 800440a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800440c:	f04f 0200 	mov.w	r2, #0
 8004410:	f04f 0300 	mov.w	r3, #0
 8004414:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004418:	4649      	mov	r1, r9
 800441a:	008b      	lsls	r3, r1, #2
 800441c:	4641      	mov	r1, r8
 800441e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004422:	4641      	mov	r1, r8
 8004424:	008a      	lsls	r2, r1, #2
 8004426:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800442a:	f7fb ff29 	bl	8000280 <__aeabi_uldivmod>
 800442e:	4602      	mov	r2, r0
 8004430:	460b      	mov	r3, r1
 8004432:	4611      	mov	r1, r2
 8004434:	4b38      	ldr	r3, [pc, #224]	@ (8004518 <UART_SetConfig+0x4e4>)
 8004436:	fba3 2301 	umull	r2, r3, r3, r1
 800443a:	095b      	lsrs	r3, r3, #5
 800443c:	2264      	movs	r2, #100	@ 0x64
 800443e:	fb02 f303 	mul.w	r3, r2, r3
 8004442:	1acb      	subs	r3, r1, r3
 8004444:	011b      	lsls	r3, r3, #4
 8004446:	3332      	adds	r3, #50	@ 0x32
 8004448:	4a33      	ldr	r2, [pc, #204]	@ (8004518 <UART_SetConfig+0x4e4>)
 800444a:	fba2 2303 	umull	r2, r3, r2, r3
 800444e:	095b      	lsrs	r3, r3, #5
 8004450:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004454:	441c      	add	r4, r3
 8004456:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800445a:	2200      	movs	r2, #0
 800445c:	673b      	str	r3, [r7, #112]	@ 0x70
 800445e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004460:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004464:	4642      	mov	r2, r8
 8004466:	464b      	mov	r3, r9
 8004468:	1891      	adds	r1, r2, r2
 800446a:	60b9      	str	r1, [r7, #8]
 800446c:	415b      	adcs	r3, r3
 800446e:	60fb      	str	r3, [r7, #12]
 8004470:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004474:	4641      	mov	r1, r8
 8004476:	1851      	adds	r1, r2, r1
 8004478:	6039      	str	r1, [r7, #0]
 800447a:	4649      	mov	r1, r9
 800447c:	414b      	adcs	r3, r1
 800447e:	607b      	str	r3, [r7, #4]
 8004480:	f04f 0200 	mov.w	r2, #0
 8004484:	f04f 0300 	mov.w	r3, #0
 8004488:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800448c:	4659      	mov	r1, fp
 800448e:	00cb      	lsls	r3, r1, #3
 8004490:	4651      	mov	r1, sl
 8004492:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004496:	4651      	mov	r1, sl
 8004498:	00ca      	lsls	r2, r1, #3
 800449a:	4610      	mov	r0, r2
 800449c:	4619      	mov	r1, r3
 800449e:	4603      	mov	r3, r0
 80044a0:	4642      	mov	r2, r8
 80044a2:	189b      	adds	r3, r3, r2
 80044a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80044a6:	464b      	mov	r3, r9
 80044a8:	460a      	mov	r2, r1
 80044aa:	eb42 0303 	adc.w	r3, r2, r3
 80044ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80044b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	663b      	str	r3, [r7, #96]	@ 0x60
 80044ba:	667a      	str	r2, [r7, #100]	@ 0x64
 80044bc:	f04f 0200 	mov.w	r2, #0
 80044c0:	f04f 0300 	mov.w	r3, #0
 80044c4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80044c8:	4649      	mov	r1, r9
 80044ca:	008b      	lsls	r3, r1, #2
 80044cc:	4641      	mov	r1, r8
 80044ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044d2:	4641      	mov	r1, r8
 80044d4:	008a      	lsls	r2, r1, #2
 80044d6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80044da:	f7fb fed1 	bl	8000280 <__aeabi_uldivmod>
 80044de:	4602      	mov	r2, r0
 80044e0:	460b      	mov	r3, r1
 80044e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004518 <UART_SetConfig+0x4e4>)
 80044e4:	fba3 1302 	umull	r1, r3, r3, r2
 80044e8:	095b      	lsrs	r3, r3, #5
 80044ea:	2164      	movs	r1, #100	@ 0x64
 80044ec:	fb01 f303 	mul.w	r3, r1, r3
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	011b      	lsls	r3, r3, #4
 80044f4:	3332      	adds	r3, #50	@ 0x32
 80044f6:	4a08      	ldr	r2, [pc, #32]	@ (8004518 <UART_SetConfig+0x4e4>)
 80044f8:	fba2 2303 	umull	r2, r3, r2, r3
 80044fc:	095b      	lsrs	r3, r3, #5
 80044fe:	f003 020f 	and.w	r2, r3, #15
 8004502:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4422      	add	r2, r4
 800450a:	609a      	str	r2, [r3, #8]
}
 800450c:	bf00      	nop
 800450e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004512:	46bd      	mov	sp, r7
 8004514:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004518:	51eb851f 	.word	0x51eb851f

0800451c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800451c:	b580      	push	{r7, lr}
 800451e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004520:	4b05      	ldr	r3, [pc, #20]	@ (8004538 <SysTick_Handler+0x1c>)
 8004522:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004524:	f001 fe94 	bl	8006250 <xTaskGetSchedulerState>
 8004528:	4603      	mov	r3, r0
 800452a:	2b01      	cmp	r3, #1
 800452c:	d001      	beq.n	8004532 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800452e:	f002 ff7b 	bl	8007428 <xPortSysTickHandler>
  }
}
 8004532:	bf00      	nop
 8004534:	bd80      	pop	{r7, pc}
 8004536:	bf00      	nop
 8004538:	e000e010 	.word	0xe000e010

0800453c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800453c:	b480      	push	{r7}
 800453e:	b085      	sub	sp, #20
 8004540:	af00      	add	r7, sp, #0
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	60b9      	str	r1, [r7, #8]
 8004546:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	4a07      	ldr	r2, [pc, #28]	@ (8004568 <vApplicationGetIdleTaskMemory+0x2c>)
 800454c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	4a06      	ldr	r2, [pc, #24]	@ (800456c <vApplicationGetIdleTaskMemory+0x30>)
 8004552:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2280      	movs	r2, #128	@ 0x80
 8004558:	601a      	str	r2, [r3, #0]
}
 800455a:	bf00      	nop
 800455c:	3714      	adds	r7, #20
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	20000274 	.word	0x20000274
 800456c:	20000330 	.word	0x20000330

08004570 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004570:	b480      	push	{r7}
 8004572:	b085      	sub	sp, #20
 8004574:	af00      	add	r7, sp, #0
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	4a07      	ldr	r2, [pc, #28]	@ (800459c <vApplicationGetTimerTaskMemory+0x2c>)
 8004580:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	4a06      	ldr	r2, [pc, #24]	@ (80045a0 <vApplicationGetTimerTaskMemory+0x30>)
 8004586:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800458e:	601a      	str	r2, [r3, #0]
}
 8004590:	bf00      	nop
 8004592:	3714      	adds	r7, #20
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr
 800459c:	20000530 	.word	0x20000530
 80045a0:	200005ec 	.word	0x200005ec

080045a4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f103 0208 	add.w	r2, r3, #8
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80045bc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f103 0208 	add.w	r2, r3, #8
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f103 0208 	add.w	r2, r3, #8
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80045d8:	bf00      	nop
 80045da:	370c      	adds	r7, #12
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80045f2:	bf00      	nop
 80045f4:	370c      	adds	r7, #12
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr

080045fe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80045fe:	b480      	push	{r7}
 8004600:	b085      	sub	sp, #20
 8004602:	af00      	add	r7, sp, #0
 8004604:	6078      	str	r0, [r7, #4]
 8004606:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	68fa      	ldr	r2, [r7, #12]
 8004612:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	689a      	ldr	r2, [r3, #8]
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	683a      	ldr	r2, [r7, #0]
 8004622:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	683a      	ldr	r2, [r7, #0]
 8004628:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	1c5a      	adds	r2, r3, #1
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	601a      	str	r2, [r3, #0]
}
 800463a:	bf00      	nop
 800463c:	3714      	adds	r7, #20
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr

08004646 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004646:	b480      	push	{r7}
 8004648:	b085      	sub	sp, #20
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
 800464e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800465c:	d103      	bne.n	8004666 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	60fb      	str	r3, [r7, #12]
 8004664:	e00c      	b.n	8004680 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	3308      	adds	r3, #8
 800466a:	60fb      	str	r3, [r7, #12]
 800466c:	e002      	b.n	8004674 <vListInsert+0x2e>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	60fb      	str	r3, [r7, #12]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68ba      	ldr	r2, [r7, #8]
 800467c:	429a      	cmp	r2, r3
 800467e:	d2f6      	bcs.n	800466e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	685a      	ldr	r2, [r3, #4]
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	683a      	ldr	r2, [r7, #0]
 800468e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	683a      	ldr	r2, [r7, #0]
 800469a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	1c5a      	adds	r2, r3, #1
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	601a      	str	r2, [r3, #0]
}
 80046ac:	bf00      	nop
 80046ae:	3714      	adds	r7, #20
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80046b8:	b480      	push	{r7}
 80046ba:	b085      	sub	sp, #20
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	6892      	ldr	r2, [r2, #8]
 80046ce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	6852      	ldr	r2, [r2, #4]
 80046d8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d103      	bne.n	80046ec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	689a      	ldr	r2, [r3, #8]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	1e5a      	subs	r2, r3, #1
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
}
 8004700:	4618      	mov	r0, r3
 8004702:	3714      	adds	r7, #20
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b084      	sub	sp, #16
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d10b      	bne.n	8004738 <xQueueGenericReset+0x2c>
	__asm volatile
 8004720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004724:	f383 8811 	msr	BASEPRI, r3
 8004728:	f3bf 8f6f 	isb	sy
 800472c:	f3bf 8f4f 	dsb	sy
 8004730:	60bb      	str	r3, [r7, #8]
}
 8004732:	bf00      	nop
 8004734:	bf00      	nop
 8004736:	e7fd      	b.n	8004734 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004738:	f002 fde6 	bl	8007308 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004744:	68f9      	ldr	r1, [r7, #12]
 8004746:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004748:	fb01 f303 	mul.w	r3, r1, r3
 800474c:	441a      	add	r2, r3
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2200      	movs	r2, #0
 8004756:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004768:	3b01      	subs	r3, #1
 800476a:	68f9      	ldr	r1, [r7, #12]
 800476c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800476e:	fb01 f303 	mul.w	r3, r1, r3
 8004772:	441a      	add	r2, r3
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	22ff      	movs	r2, #255	@ 0xff
 800477c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	22ff      	movs	r2, #255	@ 0xff
 8004784:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d114      	bne.n	80047b8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d01a      	beq.n	80047cc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	3310      	adds	r3, #16
 800479a:	4618      	mov	r0, r3
 800479c:	f001 fb30 	bl	8005e00 <xTaskRemoveFromEventList>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d012      	beq.n	80047cc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80047a6:	4b0d      	ldr	r3, [pc, #52]	@ (80047dc <xQueueGenericReset+0xd0>)
 80047a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047ac:	601a      	str	r2, [r3, #0]
 80047ae:	f3bf 8f4f 	dsb	sy
 80047b2:	f3bf 8f6f 	isb	sy
 80047b6:	e009      	b.n	80047cc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	3310      	adds	r3, #16
 80047bc:	4618      	mov	r0, r3
 80047be:	f7ff fef1 	bl	80045a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	3324      	adds	r3, #36	@ 0x24
 80047c6:	4618      	mov	r0, r3
 80047c8:	f7ff feec 	bl	80045a4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80047cc:	f002 fdce 	bl	800736c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80047d0:	2301      	movs	r3, #1
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3710      	adds	r7, #16
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	e000ed04 	.word	0xe000ed04

080047e0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b08e      	sub	sp, #56	@ 0x38
 80047e4:	af02      	add	r7, sp, #8
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	60b9      	str	r1, [r7, #8]
 80047ea:	607a      	str	r2, [r7, #4]
 80047ec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d10b      	bne.n	800480c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80047f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047f8:	f383 8811 	msr	BASEPRI, r3
 80047fc:	f3bf 8f6f 	isb	sy
 8004800:	f3bf 8f4f 	dsb	sy
 8004804:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004806:	bf00      	nop
 8004808:	bf00      	nop
 800480a:	e7fd      	b.n	8004808 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d10b      	bne.n	800482a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004816:	f383 8811 	msr	BASEPRI, r3
 800481a:	f3bf 8f6f 	isb	sy
 800481e:	f3bf 8f4f 	dsb	sy
 8004822:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004824:	bf00      	nop
 8004826:	bf00      	nop
 8004828:	e7fd      	b.n	8004826 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d002      	beq.n	8004836 <xQueueGenericCreateStatic+0x56>
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d001      	beq.n	800483a <xQueueGenericCreateStatic+0x5a>
 8004836:	2301      	movs	r3, #1
 8004838:	e000      	b.n	800483c <xQueueGenericCreateStatic+0x5c>
 800483a:	2300      	movs	r3, #0
 800483c:	2b00      	cmp	r3, #0
 800483e:	d10b      	bne.n	8004858 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004840:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004844:	f383 8811 	msr	BASEPRI, r3
 8004848:	f3bf 8f6f 	isb	sy
 800484c:	f3bf 8f4f 	dsb	sy
 8004850:	623b      	str	r3, [r7, #32]
}
 8004852:	bf00      	nop
 8004854:	bf00      	nop
 8004856:	e7fd      	b.n	8004854 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d102      	bne.n	8004864 <xQueueGenericCreateStatic+0x84>
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d101      	bne.n	8004868 <xQueueGenericCreateStatic+0x88>
 8004864:	2301      	movs	r3, #1
 8004866:	e000      	b.n	800486a <xQueueGenericCreateStatic+0x8a>
 8004868:	2300      	movs	r3, #0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d10b      	bne.n	8004886 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800486e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004872:	f383 8811 	msr	BASEPRI, r3
 8004876:	f3bf 8f6f 	isb	sy
 800487a:	f3bf 8f4f 	dsb	sy
 800487e:	61fb      	str	r3, [r7, #28]
}
 8004880:	bf00      	nop
 8004882:	bf00      	nop
 8004884:	e7fd      	b.n	8004882 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004886:	2350      	movs	r3, #80	@ 0x50
 8004888:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	2b50      	cmp	r3, #80	@ 0x50
 800488e:	d00b      	beq.n	80048a8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004894:	f383 8811 	msr	BASEPRI, r3
 8004898:	f3bf 8f6f 	isb	sy
 800489c:	f3bf 8f4f 	dsb	sy
 80048a0:	61bb      	str	r3, [r7, #24]
}
 80048a2:	bf00      	nop
 80048a4:	bf00      	nop
 80048a6:	e7fd      	b.n	80048a4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80048a8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80048ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d00d      	beq.n	80048d0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80048b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80048bc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80048c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048c2:	9300      	str	r3, [sp, #0]
 80048c4:	4613      	mov	r3, r2
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	68b9      	ldr	r1, [r7, #8]
 80048ca:	68f8      	ldr	r0, [r7, #12]
 80048cc:	f000 f840 	bl	8004950 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80048d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3730      	adds	r7, #48	@ 0x30
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}

080048da <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80048da:	b580      	push	{r7, lr}
 80048dc:	b08a      	sub	sp, #40	@ 0x28
 80048de:	af02      	add	r7, sp, #8
 80048e0:	60f8      	str	r0, [r7, #12]
 80048e2:	60b9      	str	r1, [r7, #8]
 80048e4:	4613      	mov	r3, r2
 80048e6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d10b      	bne.n	8004906 <xQueueGenericCreate+0x2c>
	__asm volatile
 80048ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048f2:	f383 8811 	msr	BASEPRI, r3
 80048f6:	f3bf 8f6f 	isb	sy
 80048fa:	f3bf 8f4f 	dsb	sy
 80048fe:	613b      	str	r3, [r7, #16]
}
 8004900:	bf00      	nop
 8004902:	bf00      	nop
 8004904:	e7fd      	b.n	8004902 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	68ba      	ldr	r2, [r7, #8]
 800490a:	fb02 f303 	mul.w	r3, r2, r3
 800490e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	3350      	adds	r3, #80	@ 0x50
 8004914:	4618      	mov	r0, r3
 8004916:	f002 fe19 	bl	800754c <pvPortMalloc>
 800491a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d011      	beq.n	8004946 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004922:	69bb      	ldr	r3, [r7, #24]
 8004924:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	3350      	adds	r3, #80	@ 0x50
 800492a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	2200      	movs	r2, #0
 8004930:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004934:	79fa      	ldrb	r2, [r7, #7]
 8004936:	69bb      	ldr	r3, [r7, #24]
 8004938:	9300      	str	r3, [sp, #0]
 800493a:	4613      	mov	r3, r2
 800493c:	697a      	ldr	r2, [r7, #20]
 800493e:	68b9      	ldr	r1, [r7, #8]
 8004940:	68f8      	ldr	r0, [r7, #12]
 8004942:	f000 f805 	bl	8004950 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004946:	69bb      	ldr	r3, [r7, #24]
	}
 8004948:	4618      	mov	r0, r3
 800494a:	3720      	adds	r7, #32
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}

08004950 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b084      	sub	sp, #16
 8004954:	af00      	add	r7, sp, #0
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	60b9      	str	r1, [r7, #8]
 800495a:	607a      	str	r2, [r7, #4]
 800495c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d103      	bne.n	800496c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	69ba      	ldr	r2, [r7, #24]
 8004968:	601a      	str	r2, [r3, #0]
 800496a:	e002      	b.n	8004972 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	68fa      	ldr	r2, [r7, #12]
 8004976:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	68ba      	ldr	r2, [r7, #8]
 800497c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800497e:	2101      	movs	r1, #1
 8004980:	69b8      	ldr	r0, [r7, #24]
 8004982:	f7ff fec3 	bl	800470c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	78fa      	ldrb	r2, [r7, #3]
 800498a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800498e:	bf00      	nop
 8004990:	3710      	adds	r7, #16
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
	...

08004998 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b08e      	sub	sp, #56	@ 0x38
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	607a      	str	r2, [r7, #4]
 80049a4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80049a6:	2300      	movs	r3, #0
 80049a8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80049ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d10b      	bne.n	80049cc <xQueueGenericSend+0x34>
	__asm volatile
 80049b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049b8:	f383 8811 	msr	BASEPRI, r3
 80049bc:	f3bf 8f6f 	isb	sy
 80049c0:	f3bf 8f4f 	dsb	sy
 80049c4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80049c6:	bf00      	nop
 80049c8:	bf00      	nop
 80049ca:	e7fd      	b.n	80049c8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d103      	bne.n	80049da <xQueueGenericSend+0x42>
 80049d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d101      	bne.n	80049de <xQueueGenericSend+0x46>
 80049da:	2301      	movs	r3, #1
 80049dc:	e000      	b.n	80049e0 <xQueueGenericSend+0x48>
 80049de:	2300      	movs	r3, #0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d10b      	bne.n	80049fc <xQueueGenericSend+0x64>
	__asm volatile
 80049e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049e8:	f383 8811 	msr	BASEPRI, r3
 80049ec:	f3bf 8f6f 	isb	sy
 80049f0:	f3bf 8f4f 	dsb	sy
 80049f4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80049f6:	bf00      	nop
 80049f8:	bf00      	nop
 80049fa:	e7fd      	b.n	80049f8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	d103      	bne.n	8004a0a <xQueueGenericSend+0x72>
 8004a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d101      	bne.n	8004a0e <xQueueGenericSend+0x76>
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e000      	b.n	8004a10 <xQueueGenericSend+0x78>
 8004a0e:	2300      	movs	r3, #0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d10b      	bne.n	8004a2c <xQueueGenericSend+0x94>
	__asm volatile
 8004a14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a18:	f383 8811 	msr	BASEPRI, r3
 8004a1c:	f3bf 8f6f 	isb	sy
 8004a20:	f3bf 8f4f 	dsb	sy
 8004a24:	623b      	str	r3, [r7, #32]
}
 8004a26:	bf00      	nop
 8004a28:	bf00      	nop
 8004a2a:	e7fd      	b.n	8004a28 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a2c:	f001 fc10 	bl	8006250 <xTaskGetSchedulerState>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d102      	bne.n	8004a3c <xQueueGenericSend+0xa4>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d101      	bne.n	8004a40 <xQueueGenericSend+0xa8>
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e000      	b.n	8004a42 <xQueueGenericSend+0xaa>
 8004a40:	2300      	movs	r3, #0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d10b      	bne.n	8004a5e <xQueueGenericSend+0xc6>
	__asm volatile
 8004a46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a4a:	f383 8811 	msr	BASEPRI, r3
 8004a4e:	f3bf 8f6f 	isb	sy
 8004a52:	f3bf 8f4f 	dsb	sy
 8004a56:	61fb      	str	r3, [r7, #28]
}
 8004a58:	bf00      	nop
 8004a5a:	bf00      	nop
 8004a5c:	e7fd      	b.n	8004a5a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004a5e:	f002 fc53 	bl	8007308 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d302      	bcc.n	8004a74 <xQueueGenericSend+0xdc>
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	2b02      	cmp	r3, #2
 8004a72:	d129      	bne.n	8004ac8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004a74:	683a      	ldr	r2, [r7, #0]
 8004a76:	68b9      	ldr	r1, [r7, #8]
 8004a78:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004a7a:	f000 fbc7 	bl	800520c <prvCopyDataToQueue>
 8004a7e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d010      	beq.n	8004aaa <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a8a:	3324      	adds	r3, #36	@ 0x24
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f001 f9b7 	bl	8005e00 <xTaskRemoveFromEventList>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d013      	beq.n	8004ac0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004a98:	4b3f      	ldr	r3, [pc, #252]	@ (8004b98 <xQueueGenericSend+0x200>)
 8004a9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a9e:	601a      	str	r2, [r3, #0]
 8004aa0:	f3bf 8f4f 	dsb	sy
 8004aa4:	f3bf 8f6f 	isb	sy
 8004aa8:	e00a      	b.n	8004ac0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004aaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d007      	beq.n	8004ac0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004ab0:	4b39      	ldr	r3, [pc, #228]	@ (8004b98 <xQueueGenericSend+0x200>)
 8004ab2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ab6:	601a      	str	r2, [r3, #0]
 8004ab8:	f3bf 8f4f 	dsb	sy
 8004abc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004ac0:	f002 fc54 	bl	800736c <vPortExitCritical>
				return pdPASS;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e063      	b.n	8004b90 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d103      	bne.n	8004ad6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004ace:	f002 fc4d 	bl	800736c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	e05c      	b.n	8004b90 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004ad6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d106      	bne.n	8004aea <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004adc:	f107 0314 	add.w	r3, r7, #20
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f001 f9f1 	bl	8005ec8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004aea:	f002 fc3f 	bl	800736c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004aee:	f000 ff3f 	bl	8005970 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004af2:	f002 fc09 	bl	8007308 <vPortEnterCritical>
 8004af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004af8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004afc:	b25b      	sxtb	r3, r3
 8004afe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b02:	d103      	bne.n	8004b0c <xQueueGenericSend+0x174>
 8004b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b06:	2200      	movs	r2, #0
 8004b08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b0e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004b12:	b25b      	sxtb	r3, r3
 8004b14:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b18:	d103      	bne.n	8004b22 <xQueueGenericSend+0x18a>
 8004b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004b22:	f002 fc23 	bl	800736c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b26:	1d3a      	adds	r2, r7, #4
 8004b28:	f107 0314 	add.w	r3, r7, #20
 8004b2c:	4611      	mov	r1, r2
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f001 f9e0 	bl	8005ef4 <xTaskCheckForTimeOut>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d124      	bne.n	8004b84 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004b3a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004b3c:	f000 fc5e 	bl	80053fc <prvIsQueueFull>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d018      	beq.n	8004b78 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b48:	3310      	adds	r3, #16
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	4611      	mov	r1, r2
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f001 f904 	bl	8005d5c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004b54:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004b56:	f000 fbe9 	bl	800532c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004b5a:	f000 ff17 	bl	800598c <xTaskResumeAll>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	f47f af7c 	bne.w	8004a5e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004b66:	4b0c      	ldr	r3, [pc, #48]	@ (8004b98 <xQueueGenericSend+0x200>)
 8004b68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b6c:	601a      	str	r2, [r3, #0]
 8004b6e:	f3bf 8f4f 	dsb	sy
 8004b72:	f3bf 8f6f 	isb	sy
 8004b76:	e772      	b.n	8004a5e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004b78:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004b7a:	f000 fbd7 	bl	800532c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004b7e:	f000 ff05 	bl	800598c <xTaskResumeAll>
 8004b82:	e76c      	b.n	8004a5e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004b84:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004b86:	f000 fbd1 	bl	800532c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004b8a:	f000 feff 	bl	800598c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004b8e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3738      	adds	r7, #56	@ 0x38
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	e000ed04 	.word	0xe000ed04

08004b9c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b090      	sub	sp, #64	@ 0x40
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	607a      	str	r2, [r7, #4]
 8004ba8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004bae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d10b      	bne.n	8004bcc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004bb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bb8:	f383 8811 	msr	BASEPRI, r3
 8004bbc:	f3bf 8f6f 	isb	sy
 8004bc0:	f3bf 8f4f 	dsb	sy
 8004bc4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004bc6:	bf00      	nop
 8004bc8:	bf00      	nop
 8004bca:	e7fd      	b.n	8004bc8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d103      	bne.n	8004bda <xQueueGenericSendFromISR+0x3e>
 8004bd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d101      	bne.n	8004bde <xQueueGenericSendFromISR+0x42>
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e000      	b.n	8004be0 <xQueueGenericSendFromISR+0x44>
 8004bde:	2300      	movs	r3, #0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d10b      	bne.n	8004bfc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004be4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004be8:	f383 8811 	msr	BASEPRI, r3
 8004bec:	f3bf 8f6f 	isb	sy
 8004bf0:	f3bf 8f4f 	dsb	sy
 8004bf4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004bf6:	bf00      	nop
 8004bf8:	bf00      	nop
 8004bfa:	e7fd      	b.n	8004bf8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	2b02      	cmp	r3, #2
 8004c00:	d103      	bne.n	8004c0a <xQueueGenericSendFromISR+0x6e>
 8004c02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d101      	bne.n	8004c0e <xQueueGenericSendFromISR+0x72>
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e000      	b.n	8004c10 <xQueueGenericSendFromISR+0x74>
 8004c0e:	2300      	movs	r3, #0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d10b      	bne.n	8004c2c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004c14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c18:	f383 8811 	msr	BASEPRI, r3
 8004c1c:	f3bf 8f6f 	isb	sy
 8004c20:	f3bf 8f4f 	dsb	sy
 8004c24:	623b      	str	r3, [r7, #32]
}
 8004c26:	bf00      	nop
 8004c28:	bf00      	nop
 8004c2a:	e7fd      	b.n	8004c28 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004c2c:	f002 fc4c 	bl	80074c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004c30:	f3ef 8211 	mrs	r2, BASEPRI
 8004c34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c38:	f383 8811 	msr	BASEPRI, r3
 8004c3c:	f3bf 8f6f 	isb	sy
 8004c40:	f3bf 8f4f 	dsb	sy
 8004c44:	61fa      	str	r2, [r7, #28]
 8004c46:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004c48:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004c4a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d302      	bcc.n	8004c5e <xQueueGenericSendFromISR+0xc2>
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d12f      	bne.n	8004cbe <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004c5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c60:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004c64:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c6e:	683a      	ldr	r2, [r7, #0]
 8004c70:	68b9      	ldr	r1, [r7, #8]
 8004c72:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004c74:	f000 faca 	bl	800520c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004c78:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004c7c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c80:	d112      	bne.n	8004ca8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d016      	beq.n	8004cb8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c8c:	3324      	adds	r3, #36	@ 0x24
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f001 f8b6 	bl	8005e00 <xTaskRemoveFromEventList>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d00e      	beq.n	8004cb8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d00b      	beq.n	8004cb8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	601a      	str	r2, [r3, #0]
 8004ca6:	e007      	b.n	8004cb8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004ca8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004cac:	3301      	adds	r3, #1
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	b25a      	sxtb	r2, r3
 8004cb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004cbc:	e001      	b.n	8004cc2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004cc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cc4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004ccc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004cce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3740      	adds	r7, #64	@ 0x40
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b08e      	sub	sp, #56	@ 0x38
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d10b      	bne.n	8004d04 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8004cec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cf0:	f383 8811 	msr	BASEPRI, r3
 8004cf4:	f3bf 8f6f 	isb	sy
 8004cf8:	f3bf 8f4f 	dsb	sy
 8004cfc:	623b      	str	r3, [r7, #32]
}
 8004cfe:	bf00      	nop
 8004d00:	bf00      	nop
 8004d02:	e7fd      	b.n	8004d00 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d00b      	beq.n	8004d24 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8004d0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d10:	f383 8811 	msr	BASEPRI, r3
 8004d14:	f3bf 8f6f 	isb	sy
 8004d18:	f3bf 8f4f 	dsb	sy
 8004d1c:	61fb      	str	r3, [r7, #28]
}
 8004d1e:	bf00      	nop
 8004d20:	bf00      	nop
 8004d22:	e7fd      	b.n	8004d20 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004d24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d103      	bne.n	8004d34 <xQueueGiveFromISR+0x5c>
 8004d2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d101      	bne.n	8004d38 <xQueueGiveFromISR+0x60>
 8004d34:	2301      	movs	r3, #1
 8004d36:	e000      	b.n	8004d3a <xQueueGiveFromISR+0x62>
 8004d38:	2300      	movs	r3, #0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d10b      	bne.n	8004d56 <xQueueGiveFromISR+0x7e>
	__asm volatile
 8004d3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d42:	f383 8811 	msr	BASEPRI, r3
 8004d46:	f3bf 8f6f 	isb	sy
 8004d4a:	f3bf 8f4f 	dsb	sy
 8004d4e:	61bb      	str	r3, [r7, #24]
}
 8004d50:	bf00      	nop
 8004d52:	bf00      	nop
 8004d54:	e7fd      	b.n	8004d52 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004d56:	f002 fbb7 	bl	80074c8 <vPortValidateInterruptPriority>
	__asm volatile
 8004d5a:	f3ef 8211 	mrs	r2, BASEPRI
 8004d5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d62:	f383 8811 	msr	BASEPRI, r3
 8004d66:	f3bf 8f6f 	isb	sy
 8004d6a:	f3bf 8f4f 	dsb	sy
 8004d6e:	617a      	str	r2, [r7, #20]
 8004d70:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8004d72:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004d74:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d7a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d80:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d22b      	bcs.n	8004dde <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d88:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004d8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004d90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d92:	1c5a      	adds	r2, r3, #1
 8004d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d96:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004d98:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004d9c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004da0:	d112      	bne.n	8004dc8 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d016      	beq.n	8004dd8 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dac:	3324      	adds	r3, #36	@ 0x24
 8004dae:	4618      	mov	r0, r3
 8004db0:	f001 f826 	bl	8005e00 <xTaskRemoveFromEventList>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d00e      	beq.n	8004dd8 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d00b      	beq.n	8004dd8 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	601a      	str	r2, [r3, #0]
 8004dc6:	e007      	b.n	8004dd8 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004dc8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004dcc:	3301      	adds	r3, #1
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	b25a      	sxtb	r2, r3
 8004dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dd4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ddc:	e001      	b.n	8004de2 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004dde:	2300      	movs	r3, #0
 8004de0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004de2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004de4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	f383 8811 	msr	BASEPRI, r3
}
 8004dec:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004dee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3738      	adds	r7, #56	@ 0x38
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b08c      	sub	sp, #48	@ 0x30
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004e04:	2300      	movs	r3, #0
 8004e06:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d10b      	bne.n	8004e2a <xQueueReceive+0x32>
	__asm volatile
 8004e12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e16:	f383 8811 	msr	BASEPRI, r3
 8004e1a:	f3bf 8f6f 	isb	sy
 8004e1e:	f3bf 8f4f 	dsb	sy
 8004e22:	623b      	str	r3, [r7, #32]
}
 8004e24:	bf00      	nop
 8004e26:	bf00      	nop
 8004e28:	e7fd      	b.n	8004e26 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d103      	bne.n	8004e38 <xQueueReceive+0x40>
 8004e30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d101      	bne.n	8004e3c <xQueueReceive+0x44>
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e000      	b.n	8004e3e <xQueueReceive+0x46>
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d10b      	bne.n	8004e5a <xQueueReceive+0x62>
	__asm volatile
 8004e42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e46:	f383 8811 	msr	BASEPRI, r3
 8004e4a:	f3bf 8f6f 	isb	sy
 8004e4e:	f3bf 8f4f 	dsb	sy
 8004e52:	61fb      	str	r3, [r7, #28]
}
 8004e54:	bf00      	nop
 8004e56:	bf00      	nop
 8004e58:	e7fd      	b.n	8004e56 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e5a:	f001 f9f9 	bl	8006250 <xTaskGetSchedulerState>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d102      	bne.n	8004e6a <xQueueReceive+0x72>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d101      	bne.n	8004e6e <xQueueReceive+0x76>
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e000      	b.n	8004e70 <xQueueReceive+0x78>
 8004e6e:	2300      	movs	r3, #0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d10b      	bne.n	8004e8c <xQueueReceive+0x94>
	__asm volatile
 8004e74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e78:	f383 8811 	msr	BASEPRI, r3
 8004e7c:	f3bf 8f6f 	isb	sy
 8004e80:	f3bf 8f4f 	dsb	sy
 8004e84:	61bb      	str	r3, [r7, #24]
}
 8004e86:	bf00      	nop
 8004e88:	bf00      	nop
 8004e8a:	e7fd      	b.n	8004e88 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004e8c:	f002 fa3c 	bl	8007308 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e94:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d01f      	beq.n	8004edc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004e9c:	68b9      	ldr	r1, [r7, #8]
 8004e9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ea0:	f000 fa1e 	bl	80052e0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea6:	1e5a      	subs	r2, r3, #1
 8004ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eaa:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004eac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eae:	691b      	ldr	r3, [r3, #16]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d00f      	beq.n	8004ed4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004eb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eb6:	3310      	adds	r3, #16
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f000 ffa1 	bl	8005e00 <xTaskRemoveFromEventList>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d007      	beq.n	8004ed4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004ec4:	4b3c      	ldr	r3, [pc, #240]	@ (8004fb8 <xQueueReceive+0x1c0>)
 8004ec6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004eca:	601a      	str	r2, [r3, #0]
 8004ecc:	f3bf 8f4f 	dsb	sy
 8004ed0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004ed4:	f002 fa4a 	bl	800736c <vPortExitCritical>
				return pdPASS;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e069      	b.n	8004fb0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d103      	bne.n	8004eea <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004ee2:	f002 fa43 	bl	800736c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	e062      	b.n	8004fb0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004eea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d106      	bne.n	8004efe <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004ef0:	f107 0310 	add.w	r3, r7, #16
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f000 ffe7 	bl	8005ec8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004efa:	2301      	movs	r3, #1
 8004efc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004efe:	f002 fa35 	bl	800736c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004f02:	f000 fd35 	bl	8005970 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004f06:	f002 f9ff 	bl	8007308 <vPortEnterCritical>
 8004f0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f0c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004f10:	b25b      	sxtb	r3, r3
 8004f12:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f16:	d103      	bne.n	8004f20 <xQueueReceive+0x128>
 8004f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f22:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004f26:	b25b      	sxtb	r3, r3
 8004f28:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f2c:	d103      	bne.n	8004f36 <xQueueReceive+0x13e>
 8004f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004f36:	f002 fa19 	bl	800736c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f3a:	1d3a      	adds	r2, r7, #4
 8004f3c:	f107 0310 	add.w	r3, r7, #16
 8004f40:	4611      	mov	r1, r2
 8004f42:	4618      	mov	r0, r3
 8004f44:	f000 ffd6 	bl	8005ef4 <xTaskCheckForTimeOut>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d123      	bne.n	8004f96 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f50:	f000 fa3e 	bl	80053d0 <prvIsQueueEmpty>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d017      	beq.n	8004f8a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004f5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f5c:	3324      	adds	r3, #36	@ 0x24
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	4611      	mov	r1, r2
 8004f62:	4618      	mov	r0, r3
 8004f64:	f000 fefa 	bl	8005d5c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004f68:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f6a:	f000 f9df 	bl	800532c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004f6e:	f000 fd0d 	bl	800598c <xTaskResumeAll>
 8004f72:	4603      	mov	r3, r0
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d189      	bne.n	8004e8c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004f78:	4b0f      	ldr	r3, [pc, #60]	@ (8004fb8 <xQueueReceive+0x1c0>)
 8004f7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f7e:	601a      	str	r2, [r3, #0]
 8004f80:	f3bf 8f4f 	dsb	sy
 8004f84:	f3bf 8f6f 	isb	sy
 8004f88:	e780      	b.n	8004e8c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004f8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f8c:	f000 f9ce 	bl	800532c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f90:	f000 fcfc 	bl	800598c <xTaskResumeAll>
 8004f94:	e77a      	b.n	8004e8c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004f96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f98:	f000 f9c8 	bl	800532c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f9c:	f000 fcf6 	bl	800598c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004fa0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004fa2:	f000 fa15 	bl	80053d0 <prvIsQueueEmpty>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	f43f af6f 	beq.w	8004e8c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004fae:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3730      	adds	r7, #48	@ 0x30
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	e000ed04 	.word	0xe000ed04

08004fbc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b08e      	sub	sp, #56	@ 0x38
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004fd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d10b      	bne.n	8004ff0 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8004fd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fdc:	f383 8811 	msr	BASEPRI, r3
 8004fe0:	f3bf 8f6f 	isb	sy
 8004fe4:	f3bf 8f4f 	dsb	sy
 8004fe8:	623b      	str	r3, [r7, #32]
}
 8004fea:	bf00      	nop
 8004fec:	bf00      	nop
 8004fee:	e7fd      	b.n	8004fec <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004ff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d00b      	beq.n	8005010 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8004ff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ffc:	f383 8811 	msr	BASEPRI, r3
 8005000:	f3bf 8f6f 	isb	sy
 8005004:	f3bf 8f4f 	dsb	sy
 8005008:	61fb      	str	r3, [r7, #28]
}
 800500a:	bf00      	nop
 800500c:	bf00      	nop
 800500e:	e7fd      	b.n	800500c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005010:	f001 f91e 	bl	8006250 <xTaskGetSchedulerState>
 8005014:	4603      	mov	r3, r0
 8005016:	2b00      	cmp	r3, #0
 8005018:	d102      	bne.n	8005020 <xQueueSemaphoreTake+0x64>
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d101      	bne.n	8005024 <xQueueSemaphoreTake+0x68>
 8005020:	2301      	movs	r3, #1
 8005022:	e000      	b.n	8005026 <xQueueSemaphoreTake+0x6a>
 8005024:	2300      	movs	r3, #0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d10b      	bne.n	8005042 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800502a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800502e:	f383 8811 	msr	BASEPRI, r3
 8005032:	f3bf 8f6f 	isb	sy
 8005036:	f3bf 8f4f 	dsb	sy
 800503a:	61bb      	str	r3, [r7, #24]
}
 800503c:	bf00      	nop
 800503e:	bf00      	nop
 8005040:	e7fd      	b.n	800503e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005042:	f002 f961 	bl	8007308 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005046:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005048:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800504a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800504c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800504e:	2b00      	cmp	r3, #0
 8005050:	d024      	beq.n	800509c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005054:	1e5a      	subs	r2, r3, #1
 8005056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005058:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800505a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d104      	bne.n	800506c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005062:	f001 fa6f 	bl	8006544 <pvTaskIncrementMutexHeldCount>
 8005066:	4602      	mov	r2, r0
 8005068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800506a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800506c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800506e:	691b      	ldr	r3, [r3, #16]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d00f      	beq.n	8005094 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005074:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005076:	3310      	adds	r3, #16
 8005078:	4618      	mov	r0, r3
 800507a:	f000 fec1 	bl	8005e00 <xTaskRemoveFromEventList>
 800507e:	4603      	mov	r3, r0
 8005080:	2b00      	cmp	r3, #0
 8005082:	d007      	beq.n	8005094 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005084:	4b54      	ldr	r3, [pc, #336]	@ (80051d8 <xQueueSemaphoreTake+0x21c>)
 8005086:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800508a:	601a      	str	r2, [r3, #0]
 800508c:	f3bf 8f4f 	dsb	sy
 8005090:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005094:	f002 f96a 	bl	800736c <vPortExitCritical>
				return pdPASS;
 8005098:	2301      	movs	r3, #1
 800509a:	e098      	b.n	80051ce <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d112      	bne.n	80050c8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80050a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d00b      	beq.n	80050c0 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80050a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050ac:	f383 8811 	msr	BASEPRI, r3
 80050b0:	f3bf 8f6f 	isb	sy
 80050b4:	f3bf 8f4f 	dsb	sy
 80050b8:	617b      	str	r3, [r7, #20]
}
 80050ba:	bf00      	nop
 80050bc:	bf00      	nop
 80050be:	e7fd      	b.n	80050bc <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80050c0:	f002 f954 	bl	800736c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80050c4:	2300      	movs	r3, #0
 80050c6:	e082      	b.n	80051ce <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80050c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d106      	bne.n	80050dc <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80050ce:	f107 030c 	add.w	r3, r7, #12
 80050d2:	4618      	mov	r0, r3
 80050d4:	f000 fef8 	bl	8005ec8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80050d8:	2301      	movs	r3, #1
 80050da:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80050dc:	f002 f946 	bl	800736c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80050e0:	f000 fc46 	bl	8005970 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80050e4:	f002 f910 	bl	8007308 <vPortEnterCritical>
 80050e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050ea:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80050ee:	b25b      	sxtb	r3, r3
 80050f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80050f4:	d103      	bne.n	80050fe <xQueueSemaphoreTake+0x142>
 80050f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050f8:	2200      	movs	r2, #0
 80050fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005100:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005104:	b25b      	sxtb	r3, r3
 8005106:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800510a:	d103      	bne.n	8005114 <xQueueSemaphoreTake+0x158>
 800510c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800510e:	2200      	movs	r2, #0
 8005110:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005114:	f002 f92a 	bl	800736c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005118:	463a      	mov	r2, r7
 800511a:	f107 030c 	add.w	r3, r7, #12
 800511e:	4611      	mov	r1, r2
 8005120:	4618      	mov	r0, r3
 8005122:	f000 fee7 	bl	8005ef4 <xTaskCheckForTimeOut>
 8005126:	4603      	mov	r3, r0
 8005128:	2b00      	cmp	r3, #0
 800512a:	d132      	bne.n	8005192 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800512c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800512e:	f000 f94f 	bl	80053d0 <prvIsQueueEmpty>
 8005132:	4603      	mov	r3, r0
 8005134:	2b00      	cmp	r3, #0
 8005136:	d026      	beq.n	8005186 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d109      	bne.n	8005154 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8005140:	f002 f8e2 	bl	8007308 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005144:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	4618      	mov	r0, r3
 800514a:	f001 f89f 	bl	800628c <xTaskPriorityInherit>
 800514e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8005150:	f002 f90c 	bl	800736c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005156:	3324      	adds	r3, #36	@ 0x24
 8005158:	683a      	ldr	r2, [r7, #0]
 800515a:	4611      	mov	r1, r2
 800515c:	4618      	mov	r0, r3
 800515e:	f000 fdfd 	bl	8005d5c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005162:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005164:	f000 f8e2 	bl	800532c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005168:	f000 fc10 	bl	800598c <xTaskResumeAll>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	f47f af67 	bne.w	8005042 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8005174:	4b18      	ldr	r3, [pc, #96]	@ (80051d8 <xQueueSemaphoreTake+0x21c>)
 8005176:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800517a:	601a      	str	r2, [r3, #0]
 800517c:	f3bf 8f4f 	dsb	sy
 8005180:	f3bf 8f6f 	isb	sy
 8005184:	e75d      	b.n	8005042 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005186:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005188:	f000 f8d0 	bl	800532c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800518c:	f000 fbfe 	bl	800598c <xTaskResumeAll>
 8005190:	e757      	b.n	8005042 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005192:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005194:	f000 f8ca 	bl	800532c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005198:	f000 fbf8 	bl	800598c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800519c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800519e:	f000 f917 	bl	80053d0 <prvIsQueueEmpty>
 80051a2:	4603      	mov	r3, r0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	f43f af4c 	beq.w	8005042 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80051aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d00d      	beq.n	80051cc <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80051b0:	f002 f8aa 	bl	8007308 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80051b4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80051b6:	f000 f811 	bl	80051dc <prvGetDisinheritPriorityAfterTimeout>
 80051ba:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80051bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80051c2:	4618      	mov	r0, r3
 80051c4:	f001 f93a 	bl	800643c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80051c8:	f002 f8d0 	bl	800736c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80051cc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3738      	adds	r7, #56	@ 0x38
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	e000ed04 	.word	0xe000ed04

080051dc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80051dc:	b480      	push	{r7}
 80051de:	b085      	sub	sp, #20
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d006      	beq.n	80051fa <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80051f6:	60fb      	str	r3, [r7, #12]
 80051f8:	e001      	b.n	80051fe <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80051fa:	2300      	movs	r3, #0
 80051fc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80051fe:	68fb      	ldr	r3, [r7, #12]
	}
 8005200:	4618      	mov	r0, r3
 8005202:	3714      	adds	r7, #20
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr

0800520c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b086      	sub	sp, #24
 8005210:	af00      	add	r7, sp, #0
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005218:	2300      	movs	r3, #0
 800521a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005220:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005226:	2b00      	cmp	r3, #0
 8005228:	d10d      	bne.n	8005246 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d14d      	bne.n	80052ce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	4618      	mov	r0, r3
 8005238:	f001 f890 	bl	800635c <xTaskPriorityDisinherit>
 800523c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2200      	movs	r2, #0
 8005242:	609a      	str	r2, [r3, #8]
 8005244:	e043      	b.n	80052ce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d119      	bne.n	8005280 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6858      	ldr	r0, [r3, #4]
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005254:	461a      	mov	r2, r3
 8005256:	68b9      	ldr	r1, [r7, #8]
 8005258:	f002 fc24 	bl	8007aa4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	685a      	ldr	r2, [r3, #4]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005264:	441a      	add	r2, r3
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	685a      	ldr	r2, [r3, #4]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	429a      	cmp	r2, r3
 8005274:	d32b      	bcc.n	80052ce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	605a      	str	r2, [r3, #4]
 800527e:	e026      	b.n	80052ce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	68d8      	ldr	r0, [r3, #12]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005288:	461a      	mov	r2, r3
 800528a:	68b9      	ldr	r1, [r7, #8]
 800528c:	f002 fc0a 	bl	8007aa4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	68da      	ldr	r2, [r3, #12]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005298:	425b      	negs	r3, r3
 800529a:	441a      	add	r2, r3
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	68da      	ldr	r2, [r3, #12]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d207      	bcs.n	80052bc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	689a      	ldr	r2, [r3, #8]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052b4:	425b      	negs	r3, r3
 80052b6:	441a      	add	r2, r3
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2b02      	cmp	r3, #2
 80052c0:	d105      	bne.n	80052ce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d002      	beq.n	80052ce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	3b01      	subs	r3, #1
 80052cc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	1c5a      	adds	r2, r3, #1
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80052d6:	697b      	ldr	r3, [r7, #20]
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3718      	adds	r7, #24
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b082      	sub	sp, #8
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d018      	beq.n	8005324 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	68da      	ldr	r2, [r3, #12]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052fa:	441a      	add	r2, r3
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	68da      	ldr	r2, [r3, #12]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	429a      	cmp	r2, r3
 800530a:	d303      	bcc.n	8005314 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	68d9      	ldr	r1, [r3, #12]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800531c:	461a      	mov	r2, r3
 800531e:	6838      	ldr	r0, [r7, #0]
 8005320:	f002 fbc0 	bl	8007aa4 <memcpy>
	}
}
 8005324:	bf00      	nop
 8005326:	3708      	adds	r7, #8
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}

0800532c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b084      	sub	sp, #16
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005334:	f001 ffe8 	bl	8007308 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800533e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005340:	e011      	b.n	8005366 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005346:	2b00      	cmp	r3, #0
 8005348:	d012      	beq.n	8005370 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	3324      	adds	r3, #36	@ 0x24
 800534e:	4618      	mov	r0, r3
 8005350:	f000 fd56 	bl	8005e00 <xTaskRemoveFromEventList>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d001      	beq.n	800535e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800535a:	f000 fe2f 	bl	8005fbc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800535e:	7bfb      	ldrb	r3, [r7, #15]
 8005360:	3b01      	subs	r3, #1
 8005362:	b2db      	uxtb	r3, r3
 8005364:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005366:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800536a:	2b00      	cmp	r3, #0
 800536c:	dce9      	bgt.n	8005342 <prvUnlockQueue+0x16>
 800536e:	e000      	b.n	8005372 <prvUnlockQueue+0x46>
					break;
 8005370:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	22ff      	movs	r2, #255	@ 0xff
 8005376:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800537a:	f001 fff7 	bl	800736c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800537e:	f001 ffc3 	bl	8007308 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005388:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800538a:	e011      	b.n	80053b0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	691b      	ldr	r3, [r3, #16]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d012      	beq.n	80053ba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	3310      	adds	r3, #16
 8005398:	4618      	mov	r0, r3
 800539a:	f000 fd31 	bl	8005e00 <xTaskRemoveFromEventList>
 800539e:	4603      	mov	r3, r0
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d001      	beq.n	80053a8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80053a4:	f000 fe0a 	bl	8005fbc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80053a8:	7bbb      	ldrb	r3, [r7, #14]
 80053aa:	3b01      	subs	r3, #1
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80053b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	dce9      	bgt.n	800538c <prvUnlockQueue+0x60>
 80053b8:	e000      	b.n	80053bc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80053ba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	22ff      	movs	r2, #255	@ 0xff
 80053c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80053c4:	f001 ffd2 	bl	800736c <vPortExitCritical>
}
 80053c8:	bf00      	nop
 80053ca:	3710      	adds	r7, #16
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80053d8:	f001 ff96 	bl	8007308 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d102      	bne.n	80053ea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80053e4:	2301      	movs	r3, #1
 80053e6:	60fb      	str	r3, [r7, #12]
 80053e8:	e001      	b.n	80053ee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80053ea:	2300      	movs	r3, #0
 80053ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80053ee:	f001 ffbd 	bl	800736c <vPortExitCritical>

	return xReturn;
 80053f2:	68fb      	ldr	r3, [r7, #12]
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3710      	adds	r7, #16
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005404:	f001 ff80 	bl	8007308 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005410:	429a      	cmp	r2, r3
 8005412:	d102      	bne.n	800541a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005414:	2301      	movs	r3, #1
 8005416:	60fb      	str	r3, [r7, #12]
 8005418:	e001      	b.n	800541e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800541a:	2300      	movs	r3, #0
 800541c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800541e:	f001 ffa5 	bl	800736c <vPortExitCritical>

	return xReturn;
 8005422:	68fb      	ldr	r3, [r7, #12]
}
 8005424:	4618      	mov	r0, r3
 8005426:	3710      	adds	r7, #16
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}

0800542c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800542c:	b480      	push	{r7}
 800542e:	b085      	sub	sp, #20
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005436:	2300      	movs	r3, #0
 8005438:	60fb      	str	r3, [r7, #12]
 800543a:	e014      	b.n	8005466 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800543c:	4a0f      	ldr	r2, [pc, #60]	@ (800547c <vQueueAddToRegistry+0x50>)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d10b      	bne.n	8005460 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005448:	490c      	ldr	r1, [pc, #48]	@ (800547c <vQueueAddToRegistry+0x50>)
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	683a      	ldr	r2, [r7, #0]
 800544e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005452:	4a0a      	ldr	r2, [pc, #40]	@ (800547c <vQueueAddToRegistry+0x50>)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	00db      	lsls	r3, r3, #3
 8005458:	4413      	add	r3, r2
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800545e:	e006      	b.n	800546e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	3301      	adds	r3, #1
 8005464:	60fb      	str	r3, [r7, #12]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2b07      	cmp	r3, #7
 800546a:	d9e7      	bls.n	800543c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800546c:	bf00      	nop
 800546e:	bf00      	nop
 8005470:	3714      	adds	r7, #20
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr
 800547a:	bf00      	nop
 800547c:	200009ec 	.word	0x200009ec

08005480 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005480:	b580      	push	{r7, lr}
 8005482:	b086      	sub	sp, #24
 8005484:	af00      	add	r7, sp, #0
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	60b9      	str	r1, [r7, #8]
 800548a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005490:	f001 ff3a 	bl	8007308 <vPortEnterCritical>
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800549a:	b25b      	sxtb	r3, r3
 800549c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80054a0:	d103      	bne.n	80054aa <vQueueWaitForMessageRestricted+0x2a>
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80054b0:	b25b      	sxtb	r3, r3
 80054b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80054b6:	d103      	bne.n	80054c0 <vQueueWaitForMessageRestricted+0x40>
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80054c0:	f001 ff54 	bl	800736c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d106      	bne.n	80054da <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	3324      	adds	r3, #36	@ 0x24
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	68b9      	ldr	r1, [r7, #8]
 80054d4:	4618      	mov	r0, r3
 80054d6:	f000 fc67 	bl	8005da8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80054da:	6978      	ldr	r0, [r7, #20]
 80054dc:	f7ff ff26 	bl	800532c <prvUnlockQueue>
	}
 80054e0:	bf00      	nop
 80054e2:	3718      	adds	r7, #24
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b08e      	sub	sp, #56	@ 0x38
 80054ec:	af04      	add	r7, sp, #16
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	60b9      	str	r1, [r7, #8]
 80054f2:	607a      	str	r2, [r7, #4]
 80054f4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80054f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d10b      	bne.n	8005514 <xTaskCreateStatic+0x2c>
	__asm volatile
 80054fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005500:	f383 8811 	msr	BASEPRI, r3
 8005504:	f3bf 8f6f 	isb	sy
 8005508:	f3bf 8f4f 	dsb	sy
 800550c:	623b      	str	r3, [r7, #32]
}
 800550e:	bf00      	nop
 8005510:	bf00      	nop
 8005512:	e7fd      	b.n	8005510 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005516:	2b00      	cmp	r3, #0
 8005518:	d10b      	bne.n	8005532 <xTaskCreateStatic+0x4a>
	__asm volatile
 800551a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800551e:	f383 8811 	msr	BASEPRI, r3
 8005522:	f3bf 8f6f 	isb	sy
 8005526:	f3bf 8f4f 	dsb	sy
 800552a:	61fb      	str	r3, [r7, #28]
}
 800552c:	bf00      	nop
 800552e:	bf00      	nop
 8005530:	e7fd      	b.n	800552e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005532:	23bc      	movs	r3, #188	@ 0xbc
 8005534:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	2bbc      	cmp	r3, #188	@ 0xbc
 800553a:	d00b      	beq.n	8005554 <xTaskCreateStatic+0x6c>
	__asm volatile
 800553c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005540:	f383 8811 	msr	BASEPRI, r3
 8005544:	f3bf 8f6f 	isb	sy
 8005548:	f3bf 8f4f 	dsb	sy
 800554c:	61bb      	str	r3, [r7, #24]
}
 800554e:	bf00      	nop
 8005550:	bf00      	nop
 8005552:	e7fd      	b.n	8005550 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005554:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005558:	2b00      	cmp	r3, #0
 800555a:	d01e      	beq.n	800559a <xTaskCreateStatic+0xb2>
 800555c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800555e:	2b00      	cmp	r3, #0
 8005560:	d01b      	beq.n	800559a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005564:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005568:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800556a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800556c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800556e:	2202      	movs	r2, #2
 8005570:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005574:	2300      	movs	r3, #0
 8005576:	9303      	str	r3, [sp, #12]
 8005578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800557a:	9302      	str	r3, [sp, #8]
 800557c:	f107 0314 	add.w	r3, r7, #20
 8005580:	9301      	str	r3, [sp, #4]
 8005582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005584:	9300      	str	r3, [sp, #0]
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	68b9      	ldr	r1, [r7, #8]
 800558c:	68f8      	ldr	r0, [r7, #12]
 800558e:	f000 f851 	bl	8005634 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005592:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005594:	f000 f90a 	bl	80057ac <prvAddNewTaskToReadyList>
 8005598:	e001      	b.n	800559e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800559a:	2300      	movs	r3, #0
 800559c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800559e:	697b      	ldr	r3, [r7, #20]
	}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3728      	adds	r7, #40	@ 0x28
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b08c      	sub	sp, #48	@ 0x30
 80055ac:	af04      	add	r7, sp, #16
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	603b      	str	r3, [r7, #0]
 80055b4:	4613      	mov	r3, r2
 80055b6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80055b8:	88fb      	ldrh	r3, [r7, #6]
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	4618      	mov	r0, r3
 80055be:	f001 ffc5 	bl	800754c <pvPortMalloc>
 80055c2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d00e      	beq.n	80055e8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80055ca:	20bc      	movs	r0, #188	@ 0xbc
 80055cc:	f001 ffbe 	bl	800754c <pvPortMalloc>
 80055d0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80055d2:	69fb      	ldr	r3, [r7, #28]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d003      	beq.n	80055e0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80055d8:	69fb      	ldr	r3, [r7, #28]
 80055da:	697a      	ldr	r2, [r7, #20]
 80055dc:	631a      	str	r2, [r3, #48]	@ 0x30
 80055de:	e005      	b.n	80055ec <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80055e0:	6978      	ldr	r0, [r7, #20]
 80055e2:	f002 f881 	bl	80076e8 <vPortFree>
 80055e6:	e001      	b.n	80055ec <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80055e8:	2300      	movs	r3, #0
 80055ea:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80055ec:	69fb      	ldr	r3, [r7, #28]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d017      	beq.n	8005622 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80055f2:	69fb      	ldr	r3, [r7, #28]
 80055f4:	2200      	movs	r2, #0
 80055f6:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80055fa:	88fa      	ldrh	r2, [r7, #6]
 80055fc:	2300      	movs	r3, #0
 80055fe:	9303      	str	r3, [sp, #12]
 8005600:	69fb      	ldr	r3, [r7, #28]
 8005602:	9302      	str	r3, [sp, #8]
 8005604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005606:	9301      	str	r3, [sp, #4]
 8005608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800560a:	9300      	str	r3, [sp, #0]
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	68b9      	ldr	r1, [r7, #8]
 8005610:	68f8      	ldr	r0, [r7, #12]
 8005612:	f000 f80f 	bl	8005634 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005616:	69f8      	ldr	r0, [r7, #28]
 8005618:	f000 f8c8 	bl	80057ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800561c:	2301      	movs	r3, #1
 800561e:	61bb      	str	r3, [r7, #24]
 8005620:	e002      	b.n	8005628 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005622:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005626:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005628:	69bb      	ldr	r3, [r7, #24]
	}
 800562a:	4618      	mov	r0, r3
 800562c:	3720      	adds	r7, #32
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}
	...

08005634 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b088      	sub	sp, #32
 8005638:	af00      	add	r7, sp, #0
 800563a:	60f8      	str	r0, [r7, #12]
 800563c:	60b9      	str	r1, [r7, #8]
 800563e:	607a      	str	r2, [r7, #4]
 8005640:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005644:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	461a      	mov	r2, r3
 800564c:	21a5      	movs	r1, #165	@ 0xa5
 800564e:	f002 f99f 	bl	8007990 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005654:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800565c:	3b01      	subs	r3, #1
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	4413      	add	r3, r2
 8005662:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005664:	69bb      	ldr	r3, [r7, #24]
 8005666:	f023 0307 	bic.w	r3, r3, #7
 800566a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800566c:	69bb      	ldr	r3, [r7, #24]
 800566e:	f003 0307 	and.w	r3, r3, #7
 8005672:	2b00      	cmp	r3, #0
 8005674:	d00b      	beq.n	800568e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800567a:	f383 8811 	msr	BASEPRI, r3
 800567e:	f3bf 8f6f 	isb	sy
 8005682:	f3bf 8f4f 	dsb	sy
 8005686:	617b      	str	r3, [r7, #20]
}
 8005688:	bf00      	nop
 800568a:	bf00      	nop
 800568c:	e7fd      	b.n	800568a <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800568e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005690:	69ba      	ldr	r2, [r7, #24]
 8005692:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d01f      	beq.n	80056da <prvInitialiseNewTask+0xa6>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800569a:	2300      	movs	r3, #0
 800569c:	61fb      	str	r3, [r7, #28]
 800569e:	e012      	b.n	80056c6 <prvInitialiseNewTask+0x92>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80056a0:	68ba      	ldr	r2, [r7, #8]
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	4413      	add	r3, r2
 80056a6:	7819      	ldrb	r1, [r3, #0]
 80056a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	4413      	add	r3, r2
 80056ae:	3334      	adds	r3, #52	@ 0x34
 80056b0:	460a      	mov	r2, r1
 80056b2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80056b4:	68ba      	ldr	r2, [r7, #8]
 80056b6:	69fb      	ldr	r3, [r7, #28]
 80056b8:	4413      	add	r3, r2
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d006      	beq.n	80056ce <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	3301      	adds	r3, #1
 80056c4:	61fb      	str	r3, [r7, #28]
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	2b0f      	cmp	r3, #15
 80056ca:	d9e9      	bls.n	80056a0 <prvInitialiseNewTask+0x6c>
 80056cc:	e000      	b.n	80056d0 <prvInitialiseNewTask+0x9c>
			{
				break;
 80056ce:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80056d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056d2:	2200      	movs	r2, #0
 80056d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80056d8:	e003      	b.n	80056e2 <prvInitialiseNewTask+0xae>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80056da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056dc:	2200      	movs	r2, #0
 80056de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80056e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056e4:	2b37      	cmp	r3, #55	@ 0x37
 80056e6:	d901      	bls.n	80056ec <prvInitialiseNewTask+0xb8>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80056e8:	2337      	movs	r3, #55	@ 0x37
 80056ea:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80056ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80056f0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80056f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80056f6:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->uxMutexesHeld = 0;
 80056f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056fa:	2200      	movs	r2, #0
 80056fc:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80056fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005700:	3304      	adds	r3, #4
 8005702:	4618      	mov	r0, r3
 8005704:	f7fe ff6e 	bl	80045e4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800570a:	3318      	adds	r3, #24
 800570c:	4618      	mov	r0, r3
 800570e:	f7fe ff69 	bl	80045e4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005714:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005716:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800571a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800571e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005720:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005724:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005726:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8005728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800572a:	2200      	movs	r2, #0
 800572c:	665a      	str	r2, [r3, #100]	@ 0x64
	}
	#endif

	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
	{
		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 800572e:	2300      	movs	r3, #0
 8005730:	61fb      	str	r3, [r7, #28]
 8005732:	e008      	b.n	8005746 <prvInitialiseNewTask+0x112>
		{
			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 8005734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005736:	69fa      	ldr	r2, [r7, #28]
 8005738:	3216      	adds	r2, #22
 800573a:	2100      	movs	r1, #0
 800573c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	3301      	adds	r3, #1
 8005744:	61fb      	str	r3, [r7, #28]
 8005746:	69fb      	ldr	r3, [r7, #28]
 8005748:	2b02      	cmp	r3, #2
 800574a:	d9f3      	bls.n	8005734 <prvInitialiseNewTask+0x100>
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800574c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800574e:	2200      	movs	r2, #0
 8005750:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005756:	2200      	movs	r2, #0
 8005758:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800575c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800575e:	3368      	adds	r3, #104	@ 0x68
 8005760:	224c      	movs	r2, #76	@ 0x4c
 8005762:	2100      	movs	r1, #0
 8005764:	4618      	mov	r0, r3
 8005766:	f002 f913 	bl	8007990 <memset>
 800576a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800576c:	4a0c      	ldr	r2, [pc, #48]	@ (80057a0 <prvInitialiseNewTask+0x16c>)
 800576e:	66da      	str	r2, [r3, #108]	@ 0x6c
 8005770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005772:	4a0c      	ldr	r2, [pc, #48]	@ (80057a4 <prvInitialiseNewTask+0x170>)
 8005774:	671a      	str	r2, [r3, #112]	@ 0x70
 8005776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005778:	4a0b      	ldr	r2, [pc, #44]	@ (80057a8 <prvInitialiseNewTask+0x174>)
 800577a:	675a      	str	r2, [r3, #116]	@ 0x74
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800577c:	683a      	ldr	r2, [r7, #0]
 800577e:	68f9      	ldr	r1, [r7, #12]
 8005780:	69b8      	ldr	r0, [r7, #24]
 8005782:	f001 fc8f 	bl	80070a4 <pxPortInitialiseStack>
 8005786:	4602      	mov	r2, r0
 8005788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800578a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800578c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800578e:	2b00      	cmp	r3, #0
 8005790:	d002      	beq.n	8005798 <prvInitialiseNewTask+0x164>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005794:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005796:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005798:	bf00      	nop
 800579a:	3720      	adds	r7, #32
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}
 80057a0:	20004c88 	.word	0x20004c88
 80057a4:	20004cf0 	.word	0x20004cf0
 80057a8:	20004d58 	.word	0x20004d58

080057ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b082      	sub	sp, #8
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80057b4:	f001 fda8 	bl	8007308 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80057b8:	4b2d      	ldr	r3, [pc, #180]	@ (8005870 <prvAddNewTaskToReadyList+0xc4>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	3301      	adds	r3, #1
 80057be:	4a2c      	ldr	r2, [pc, #176]	@ (8005870 <prvAddNewTaskToReadyList+0xc4>)
 80057c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80057c2:	4b2c      	ldr	r3, [pc, #176]	@ (8005874 <prvAddNewTaskToReadyList+0xc8>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d109      	bne.n	80057de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80057ca:	4a2a      	ldr	r2, [pc, #168]	@ (8005874 <prvAddNewTaskToReadyList+0xc8>)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80057d0:	4b27      	ldr	r3, [pc, #156]	@ (8005870 <prvAddNewTaskToReadyList+0xc4>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d110      	bne.n	80057fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80057d8:	f000 fc66 	bl	80060a8 <prvInitialiseTaskLists>
 80057dc:	e00d      	b.n	80057fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80057de:	4b26      	ldr	r3, [pc, #152]	@ (8005878 <prvAddNewTaskToReadyList+0xcc>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d109      	bne.n	80057fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80057e6:	4b23      	ldr	r3, [pc, #140]	@ (8005874 <prvAddNewTaskToReadyList+0xc8>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d802      	bhi.n	80057fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80057f4:	4a1f      	ldr	r2, [pc, #124]	@ (8005874 <prvAddNewTaskToReadyList+0xc8>)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80057fa:	4b20      	ldr	r3, [pc, #128]	@ (800587c <prvAddNewTaskToReadyList+0xd0>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	3301      	adds	r3, #1
 8005800:	4a1e      	ldr	r2, [pc, #120]	@ (800587c <prvAddNewTaskToReadyList+0xd0>)
 8005802:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005804:	4b1d      	ldr	r3, [pc, #116]	@ (800587c <prvAddNewTaskToReadyList+0xd0>)
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	649a      	str	r2, [r3, #72]	@ 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005810:	4b1b      	ldr	r3, [pc, #108]	@ (8005880 <prvAddNewTaskToReadyList+0xd4>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	429a      	cmp	r2, r3
 8005816:	d903      	bls.n	8005820 <prvAddNewTaskToReadyList+0x74>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800581c:	4a18      	ldr	r2, [pc, #96]	@ (8005880 <prvAddNewTaskToReadyList+0xd4>)
 800581e:	6013      	str	r3, [r2, #0]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005824:	4613      	mov	r3, r2
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	4413      	add	r3, r2
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	4a15      	ldr	r2, [pc, #84]	@ (8005884 <prvAddNewTaskToReadyList+0xd8>)
 800582e:	441a      	add	r2, r3
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	3304      	adds	r3, #4
 8005834:	4619      	mov	r1, r3
 8005836:	4610      	mov	r0, r2
 8005838:	f7fe fee1 	bl	80045fe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800583c:	f001 fd96 	bl	800736c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005840:	4b0d      	ldr	r3, [pc, #52]	@ (8005878 <prvAddNewTaskToReadyList+0xcc>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d00e      	beq.n	8005866 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005848:	4b0a      	ldr	r3, [pc, #40]	@ (8005874 <prvAddNewTaskToReadyList+0xc8>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005852:	429a      	cmp	r2, r3
 8005854:	d207      	bcs.n	8005866 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005856:	4b0c      	ldr	r3, [pc, #48]	@ (8005888 <prvAddNewTaskToReadyList+0xdc>)
 8005858:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800585c:	601a      	str	r2, [r3, #0]
 800585e:	f3bf 8f4f 	dsb	sy
 8005862:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005866:	bf00      	nop
 8005868:	3708      	adds	r7, #8
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
 800586e:	bf00      	nop
 8005870:	20000f00 	.word	0x20000f00
 8005874:	20000a2c 	.word	0x20000a2c
 8005878:	20000f0c 	.word	0x20000f0c
 800587c:	20000f1c 	.word	0x20000f1c
 8005880:	20000f08 	.word	0x20000f08
 8005884:	20000a30 	.word	0x20000a30
 8005888:	e000ed04 	.word	0xe000ed04

0800588c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b08a      	sub	sp, #40	@ 0x28
 8005890:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005892:	2300      	movs	r3, #0
 8005894:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005896:	2300      	movs	r3, #0
 8005898:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800589a:	463a      	mov	r2, r7
 800589c:	1d39      	adds	r1, r7, #4
 800589e:	f107 0308 	add.w	r3, r7, #8
 80058a2:	4618      	mov	r0, r3
 80058a4:	f7fe fe4a 	bl	800453c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80058a8:	6839      	ldr	r1, [r7, #0]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	68ba      	ldr	r2, [r7, #8]
 80058ae:	9202      	str	r2, [sp, #8]
 80058b0:	9301      	str	r3, [sp, #4]
 80058b2:	2300      	movs	r3, #0
 80058b4:	9300      	str	r3, [sp, #0]
 80058b6:	2300      	movs	r3, #0
 80058b8:	460a      	mov	r2, r1
 80058ba:	4925      	ldr	r1, [pc, #148]	@ (8005950 <vTaskStartScheduler+0xc4>)
 80058bc:	4825      	ldr	r0, [pc, #148]	@ (8005954 <vTaskStartScheduler+0xc8>)
 80058be:	f7ff fe13 	bl	80054e8 <xTaskCreateStatic>
 80058c2:	4603      	mov	r3, r0
 80058c4:	4a24      	ldr	r2, [pc, #144]	@ (8005958 <vTaskStartScheduler+0xcc>)
 80058c6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80058c8:	4b23      	ldr	r3, [pc, #140]	@ (8005958 <vTaskStartScheduler+0xcc>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d002      	beq.n	80058d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80058d0:	2301      	movs	r3, #1
 80058d2:	617b      	str	r3, [r7, #20]
 80058d4:	e001      	b.n	80058da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80058d6:	2300      	movs	r3, #0
 80058d8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d102      	bne.n	80058e6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80058e0:	f001 f806 	bl	80068f0 <xTimerCreateTimerTask>
 80058e4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d11d      	bne.n	8005928 <vTaskStartScheduler+0x9c>
	__asm volatile
 80058ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058f0:	f383 8811 	msr	BASEPRI, r3
 80058f4:	f3bf 8f6f 	isb	sy
 80058f8:	f3bf 8f4f 	dsb	sy
 80058fc:	613b      	str	r3, [r7, #16]
}
 80058fe:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005900:	4b16      	ldr	r3, [pc, #88]	@ (800595c <vTaskStartScheduler+0xd0>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	3368      	adds	r3, #104	@ 0x68
 8005906:	4a16      	ldr	r2, [pc, #88]	@ (8005960 <vTaskStartScheduler+0xd4>)
 8005908:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800590a:	4b16      	ldr	r3, [pc, #88]	@ (8005964 <vTaskStartScheduler+0xd8>)
 800590c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005910:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005912:	4b15      	ldr	r3, [pc, #84]	@ (8005968 <vTaskStartScheduler+0xdc>)
 8005914:	2201      	movs	r2, #1
 8005916:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005918:	4b14      	ldr	r3, [pc, #80]	@ (800596c <vTaskStartScheduler+0xe0>)
 800591a:	2200      	movs	r2, #0
 800591c:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800591e:	f7fb f909 	bl	8000b34 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005922:	f001 fc4d 	bl	80071c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005926:	e00f      	b.n	8005948 <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800592e:	d10b      	bne.n	8005948 <vTaskStartScheduler+0xbc>
	__asm volatile
 8005930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005934:	f383 8811 	msr	BASEPRI, r3
 8005938:	f3bf 8f6f 	isb	sy
 800593c:	f3bf 8f4f 	dsb	sy
 8005940:	60fb      	str	r3, [r7, #12]
}
 8005942:	bf00      	nop
 8005944:	bf00      	nop
 8005946:	e7fd      	b.n	8005944 <vTaskStartScheduler+0xb8>
}
 8005948:	bf00      	nop
 800594a:	3718      	adds	r7, #24
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}
 8005950:	080083b0 	.word	0x080083b0
 8005954:	08005fd5 	.word	0x08005fd5
 8005958:	20000f24 	.word	0x20000f24
 800595c:	20000a2c 	.word	0x20000a2c
 8005960:	20000010 	.word	0x20000010
 8005964:	20000f20 	.word	0x20000f20
 8005968:	20000f0c 	.word	0x20000f0c
 800596c:	20000f04 	.word	0x20000f04

08005970 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005970:	b480      	push	{r7}
 8005972:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005974:	4b04      	ldr	r3, [pc, #16]	@ (8005988 <vTaskSuspendAll+0x18>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	3301      	adds	r3, #1
 800597a:	4a03      	ldr	r2, [pc, #12]	@ (8005988 <vTaskSuspendAll+0x18>)
 800597c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800597e:	bf00      	nop
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr
 8005988:	20000f28 	.word	0x20000f28

0800598c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b084      	sub	sp, #16
 8005990:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005992:	2300      	movs	r3, #0
 8005994:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005996:	2300      	movs	r3, #0
 8005998:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800599a:	4b42      	ldr	r3, [pc, #264]	@ (8005aa4 <xTaskResumeAll+0x118>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d10b      	bne.n	80059ba <xTaskResumeAll+0x2e>
	__asm volatile
 80059a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059a6:	f383 8811 	msr	BASEPRI, r3
 80059aa:	f3bf 8f6f 	isb	sy
 80059ae:	f3bf 8f4f 	dsb	sy
 80059b2:	603b      	str	r3, [r7, #0]
}
 80059b4:	bf00      	nop
 80059b6:	bf00      	nop
 80059b8:	e7fd      	b.n	80059b6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80059ba:	f001 fca5 	bl	8007308 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80059be:	4b39      	ldr	r3, [pc, #228]	@ (8005aa4 <xTaskResumeAll+0x118>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	3b01      	subs	r3, #1
 80059c4:	4a37      	ldr	r2, [pc, #220]	@ (8005aa4 <xTaskResumeAll+0x118>)
 80059c6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059c8:	4b36      	ldr	r3, [pc, #216]	@ (8005aa4 <xTaskResumeAll+0x118>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d162      	bne.n	8005a96 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80059d0:	4b35      	ldr	r3, [pc, #212]	@ (8005aa8 <xTaskResumeAll+0x11c>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d05e      	beq.n	8005a96 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80059d8:	e02f      	b.n	8005a3a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059da:	4b34      	ldr	r3, [pc, #208]	@ (8005aac <xTaskResumeAll+0x120>)
 80059dc:	68db      	ldr	r3, [r3, #12]
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	3318      	adds	r3, #24
 80059e6:	4618      	mov	r0, r3
 80059e8:	f7fe fe66 	bl	80046b8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	3304      	adds	r3, #4
 80059f0:	4618      	mov	r0, r3
 80059f2:	f7fe fe61 	bl	80046b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059fa:	4b2d      	ldr	r3, [pc, #180]	@ (8005ab0 <xTaskResumeAll+0x124>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d903      	bls.n	8005a0a <xTaskResumeAll+0x7e>
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a06:	4a2a      	ldr	r2, [pc, #168]	@ (8005ab0 <xTaskResumeAll+0x124>)
 8005a08:	6013      	str	r3, [r2, #0]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a0e:	4613      	mov	r3, r2
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	4413      	add	r3, r2
 8005a14:	009b      	lsls	r3, r3, #2
 8005a16:	4a27      	ldr	r2, [pc, #156]	@ (8005ab4 <xTaskResumeAll+0x128>)
 8005a18:	441a      	add	r2, r3
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	3304      	adds	r3, #4
 8005a1e:	4619      	mov	r1, r3
 8005a20:	4610      	mov	r0, r2
 8005a22:	f7fe fdec 	bl	80045fe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a2a:	4b23      	ldr	r3, [pc, #140]	@ (8005ab8 <xTaskResumeAll+0x12c>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d302      	bcc.n	8005a3a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005a34:	4b21      	ldr	r3, [pc, #132]	@ (8005abc <xTaskResumeAll+0x130>)
 8005a36:	2201      	movs	r2, #1
 8005a38:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005a3a:	4b1c      	ldr	r3, [pc, #112]	@ (8005aac <xTaskResumeAll+0x120>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d1cb      	bne.n	80059da <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d001      	beq.n	8005a4c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005a48:	f000 fbd2 	bl	80061f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005a4c:	4b1c      	ldr	r3, [pc, #112]	@ (8005ac0 <xTaskResumeAll+0x134>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d010      	beq.n	8005a7a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005a58:	f000 f846 	bl	8005ae8 <xTaskIncrementTick>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d002      	beq.n	8005a68 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005a62:	4b16      	ldr	r3, [pc, #88]	@ (8005abc <xTaskResumeAll+0x130>)
 8005a64:	2201      	movs	r2, #1
 8005a66:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	3b01      	subs	r3, #1
 8005a6c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d1f1      	bne.n	8005a58 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005a74:	4b12      	ldr	r3, [pc, #72]	@ (8005ac0 <xTaskResumeAll+0x134>)
 8005a76:	2200      	movs	r2, #0
 8005a78:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005a7a:	4b10      	ldr	r3, [pc, #64]	@ (8005abc <xTaskResumeAll+0x130>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d009      	beq.n	8005a96 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005a82:	2301      	movs	r3, #1
 8005a84:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005a86:	4b0f      	ldr	r3, [pc, #60]	@ (8005ac4 <xTaskResumeAll+0x138>)
 8005a88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a8c:	601a      	str	r2, [r3, #0]
 8005a8e:	f3bf 8f4f 	dsb	sy
 8005a92:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005a96:	f001 fc69 	bl	800736c <vPortExitCritical>

	return xAlreadyYielded;
 8005a9a:	68bb      	ldr	r3, [r7, #8]
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3710      	adds	r7, #16
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}
 8005aa4:	20000f28 	.word	0x20000f28
 8005aa8:	20000f00 	.word	0x20000f00
 8005aac:	20000ec0 	.word	0x20000ec0
 8005ab0:	20000f08 	.word	0x20000f08
 8005ab4:	20000a30 	.word	0x20000a30
 8005ab8:	20000a2c 	.word	0x20000a2c
 8005abc:	20000f14 	.word	0x20000f14
 8005ac0:	20000f10 	.word	0x20000f10
 8005ac4:	e000ed04 	.word	0xe000ed04

08005ac8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b083      	sub	sp, #12
 8005acc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005ace:	4b05      	ldr	r3, [pc, #20]	@ (8005ae4 <xTaskGetTickCount+0x1c>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005ad4:	687b      	ldr	r3, [r7, #4]
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	370c      	adds	r7, #12
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr
 8005ae2:	bf00      	nop
 8005ae4:	20000f04 	.word	0x20000f04

08005ae8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b086      	sub	sp, #24
 8005aec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005aee:	2300      	movs	r3, #0
 8005af0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005af2:	4b4f      	ldr	r3, [pc, #316]	@ (8005c30 <xTaskIncrementTick+0x148>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	f040 8090 	bne.w	8005c1c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005afc:	4b4d      	ldr	r3, [pc, #308]	@ (8005c34 <xTaskIncrementTick+0x14c>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	3301      	adds	r3, #1
 8005b02:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005b04:	4a4b      	ldr	r2, [pc, #300]	@ (8005c34 <xTaskIncrementTick+0x14c>)
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d121      	bne.n	8005b54 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005b10:	4b49      	ldr	r3, [pc, #292]	@ (8005c38 <xTaskIncrementTick+0x150>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d00b      	beq.n	8005b32 <xTaskIncrementTick+0x4a>
	__asm volatile
 8005b1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b1e:	f383 8811 	msr	BASEPRI, r3
 8005b22:	f3bf 8f6f 	isb	sy
 8005b26:	f3bf 8f4f 	dsb	sy
 8005b2a:	603b      	str	r3, [r7, #0]
}
 8005b2c:	bf00      	nop
 8005b2e:	bf00      	nop
 8005b30:	e7fd      	b.n	8005b2e <xTaskIncrementTick+0x46>
 8005b32:	4b41      	ldr	r3, [pc, #260]	@ (8005c38 <xTaskIncrementTick+0x150>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	60fb      	str	r3, [r7, #12]
 8005b38:	4b40      	ldr	r3, [pc, #256]	@ (8005c3c <xTaskIncrementTick+0x154>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a3e      	ldr	r2, [pc, #248]	@ (8005c38 <xTaskIncrementTick+0x150>)
 8005b3e:	6013      	str	r3, [r2, #0]
 8005b40:	4a3e      	ldr	r2, [pc, #248]	@ (8005c3c <xTaskIncrementTick+0x154>)
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	6013      	str	r3, [r2, #0]
 8005b46:	4b3e      	ldr	r3, [pc, #248]	@ (8005c40 <xTaskIncrementTick+0x158>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	4a3c      	ldr	r2, [pc, #240]	@ (8005c40 <xTaskIncrementTick+0x158>)
 8005b4e:	6013      	str	r3, [r2, #0]
 8005b50:	f000 fb4e 	bl	80061f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005b54:	4b3b      	ldr	r3, [pc, #236]	@ (8005c44 <xTaskIncrementTick+0x15c>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	693a      	ldr	r2, [r7, #16]
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d349      	bcc.n	8005bf2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b5e:	4b36      	ldr	r3, [pc, #216]	@ (8005c38 <xTaskIncrementTick+0x150>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d104      	bne.n	8005b72 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b68:	4b36      	ldr	r3, [pc, #216]	@ (8005c44 <xTaskIncrementTick+0x15c>)
 8005b6a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005b6e:	601a      	str	r2, [r3, #0]
					break;
 8005b70:	e03f      	b.n	8005bf2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b72:	4b31      	ldr	r3, [pc, #196]	@ (8005c38 <xTaskIncrementTick+0x150>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005b82:	693a      	ldr	r2, [r7, #16]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d203      	bcs.n	8005b92 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005b8a:	4a2e      	ldr	r2, [pc, #184]	@ (8005c44 <xTaskIncrementTick+0x15c>)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005b90:	e02f      	b.n	8005bf2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	3304      	adds	r3, #4
 8005b96:	4618      	mov	r0, r3
 8005b98:	f7fe fd8e 	bl	80046b8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d004      	beq.n	8005bae <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	3318      	adds	r3, #24
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f7fe fd85 	bl	80046b8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bb2:	4b25      	ldr	r3, [pc, #148]	@ (8005c48 <xTaskIncrementTick+0x160>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d903      	bls.n	8005bc2 <xTaskIncrementTick+0xda>
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bbe:	4a22      	ldr	r2, [pc, #136]	@ (8005c48 <xTaskIncrementTick+0x160>)
 8005bc0:	6013      	str	r3, [r2, #0]
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bc6:	4613      	mov	r3, r2
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	4413      	add	r3, r2
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	4a1f      	ldr	r2, [pc, #124]	@ (8005c4c <xTaskIncrementTick+0x164>)
 8005bd0:	441a      	add	r2, r3
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	3304      	adds	r3, #4
 8005bd6:	4619      	mov	r1, r3
 8005bd8:	4610      	mov	r0, r2
 8005bda:	f7fe fd10 	bl	80045fe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005be2:	4b1b      	ldr	r3, [pc, #108]	@ (8005c50 <xTaskIncrementTick+0x168>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d3b8      	bcc.n	8005b5e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005bec:	2301      	movs	r3, #1
 8005bee:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005bf0:	e7b5      	b.n	8005b5e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005bf2:	4b17      	ldr	r3, [pc, #92]	@ (8005c50 <xTaskIncrementTick+0x168>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bf8:	4914      	ldr	r1, [pc, #80]	@ (8005c4c <xTaskIncrementTick+0x164>)
 8005bfa:	4613      	mov	r3, r2
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	4413      	add	r3, r2
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	440b      	add	r3, r1
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d901      	bls.n	8005c0e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005c0e:	4b11      	ldr	r3, [pc, #68]	@ (8005c54 <xTaskIncrementTick+0x16c>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d007      	beq.n	8005c26 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005c16:	2301      	movs	r3, #1
 8005c18:	617b      	str	r3, [r7, #20]
 8005c1a:	e004      	b.n	8005c26 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005c1c:	4b0e      	ldr	r3, [pc, #56]	@ (8005c58 <xTaskIncrementTick+0x170>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	3301      	adds	r3, #1
 8005c22:	4a0d      	ldr	r2, [pc, #52]	@ (8005c58 <xTaskIncrementTick+0x170>)
 8005c24:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005c26:	697b      	ldr	r3, [r7, #20]
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3718      	adds	r7, #24
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}
 8005c30:	20000f28 	.word	0x20000f28
 8005c34:	20000f04 	.word	0x20000f04
 8005c38:	20000eb8 	.word	0x20000eb8
 8005c3c:	20000ebc 	.word	0x20000ebc
 8005c40:	20000f18 	.word	0x20000f18
 8005c44:	20000f20 	.word	0x20000f20
 8005c48:	20000f08 	.word	0x20000f08
 8005c4c:	20000a30 	.word	0x20000a30
 8005c50:	20000a2c 	.word	0x20000a2c
 8005c54:	20000f14 	.word	0x20000f14
 8005c58:	20000f10 	.word	0x20000f10

08005c5c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b084      	sub	sp, #16
 8005c60:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005c62:	4b36      	ldr	r3, [pc, #216]	@ (8005d3c <vTaskSwitchContext+0xe0>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d003      	beq.n	8005c72 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005c6a:	4b35      	ldr	r3, [pc, #212]	@ (8005d40 <vTaskSwitchContext+0xe4>)
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005c70:	e060      	b.n	8005d34 <vTaskSwitchContext+0xd8>
		xYieldPending = pdFALSE;
 8005c72:	4b33      	ldr	r3, [pc, #204]	@ (8005d40 <vTaskSwitchContext+0xe4>)
 8005c74:	2200      	movs	r2, #0
 8005c76:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8005c78:	f7fa ff6a 	bl	8000b50 <getRunTimeCounterValue>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	4a31      	ldr	r2, [pc, #196]	@ (8005d44 <vTaskSwitchContext+0xe8>)
 8005c80:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8005c82:	4b30      	ldr	r3, [pc, #192]	@ (8005d44 <vTaskSwitchContext+0xe8>)
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	4b30      	ldr	r3, [pc, #192]	@ (8005d48 <vTaskSwitchContext+0xec>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d909      	bls.n	8005ca2 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8005c8e:	4b2f      	ldr	r3, [pc, #188]	@ (8005d4c <vTaskSwitchContext+0xf0>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	6e59      	ldr	r1, [r3, #100]	@ 0x64
 8005c94:	4a2b      	ldr	r2, [pc, #172]	@ (8005d44 <vTaskSwitchContext+0xe8>)
 8005c96:	6810      	ldr	r0, [r2, #0]
 8005c98:	4a2b      	ldr	r2, [pc, #172]	@ (8005d48 <vTaskSwitchContext+0xec>)
 8005c9a:	6812      	ldr	r2, [r2, #0]
 8005c9c:	1a82      	subs	r2, r0, r2
 8005c9e:	440a      	add	r2, r1
 8005ca0:	665a      	str	r2, [r3, #100]	@ 0x64
			ulTaskSwitchedInTime = ulTotalRunTime;
 8005ca2:	4b28      	ldr	r3, [pc, #160]	@ (8005d44 <vTaskSwitchContext+0xe8>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a28      	ldr	r2, [pc, #160]	@ (8005d48 <vTaskSwitchContext+0xec>)
 8005ca8:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005caa:	4b29      	ldr	r3, [pc, #164]	@ (8005d50 <vTaskSwitchContext+0xf4>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	60fb      	str	r3, [r7, #12]
 8005cb0:	e011      	b.n	8005cd6 <vTaskSwitchContext+0x7a>
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d10b      	bne.n	8005cd0 <vTaskSwitchContext+0x74>
	__asm volatile
 8005cb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cbc:	f383 8811 	msr	BASEPRI, r3
 8005cc0:	f3bf 8f6f 	isb	sy
 8005cc4:	f3bf 8f4f 	dsb	sy
 8005cc8:	607b      	str	r3, [r7, #4]
}
 8005cca:	bf00      	nop
 8005ccc:	bf00      	nop
 8005cce:	e7fd      	b.n	8005ccc <vTaskSwitchContext+0x70>
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	3b01      	subs	r3, #1
 8005cd4:	60fb      	str	r3, [r7, #12]
 8005cd6:	491f      	ldr	r1, [pc, #124]	@ (8005d54 <vTaskSwitchContext+0xf8>)
 8005cd8:	68fa      	ldr	r2, [r7, #12]
 8005cda:	4613      	mov	r3, r2
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	4413      	add	r3, r2
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	440b      	add	r3, r1
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d0e3      	beq.n	8005cb2 <vTaskSwitchContext+0x56>
 8005cea:	68fa      	ldr	r2, [r7, #12]
 8005cec:	4613      	mov	r3, r2
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	4413      	add	r3, r2
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	4a17      	ldr	r2, [pc, #92]	@ (8005d54 <vTaskSwitchContext+0xf8>)
 8005cf6:	4413      	add	r3, r2
 8005cf8:	60bb      	str	r3, [r7, #8]
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	685a      	ldr	r2, [r3, #4]
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	605a      	str	r2, [r3, #4]
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	685a      	ldr	r2, [r3, #4]
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	3308      	adds	r3, #8
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d104      	bne.n	8005d1a <vTaskSwitchContext+0xbe>
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	685a      	ldr	r2, [r3, #4]
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	605a      	str	r2, [r3, #4]
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	4a0a      	ldr	r2, [pc, #40]	@ (8005d4c <vTaskSwitchContext+0xf0>)
 8005d22:	6013      	str	r3, [r2, #0]
 8005d24:	4a0a      	ldr	r2, [pc, #40]	@ (8005d50 <vTaskSwitchContext+0xf4>)
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005d2a:	4b08      	ldr	r3, [pc, #32]	@ (8005d4c <vTaskSwitchContext+0xf0>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	3368      	adds	r3, #104	@ 0x68
 8005d30:	4a09      	ldr	r2, [pc, #36]	@ (8005d58 <vTaskSwitchContext+0xfc>)
 8005d32:	6013      	str	r3, [r2, #0]
}
 8005d34:	bf00      	nop
 8005d36:	3710      	adds	r7, #16
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}
 8005d3c:	20000f28 	.word	0x20000f28
 8005d40:	20000f14 	.word	0x20000f14
 8005d44:	20000f30 	.word	0x20000f30
 8005d48:	20000f2c 	.word	0x20000f2c
 8005d4c:	20000a2c 	.word	0x20000a2c
 8005d50:	20000f08 	.word	0x20000f08
 8005d54:	20000a30 	.word	0x20000a30
 8005d58:	20000010 	.word	0x20000010

08005d5c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b084      	sub	sp, #16
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d10b      	bne.n	8005d84 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005d6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d70:	f383 8811 	msr	BASEPRI, r3
 8005d74:	f3bf 8f6f 	isb	sy
 8005d78:	f3bf 8f4f 	dsb	sy
 8005d7c:	60fb      	str	r3, [r7, #12]
}
 8005d7e:	bf00      	nop
 8005d80:	bf00      	nop
 8005d82:	e7fd      	b.n	8005d80 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005d84:	4b07      	ldr	r3, [pc, #28]	@ (8005da4 <vTaskPlaceOnEventList+0x48>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	3318      	adds	r3, #24
 8005d8a:	4619      	mov	r1, r3
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f7fe fc5a 	bl	8004646 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005d92:	2101      	movs	r1, #1
 8005d94:	6838      	ldr	r0, [r7, #0]
 8005d96:	f000 fd57 	bl	8006848 <prvAddCurrentTaskToDelayedList>
}
 8005d9a:	bf00      	nop
 8005d9c:	3710      	adds	r7, #16
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}
 8005da2:	bf00      	nop
 8005da4:	20000a2c 	.word	0x20000a2c

08005da8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b086      	sub	sp, #24
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	60f8      	str	r0, [r7, #12]
 8005db0:	60b9      	str	r1, [r7, #8]
 8005db2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d10b      	bne.n	8005dd2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005dba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dbe:	f383 8811 	msr	BASEPRI, r3
 8005dc2:	f3bf 8f6f 	isb	sy
 8005dc6:	f3bf 8f4f 	dsb	sy
 8005dca:	617b      	str	r3, [r7, #20]
}
 8005dcc:	bf00      	nop
 8005dce:	bf00      	nop
 8005dd0:	e7fd      	b.n	8005dce <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005dd2:	4b0a      	ldr	r3, [pc, #40]	@ (8005dfc <vTaskPlaceOnEventListRestricted+0x54>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	3318      	adds	r3, #24
 8005dd8:	4619      	mov	r1, r3
 8005dda:	68f8      	ldr	r0, [r7, #12]
 8005ddc:	f7fe fc0f 	bl	80045fe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d002      	beq.n	8005dec <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005de6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005dea:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005dec:	6879      	ldr	r1, [r7, #4]
 8005dee:	68b8      	ldr	r0, [r7, #8]
 8005df0:	f000 fd2a 	bl	8006848 <prvAddCurrentTaskToDelayedList>
	}
 8005df4:	bf00      	nop
 8005df6:	3718      	adds	r7, #24
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}
 8005dfc:	20000a2c 	.word	0x20000a2c

08005e00 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b086      	sub	sp, #24
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	68db      	ldr	r3, [r3, #12]
 8005e0c:	68db      	ldr	r3, [r3, #12]
 8005e0e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d10b      	bne.n	8005e2e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005e16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e1a:	f383 8811 	msr	BASEPRI, r3
 8005e1e:	f3bf 8f6f 	isb	sy
 8005e22:	f3bf 8f4f 	dsb	sy
 8005e26:	60fb      	str	r3, [r7, #12]
}
 8005e28:	bf00      	nop
 8005e2a:	bf00      	nop
 8005e2c:	e7fd      	b.n	8005e2a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	3318      	adds	r3, #24
 8005e32:	4618      	mov	r0, r3
 8005e34:	f7fe fc40 	bl	80046b8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e38:	4b1d      	ldr	r3, [pc, #116]	@ (8005eb0 <xTaskRemoveFromEventList+0xb0>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d11d      	bne.n	8005e7c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	3304      	adds	r3, #4
 8005e44:	4618      	mov	r0, r3
 8005e46:	f7fe fc37 	bl	80046b8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e4e:	4b19      	ldr	r3, [pc, #100]	@ (8005eb4 <xTaskRemoveFromEventList+0xb4>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d903      	bls.n	8005e5e <xTaskRemoveFromEventList+0x5e>
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e5a:	4a16      	ldr	r2, [pc, #88]	@ (8005eb4 <xTaskRemoveFromEventList+0xb4>)
 8005e5c:	6013      	str	r3, [r2, #0]
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e62:	4613      	mov	r3, r2
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	4413      	add	r3, r2
 8005e68:	009b      	lsls	r3, r3, #2
 8005e6a:	4a13      	ldr	r2, [pc, #76]	@ (8005eb8 <xTaskRemoveFromEventList+0xb8>)
 8005e6c:	441a      	add	r2, r3
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	3304      	adds	r3, #4
 8005e72:	4619      	mov	r1, r3
 8005e74:	4610      	mov	r0, r2
 8005e76:	f7fe fbc2 	bl	80045fe <vListInsertEnd>
 8005e7a:	e005      	b.n	8005e88 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	3318      	adds	r3, #24
 8005e80:	4619      	mov	r1, r3
 8005e82:	480e      	ldr	r0, [pc, #56]	@ (8005ebc <xTaskRemoveFromEventList+0xbc>)
 8005e84:	f7fe fbbb 	bl	80045fe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e8c:	4b0c      	ldr	r3, [pc, #48]	@ (8005ec0 <xTaskRemoveFromEventList+0xc0>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d905      	bls.n	8005ea2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005e96:	2301      	movs	r3, #1
 8005e98:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005e9a:	4b0a      	ldr	r3, [pc, #40]	@ (8005ec4 <xTaskRemoveFromEventList+0xc4>)
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	601a      	str	r2, [r3, #0]
 8005ea0:	e001      	b.n	8005ea6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005ea6:	697b      	ldr	r3, [r7, #20]
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3718      	adds	r7, #24
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}
 8005eb0:	20000f28 	.word	0x20000f28
 8005eb4:	20000f08 	.word	0x20000f08
 8005eb8:	20000a30 	.word	0x20000a30
 8005ebc:	20000ec0 	.word	0x20000ec0
 8005ec0:	20000a2c 	.word	0x20000a2c
 8005ec4:	20000f14 	.word	0x20000f14

08005ec8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b083      	sub	sp, #12
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005ed0:	4b06      	ldr	r3, [pc, #24]	@ (8005eec <vTaskInternalSetTimeOutState+0x24>)
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005ed8:	4b05      	ldr	r3, [pc, #20]	@ (8005ef0 <vTaskInternalSetTimeOutState+0x28>)
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	605a      	str	r2, [r3, #4]
}
 8005ee0:	bf00      	nop
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr
 8005eec:	20000f18 	.word	0x20000f18
 8005ef0:	20000f04 	.word	0x20000f04

08005ef4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b088      	sub	sp, #32
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d10b      	bne.n	8005f1c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005f04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f08:	f383 8811 	msr	BASEPRI, r3
 8005f0c:	f3bf 8f6f 	isb	sy
 8005f10:	f3bf 8f4f 	dsb	sy
 8005f14:	613b      	str	r3, [r7, #16]
}
 8005f16:	bf00      	nop
 8005f18:	bf00      	nop
 8005f1a:	e7fd      	b.n	8005f18 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d10b      	bne.n	8005f3a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005f22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f26:	f383 8811 	msr	BASEPRI, r3
 8005f2a:	f3bf 8f6f 	isb	sy
 8005f2e:	f3bf 8f4f 	dsb	sy
 8005f32:	60fb      	str	r3, [r7, #12]
}
 8005f34:	bf00      	nop
 8005f36:	bf00      	nop
 8005f38:	e7fd      	b.n	8005f36 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005f3a:	f001 f9e5 	bl	8007308 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005f3e:	4b1d      	ldr	r3, [pc, #116]	@ (8005fb4 <xTaskCheckForTimeOut+0xc0>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	69ba      	ldr	r2, [r7, #24]
 8005f4a:	1ad3      	subs	r3, r2, r3
 8005f4c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005f56:	d102      	bne.n	8005f5e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	61fb      	str	r3, [r7, #28]
 8005f5c:	e023      	b.n	8005fa6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	4b15      	ldr	r3, [pc, #84]	@ (8005fb8 <xTaskCheckForTimeOut+0xc4>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d007      	beq.n	8005f7a <xTaskCheckForTimeOut+0x86>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	69ba      	ldr	r2, [r7, #24]
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d302      	bcc.n	8005f7a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005f74:	2301      	movs	r3, #1
 8005f76:	61fb      	str	r3, [r7, #28]
 8005f78:	e015      	b.n	8005fa6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	697a      	ldr	r2, [r7, #20]
 8005f80:	429a      	cmp	r2, r3
 8005f82:	d20b      	bcs.n	8005f9c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	1ad2      	subs	r2, r2, r3
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f7ff ff99 	bl	8005ec8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005f96:	2300      	movs	r3, #0
 8005f98:	61fb      	str	r3, [r7, #28]
 8005f9a:	e004      	b.n	8005fa6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005fa6:	f001 f9e1 	bl	800736c <vPortExitCritical>

	return xReturn;
 8005faa:	69fb      	ldr	r3, [r7, #28]
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3720      	adds	r7, #32
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}
 8005fb4:	20000f04 	.word	0x20000f04
 8005fb8:	20000f18 	.word	0x20000f18

08005fbc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005fc0:	4b03      	ldr	r3, [pc, #12]	@ (8005fd0 <vTaskMissedYield+0x14>)
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	601a      	str	r2, [r3, #0]
}
 8005fc6:	bf00      	nop
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr
 8005fd0:	20000f14 	.word	0x20000f14

08005fd4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b082      	sub	sp, #8
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005fdc:	f000 f8a4 	bl	8006128 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005fe0:	4b06      	ldr	r3, [pc, #24]	@ (8005ffc <prvIdleTask+0x28>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d9f9      	bls.n	8005fdc <prvIdleTask+0x8>
			{
				taskYIELD();
 8005fe8:	4b05      	ldr	r3, [pc, #20]	@ (8006000 <prvIdleTask+0x2c>)
 8005fea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005fee:	601a      	str	r2, [r3, #0]
 8005ff0:	f3bf 8f4f 	dsb	sy
 8005ff4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005ff8:	e7f0      	b.n	8005fdc <prvIdleTask+0x8>
 8005ffa:	bf00      	nop
 8005ffc:	20000a30 	.word	0x20000a30
 8006000:	e000ed04 	.word	0xe000ed04

08006004 <vTaskSetThreadLocalStoragePointer>:
/*-----------------------------------------------------------*/

#if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )

	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue )
	{
 8006004:	b480      	push	{r7}
 8006006:	b087      	sub	sp, #28
 8006008:	af00      	add	r7, sp, #0
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	60b9      	str	r1, [r7, #8]
 800600e:	607a      	str	r2, [r7, #4]
	TCB_t *pxTCB;

		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	2b02      	cmp	r3, #2
 8006014:	dc1c      	bgt.n	8006050 <vTaskSetThreadLocalStoragePointer+0x4c>
		{
			pxTCB = prvGetTCBFromHandle( xTaskToSet );
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d102      	bne.n	8006022 <vTaskSetThreadLocalStoragePointer+0x1e>
 800601c:	4b0f      	ldr	r3, [pc, #60]	@ (800605c <vTaskSetThreadLocalStoragePointer+0x58>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	e000      	b.n	8006024 <vTaskSetThreadLocalStoragePointer+0x20>
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	617b      	str	r3, [r7, #20]
			configASSERT( pxTCB != NULL );
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d10b      	bne.n	8006044 <vTaskSetThreadLocalStoragePointer+0x40>
	__asm volatile
 800602c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006030:	f383 8811 	msr	BASEPRI, r3
 8006034:	f3bf 8f6f 	isb	sy
 8006038:	f3bf 8f4f 	dsb	sy
 800603c:	613b      	str	r3, [r7, #16]
}
 800603e:	bf00      	nop
 8006040:	bf00      	nop
 8006042:	e7fd      	b.n	8006040 <vTaskSetThreadLocalStoragePointer+0x3c>
			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	68ba      	ldr	r2, [r7, #8]
 8006048:	3216      	adds	r2, #22
 800604a:	6879      	ldr	r1, [r7, #4]
 800604c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		}
	}
 8006050:	bf00      	nop
 8006052:	371c      	adds	r7, #28
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr
 800605c:	20000a2c 	.word	0x20000a2c

08006060 <pvTaskGetThreadLocalStoragePointer>:
/*-----------------------------------------------------------*/

#if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )

	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
	{
 8006060:	b480      	push	{r7}
 8006062:	b085      	sub	sp, #20
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]
	void *pvReturn = NULL;
 800606a:	2300      	movs	r3, #0
 800606c:	60fb      	str	r3, [r7, #12]
	TCB_t *pxTCB;

		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	2b02      	cmp	r3, #2
 8006072:	dc0e      	bgt.n	8006092 <pvTaskGetThreadLocalStoragePointer+0x32>
		{
			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d102      	bne.n	8006080 <pvTaskGetThreadLocalStoragePointer+0x20>
 800607a:	4b0a      	ldr	r3, [pc, #40]	@ (80060a4 <pvTaskGetThreadLocalStoragePointer+0x44>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	e000      	b.n	8006082 <pvTaskGetThreadLocalStoragePointer+0x22>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	60bb      	str	r3, [r7, #8]
			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	683a      	ldr	r2, [r7, #0]
 8006088:	3216      	adds	r2, #22
 800608a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800608e:	60fb      	str	r3, [r7, #12]
 8006090:	e001      	b.n	8006096 <pvTaskGetThreadLocalStoragePointer+0x36>
		}
		else
		{
			pvReturn = NULL;
 8006092:	2300      	movs	r3, #0
 8006094:	60fb      	str	r3, [r7, #12]
		}

		return pvReturn;
 8006096:	68fb      	ldr	r3, [r7, #12]
	}
 8006098:	4618      	mov	r0, r3
 800609a:	3714      	adds	r7, #20
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr
 80060a4:	20000a2c 	.word	0x20000a2c

080060a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b082      	sub	sp, #8
 80060ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80060ae:	2300      	movs	r3, #0
 80060b0:	607b      	str	r3, [r7, #4]
 80060b2:	e00c      	b.n	80060ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80060b4:	687a      	ldr	r2, [r7, #4]
 80060b6:	4613      	mov	r3, r2
 80060b8:	009b      	lsls	r3, r3, #2
 80060ba:	4413      	add	r3, r2
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	4a12      	ldr	r2, [pc, #72]	@ (8006108 <prvInitialiseTaskLists+0x60>)
 80060c0:	4413      	add	r3, r2
 80060c2:	4618      	mov	r0, r3
 80060c4:	f7fe fa6e 	bl	80045a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	3301      	adds	r3, #1
 80060cc:	607b      	str	r3, [r7, #4]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2b37      	cmp	r3, #55	@ 0x37
 80060d2:	d9ef      	bls.n	80060b4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80060d4:	480d      	ldr	r0, [pc, #52]	@ (800610c <prvInitialiseTaskLists+0x64>)
 80060d6:	f7fe fa65 	bl	80045a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80060da:	480d      	ldr	r0, [pc, #52]	@ (8006110 <prvInitialiseTaskLists+0x68>)
 80060dc:	f7fe fa62 	bl	80045a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80060e0:	480c      	ldr	r0, [pc, #48]	@ (8006114 <prvInitialiseTaskLists+0x6c>)
 80060e2:	f7fe fa5f 	bl	80045a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80060e6:	480c      	ldr	r0, [pc, #48]	@ (8006118 <prvInitialiseTaskLists+0x70>)
 80060e8:	f7fe fa5c 	bl	80045a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80060ec:	480b      	ldr	r0, [pc, #44]	@ (800611c <prvInitialiseTaskLists+0x74>)
 80060ee:	f7fe fa59 	bl	80045a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80060f2:	4b0b      	ldr	r3, [pc, #44]	@ (8006120 <prvInitialiseTaskLists+0x78>)
 80060f4:	4a05      	ldr	r2, [pc, #20]	@ (800610c <prvInitialiseTaskLists+0x64>)
 80060f6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80060f8:	4b0a      	ldr	r3, [pc, #40]	@ (8006124 <prvInitialiseTaskLists+0x7c>)
 80060fa:	4a05      	ldr	r2, [pc, #20]	@ (8006110 <prvInitialiseTaskLists+0x68>)
 80060fc:	601a      	str	r2, [r3, #0]
}
 80060fe:	bf00      	nop
 8006100:	3708      	adds	r7, #8
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop
 8006108:	20000a30 	.word	0x20000a30
 800610c:	20000e90 	.word	0x20000e90
 8006110:	20000ea4 	.word	0x20000ea4
 8006114:	20000ec0 	.word	0x20000ec0
 8006118:	20000ed4 	.word	0x20000ed4
 800611c:	20000eec 	.word	0x20000eec
 8006120:	20000eb8 	.word	0x20000eb8
 8006124:	20000ebc 	.word	0x20000ebc

08006128 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b082      	sub	sp, #8
 800612c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800612e:	e019      	b.n	8006164 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006130:	f001 f8ea 	bl	8007308 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006134:	4b10      	ldr	r3, [pc, #64]	@ (8006178 <prvCheckTasksWaitingTermination+0x50>)
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	68db      	ldr	r3, [r3, #12]
 800613a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	3304      	adds	r3, #4
 8006140:	4618      	mov	r0, r3
 8006142:	f7fe fab9 	bl	80046b8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006146:	4b0d      	ldr	r3, [pc, #52]	@ (800617c <prvCheckTasksWaitingTermination+0x54>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	3b01      	subs	r3, #1
 800614c:	4a0b      	ldr	r2, [pc, #44]	@ (800617c <prvCheckTasksWaitingTermination+0x54>)
 800614e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006150:	4b0b      	ldr	r3, [pc, #44]	@ (8006180 <prvCheckTasksWaitingTermination+0x58>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	3b01      	subs	r3, #1
 8006156:	4a0a      	ldr	r2, [pc, #40]	@ (8006180 <prvCheckTasksWaitingTermination+0x58>)
 8006158:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800615a:	f001 f907 	bl	800736c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f000 f810 	bl	8006184 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006164:	4b06      	ldr	r3, [pc, #24]	@ (8006180 <prvCheckTasksWaitingTermination+0x58>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d1e1      	bne.n	8006130 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800616c:	bf00      	nop
 800616e:	bf00      	nop
 8006170:	3708      	adds	r7, #8
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}
 8006176:	bf00      	nop
 8006178:	20000ed4 	.word	0x20000ed4
 800617c:	20000f00 	.word	0x20000f00
 8006180:	20000ee8 	.word	0x20000ee8

08006184 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006184:	b580      	push	{r7, lr}
 8006186:	b084      	sub	sp, #16
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	3368      	adds	r3, #104	@ 0x68
 8006190:	4618      	mov	r0, r3
 8006192:	f001 fc05 	bl	80079a0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f893 30b9 	ldrb.w	r3, [r3, #185]	@ 0xb9
 800619c:	2b00      	cmp	r3, #0
 800619e:	d108      	bne.n	80061b2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061a4:	4618      	mov	r0, r3
 80061a6:	f001 fa9f 	bl	80076e8 <vPortFree>
				vPortFree( pxTCB );
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f001 fa9c 	bl	80076e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80061b0:	e019      	b.n	80061e6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f893 30b9 	ldrb.w	r3, [r3, #185]	@ 0xb9
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d103      	bne.n	80061c4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f001 fa93 	bl	80076e8 <vPortFree>
	}
 80061c2:	e010      	b.n	80061e6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f893 30b9 	ldrb.w	r3, [r3, #185]	@ 0xb9
 80061ca:	2b02      	cmp	r3, #2
 80061cc:	d00b      	beq.n	80061e6 <prvDeleteTCB+0x62>
	__asm volatile
 80061ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061d2:	f383 8811 	msr	BASEPRI, r3
 80061d6:	f3bf 8f6f 	isb	sy
 80061da:	f3bf 8f4f 	dsb	sy
 80061de:	60fb      	str	r3, [r7, #12]
}
 80061e0:	bf00      	nop
 80061e2:	bf00      	nop
 80061e4:	e7fd      	b.n	80061e2 <prvDeleteTCB+0x5e>
	}
 80061e6:	bf00      	nop
 80061e8:	3710      	adds	r7, #16
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
	...

080061f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80061f0:	b480      	push	{r7}
 80061f2:	b083      	sub	sp, #12
 80061f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061f6:	4b0c      	ldr	r3, [pc, #48]	@ (8006228 <prvResetNextTaskUnblockTime+0x38>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d104      	bne.n	800620a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006200:	4b0a      	ldr	r3, [pc, #40]	@ (800622c <prvResetNextTaskUnblockTime+0x3c>)
 8006202:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006206:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006208:	e008      	b.n	800621c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800620a:	4b07      	ldr	r3, [pc, #28]	@ (8006228 <prvResetNextTaskUnblockTime+0x38>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	68db      	ldr	r3, [r3, #12]
 8006210:	68db      	ldr	r3, [r3, #12]
 8006212:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	4a04      	ldr	r2, [pc, #16]	@ (800622c <prvResetNextTaskUnblockTime+0x3c>)
 800621a:	6013      	str	r3, [r2, #0]
}
 800621c:	bf00      	nop
 800621e:	370c      	adds	r7, #12
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr
 8006228:	20000eb8 	.word	0x20000eb8
 800622c:	20000f20 	.word	0x20000f20

08006230 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8006230:	b480      	push	{r7}
 8006232:	b083      	sub	sp, #12
 8006234:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8006236:	4b05      	ldr	r3, [pc, #20]	@ (800624c <xTaskGetCurrentTaskHandle+0x1c>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800623c:	687b      	ldr	r3, [r7, #4]
	}
 800623e:	4618      	mov	r0, r3
 8006240:	370c      	adds	r7, #12
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr
 800624a:	bf00      	nop
 800624c:	20000a2c 	.word	0x20000a2c

08006250 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006250:	b480      	push	{r7}
 8006252:	b083      	sub	sp, #12
 8006254:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006256:	4b0b      	ldr	r3, [pc, #44]	@ (8006284 <xTaskGetSchedulerState+0x34>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d102      	bne.n	8006264 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800625e:	2301      	movs	r3, #1
 8006260:	607b      	str	r3, [r7, #4]
 8006262:	e008      	b.n	8006276 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006264:	4b08      	ldr	r3, [pc, #32]	@ (8006288 <xTaskGetSchedulerState+0x38>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d102      	bne.n	8006272 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800626c:	2302      	movs	r3, #2
 800626e:	607b      	str	r3, [r7, #4]
 8006270:	e001      	b.n	8006276 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006272:	2300      	movs	r3, #0
 8006274:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006276:	687b      	ldr	r3, [r7, #4]
	}
 8006278:	4618      	mov	r0, r3
 800627a:	370c      	adds	r7, #12
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr
 8006284:	20000f0c 	.word	0x20000f0c
 8006288:	20000f28 	.word	0x20000f28

0800628c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800628c:	b580      	push	{r7, lr}
 800628e:	b084      	sub	sp, #16
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006298:	2300      	movs	r3, #0
 800629a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d051      	beq.n	8006346 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062a6:	4b2a      	ldr	r3, [pc, #168]	@ (8006350 <xTaskPriorityInherit+0xc4>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d241      	bcs.n	8006334 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	699b      	ldr	r3, [r3, #24]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	db06      	blt.n	80062c6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062b8:	4b25      	ldr	r3, [pc, #148]	@ (8006350 <xTaskPriorityInherit+0xc4>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062be:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	6959      	ldr	r1, [r3, #20]
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062ce:	4613      	mov	r3, r2
 80062d0:	009b      	lsls	r3, r3, #2
 80062d2:	4413      	add	r3, r2
 80062d4:	009b      	lsls	r3, r3, #2
 80062d6:	4a1f      	ldr	r2, [pc, #124]	@ (8006354 <xTaskPriorityInherit+0xc8>)
 80062d8:	4413      	add	r3, r2
 80062da:	4299      	cmp	r1, r3
 80062dc:	d122      	bne.n	8006324 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	3304      	adds	r3, #4
 80062e2:	4618      	mov	r0, r3
 80062e4:	f7fe f9e8 	bl	80046b8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80062e8:	4b19      	ldr	r3, [pc, #100]	@ (8006350 <xTaskPriorityInherit+0xc4>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062f6:	4b18      	ldr	r3, [pc, #96]	@ (8006358 <xTaskPriorityInherit+0xcc>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d903      	bls.n	8006306 <xTaskPriorityInherit+0x7a>
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006302:	4a15      	ldr	r2, [pc, #84]	@ (8006358 <xTaskPriorityInherit+0xcc>)
 8006304:	6013      	str	r3, [r2, #0]
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800630a:	4613      	mov	r3, r2
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	4413      	add	r3, r2
 8006310:	009b      	lsls	r3, r3, #2
 8006312:	4a10      	ldr	r2, [pc, #64]	@ (8006354 <xTaskPriorityInherit+0xc8>)
 8006314:	441a      	add	r2, r3
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	3304      	adds	r3, #4
 800631a:	4619      	mov	r1, r3
 800631c:	4610      	mov	r0, r2
 800631e:	f7fe f96e 	bl	80045fe <vListInsertEnd>
 8006322:	e004      	b.n	800632e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006324:	4b0a      	ldr	r3, [pc, #40]	@ (8006350 <xTaskPriorityInherit+0xc4>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800632e:	2301      	movs	r3, #1
 8006330:	60fb      	str	r3, [r7, #12]
 8006332:	e008      	b.n	8006346 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006338:	4b05      	ldr	r3, [pc, #20]	@ (8006350 <xTaskPriorityInherit+0xc4>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800633e:	429a      	cmp	r2, r3
 8006340:	d201      	bcs.n	8006346 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006342:	2301      	movs	r3, #1
 8006344:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006346:	68fb      	ldr	r3, [r7, #12]
	}
 8006348:	4618      	mov	r0, r3
 800634a:	3710      	adds	r7, #16
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}
 8006350:	20000a2c 	.word	0x20000a2c
 8006354:	20000a30 	.word	0x20000a30
 8006358:	20000f08 	.word	0x20000f08

0800635c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800635c:	b580      	push	{r7, lr}
 800635e:	b086      	sub	sp, #24
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006368:	2300      	movs	r3, #0
 800636a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d058      	beq.n	8006424 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006372:	4b2f      	ldr	r3, [pc, #188]	@ (8006430 <xTaskPriorityDisinherit+0xd4>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	693a      	ldr	r2, [r7, #16]
 8006378:	429a      	cmp	r2, r3
 800637a:	d00b      	beq.n	8006394 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800637c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006380:	f383 8811 	msr	BASEPRI, r3
 8006384:	f3bf 8f6f 	isb	sy
 8006388:	f3bf 8f4f 	dsb	sy
 800638c:	60fb      	str	r3, [r7, #12]
}
 800638e:	bf00      	nop
 8006390:	bf00      	nop
 8006392:	e7fd      	b.n	8006390 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006398:	2b00      	cmp	r3, #0
 800639a:	d10b      	bne.n	80063b4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800639c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063a0:	f383 8811 	msr	BASEPRI, r3
 80063a4:	f3bf 8f6f 	isb	sy
 80063a8:	f3bf 8f4f 	dsb	sy
 80063ac:	60bb      	str	r3, [r7, #8]
}
 80063ae:	bf00      	nop
 80063b0:	bf00      	nop
 80063b2:	e7fd      	b.n	80063b0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063b8:	1e5a      	subs	r2, r3, #1
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	655a      	str	r2, [r3, #84]	@ 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d02c      	beq.n	8006424 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d128      	bne.n	8006424 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	3304      	adds	r3, #4
 80063d6:	4618      	mov	r0, r3
 80063d8:	f7fe f96e 	bl	80046b8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063e8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063f4:	4b0f      	ldr	r3, [pc, #60]	@ (8006434 <xTaskPriorityDisinherit+0xd8>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d903      	bls.n	8006404 <xTaskPriorityDisinherit+0xa8>
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006400:	4a0c      	ldr	r2, [pc, #48]	@ (8006434 <xTaskPriorityDisinherit+0xd8>)
 8006402:	6013      	str	r3, [r2, #0]
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006408:	4613      	mov	r3, r2
 800640a:	009b      	lsls	r3, r3, #2
 800640c:	4413      	add	r3, r2
 800640e:	009b      	lsls	r3, r3, #2
 8006410:	4a09      	ldr	r2, [pc, #36]	@ (8006438 <xTaskPriorityDisinherit+0xdc>)
 8006412:	441a      	add	r2, r3
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	3304      	adds	r3, #4
 8006418:	4619      	mov	r1, r3
 800641a:	4610      	mov	r0, r2
 800641c:	f7fe f8ef 	bl	80045fe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006420:	2301      	movs	r3, #1
 8006422:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006424:	697b      	ldr	r3, [r7, #20]
	}
 8006426:	4618      	mov	r0, r3
 8006428:	3718      	adds	r7, #24
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}
 800642e:	bf00      	nop
 8006430:	20000a2c 	.word	0x20000a2c
 8006434:	20000f08 	.word	0x20000f08
 8006438:	20000a30 	.word	0x20000a30

0800643c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800643c:	b580      	push	{r7, lr}
 800643e:	b088      	sub	sp, #32
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800644a:	2301      	movs	r3, #1
 800644c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d06c      	beq.n	800652e <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006454:	69bb      	ldr	r3, [r7, #24]
 8006456:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006458:	2b00      	cmp	r3, #0
 800645a:	d10b      	bne.n	8006474 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800645c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006460:	f383 8811 	msr	BASEPRI, r3
 8006464:	f3bf 8f6f 	isb	sy
 8006468:	f3bf 8f4f 	dsb	sy
 800646c:	60fb      	str	r3, [r7, #12]
}
 800646e:	bf00      	nop
 8006470:	bf00      	nop
 8006472:	e7fd      	b.n	8006470 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006474:	69bb      	ldr	r3, [r7, #24]
 8006476:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006478:	683a      	ldr	r2, [r7, #0]
 800647a:	429a      	cmp	r2, r3
 800647c:	d902      	bls.n	8006484 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	61fb      	str	r3, [r7, #28]
 8006482:	e002      	b.n	800648a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006484:	69bb      	ldr	r3, [r7, #24]
 8006486:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006488:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800648e:	69fa      	ldr	r2, [r7, #28]
 8006490:	429a      	cmp	r2, r3
 8006492:	d04c      	beq.n	800652e <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006494:	69bb      	ldr	r3, [r7, #24]
 8006496:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006498:	697a      	ldr	r2, [r7, #20]
 800649a:	429a      	cmp	r2, r3
 800649c:	d147      	bne.n	800652e <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800649e:	4b26      	ldr	r3, [pc, #152]	@ (8006538 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	69ba      	ldr	r2, [r7, #24]
 80064a4:	429a      	cmp	r2, r3
 80064a6:	d10b      	bne.n	80064c0 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80064a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064ac:	f383 8811 	msr	BASEPRI, r3
 80064b0:	f3bf 8f6f 	isb	sy
 80064b4:	f3bf 8f4f 	dsb	sy
 80064b8:	60bb      	str	r3, [r7, #8]
}
 80064ba:	bf00      	nop
 80064bc:	bf00      	nop
 80064be:	e7fd      	b.n	80064bc <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80064c0:	69bb      	ldr	r3, [r7, #24]
 80064c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064c4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80064c6:	69bb      	ldr	r3, [r7, #24]
 80064c8:	69fa      	ldr	r2, [r7, #28]
 80064ca:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80064cc:	69bb      	ldr	r3, [r7, #24]
 80064ce:	699b      	ldr	r3, [r3, #24]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	db04      	blt.n	80064de <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064d4:	69fb      	ldr	r3, [r7, #28]
 80064d6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80064da:	69bb      	ldr	r3, [r7, #24]
 80064dc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80064de:	69bb      	ldr	r3, [r7, #24]
 80064e0:	6959      	ldr	r1, [r3, #20]
 80064e2:	693a      	ldr	r2, [r7, #16]
 80064e4:	4613      	mov	r3, r2
 80064e6:	009b      	lsls	r3, r3, #2
 80064e8:	4413      	add	r3, r2
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	4a13      	ldr	r2, [pc, #76]	@ (800653c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80064ee:	4413      	add	r3, r2
 80064f0:	4299      	cmp	r1, r3
 80064f2:	d11c      	bne.n	800652e <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80064f4:	69bb      	ldr	r3, [r7, #24]
 80064f6:	3304      	adds	r3, #4
 80064f8:	4618      	mov	r0, r3
 80064fa:	f7fe f8dd 	bl	80046b8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80064fe:	69bb      	ldr	r3, [r7, #24]
 8006500:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006502:	4b0f      	ldr	r3, [pc, #60]	@ (8006540 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	429a      	cmp	r2, r3
 8006508:	d903      	bls.n	8006512 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800650a:	69bb      	ldr	r3, [r7, #24]
 800650c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800650e:	4a0c      	ldr	r2, [pc, #48]	@ (8006540 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006510:	6013      	str	r3, [r2, #0]
 8006512:	69bb      	ldr	r3, [r7, #24]
 8006514:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006516:	4613      	mov	r3, r2
 8006518:	009b      	lsls	r3, r3, #2
 800651a:	4413      	add	r3, r2
 800651c:	009b      	lsls	r3, r3, #2
 800651e:	4a07      	ldr	r2, [pc, #28]	@ (800653c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006520:	441a      	add	r2, r3
 8006522:	69bb      	ldr	r3, [r7, #24]
 8006524:	3304      	adds	r3, #4
 8006526:	4619      	mov	r1, r3
 8006528:	4610      	mov	r0, r2
 800652a:	f7fe f868 	bl	80045fe <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800652e:	bf00      	nop
 8006530:	3720      	adds	r7, #32
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}
 8006536:	bf00      	nop
 8006538:	20000a2c 	.word	0x20000a2c
 800653c:	20000a30 	.word	0x20000a30
 8006540:	20000f08 	.word	0x20000f08

08006544 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006544:	b480      	push	{r7}
 8006546:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006548:	4b07      	ldr	r3, [pc, #28]	@ (8006568 <pvTaskIncrementMutexHeldCount+0x24>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d004      	beq.n	800655a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006550:	4b05      	ldr	r3, [pc, #20]	@ (8006568 <pvTaskIncrementMutexHeldCount+0x24>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006556:	3201      	adds	r2, #1
 8006558:	655a      	str	r2, [r3, #84]	@ 0x54
		}

		return pxCurrentTCB;
 800655a:	4b03      	ldr	r3, [pc, #12]	@ (8006568 <pvTaskIncrementMutexHeldCount+0x24>)
 800655c:	681b      	ldr	r3, [r3, #0]
	}
 800655e:	4618      	mov	r0, r3
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr
 8006568:	20000a2c 	.word	0x20000a2c

0800656c <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800656c:	b580      	push	{r7, lr}
 800656e:	b084      	sub	sp, #16
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8006576:	f000 fec7 	bl	8007308 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800657a:	4b20      	ldr	r3, [pc, #128]	@ (80065fc <ulTaskNotifyTake+0x90>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006582:	2b00      	cmp	r3, #0
 8006584:	d113      	bne.n	80065ae <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8006586:	4b1d      	ldr	r3, [pc, #116]	@ (80065fc <ulTaskNotifyTake+0x90>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	2201      	movs	r2, #1
 800658c:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d00b      	beq.n	80065ae <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006596:	2101      	movs	r1, #1
 8006598:	6838      	ldr	r0, [r7, #0]
 800659a:	f000 f955 	bl	8006848 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800659e:	4b18      	ldr	r3, [pc, #96]	@ (8006600 <ulTaskNotifyTake+0x94>)
 80065a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065a4:	601a      	str	r2, [r3, #0]
 80065a6:	f3bf 8f4f 	dsb	sy
 80065aa:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80065ae:	f000 fedd 	bl	800736c <vPortExitCritical>

		taskENTER_CRITICAL();
 80065b2:	f000 fea9 	bl	8007308 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 80065b6:	4b11      	ldr	r3, [pc, #68]	@ (80065fc <ulTaskNotifyTake+0x90>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80065be:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d00e      	beq.n	80065e4 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d005      	beq.n	80065d8 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 80065cc:	4b0b      	ldr	r3, [pc, #44]	@ (80065fc <ulTaskNotifyTake+0x90>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	2200      	movs	r2, #0
 80065d2:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
 80065d6:	e005      	b.n	80065e4 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 80065d8:	4b08      	ldr	r3, [pc, #32]	@ (80065fc <ulTaskNotifyTake+0x90>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	68fa      	ldr	r2, [r7, #12]
 80065de:	3a01      	subs	r2, #1
 80065e0:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80065e4:	4b05      	ldr	r3, [pc, #20]	@ (80065fc <ulTaskNotifyTake+0x90>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	2200      	movs	r2, #0
 80065ea:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
		}
		taskEXIT_CRITICAL();
 80065ee:	f000 febd 	bl	800736c <vPortExitCritical>

		return ulReturn;
 80065f2:	68fb      	ldr	r3, [r7, #12]
	}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3710      	adds	r7, #16
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}
 80065fc:	20000a2c 	.word	0x20000a2c
 8006600:	e000ed04 	.word	0xe000ed04

08006604 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8006604:	b580      	push	{r7, lr}
 8006606:	b086      	sub	sp, #24
 8006608:	af00      	add	r7, sp, #0
 800660a:	60f8      	str	r0, [r7, #12]
 800660c:	60b9      	str	r1, [r7, #8]
 800660e:	607a      	str	r2, [r7, #4]
 8006610:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8006612:	f000 fe79 	bl	8007308 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8006616:	4b29      	ldr	r3, [pc, #164]	@ (80066bc <xTaskNotifyWait+0xb8>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 800661e:	b2db      	uxtb	r3, r3
 8006620:	2b02      	cmp	r3, #2
 8006622:	d01c      	beq.n	800665e <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8006624:	4b25      	ldr	r3, [pc, #148]	@ (80066bc <xTaskNotifyWait+0xb8>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f8d3 10b4 	ldr.w	r1, [r3, #180]	@ 0xb4
 800662c:	68fa      	ldr	r2, [r7, #12]
 800662e:	43d2      	mvns	r2, r2
 8006630:	400a      	ands	r2, r1
 8006632:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8006636:	4b21      	ldr	r3, [pc, #132]	@ (80066bc <xTaskNotifyWait+0xb8>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	2201      	movs	r2, #1
 800663c:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d00b      	beq.n	800665e <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006646:	2101      	movs	r1, #1
 8006648:	6838      	ldr	r0, [r7, #0]
 800664a:	f000 f8fd 	bl	8006848 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800664e:	4b1c      	ldr	r3, [pc, #112]	@ (80066c0 <xTaskNotifyWait+0xbc>)
 8006650:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006654:	601a      	str	r2, [r3, #0]
 8006656:	f3bf 8f4f 	dsb	sy
 800665a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800665e:	f000 fe85 	bl	800736c <vPortExitCritical>

		taskENTER_CRITICAL();
 8006662:	f000 fe51 	bl	8007308 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d005      	beq.n	8006678 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800666c:	4b13      	ldr	r3, [pc, #76]	@ (80066bc <xTaskNotifyWait+0xb8>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8006678:	4b10      	ldr	r3, [pc, #64]	@ (80066bc <xTaskNotifyWait+0xb8>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 8006680:	b2db      	uxtb	r3, r3
 8006682:	2b02      	cmp	r3, #2
 8006684:	d002      	beq.n	800668c <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8006686:	2300      	movs	r3, #0
 8006688:	617b      	str	r3, [r7, #20]
 800668a:	e00a      	b.n	80066a2 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800668c:	4b0b      	ldr	r3, [pc, #44]	@ (80066bc <xTaskNotifyWait+0xb8>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f8d3 10b4 	ldr.w	r1, [r3, #180]	@ 0xb4
 8006694:	68ba      	ldr	r2, [r7, #8]
 8006696:	43d2      	mvns	r2, r2
 8006698:	400a      	ands	r2, r1
 800669a:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
				xReturn = pdTRUE;
 800669e:	2301      	movs	r3, #1
 80066a0:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80066a2:	4b06      	ldr	r3, [pc, #24]	@ (80066bc <xTaskNotifyWait+0xb8>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	2200      	movs	r2, #0
 80066a8:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
		}
		taskEXIT_CRITICAL();
 80066ac:	f000 fe5e 	bl	800736c <vPortExitCritical>

		return xReturn;
 80066b0:	697b      	ldr	r3, [r7, #20]
	}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3718      	adds	r7, #24
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}
 80066ba:	bf00      	nop
 80066bc:	20000a2c 	.word	0x20000a2c
 80066c0:	e000ed04 	.word	0xe000ed04

080066c4 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b08a      	sub	sp, #40	@ 0x28
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	60b9      	str	r1, [r7, #8]
 80066ce:	603b      	str	r3, [r7, #0]
 80066d0:	4613      	mov	r3, r2
 80066d2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80066d4:	2301      	movs	r3, #1
 80066d6:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d10b      	bne.n	80066f6 <xTaskGenericNotify+0x32>
	__asm volatile
 80066de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066e2:	f383 8811 	msr	BASEPRI, r3
 80066e6:	f3bf 8f6f 	isb	sy
 80066ea:	f3bf 8f4f 	dsb	sy
 80066ee:	61bb      	str	r3, [r7, #24]
}
 80066f0:	bf00      	nop
 80066f2:	bf00      	nop
 80066f4:	e7fd      	b.n	80066f2 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80066fa:	f000 fe05 	bl	8007308 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d004      	beq.n	800670e <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8006704:	6a3b      	ldr	r3, [r7, #32]
 8006706:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800670e:	6a3b      	ldr	r3, [r7, #32]
 8006710:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 8006714:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006716:	6a3b      	ldr	r3, [r7, #32]
 8006718:	2202      	movs	r2, #2
 800671a:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8

			switch( eAction )
 800671e:	79fb      	ldrb	r3, [r7, #7]
 8006720:	2b04      	cmp	r3, #4
 8006722:	d82e      	bhi.n	8006782 <xTaskGenericNotify+0xbe>
 8006724:	a201      	add	r2, pc, #4	@ (adr r2, 800672c <xTaskGenericNotify+0x68>)
 8006726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800672a:	bf00      	nop
 800672c:	080067a7 	.word	0x080067a7
 8006730:	08006741 	.word	0x08006741
 8006734:	08006753 	.word	0x08006753
 8006738:	08006763 	.word	0x08006763
 800673c:	0800676d 	.word	0x0800676d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8006740:	6a3b      	ldr	r3, [r7, #32]
 8006742:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	431a      	orrs	r2, r3
 800674a:	6a3b      	ldr	r3, [r7, #32]
 800674c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
					break;
 8006750:	e02c      	b.n	80067ac <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8006752:	6a3b      	ldr	r3, [r7, #32]
 8006754:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006758:	1c5a      	adds	r2, r3, #1
 800675a:	6a3b      	ldr	r3, [r7, #32]
 800675c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
					break;
 8006760:	e024      	b.n	80067ac <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8006762:	6a3b      	ldr	r3, [r7, #32]
 8006764:	68ba      	ldr	r2, [r7, #8]
 8006766:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
					break;
 800676a:	e01f      	b.n	80067ac <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800676c:	7ffb      	ldrb	r3, [r7, #31]
 800676e:	2b02      	cmp	r3, #2
 8006770:	d004      	beq.n	800677c <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8006772:	6a3b      	ldr	r3, [r7, #32]
 8006774:	68ba      	ldr	r2, [r7, #8]
 8006776:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800677a:	e017      	b.n	80067ac <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 800677c:	2300      	movs	r3, #0
 800677e:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8006780:	e014      	b.n	80067ac <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8006782:	6a3b      	ldr	r3, [r7, #32]
 8006784:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006788:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800678c:	d00d      	beq.n	80067aa <xTaskGenericNotify+0xe6>
	__asm volatile
 800678e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006792:	f383 8811 	msr	BASEPRI, r3
 8006796:	f3bf 8f6f 	isb	sy
 800679a:	f3bf 8f4f 	dsb	sy
 800679e:	617b      	str	r3, [r7, #20]
}
 80067a0:	bf00      	nop
 80067a2:	bf00      	nop
 80067a4:	e7fd      	b.n	80067a2 <xTaskGenericNotify+0xde>
					break;
 80067a6:	bf00      	nop
 80067a8:	e000      	b.n	80067ac <xTaskGenericNotify+0xe8>

					break;
 80067aa:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80067ac:	7ffb      	ldrb	r3, [r7, #31]
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d13b      	bne.n	800682a <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067b2:	6a3b      	ldr	r3, [r7, #32]
 80067b4:	3304      	adds	r3, #4
 80067b6:	4618      	mov	r0, r3
 80067b8:	f7fd ff7e 	bl	80046b8 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80067bc:	6a3b      	ldr	r3, [r7, #32]
 80067be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067c0:	4b1d      	ldr	r3, [pc, #116]	@ (8006838 <xTaskGenericNotify+0x174>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d903      	bls.n	80067d0 <xTaskGenericNotify+0x10c>
 80067c8:	6a3b      	ldr	r3, [r7, #32]
 80067ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067cc:	4a1a      	ldr	r2, [pc, #104]	@ (8006838 <xTaskGenericNotify+0x174>)
 80067ce:	6013      	str	r3, [r2, #0]
 80067d0:	6a3b      	ldr	r3, [r7, #32]
 80067d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067d4:	4613      	mov	r3, r2
 80067d6:	009b      	lsls	r3, r3, #2
 80067d8:	4413      	add	r3, r2
 80067da:	009b      	lsls	r3, r3, #2
 80067dc:	4a17      	ldr	r2, [pc, #92]	@ (800683c <xTaskGenericNotify+0x178>)
 80067de:	441a      	add	r2, r3
 80067e0:	6a3b      	ldr	r3, [r7, #32]
 80067e2:	3304      	adds	r3, #4
 80067e4:	4619      	mov	r1, r3
 80067e6:	4610      	mov	r0, r2
 80067e8:	f7fd ff09 	bl	80045fe <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80067ec:	6a3b      	ldr	r3, [r7, #32]
 80067ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d00b      	beq.n	800680c <xTaskGenericNotify+0x148>
	__asm volatile
 80067f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067f8:	f383 8811 	msr	BASEPRI, r3
 80067fc:	f3bf 8f6f 	isb	sy
 8006800:	f3bf 8f4f 	dsb	sy
 8006804:	613b      	str	r3, [r7, #16]
}
 8006806:	bf00      	nop
 8006808:	bf00      	nop
 800680a:	e7fd      	b.n	8006808 <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800680c:	6a3b      	ldr	r3, [r7, #32]
 800680e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006810:	4b0b      	ldr	r3, [pc, #44]	@ (8006840 <xTaskGenericNotify+0x17c>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006816:	429a      	cmp	r2, r3
 8006818:	d907      	bls.n	800682a <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800681a:	4b0a      	ldr	r3, [pc, #40]	@ (8006844 <xTaskGenericNotify+0x180>)
 800681c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006820:	601a      	str	r2, [r3, #0]
 8006822:	f3bf 8f4f 	dsb	sy
 8006826:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800682a:	f000 fd9f 	bl	800736c <vPortExitCritical>

		return xReturn;
 800682e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8006830:	4618      	mov	r0, r3
 8006832:	3728      	adds	r7, #40	@ 0x28
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}
 8006838:	20000f08 	.word	0x20000f08
 800683c:	20000a30 	.word	0x20000a30
 8006840:	20000a2c 	.word	0x20000a2c
 8006844:	e000ed04 	.word	0xe000ed04

08006848 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006852:	4b21      	ldr	r3, [pc, #132]	@ (80068d8 <prvAddCurrentTaskToDelayedList+0x90>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006858:	4b20      	ldr	r3, [pc, #128]	@ (80068dc <prvAddCurrentTaskToDelayedList+0x94>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	3304      	adds	r3, #4
 800685e:	4618      	mov	r0, r3
 8006860:	f7fd ff2a 	bl	80046b8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800686a:	d10a      	bne.n	8006882 <prvAddCurrentTaskToDelayedList+0x3a>
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d007      	beq.n	8006882 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006872:	4b1a      	ldr	r3, [pc, #104]	@ (80068dc <prvAddCurrentTaskToDelayedList+0x94>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	3304      	adds	r3, #4
 8006878:	4619      	mov	r1, r3
 800687a:	4819      	ldr	r0, [pc, #100]	@ (80068e0 <prvAddCurrentTaskToDelayedList+0x98>)
 800687c:	f7fd febf 	bl	80045fe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006880:	e026      	b.n	80068d0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006882:	68fa      	ldr	r2, [r7, #12]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	4413      	add	r3, r2
 8006888:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800688a:	4b14      	ldr	r3, [pc, #80]	@ (80068dc <prvAddCurrentTaskToDelayedList+0x94>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	68ba      	ldr	r2, [r7, #8]
 8006890:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006892:	68ba      	ldr	r2, [r7, #8]
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	429a      	cmp	r2, r3
 8006898:	d209      	bcs.n	80068ae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800689a:	4b12      	ldr	r3, [pc, #72]	@ (80068e4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800689c:	681a      	ldr	r2, [r3, #0]
 800689e:	4b0f      	ldr	r3, [pc, #60]	@ (80068dc <prvAddCurrentTaskToDelayedList+0x94>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	3304      	adds	r3, #4
 80068a4:	4619      	mov	r1, r3
 80068a6:	4610      	mov	r0, r2
 80068a8:	f7fd fecd 	bl	8004646 <vListInsert>
}
 80068ac:	e010      	b.n	80068d0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80068ae:	4b0e      	ldr	r3, [pc, #56]	@ (80068e8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	4b0a      	ldr	r3, [pc, #40]	@ (80068dc <prvAddCurrentTaskToDelayedList+0x94>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	3304      	adds	r3, #4
 80068b8:	4619      	mov	r1, r3
 80068ba:	4610      	mov	r0, r2
 80068bc:	f7fd fec3 	bl	8004646 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80068c0:	4b0a      	ldr	r3, [pc, #40]	@ (80068ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	68ba      	ldr	r2, [r7, #8]
 80068c6:	429a      	cmp	r2, r3
 80068c8:	d202      	bcs.n	80068d0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80068ca:	4a08      	ldr	r2, [pc, #32]	@ (80068ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	6013      	str	r3, [r2, #0]
}
 80068d0:	bf00      	nop
 80068d2:	3710      	adds	r7, #16
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}
 80068d8:	20000f04 	.word	0x20000f04
 80068dc:	20000a2c 	.word	0x20000a2c
 80068e0:	20000eec 	.word	0x20000eec
 80068e4:	20000ebc 	.word	0x20000ebc
 80068e8:	20000eb8 	.word	0x20000eb8
 80068ec:	20000f20 	.word	0x20000f20

080068f0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b08a      	sub	sp, #40	@ 0x28
 80068f4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80068f6:	2300      	movs	r3, #0
 80068f8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80068fa:	f000 fb71 	bl	8006fe0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80068fe:	4b1d      	ldr	r3, [pc, #116]	@ (8006974 <xTimerCreateTimerTask+0x84>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d021      	beq.n	800694a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006906:	2300      	movs	r3, #0
 8006908:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800690a:	2300      	movs	r3, #0
 800690c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800690e:	1d3a      	adds	r2, r7, #4
 8006910:	f107 0108 	add.w	r1, r7, #8
 8006914:	f107 030c 	add.w	r3, r7, #12
 8006918:	4618      	mov	r0, r3
 800691a:	f7fd fe29 	bl	8004570 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800691e:	6879      	ldr	r1, [r7, #4]
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	68fa      	ldr	r2, [r7, #12]
 8006924:	9202      	str	r2, [sp, #8]
 8006926:	9301      	str	r3, [sp, #4]
 8006928:	2302      	movs	r3, #2
 800692a:	9300      	str	r3, [sp, #0]
 800692c:	2300      	movs	r3, #0
 800692e:	460a      	mov	r2, r1
 8006930:	4911      	ldr	r1, [pc, #68]	@ (8006978 <xTimerCreateTimerTask+0x88>)
 8006932:	4812      	ldr	r0, [pc, #72]	@ (800697c <xTimerCreateTimerTask+0x8c>)
 8006934:	f7fe fdd8 	bl	80054e8 <xTaskCreateStatic>
 8006938:	4603      	mov	r3, r0
 800693a:	4a11      	ldr	r2, [pc, #68]	@ (8006980 <xTimerCreateTimerTask+0x90>)
 800693c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800693e:	4b10      	ldr	r3, [pc, #64]	@ (8006980 <xTimerCreateTimerTask+0x90>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d001      	beq.n	800694a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006946:	2301      	movs	r3, #1
 8006948:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d10b      	bne.n	8006968 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006954:	f383 8811 	msr	BASEPRI, r3
 8006958:	f3bf 8f6f 	isb	sy
 800695c:	f3bf 8f4f 	dsb	sy
 8006960:	613b      	str	r3, [r7, #16]
}
 8006962:	bf00      	nop
 8006964:	bf00      	nop
 8006966:	e7fd      	b.n	8006964 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006968:	697b      	ldr	r3, [r7, #20]
}
 800696a:	4618      	mov	r0, r3
 800696c:	3718      	adds	r7, #24
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
 8006972:	bf00      	nop
 8006974:	20000f64 	.word	0x20000f64
 8006978:	080083e0 	.word	0x080083e0
 800697c:	08006b79 	.word	0x08006b79
 8006980:	20000f68 	.word	0x20000f68

08006984 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8006984:	b580      	push	{r7, lr}
 8006986:	b088      	sub	sp, #32
 8006988:	af02      	add	r7, sp, #8
 800698a:	60f8      	str	r0, [r7, #12]
 800698c:	60b9      	str	r1, [r7, #8]
 800698e:	607a      	str	r2, [r7, #4]
 8006990:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8006992:	202c      	movs	r0, #44	@ 0x2c
 8006994:	f000 fdda 	bl	800754c <pvPortMalloc>
 8006998:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d00d      	beq.n	80069bc <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	2200      	movs	r2, #0
 80069a4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	9301      	str	r3, [sp, #4]
 80069ac:	6a3b      	ldr	r3, [r7, #32]
 80069ae:	9300      	str	r3, [sp, #0]
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	68b9      	ldr	r1, [r7, #8]
 80069b6:	68f8      	ldr	r0, [r7, #12]
 80069b8:	f000 f805 	bl	80069c6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80069bc:	697b      	ldr	r3, [r7, #20]
	}
 80069be:	4618      	mov	r0, r3
 80069c0:	3718      	adds	r7, #24
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}

080069c6 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80069c6:	b580      	push	{r7, lr}
 80069c8:	b086      	sub	sp, #24
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	60f8      	str	r0, [r7, #12]
 80069ce:	60b9      	str	r1, [r7, #8]
 80069d0:	607a      	str	r2, [r7, #4]
 80069d2:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d10b      	bne.n	80069f2 <prvInitialiseNewTimer+0x2c>
	__asm volatile
 80069da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069de:	f383 8811 	msr	BASEPRI, r3
 80069e2:	f3bf 8f6f 	isb	sy
 80069e6:	f3bf 8f4f 	dsb	sy
 80069ea:	617b      	str	r3, [r7, #20]
}
 80069ec:	bf00      	nop
 80069ee:	bf00      	nop
 80069f0:	e7fd      	b.n	80069ee <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 80069f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d01e      	beq.n	8006a36 <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80069f8:	f000 faf2 	bl	8006fe0 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80069fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069fe:	68fa      	ldr	r2, [r7, #12]
 8006a00:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8006a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a04:	68ba      	ldr	r2, [r7, #8]
 8006a06:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8006a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a0a:	683a      	ldr	r2, [r7, #0]
 8006a0c:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8006a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a10:	6a3a      	ldr	r2, [r7, #32]
 8006a12:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8006a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a16:	3304      	adds	r3, #4
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f7fd fde3 	bl	80045e4 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d008      	beq.n	8006a36 <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8006a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a26:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006a2a:	f043 0304 	orr.w	r3, r3, #4
 8006a2e:	b2da      	uxtb	r2, r3
 8006a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a32:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8006a36:	bf00      	nop
 8006a38:	3718      	adds	r7, #24
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}
	...

08006a40 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b08a      	sub	sp, #40	@ 0x28
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	60f8      	str	r0, [r7, #12]
 8006a48:	60b9      	str	r1, [r7, #8]
 8006a4a:	607a      	str	r2, [r7, #4]
 8006a4c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d10b      	bne.n	8006a70 <xTimerGenericCommand+0x30>
	__asm volatile
 8006a58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a5c:	f383 8811 	msr	BASEPRI, r3
 8006a60:	f3bf 8f6f 	isb	sy
 8006a64:	f3bf 8f4f 	dsb	sy
 8006a68:	623b      	str	r3, [r7, #32]
}
 8006a6a:	bf00      	nop
 8006a6c:	bf00      	nop
 8006a6e:	e7fd      	b.n	8006a6c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006a70:	4b19      	ldr	r3, [pc, #100]	@ (8006ad8 <xTimerGenericCommand+0x98>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d02a      	beq.n	8006ace <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	2b05      	cmp	r3, #5
 8006a88:	dc18      	bgt.n	8006abc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006a8a:	f7ff fbe1 	bl	8006250 <xTaskGetSchedulerState>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	2b02      	cmp	r3, #2
 8006a92:	d109      	bne.n	8006aa8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006a94:	4b10      	ldr	r3, [pc, #64]	@ (8006ad8 <xTimerGenericCommand+0x98>)
 8006a96:	6818      	ldr	r0, [r3, #0]
 8006a98:	f107 0110 	add.w	r1, r7, #16
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006aa0:	f7fd ff7a 	bl	8004998 <xQueueGenericSend>
 8006aa4:	6278      	str	r0, [r7, #36]	@ 0x24
 8006aa6:	e012      	b.n	8006ace <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006aa8:	4b0b      	ldr	r3, [pc, #44]	@ (8006ad8 <xTimerGenericCommand+0x98>)
 8006aaa:	6818      	ldr	r0, [r3, #0]
 8006aac:	f107 0110 	add.w	r1, r7, #16
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	f7fd ff70 	bl	8004998 <xQueueGenericSend>
 8006ab8:	6278      	str	r0, [r7, #36]	@ 0x24
 8006aba:	e008      	b.n	8006ace <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006abc:	4b06      	ldr	r3, [pc, #24]	@ (8006ad8 <xTimerGenericCommand+0x98>)
 8006abe:	6818      	ldr	r0, [r3, #0]
 8006ac0:	f107 0110 	add.w	r1, r7, #16
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	683a      	ldr	r2, [r7, #0]
 8006ac8:	f7fe f868 	bl	8004b9c <xQueueGenericSendFromISR>
 8006acc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3728      	adds	r7, #40	@ 0x28
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}
 8006ad8:	20000f64 	.word	0x20000f64

08006adc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b088      	sub	sp, #32
 8006ae0:	af02      	add	r7, sp, #8
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ae6:	4b23      	ldr	r3, [pc, #140]	@ (8006b74 <prvProcessExpiredTimer+0x98>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	68db      	ldr	r3, [r3, #12]
 8006aec:	68db      	ldr	r3, [r3, #12]
 8006aee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	3304      	adds	r3, #4
 8006af4:	4618      	mov	r0, r3
 8006af6:	f7fd fddf 	bl	80046b8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006b00:	f003 0304 	and.w	r3, r3, #4
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d023      	beq.n	8006b50 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	699a      	ldr	r2, [r3, #24]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	18d1      	adds	r1, r2, r3
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	683a      	ldr	r2, [r7, #0]
 8006b14:	6978      	ldr	r0, [r7, #20]
 8006b16:	f000 f8d5 	bl	8006cc4 <prvInsertTimerInActiveList>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d020      	beq.n	8006b62 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006b20:	2300      	movs	r3, #0
 8006b22:	9300      	str	r3, [sp, #0]
 8006b24:	2300      	movs	r3, #0
 8006b26:	687a      	ldr	r2, [r7, #4]
 8006b28:	2100      	movs	r1, #0
 8006b2a:	6978      	ldr	r0, [r7, #20]
 8006b2c:	f7ff ff88 	bl	8006a40 <xTimerGenericCommand>
 8006b30:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d114      	bne.n	8006b62 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006b38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b3c:	f383 8811 	msr	BASEPRI, r3
 8006b40:	f3bf 8f6f 	isb	sy
 8006b44:	f3bf 8f4f 	dsb	sy
 8006b48:	60fb      	str	r3, [r7, #12]
}
 8006b4a:	bf00      	nop
 8006b4c:	bf00      	nop
 8006b4e:	e7fd      	b.n	8006b4c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006b56:	f023 0301 	bic.w	r3, r3, #1
 8006b5a:	b2da      	uxtb	r2, r3
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	6a1b      	ldr	r3, [r3, #32]
 8006b66:	6978      	ldr	r0, [r7, #20]
 8006b68:	4798      	blx	r3
}
 8006b6a:	bf00      	nop
 8006b6c:	3718      	adds	r7, #24
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}
 8006b72:	bf00      	nop
 8006b74:	20000f5c 	.word	0x20000f5c

08006b78 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b084      	sub	sp, #16
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006b80:	f107 0308 	add.w	r3, r7, #8
 8006b84:	4618      	mov	r0, r3
 8006b86:	f000 f859 	bl	8006c3c <prvGetNextExpireTime>
 8006b8a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	4619      	mov	r1, r3
 8006b90:	68f8      	ldr	r0, [r7, #12]
 8006b92:	f000 f805 	bl	8006ba0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006b96:	f000 f8d7 	bl	8006d48 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006b9a:	bf00      	nop
 8006b9c:	e7f0      	b.n	8006b80 <prvTimerTask+0x8>
	...

08006ba0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b084      	sub	sp, #16
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006baa:	f7fe fee1 	bl	8005970 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006bae:	f107 0308 	add.w	r3, r7, #8
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f000 f866 	bl	8006c84 <prvSampleTimeNow>
 8006bb8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d130      	bne.n	8006c22 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d10a      	bne.n	8006bdc <prvProcessTimerOrBlockTask+0x3c>
 8006bc6:	687a      	ldr	r2, [r7, #4]
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d806      	bhi.n	8006bdc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006bce:	f7fe fedd 	bl	800598c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006bd2:	68f9      	ldr	r1, [r7, #12]
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f7ff ff81 	bl	8006adc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006bda:	e024      	b.n	8006c26 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d008      	beq.n	8006bf4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006be2:	4b13      	ldr	r3, [pc, #76]	@ (8006c30 <prvProcessTimerOrBlockTask+0x90>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d101      	bne.n	8006bf0 <prvProcessTimerOrBlockTask+0x50>
 8006bec:	2301      	movs	r3, #1
 8006bee:	e000      	b.n	8006bf2 <prvProcessTimerOrBlockTask+0x52>
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006bf4:	4b0f      	ldr	r3, [pc, #60]	@ (8006c34 <prvProcessTimerOrBlockTask+0x94>)
 8006bf6:	6818      	ldr	r0, [r3, #0]
 8006bf8:	687a      	ldr	r2, [r7, #4]
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	1ad3      	subs	r3, r2, r3
 8006bfe:	683a      	ldr	r2, [r7, #0]
 8006c00:	4619      	mov	r1, r3
 8006c02:	f7fe fc3d 	bl	8005480 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006c06:	f7fe fec1 	bl	800598c <xTaskResumeAll>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d10a      	bne.n	8006c26 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006c10:	4b09      	ldr	r3, [pc, #36]	@ (8006c38 <prvProcessTimerOrBlockTask+0x98>)
 8006c12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c16:	601a      	str	r2, [r3, #0]
 8006c18:	f3bf 8f4f 	dsb	sy
 8006c1c:	f3bf 8f6f 	isb	sy
}
 8006c20:	e001      	b.n	8006c26 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006c22:	f7fe feb3 	bl	800598c <xTaskResumeAll>
}
 8006c26:	bf00      	nop
 8006c28:	3710      	adds	r7, #16
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}
 8006c2e:	bf00      	nop
 8006c30:	20000f60 	.word	0x20000f60
 8006c34:	20000f64 	.word	0x20000f64
 8006c38:	e000ed04 	.word	0xe000ed04

08006c3c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b085      	sub	sp, #20
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006c44:	4b0e      	ldr	r3, [pc, #56]	@ (8006c80 <prvGetNextExpireTime+0x44>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d101      	bne.n	8006c52 <prvGetNextExpireTime+0x16>
 8006c4e:	2201      	movs	r2, #1
 8006c50:	e000      	b.n	8006c54 <prvGetNextExpireTime+0x18>
 8006c52:	2200      	movs	r2, #0
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d105      	bne.n	8006c6c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006c60:	4b07      	ldr	r3, [pc, #28]	@ (8006c80 <prvGetNextExpireTime+0x44>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	68db      	ldr	r3, [r3, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	60fb      	str	r3, [r7, #12]
 8006c6a:	e001      	b.n	8006c70 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006c70:	68fb      	ldr	r3, [r7, #12]
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3714      	adds	r7, #20
 8006c76:	46bd      	mov	sp, r7
 8006c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7c:	4770      	bx	lr
 8006c7e:	bf00      	nop
 8006c80:	20000f5c 	.word	0x20000f5c

08006c84 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b084      	sub	sp, #16
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006c8c:	f7fe ff1c 	bl	8005ac8 <xTaskGetTickCount>
 8006c90:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006c92:	4b0b      	ldr	r3, [pc, #44]	@ (8006cc0 <prvSampleTimeNow+0x3c>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	68fa      	ldr	r2, [r7, #12]
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d205      	bcs.n	8006ca8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006c9c:	f000 f93a 	bl	8006f14 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	601a      	str	r2, [r3, #0]
 8006ca6:	e002      	b.n	8006cae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2200      	movs	r2, #0
 8006cac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006cae:	4a04      	ldr	r2, [pc, #16]	@ (8006cc0 <prvSampleTimeNow+0x3c>)
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3710      	adds	r7, #16
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}
 8006cbe:	bf00      	nop
 8006cc0:	20000f6c 	.word	0x20000f6c

08006cc4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b086      	sub	sp, #24
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	60f8      	str	r0, [r7, #12]
 8006ccc:	60b9      	str	r1, [r7, #8]
 8006cce:	607a      	str	r2, [r7, #4]
 8006cd0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	68ba      	ldr	r2, [r7, #8]
 8006cda:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	68fa      	ldr	r2, [r7, #12]
 8006ce0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006ce2:	68ba      	ldr	r2, [r7, #8]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d812      	bhi.n	8006d10 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cea:	687a      	ldr	r2, [r7, #4]
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	1ad2      	subs	r2, r2, r3
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	699b      	ldr	r3, [r3, #24]
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d302      	bcc.n	8006cfe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	617b      	str	r3, [r7, #20]
 8006cfc:	e01b      	b.n	8006d36 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006cfe:	4b10      	ldr	r3, [pc, #64]	@ (8006d40 <prvInsertTimerInActiveList+0x7c>)
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	3304      	adds	r3, #4
 8006d06:	4619      	mov	r1, r3
 8006d08:	4610      	mov	r0, r2
 8006d0a:	f7fd fc9c 	bl	8004646 <vListInsert>
 8006d0e:	e012      	b.n	8006d36 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006d10:	687a      	ldr	r2, [r7, #4]
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d206      	bcs.n	8006d26 <prvInsertTimerInActiveList+0x62>
 8006d18:	68ba      	ldr	r2, [r7, #8]
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d302      	bcc.n	8006d26 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006d20:	2301      	movs	r3, #1
 8006d22:	617b      	str	r3, [r7, #20]
 8006d24:	e007      	b.n	8006d36 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006d26:	4b07      	ldr	r3, [pc, #28]	@ (8006d44 <prvInsertTimerInActiveList+0x80>)
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	3304      	adds	r3, #4
 8006d2e:	4619      	mov	r1, r3
 8006d30:	4610      	mov	r0, r2
 8006d32:	f7fd fc88 	bl	8004646 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006d36:	697b      	ldr	r3, [r7, #20]
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3718      	adds	r7, #24
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}
 8006d40:	20000f60 	.word	0x20000f60
 8006d44:	20000f5c 	.word	0x20000f5c

08006d48 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b08e      	sub	sp, #56	@ 0x38
 8006d4c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006d4e:	e0ce      	b.n	8006eee <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	da19      	bge.n	8006d8a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006d56:	1d3b      	adds	r3, r7, #4
 8006d58:	3304      	adds	r3, #4
 8006d5a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006d5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d10b      	bne.n	8006d7a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006d62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d66:	f383 8811 	msr	BASEPRI, r3
 8006d6a:	f3bf 8f6f 	isb	sy
 8006d6e:	f3bf 8f4f 	dsb	sy
 8006d72:	61fb      	str	r3, [r7, #28]
}
 8006d74:	bf00      	nop
 8006d76:	bf00      	nop
 8006d78:	e7fd      	b.n	8006d76 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006d7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d80:	6850      	ldr	r0, [r2, #4]
 8006d82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d84:	6892      	ldr	r2, [r2, #8]
 8006d86:	4611      	mov	r1, r2
 8006d88:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	f2c0 80ae 	blt.w	8006eee <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006d96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d98:	695b      	ldr	r3, [r3, #20]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d004      	beq.n	8006da8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006da0:	3304      	adds	r3, #4
 8006da2:	4618      	mov	r0, r3
 8006da4:	f7fd fc88 	bl	80046b8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006da8:	463b      	mov	r3, r7
 8006daa:	4618      	mov	r0, r3
 8006dac:	f7ff ff6a 	bl	8006c84 <prvSampleTimeNow>
 8006db0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2b09      	cmp	r3, #9
 8006db6:	f200 8097 	bhi.w	8006ee8 <prvProcessReceivedCommands+0x1a0>
 8006dba:	a201      	add	r2, pc, #4	@ (adr r2, 8006dc0 <prvProcessReceivedCommands+0x78>)
 8006dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dc0:	08006de9 	.word	0x08006de9
 8006dc4:	08006de9 	.word	0x08006de9
 8006dc8:	08006de9 	.word	0x08006de9
 8006dcc:	08006e5f 	.word	0x08006e5f
 8006dd0:	08006e73 	.word	0x08006e73
 8006dd4:	08006ebf 	.word	0x08006ebf
 8006dd8:	08006de9 	.word	0x08006de9
 8006ddc:	08006de9 	.word	0x08006de9
 8006de0:	08006e5f 	.word	0x08006e5f
 8006de4:	08006e73 	.word	0x08006e73
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006de8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006dee:	f043 0301 	orr.w	r3, r3, #1
 8006df2:	b2da      	uxtb	r2, r3
 8006df4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006df6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006dfa:	68ba      	ldr	r2, [r7, #8]
 8006dfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dfe:	699b      	ldr	r3, [r3, #24]
 8006e00:	18d1      	adds	r1, r2, r3
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006e08:	f7ff ff5c 	bl	8006cc4 <prvInsertTimerInActiveList>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d06c      	beq.n	8006eec <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e14:	6a1b      	ldr	r3, [r3, #32]
 8006e16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006e18:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006e1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e1c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006e20:	f003 0304 	and.w	r3, r3, #4
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d061      	beq.n	8006eec <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006e28:	68ba      	ldr	r2, [r7, #8]
 8006e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e2c:	699b      	ldr	r3, [r3, #24]
 8006e2e:	441a      	add	r2, r3
 8006e30:	2300      	movs	r3, #0
 8006e32:	9300      	str	r3, [sp, #0]
 8006e34:	2300      	movs	r3, #0
 8006e36:	2100      	movs	r1, #0
 8006e38:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006e3a:	f7ff fe01 	bl	8006a40 <xTimerGenericCommand>
 8006e3e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006e40:	6a3b      	ldr	r3, [r7, #32]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d152      	bne.n	8006eec <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8006e46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e4a:	f383 8811 	msr	BASEPRI, r3
 8006e4e:	f3bf 8f6f 	isb	sy
 8006e52:	f3bf 8f4f 	dsb	sy
 8006e56:	61bb      	str	r3, [r7, #24]
}
 8006e58:	bf00      	nop
 8006e5a:	bf00      	nop
 8006e5c:	e7fd      	b.n	8006e5a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006e5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e60:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006e64:	f023 0301 	bic.w	r3, r3, #1
 8006e68:	b2da      	uxtb	r2, r3
 8006e6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e6c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006e70:	e03d      	b.n	8006eee <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006e72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e74:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006e78:	f043 0301 	orr.w	r3, r3, #1
 8006e7c:	b2da      	uxtb	r2, r3
 8006e7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e80:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006e84:	68ba      	ldr	r2, [r7, #8]
 8006e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e88:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e8c:	699b      	ldr	r3, [r3, #24]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d10b      	bne.n	8006eaa <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e96:	f383 8811 	msr	BASEPRI, r3
 8006e9a:	f3bf 8f6f 	isb	sy
 8006e9e:	f3bf 8f4f 	dsb	sy
 8006ea2:	617b      	str	r3, [r7, #20]
}
 8006ea4:	bf00      	nop
 8006ea6:	bf00      	nop
 8006ea8:	e7fd      	b.n	8006ea6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eac:	699a      	ldr	r2, [r3, #24]
 8006eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eb0:	18d1      	adds	r1, r2, r3
 8006eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006eb6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006eb8:	f7ff ff04 	bl	8006cc4 <prvInsertTimerInActiveList>
					break;
 8006ebc:	e017      	b.n	8006eee <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ec0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006ec4:	f003 0302 	and.w	r3, r3, #2
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d103      	bne.n	8006ed4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006ecc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ece:	f000 fc0b 	bl	80076e8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006ed2:	e00c      	b.n	8006eee <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006ed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ed6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006eda:	f023 0301 	bic.w	r3, r3, #1
 8006ede:	b2da      	uxtb	r2, r3
 8006ee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ee2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006ee6:	e002      	b.n	8006eee <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006ee8:	bf00      	nop
 8006eea:	e000      	b.n	8006eee <prvProcessReceivedCommands+0x1a6>
					break;
 8006eec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006eee:	4b08      	ldr	r3, [pc, #32]	@ (8006f10 <prvProcessReceivedCommands+0x1c8>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	1d39      	adds	r1, r7, #4
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f7fd ff7e 	bl	8004df8 <xQueueReceive>
 8006efc:	4603      	mov	r3, r0
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	f47f af26 	bne.w	8006d50 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006f04:	bf00      	nop
 8006f06:	bf00      	nop
 8006f08:	3730      	adds	r7, #48	@ 0x30
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}
 8006f0e:	bf00      	nop
 8006f10:	20000f64 	.word	0x20000f64

08006f14 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b088      	sub	sp, #32
 8006f18:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006f1a:	e049      	b.n	8006fb0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006f1c:	4b2e      	ldr	r3, [pc, #184]	@ (8006fd8 <prvSwitchTimerLists+0xc4>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	68db      	ldr	r3, [r3, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f26:	4b2c      	ldr	r3, [pc, #176]	@ (8006fd8 <prvSwitchTimerLists+0xc4>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	68db      	ldr	r3, [r3, #12]
 8006f2c:	68db      	ldr	r3, [r3, #12]
 8006f2e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	3304      	adds	r3, #4
 8006f34:	4618      	mov	r0, r3
 8006f36:	f7fd fbbf 	bl	80046b8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	6a1b      	ldr	r3, [r3, #32]
 8006f3e:	68f8      	ldr	r0, [r7, #12]
 8006f40:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006f48:	f003 0304 	and.w	r3, r3, #4
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d02f      	beq.n	8006fb0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	699b      	ldr	r3, [r3, #24]
 8006f54:	693a      	ldr	r2, [r7, #16]
 8006f56:	4413      	add	r3, r2
 8006f58:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006f5a:	68ba      	ldr	r2, [r7, #8]
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	d90e      	bls.n	8006f80 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	68ba      	ldr	r2, [r7, #8]
 8006f66:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	68fa      	ldr	r2, [r7, #12]
 8006f6c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006f6e:	4b1a      	ldr	r3, [pc, #104]	@ (8006fd8 <prvSwitchTimerLists+0xc4>)
 8006f70:	681a      	ldr	r2, [r3, #0]
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	3304      	adds	r3, #4
 8006f76:	4619      	mov	r1, r3
 8006f78:	4610      	mov	r0, r2
 8006f7a:	f7fd fb64 	bl	8004646 <vListInsert>
 8006f7e:	e017      	b.n	8006fb0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006f80:	2300      	movs	r3, #0
 8006f82:	9300      	str	r3, [sp, #0]
 8006f84:	2300      	movs	r3, #0
 8006f86:	693a      	ldr	r2, [r7, #16]
 8006f88:	2100      	movs	r1, #0
 8006f8a:	68f8      	ldr	r0, [r7, #12]
 8006f8c:	f7ff fd58 	bl	8006a40 <xTimerGenericCommand>
 8006f90:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d10b      	bne.n	8006fb0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006f98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f9c:	f383 8811 	msr	BASEPRI, r3
 8006fa0:	f3bf 8f6f 	isb	sy
 8006fa4:	f3bf 8f4f 	dsb	sy
 8006fa8:	603b      	str	r3, [r7, #0]
}
 8006faa:	bf00      	nop
 8006fac:	bf00      	nop
 8006fae:	e7fd      	b.n	8006fac <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006fb0:	4b09      	ldr	r3, [pc, #36]	@ (8006fd8 <prvSwitchTimerLists+0xc4>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d1b0      	bne.n	8006f1c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006fba:	4b07      	ldr	r3, [pc, #28]	@ (8006fd8 <prvSwitchTimerLists+0xc4>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006fc0:	4b06      	ldr	r3, [pc, #24]	@ (8006fdc <prvSwitchTimerLists+0xc8>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a04      	ldr	r2, [pc, #16]	@ (8006fd8 <prvSwitchTimerLists+0xc4>)
 8006fc6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006fc8:	4a04      	ldr	r2, [pc, #16]	@ (8006fdc <prvSwitchTimerLists+0xc8>)
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	6013      	str	r3, [r2, #0]
}
 8006fce:	bf00      	nop
 8006fd0:	3718      	adds	r7, #24
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}
 8006fd6:	bf00      	nop
 8006fd8:	20000f5c 	.word	0x20000f5c
 8006fdc:	20000f60 	.word	0x20000f60

08006fe0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b082      	sub	sp, #8
 8006fe4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006fe6:	f000 f98f 	bl	8007308 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006fea:	4b15      	ldr	r3, [pc, #84]	@ (8007040 <prvCheckForValidListAndQueue+0x60>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d120      	bne.n	8007034 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006ff2:	4814      	ldr	r0, [pc, #80]	@ (8007044 <prvCheckForValidListAndQueue+0x64>)
 8006ff4:	f7fd fad6 	bl	80045a4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006ff8:	4813      	ldr	r0, [pc, #76]	@ (8007048 <prvCheckForValidListAndQueue+0x68>)
 8006ffa:	f7fd fad3 	bl	80045a4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006ffe:	4b13      	ldr	r3, [pc, #76]	@ (800704c <prvCheckForValidListAndQueue+0x6c>)
 8007000:	4a10      	ldr	r2, [pc, #64]	@ (8007044 <prvCheckForValidListAndQueue+0x64>)
 8007002:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007004:	4b12      	ldr	r3, [pc, #72]	@ (8007050 <prvCheckForValidListAndQueue+0x70>)
 8007006:	4a10      	ldr	r2, [pc, #64]	@ (8007048 <prvCheckForValidListAndQueue+0x68>)
 8007008:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800700a:	2300      	movs	r3, #0
 800700c:	9300      	str	r3, [sp, #0]
 800700e:	4b11      	ldr	r3, [pc, #68]	@ (8007054 <prvCheckForValidListAndQueue+0x74>)
 8007010:	4a11      	ldr	r2, [pc, #68]	@ (8007058 <prvCheckForValidListAndQueue+0x78>)
 8007012:	2110      	movs	r1, #16
 8007014:	200a      	movs	r0, #10
 8007016:	f7fd fbe3 	bl	80047e0 <xQueueGenericCreateStatic>
 800701a:	4603      	mov	r3, r0
 800701c:	4a08      	ldr	r2, [pc, #32]	@ (8007040 <prvCheckForValidListAndQueue+0x60>)
 800701e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007020:	4b07      	ldr	r3, [pc, #28]	@ (8007040 <prvCheckForValidListAndQueue+0x60>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d005      	beq.n	8007034 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007028:	4b05      	ldr	r3, [pc, #20]	@ (8007040 <prvCheckForValidListAndQueue+0x60>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	490b      	ldr	r1, [pc, #44]	@ (800705c <prvCheckForValidListAndQueue+0x7c>)
 800702e:	4618      	mov	r0, r3
 8007030:	f7fe f9fc 	bl	800542c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007034:	f000 f99a 	bl	800736c <vPortExitCritical>
}
 8007038:	bf00      	nop
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}
 800703e:	bf00      	nop
 8007040:	20000f64 	.word	0x20000f64
 8007044:	20000f34 	.word	0x20000f34
 8007048:	20000f48 	.word	0x20000f48
 800704c:	20000f5c 	.word	0x20000f5c
 8007050:	20000f60 	.word	0x20000f60
 8007054:	20001010 	.word	0x20001010
 8007058:	20000f70 	.word	0x20000f70
 800705c:	080083e8 	.word	0x080083e8

08007060 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b086      	sub	sp, #24
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d10b      	bne.n	800708a <pvTimerGetTimerID+0x2a>
	__asm volatile
 8007072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007076:	f383 8811 	msr	BASEPRI, r3
 800707a:	f3bf 8f6f 	isb	sy
 800707e:	f3bf 8f4f 	dsb	sy
 8007082:	60fb      	str	r3, [r7, #12]
}
 8007084:	bf00      	nop
 8007086:	bf00      	nop
 8007088:	e7fd      	b.n	8007086 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800708a:	f000 f93d 	bl	8007308 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	69db      	ldr	r3, [r3, #28]
 8007092:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8007094:	f000 f96a 	bl	800736c <vPortExitCritical>

	return pvReturn;
 8007098:	693b      	ldr	r3, [r7, #16]
}
 800709a:	4618      	mov	r0, r3
 800709c:	3718      	adds	r7, #24
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}
	...

080070a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80070a4:	b480      	push	{r7}
 80070a6:	b085      	sub	sp, #20
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	60f8      	str	r0, [r7, #12]
 80070ac:	60b9      	str	r1, [r7, #8]
 80070ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	3b04      	subs	r3, #4
 80070b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80070bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	3b04      	subs	r3, #4
 80070c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	f023 0201 	bic.w	r2, r3, #1
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	3b04      	subs	r3, #4
 80070d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80070d4:	4a0c      	ldr	r2, [pc, #48]	@ (8007108 <pxPortInitialiseStack+0x64>)
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	3b14      	subs	r3, #20
 80070de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80070e0:	687a      	ldr	r2, [r7, #4]
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	3b04      	subs	r3, #4
 80070ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f06f 0202 	mvn.w	r2, #2
 80070f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	3b20      	subs	r3, #32
 80070f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80070fa:	68fb      	ldr	r3, [r7, #12]
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3714      	adds	r7, #20
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr
 8007108:	0800710d 	.word	0x0800710d

0800710c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800710c:	b480      	push	{r7}
 800710e:	b085      	sub	sp, #20
 8007110:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007112:	2300      	movs	r3, #0
 8007114:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007116:	4b13      	ldr	r3, [pc, #76]	@ (8007164 <prvTaskExitError+0x58>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800711e:	d00b      	beq.n	8007138 <prvTaskExitError+0x2c>
	__asm volatile
 8007120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007124:	f383 8811 	msr	BASEPRI, r3
 8007128:	f3bf 8f6f 	isb	sy
 800712c:	f3bf 8f4f 	dsb	sy
 8007130:	60fb      	str	r3, [r7, #12]
}
 8007132:	bf00      	nop
 8007134:	bf00      	nop
 8007136:	e7fd      	b.n	8007134 <prvTaskExitError+0x28>
	__asm volatile
 8007138:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800713c:	f383 8811 	msr	BASEPRI, r3
 8007140:	f3bf 8f6f 	isb	sy
 8007144:	f3bf 8f4f 	dsb	sy
 8007148:	60bb      	str	r3, [r7, #8]
}
 800714a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800714c:	bf00      	nop
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d0fc      	beq.n	800714e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007154:	bf00      	nop
 8007156:	bf00      	nop
 8007158:	3714      	adds	r7, #20
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr
 8007162:	bf00      	nop
 8007164:	2000000c 	.word	0x2000000c
	...

08007170 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007170:	4b07      	ldr	r3, [pc, #28]	@ (8007190 <pxCurrentTCBConst2>)
 8007172:	6819      	ldr	r1, [r3, #0]
 8007174:	6808      	ldr	r0, [r1, #0]
 8007176:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800717a:	f380 8809 	msr	PSP, r0
 800717e:	f3bf 8f6f 	isb	sy
 8007182:	f04f 0000 	mov.w	r0, #0
 8007186:	f380 8811 	msr	BASEPRI, r0
 800718a:	4770      	bx	lr
 800718c:	f3af 8000 	nop.w

08007190 <pxCurrentTCBConst2>:
 8007190:	20000a2c 	.word	0x20000a2c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007194:	bf00      	nop
 8007196:	bf00      	nop

08007198 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007198:	4808      	ldr	r0, [pc, #32]	@ (80071bc <prvPortStartFirstTask+0x24>)
 800719a:	6800      	ldr	r0, [r0, #0]
 800719c:	6800      	ldr	r0, [r0, #0]
 800719e:	f380 8808 	msr	MSP, r0
 80071a2:	f04f 0000 	mov.w	r0, #0
 80071a6:	f380 8814 	msr	CONTROL, r0
 80071aa:	b662      	cpsie	i
 80071ac:	b661      	cpsie	f
 80071ae:	f3bf 8f4f 	dsb	sy
 80071b2:	f3bf 8f6f 	isb	sy
 80071b6:	df00      	svc	0
 80071b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80071ba:	bf00      	nop
 80071bc:	e000ed08 	.word	0xe000ed08

080071c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b086      	sub	sp, #24
 80071c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80071c6:	4b47      	ldr	r3, [pc, #284]	@ (80072e4 <xPortStartScheduler+0x124>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a47      	ldr	r2, [pc, #284]	@ (80072e8 <xPortStartScheduler+0x128>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d10b      	bne.n	80071e8 <xPortStartScheduler+0x28>
	__asm volatile
 80071d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071d4:	f383 8811 	msr	BASEPRI, r3
 80071d8:	f3bf 8f6f 	isb	sy
 80071dc:	f3bf 8f4f 	dsb	sy
 80071e0:	613b      	str	r3, [r7, #16]
}
 80071e2:	bf00      	nop
 80071e4:	bf00      	nop
 80071e6:	e7fd      	b.n	80071e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80071e8:	4b3e      	ldr	r3, [pc, #248]	@ (80072e4 <xPortStartScheduler+0x124>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a3f      	ldr	r2, [pc, #252]	@ (80072ec <xPortStartScheduler+0x12c>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d10b      	bne.n	800720a <xPortStartScheduler+0x4a>
	__asm volatile
 80071f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071f6:	f383 8811 	msr	BASEPRI, r3
 80071fa:	f3bf 8f6f 	isb	sy
 80071fe:	f3bf 8f4f 	dsb	sy
 8007202:	60fb      	str	r3, [r7, #12]
}
 8007204:	bf00      	nop
 8007206:	bf00      	nop
 8007208:	e7fd      	b.n	8007206 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800720a:	4b39      	ldr	r3, [pc, #228]	@ (80072f0 <xPortStartScheduler+0x130>)
 800720c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	781b      	ldrb	r3, [r3, #0]
 8007212:	b2db      	uxtb	r3, r3
 8007214:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	22ff      	movs	r2, #255	@ 0xff
 800721a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	781b      	ldrb	r3, [r3, #0]
 8007220:	b2db      	uxtb	r3, r3
 8007222:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007224:	78fb      	ldrb	r3, [r7, #3]
 8007226:	b2db      	uxtb	r3, r3
 8007228:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800722c:	b2da      	uxtb	r2, r3
 800722e:	4b31      	ldr	r3, [pc, #196]	@ (80072f4 <xPortStartScheduler+0x134>)
 8007230:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007232:	4b31      	ldr	r3, [pc, #196]	@ (80072f8 <xPortStartScheduler+0x138>)
 8007234:	2207      	movs	r2, #7
 8007236:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007238:	e009      	b.n	800724e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800723a:	4b2f      	ldr	r3, [pc, #188]	@ (80072f8 <xPortStartScheduler+0x138>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	3b01      	subs	r3, #1
 8007240:	4a2d      	ldr	r2, [pc, #180]	@ (80072f8 <xPortStartScheduler+0x138>)
 8007242:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007244:	78fb      	ldrb	r3, [r7, #3]
 8007246:	b2db      	uxtb	r3, r3
 8007248:	005b      	lsls	r3, r3, #1
 800724a:	b2db      	uxtb	r3, r3
 800724c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800724e:	78fb      	ldrb	r3, [r7, #3]
 8007250:	b2db      	uxtb	r3, r3
 8007252:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007256:	2b80      	cmp	r3, #128	@ 0x80
 8007258:	d0ef      	beq.n	800723a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800725a:	4b27      	ldr	r3, [pc, #156]	@ (80072f8 <xPortStartScheduler+0x138>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f1c3 0307 	rsb	r3, r3, #7
 8007262:	2b04      	cmp	r3, #4
 8007264:	d00b      	beq.n	800727e <xPortStartScheduler+0xbe>
	__asm volatile
 8007266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800726a:	f383 8811 	msr	BASEPRI, r3
 800726e:	f3bf 8f6f 	isb	sy
 8007272:	f3bf 8f4f 	dsb	sy
 8007276:	60bb      	str	r3, [r7, #8]
}
 8007278:	bf00      	nop
 800727a:	bf00      	nop
 800727c:	e7fd      	b.n	800727a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800727e:	4b1e      	ldr	r3, [pc, #120]	@ (80072f8 <xPortStartScheduler+0x138>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	021b      	lsls	r3, r3, #8
 8007284:	4a1c      	ldr	r2, [pc, #112]	@ (80072f8 <xPortStartScheduler+0x138>)
 8007286:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007288:	4b1b      	ldr	r3, [pc, #108]	@ (80072f8 <xPortStartScheduler+0x138>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007290:	4a19      	ldr	r2, [pc, #100]	@ (80072f8 <xPortStartScheduler+0x138>)
 8007292:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	b2da      	uxtb	r2, r3
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800729c:	4b17      	ldr	r3, [pc, #92]	@ (80072fc <xPortStartScheduler+0x13c>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a16      	ldr	r2, [pc, #88]	@ (80072fc <xPortStartScheduler+0x13c>)
 80072a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80072a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80072a8:	4b14      	ldr	r3, [pc, #80]	@ (80072fc <xPortStartScheduler+0x13c>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a13      	ldr	r2, [pc, #76]	@ (80072fc <xPortStartScheduler+0x13c>)
 80072ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80072b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80072b4:	f000 f8da 	bl	800746c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80072b8:	4b11      	ldr	r3, [pc, #68]	@ (8007300 <xPortStartScheduler+0x140>)
 80072ba:	2200      	movs	r2, #0
 80072bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80072be:	f000 f8f9 	bl	80074b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80072c2:	4b10      	ldr	r3, [pc, #64]	@ (8007304 <xPortStartScheduler+0x144>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a0f      	ldr	r2, [pc, #60]	@ (8007304 <xPortStartScheduler+0x144>)
 80072c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80072cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80072ce:	f7ff ff63 	bl	8007198 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80072d2:	f7fe fcc3 	bl	8005c5c <vTaskSwitchContext>
	prvTaskExitError();
 80072d6:	f7ff ff19 	bl	800710c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80072da:	2300      	movs	r3, #0
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3718      	adds	r7, #24
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}
 80072e4:	e000ed00 	.word	0xe000ed00
 80072e8:	410fc271 	.word	0x410fc271
 80072ec:	410fc270 	.word	0x410fc270
 80072f0:	e000e400 	.word	0xe000e400
 80072f4:	20001060 	.word	0x20001060
 80072f8:	20001064 	.word	0x20001064
 80072fc:	e000ed20 	.word	0xe000ed20
 8007300:	2000000c 	.word	0x2000000c
 8007304:	e000ef34 	.word	0xe000ef34

08007308 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007308:	b480      	push	{r7}
 800730a:	b083      	sub	sp, #12
 800730c:	af00      	add	r7, sp, #0
	__asm volatile
 800730e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007312:	f383 8811 	msr	BASEPRI, r3
 8007316:	f3bf 8f6f 	isb	sy
 800731a:	f3bf 8f4f 	dsb	sy
 800731e:	607b      	str	r3, [r7, #4]
}
 8007320:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007322:	4b10      	ldr	r3, [pc, #64]	@ (8007364 <vPortEnterCritical+0x5c>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	3301      	adds	r3, #1
 8007328:	4a0e      	ldr	r2, [pc, #56]	@ (8007364 <vPortEnterCritical+0x5c>)
 800732a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800732c:	4b0d      	ldr	r3, [pc, #52]	@ (8007364 <vPortEnterCritical+0x5c>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	2b01      	cmp	r3, #1
 8007332:	d110      	bne.n	8007356 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007334:	4b0c      	ldr	r3, [pc, #48]	@ (8007368 <vPortEnterCritical+0x60>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	b2db      	uxtb	r3, r3
 800733a:	2b00      	cmp	r3, #0
 800733c:	d00b      	beq.n	8007356 <vPortEnterCritical+0x4e>
	__asm volatile
 800733e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007342:	f383 8811 	msr	BASEPRI, r3
 8007346:	f3bf 8f6f 	isb	sy
 800734a:	f3bf 8f4f 	dsb	sy
 800734e:	603b      	str	r3, [r7, #0]
}
 8007350:	bf00      	nop
 8007352:	bf00      	nop
 8007354:	e7fd      	b.n	8007352 <vPortEnterCritical+0x4a>
	}
}
 8007356:	bf00      	nop
 8007358:	370c      	adds	r7, #12
 800735a:	46bd      	mov	sp, r7
 800735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007360:	4770      	bx	lr
 8007362:	bf00      	nop
 8007364:	2000000c 	.word	0x2000000c
 8007368:	e000ed04 	.word	0xe000ed04

0800736c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800736c:	b480      	push	{r7}
 800736e:	b083      	sub	sp, #12
 8007370:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007372:	4b12      	ldr	r3, [pc, #72]	@ (80073bc <vPortExitCritical+0x50>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d10b      	bne.n	8007392 <vPortExitCritical+0x26>
	__asm volatile
 800737a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800737e:	f383 8811 	msr	BASEPRI, r3
 8007382:	f3bf 8f6f 	isb	sy
 8007386:	f3bf 8f4f 	dsb	sy
 800738a:	607b      	str	r3, [r7, #4]
}
 800738c:	bf00      	nop
 800738e:	bf00      	nop
 8007390:	e7fd      	b.n	800738e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007392:	4b0a      	ldr	r3, [pc, #40]	@ (80073bc <vPortExitCritical+0x50>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	3b01      	subs	r3, #1
 8007398:	4a08      	ldr	r2, [pc, #32]	@ (80073bc <vPortExitCritical+0x50>)
 800739a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800739c:	4b07      	ldr	r3, [pc, #28]	@ (80073bc <vPortExitCritical+0x50>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d105      	bne.n	80073b0 <vPortExitCritical+0x44>
 80073a4:	2300      	movs	r3, #0
 80073a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	f383 8811 	msr	BASEPRI, r3
}
 80073ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80073b0:	bf00      	nop
 80073b2:	370c      	adds	r7, #12
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr
 80073bc:	2000000c 	.word	0x2000000c

080073c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80073c0:	f3ef 8009 	mrs	r0, PSP
 80073c4:	f3bf 8f6f 	isb	sy
 80073c8:	4b15      	ldr	r3, [pc, #84]	@ (8007420 <pxCurrentTCBConst>)
 80073ca:	681a      	ldr	r2, [r3, #0]
 80073cc:	f01e 0f10 	tst.w	lr, #16
 80073d0:	bf08      	it	eq
 80073d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80073d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073da:	6010      	str	r0, [r2, #0]
 80073dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80073e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80073e4:	f380 8811 	msr	BASEPRI, r0
 80073e8:	f3bf 8f4f 	dsb	sy
 80073ec:	f3bf 8f6f 	isb	sy
 80073f0:	f7fe fc34 	bl	8005c5c <vTaskSwitchContext>
 80073f4:	f04f 0000 	mov.w	r0, #0
 80073f8:	f380 8811 	msr	BASEPRI, r0
 80073fc:	bc09      	pop	{r0, r3}
 80073fe:	6819      	ldr	r1, [r3, #0]
 8007400:	6808      	ldr	r0, [r1, #0]
 8007402:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007406:	f01e 0f10 	tst.w	lr, #16
 800740a:	bf08      	it	eq
 800740c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007410:	f380 8809 	msr	PSP, r0
 8007414:	f3bf 8f6f 	isb	sy
 8007418:	4770      	bx	lr
 800741a:	bf00      	nop
 800741c:	f3af 8000 	nop.w

08007420 <pxCurrentTCBConst>:
 8007420:	20000a2c 	.word	0x20000a2c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007424:	bf00      	nop
 8007426:	bf00      	nop

08007428 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b082      	sub	sp, #8
 800742c:	af00      	add	r7, sp, #0
	__asm volatile
 800742e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007432:	f383 8811 	msr	BASEPRI, r3
 8007436:	f3bf 8f6f 	isb	sy
 800743a:	f3bf 8f4f 	dsb	sy
 800743e:	607b      	str	r3, [r7, #4]
}
 8007440:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007442:	f7fe fb51 	bl	8005ae8 <xTaskIncrementTick>
 8007446:	4603      	mov	r3, r0
 8007448:	2b00      	cmp	r3, #0
 800744a:	d003      	beq.n	8007454 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800744c:	4b06      	ldr	r3, [pc, #24]	@ (8007468 <xPortSysTickHandler+0x40>)
 800744e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007452:	601a      	str	r2, [r3, #0]
 8007454:	2300      	movs	r3, #0
 8007456:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	f383 8811 	msr	BASEPRI, r3
}
 800745e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007460:	bf00      	nop
 8007462:	3708      	adds	r7, #8
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}
 8007468:	e000ed04 	.word	0xe000ed04

0800746c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800746c:	b480      	push	{r7}
 800746e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007470:	4b0b      	ldr	r3, [pc, #44]	@ (80074a0 <vPortSetupTimerInterrupt+0x34>)
 8007472:	2200      	movs	r2, #0
 8007474:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007476:	4b0b      	ldr	r3, [pc, #44]	@ (80074a4 <vPortSetupTimerInterrupt+0x38>)
 8007478:	2200      	movs	r2, #0
 800747a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800747c:	4b0a      	ldr	r3, [pc, #40]	@ (80074a8 <vPortSetupTimerInterrupt+0x3c>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a0a      	ldr	r2, [pc, #40]	@ (80074ac <vPortSetupTimerInterrupt+0x40>)
 8007482:	fba2 2303 	umull	r2, r3, r2, r3
 8007486:	099b      	lsrs	r3, r3, #6
 8007488:	4a09      	ldr	r2, [pc, #36]	@ (80074b0 <vPortSetupTimerInterrupt+0x44>)
 800748a:	3b01      	subs	r3, #1
 800748c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800748e:	4b04      	ldr	r3, [pc, #16]	@ (80074a0 <vPortSetupTimerInterrupt+0x34>)
 8007490:	2207      	movs	r2, #7
 8007492:	601a      	str	r2, [r3, #0]
}
 8007494:	bf00      	nop
 8007496:	46bd      	mov	sp, r7
 8007498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749c:	4770      	bx	lr
 800749e:	bf00      	nop
 80074a0:	e000e010 	.word	0xe000e010
 80074a4:	e000e018 	.word	0xe000e018
 80074a8:	20000000 	.word	0x20000000
 80074ac:	10624dd3 	.word	0x10624dd3
 80074b0:	e000e014 	.word	0xe000e014

080074b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80074b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80074c4 <vPortEnableVFP+0x10>
 80074b8:	6801      	ldr	r1, [r0, #0]
 80074ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80074be:	6001      	str	r1, [r0, #0]
 80074c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80074c2:	bf00      	nop
 80074c4:	e000ed88 	.word	0xe000ed88

080074c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80074c8:	b480      	push	{r7}
 80074ca:	b085      	sub	sp, #20
 80074cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80074ce:	f3ef 8305 	mrs	r3, IPSR
 80074d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2b0f      	cmp	r3, #15
 80074d8:	d915      	bls.n	8007506 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80074da:	4a18      	ldr	r2, [pc, #96]	@ (800753c <vPortValidateInterruptPriority+0x74>)
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	4413      	add	r3, r2
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80074e4:	4b16      	ldr	r3, [pc, #88]	@ (8007540 <vPortValidateInterruptPriority+0x78>)
 80074e6:	781b      	ldrb	r3, [r3, #0]
 80074e8:	7afa      	ldrb	r2, [r7, #11]
 80074ea:	429a      	cmp	r2, r3
 80074ec:	d20b      	bcs.n	8007506 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80074ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074f2:	f383 8811 	msr	BASEPRI, r3
 80074f6:	f3bf 8f6f 	isb	sy
 80074fa:	f3bf 8f4f 	dsb	sy
 80074fe:	607b      	str	r3, [r7, #4]
}
 8007500:	bf00      	nop
 8007502:	bf00      	nop
 8007504:	e7fd      	b.n	8007502 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007506:	4b0f      	ldr	r3, [pc, #60]	@ (8007544 <vPortValidateInterruptPriority+0x7c>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800750e:	4b0e      	ldr	r3, [pc, #56]	@ (8007548 <vPortValidateInterruptPriority+0x80>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	429a      	cmp	r2, r3
 8007514:	d90b      	bls.n	800752e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800751a:	f383 8811 	msr	BASEPRI, r3
 800751e:	f3bf 8f6f 	isb	sy
 8007522:	f3bf 8f4f 	dsb	sy
 8007526:	603b      	str	r3, [r7, #0]
}
 8007528:	bf00      	nop
 800752a:	bf00      	nop
 800752c:	e7fd      	b.n	800752a <vPortValidateInterruptPriority+0x62>
	}
 800752e:	bf00      	nop
 8007530:	3714      	adds	r7, #20
 8007532:	46bd      	mov	sp, r7
 8007534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007538:	4770      	bx	lr
 800753a:	bf00      	nop
 800753c:	e000e3f0 	.word	0xe000e3f0
 8007540:	20001060 	.word	0x20001060
 8007544:	e000ed0c 	.word	0xe000ed0c
 8007548:	20001064 	.word	0x20001064

0800754c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b08a      	sub	sp, #40	@ 0x28
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007554:	2300      	movs	r3, #0
 8007556:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007558:	f7fe fa0a 	bl	8005970 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800755c:	4b5c      	ldr	r3, [pc, #368]	@ (80076d0 <pvPortMalloc+0x184>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d101      	bne.n	8007568 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007564:	f000 f924 	bl	80077b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007568:	4b5a      	ldr	r3, [pc, #360]	@ (80076d4 <pvPortMalloc+0x188>)
 800756a:	681a      	ldr	r2, [r3, #0]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	4013      	ands	r3, r2
 8007570:	2b00      	cmp	r3, #0
 8007572:	f040 8095 	bne.w	80076a0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d01e      	beq.n	80075ba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800757c:	2208      	movs	r2, #8
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	4413      	add	r3, r2
 8007582:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f003 0307 	and.w	r3, r3, #7
 800758a:	2b00      	cmp	r3, #0
 800758c:	d015      	beq.n	80075ba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f023 0307 	bic.w	r3, r3, #7
 8007594:	3308      	adds	r3, #8
 8007596:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f003 0307 	and.w	r3, r3, #7
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d00b      	beq.n	80075ba <pvPortMalloc+0x6e>
	__asm volatile
 80075a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075a6:	f383 8811 	msr	BASEPRI, r3
 80075aa:	f3bf 8f6f 	isb	sy
 80075ae:	f3bf 8f4f 	dsb	sy
 80075b2:	617b      	str	r3, [r7, #20]
}
 80075b4:	bf00      	nop
 80075b6:	bf00      	nop
 80075b8:	e7fd      	b.n	80075b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d06f      	beq.n	80076a0 <pvPortMalloc+0x154>
 80075c0:	4b45      	ldr	r3, [pc, #276]	@ (80076d8 <pvPortMalloc+0x18c>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	687a      	ldr	r2, [r7, #4]
 80075c6:	429a      	cmp	r2, r3
 80075c8:	d86a      	bhi.n	80076a0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80075ca:	4b44      	ldr	r3, [pc, #272]	@ (80076dc <pvPortMalloc+0x190>)
 80075cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80075ce:	4b43      	ldr	r3, [pc, #268]	@ (80076dc <pvPortMalloc+0x190>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80075d4:	e004      	b.n	80075e0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80075d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80075da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80075e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	687a      	ldr	r2, [r7, #4]
 80075e6:	429a      	cmp	r2, r3
 80075e8:	d903      	bls.n	80075f2 <pvPortMalloc+0xa6>
 80075ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d1f1      	bne.n	80075d6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80075f2:	4b37      	ldr	r3, [pc, #220]	@ (80076d0 <pvPortMalloc+0x184>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075f8:	429a      	cmp	r2, r3
 80075fa:	d051      	beq.n	80076a0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80075fc:	6a3b      	ldr	r3, [r7, #32]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	2208      	movs	r2, #8
 8007602:	4413      	add	r3, r2
 8007604:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007608:	681a      	ldr	r2, [r3, #0]
 800760a:	6a3b      	ldr	r3, [r7, #32]
 800760c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800760e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007610:	685a      	ldr	r2, [r3, #4]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	1ad2      	subs	r2, r2, r3
 8007616:	2308      	movs	r3, #8
 8007618:	005b      	lsls	r3, r3, #1
 800761a:	429a      	cmp	r2, r3
 800761c:	d920      	bls.n	8007660 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800761e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	4413      	add	r3, r2
 8007624:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007626:	69bb      	ldr	r3, [r7, #24]
 8007628:	f003 0307 	and.w	r3, r3, #7
 800762c:	2b00      	cmp	r3, #0
 800762e:	d00b      	beq.n	8007648 <pvPortMalloc+0xfc>
	__asm volatile
 8007630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007634:	f383 8811 	msr	BASEPRI, r3
 8007638:	f3bf 8f6f 	isb	sy
 800763c:	f3bf 8f4f 	dsb	sy
 8007640:	613b      	str	r3, [r7, #16]
}
 8007642:	bf00      	nop
 8007644:	bf00      	nop
 8007646:	e7fd      	b.n	8007644 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800764a:	685a      	ldr	r2, [r3, #4]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	1ad2      	subs	r2, r2, r3
 8007650:	69bb      	ldr	r3, [r7, #24]
 8007652:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007656:	687a      	ldr	r2, [r7, #4]
 8007658:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800765a:	69b8      	ldr	r0, [r7, #24]
 800765c:	f000 f90a 	bl	8007874 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007660:	4b1d      	ldr	r3, [pc, #116]	@ (80076d8 <pvPortMalloc+0x18c>)
 8007662:	681a      	ldr	r2, [r3, #0]
 8007664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	1ad3      	subs	r3, r2, r3
 800766a:	4a1b      	ldr	r2, [pc, #108]	@ (80076d8 <pvPortMalloc+0x18c>)
 800766c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800766e:	4b1a      	ldr	r3, [pc, #104]	@ (80076d8 <pvPortMalloc+0x18c>)
 8007670:	681a      	ldr	r2, [r3, #0]
 8007672:	4b1b      	ldr	r3, [pc, #108]	@ (80076e0 <pvPortMalloc+0x194>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	429a      	cmp	r2, r3
 8007678:	d203      	bcs.n	8007682 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800767a:	4b17      	ldr	r3, [pc, #92]	@ (80076d8 <pvPortMalloc+0x18c>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4a18      	ldr	r2, [pc, #96]	@ (80076e0 <pvPortMalloc+0x194>)
 8007680:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007684:	685a      	ldr	r2, [r3, #4]
 8007686:	4b13      	ldr	r3, [pc, #76]	@ (80076d4 <pvPortMalloc+0x188>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	431a      	orrs	r2, r3
 800768c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800768e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007692:	2200      	movs	r2, #0
 8007694:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007696:	4b13      	ldr	r3, [pc, #76]	@ (80076e4 <pvPortMalloc+0x198>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	3301      	adds	r3, #1
 800769c:	4a11      	ldr	r2, [pc, #68]	@ (80076e4 <pvPortMalloc+0x198>)
 800769e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80076a0:	f7fe f974 	bl	800598c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80076a4:	69fb      	ldr	r3, [r7, #28]
 80076a6:	f003 0307 	and.w	r3, r3, #7
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d00b      	beq.n	80076c6 <pvPortMalloc+0x17a>
	__asm volatile
 80076ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076b2:	f383 8811 	msr	BASEPRI, r3
 80076b6:	f3bf 8f6f 	isb	sy
 80076ba:	f3bf 8f4f 	dsb	sy
 80076be:	60fb      	str	r3, [r7, #12]
}
 80076c0:	bf00      	nop
 80076c2:	bf00      	nop
 80076c4:	e7fd      	b.n	80076c2 <pvPortMalloc+0x176>
	return pvReturn;
 80076c6:	69fb      	ldr	r3, [r7, #28]
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3728      	adds	r7, #40	@ 0x28
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}
 80076d0:	20004c70 	.word	0x20004c70
 80076d4:	20004c84 	.word	0x20004c84
 80076d8:	20004c74 	.word	0x20004c74
 80076dc:	20004c68 	.word	0x20004c68
 80076e0:	20004c78 	.word	0x20004c78
 80076e4:	20004c7c 	.word	0x20004c7c

080076e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b086      	sub	sp, #24
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d04f      	beq.n	800779a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80076fa:	2308      	movs	r3, #8
 80076fc:	425b      	negs	r3, r3
 80076fe:	697a      	ldr	r2, [r7, #20]
 8007700:	4413      	add	r3, r2
 8007702:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	685a      	ldr	r2, [r3, #4]
 800770c:	4b25      	ldr	r3, [pc, #148]	@ (80077a4 <vPortFree+0xbc>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4013      	ands	r3, r2
 8007712:	2b00      	cmp	r3, #0
 8007714:	d10b      	bne.n	800772e <vPortFree+0x46>
	__asm volatile
 8007716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800771a:	f383 8811 	msr	BASEPRI, r3
 800771e:	f3bf 8f6f 	isb	sy
 8007722:	f3bf 8f4f 	dsb	sy
 8007726:	60fb      	str	r3, [r7, #12]
}
 8007728:	bf00      	nop
 800772a:	bf00      	nop
 800772c:	e7fd      	b.n	800772a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d00b      	beq.n	800774e <vPortFree+0x66>
	__asm volatile
 8007736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800773a:	f383 8811 	msr	BASEPRI, r3
 800773e:	f3bf 8f6f 	isb	sy
 8007742:	f3bf 8f4f 	dsb	sy
 8007746:	60bb      	str	r3, [r7, #8]
}
 8007748:	bf00      	nop
 800774a:	bf00      	nop
 800774c:	e7fd      	b.n	800774a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	685a      	ldr	r2, [r3, #4]
 8007752:	4b14      	ldr	r3, [pc, #80]	@ (80077a4 <vPortFree+0xbc>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4013      	ands	r3, r2
 8007758:	2b00      	cmp	r3, #0
 800775a:	d01e      	beq.n	800779a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d11a      	bne.n	800779a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	685a      	ldr	r2, [r3, #4]
 8007768:	4b0e      	ldr	r3, [pc, #56]	@ (80077a4 <vPortFree+0xbc>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	43db      	mvns	r3, r3
 800776e:	401a      	ands	r2, r3
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007774:	f7fe f8fc 	bl	8005970 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	685a      	ldr	r2, [r3, #4]
 800777c:	4b0a      	ldr	r3, [pc, #40]	@ (80077a8 <vPortFree+0xc0>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4413      	add	r3, r2
 8007782:	4a09      	ldr	r2, [pc, #36]	@ (80077a8 <vPortFree+0xc0>)
 8007784:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007786:	6938      	ldr	r0, [r7, #16]
 8007788:	f000 f874 	bl	8007874 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800778c:	4b07      	ldr	r3, [pc, #28]	@ (80077ac <vPortFree+0xc4>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	3301      	adds	r3, #1
 8007792:	4a06      	ldr	r2, [pc, #24]	@ (80077ac <vPortFree+0xc4>)
 8007794:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007796:	f7fe f8f9 	bl	800598c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800779a:	bf00      	nop
 800779c:	3718      	adds	r7, #24
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}
 80077a2:	bf00      	nop
 80077a4:	20004c84 	.word	0x20004c84
 80077a8:	20004c74 	.word	0x20004c74
 80077ac:	20004c80 	.word	0x20004c80

080077b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80077b0:	b480      	push	{r7}
 80077b2:	b085      	sub	sp, #20
 80077b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80077b6:	f643 33ff 	movw	r3, #15359	@ 0x3bff
 80077ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80077bc:	4b27      	ldr	r3, [pc, #156]	@ (800785c <prvHeapInit+0xac>)
 80077be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f003 0307 	and.w	r3, r3, #7
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d00c      	beq.n	80077e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	3307      	adds	r3, #7
 80077ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f023 0307 	bic.w	r3, r3, #7
 80077d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80077d8:	68ba      	ldr	r2, [r7, #8]
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	1ad3      	subs	r3, r2, r3
 80077de:	4a1f      	ldr	r2, [pc, #124]	@ (800785c <prvHeapInit+0xac>)
 80077e0:	4413      	add	r3, r2
 80077e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80077e8:	4a1d      	ldr	r2, [pc, #116]	@ (8007860 <prvHeapInit+0xb0>)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80077ee:	4b1c      	ldr	r3, [pc, #112]	@ (8007860 <prvHeapInit+0xb0>)
 80077f0:	2200      	movs	r2, #0
 80077f2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	68ba      	ldr	r2, [r7, #8]
 80077f8:	4413      	add	r3, r2
 80077fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80077fc:	2208      	movs	r2, #8
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	1a9b      	subs	r3, r3, r2
 8007802:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	f023 0307 	bic.w	r3, r3, #7
 800780a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	4a15      	ldr	r2, [pc, #84]	@ (8007864 <prvHeapInit+0xb4>)
 8007810:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007812:	4b14      	ldr	r3, [pc, #80]	@ (8007864 <prvHeapInit+0xb4>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	2200      	movs	r2, #0
 8007818:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800781a:	4b12      	ldr	r3, [pc, #72]	@ (8007864 <prvHeapInit+0xb4>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	2200      	movs	r2, #0
 8007820:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	68fa      	ldr	r2, [r7, #12]
 800782a:	1ad2      	subs	r2, r2, r3
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007830:	4b0c      	ldr	r3, [pc, #48]	@ (8007864 <prvHeapInit+0xb4>)
 8007832:	681a      	ldr	r2, [r3, #0]
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	4a0a      	ldr	r2, [pc, #40]	@ (8007868 <prvHeapInit+0xb8>)
 800783e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	4a09      	ldr	r2, [pc, #36]	@ (800786c <prvHeapInit+0xbc>)
 8007846:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007848:	4b09      	ldr	r3, [pc, #36]	@ (8007870 <prvHeapInit+0xc0>)
 800784a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800784e:	601a      	str	r2, [r3, #0]
}
 8007850:	bf00      	nop
 8007852:	3714      	adds	r7, #20
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr
 800785c:	20001068 	.word	0x20001068
 8007860:	20004c68 	.word	0x20004c68
 8007864:	20004c70 	.word	0x20004c70
 8007868:	20004c78 	.word	0x20004c78
 800786c:	20004c74 	.word	0x20004c74
 8007870:	20004c84 	.word	0x20004c84

08007874 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007874:	b480      	push	{r7}
 8007876:	b085      	sub	sp, #20
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800787c:	4b28      	ldr	r3, [pc, #160]	@ (8007920 <prvInsertBlockIntoFreeList+0xac>)
 800787e:	60fb      	str	r3, [r7, #12]
 8007880:	e002      	b.n	8007888 <prvInsertBlockIntoFreeList+0x14>
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	60fb      	str	r3, [r7, #12]
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	687a      	ldr	r2, [r7, #4]
 800788e:	429a      	cmp	r2, r3
 8007890:	d8f7      	bhi.n	8007882 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	68ba      	ldr	r2, [r7, #8]
 800789c:	4413      	add	r3, r2
 800789e:	687a      	ldr	r2, [r7, #4]
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d108      	bne.n	80078b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	685a      	ldr	r2, [r3, #4]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	441a      	add	r2, r3
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	68ba      	ldr	r2, [r7, #8]
 80078c0:	441a      	add	r2, r3
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	429a      	cmp	r2, r3
 80078c8:	d118      	bne.n	80078fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681a      	ldr	r2, [r3, #0]
 80078ce:	4b15      	ldr	r3, [pc, #84]	@ (8007924 <prvInsertBlockIntoFreeList+0xb0>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	429a      	cmp	r2, r3
 80078d4:	d00d      	beq.n	80078f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	685a      	ldr	r2, [r3, #4]
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	441a      	add	r2, r3
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	681a      	ldr	r2, [r3, #0]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	601a      	str	r2, [r3, #0]
 80078f0:	e008      	b.n	8007904 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80078f2:	4b0c      	ldr	r3, [pc, #48]	@ (8007924 <prvInsertBlockIntoFreeList+0xb0>)
 80078f4:	681a      	ldr	r2, [r3, #0]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	601a      	str	r2, [r3, #0]
 80078fa:	e003      	b.n	8007904 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681a      	ldr	r2, [r3, #0]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007904:	68fa      	ldr	r2, [r7, #12]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	429a      	cmp	r2, r3
 800790a:	d002      	beq.n	8007912 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	687a      	ldr	r2, [r7, #4]
 8007910:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007912:	bf00      	nop
 8007914:	3714      	adds	r7, #20
 8007916:	46bd      	mov	sp, r7
 8007918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791c:	4770      	bx	lr
 800791e:	bf00      	nop
 8007920:	20004c68 	.word	0x20004c68
 8007924:	20004c70 	.word	0x20004c70

08007928 <sniprintf>:
 8007928:	b40c      	push	{r2, r3}
 800792a:	b530      	push	{r4, r5, lr}
 800792c:	4b17      	ldr	r3, [pc, #92]	@ (800798c <sniprintf+0x64>)
 800792e:	1e0c      	subs	r4, r1, #0
 8007930:	681d      	ldr	r5, [r3, #0]
 8007932:	b09d      	sub	sp, #116	@ 0x74
 8007934:	da08      	bge.n	8007948 <sniprintf+0x20>
 8007936:	238b      	movs	r3, #139	@ 0x8b
 8007938:	602b      	str	r3, [r5, #0]
 800793a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800793e:	b01d      	add	sp, #116	@ 0x74
 8007940:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007944:	b002      	add	sp, #8
 8007946:	4770      	bx	lr
 8007948:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800794c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007950:	bf14      	ite	ne
 8007952:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8007956:	4623      	moveq	r3, r4
 8007958:	9304      	str	r3, [sp, #16]
 800795a:	9307      	str	r3, [sp, #28]
 800795c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007960:	9002      	str	r0, [sp, #8]
 8007962:	9006      	str	r0, [sp, #24]
 8007964:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007968:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800796a:	ab21      	add	r3, sp, #132	@ 0x84
 800796c:	a902      	add	r1, sp, #8
 800796e:	4628      	mov	r0, r5
 8007970:	9301      	str	r3, [sp, #4]
 8007972:	f000 f94b 	bl	8007c0c <_svfiprintf_r>
 8007976:	1c43      	adds	r3, r0, #1
 8007978:	bfbc      	itt	lt
 800797a:	238b      	movlt	r3, #139	@ 0x8b
 800797c:	602b      	strlt	r3, [r5, #0]
 800797e:	2c00      	cmp	r4, #0
 8007980:	d0dd      	beq.n	800793e <sniprintf+0x16>
 8007982:	9b02      	ldr	r3, [sp, #8]
 8007984:	2200      	movs	r2, #0
 8007986:	701a      	strb	r2, [r3, #0]
 8007988:	e7d9      	b.n	800793e <sniprintf+0x16>
 800798a:	bf00      	nop
 800798c:	20000010 	.word	0x20000010

08007990 <memset>:
 8007990:	4402      	add	r2, r0
 8007992:	4603      	mov	r3, r0
 8007994:	4293      	cmp	r3, r2
 8007996:	d100      	bne.n	800799a <memset+0xa>
 8007998:	4770      	bx	lr
 800799a:	f803 1b01 	strb.w	r1, [r3], #1
 800799e:	e7f9      	b.n	8007994 <memset+0x4>

080079a0 <_reclaim_reent>:
 80079a0:	4b29      	ldr	r3, [pc, #164]	@ (8007a48 <_reclaim_reent+0xa8>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4283      	cmp	r3, r0
 80079a6:	b570      	push	{r4, r5, r6, lr}
 80079a8:	4604      	mov	r4, r0
 80079aa:	d04b      	beq.n	8007a44 <_reclaim_reent+0xa4>
 80079ac:	69c3      	ldr	r3, [r0, #28]
 80079ae:	b1ab      	cbz	r3, 80079dc <_reclaim_reent+0x3c>
 80079b0:	68db      	ldr	r3, [r3, #12]
 80079b2:	b16b      	cbz	r3, 80079d0 <_reclaim_reent+0x30>
 80079b4:	2500      	movs	r5, #0
 80079b6:	69e3      	ldr	r3, [r4, #28]
 80079b8:	68db      	ldr	r3, [r3, #12]
 80079ba:	5959      	ldr	r1, [r3, r5]
 80079bc:	2900      	cmp	r1, #0
 80079be:	d13b      	bne.n	8007a38 <_reclaim_reent+0x98>
 80079c0:	3504      	adds	r5, #4
 80079c2:	2d80      	cmp	r5, #128	@ 0x80
 80079c4:	d1f7      	bne.n	80079b6 <_reclaim_reent+0x16>
 80079c6:	69e3      	ldr	r3, [r4, #28]
 80079c8:	4620      	mov	r0, r4
 80079ca:	68d9      	ldr	r1, [r3, #12]
 80079cc:	f000 f878 	bl	8007ac0 <_free_r>
 80079d0:	69e3      	ldr	r3, [r4, #28]
 80079d2:	6819      	ldr	r1, [r3, #0]
 80079d4:	b111      	cbz	r1, 80079dc <_reclaim_reent+0x3c>
 80079d6:	4620      	mov	r0, r4
 80079d8:	f000 f872 	bl	8007ac0 <_free_r>
 80079dc:	6961      	ldr	r1, [r4, #20]
 80079de:	b111      	cbz	r1, 80079e6 <_reclaim_reent+0x46>
 80079e0:	4620      	mov	r0, r4
 80079e2:	f000 f86d 	bl	8007ac0 <_free_r>
 80079e6:	69e1      	ldr	r1, [r4, #28]
 80079e8:	b111      	cbz	r1, 80079f0 <_reclaim_reent+0x50>
 80079ea:	4620      	mov	r0, r4
 80079ec:	f000 f868 	bl	8007ac0 <_free_r>
 80079f0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80079f2:	b111      	cbz	r1, 80079fa <_reclaim_reent+0x5a>
 80079f4:	4620      	mov	r0, r4
 80079f6:	f000 f863 	bl	8007ac0 <_free_r>
 80079fa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80079fc:	b111      	cbz	r1, 8007a04 <_reclaim_reent+0x64>
 80079fe:	4620      	mov	r0, r4
 8007a00:	f000 f85e 	bl	8007ac0 <_free_r>
 8007a04:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007a06:	b111      	cbz	r1, 8007a0e <_reclaim_reent+0x6e>
 8007a08:	4620      	mov	r0, r4
 8007a0a:	f000 f859 	bl	8007ac0 <_free_r>
 8007a0e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007a10:	b111      	cbz	r1, 8007a18 <_reclaim_reent+0x78>
 8007a12:	4620      	mov	r0, r4
 8007a14:	f000 f854 	bl	8007ac0 <_free_r>
 8007a18:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007a1a:	b111      	cbz	r1, 8007a22 <_reclaim_reent+0x82>
 8007a1c:	4620      	mov	r0, r4
 8007a1e:	f000 f84f 	bl	8007ac0 <_free_r>
 8007a22:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007a24:	b111      	cbz	r1, 8007a2c <_reclaim_reent+0x8c>
 8007a26:	4620      	mov	r0, r4
 8007a28:	f000 f84a 	bl	8007ac0 <_free_r>
 8007a2c:	6a23      	ldr	r3, [r4, #32]
 8007a2e:	b14b      	cbz	r3, 8007a44 <_reclaim_reent+0xa4>
 8007a30:	4620      	mov	r0, r4
 8007a32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007a36:	4718      	bx	r3
 8007a38:	680e      	ldr	r6, [r1, #0]
 8007a3a:	4620      	mov	r0, r4
 8007a3c:	f000 f840 	bl	8007ac0 <_free_r>
 8007a40:	4631      	mov	r1, r6
 8007a42:	e7bb      	b.n	80079bc <_reclaim_reent+0x1c>
 8007a44:	bd70      	pop	{r4, r5, r6, pc}
 8007a46:	bf00      	nop
 8007a48:	20000010 	.word	0x20000010

08007a4c <__errno>:
 8007a4c:	4b01      	ldr	r3, [pc, #4]	@ (8007a54 <__errno+0x8>)
 8007a4e:	6818      	ldr	r0, [r3, #0]
 8007a50:	4770      	bx	lr
 8007a52:	bf00      	nop
 8007a54:	20000010 	.word	0x20000010

08007a58 <__libc_init_array>:
 8007a58:	b570      	push	{r4, r5, r6, lr}
 8007a5a:	4d0d      	ldr	r5, [pc, #52]	@ (8007a90 <__libc_init_array+0x38>)
 8007a5c:	4c0d      	ldr	r4, [pc, #52]	@ (8007a94 <__libc_init_array+0x3c>)
 8007a5e:	1b64      	subs	r4, r4, r5
 8007a60:	10a4      	asrs	r4, r4, #2
 8007a62:	2600      	movs	r6, #0
 8007a64:	42a6      	cmp	r6, r4
 8007a66:	d109      	bne.n	8007a7c <__libc_init_array+0x24>
 8007a68:	4d0b      	ldr	r5, [pc, #44]	@ (8007a98 <__libc_init_array+0x40>)
 8007a6a:	4c0c      	ldr	r4, [pc, #48]	@ (8007a9c <__libc_init_array+0x44>)
 8007a6c:	f000 fc66 	bl	800833c <_init>
 8007a70:	1b64      	subs	r4, r4, r5
 8007a72:	10a4      	asrs	r4, r4, #2
 8007a74:	2600      	movs	r6, #0
 8007a76:	42a6      	cmp	r6, r4
 8007a78:	d105      	bne.n	8007a86 <__libc_init_array+0x2e>
 8007a7a:	bd70      	pop	{r4, r5, r6, pc}
 8007a7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a80:	4798      	blx	r3
 8007a82:	3601      	adds	r6, #1
 8007a84:	e7ee      	b.n	8007a64 <__libc_init_array+0xc>
 8007a86:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a8a:	4798      	blx	r3
 8007a8c:	3601      	adds	r6, #1
 8007a8e:	e7f2      	b.n	8007a76 <__libc_init_array+0x1e>
 8007a90:	0800844c 	.word	0x0800844c
 8007a94:	0800844c 	.word	0x0800844c
 8007a98:	0800844c 	.word	0x0800844c
 8007a9c:	08008450 	.word	0x08008450

08007aa0 <__retarget_lock_acquire_recursive>:
 8007aa0:	4770      	bx	lr

08007aa2 <__retarget_lock_release_recursive>:
 8007aa2:	4770      	bx	lr

08007aa4 <memcpy>:
 8007aa4:	440a      	add	r2, r1
 8007aa6:	4291      	cmp	r1, r2
 8007aa8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007aac:	d100      	bne.n	8007ab0 <memcpy+0xc>
 8007aae:	4770      	bx	lr
 8007ab0:	b510      	push	{r4, lr}
 8007ab2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ab6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007aba:	4291      	cmp	r1, r2
 8007abc:	d1f9      	bne.n	8007ab2 <memcpy+0xe>
 8007abe:	bd10      	pop	{r4, pc}

08007ac0 <_free_r>:
 8007ac0:	b538      	push	{r3, r4, r5, lr}
 8007ac2:	4605      	mov	r5, r0
 8007ac4:	2900      	cmp	r1, #0
 8007ac6:	d041      	beq.n	8007b4c <_free_r+0x8c>
 8007ac8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007acc:	1f0c      	subs	r4, r1, #4
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	bfb8      	it	lt
 8007ad2:	18e4      	addlt	r4, r4, r3
 8007ad4:	f000 fbc6 	bl	8008264 <__malloc_lock>
 8007ad8:	4a1d      	ldr	r2, [pc, #116]	@ (8007b50 <_free_r+0x90>)
 8007ada:	6813      	ldr	r3, [r2, #0]
 8007adc:	b933      	cbnz	r3, 8007aec <_free_r+0x2c>
 8007ade:	6063      	str	r3, [r4, #4]
 8007ae0:	6014      	str	r4, [r2, #0]
 8007ae2:	4628      	mov	r0, r5
 8007ae4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ae8:	f000 bbc2 	b.w	8008270 <__malloc_unlock>
 8007aec:	42a3      	cmp	r3, r4
 8007aee:	d908      	bls.n	8007b02 <_free_r+0x42>
 8007af0:	6820      	ldr	r0, [r4, #0]
 8007af2:	1821      	adds	r1, r4, r0
 8007af4:	428b      	cmp	r3, r1
 8007af6:	bf01      	itttt	eq
 8007af8:	6819      	ldreq	r1, [r3, #0]
 8007afa:	685b      	ldreq	r3, [r3, #4]
 8007afc:	1809      	addeq	r1, r1, r0
 8007afe:	6021      	streq	r1, [r4, #0]
 8007b00:	e7ed      	b.n	8007ade <_free_r+0x1e>
 8007b02:	461a      	mov	r2, r3
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	b10b      	cbz	r3, 8007b0c <_free_r+0x4c>
 8007b08:	42a3      	cmp	r3, r4
 8007b0a:	d9fa      	bls.n	8007b02 <_free_r+0x42>
 8007b0c:	6811      	ldr	r1, [r2, #0]
 8007b0e:	1850      	adds	r0, r2, r1
 8007b10:	42a0      	cmp	r0, r4
 8007b12:	d10b      	bne.n	8007b2c <_free_r+0x6c>
 8007b14:	6820      	ldr	r0, [r4, #0]
 8007b16:	4401      	add	r1, r0
 8007b18:	1850      	adds	r0, r2, r1
 8007b1a:	4283      	cmp	r3, r0
 8007b1c:	6011      	str	r1, [r2, #0]
 8007b1e:	d1e0      	bne.n	8007ae2 <_free_r+0x22>
 8007b20:	6818      	ldr	r0, [r3, #0]
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	6053      	str	r3, [r2, #4]
 8007b26:	4408      	add	r0, r1
 8007b28:	6010      	str	r0, [r2, #0]
 8007b2a:	e7da      	b.n	8007ae2 <_free_r+0x22>
 8007b2c:	d902      	bls.n	8007b34 <_free_r+0x74>
 8007b2e:	230c      	movs	r3, #12
 8007b30:	602b      	str	r3, [r5, #0]
 8007b32:	e7d6      	b.n	8007ae2 <_free_r+0x22>
 8007b34:	6820      	ldr	r0, [r4, #0]
 8007b36:	1821      	adds	r1, r4, r0
 8007b38:	428b      	cmp	r3, r1
 8007b3a:	bf04      	itt	eq
 8007b3c:	6819      	ldreq	r1, [r3, #0]
 8007b3e:	685b      	ldreq	r3, [r3, #4]
 8007b40:	6063      	str	r3, [r4, #4]
 8007b42:	bf04      	itt	eq
 8007b44:	1809      	addeq	r1, r1, r0
 8007b46:	6021      	streq	r1, [r4, #0]
 8007b48:	6054      	str	r4, [r2, #4]
 8007b4a:	e7ca      	b.n	8007ae2 <_free_r+0x22>
 8007b4c:	bd38      	pop	{r3, r4, r5, pc}
 8007b4e:	bf00      	nop
 8007b50:	20004dcc 	.word	0x20004dcc

08007b54 <__ssputs_r>:
 8007b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b58:	688e      	ldr	r6, [r1, #8]
 8007b5a:	461f      	mov	r7, r3
 8007b5c:	42be      	cmp	r6, r7
 8007b5e:	680b      	ldr	r3, [r1, #0]
 8007b60:	4682      	mov	sl, r0
 8007b62:	460c      	mov	r4, r1
 8007b64:	4690      	mov	r8, r2
 8007b66:	d82d      	bhi.n	8007bc4 <__ssputs_r+0x70>
 8007b68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007b6c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007b70:	d026      	beq.n	8007bc0 <__ssputs_r+0x6c>
 8007b72:	6965      	ldr	r5, [r4, #20]
 8007b74:	6909      	ldr	r1, [r1, #16]
 8007b76:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007b7a:	eba3 0901 	sub.w	r9, r3, r1
 8007b7e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007b82:	1c7b      	adds	r3, r7, #1
 8007b84:	444b      	add	r3, r9
 8007b86:	106d      	asrs	r5, r5, #1
 8007b88:	429d      	cmp	r5, r3
 8007b8a:	bf38      	it	cc
 8007b8c:	461d      	movcc	r5, r3
 8007b8e:	0553      	lsls	r3, r2, #21
 8007b90:	d527      	bpl.n	8007be2 <__ssputs_r+0x8e>
 8007b92:	4629      	mov	r1, r5
 8007b94:	f000 f958 	bl	8007e48 <_malloc_r>
 8007b98:	4606      	mov	r6, r0
 8007b9a:	b360      	cbz	r0, 8007bf6 <__ssputs_r+0xa2>
 8007b9c:	6921      	ldr	r1, [r4, #16]
 8007b9e:	464a      	mov	r2, r9
 8007ba0:	f7ff ff80 	bl	8007aa4 <memcpy>
 8007ba4:	89a3      	ldrh	r3, [r4, #12]
 8007ba6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007baa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007bae:	81a3      	strh	r3, [r4, #12]
 8007bb0:	6126      	str	r6, [r4, #16]
 8007bb2:	6165      	str	r5, [r4, #20]
 8007bb4:	444e      	add	r6, r9
 8007bb6:	eba5 0509 	sub.w	r5, r5, r9
 8007bba:	6026      	str	r6, [r4, #0]
 8007bbc:	60a5      	str	r5, [r4, #8]
 8007bbe:	463e      	mov	r6, r7
 8007bc0:	42be      	cmp	r6, r7
 8007bc2:	d900      	bls.n	8007bc6 <__ssputs_r+0x72>
 8007bc4:	463e      	mov	r6, r7
 8007bc6:	6820      	ldr	r0, [r4, #0]
 8007bc8:	4632      	mov	r2, r6
 8007bca:	4641      	mov	r1, r8
 8007bcc:	f000 fb84 	bl	80082d8 <memmove>
 8007bd0:	68a3      	ldr	r3, [r4, #8]
 8007bd2:	1b9b      	subs	r3, r3, r6
 8007bd4:	60a3      	str	r3, [r4, #8]
 8007bd6:	6823      	ldr	r3, [r4, #0]
 8007bd8:	4433      	add	r3, r6
 8007bda:	6023      	str	r3, [r4, #0]
 8007bdc:	2000      	movs	r0, #0
 8007bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007be2:	462a      	mov	r2, r5
 8007be4:	f000 fb4a 	bl	800827c <_realloc_r>
 8007be8:	4606      	mov	r6, r0
 8007bea:	2800      	cmp	r0, #0
 8007bec:	d1e0      	bne.n	8007bb0 <__ssputs_r+0x5c>
 8007bee:	6921      	ldr	r1, [r4, #16]
 8007bf0:	4650      	mov	r0, sl
 8007bf2:	f7ff ff65 	bl	8007ac0 <_free_r>
 8007bf6:	230c      	movs	r3, #12
 8007bf8:	f8ca 3000 	str.w	r3, [sl]
 8007bfc:	89a3      	ldrh	r3, [r4, #12]
 8007bfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c02:	81a3      	strh	r3, [r4, #12]
 8007c04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007c08:	e7e9      	b.n	8007bde <__ssputs_r+0x8a>
	...

08007c0c <_svfiprintf_r>:
 8007c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c10:	4698      	mov	r8, r3
 8007c12:	898b      	ldrh	r3, [r1, #12]
 8007c14:	061b      	lsls	r3, r3, #24
 8007c16:	b09d      	sub	sp, #116	@ 0x74
 8007c18:	4607      	mov	r7, r0
 8007c1a:	460d      	mov	r5, r1
 8007c1c:	4614      	mov	r4, r2
 8007c1e:	d510      	bpl.n	8007c42 <_svfiprintf_r+0x36>
 8007c20:	690b      	ldr	r3, [r1, #16]
 8007c22:	b973      	cbnz	r3, 8007c42 <_svfiprintf_r+0x36>
 8007c24:	2140      	movs	r1, #64	@ 0x40
 8007c26:	f000 f90f 	bl	8007e48 <_malloc_r>
 8007c2a:	6028      	str	r0, [r5, #0]
 8007c2c:	6128      	str	r0, [r5, #16]
 8007c2e:	b930      	cbnz	r0, 8007c3e <_svfiprintf_r+0x32>
 8007c30:	230c      	movs	r3, #12
 8007c32:	603b      	str	r3, [r7, #0]
 8007c34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007c38:	b01d      	add	sp, #116	@ 0x74
 8007c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c3e:	2340      	movs	r3, #64	@ 0x40
 8007c40:	616b      	str	r3, [r5, #20]
 8007c42:	2300      	movs	r3, #0
 8007c44:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c46:	2320      	movs	r3, #32
 8007c48:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007c4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c50:	2330      	movs	r3, #48	@ 0x30
 8007c52:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007df0 <_svfiprintf_r+0x1e4>
 8007c56:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007c5a:	f04f 0901 	mov.w	r9, #1
 8007c5e:	4623      	mov	r3, r4
 8007c60:	469a      	mov	sl, r3
 8007c62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c66:	b10a      	cbz	r2, 8007c6c <_svfiprintf_r+0x60>
 8007c68:	2a25      	cmp	r2, #37	@ 0x25
 8007c6a:	d1f9      	bne.n	8007c60 <_svfiprintf_r+0x54>
 8007c6c:	ebba 0b04 	subs.w	fp, sl, r4
 8007c70:	d00b      	beq.n	8007c8a <_svfiprintf_r+0x7e>
 8007c72:	465b      	mov	r3, fp
 8007c74:	4622      	mov	r2, r4
 8007c76:	4629      	mov	r1, r5
 8007c78:	4638      	mov	r0, r7
 8007c7a:	f7ff ff6b 	bl	8007b54 <__ssputs_r>
 8007c7e:	3001      	adds	r0, #1
 8007c80:	f000 80a7 	beq.w	8007dd2 <_svfiprintf_r+0x1c6>
 8007c84:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007c86:	445a      	add	r2, fp
 8007c88:	9209      	str	r2, [sp, #36]	@ 0x24
 8007c8a:	f89a 3000 	ldrb.w	r3, [sl]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	f000 809f 	beq.w	8007dd2 <_svfiprintf_r+0x1c6>
 8007c94:	2300      	movs	r3, #0
 8007c96:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007c9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c9e:	f10a 0a01 	add.w	sl, sl, #1
 8007ca2:	9304      	str	r3, [sp, #16]
 8007ca4:	9307      	str	r3, [sp, #28]
 8007ca6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007caa:	931a      	str	r3, [sp, #104]	@ 0x68
 8007cac:	4654      	mov	r4, sl
 8007cae:	2205      	movs	r2, #5
 8007cb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cb4:	484e      	ldr	r0, [pc, #312]	@ (8007df0 <_svfiprintf_r+0x1e4>)
 8007cb6:	f7f8 fa93 	bl	80001e0 <memchr>
 8007cba:	9a04      	ldr	r2, [sp, #16]
 8007cbc:	b9d8      	cbnz	r0, 8007cf6 <_svfiprintf_r+0xea>
 8007cbe:	06d0      	lsls	r0, r2, #27
 8007cc0:	bf44      	itt	mi
 8007cc2:	2320      	movmi	r3, #32
 8007cc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007cc8:	0711      	lsls	r1, r2, #28
 8007cca:	bf44      	itt	mi
 8007ccc:	232b      	movmi	r3, #43	@ 0x2b
 8007cce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007cd2:	f89a 3000 	ldrb.w	r3, [sl]
 8007cd6:	2b2a      	cmp	r3, #42	@ 0x2a
 8007cd8:	d015      	beq.n	8007d06 <_svfiprintf_r+0xfa>
 8007cda:	9a07      	ldr	r2, [sp, #28]
 8007cdc:	4654      	mov	r4, sl
 8007cde:	2000      	movs	r0, #0
 8007ce0:	f04f 0c0a 	mov.w	ip, #10
 8007ce4:	4621      	mov	r1, r4
 8007ce6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007cea:	3b30      	subs	r3, #48	@ 0x30
 8007cec:	2b09      	cmp	r3, #9
 8007cee:	d94b      	bls.n	8007d88 <_svfiprintf_r+0x17c>
 8007cf0:	b1b0      	cbz	r0, 8007d20 <_svfiprintf_r+0x114>
 8007cf2:	9207      	str	r2, [sp, #28]
 8007cf4:	e014      	b.n	8007d20 <_svfiprintf_r+0x114>
 8007cf6:	eba0 0308 	sub.w	r3, r0, r8
 8007cfa:	fa09 f303 	lsl.w	r3, r9, r3
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	9304      	str	r3, [sp, #16]
 8007d02:	46a2      	mov	sl, r4
 8007d04:	e7d2      	b.n	8007cac <_svfiprintf_r+0xa0>
 8007d06:	9b03      	ldr	r3, [sp, #12]
 8007d08:	1d19      	adds	r1, r3, #4
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	9103      	str	r1, [sp, #12]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	bfbb      	ittet	lt
 8007d12:	425b      	neglt	r3, r3
 8007d14:	f042 0202 	orrlt.w	r2, r2, #2
 8007d18:	9307      	strge	r3, [sp, #28]
 8007d1a:	9307      	strlt	r3, [sp, #28]
 8007d1c:	bfb8      	it	lt
 8007d1e:	9204      	strlt	r2, [sp, #16]
 8007d20:	7823      	ldrb	r3, [r4, #0]
 8007d22:	2b2e      	cmp	r3, #46	@ 0x2e
 8007d24:	d10a      	bne.n	8007d3c <_svfiprintf_r+0x130>
 8007d26:	7863      	ldrb	r3, [r4, #1]
 8007d28:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d2a:	d132      	bne.n	8007d92 <_svfiprintf_r+0x186>
 8007d2c:	9b03      	ldr	r3, [sp, #12]
 8007d2e:	1d1a      	adds	r2, r3, #4
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	9203      	str	r2, [sp, #12]
 8007d34:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007d38:	3402      	adds	r4, #2
 8007d3a:	9305      	str	r3, [sp, #20]
 8007d3c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007e00 <_svfiprintf_r+0x1f4>
 8007d40:	7821      	ldrb	r1, [r4, #0]
 8007d42:	2203      	movs	r2, #3
 8007d44:	4650      	mov	r0, sl
 8007d46:	f7f8 fa4b 	bl	80001e0 <memchr>
 8007d4a:	b138      	cbz	r0, 8007d5c <_svfiprintf_r+0x150>
 8007d4c:	9b04      	ldr	r3, [sp, #16]
 8007d4e:	eba0 000a 	sub.w	r0, r0, sl
 8007d52:	2240      	movs	r2, #64	@ 0x40
 8007d54:	4082      	lsls	r2, r0
 8007d56:	4313      	orrs	r3, r2
 8007d58:	3401      	adds	r4, #1
 8007d5a:	9304      	str	r3, [sp, #16]
 8007d5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d60:	4824      	ldr	r0, [pc, #144]	@ (8007df4 <_svfiprintf_r+0x1e8>)
 8007d62:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007d66:	2206      	movs	r2, #6
 8007d68:	f7f8 fa3a 	bl	80001e0 <memchr>
 8007d6c:	2800      	cmp	r0, #0
 8007d6e:	d036      	beq.n	8007dde <_svfiprintf_r+0x1d2>
 8007d70:	4b21      	ldr	r3, [pc, #132]	@ (8007df8 <_svfiprintf_r+0x1ec>)
 8007d72:	bb1b      	cbnz	r3, 8007dbc <_svfiprintf_r+0x1b0>
 8007d74:	9b03      	ldr	r3, [sp, #12]
 8007d76:	3307      	adds	r3, #7
 8007d78:	f023 0307 	bic.w	r3, r3, #7
 8007d7c:	3308      	adds	r3, #8
 8007d7e:	9303      	str	r3, [sp, #12]
 8007d80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d82:	4433      	add	r3, r6
 8007d84:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d86:	e76a      	b.n	8007c5e <_svfiprintf_r+0x52>
 8007d88:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d8c:	460c      	mov	r4, r1
 8007d8e:	2001      	movs	r0, #1
 8007d90:	e7a8      	b.n	8007ce4 <_svfiprintf_r+0xd8>
 8007d92:	2300      	movs	r3, #0
 8007d94:	3401      	adds	r4, #1
 8007d96:	9305      	str	r3, [sp, #20]
 8007d98:	4619      	mov	r1, r3
 8007d9a:	f04f 0c0a 	mov.w	ip, #10
 8007d9e:	4620      	mov	r0, r4
 8007da0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007da4:	3a30      	subs	r2, #48	@ 0x30
 8007da6:	2a09      	cmp	r2, #9
 8007da8:	d903      	bls.n	8007db2 <_svfiprintf_r+0x1a6>
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d0c6      	beq.n	8007d3c <_svfiprintf_r+0x130>
 8007dae:	9105      	str	r1, [sp, #20]
 8007db0:	e7c4      	b.n	8007d3c <_svfiprintf_r+0x130>
 8007db2:	fb0c 2101 	mla	r1, ip, r1, r2
 8007db6:	4604      	mov	r4, r0
 8007db8:	2301      	movs	r3, #1
 8007dba:	e7f0      	b.n	8007d9e <_svfiprintf_r+0x192>
 8007dbc:	ab03      	add	r3, sp, #12
 8007dbe:	9300      	str	r3, [sp, #0]
 8007dc0:	462a      	mov	r2, r5
 8007dc2:	4b0e      	ldr	r3, [pc, #56]	@ (8007dfc <_svfiprintf_r+0x1f0>)
 8007dc4:	a904      	add	r1, sp, #16
 8007dc6:	4638      	mov	r0, r7
 8007dc8:	f3af 8000 	nop.w
 8007dcc:	1c42      	adds	r2, r0, #1
 8007dce:	4606      	mov	r6, r0
 8007dd0:	d1d6      	bne.n	8007d80 <_svfiprintf_r+0x174>
 8007dd2:	89ab      	ldrh	r3, [r5, #12]
 8007dd4:	065b      	lsls	r3, r3, #25
 8007dd6:	f53f af2d 	bmi.w	8007c34 <_svfiprintf_r+0x28>
 8007dda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007ddc:	e72c      	b.n	8007c38 <_svfiprintf_r+0x2c>
 8007dde:	ab03      	add	r3, sp, #12
 8007de0:	9300      	str	r3, [sp, #0]
 8007de2:	462a      	mov	r2, r5
 8007de4:	4b05      	ldr	r3, [pc, #20]	@ (8007dfc <_svfiprintf_r+0x1f0>)
 8007de6:	a904      	add	r1, sp, #16
 8007de8:	4638      	mov	r0, r7
 8007dea:	f000 f91b 	bl	8008024 <_printf_i>
 8007dee:	e7ed      	b.n	8007dcc <_svfiprintf_r+0x1c0>
 8007df0:	08008410 	.word	0x08008410
 8007df4:	0800841a 	.word	0x0800841a
 8007df8:	00000000 	.word	0x00000000
 8007dfc:	08007b55 	.word	0x08007b55
 8007e00:	08008416 	.word	0x08008416

08007e04 <sbrk_aligned>:
 8007e04:	b570      	push	{r4, r5, r6, lr}
 8007e06:	4e0f      	ldr	r6, [pc, #60]	@ (8007e44 <sbrk_aligned+0x40>)
 8007e08:	460c      	mov	r4, r1
 8007e0a:	6831      	ldr	r1, [r6, #0]
 8007e0c:	4605      	mov	r5, r0
 8007e0e:	b911      	cbnz	r1, 8007e16 <sbrk_aligned+0x12>
 8007e10:	f000 fa7c 	bl	800830c <_sbrk_r>
 8007e14:	6030      	str	r0, [r6, #0]
 8007e16:	4621      	mov	r1, r4
 8007e18:	4628      	mov	r0, r5
 8007e1a:	f000 fa77 	bl	800830c <_sbrk_r>
 8007e1e:	1c43      	adds	r3, r0, #1
 8007e20:	d103      	bne.n	8007e2a <sbrk_aligned+0x26>
 8007e22:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007e26:	4620      	mov	r0, r4
 8007e28:	bd70      	pop	{r4, r5, r6, pc}
 8007e2a:	1cc4      	adds	r4, r0, #3
 8007e2c:	f024 0403 	bic.w	r4, r4, #3
 8007e30:	42a0      	cmp	r0, r4
 8007e32:	d0f8      	beq.n	8007e26 <sbrk_aligned+0x22>
 8007e34:	1a21      	subs	r1, r4, r0
 8007e36:	4628      	mov	r0, r5
 8007e38:	f000 fa68 	bl	800830c <_sbrk_r>
 8007e3c:	3001      	adds	r0, #1
 8007e3e:	d1f2      	bne.n	8007e26 <sbrk_aligned+0x22>
 8007e40:	e7ef      	b.n	8007e22 <sbrk_aligned+0x1e>
 8007e42:	bf00      	nop
 8007e44:	20004dc8 	.word	0x20004dc8

08007e48 <_malloc_r>:
 8007e48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e4c:	1ccd      	adds	r5, r1, #3
 8007e4e:	f025 0503 	bic.w	r5, r5, #3
 8007e52:	3508      	adds	r5, #8
 8007e54:	2d0c      	cmp	r5, #12
 8007e56:	bf38      	it	cc
 8007e58:	250c      	movcc	r5, #12
 8007e5a:	2d00      	cmp	r5, #0
 8007e5c:	4606      	mov	r6, r0
 8007e5e:	db01      	blt.n	8007e64 <_malloc_r+0x1c>
 8007e60:	42a9      	cmp	r1, r5
 8007e62:	d904      	bls.n	8007e6e <_malloc_r+0x26>
 8007e64:	230c      	movs	r3, #12
 8007e66:	6033      	str	r3, [r6, #0]
 8007e68:	2000      	movs	r0, #0
 8007e6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e6e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007f44 <_malloc_r+0xfc>
 8007e72:	f000 f9f7 	bl	8008264 <__malloc_lock>
 8007e76:	f8d8 3000 	ldr.w	r3, [r8]
 8007e7a:	461c      	mov	r4, r3
 8007e7c:	bb44      	cbnz	r4, 8007ed0 <_malloc_r+0x88>
 8007e7e:	4629      	mov	r1, r5
 8007e80:	4630      	mov	r0, r6
 8007e82:	f7ff ffbf 	bl	8007e04 <sbrk_aligned>
 8007e86:	1c43      	adds	r3, r0, #1
 8007e88:	4604      	mov	r4, r0
 8007e8a:	d158      	bne.n	8007f3e <_malloc_r+0xf6>
 8007e8c:	f8d8 4000 	ldr.w	r4, [r8]
 8007e90:	4627      	mov	r7, r4
 8007e92:	2f00      	cmp	r7, #0
 8007e94:	d143      	bne.n	8007f1e <_malloc_r+0xd6>
 8007e96:	2c00      	cmp	r4, #0
 8007e98:	d04b      	beq.n	8007f32 <_malloc_r+0xea>
 8007e9a:	6823      	ldr	r3, [r4, #0]
 8007e9c:	4639      	mov	r1, r7
 8007e9e:	4630      	mov	r0, r6
 8007ea0:	eb04 0903 	add.w	r9, r4, r3
 8007ea4:	f000 fa32 	bl	800830c <_sbrk_r>
 8007ea8:	4581      	cmp	r9, r0
 8007eaa:	d142      	bne.n	8007f32 <_malloc_r+0xea>
 8007eac:	6821      	ldr	r1, [r4, #0]
 8007eae:	1a6d      	subs	r5, r5, r1
 8007eb0:	4629      	mov	r1, r5
 8007eb2:	4630      	mov	r0, r6
 8007eb4:	f7ff ffa6 	bl	8007e04 <sbrk_aligned>
 8007eb8:	3001      	adds	r0, #1
 8007eba:	d03a      	beq.n	8007f32 <_malloc_r+0xea>
 8007ebc:	6823      	ldr	r3, [r4, #0]
 8007ebe:	442b      	add	r3, r5
 8007ec0:	6023      	str	r3, [r4, #0]
 8007ec2:	f8d8 3000 	ldr.w	r3, [r8]
 8007ec6:	685a      	ldr	r2, [r3, #4]
 8007ec8:	bb62      	cbnz	r2, 8007f24 <_malloc_r+0xdc>
 8007eca:	f8c8 7000 	str.w	r7, [r8]
 8007ece:	e00f      	b.n	8007ef0 <_malloc_r+0xa8>
 8007ed0:	6822      	ldr	r2, [r4, #0]
 8007ed2:	1b52      	subs	r2, r2, r5
 8007ed4:	d420      	bmi.n	8007f18 <_malloc_r+0xd0>
 8007ed6:	2a0b      	cmp	r2, #11
 8007ed8:	d917      	bls.n	8007f0a <_malloc_r+0xc2>
 8007eda:	1961      	adds	r1, r4, r5
 8007edc:	42a3      	cmp	r3, r4
 8007ede:	6025      	str	r5, [r4, #0]
 8007ee0:	bf18      	it	ne
 8007ee2:	6059      	strne	r1, [r3, #4]
 8007ee4:	6863      	ldr	r3, [r4, #4]
 8007ee6:	bf08      	it	eq
 8007ee8:	f8c8 1000 	streq.w	r1, [r8]
 8007eec:	5162      	str	r2, [r4, r5]
 8007eee:	604b      	str	r3, [r1, #4]
 8007ef0:	4630      	mov	r0, r6
 8007ef2:	f000 f9bd 	bl	8008270 <__malloc_unlock>
 8007ef6:	f104 000b 	add.w	r0, r4, #11
 8007efa:	1d23      	adds	r3, r4, #4
 8007efc:	f020 0007 	bic.w	r0, r0, #7
 8007f00:	1ac2      	subs	r2, r0, r3
 8007f02:	bf1c      	itt	ne
 8007f04:	1a1b      	subne	r3, r3, r0
 8007f06:	50a3      	strne	r3, [r4, r2]
 8007f08:	e7af      	b.n	8007e6a <_malloc_r+0x22>
 8007f0a:	6862      	ldr	r2, [r4, #4]
 8007f0c:	42a3      	cmp	r3, r4
 8007f0e:	bf0c      	ite	eq
 8007f10:	f8c8 2000 	streq.w	r2, [r8]
 8007f14:	605a      	strne	r2, [r3, #4]
 8007f16:	e7eb      	b.n	8007ef0 <_malloc_r+0xa8>
 8007f18:	4623      	mov	r3, r4
 8007f1a:	6864      	ldr	r4, [r4, #4]
 8007f1c:	e7ae      	b.n	8007e7c <_malloc_r+0x34>
 8007f1e:	463c      	mov	r4, r7
 8007f20:	687f      	ldr	r7, [r7, #4]
 8007f22:	e7b6      	b.n	8007e92 <_malloc_r+0x4a>
 8007f24:	461a      	mov	r2, r3
 8007f26:	685b      	ldr	r3, [r3, #4]
 8007f28:	42a3      	cmp	r3, r4
 8007f2a:	d1fb      	bne.n	8007f24 <_malloc_r+0xdc>
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	6053      	str	r3, [r2, #4]
 8007f30:	e7de      	b.n	8007ef0 <_malloc_r+0xa8>
 8007f32:	230c      	movs	r3, #12
 8007f34:	6033      	str	r3, [r6, #0]
 8007f36:	4630      	mov	r0, r6
 8007f38:	f000 f99a 	bl	8008270 <__malloc_unlock>
 8007f3c:	e794      	b.n	8007e68 <_malloc_r+0x20>
 8007f3e:	6005      	str	r5, [r0, #0]
 8007f40:	e7d6      	b.n	8007ef0 <_malloc_r+0xa8>
 8007f42:	bf00      	nop
 8007f44:	20004dcc 	.word	0x20004dcc

08007f48 <_printf_common>:
 8007f48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f4c:	4616      	mov	r6, r2
 8007f4e:	4698      	mov	r8, r3
 8007f50:	688a      	ldr	r2, [r1, #8]
 8007f52:	690b      	ldr	r3, [r1, #16]
 8007f54:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	bfb8      	it	lt
 8007f5c:	4613      	movlt	r3, r2
 8007f5e:	6033      	str	r3, [r6, #0]
 8007f60:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007f64:	4607      	mov	r7, r0
 8007f66:	460c      	mov	r4, r1
 8007f68:	b10a      	cbz	r2, 8007f6e <_printf_common+0x26>
 8007f6a:	3301      	adds	r3, #1
 8007f6c:	6033      	str	r3, [r6, #0]
 8007f6e:	6823      	ldr	r3, [r4, #0]
 8007f70:	0699      	lsls	r1, r3, #26
 8007f72:	bf42      	ittt	mi
 8007f74:	6833      	ldrmi	r3, [r6, #0]
 8007f76:	3302      	addmi	r3, #2
 8007f78:	6033      	strmi	r3, [r6, #0]
 8007f7a:	6825      	ldr	r5, [r4, #0]
 8007f7c:	f015 0506 	ands.w	r5, r5, #6
 8007f80:	d106      	bne.n	8007f90 <_printf_common+0x48>
 8007f82:	f104 0a19 	add.w	sl, r4, #25
 8007f86:	68e3      	ldr	r3, [r4, #12]
 8007f88:	6832      	ldr	r2, [r6, #0]
 8007f8a:	1a9b      	subs	r3, r3, r2
 8007f8c:	42ab      	cmp	r3, r5
 8007f8e:	dc26      	bgt.n	8007fde <_printf_common+0x96>
 8007f90:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007f94:	6822      	ldr	r2, [r4, #0]
 8007f96:	3b00      	subs	r3, #0
 8007f98:	bf18      	it	ne
 8007f9a:	2301      	movne	r3, #1
 8007f9c:	0692      	lsls	r2, r2, #26
 8007f9e:	d42b      	bmi.n	8007ff8 <_printf_common+0xb0>
 8007fa0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007fa4:	4641      	mov	r1, r8
 8007fa6:	4638      	mov	r0, r7
 8007fa8:	47c8      	blx	r9
 8007faa:	3001      	adds	r0, #1
 8007fac:	d01e      	beq.n	8007fec <_printf_common+0xa4>
 8007fae:	6823      	ldr	r3, [r4, #0]
 8007fb0:	6922      	ldr	r2, [r4, #16]
 8007fb2:	f003 0306 	and.w	r3, r3, #6
 8007fb6:	2b04      	cmp	r3, #4
 8007fb8:	bf02      	ittt	eq
 8007fba:	68e5      	ldreq	r5, [r4, #12]
 8007fbc:	6833      	ldreq	r3, [r6, #0]
 8007fbe:	1aed      	subeq	r5, r5, r3
 8007fc0:	68a3      	ldr	r3, [r4, #8]
 8007fc2:	bf0c      	ite	eq
 8007fc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007fc8:	2500      	movne	r5, #0
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	bfc4      	itt	gt
 8007fce:	1a9b      	subgt	r3, r3, r2
 8007fd0:	18ed      	addgt	r5, r5, r3
 8007fd2:	2600      	movs	r6, #0
 8007fd4:	341a      	adds	r4, #26
 8007fd6:	42b5      	cmp	r5, r6
 8007fd8:	d11a      	bne.n	8008010 <_printf_common+0xc8>
 8007fda:	2000      	movs	r0, #0
 8007fdc:	e008      	b.n	8007ff0 <_printf_common+0xa8>
 8007fde:	2301      	movs	r3, #1
 8007fe0:	4652      	mov	r2, sl
 8007fe2:	4641      	mov	r1, r8
 8007fe4:	4638      	mov	r0, r7
 8007fe6:	47c8      	blx	r9
 8007fe8:	3001      	adds	r0, #1
 8007fea:	d103      	bne.n	8007ff4 <_printf_common+0xac>
 8007fec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007ff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ff4:	3501      	adds	r5, #1
 8007ff6:	e7c6      	b.n	8007f86 <_printf_common+0x3e>
 8007ff8:	18e1      	adds	r1, r4, r3
 8007ffa:	1c5a      	adds	r2, r3, #1
 8007ffc:	2030      	movs	r0, #48	@ 0x30
 8007ffe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008002:	4422      	add	r2, r4
 8008004:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008008:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800800c:	3302      	adds	r3, #2
 800800e:	e7c7      	b.n	8007fa0 <_printf_common+0x58>
 8008010:	2301      	movs	r3, #1
 8008012:	4622      	mov	r2, r4
 8008014:	4641      	mov	r1, r8
 8008016:	4638      	mov	r0, r7
 8008018:	47c8      	blx	r9
 800801a:	3001      	adds	r0, #1
 800801c:	d0e6      	beq.n	8007fec <_printf_common+0xa4>
 800801e:	3601      	adds	r6, #1
 8008020:	e7d9      	b.n	8007fd6 <_printf_common+0x8e>
	...

08008024 <_printf_i>:
 8008024:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008028:	7e0f      	ldrb	r7, [r1, #24]
 800802a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800802c:	2f78      	cmp	r7, #120	@ 0x78
 800802e:	4691      	mov	r9, r2
 8008030:	4680      	mov	r8, r0
 8008032:	460c      	mov	r4, r1
 8008034:	469a      	mov	sl, r3
 8008036:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800803a:	d807      	bhi.n	800804c <_printf_i+0x28>
 800803c:	2f62      	cmp	r7, #98	@ 0x62
 800803e:	d80a      	bhi.n	8008056 <_printf_i+0x32>
 8008040:	2f00      	cmp	r7, #0
 8008042:	f000 80d2 	beq.w	80081ea <_printf_i+0x1c6>
 8008046:	2f58      	cmp	r7, #88	@ 0x58
 8008048:	f000 80b9 	beq.w	80081be <_printf_i+0x19a>
 800804c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008050:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008054:	e03a      	b.n	80080cc <_printf_i+0xa8>
 8008056:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800805a:	2b15      	cmp	r3, #21
 800805c:	d8f6      	bhi.n	800804c <_printf_i+0x28>
 800805e:	a101      	add	r1, pc, #4	@ (adr r1, 8008064 <_printf_i+0x40>)
 8008060:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008064:	080080bd 	.word	0x080080bd
 8008068:	080080d1 	.word	0x080080d1
 800806c:	0800804d 	.word	0x0800804d
 8008070:	0800804d 	.word	0x0800804d
 8008074:	0800804d 	.word	0x0800804d
 8008078:	0800804d 	.word	0x0800804d
 800807c:	080080d1 	.word	0x080080d1
 8008080:	0800804d 	.word	0x0800804d
 8008084:	0800804d 	.word	0x0800804d
 8008088:	0800804d 	.word	0x0800804d
 800808c:	0800804d 	.word	0x0800804d
 8008090:	080081d1 	.word	0x080081d1
 8008094:	080080fb 	.word	0x080080fb
 8008098:	0800818b 	.word	0x0800818b
 800809c:	0800804d 	.word	0x0800804d
 80080a0:	0800804d 	.word	0x0800804d
 80080a4:	080081f3 	.word	0x080081f3
 80080a8:	0800804d 	.word	0x0800804d
 80080ac:	080080fb 	.word	0x080080fb
 80080b0:	0800804d 	.word	0x0800804d
 80080b4:	0800804d 	.word	0x0800804d
 80080b8:	08008193 	.word	0x08008193
 80080bc:	6833      	ldr	r3, [r6, #0]
 80080be:	1d1a      	adds	r2, r3, #4
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	6032      	str	r2, [r6, #0]
 80080c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80080c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80080cc:	2301      	movs	r3, #1
 80080ce:	e09d      	b.n	800820c <_printf_i+0x1e8>
 80080d0:	6833      	ldr	r3, [r6, #0]
 80080d2:	6820      	ldr	r0, [r4, #0]
 80080d4:	1d19      	adds	r1, r3, #4
 80080d6:	6031      	str	r1, [r6, #0]
 80080d8:	0606      	lsls	r6, r0, #24
 80080da:	d501      	bpl.n	80080e0 <_printf_i+0xbc>
 80080dc:	681d      	ldr	r5, [r3, #0]
 80080de:	e003      	b.n	80080e8 <_printf_i+0xc4>
 80080e0:	0645      	lsls	r5, r0, #25
 80080e2:	d5fb      	bpl.n	80080dc <_printf_i+0xb8>
 80080e4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80080e8:	2d00      	cmp	r5, #0
 80080ea:	da03      	bge.n	80080f4 <_printf_i+0xd0>
 80080ec:	232d      	movs	r3, #45	@ 0x2d
 80080ee:	426d      	negs	r5, r5
 80080f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80080f4:	4859      	ldr	r0, [pc, #356]	@ (800825c <_printf_i+0x238>)
 80080f6:	230a      	movs	r3, #10
 80080f8:	e011      	b.n	800811e <_printf_i+0xfa>
 80080fa:	6821      	ldr	r1, [r4, #0]
 80080fc:	6833      	ldr	r3, [r6, #0]
 80080fe:	0608      	lsls	r0, r1, #24
 8008100:	f853 5b04 	ldr.w	r5, [r3], #4
 8008104:	d402      	bmi.n	800810c <_printf_i+0xe8>
 8008106:	0649      	lsls	r1, r1, #25
 8008108:	bf48      	it	mi
 800810a:	b2ad      	uxthmi	r5, r5
 800810c:	2f6f      	cmp	r7, #111	@ 0x6f
 800810e:	4853      	ldr	r0, [pc, #332]	@ (800825c <_printf_i+0x238>)
 8008110:	6033      	str	r3, [r6, #0]
 8008112:	bf14      	ite	ne
 8008114:	230a      	movne	r3, #10
 8008116:	2308      	moveq	r3, #8
 8008118:	2100      	movs	r1, #0
 800811a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800811e:	6866      	ldr	r6, [r4, #4]
 8008120:	60a6      	str	r6, [r4, #8]
 8008122:	2e00      	cmp	r6, #0
 8008124:	bfa2      	ittt	ge
 8008126:	6821      	ldrge	r1, [r4, #0]
 8008128:	f021 0104 	bicge.w	r1, r1, #4
 800812c:	6021      	strge	r1, [r4, #0]
 800812e:	b90d      	cbnz	r5, 8008134 <_printf_i+0x110>
 8008130:	2e00      	cmp	r6, #0
 8008132:	d04b      	beq.n	80081cc <_printf_i+0x1a8>
 8008134:	4616      	mov	r6, r2
 8008136:	fbb5 f1f3 	udiv	r1, r5, r3
 800813a:	fb03 5711 	mls	r7, r3, r1, r5
 800813e:	5dc7      	ldrb	r7, [r0, r7]
 8008140:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008144:	462f      	mov	r7, r5
 8008146:	42bb      	cmp	r3, r7
 8008148:	460d      	mov	r5, r1
 800814a:	d9f4      	bls.n	8008136 <_printf_i+0x112>
 800814c:	2b08      	cmp	r3, #8
 800814e:	d10b      	bne.n	8008168 <_printf_i+0x144>
 8008150:	6823      	ldr	r3, [r4, #0]
 8008152:	07df      	lsls	r7, r3, #31
 8008154:	d508      	bpl.n	8008168 <_printf_i+0x144>
 8008156:	6923      	ldr	r3, [r4, #16]
 8008158:	6861      	ldr	r1, [r4, #4]
 800815a:	4299      	cmp	r1, r3
 800815c:	bfde      	ittt	le
 800815e:	2330      	movle	r3, #48	@ 0x30
 8008160:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008164:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8008168:	1b92      	subs	r2, r2, r6
 800816a:	6122      	str	r2, [r4, #16]
 800816c:	f8cd a000 	str.w	sl, [sp]
 8008170:	464b      	mov	r3, r9
 8008172:	aa03      	add	r2, sp, #12
 8008174:	4621      	mov	r1, r4
 8008176:	4640      	mov	r0, r8
 8008178:	f7ff fee6 	bl	8007f48 <_printf_common>
 800817c:	3001      	adds	r0, #1
 800817e:	d14a      	bne.n	8008216 <_printf_i+0x1f2>
 8008180:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008184:	b004      	add	sp, #16
 8008186:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800818a:	6823      	ldr	r3, [r4, #0]
 800818c:	f043 0320 	orr.w	r3, r3, #32
 8008190:	6023      	str	r3, [r4, #0]
 8008192:	4833      	ldr	r0, [pc, #204]	@ (8008260 <_printf_i+0x23c>)
 8008194:	2778      	movs	r7, #120	@ 0x78
 8008196:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800819a:	6823      	ldr	r3, [r4, #0]
 800819c:	6831      	ldr	r1, [r6, #0]
 800819e:	061f      	lsls	r7, r3, #24
 80081a0:	f851 5b04 	ldr.w	r5, [r1], #4
 80081a4:	d402      	bmi.n	80081ac <_printf_i+0x188>
 80081a6:	065f      	lsls	r7, r3, #25
 80081a8:	bf48      	it	mi
 80081aa:	b2ad      	uxthmi	r5, r5
 80081ac:	6031      	str	r1, [r6, #0]
 80081ae:	07d9      	lsls	r1, r3, #31
 80081b0:	bf44      	itt	mi
 80081b2:	f043 0320 	orrmi.w	r3, r3, #32
 80081b6:	6023      	strmi	r3, [r4, #0]
 80081b8:	b11d      	cbz	r5, 80081c2 <_printf_i+0x19e>
 80081ba:	2310      	movs	r3, #16
 80081bc:	e7ac      	b.n	8008118 <_printf_i+0xf4>
 80081be:	4827      	ldr	r0, [pc, #156]	@ (800825c <_printf_i+0x238>)
 80081c0:	e7e9      	b.n	8008196 <_printf_i+0x172>
 80081c2:	6823      	ldr	r3, [r4, #0]
 80081c4:	f023 0320 	bic.w	r3, r3, #32
 80081c8:	6023      	str	r3, [r4, #0]
 80081ca:	e7f6      	b.n	80081ba <_printf_i+0x196>
 80081cc:	4616      	mov	r6, r2
 80081ce:	e7bd      	b.n	800814c <_printf_i+0x128>
 80081d0:	6833      	ldr	r3, [r6, #0]
 80081d2:	6825      	ldr	r5, [r4, #0]
 80081d4:	6961      	ldr	r1, [r4, #20]
 80081d6:	1d18      	adds	r0, r3, #4
 80081d8:	6030      	str	r0, [r6, #0]
 80081da:	062e      	lsls	r6, r5, #24
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	d501      	bpl.n	80081e4 <_printf_i+0x1c0>
 80081e0:	6019      	str	r1, [r3, #0]
 80081e2:	e002      	b.n	80081ea <_printf_i+0x1c6>
 80081e4:	0668      	lsls	r0, r5, #25
 80081e6:	d5fb      	bpl.n	80081e0 <_printf_i+0x1bc>
 80081e8:	8019      	strh	r1, [r3, #0]
 80081ea:	2300      	movs	r3, #0
 80081ec:	6123      	str	r3, [r4, #16]
 80081ee:	4616      	mov	r6, r2
 80081f0:	e7bc      	b.n	800816c <_printf_i+0x148>
 80081f2:	6833      	ldr	r3, [r6, #0]
 80081f4:	1d1a      	adds	r2, r3, #4
 80081f6:	6032      	str	r2, [r6, #0]
 80081f8:	681e      	ldr	r6, [r3, #0]
 80081fa:	6862      	ldr	r2, [r4, #4]
 80081fc:	2100      	movs	r1, #0
 80081fe:	4630      	mov	r0, r6
 8008200:	f7f7 ffee 	bl	80001e0 <memchr>
 8008204:	b108      	cbz	r0, 800820a <_printf_i+0x1e6>
 8008206:	1b80      	subs	r0, r0, r6
 8008208:	6060      	str	r0, [r4, #4]
 800820a:	6863      	ldr	r3, [r4, #4]
 800820c:	6123      	str	r3, [r4, #16]
 800820e:	2300      	movs	r3, #0
 8008210:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008214:	e7aa      	b.n	800816c <_printf_i+0x148>
 8008216:	6923      	ldr	r3, [r4, #16]
 8008218:	4632      	mov	r2, r6
 800821a:	4649      	mov	r1, r9
 800821c:	4640      	mov	r0, r8
 800821e:	47d0      	blx	sl
 8008220:	3001      	adds	r0, #1
 8008222:	d0ad      	beq.n	8008180 <_printf_i+0x15c>
 8008224:	6823      	ldr	r3, [r4, #0]
 8008226:	079b      	lsls	r3, r3, #30
 8008228:	d413      	bmi.n	8008252 <_printf_i+0x22e>
 800822a:	68e0      	ldr	r0, [r4, #12]
 800822c:	9b03      	ldr	r3, [sp, #12]
 800822e:	4298      	cmp	r0, r3
 8008230:	bfb8      	it	lt
 8008232:	4618      	movlt	r0, r3
 8008234:	e7a6      	b.n	8008184 <_printf_i+0x160>
 8008236:	2301      	movs	r3, #1
 8008238:	4632      	mov	r2, r6
 800823a:	4649      	mov	r1, r9
 800823c:	4640      	mov	r0, r8
 800823e:	47d0      	blx	sl
 8008240:	3001      	adds	r0, #1
 8008242:	d09d      	beq.n	8008180 <_printf_i+0x15c>
 8008244:	3501      	adds	r5, #1
 8008246:	68e3      	ldr	r3, [r4, #12]
 8008248:	9903      	ldr	r1, [sp, #12]
 800824a:	1a5b      	subs	r3, r3, r1
 800824c:	42ab      	cmp	r3, r5
 800824e:	dcf2      	bgt.n	8008236 <_printf_i+0x212>
 8008250:	e7eb      	b.n	800822a <_printf_i+0x206>
 8008252:	2500      	movs	r5, #0
 8008254:	f104 0619 	add.w	r6, r4, #25
 8008258:	e7f5      	b.n	8008246 <_printf_i+0x222>
 800825a:	bf00      	nop
 800825c:	08008421 	.word	0x08008421
 8008260:	08008432 	.word	0x08008432

08008264 <__malloc_lock>:
 8008264:	4801      	ldr	r0, [pc, #4]	@ (800826c <__malloc_lock+0x8>)
 8008266:	f7ff bc1b 	b.w	8007aa0 <__retarget_lock_acquire_recursive>
 800826a:	bf00      	nop
 800826c:	20004dc4 	.word	0x20004dc4

08008270 <__malloc_unlock>:
 8008270:	4801      	ldr	r0, [pc, #4]	@ (8008278 <__malloc_unlock+0x8>)
 8008272:	f7ff bc16 	b.w	8007aa2 <__retarget_lock_release_recursive>
 8008276:	bf00      	nop
 8008278:	20004dc4 	.word	0x20004dc4

0800827c <_realloc_r>:
 800827c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008280:	4680      	mov	r8, r0
 8008282:	4615      	mov	r5, r2
 8008284:	460c      	mov	r4, r1
 8008286:	b921      	cbnz	r1, 8008292 <_realloc_r+0x16>
 8008288:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800828c:	4611      	mov	r1, r2
 800828e:	f7ff bddb 	b.w	8007e48 <_malloc_r>
 8008292:	b92a      	cbnz	r2, 80082a0 <_realloc_r+0x24>
 8008294:	f7ff fc14 	bl	8007ac0 <_free_r>
 8008298:	2400      	movs	r4, #0
 800829a:	4620      	mov	r0, r4
 800829c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082a0:	f000 f844 	bl	800832c <_malloc_usable_size_r>
 80082a4:	4285      	cmp	r5, r0
 80082a6:	4606      	mov	r6, r0
 80082a8:	d802      	bhi.n	80082b0 <_realloc_r+0x34>
 80082aa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80082ae:	d8f4      	bhi.n	800829a <_realloc_r+0x1e>
 80082b0:	4629      	mov	r1, r5
 80082b2:	4640      	mov	r0, r8
 80082b4:	f7ff fdc8 	bl	8007e48 <_malloc_r>
 80082b8:	4607      	mov	r7, r0
 80082ba:	2800      	cmp	r0, #0
 80082bc:	d0ec      	beq.n	8008298 <_realloc_r+0x1c>
 80082be:	42b5      	cmp	r5, r6
 80082c0:	462a      	mov	r2, r5
 80082c2:	4621      	mov	r1, r4
 80082c4:	bf28      	it	cs
 80082c6:	4632      	movcs	r2, r6
 80082c8:	f7ff fbec 	bl	8007aa4 <memcpy>
 80082cc:	4621      	mov	r1, r4
 80082ce:	4640      	mov	r0, r8
 80082d0:	f7ff fbf6 	bl	8007ac0 <_free_r>
 80082d4:	463c      	mov	r4, r7
 80082d6:	e7e0      	b.n	800829a <_realloc_r+0x1e>

080082d8 <memmove>:
 80082d8:	4288      	cmp	r0, r1
 80082da:	b510      	push	{r4, lr}
 80082dc:	eb01 0402 	add.w	r4, r1, r2
 80082e0:	d902      	bls.n	80082e8 <memmove+0x10>
 80082e2:	4284      	cmp	r4, r0
 80082e4:	4623      	mov	r3, r4
 80082e6:	d807      	bhi.n	80082f8 <memmove+0x20>
 80082e8:	1e43      	subs	r3, r0, #1
 80082ea:	42a1      	cmp	r1, r4
 80082ec:	d008      	beq.n	8008300 <memmove+0x28>
 80082ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80082f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80082f6:	e7f8      	b.n	80082ea <memmove+0x12>
 80082f8:	4402      	add	r2, r0
 80082fa:	4601      	mov	r1, r0
 80082fc:	428a      	cmp	r2, r1
 80082fe:	d100      	bne.n	8008302 <memmove+0x2a>
 8008300:	bd10      	pop	{r4, pc}
 8008302:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008306:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800830a:	e7f7      	b.n	80082fc <memmove+0x24>

0800830c <_sbrk_r>:
 800830c:	b538      	push	{r3, r4, r5, lr}
 800830e:	4d06      	ldr	r5, [pc, #24]	@ (8008328 <_sbrk_r+0x1c>)
 8008310:	2300      	movs	r3, #0
 8008312:	4604      	mov	r4, r0
 8008314:	4608      	mov	r0, r1
 8008316:	602b      	str	r3, [r5, #0]
 8008318:	f7f9 f8a2 	bl	8001460 <_sbrk>
 800831c:	1c43      	adds	r3, r0, #1
 800831e:	d102      	bne.n	8008326 <_sbrk_r+0x1a>
 8008320:	682b      	ldr	r3, [r5, #0]
 8008322:	b103      	cbz	r3, 8008326 <_sbrk_r+0x1a>
 8008324:	6023      	str	r3, [r4, #0]
 8008326:	bd38      	pop	{r3, r4, r5, pc}
 8008328:	20004dc0 	.word	0x20004dc0

0800832c <_malloc_usable_size_r>:
 800832c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008330:	1f18      	subs	r0, r3, #4
 8008332:	2b00      	cmp	r3, #0
 8008334:	bfbc      	itt	lt
 8008336:	580b      	ldrlt	r3, [r1, r0]
 8008338:	18c0      	addlt	r0, r0, r3
 800833a:	4770      	bx	lr

0800833c <_init>:
 800833c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800833e:	bf00      	nop
 8008340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008342:	bc08      	pop	{r3}
 8008344:	469e      	mov	lr, r3
 8008346:	4770      	bx	lr

08008348 <_fini>:
 8008348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800834a:	bf00      	nop
 800834c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800834e:	bc08      	pop	{r3}
 8008350:	469e      	mov	lr, r3
 8008352:	4770      	bx	lr
