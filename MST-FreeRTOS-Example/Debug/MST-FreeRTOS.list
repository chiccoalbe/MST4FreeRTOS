
MST-FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009114  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  080092b4  080092b4  0000a2b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093b4  080093b4  0000b060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080093b4  080093b4  0000a3b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080093bc  080093bc  0000b060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093bc  080093bc  0000a3bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080093c0  080093c0  0000a3c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080093c4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004dd8  20000060  08009424  0000b060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004e38  08009424  0000be38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a6ac  00000000  00000000  0000b090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ab6  00000000  00000000  0002573c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015b8  00000000  00000000  000291f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010eb  00000000  00000000  0002a7b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000193e7  00000000  00000000  0002b89b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017cc5  00000000  00000000  00044c82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000996c3  00000000  00000000  0005c947  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f600a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060c4  00000000  00000000  000f6050  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  000fc114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800929c 	.word	0x0800929c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	0800929c 	.word	0x0800929c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <prvMSTSetupUSClock>:

#if(TESTING_STM32 == 1)
/*
 * Timer reference given from user and used by MST to count nanoseconds
 */
static float prvMSTSetupUSClock() {
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
	//set prescaler equal to MHz of clock
	//we have that f_step = 1Mhz and Tstep = 1us, this way we can count us
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80005b0:	4b0a      	ldr	r3, [pc, #40]	@ (80005dc <prvMSTSetupUSClock+0x30>)
 80005b2:	68db      	ldr	r3, [r3, #12]
 80005b4:	4a09      	ldr	r2, [pc, #36]	@ (80005dc <prvMSTSetupUSClock+0x30>)
 80005b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80005ba:	60d3      	str	r3, [r2, #12]
	DWT->CYCCNT = 0;
 80005bc:	4b08      	ldr	r3, [pc, #32]	@ (80005e0 <prvMSTSetupUSClock+0x34>)
 80005be:	2200      	movs	r2, #0
 80005c0:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80005c2:	4b07      	ldr	r3, [pc, #28]	@ (80005e0 <prvMSTSetupUSClock+0x34>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4a06      	ldr	r2, [pc, #24]	@ (80005e0 <prvMSTSetupUSClock+0x34>)
 80005c8:	f043 0301 	orr.w	r3, r3, #1
 80005cc:	6013      	str	r3, [r2, #0]
}
 80005ce:	bf00      	nop
 80005d0:	eeb0 0a67 	vmov.f32	s0, s15
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr
 80005dc:	e000edf0 	.word	0xe000edf0
 80005e0:	e0001000 	.word	0xe0001000

080005e4 <prvMSTGetUS>:

static uint32_t prvMSTGetUS() {
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
	uint32_t outUS = (DWT->CYCCNT / (24));
 80005ea:	4b07      	ldr	r3, [pc, #28]	@ (8000608 <prvMSTGetUS+0x24>)
 80005ec:	685b      	ldr	r3, [r3, #4]
 80005ee:	4a07      	ldr	r2, [pc, #28]	@ (800060c <prvMSTGetUS+0x28>)
 80005f0:	fba2 2303 	umull	r2, r3, r2, r3
 80005f4:	091b      	lsrs	r3, r3, #4
 80005f6:	607b      	str	r3, [r7, #4]
	return outUS;
 80005f8:	687b      	ldr	r3, [r7, #4]
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	370c      	adds	r7, #12
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	e0001000 	.word	0xe0001000
 800060c:	aaaaaaab 	.word	0xaaaaaaab

08000610 <prvPeriodicTaskCreate>:
#if(mst_schedSCHEDULING_POLICY == mst_schedSCHEDULING_EDF)
static BaseType_t prvAsmissionControlEDF(extTCB_t *);
float prvPeriodicTasksDensity = 0;
#endif

static BaseType_t prvPeriodicTaskCreate(extTCB_t *xFromTCB) {
 8000610:	b590      	push	{r4, r7, lr}
 8000612:	b087      	sub	sp, #28
 8000614:	af02      	add	r7, sp, #8
 8000616:	6078      	str	r0, [r7, #4]


	if(xFromTCB->pxCreatedTask == &SporadicServerHandle){
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800061c:	4a37      	ldr	r2, [pc, #220]	@ (80006fc <prvPeriodicTaskCreate+0xec>)
 800061e:	4293      	cmp	r3, r2
 8000620:	d117      	bne.n	8000652 <prvPeriodicTaskCreate+0x42>
		/*
		The periodic task passed is the sporadic server, it shall not
		pass the prvMSTPeriodicGenericJob but the prvMSTSporadicServerJob
		*/
	if (xTaskCreate(prvMSTSporadicGenericJob, xFromTCB->pcName,
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	6999      	ldr	r1, [r3, #24]
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	8b98      	ldrh	r0, [r3, #28]
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	6a1c      	ldr	r4, [r3, #32]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000632:	687a      	ldr	r2, [r7, #4]
 8000634:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8000636:	9201      	str	r2, [sp, #4]
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	4623      	mov	r3, r4
 800063c:	4602      	mov	r2, r0
 800063e:	4830      	ldr	r0, [pc, #192]	@ (8000700 <prvPeriodicTaskCreate+0xf0>)
 8000640:	f005 fb78 	bl	8005d34 <xTaskCreate>
 8000644:	4603      	mov	r3, r0
 8000646:	2b01      	cmp	r3, #1
 8000648:	d101      	bne.n	800064e <prvPeriodicTaskCreate+0x3e>
			xFromTCB->usStackDepth, xFromTCB->pvParameters,
			xFromTCB->uxPriority, xFromTCB->pxCreatedTask) == pdPASS) {
				/*
				No need for timer since called by aperiodic/sporadic task
				*/
				return pdPASS;
 800064a:	2301      	movs	r3, #1
 800064c:	e052      	b.n	80006f4 <prvPeriodicTaskCreate+0xe4>
			}else {
		return pdFAIL;
 800064e:	2300      	movs	r3, #0
 8000650:	e050      	b.n	80006f4 <prvPeriodicTaskCreate+0xe4>
	}
	}else{
		/*
		Generic periodic task
		*/
	if (xTaskCreate(prvMSTPeriodicGenericJob, xFromTCB->pcName,
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	6999      	ldr	r1, [r3, #24]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	8b98      	ldrh	r0, [r3, #28]
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	6a1c      	ldr	r4, [r3, #32]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000662:	687a      	ldr	r2, [r7, #4]
 8000664:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8000666:	9201      	str	r2, [sp, #4]
 8000668:	9300      	str	r3, [sp, #0]
 800066a:	4623      	mov	r3, r4
 800066c:	4602      	mov	r2, r0
 800066e:	4825      	ldr	r0, [pc, #148]	@ (8000704 <prvPeriodicTaskCreate+0xf4>)
 8000670:	f005 fb60 	bl	8005d34 <xTaskCreate>
 8000674:	4603      	mov	r3, r0
 8000676:	2b01      	cmp	r3, #1
 8000678:	d13b      	bne.n	80006f2 <prvPeriodicTaskCreate+0xe2>
		/*
		 Create the timer,
		 Handle the specific semaphore for the callback
		 */
		TimerHandle_t xTimer = xTimerCreate("generic periodic timer",
				pdMS_TO_TICKS(xFromTCB->xTaskPhase + xFromTCB->xTaskPeriod),
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000682:	4413      	add	r3, r2
 8000684:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000688:	fb02 f303 	mul.w	r3, r2, r3
		TimerHandle_t xTimer = xTimerCreate("generic periodic timer",
 800068c:	4a1e      	ldr	r2, [pc, #120]	@ (8000708 <prvPeriodicTaskCreate+0xf8>)
 800068e:	fba2 2303 	umull	r2, r3, r2, r3
 8000692:	0999      	lsrs	r1, r3, #6
				pdTRUE, (void*) (xFromTCB->pxCreatedTask),
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
		TimerHandle_t xTimer = xTimerCreate("generic periodic timer",
 8000698:	4a1c      	ldr	r2, [pc, #112]	@ (800070c <prvPeriodicTaskCreate+0xfc>)
 800069a:	9200      	str	r2, [sp, #0]
 800069c:	2201      	movs	r2, #1
 800069e:	481c      	ldr	r0, [pc, #112]	@ (8000710 <prvPeriodicTaskCreate+0x100>)
 80006a0:	f006 ff9a 	bl	80075d8 <xTimerCreate>
 80006a4:	60f8      	str	r0, [r7, #12]
				prvMSTPeriodicTimerCallback);
		xFromTCB->xTaskSpecificTimer = xTimer;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	68fa      	ldr	r2, [r7, #12]
 80006aa:	661a      	str	r2, [r3, #96]	@ 0x60
		configASSERT(xTimerStart(xTimer, 0) == pdPASS)
 80006ac:	f005 fedc 	bl	8006468 <xTaskGetTickCount>
 80006b0:	4602      	mov	r2, r0
 80006b2:	2300      	movs	r3, #0
 80006b4:	9300      	str	r3, [sp, #0]
 80006b6:	2300      	movs	r3, #0
 80006b8:	2101      	movs	r1, #1
 80006ba:	68f8      	ldr	r0, [r7, #12]
 80006bc:	f006 ffea 	bl	8007694 <xTimerGenericCommand>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b01      	cmp	r3, #1
 80006c4:	d00b      	beq.n	80006de <prvPeriodicTaskCreate+0xce>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80006c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80006ca:	f383 8811 	msr	BASEPRI, r3
 80006ce:	f3bf 8f6f 	isb	sy
 80006d2:	f3bf 8f4f 	dsb	sy
 80006d6:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80006d8:	bf00      	nop
 80006da:	bf00      	nop
 80006dc:	e7fd      	b.n	80006da <prvPeriodicTaskCreate+0xca>
#endif
		vTaskSetThreadLocalStoragePointer(*(xFromTCB->pxCreatedTask),
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	687a      	ldr	r2, [r7, #4]
 80006e6:	2100      	movs	r1, #0
 80006e8:	4618      	mov	r0, r3
 80006ea:	f006 f9ed 	bl	8006ac8 <vTaskSetThreadLocalStoragePointer>
				mstLOCAL_STORAGE_DATA_INDEX, xFromTCB);
		return pdPASS;
 80006ee:	2301      	movs	r3, #1
 80006f0:	e000      	b.n	80006f4 <prvPeriodicTaskCreate+0xe4>
	} else {
		return pdFAIL;
 80006f2:	2300      	movs	r3, #0
	}
}
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	3714      	adds	r7, #20
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd90      	pop	{r4, r7, pc}
 80006fc:	20000098 	.word	0x20000098
 8000700:	08000a41 	.word	0x08000a41
 8000704:	080007b9 	.word	0x080007b9
 8000708:	10624dd3 	.word	0x10624dd3
 800070c:	08000901 	.word	0x08000901
 8000710:	080092b4 	.word	0x080092b4

08000714 <vMSTPeriodicTaskCreate>:
TaskHandle_t vMSTPeriodicTaskCreate(TaskFunction_t pvJobCode,
		const char *pcName, uint16_t usStackDepth, void *pvParameters,
		UBaseType_t uxPriority, TaskHandle_t *pxCreatedTask,
		/* library-specific parameters */
		TickType_t xTaskPeriod, TickType_t xTaskDeadline, TickType_t xTaskPhase,
		TickType_t xTaskWCET) {
 8000714:	b580      	push	{r7, lr}
 8000716:	b0a4      	sub	sp, #144	@ 0x90
 8000718:	af00      	add	r7, sp, #0
 800071a:	60f8      	str	r0, [r7, #12]
 800071c:	60b9      	str	r1, [r7, #8]
 800071e:	603b      	str	r3, [r7, #0]
 8000720:	4613      	mov	r3, r2
 8000722:	80fb      	strh	r3, [r7, #6]

	/*
	 Allocate, fill extended TCB using local task storage
	 */

	xNewExtTCB = (extTCB_t*) pvPortMalloc(sizeof(extTCB_t));
 8000724:	207c      	movs	r0, #124	@ 0x7c
 8000726:	f007 fd39 	bl	800819c <pvPortMalloc>
 800072a:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
	*xNewExtTCB = (extTCB_t ) { .pvJobCode = pvJobCode, .pcName = pcName,
 800072e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000732:	4618      	mov	r0, r3
 8000734:	237c      	movs	r3, #124	@ 0x7c
 8000736:	461a      	mov	r2, r3
 8000738:	2100      	movs	r1, #0
 800073a:	f008 f8d3 	bl	80088e4 <memset>
 800073e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000742:	68fa      	ldr	r2, [r7, #12]
 8000744:	615a      	str	r2, [r3, #20]
 8000746:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800074a:	68ba      	ldr	r2, [r7, #8]
 800074c:	619a      	str	r2, [r3, #24]
 800074e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000752:	88fa      	ldrh	r2, [r7, #6]
 8000754:	839a      	strh	r2, [r3, #28]
 8000756:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800075a:	683a      	ldr	r2, [r7, #0]
 800075c:	621a      	str	r2, [r3, #32]
 800075e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000762:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8000766:	625a      	str	r2, [r3, #36]	@ 0x24
 8000768:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800076c:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8000770:	629a      	str	r2, [r3, #40]	@ 0x28
 8000772:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000776:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800077a:	631a      	str	r2, [r3, #48]	@ 0x30
 800077c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000780:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8000784:	635a      	str	r2, [r3, #52]	@ 0x34
 8000786:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800078a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800078e:	639a      	str	r2, [r3, #56]	@ 0x38
 8000790:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000794:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8000798:	63da      	str	r2, [r3, #60]	@ 0x3c
	return pdPASS;
#else
	/*
	 * If not RMS we can directly create the task, otherwise it is done before kernel start
	 */
	if(prvPeriodicTaskCreate(xNewExtTCB)) {
 800079a:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 800079e:	f7ff ff37 	bl	8000610 <prvPeriodicTaskCreate>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <vMSTPeriodicTaskCreate+0x98>
		return pdPASS;
 80007a8:	2301      	movs	r3, #1
 80007aa:	e000      	b.n	80007ae <vMSTPeriodicTaskCreate+0x9a>
	} else {
		return pdFAIL;
 80007ac:	2300      	movs	r3, #0
	}
#endif

}
 80007ae:	4618      	mov	r0, r3
 80007b0:	3790      	adds	r7, #144	@ 0x90
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
	...

080007b8 <prvMSTPeriodicGenericJob>:
 * mst_test_PERIODIC_METHOD 2: Uses FreeRTOS global timers to callback the task appropriately.
 *
 * @param pvParameters
 */

static void prvMSTPeriodicGenericJob(void *pvParameters) {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b088      	sub	sp, #32
 80007bc:	af02      	add	r7, sp, #8
 80007be:	6078      	str	r0, [r7, #4]
#if(mst_test_PERIODIC_METHOD == 2)
	/*
	 Takes notification for current task
	 */
	ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80007c0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80007c4:	2001      	movs	r0, #1
 80007c6:	f006 fcfb 	bl	80071c0 <ulTaskNotifyTake>
#endif
	/*
	 Get values about current job
	 */
	TaskHandle_t xCurrentHandle = xTaskGetCurrentTaskHandle();
 80007ca:	f006 fb5b 	bl	8006e84 <xTaskGetCurrentTaskHandle>
 80007ce:	6178      	str	r0, [r7, #20]
	extTCB_t *xCurrExtTCB = (extTCB_t*) pvTaskGetThreadLocalStoragePointer(
 80007d0:	2100      	movs	r1, #0
 80007d2:	6978      	ldr	r0, [r7, #20]
 80007d4:	f006 f998 	bl	8006b08 <pvTaskGetThreadLocalStoragePointer>
 80007d8:	6138      	str	r0, [r7, #16]
			xCurrentHandle, mstLOCAL_STORAGE_DATA_INDEX);
	/*
	 We assert that the TCB has been retreived, else we compromised exec
	 */
	configASSERT(xCurrExtTCB != NULL);
 80007da:	693b      	ldr	r3, [r7, #16]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d10b      	bne.n	80007f8 <prvMSTPeriodicGenericJob+0x40>
	__asm volatile
 80007e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80007e4:	f383 8811 	msr	BASEPRI, r3
 80007e8:	f3bf 8f6f 	isb	sy
 80007ec:	f3bf 8f4f 	dsb	sy
 80007f0:	60bb      	str	r3, [r7, #8]
}
 80007f2:	bf00      	nop
 80007f4:	bf00      	nop
 80007f6:	e7fd      	b.n	80007f4 <prvMSTPeriodicGenericJob+0x3c>
	/*
	 First iteration with phase passed, change the period to not have the phase
	 */
	if (xCurrExtTCB->xTaskInitDone == pdFALSE) {
 80007f8:	693b      	ldr	r3, [r7, #16]
 80007fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d11f      	bne.n	8000840 <prvMSTPeriodicGenericJob+0x88>
		xCurrExtTCB->xTaskInitDone = pdTRUE;
 8000800:	693b      	ldr	r3, [r7, #16]
 8000802:	2201      	movs	r2, #1
 8000804:	65da      	str	r2, [r3, #92]	@ 0x5c
#if(TESTING_STM32)
		//this is the us at start
		xCurrExtTCB->xUsFromIdealRelease = 0;
 8000806:	693b      	ldr	r3, [r7, #16]
 8000808:	2200      	movs	r2, #0
 800080a:	665a      	str	r2, [r3, #100]	@ 0x64
		xCurrExtTCB->xUsAverageReleaseGap = 0;
 800080c:	693b      	ldr	r3, [r7, #16]
 800080e:	2200      	movs	r2, #0
 8000810:	66da      	str	r2, [r3, #108]	@ 0x6c
#endif

		if (xCurrExtTCB->xTaskPhase > 0) {
 8000812:	693b      	ldr	r3, [r7, #16]
 8000814:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000816:	2b00      	cmp	r3, #0
 8000818:	d012      	beq.n	8000840 <prvMSTPeriodicGenericJob+0x88>
			 If we have a phase, we should have just passed it
			 */
#if(mst_test_PERIODIC_METHOD == 1)
			vTaskDelayUntil(&(xCurrExtTCB->xPrevReleaseTime), xCurrExtTCB->xTaskPhase);
#elif(mst_test_PERIODIC_METHOD == 2)
			xTimerChangePeriod(xCurrExtTCB->xTaskSpecificTimer,
 800081a:	693b      	ldr	r3, [r7, #16]
 800081c:	6e18      	ldr	r0, [r3, #96]	@ 0x60
 800081e:	693b      	ldr	r3, [r7, #16]
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000826:	fb02 f303 	mul.w	r3, r2, r3
 800082a:	4a34      	ldr	r2, [pc, #208]	@ (80008fc <prvMSTPeriodicGenericJob+0x144>)
 800082c:	fba2 2303 	umull	r2, r3, r2, r3
 8000830:	099a      	lsrs	r2, r3, #6
 8000832:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000836:	9300      	str	r3, [sp, #0]
 8000838:	2300      	movs	r3, #0
 800083a:	2104      	movs	r1, #4
 800083c:	f006 ff2a 	bl	8007694 <xTimerGenericCommand>
#endif
		}

	}

	xCurrExtTCB->xPrevReleaseTime = xTaskGetTickCount();
 8000840:	f005 fe12 	bl	8006468 <xTaskGetTickCount>
 8000844:	4602      	mov	r2, r0
 8000846:	693b      	ldr	r3, [r7, #16]
 8000848:	641a      	str	r2, [r3, #64]	@ 0x40
	for (;;) {

#if(TESTING_STM32)
		//count gap from execution if testing
#if(mst_test_PERIODIC_METHOD == 2)
		xCurrExtTCB->xNumOfIterations++;
 800084a:	693b      	ldr	r3, [r7, #16]
 800084c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800084e:	1c5a      	adds	r2, r3, #1
 8000850:	693b      	ldr	r3, [r7, #16]
 8000852:	669a      	str	r2, [r3, #104]	@ 0x68
#endif
		//calculate the absolute perfect release in us
		uint32_t perfRelease = xCurrExtTCB->xTaskPhase * 1000
 8000854:	693b      	ldr	r3, [r7, #16]
 8000856:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
				+ xCurrExtTCB->xTaskPeriod * 1000
 8000858:	693b      	ldr	r3, [r7, #16]
 800085a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
						* (xCurrExtTCB->xNumOfIterations);
 800085c:	6939      	ldr	r1, [r7, #16]
 800085e:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8000860:	fb01 f303 	mul.w	r3, r1, r3
				+ xCurrExtTCB->xTaskPeriod * 1000
 8000864:	4413      	add	r3, r2
		uint32_t perfRelease = xCurrExtTCB->xTaskPhase * 1000
 8000866:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800086a:	fb02 f303 	mul.w	r3, r2, r3
 800086e:	60fb      	str	r3, [r7, #12]
		//calculate the gap between perfect and absolute gap in us and update the avg
		xCurrExtTCB->xUsFromIdealRelease += prvMSTGetUS() - perfRelease;
 8000870:	f7ff feb8 	bl	80005e4 <prvMSTGetUS>
 8000874:	4602      	mov	r2, r0
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	1ad3      	subs	r3, r2, r3
 800087a:	693a      	ldr	r2, [r7, #16]
 800087c:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800087e:	4413      	add	r3, r2
 8000880:	461a      	mov	r2, r3
 8000882:	693b      	ldr	r3, [r7, #16]
 8000884:	665a      	str	r2, [r3, #100]	@ 0x64
		if (xCurrExtTCB->xNumOfIterations > 0) {
 8000886:	693b      	ldr	r3, [r7, #16]
 8000888:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800088a:	2b00      	cmp	r3, #0
 800088c:	d009      	beq.n	80008a2 <prvMSTPeriodicGenericJob+0xea>
			xCurrExtTCB->xUsAverageReleaseGap =
					(xCurrExtTCB->xUsFromIdealRelease)
 800088e:	693b      	ldr	r3, [r7, #16]
 8000890:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8000892:	461a      	mov	r2, r3
							/ (xCurrExtTCB->xNumOfIterations);
 8000894:	693b      	ldr	r3, [r7, #16]
 8000896:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000898:	fbb2 f3f3 	udiv	r3, r2, r3
 800089c:	461a      	mov	r2, r3
			xCurrExtTCB->xUsAverageReleaseGap =
 800089e:	693b      	ldr	r3, [r7, #16]
 80008a0:	66da      	str	r2, [r3, #108]	@ 0x6c
#endif
#endif
		/*
		 Run user code
		 */
		xCurrExtTCB->xPrevStartTime = xTaskGetTickCount();
 80008a2:	f005 fde1 	bl	8006468 <xTaskGetTickCount>
 80008a6:	4602      	mov	r2, r0
 80008a8:	693b      	ldr	r3, [r7, #16]
 80008aa:	64da      	str	r2, [r3, #76]	@ 0x4c
		xCurrExtTCB->pvJobCode(pvParameters);
 80008ac:	693b      	ldr	r3, [r7, #16]
 80008ae:	695b      	ldr	r3, [r3, #20]
 80008b0:	6878      	ldr	r0, [r7, #4]
 80008b2:	4798      	blx	r3
		xCurrExtTCB->xPrevFinishTime = xTaskGetTickCount();
 80008b4:	f005 fdd8 	bl	8006468 <xTaskGetTickCount>
 80008b8:	4602      	mov	r2, r0
 80008ba:	693b      	ldr	r3, [r7, #16]
 80008bc:	651a      	str	r2, [r3, #80]	@ 0x50
		xCurrExtTCB->xPrevExecTime = xCurrExtTCB->xPrevFinishTime
 80008be:	693b      	ldr	r3, [r7, #16]
 80008c0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
				- xCurrExtTCB->xPrevStartTime;
 80008c2:	693b      	ldr	r3, [r7, #16]
 80008c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008c6:	1ad2      	subs	r2, r2, r3
		xCurrExtTCB->xPrevExecTime = xCurrExtTCB->xPrevFinishTime
 80008c8:	693b      	ldr	r3, [r7, #16]
 80008ca:	645a      	str	r2, [r3, #68]	@ 0x44

		if (xCurrExtTCB->xPrevExecTime > xCurrExtTCB->xTaskDeadline) {
 80008cc:	693b      	ldr	r3, [r7, #16]
 80008ce:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80008d0:	693b      	ldr	r3, [r7, #16]
 80008d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008d4:	429a      	cmp	r2, r3
 80008d6:	d904      	bls.n	80008e2 <prvMSTPeriodicGenericJob+0x12a>
			//current task got over the deadline, make notice of the event
			xCurrExtTCB->uNumOfMissedDeadlines++;
 80008d8:	693b      	ldr	r3, [r7, #16]
 80008da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80008dc:	1c5a      	adds	r2, r3, #1
 80008de:	693b      	ldr	r3, [r7, #16]
 80008e0:	655a      	str	r2, [r3, #84]	@ 0x54
		
	#if mst_schedSCHEDULING_POLICY == mst_schedSCHEDULING_EDF
		/*
		Notify dispatcher of finished job
		*/
		prvMSTDispatch(xCurrExtTCB->pxCreatedTask, false, taskTypePeriodic, false);
 80008e2:	693b      	ldr	r3, [r7, #16]
 80008e4:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80008e6:	2300      	movs	r3, #0
 80008e8:	2200      	movs	r2, #0
 80008ea:	2100      	movs	r1, #0
 80008ec:	f000 fbce 	bl	800108c <prvMSTDispatch>
		Update scheduler-referenced release time
		*/
		//vTaskDelay(pdMS_TO_TICKS(xCurrExtTCB->xTaskPeriod));
		vTaskDelayUntil(&(xCurrExtTCB->xPrevReleaseTime), pdMS_TO_TICKS(xCurrExtTCB->xTaskPeriod));
#elif(mst_test_PERIODIC_METHOD == 2)
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80008f0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80008f4:	2001      	movs	r0, #1
 80008f6:	f006 fc63 	bl	80071c0 <ulTaskNotifyTake>
	for (;;) {
 80008fa:	e7a6      	b.n	800084a <prvMSTPeriodicGenericJob+0x92>
 80008fc:	10624dd3 	.word	0x10624dd3

08000900 <prvMSTPeriodicTimerCallback>:

#if(mst_test_PERIODIC_METHOD == 2)
/*
 Using periodic timers with mutexes
 */
static void prvMSTPeriodicTimerCallback(TimerHandle_t xTimer) {
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
	/*
	 Here the callback of a certain task timer is called, it shall have the semaphore
	 as parameter
	 */
	TaskHandle_t *param = (TaskHandle_t*) pvTimerGetTimerID(xTimer);
 8000908:	6878      	ldr	r0, [r7, #4]
 800090a:	f007 f9d3 	bl	8007cb4 <pvTimerGetTimerID>
 800090e:	60f8      	str	r0, [r7, #12]
	prvMSTDispatch(param, true, taskTypePeriodic, false);
 8000910:	2300      	movs	r3, #0
 8000912:	2200      	movs	r2, #0
 8000914:	2101      	movs	r1, #1
 8000916:	68f8      	ldr	r0, [r7, #12]
 8000918:	f000 fbb8 	bl	800108c <prvMSTDispatch>
}
 800091c:	bf00      	nop
 800091e:	3710      	adds	r7, #16
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}

08000924 <prvMSTSporadicTimerCallback>:

static void prvMSTSporadicTimerCallback(TimerHandle_t xTimer) {
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
	/*
	 Notify a sporadic task but make sure it knows it was the timer to notify, by passing a parameter
	 */
	TaskHandle_t *param = (TaskHandle_t*) pvTimerGetTimerID(xTimer);
 800092c:	6878      	ldr	r0, [r7, #4]
 800092e:	f007 f9c1 	bl	8007cb4 <pvTimerGetTimerID>
 8000932:	60f8      	str	r0, [r7, #12]
	prvMSTDispatch(param, true, taskTypeSporadic, false);
 8000934:	2300      	movs	r3, #0
 8000936:	2201      	movs	r2, #1
 8000938:	2101      	movs	r1, #1
 800093a:	68f8      	ldr	r0, [r7, #12]
 800093c:	f000 fba6 	bl	800108c <prvMSTDispatch>
}
 8000940:	bf00      	nop
 8000942:	3710      	adds	r7, #16
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}

08000948 <vMSTSporadicTaskCreate>:
BaseType_t vMSTSporadicTaskCreate(TaskFunction_t pvJobCode, const char *pcName,
		uint16_t usStackDepth, void *pvParameters, UBaseType_t uxPriority,
		TaskHandle_t *pxCreatedTask,
		/* library-specific parameters */
		TickType_t xTaskInterarrivalTime, TickType_t xTaskDeadline,
		TickType_t xTaskWCET) {
 8000948:	b580      	push	{r7, lr}
 800094a:	b0a6      	sub	sp, #152	@ 0x98
 800094c:	af02      	add	r7, sp, #8
 800094e:	60f8      	str	r0, [r7, #12]
 8000950:	60b9      	str	r1, [r7, #8]
 8000952:	603b      	str	r3, [r7, #0]
 8000954:	4613      	mov	r3, r2
 8000956:	80fb      	strh	r3, [r7, #6]

	extTCB_t *xNewExtTCB;
	if (xTaskCreate(prvMSTSporadicGenericJob, pcName, usStackDepth,
 8000958:	88fa      	ldrh	r2, [r7, #6]
 800095a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800095e:	9301      	str	r3, [sp, #4]
 8000960:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000964:	9300      	str	r3, [sp, #0]
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	68b9      	ldr	r1, [r7, #8]
 800096a:	4826      	ldr	r0, [pc, #152]	@ (8000a04 <vMSTSporadicTaskCreate+0xbc>)
 800096c:	f005 f9e2 	bl	8005d34 <xTaskCreate>
 8000970:	4603      	mov	r3, r0
 8000972:	2b01      	cmp	r3, #1
 8000974:	d140      	bne.n	80009f8 <vMSTSporadicTaskCreate+0xb0>
			pvParameters, uxPriority, pxCreatedTask) == pdPASS) {
		/*
		 Allocate, fill extended TCB using local task storage
		 */
		xNewExtTCB = (extTCB_t*) pvPortMalloc(sizeof(extTCB_t));
 8000976:	207c      	movs	r0, #124	@ 0x7c
 8000978:	f007 fc10 	bl	800819c <pvPortMalloc>
 800097c:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
		*xNewExtTCB = (extTCB_t ) { .pvJobCode = pvJobCode, .pcName = pcName,
 8000980:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000984:	4618      	mov	r0, r3
 8000986:	237c      	movs	r3, #124	@ 0x7c
 8000988:	461a      	mov	r2, r3
 800098a:	2100      	movs	r1, #0
 800098c:	f007 ffaa 	bl	80088e4 <memset>
 8000990:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000994:	68fa      	ldr	r2, [r7, #12]
 8000996:	615a      	str	r2, [r3, #20]
 8000998:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800099c:	68ba      	ldr	r2, [r7, #8]
 800099e:	619a      	str	r2, [r3, #24]
 80009a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80009a4:	683a      	ldr	r2, [r7, #0]
 80009a6:	621a      	str	r2, [r3, #32]
 80009a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80009ac:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80009b0:	625a      	str	r2, [r3, #36]	@ 0x24
 80009b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80009b6:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80009ba:	629a      	str	r2, [r3, #40]	@ 0x28
 80009bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80009c0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80009c4:	635a      	str	r2, [r3, #52]	@ 0x34
 80009c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80009ca:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 80009ce:	671a      	str	r2, [r3, #112]	@ 0x70
						.pxCreatedTask = pxCreatedTask, .xTaskDeadline =
								xTaskDeadline, .uNumOfMissedDeadlines = 0,
						.xTaskInterarrivalTime = xTaskInterarrivalTime,
						.xJobCalled = pdFALSE, .xInterarrivalTimerRunning =
						pdFALSE };
		prvXMaxInterrarrivalTime = (xTaskInterarrivalTime > prvXMaxInterrarrivalTime) ? xTaskInterarrivalTime : prvXMaxInterrarrivalTime;
 80009d0:	4b0d      	ldr	r3, [pc, #52]	@ (8000a08 <vMSTSporadicTaskCreate+0xc0>)
 80009d2:	681a      	ldr	r2, [r3, #0]
 80009d4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80009d8:	4293      	cmp	r3, r2
 80009da:	bf38      	it	cc
 80009dc:	4613      	movcc	r3, r2
 80009de:	4a0a      	ldr	r2, [pc, #40]	@ (8000a08 <vMSTSporadicTaskCreate+0xc0>)
 80009e0:	6013      	str	r3, [r2, #0]
		/*
		 We create the task and allocate, but we do not clear the mutex nor start the timer
		 */
		vTaskSetThreadLocalStoragePointer(*pxCreatedTask,
 80009e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80009ec:	2100      	movs	r1, #0
 80009ee:	4618      	mov	r0, r3
 80009f0:	f006 f86a 	bl	8006ac8 <vTaskSetThreadLocalStoragePointer>
				mstLOCAL_STORAGE_DATA_INDEX, xNewExtTCB);
		return pdPASS;
 80009f4:	2301      	movs	r3, #1
 80009f6:	e000      	b.n	80009fa <vMSTSporadicTaskCreate+0xb2>
	} else {
		//task created unsuccesfully
		return pdFAIL;
 80009f8:	2300      	movs	r3, #0
	}
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3790      	adds	r7, #144	@ 0x90
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	08000a41 	.word	0x08000a41
 8000a08:	200000a0 	.word	0x200000a0

08000a0c <getTaskRunTime>:
 *
 * @param pvParameters
 */


static BaseType_t getTaskRunTime(TaskHandle_t handle) {
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08c      	sub	sp, #48	@ 0x30
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
	TaskStatus_t status;
	UBaseType_t count = uxTaskGetSystemState(&status, 1, NULL);
 8000a14:	f107 0308 	add.w	r3, r7, #8
 8000a18:	2200      	movs	r2, #0
 8000a1a:	2101      	movs	r1, #1
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f005 fd33 	bl	8006488 <uxTaskGetSystemState>
 8000a22:	62f8      	str	r0, [r7, #44]	@ 0x2c
	if (count == 1 && status.xHandle == handle) {
 8000a24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	d105      	bne.n	8000a36 <getTaskRunTime+0x2a>
 8000a2a:	68bb      	ldr	r3, [r7, #8]
 8000a2c:	687a      	ldr	r2, [r7, #4]
 8000a2e:	429a      	cmp	r2, r3
 8000a30:	d101      	bne.n	8000a36 <getTaskRunTime+0x2a>
		return status.ulRunTimeCounter;
 8000a32:	6a3b      	ldr	r3, [r7, #32]
 8000a34:	e000      	b.n	8000a38 <getTaskRunTime+0x2c>
	}
	return 0;
 8000a36:	2300      	movs	r3, #0
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	3730      	adds	r7, #48	@ 0x30
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <prvMSTSporadicGenericJob>:
static void prvMSTSporadicGenericJob(void *pvParameters) {
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08c      	sub	sp, #48	@ 0x30
 8000a44:	af02      	add	r7, sp, #8
 8000a46:	6078      	str	r0, [r7, #4]

	TaskHandle_t xCurrentHandle = xTaskGetCurrentTaskHandle();
 8000a48:	f006 fa1c 	bl	8006e84 <xTaskGetCurrentTaskHandle>
 8000a4c:	6278      	str	r0, [r7, #36]	@ 0x24
	extTCB_t *xCurrExtTCB = (extTCB_t*) pvTaskGetThreadLocalStoragePointer(
 8000a4e:	2100      	movs	r1, #0
 8000a50:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000a52:	f006 f859 	bl	8006b08 <pvTaskGetThreadLocalStoragePointer>
 8000a56:	6238      	str	r0, [r7, #32]
			xCurrentHandle, mstLOCAL_STORAGE_DATA_INDEX);
	configASSERT(xCurrExtTCB != NULL);
 8000a58:	6a3b      	ldr	r3, [r7, #32]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d10b      	bne.n	8000a76 <prvMSTSporadicGenericJob+0x36>
	__asm volatile
 8000a5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000a62:	f383 8811 	msr	BASEPRI, r3
 8000a66:	f3bf 8f6f 	isb	sy
 8000a6a:	f3bf 8f4f 	dsb	sy
 8000a6e:	617b      	str	r3, [r7, #20]
}
 8000a70:	bf00      	nop
 8000a72:	bf00      	nop
 8000a74:	e7fd      	b.n	8000a72 <prvMSTSporadicGenericJob+0x32>
	for (;;) {
		/*
		 Takes notification for current task, could be from timer or user
		 */
		uint32_t notificationGiver;
		if (xTaskNotifyWait(0, NOTIFY_INTERARRIVAL_TIMER | NOTIFY_USER_REQUEST,
 8000a76:	f107 020c 	add.w	r2, r7, #12
 8000a7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000a7e:	2103      	movs	r1, #3
 8000a80:	2000      	movs	r0, #0
 8000a82:	f006 fbe9 	bl	8007258 <xTaskNotifyWait>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b01      	cmp	r3, #1
 8000a8a:	d121      	bne.n	8000ad0 <prvMSTSporadicGenericJob+0x90>
				&notificationGiver, portMAX_DELAY) == pdPASS) {
			if (notificationGiver & NOTIFY_INTERARRIVAL_TIMER) {
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	f003 0301 	and.w	r3, r3, #1
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d00b      	beq.n	8000aae <prvMSTSporadicGenericJob+0x6e>
				//it was the interarrival timer that woke up the task
				xCurrExtTCB->xInterarrivalTimerRunning = pdFALSE;
 8000a96:	6a3b      	ldr	r3, [r7, #32]
 8000a98:	2200      	movs	r2, #0
 8000a9a:	675a      	str	r2, [r3, #116]	@ 0x74
				notificationGiver &= ~NOTIFY_INTERARRIVAL_TIMER;
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	f023 0301 	bic.w	r3, r3, #1
 8000aa2:	60fb      	str	r3, [r7, #12]
				if (xCurrExtTCB->xJobCalled == pdFALSE) {
 8000aa4:	6a3b      	ldr	r3, [r7, #32]
 8000aa6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d111      	bne.n	8000ad0 <prvMSTSporadicGenericJob+0x90>
					continue;
 8000aac:	e073      	b.n	8000b96 <prvMSTSporadicGenericJob+0x156>
				}
			} else if (notificationGiver & NOTIFY_USER_REQUEST) {
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	f003 0302 	and.w	r3, r3, #2
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d00b      	beq.n	8000ad0 <prvMSTSporadicGenericJob+0x90>
				//user requested to run
				notificationGiver &= ~NOTIFY_USER_REQUEST;
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	f023 0302 	bic.w	r3, r3, #2
 8000abe:	60fb      	str	r3, [r7, #12]
				if (xCurrExtTCB->xInterarrivalTimerRunning == pdTRUE) {
 8000ac0:	6a3b      	ldr	r3, [r7, #32]
 8000ac2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000ac4:	2b01      	cmp	r3, #1
 8000ac6:	d103      	bne.n	8000ad0 <prvMSTSporadicGenericJob+0x90>
					xCurrExtTCB->xJobCalled = pdTRUE;
 8000ac8:	6a3b      	ldr	r3, [r7, #32]
 8000aca:	2201      	movs	r2, #1
 8000acc:	679a      	str	r2, [r3, #120]	@ 0x78
					continue;
 8000ace:	e062      	b.n	8000b96 <prvMSTSporadicGenericJob+0x156>
			}
		}
		/*
		 Notify job called and interarrival timer from release
		 */
		xCurrExtTCB->xJobCalled = pdTRUE;
 8000ad0:	6a3b      	ldr	r3, [r7, #32]
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	679a      	str	r2, [r3, #120]	@ 0x78
		TimerHandle_t xTimer = xTimerCreate("sporadic interarrival timer", // Name of the timer
				pdMS_TO_TICKS(xCurrExtTCB->xTaskInterarrivalTime), // Timer period in ticks
 8000ad6:	6a3b      	ldr	r3, [r7, #32]
 8000ad8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000ada:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000ade:	fb02 f303 	mul.w	r3, r2, r3
		TimerHandle_t xTimer = xTimerCreate("sporadic interarrival timer", // Name of the timer
 8000ae2:	4a2d      	ldr	r2, [pc, #180]	@ (8000b98 <prvMSTSporadicGenericJob+0x158>)
 8000ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ae8:	0999      	lsrs	r1, r3, #6
				pdFALSE,                               // Auto-reload (periodic)
				(void*) (xCurrExtTCB->pxCreatedTask), // Task handle as parameter
 8000aea:	6a3b      	ldr	r3, [r7, #32]
 8000aec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
		TimerHandle_t xTimer = xTimerCreate("sporadic interarrival timer", // Name of the timer
 8000aee:	4a2b      	ldr	r2, [pc, #172]	@ (8000b9c <prvMSTSporadicGenericJob+0x15c>)
 8000af0:	9200      	str	r2, [sp, #0]
 8000af2:	2200      	movs	r2, #0
 8000af4:	482a      	ldr	r0, [pc, #168]	@ (8000ba0 <prvMSTSporadicGenericJob+0x160>)
 8000af6:	f006 fd6f 	bl	80075d8 <xTimerCreate>
 8000afa:	61f8      	str	r0, [r7, #28]
				prvMSTSporadicTimerCallback                 // Callback function
				);
		configASSERT(xTimerStart(xTimer, 0) == pdPASS)
 8000afc:	f005 fcb4 	bl	8006468 <xTaskGetTickCount>
 8000b00:	4602      	mov	r2, r0
 8000b02:	2300      	movs	r3, #0
 8000b04:	9300      	str	r3, [sp, #0]
 8000b06:	2300      	movs	r3, #0
 8000b08:	2101      	movs	r1, #1
 8000b0a:	69f8      	ldr	r0, [r7, #28]
 8000b0c:	f006 fdc2 	bl	8007694 <xTimerGenericCommand>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b01      	cmp	r3, #1
 8000b14:	d00b      	beq.n	8000b2e <prvMSTSporadicGenericJob+0xee>
	__asm volatile
 8000b16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b1a:	f383 8811 	msr	BASEPRI, r3
 8000b1e:	f3bf 8f6f 	isb	sy
 8000b22:	f3bf 8f4f 	dsb	sy
 8000b26:	613b      	str	r3, [r7, #16]
}
 8000b28:	bf00      	nop
 8000b2a:	bf00      	nop
 8000b2c:	e7fd      	b.n	8000b2a <prvMSTSporadicGenericJob+0xea>
		xCurrExtTCB->xTaskSpecificTimer = xTimer;
 8000b2e:	6a3b      	ldr	r3, [r7, #32]
 8000b30:	69fa      	ldr	r2, [r7, #28]
 8000b32:	661a      	str	r2, [r3, #96]	@ 0x60
		taskENTER_CRITICAL(); //maybe not needed
 8000b34:	f007 fa10 	bl	8007f58 <vPortEnterCritical>
		xCurrExtTCB->xInterarrivalTimerRunning = pdTRUE;
 8000b38:	6a3b      	ldr	r3, [r7, #32]
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	675a      	str	r2, [r3, #116]	@ 0x74
		xCurrExtTCB->xJobCalled = pdFALSE;
 8000b3e:	6a3b      	ldr	r3, [r7, #32]
 8000b40:	2200      	movs	r2, #0
 8000b42:	679a      	str	r2, [r3, #120]	@ 0x78
		taskEXIT_CRITICAL();
 8000b44:	f007 fa3a 	bl	8007fbc <vPortExitCritical>

		BaseType_t actualCPUCycles = getTaskRunTime(xCurrentHandle);
 8000b48:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000b4a:	f7ff ff5f 	bl	8000a0c <getTaskRunTime>
 8000b4e:	61b8      	str	r0, [r7, #24]
		xCurrExtTCB->xPrevStartTime = xTaskGetTickCount();
 8000b50:	f005 fc8a 	bl	8006468 <xTaskGetTickCount>
 8000b54:	4602      	mov	r2, r0
 8000b56:	6a3b      	ldr	r3, [r7, #32]
 8000b58:	64da      	str	r2, [r3, #76]	@ 0x4c
		xCurrExtTCB->pvJobCode(pvParameters);
 8000b5a:	6a3b      	ldr	r3, [r7, #32]
 8000b5c:	695b      	ldr	r3, [r3, #20]
 8000b5e:	6878      	ldr	r0, [r7, #4]
 8000b60:	4798      	blx	r3
		/*
		 If periodic job is called within the task itself its no problem since the timer is going
		 */
		xCurrExtTCB->xPrevFinishTime = xTaskGetTickCount();
 8000b62:	f005 fc81 	bl	8006468 <xTaskGetTickCount>
 8000b66:	4602      	mov	r2, r0
 8000b68:	6a3b      	ldr	r3, [r7, #32]
 8000b6a:	651a      	str	r2, [r3, #80]	@ 0x50
		/*
		The user shall have set up runtime stats appropriately:
		1 tick->1us, hence 'actualCPUCycles' is in us
		*/
		actualCPUCycles = getTaskRunTime(xCurrentHandle) - actualCPUCycles;
 8000b6c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000b6e:	f7ff ff4d 	bl	8000a0c <getTaskRunTime>
 8000b72:	4602      	mov	r2, r0
 8000b74:	69bb      	ldr	r3, [r7, #24]
 8000b76:	1ad3      	subs	r3, r2, r3
 8000b78:	61bb      	str	r3, [r7, #24]
		
		xCurrExtTCB->xPrevExecTime = xCurrExtTCB->xPrevFinishTime
 8000b7a:	6a3b      	ldr	r3, [r7, #32]
 8000b7c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
				- xCurrExtTCB->xPrevStartTime;
 8000b7e:	6a3b      	ldr	r3, [r7, #32]
 8000b80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b82:	1ad2      	subs	r2, r2, r3
		xCurrExtTCB->xPrevExecTime = xCurrExtTCB->xPrevFinishTime
 8000b84:	6a3b      	ldr	r3, [r7, #32]
 8000b86:	645a      	str	r2, [r3, #68]	@ 0x44

		#if mst_schedSCHEDULING_POLICY == mst_schedSCHEDULING_EDF
		/*
		Notify dispatcher of finished job
		*/
		prvMSTDispatch(xCurrExtTCB->pxCreatedTask, false, taskTypeSporadic, false);
 8000b88:	6a3b      	ldr	r3, [r7, #32]
 8000b8a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	2201      	movs	r2, #1
 8000b90:	2100      	movs	r1, #0
 8000b92:	f000 fa7b 	bl	800108c <prvMSTDispatch>
	for (;;) {
 8000b96:	e76e      	b.n	8000a76 <prvMSTSporadicGenericJob+0x36>
 8000b98:	10624dd3 	.word	0x10624dd3
 8000b9c:	08000925 	.word	0x08000925
 8000ba0:	080092cc 	.word	0x080092cc

08000ba4 <vMSTSporadicTaskRun>:
	#endif
	}
}

BaseType_t vMSTSporadicTaskRun(TaskHandle_t *pxTaskToRunHandle) {
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
	/*
	 We check if the task has been created. To run the sporadic task we call a dispatch
	 */
	extTCB_t *xCurrExtTCB = (extTCB_t*) pvTaskGetThreadLocalStoragePointer(
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f005 ffa8 	bl	8006b08 <pvTaskGetThreadLocalStoragePointer>
 8000bb8:	60f8      	str	r0, [r7, #12]
			*pxTaskToRunHandle, mstLOCAL_STORAGE_DATA_INDEX);

	if (xCurrExtTCB == NULL) {
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d101      	bne.n	8000bc4 <vMSTSporadicTaskRun+0x20>
		return pdFAIL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	e006      	b.n	8000bd2 <vMSTSporadicTaskRun+0x2e>
	} else {
		prvMSTDispatch(pxTaskToRunHandle, pdTRUE, taskTypeSporadic, pdTRUE);
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	2101      	movs	r1, #1
 8000bca:	6878      	ldr	r0, [r7, #4]
 8000bcc:	f000 fa5e 	bl	800108c <prvMSTDispatch>
		return pdPASS;
 8000bd0:	2301      	movs	r3, #1
	}
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3710      	adds	r7, #16
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}

08000bda <prv_compare>:

#if (mst_schedSCHEDULING_POLICY == mst_schedSCHEDULING_RMS || mst_schedSCHEDULING_POLICY == mst_schedSCHEDULING_EDF)
static int prv_compare(const void *arg1, const void *arg2) {
 8000bda:	b480      	push	{r7}
 8000bdc:	b085      	sub	sp, #20
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	6078      	str	r0, [r7, #4]
 8000be2:	6039      	str	r1, [r7, #0]
	extTCB_t *itm1 = *(extTCB_t**) arg1;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	60fb      	str	r3, [r7, #12]
	extTCB_t *itm2 = *(extTCB_t**) arg2;
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	60bb      	str	r3, [r7, #8]
		return -1;
	if (itm1->xTaskPeriod < itm2->xTaskPeriod)
		return 1;
	return 0; 
#elif mst_schedSCHEDULING_POLICY == mst_schedSCHEDULING_EDF
	if (itm1->xTaskDeadline < itm2->xTaskDeadline)
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	d202      	bcs.n	8000c02 <prv_compare+0x28>
		return -1;
 8000bfc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c00:	e008      	b.n	8000c14 <prv_compare+0x3a>
	if (itm1->xTaskDeadline > itm2->xTaskDeadline)
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c06:	68bb      	ldr	r3, [r7, #8]
 8000c08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c0a:	429a      	cmp	r2, r3
 8000c0c:	d901      	bls.n	8000c12 <prv_compare+0x38>
		return 1;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	e000      	b.n	8000c14 <prv_compare+0x3a>
	return 0; 
 8000c12:	2300      	movs	r3, #0
#endif

}
 8000c14:	4618      	mov	r0, r3
 8000c16:	3714      	adds	r7, #20
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr

08000c20 <prvComputeOrderedPriorities>:
/*
 *TODO: This can be obviously optimized by using an appropriate data structure
 Now it does quicksort after getting list, we have O(n log n) in best case
 */

static BaseType_t prvComputeOrderedPriorities() {
 8000c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c24:	b08c      	sub	sp, #48	@ 0x30
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	466b      	mov	r3, sp
 8000c2a:	4698      	mov	r8, r3
	extTCB_t *listArray[xListTasksNumber];
 8000c2c:	4b48      	ldr	r3, [pc, #288]	@ (8000d50 <prvComputeOrderedPriorities+0x130>)
 8000c2e:	681e      	ldr	r6, [r3, #0]
 8000c30:	1e73      	subs	r3, r6, #1
 8000c32:	61fb      	str	r3, [r7, #28]
 8000c34:	4632      	mov	r2, r6
 8000c36:	2300      	movs	r3, #0
 8000c38:	4614      	mov	r4, r2
 8000c3a:	461d      	mov	r5, r3
 8000c3c:	f04f 0200 	mov.w	r2, #0
 8000c40:	f04f 0300 	mov.w	r3, #0
 8000c44:	016b      	lsls	r3, r5, #5
 8000c46:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8000c4a:	0162      	lsls	r2, r4, #5
 8000c4c:	4632      	mov	r2, r6
 8000c4e:	2300      	movs	r3, #0
 8000c50:	4610      	mov	r0, r2
 8000c52:	4619      	mov	r1, r3
 8000c54:	f04f 0200 	mov.w	r2, #0
 8000c58:	f04f 0300 	mov.w	r3, #0
 8000c5c:	014b      	lsls	r3, r1, #5
 8000c5e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000c62:	0142      	lsls	r2, r0, #5
 8000c64:	4633      	mov	r3, r6
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	3307      	adds	r3, #7
 8000c6a:	08db      	lsrs	r3, r3, #3
 8000c6c:	00db      	lsls	r3, r3, #3
 8000c6e:	ebad 0d03 	sub.w	sp, sp, r3
 8000c72:	466b      	mov	r3, sp
 8000c74:	3303      	adds	r3, #3
 8000c76:	089b      	lsrs	r3, r3, #2
 8000c78:	009b      	lsls	r3, r3, #2
 8000c7a:	61bb      	str	r3, [r7, #24]
	//transfer linked list to array
	int i = 0;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	617b      	str	r3, [r7, #20]
	//configASSERT(xTasksList.uxNumberOfItems == xListTasksNumber);
	ListItem_t *xItm = listGET_HEAD_ENTRY(&xTasksList); // this is xListEnd.pxNext
 8000c80:	4b34      	ldr	r3, [pc, #208]	@ (8000d54 <prvComputeOrderedPriorities+0x134>)
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	62fb      	str	r3, [r7, #44]	@ 0x2c
	for (int i = 0; i < xListTasksNumber; i++) {
 8000c86:	2300      	movs	r3, #0
 8000c88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000c8a:	e01c      	b.n	8000cc6 <prvComputeOrderedPriorities+0xa6>
	    extTCB_t *xTCB = (extTCB_t *) xItm->pvOwner;
 8000c8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c8e:	68db      	ldr	r3, [r3, #12]
 8000c90:	60bb      	str	r3, [r7, #8]

	    configASSERT(xTCB != NULL);  // Make sure we don't dereference garbage
 8000c92:	68bb      	ldr	r3, [r7, #8]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d10b      	bne.n	8000cb0 <prvComputeOrderedPriorities+0x90>
	__asm volatile
 8000c98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000c9c:	f383 8811 	msr	BASEPRI, r3
 8000ca0:	f3bf 8f6f 	isb	sy
 8000ca4:	f3bf 8f4f 	dsb	sy
 8000ca8:	607b      	str	r3, [r7, #4]
}
 8000caa:	bf00      	nop
 8000cac:	bf00      	nop
 8000cae:	e7fd      	b.n	8000cac <prvComputeOrderedPriorities+0x8c>
	    listArray[i] = xTCB;
 8000cb0:	69bb      	ldr	r3, [r7, #24]
 8000cb2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000cb4:	68b9      	ldr	r1, [r7, #8]
 8000cb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	    xItm = listGET_NEXT(xItm);
 8000cba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
	for (int i = 0; i < xListTasksNumber; i++) {
 8000cc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000cc6:	4b22      	ldr	r3, [pc, #136]	@ (8000d50 <prvComputeOrderedPriorities+0x130>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	dbdd      	blt.n	8000c8c <prvComputeOrderedPriorities+0x6c>

	}

	qsort(listArray, xListTasksNumber, sizeof(extTCB_t*), prv_compare);
 8000cd0:	4b1f      	ldr	r3, [pc, #124]	@ (8000d50 <prvComputeOrderedPriorities+0x130>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4b20      	ldr	r3, [pc, #128]	@ (8000d58 <prvComputeOrderedPriorities+0x138>)
 8000cd8:	2204      	movs	r2, #4
 8000cda:	69b8      	ldr	r0, [r7, #24]
 8000cdc:	f007 fc85 	bl	80085ea <qsort>
	UBaseType_t uxUsedPriority = prvSTARTING_PRIORITY;
 8000ce0:	2305      	movs	r3, #5
 8000ce2:	627b      	str	r3, [r7, #36]	@ 0x24

	for (UBaseType_t xCurrInx = 0; xCurrInx < xListTasksNumber; xCurrInx++) {
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	623b      	str	r3, [r7, #32]
 8000ce8:	e025      	b.n	8000d36 <prvComputeOrderedPriorities+0x116>
		extTCB_t *xTCB_Reference = listArray[xCurrInx];
 8000cea:	69bb      	ldr	r3, [r7, #24]
 8000cec:	6a3a      	ldr	r2, [r7, #32]
 8000cee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cf2:	613b      	str	r3, [r7, #16]
		UBaseType_t bNewPriority = uxUsedPriority++;
 8000cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cf6:	1c5a      	adds	r2, r3, #1
 8000cf8:	627a      	str	r2, [r7, #36]	@ 0x24
 8000cfa:	60fb      	str	r3, [r7, #12]
		xTCB_Reference->uxPriority = bNewPriority;
 8000cfc:	693b      	ldr	r3, [r7, #16]
 8000cfe:	68fa      	ldr	r2, [r7, #12]
 8000d00:	625a      	str	r2, [r3, #36]	@ 0x24
		/*
		 * Here we create the periodic tasks that we saved in the list
		 */
		configASSERT(prvPeriodicTaskCreate(xTCB_Reference));
#elif mst_schedSCHEDULING_POLICY == mst_schedSCHEDULING_EDF
		configASSERT(xTCB_Reference->pxCreatedTask != NULL);
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d10b      	bne.n	8000d22 <prvComputeOrderedPriorities+0x102>
	__asm volatile
 8000d0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000d0e:	f383 8811 	msr	BASEPRI, r3
 8000d12:	f3bf 8f6f 	isb	sy
 8000d16:	f3bf 8f4f 	dsb	sy
 8000d1a:	603b      	str	r3, [r7, #0]
}
 8000d1c:	bf00      	nop
 8000d1e:	bf00      	nop
 8000d20:	e7fd      	b.n	8000d1e <prvComputeOrderedPriorities+0xfe>
			vTaskPrioritySet(*(xTCB_Reference->pxCreatedTask), bNewPriority);
 8000d22:	693b      	ldr	r3, [r7, #16]
 8000d24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	68f9      	ldr	r1, [r7, #12]
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f005 f9e0 	bl	80060f0 <vTaskPrioritySet>
	for (UBaseType_t xCurrInx = 0; xCurrInx < xListTasksNumber; xCurrInx++) {
 8000d30:	6a3b      	ldr	r3, [r7, #32]
 8000d32:	3301      	adds	r3, #1
 8000d34:	623b      	str	r3, [r7, #32]
 8000d36:	4b06      	ldr	r3, [pc, #24]	@ (8000d50 <prvComputeOrderedPriorities+0x130>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	6a3b      	ldr	r3, [r7, #32]
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d3d3      	bcc.n	8000cea <prvComputeOrderedPriorities+0xca>
			#endif
	}
	return pdPASS;
 8000d42:	2301      	movs	r3, #1
 8000d44:	46c5      	mov	sp, r8
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3730      	adds	r7, #48	@ 0x30
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000d50:	20000094 	.word	0x20000094
 8000d54:	20000080 	.word	0x20000080
 8000d58:	08000bdb 	.word	0x08000bdb

08000d5c <vMSTSchedulerStart>:


/*
 MST version of scheduler start
 */
void vMSTSchedulerStart(void) {
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
#if(TESTING_STM32 == 1)
	prvMSTSetupUSClock();
 8000d60:	f7ff fc24 	bl	80005ac <prvMSTSetupUSClock>
#endif
	configASSERT(prvComputeOrderedPriorities());

#endif

	vTaskStartScheduler();
 8000d64:	f005 fa62 	bl	800622c <vTaskStartScheduler>

}
 8000d68:	bf00      	nop
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <prvAsmissionControlEDF>:

 #if(mst_schedSCHEDULING_POLICY == mst_schedSCHEDULING_EDF)

//TODO: this can be very much optimized. The first two iterations can be put into one by 
//calculating past densities at each step
static BaseType_t prvAsmissionControlEDF(extTCB_t *forTCB){
 8000d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d70:	b09f      	sub	sp, #124	@ 0x7c
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	61f8      	str	r0, [r7, #28]
 8000d76:	466b      	mov	r3, sp
 8000d78:	461e      	mov	r6, r3

	/*
	We start by calculating all intervals Ik and storing them
	*/
	 
	TickType_t xPrev = 0;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	677b      	str	r3, [r7, #116]	@ 0x74
	TickType_t intervalsArray[xListTasksNumber+1];
 8000d7e:	4ba6      	ldr	r3, [pc, #664]	@ (8001018 <prvAsmissionControlEDF+0x2ac>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	1c59      	adds	r1, r3, #1
 8000d84:	1e4b      	subs	r3, r1, #1
 8000d86:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000d88:	460a      	mov	r2, r1
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	4614      	mov	r4, r2
 8000d8e:	461d      	mov	r5, r3
 8000d90:	f04f 0200 	mov.w	r2, #0
 8000d94:	f04f 0300 	mov.w	r3, #0
 8000d98:	016b      	lsls	r3, r5, #5
 8000d9a:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8000d9e:	0162      	lsls	r2, r4, #5
 8000da0:	460a      	mov	r2, r1
 8000da2:	2300      	movs	r3, #0
 8000da4:	613a      	str	r2, [r7, #16]
 8000da6:	617b      	str	r3, [r7, #20]
 8000da8:	f04f 0200 	mov.w	r2, #0
 8000dac:	f04f 0300 	mov.w	r3, #0
 8000db0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8000db4:	4628      	mov	r0, r5
 8000db6:	0143      	lsls	r3, r0, #5
 8000db8:	4620      	mov	r0, r4
 8000dba:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	0142      	lsls	r2, r0, #5
 8000dc2:	460b      	mov	r3, r1
 8000dc4:	009b      	lsls	r3, r3, #2
 8000dc6:	3307      	adds	r3, #7
 8000dc8:	08db      	lsrs	r3, r3, #3
 8000dca:	00db      	lsls	r3, r3, #3
 8000dcc:	ebad 0d03 	sub.w	sp, sp, r3
 8000dd0:	466b      	mov	r3, sp
 8000dd2:	3303      	adds	r3, #3
 8000dd4:	089b      	lsrs	r3, r3, #2
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	657b      	str	r3, [r7, #84]	@ 0x54
	TickType_t intervalsStarts[xListTasksNumber+1];
 8000dda:	4b8f      	ldr	r3, [pc, #572]	@ (8001018 <prvAsmissionControlEDF+0x2ac>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	1c59      	adds	r1, r3, #1
 8000de0:	1e4b      	subs	r3, r1, #1
 8000de2:	653b      	str	r3, [r7, #80]	@ 0x50
 8000de4:	460a      	mov	r2, r1
 8000de6:	2300      	movs	r3, #0
 8000de8:	60ba      	str	r2, [r7, #8]
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	f04f 0200 	mov.w	r2, #0
 8000df0:	f04f 0300 	mov.w	r3, #0
 8000df4:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8000df8:	4628      	mov	r0, r5
 8000dfa:	0143      	lsls	r3, r0, #5
 8000dfc:	4620      	mov	r0, r4
 8000dfe:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000e02:	4620      	mov	r0, r4
 8000e04:	0142      	lsls	r2, r0, #5
 8000e06:	460a      	mov	r2, r1
 8000e08:	2300      	movs	r3, #0
 8000e0a:	603a      	str	r2, [r7, #0]
 8000e0c:	607b      	str	r3, [r7, #4]
 8000e0e:	f04f 0200 	mov.w	r2, #0
 8000e12:	f04f 0300 	mov.w	r3, #0
 8000e16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8000e1a:	4628      	mov	r0, r5
 8000e1c:	0143      	lsls	r3, r0, #5
 8000e1e:	4620      	mov	r0, r4
 8000e20:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000e24:	4620      	mov	r0, r4
 8000e26:	0142      	lsls	r2, r0, #5
 8000e28:	460b      	mov	r3, r1
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	3307      	adds	r3, #7
 8000e2e:	08db      	lsrs	r3, r3, #3
 8000e30:	00db      	lsls	r3, r3, #3
 8000e32:	ebad 0d03 	sub.w	sp, sp, r3
 8000e36:	466b      	mov	r3, sp
 8000e38:	3303      	adds	r3, #3
 8000e3a:	089b      	lsrs	r3, r3, #2
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	BaseType_t numOfIntervals;
	TickType_t now = xTaskGetTickCount();
 8000e40:	f005 fb12 	bl	8006468 <xTaskGetTickCount>
 8000e44:	64b8      	str	r0, [r7, #72]	@ 0x48
	TickType_t xNewJobAbsDeadline = now + forTCB->xTaskDeadline;
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e4a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000e4c:	4413      	add	r3, r2
 8000e4e:	647b      	str	r3, [r7, #68]	@ 0x44
	TickType_t xTaskAbsDeadline = 0;
 8000e50:	2300      	movs	r3, #0
 8000e52:	643b      	str	r3, [r7, #64]	@ 0x40

		ListItem_t *xItm = listGET_HEAD_ENTRY(&xTasksList); // this is xListEnd.pxNext
 8000e54:	4b71      	ldr	r3, [pc, #452]	@ (800101c <prvAsmissionControlEDF+0x2b0>)
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	66fb      	str	r3, [r7, #108]	@ 0x6c
		for (int i = 0; i < xListTasksNumber; i++) {
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000e5e:	e047      	b.n	8000ef0 <prvAsmissionControlEDF+0x184>
			extTCB_t *xTCB = (extTCB_t *) xItm->pvOwner;
 8000e60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTaskAbsDeadline = xTCB->xPrevStartTime + xTCB->xTaskDeadline;
 8000e66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000e68:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000e6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000e6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e6e:	4413      	add	r3, r2
 8000e70:	643b      	str	r3, [r7, #64]	@ 0x40
			TickType_t xDval = xTaskAbsDeadline - now;
 8000e72:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000e74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000e76:	1ad3      	subs	r3, r2, r3
 8000e78:	63bb      	str	r3, [r7, #56]	@ 0x38
			if(xDval < xNewJobAbsDeadline){
 8000e7a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000e7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d214      	bcs.n	8000eac <prvAsmissionControlEDF+0x140>
				//calculate d-t for certain delta
				intervalsArray[i] = xDval - xPrev;
 8000e82:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000e84:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000e86:	1ad1      	subs	r1, r2, r3
 8000e88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000e8a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000e8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				intervalsStarts[i] = xPrev;
 8000e90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000e92:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000e94:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8000e96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				xPrev = xDval;
 8000e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000e9c:	677b      	str	r3, [r7, #116]	@ 0x74
				numOfIntervals++;
 8000e9e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	673b      	str	r3, [r7, #112]	@ 0x70
				intervalsArray[i] = xNewJobAbsDeadline - xPrev;
				intervalsStarts[i] = xPrev;
				numOfIntervals++;
				break;
			}
			configASSERT(xTCB != NULL);  
 8000ea4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d11c      	bne.n	8000ee4 <prvAsmissionControlEDF+0x178>
 8000eaa:	e00f      	b.n	8000ecc <prvAsmissionControlEDF+0x160>
				intervalsArray[i] = xNewJobAbsDeadline - xPrev;
 8000eac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000eae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000eb0:	1ad1      	subs	r1, r2, r3
 8000eb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000eb4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000eb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				intervalsStarts[i] = xPrev;
 8000eba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000ebc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000ebe:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8000ec0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				numOfIntervals++;
 8000ec4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	673b      	str	r3, [r7, #112]	@ 0x70
				break;
 8000eca:	e016      	b.n	8000efa <prvAsmissionControlEDF+0x18e>
	__asm volatile
 8000ecc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000ed0:	f383 8811 	msr	BASEPRI, r3
 8000ed4:	f3bf 8f6f 	isb	sy
 8000ed8:	f3bf 8f4f 	dsb	sy
 8000edc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8000ede:	bf00      	nop
			configASSERT(xTCB != NULL);  
 8000ee0:	bf00      	nop
 8000ee2:	e7fd      	b.n	8000ee0 <prvAsmissionControlEDF+0x174>
			
			xItm = listGET_NEXT(xItm);
 8000ee4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	66fb      	str	r3, [r7, #108]	@ 0x6c
		for (int i = 0; i < xListTasksNumber; i++) {
 8000eea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000eec:	3301      	adds	r3, #1
 8000eee:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000ef0:	4b49      	ldr	r3, [pc, #292]	@ (8001018 <prvAsmissionControlEDF+0x2ac>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000ef6:	429a      	cmp	r2, r3
 8000ef8:	dbb2      	blt.n	8000e60 <prvAsmissionControlEDF+0xf4>
	Now we calculate the density of each interval (fixed interval, all current tasks)
	When iterating, the task shall add to the density only if its interval overlaps, hence,
	only if its absolute deadline is higher than the interval start
	*/

	float densitiesArray[numOfIntervals];
 8000efa:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8000efc:	1e4b      	subs	r3, r1, #1
 8000efe:	637b      	str	r3, [r7, #52]	@ 0x34
 8000f00:	460a      	mov	r2, r1
 8000f02:	2300      	movs	r3, #0
 8000f04:	4692      	mov	sl, r2
 8000f06:	469b      	mov	fp, r3
 8000f08:	f04f 0200 	mov.w	r2, #0
 8000f0c:	f04f 0300 	mov.w	r3, #0
 8000f10:	ea4f 134b 	mov.w	r3, fp, lsl #5
 8000f14:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8000f18:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8000f1c:	460a      	mov	r2, r1
 8000f1e:	2300      	movs	r3, #0
 8000f20:	4690      	mov	r8, r2
 8000f22:	4699      	mov	r9, r3
 8000f24:	f04f 0200 	mov.w	r2, #0
 8000f28:	f04f 0300 	mov.w	r3, #0
 8000f2c:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8000f30:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8000f34:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8000f38:	460b      	mov	r3, r1
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	3307      	adds	r3, #7
 8000f3e:	08db      	lsrs	r3, r3, #3
 8000f40:	00db      	lsls	r3, r3, #3
 8000f42:	ebad 0d03 	sub.w	sp, sp, r3
 8000f46:	466b      	mov	r3, sp
 8000f48:	3303      	adds	r3, #3
 8000f4a:	089b      	lsrs	r3, r3, #2
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	633b      	str	r3, [r7, #48]	@ 0x30
	memset(densitiesArray, 0, sizeof(densitiesArray));
 8000f50:	460b      	mov	r3, r1
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	461a      	mov	r2, r3
 8000f56:	2100      	movs	r1, #0
 8000f58:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000f5a:	f007 fcc3 	bl	80088e4 <memset>

	xItm = listGET_HEAD_ENTRY(&xTasksList); // this is xListEnd.pxNext
 8000f5e:	4b2f      	ldr	r3, [pc, #188]	@ (800101c <prvAsmissionControlEDF+0x2b0>)
 8000f60:	68db      	ldr	r3, [r3, #12]
 8000f62:	66fb      	str	r3, [r7, #108]	@ 0x6c
		for (int i = 0; i < xListTasksNumber; i++) {
 8000f64:	2300      	movs	r3, #0
 8000f66:	667b      	str	r3, [r7, #100]	@ 0x64
 8000f68:	e04e      	b.n	8001008 <prvAsmissionControlEDF+0x29c>
			extTCB_t *xTCB = (extTCB_t *) xItm->pvOwner;
 8000f6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000f6c:	68db      	ldr	r3, [r3, #12]
 8000f6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
			xTaskAbsDeadline = xTCB->xPrevStartTime + xTCB->xTaskDeadline;
 8000f70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f72:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000f74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f78:	4413      	add	r3, r2
 8000f7a:	643b      	str	r3, [r7, #64]	@ 0x40
			for(int j = 0; j < numOfIntervals; j++){
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	663b      	str	r3, [r7, #96]	@ 0x60
 8000f80:	e027      	b.n	8000fd2 <prvAsmissionControlEDF+0x266>
				if(xTaskAbsDeadline >= intervalsStarts[j]){
 8000f82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000f84:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000f86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f8a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	d325      	bcc.n	8000fdc <prvAsmissionControlEDF+0x270>
					//to consider for the density
					densitiesArray[j] += ((float)(xTCB->xTaskWCET))/intervalsArray[j];
 8000f90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000f92:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	4413      	add	r3, r2
 8000f98:	ed93 7a00 	vldr	s14, [r3]
 8000f9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000fa0:	ee07 3a90 	vmov	s15, r3
 8000fa4:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 8000fa8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000faa:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000fac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fb0:	ee07 3a90 	vmov	s15, r3
 8000fb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000fb8:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8000fbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000fc2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	4413      	add	r3, r2
 8000fc8:	edc3 7a00 	vstr	s15, [r3]
			for(int j = 0; j < numOfIntervals; j++){
 8000fcc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000fce:	3301      	adds	r3, #1
 8000fd0:	663b      	str	r3, [r7, #96]	@ 0x60
 8000fd2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000fd4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000fd6:	429a      	cmp	r2, r3
 8000fd8:	dbd3      	blt.n	8000f82 <prvAsmissionControlEDF+0x216>
 8000fda:	e000      	b.n	8000fde <prvAsmissionControlEDF+0x272>
				}else{
					//not to be considered also for next intervals
					break;
 8000fdc:	bf00      	nop
				}
			}
			configASSERT(xTCB != NULL);  
 8000fde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d10b      	bne.n	8000ffc <prvAsmissionControlEDF+0x290>
	__asm volatile
 8000fe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000fe8:	f383 8811 	msr	BASEPRI, r3
 8000fec:	f3bf 8f6f 	isb	sy
 8000ff0:	f3bf 8f4f 	dsb	sy
 8000ff4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8000ff6:	bf00      	nop
 8000ff8:	bf00      	nop
 8000ffa:	e7fd      	b.n	8000ff8 <prvAsmissionControlEDF+0x28c>
			
			xItm = listGET_NEXT(xItm);
 8000ffc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	66fb      	str	r3, [r7, #108]	@ 0x6c
		for (int i = 0; i < xListTasksNumber; i++) {
 8001002:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001004:	3301      	adds	r3, #1
 8001006:	667b      	str	r3, [r7, #100]	@ 0x64
 8001008:	4b03      	ldr	r3, [pc, #12]	@ (8001018 <prvAsmissionControlEDF+0x2ac>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800100e:	429a      	cmp	r2, r3
 8001010:	dbab      	blt.n	8000f6a <prvAsmissionControlEDF+0x1fe>
		}

	/*
	At this point all densities have been computed, we can run the acceptances
	*/
	for(int i = 0; i <numOfIntervals; i++ ){
 8001012:	2300      	movs	r3, #0
 8001014:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001016:	e02b      	b.n	8001070 <prvAsmissionControlEDF+0x304>
 8001018:	20000094 	.word	0x20000094
 800101c:	20000080 	.word	0x20000080
		if (((float)forTCB->xTaskWCET / (xNewJobAbsDeadline - now)) 
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001024:	ee07 3a90 	vmov	s15, r3
 8001028:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800102c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800102e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	ee07 3a90 	vmov	s15, r3
 8001036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800103a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
		+ densitiesArray[i] > 1.0f - prvPeriodicTasksDensity){
 800103e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001040:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	4413      	add	r3, r2
 8001046:	edd3 7a00 	vldr	s15, [r3]
 800104a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800104e:	4b0e      	ldr	r3, [pc, #56]	@ (8001088 <prvAsmissionControlEDF+0x31c>)
 8001050:	edd3 7a00 	vldr	s15, [r3]
 8001054:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001058:	ee76 7ae7 	vsub.f32	s15, s13, s15
		if (((float)forTCB->xTaskWCET / (xNewJobAbsDeadline - now)) 
 800105c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001064:	dd01      	ble.n	800106a <prvAsmissionControlEDF+0x2fe>
				//not accepted
				return pdFALSE;
 8001066:	2300      	movs	r3, #0
 8001068:	e007      	b.n	800107a <prvAsmissionControlEDF+0x30e>
	for(int i = 0; i <numOfIntervals; i++ ){
 800106a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800106c:	3301      	adds	r3, #1
 800106e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001070:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001072:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001074:	429a      	cmp	r2, r3
 8001076:	dbd3      	blt.n	8001020 <prvAsmissionControlEDF+0x2b4>
			}
	}
	return pdTRUE;
 8001078:	2301      	movs	r3, #1
 800107a:	46b5      	mov	sp, r6
}
 800107c:	4618      	mov	r0, r3
 800107e:	377c      	adds	r7, #124	@ 0x7c
 8001080:	46bd      	mov	sp, r7
 8001082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001086:	bf00      	nop
 8001088:	2000009c 	.word	0x2000009c

0800108c <prvMSTDispatch>:
 * @param xOfTaskType the task can be periodic or sporadic
 * @param xFromUserRequest used for sporadic tasks. If true the user called the task to run. If false the interarrival timer asked to run the task
 */

static void prvMSTDispatch(TaskHandle_t *forTask, BaseType_t xAsCallee,
		taskType_e xOfTaskType, BaseType_t xFromUserRequest) {
 800108c:	b580      	push	{r7, lr}
 800108e:	b08c      	sub	sp, #48	@ 0x30
 8001090:	af00      	add	r7, sp, #0
 8001092:	60f8      	str	r0, [r7, #12]
 8001094:	60b9      	str	r1, [r7, #8]
 8001096:	603b      	str	r3, [r7, #0]
 8001098:	4613      	mov	r3, r2
 800109a:	71fb      	strb	r3, [r7, #7]

	if (xAsCallee == pdTRUE) {
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d179      	bne.n	8001196 <prvMSTDispatch+0x10a>
#if mst_schedSCHEDULING_POLICY == mst_schedSCHEDULING_EDF

		extTCB_t *xCurrExtTCB = (extTCB_t*) pvTaskGetThreadLocalStoragePointer(
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	2100      	movs	r1, #0
 80010a8:	4618      	mov	r0, r3
 80010aa:	f005 fd2d 	bl	8006b08 <pvTaskGetThreadLocalStoragePointer>
 80010ae:	62b8      	str	r0, [r7, #40]	@ 0x28
	                            *forTask, mstLOCAL_STORAGE_DATA_INDEX);

		/*
		We run admission control
		*/
		if(!prvAsmissionControlEDF(xCurrExtTCB)){
 80010b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80010b2:	f7ff fe5b 	bl	8000d6c <prvAsmissionControlEDF>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	f000 80b3 	beq.w	8001224 <prvMSTDispatch+0x198>
		}
		/*
		A job is accepted, we add it to list and recompute priorities
		*/
		
		taskENTER_CRITICAL();
 80010be:	f006 ff4b 	bl	8007f58 <vPortEnterCritical>
		{
		    if (vTasksListInit == pdFALSE) {
 80010c2:	4b5a      	ldr	r3, [pc, #360]	@ (800122c <prvMSTDispatch+0x1a0>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d108      	bne.n	80010dc <prvMSTDispatch+0x50>
		        vTasksListInit = pdTRUE;
 80010ca:	4b58      	ldr	r3, [pc, #352]	@ (800122c <prvMSTDispatch+0x1a0>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	601a      	str	r2, [r3, #0]
		        vListInitialise(&xTasksList);
 80010d0:	4857      	ldr	r0, [pc, #348]	@ (8001230 <prvMSTDispatch+0x1a4>)
 80010d2:	f003 fe2d 	bl	8004d30 <vListInitialise>
		        xListTasksNumber = 0;
 80010d6:	4b57      	ldr	r3, [pc, #348]	@ (8001234 <prvMSTDispatch+0x1a8>)
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
		    }
		    //TODO: This might not be ideal, would we want same task in list? This is a rejection
		    if (!listIS_CONTAINED_WITHIN(&xTasksList, &xCurrExtTCB->pxTaskTCBListItem)) {
 80010dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010de:	691b      	ldr	r3, [r3, #16]
 80010e0:	4a53      	ldr	r2, [pc, #332]	@ (8001230 <prvMSTDispatch+0x1a4>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d017      	beq.n	8001116 <prvMSTDispatch+0x8a>
		        vListInitialiseItem(&xCurrExtTCB->pxTaskTCBListItem);
 80010e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010e8:	4618      	mov	r0, r3
 80010ea:	f003 fe41 	bl	8004d70 <vListInitialiseItem>
		        listSET_LIST_ITEM_OWNER(&xCurrExtTCB->pxTaskTCBListItem, xCurrExtTCB);
 80010ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80010f2:	60da      	str	r2, [r3, #12]
		        listSET_LIST_ITEM_VALUE(&xCurrExtTCB->pxTaskTCBListItem,
 80010f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010f6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80010f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010fc:	441a      	add	r2, r3
 80010fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001100:	601a      	str	r2, [r3, #0]
		            xCurrExtTCB->xPrevAbsDeadline + xCurrExtTCB->xTaskDeadline);

		        vListInsertEnd(&xTasksList, &xCurrExtTCB->pxTaskTCBListItem);
 8001102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001104:	4619      	mov	r1, r3
 8001106:	484a      	ldr	r0, [pc, #296]	@ (8001230 <prvMSTDispatch+0x1a4>)
 8001108:	f003 fe3f 	bl	8004d8a <vListInsertEnd>
		        xListTasksNumber++;
 800110c:	4b49      	ldr	r3, [pc, #292]	@ (8001234 <prvMSTDispatch+0x1a8>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	3301      	adds	r3, #1
 8001112:	4a48      	ldr	r2, [pc, #288]	@ (8001234 <prvMSTDispatch+0x1a8>)
 8001114:	6013      	str	r3, [r2, #0]
		    }

		    configASSERT(prvComputeOrderedPriorities());
 8001116:	f7ff fd83 	bl	8000c20 <prvComputeOrderedPriorities>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d10b      	bne.n	8001138 <prvMSTDispatch+0xac>
	__asm volatile
 8001120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001124:	f383 8811 	msr	BASEPRI, r3
 8001128:	f3bf 8f6f 	isb	sy
 800112c:	f3bf 8f4f 	dsb	sy
 8001130:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8001132:	bf00      	nop
 8001134:	bf00      	nop
 8001136:	e7fd      	b.n	8001134 <prvMSTDispatch+0xa8>
		}
		taskEXIT_CRITICAL();
 8001138:	f006 ff40 	bl	8007fbc <vPortExitCritical>
#else
		//nothing
#endif
		switch (xOfTaskType) {
 800113c:	79fb      	ldrb	r3, [r7, #7]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d002      	beq.n	8001148 <prvMSTDispatch+0xbc>
 8001142:	2b01      	cmp	r3, #1
 8001144:	d008      	beq.n	8001158 <prvMSTDispatch+0xcc>
 8001146:	e01a      	b.n	800117e <prvMSTDispatch+0xf2>
		case taskTypePeriodic:
			//run the periodic task by unlocking the semaphore
			xTaskNotifyGive(*forTask);
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	6818      	ldr	r0, [r3, #0]
 800114c:	2300      	movs	r3, #0
 800114e:	2202      	movs	r2, #2
 8001150:	2100      	movs	r1, #0
 8001152:	f006 f8e1 	bl	8007318 <xTaskGenericNotify>
			break;
 8001156:	e066      	b.n	8001226 <prvMSTDispatch+0x19a>
		case taskTypeSporadic:
			if (xFromUserRequest == pdTRUE) {
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d107      	bne.n	800116e <prvMSTDispatch+0xe2>
				xTaskNotify(*forTask, NOTIFY_USER_REQUEST, eSetBits);
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	6818      	ldr	r0, [r3, #0]
 8001162:	2300      	movs	r3, #0
 8001164:	2201      	movs	r2, #1
 8001166:	2102      	movs	r1, #2
 8001168:	f006 f8d6 	bl	8007318 <xTaskGenericNotify>
			} else {
				xTaskNotify(*forTask, NOTIFY_INTERARRIVAL_TIMER, eSetBits);
			}
			break;
 800116c:	e05b      	b.n	8001226 <prvMSTDispatch+0x19a>
				xTaskNotify(*forTask, NOTIFY_INTERARRIVAL_TIMER, eSetBits);
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	6818      	ldr	r0, [r3, #0]
 8001172:	2300      	movs	r3, #0
 8001174:	2201      	movs	r2, #1
 8001176:	2101      	movs	r1, #1
 8001178:	f006 f8ce 	bl	8007318 <xTaskGenericNotify>
			break;
 800117c:	e053      	b.n	8001226 <prvMSTDispatch+0x19a>
	__asm volatile
 800117e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001182:	f383 8811 	msr	BASEPRI, r3
 8001186:	f3bf 8f6f 	isb	sy
 800118a:	f3bf 8f4f 	dsb	sy
 800118e:	623b      	str	r3, [r7, #32]
}
 8001190:	bf00      	nop
		default:
			configASSERT(pdFALSE)
 8001192:	bf00      	nop
 8001194:	e7fd      	b.n	8001192 <prvMSTDispatch+0x106>
	} else {
		/*
		 Received from a finished job, we shall remove the job from the actively running in the list
		 */
#if mst_schedSCHEDULING_POLICY == mst_schedSCHEDULING_EDF
    extTCB_t *xCurrExtTCB = (extTCB_t*) pvTaskGetThreadLocalStoragePointer(
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	2100      	movs	r1, #0
 800119c:	4618      	mov	r0, r3
 800119e:	f005 fcb3 	bl	8006b08 <pvTaskGetThreadLocalStoragePointer>
 80011a2:	62f8      	str	r0, [r7, #44]	@ 0x2c
                                *forTask, mstLOCAL_STORAGE_DATA_INDEX);

    configASSERT(xCurrExtTCB != NULL);
 80011a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d10b      	bne.n	80011c2 <prvMSTDispatch+0x136>
	__asm volatile
 80011aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80011ae:	f383 8811 	msr	BASEPRI, r3
 80011b2:	f3bf 8f6f 	isb	sy
 80011b6:	f3bf 8f4f 	dsb	sy
 80011ba:	61fb      	str	r3, [r7, #28]
}
 80011bc:	bf00      	nop
 80011be:	bf00      	nop
 80011c0:	e7fd      	b.n	80011be <prvMSTDispatch+0x132>

    taskENTER_CRITICAL();
 80011c2:	f006 fec9 	bl	8007f58 <vPortEnterCritical>
    {
        if (listIS_CONTAINED_WITHIN(&xTasksList, &(xCurrExtTCB->pxTaskTCBListItem))) {
 80011c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011c8:	691b      	ldr	r3, [r3, #16]
 80011ca:	4a19      	ldr	r2, [pc, #100]	@ (8001230 <prvMSTDispatch+0x1a4>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d10e      	bne.n	80011ee <prvMSTDispatch+0x162>
            uxListRemove(&(xCurrExtTCB->pxTaskTCBListItem));
 80011d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011d2:	4618      	mov	r0, r3
 80011d4:	f003 fe36 	bl	8004e44 <uxListRemove>
            xListTasksNumber--;
 80011d8:	4b16      	ldr	r3, [pc, #88]	@ (8001234 <prvMSTDispatch+0x1a8>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	3b01      	subs	r3, #1
 80011de:	4a15      	ldr	r2, [pc, #84]	@ (8001234 <prvMSTDispatch+0x1a8>)
 80011e0:	6013      	str	r3, [r2, #0]
        } else {
            configASSERT(pdFALSE);
        }

        configASSERT(prvComputeOrderedPriorities());
 80011e2:	f7ff fd1d 	bl	8000c20 <prvComputeOrderedPriorities>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d118      	bne.n	800121e <prvMSTDispatch+0x192>
 80011ec:	e00b      	b.n	8001206 <prvMSTDispatch+0x17a>
	__asm volatile
 80011ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80011f2:	f383 8811 	msr	BASEPRI, r3
 80011f6:	f3bf 8f6f 	isb	sy
 80011fa:	f3bf 8f4f 	dsb	sy
 80011fe:	61bb      	str	r3, [r7, #24]
}
 8001200:	bf00      	nop
            configASSERT(pdFALSE);
 8001202:	bf00      	nop
 8001204:	e7fd      	b.n	8001202 <prvMSTDispatch+0x176>
	__asm volatile
 8001206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800120a:	f383 8811 	msr	BASEPRI, r3
 800120e:	f3bf 8f6f 	isb	sy
 8001212:	f3bf 8f4f 	dsb	sy
 8001216:	617b      	str	r3, [r7, #20]
}
 8001218:	bf00      	nop
        configASSERT(prvComputeOrderedPriorities());
 800121a:	bf00      	nop
 800121c:	e7fd      	b.n	800121a <prvMSTDispatch+0x18e>
    }
    taskEXIT_CRITICAL();
 800121e:	f006 fecd 	bl	8007fbc <vPortExitCritical>
 8001222:	e000      	b.n	8001226 <prvMSTDispatch+0x19a>
			return;
 8001224:	bf00      	nop

#endif
	}

}
 8001226:	3730      	adds	r7, #48	@ 0x30
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	2000007c 	.word	0x2000007c
 8001230:	20000080 	.word	0x20000080
 8001234:	20000094 	.word	0x20000094

08001238 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
	ulStatsTimerTicks = 0;
 800123c:	4b03      	ldr	r3, [pc, #12]	@ (800124c <configureTimerForRunTimeStats+0x14>)
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim10);
 8001242:	4803      	ldr	r0, [pc, #12]	@ (8001250 <configureTimerForRunTimeStats+0x18>)
 8001244:	f002 f8ec 	bl	8003420 <HAL_TIM_Base_Start_IT>
}
 8001248:	bf00      	nop
 800124a:	bd80      	pop	{r7, pc}
 800124c:	200000a4 	.word	0x200000a4
 8001250:	200000f0 	.word	0x200000f0

08001254 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
return ulStatsTimerTicks;
 8001258:	4b03      	ldr	r3, [pc, #12]	@ (8001268 <getRunTimeCounterValue+0x14>)
 800125a:	681b      	ldr	r3, [r3, #0]
}
 800125c:	4618      	mov	r0, r3
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	200000a4 	.word	0x200000a4

0800126c <MSTTask1>:
TaskHandle_t Task1Handle;
TaskHandle_t Task2Handle;
TaskHandle_t Task3Handle;
TaskHandle_t Task4Handle;

void MSTTask1(void *pvParameters) {
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
	if (xSemaphoreTake(xBinarySemUART2, portMAX_DELAY) == pdTRUE) {
 8001274:	4b10      	ldr	r3, [pc, #64]	@ (80012b8 <MSTTask1+0x4c>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800127c:	4618      	mov	r0, r3
 800127e:	f004 fa63 	bl	8005748 <xQueueSemaphoreTake>
 8001282:	4603      	mov	r3, r0
 8001284:	2b01      	cmp	r3, #1
 8001286:	d113      	bne.n	80012b0 <MSTTask1+0x44>
		length = snprintf((char*) transmit, sizeof(transmit), "Task1\n");
 8001288:	4a0c      	ldr	r2, [pc, #48]	@ (80012bc <MSTTask1+0x50>)
 800128a:	2114      	movs	r1, #20
 800128c:	480c      	ldr	r0, [pc, #48]	@ (80012c0 <MSTTask1+0x54>)
 800128e:	f007 faf3 	bl	8008878 <sniprintf>
 8001292:	4603      	mov	r3, r0
 8001294:	4a0b      	ldr	r2, [pc, #44]	@ (80012c4 <MSTTask1+0x58>)
 8001296:	6013      	str	r3, [r2, #0]
		HAL_Delay(300);
 8001298:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800129c:	f000 fd5a 	bl	8001d54 <HAL_Delay>
		HAL_UART_Transmit_DMA(&huart2, transmit, length);
 80012a0:	4b08      	ldr	r3, [pc, #32]	@ (80012c4 <MSTTask1+0x58>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	461a      	mov	r2, r3
 80012a8:	4905      	ldr	r1, [pc, #20]	@ (80012c0 <MSTTask1+0x54>)
 80012aa:	4807      	ldr	r0, [pc, #28]	@ (80012c8 <MSTTask1+0x5c>)
 80012ac:	f002 fcf2 	bl	8003c94 <HAL_UART_Transmit_DMA>
	}
}
 80012b0:	bf00      	nop
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	20000228 	.word	0x20000228
 80012bc:	080092e8 	.word	0x080092e8
 80012c0:	2000022c 	.word	0x2000022c
 80012c4:	20000240 	.word	0x20000240
 80012c8:	20000180 	.word	0x20000180

080012cc <MSTTask2>:

void MSTTask2(void *pvParameters) {
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
	vMSTSporadicTaskRun(&Task3Handle);
 80012d4:	4811      	ldr	r0, [pc, #68]	@ (800131c <MSTTask2+0x50>)
 80012d6:	f7ff fc65 	bl	8000ba4 <vMSTSporadicTaskRun>
	vMSTSporadicTaskRun(&Task4Handle);
 80012da:	4811      	ldr	r0, [pc, #68]	@ (8001320 <MSTTask2+0x54>)
 80012dc:	f7ff fc62 	bl	8000ba4 <vMSTSporadicTaskRun>
	if (xSemaphoreTake(xBinarySemUART2, portMAX_DELAY) == pdTRUE) {
 80012e0:	4b10      	ldr	r3, [pc, #64]	@ (8001324 <MSTTask2+0x58>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80012e8:	4618      	mov	r0, r3
 80012ea:	f004 fa2d 	bl	8005748 <xQueueSemaphoreTake>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d10f      	bne.n	8001314 <MSTTask2+0x48>
		length = snprintf((char*) transmit, sizeof(transmit), "Task2\n");
 80012f4:	4a0c      	ldr	r2, [pc, #48]	@ (8001328 <MSTTask2+0x5c>)
 80012f6:	2114      	movs	r1, #20
 80012f8:	480c      	ldr	r0, [pc, #48]	@ (800132c <MSTTask2+0x60>)
 80012fa:	f007 fabd 	bl	8008878 <sniprintf>
 80012fe:	4603      	mov	r3, r0
 8001300:	4a0b      	ldr	r2, [pc, #44]	@ (8001330 <MSTTask2+0x64>)
 8001302:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit_DMA(&huart2, transmit, length);
 8001304:	4b0a      	ldr	r3, [pc, #40]	@ (8001330 <MSTTask2+0x64>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	b29b      	uxth	r3, r3
 800130a:	461a      	mov	r2, r3
 800130c:	4907      	ldr	r1, [pc, #28]	@ (800132c <MSTTask2+0x60>)
 800130e:	4809      	ldr	r0, [pc, #36]	@ (8001334 <MSTTask2+0x68>)
 8001310:	f002 fcc0 	bl	8003c94 <HAL_UART_Transmit_DMA>
	}
}
 8001314:	bf00      	nop
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	2000024c 	.word	0x2000024c
 8001320:	20000250 	.word	0x20000250
 8001324:	20000228 	.word	0x20000228
 8001328:	080092f0 	.word	0x080092f0
 800132c:	2000022c 	.word	0x2000022c
 8001330:	20000240 	.word	0x20000240
 8001334:	20000180 	.word	0x20000180

08001338 <MSTTask3>:

void MSTTask3(void *pvParameters) {
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
	if (xSemaphoreTake(xBinarySemUART2, portMAX_DELAY) == pdTRUE) {
 8001340:	4b0e      	ldr	r3, [pc, #56]	@ (800137c <MSTTask3+0x44>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001348:	4618      	mov	r0, r3
 800134a:	f004 f9fd 	bl	8005748 <xQueueSemaphoreTake>
 800134e:	4603      	mov	r3, r0
 8001350:	2b01      	cmp	r3, #1
 8001352:	d10f      	bne.n	8001374 <MSTTask3+0x3c>
		length = snprintf((char*) transmit, sizeof(transmit), "SPORADIC1\n");
 8001354:	4a0a      	ldr	r2, [pc, #40]	@ (8001380 <MSTTask3+0x48>)
 8001356:	2114      	movs	r1, #20
 8001358:	480a      	ldr	r0, [pc, #40]	@ (8001384 <MSTTask3+0x4c>)
 800135a:	f007 fa8d 	bl	8008878 <sniprintf>
 800135e:	4603      	mov	r3, r0
 8001360:	4a09      	ldr	r2, [pc, #36]	@ (8001388 <MSTTask3+0x50>)
 8001362:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit_DMA(&huart2, transmit, length);
 8001364:	4b08      	ldr	r3, [pc, #32]	@ (8001388 <MSTTask3+0x50>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	b29b      	uxth	r3, r3
 800136a:	461a      	mov	r2, r3
 800136c:	4905      	ldr	r1, [pc, #20]	@ (8001384 <MSTTask3+0x4c>)
 800136e:	4807      	ldr	r0, [pc, #28]	@ (800138c <MSTTask3+0x54>)
 8001370:	f002 fc90 	bl	8003c94 <HAL_UART_Transmit_DMA>
	}
}
 8001374:	bf00      	nop
 8001376:	3708      	adds	r7, #8
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	20000228 	.word	0x20000228
 8001380:	080092f8 	.word	0x080092f8
 8001384:	2000022c 	.word	0x2000022c
 8001388:	20000240 	.word	0x20000240
 800138c:	20000180 	.word	0x20000180

08001390 <MSTTask4>:

void MSTTask4(void *pvParameters) {
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
	if (xSemaphoreTake(xBinarySemUART2, portMAX_DELAY) == pdTRUE) {
 8001398:	4b0e      	ldr	r3, [pc, #56]	@ (80013d4 <MSTTask4+0x44>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80013a0:	4618      	mov	r0, r3
 80013a2:	f004 f9d1 	bl	8005748 <xQueueSemaphoreTake>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d10f      	bne.n	80013cc <MSTTask4+0x3c>
		length = snprintf((char*) transmit, sizeof(transmit), "SPORADIC2\n");
 80013ac:	4a0a      	ldr	r2, [pc, #40]	@ (80013d8 <MSTTask4+0x48>)
 80013ae:	2114      	movs	r1, #20
 80013b0:	480a      	ldr	r0, [pc, #40]	@ (80013dc <MSTTask4+0x4c>)
 80013b2:	f007 fa61 	bl	8008878 <sniprintf>
 80013b6:	4603      	mov	r3, r0
 80013b8:	4a09      	ldr	r2, [pc, #36]	@ (80013e0 <MSTTask4+0x50>)
 80013ba:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit_DMA(&huart2, transmit, length);
 80013bc:	4b08      	ldr	r3, [pc, #32]	@ (80013e0 <MSTTask4+0x50>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	b29b      	uxth	r3, r3
 80013c2:	461a      	mov	r2, r3
 80013c4:	4905      	ldr	r1, [pc, #20]	@ (80013dc <MSTTask4+0x4c>)
 80013c6:	4807      	ldr	r0, [pc, #28]	@ (80013e4 <MSTTask4+0x54>)
 80013c8:	f002 fc64 	bl	8003c94 <HAL_UART_Transmit_DMA>
	}
}
 80013cc:	bf00      	nop
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	20000228 	.word	0x20000228
 80013d8:	08009304 	.word	0x08009304
 80013dc:	2000022c 	.word	0x2000022c
 80013e0:	20000240 	.word	0x20000240
 80013e4:	20000180 	.word	0x20000180

080013e8 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
	if (huart == &huart2) {
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	4a08      	ldr	r2, [pc, #32]	@ (8001414 <HAL_UART_TxCpltCallback+0x2c>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d109      	bne.n	800140c <HAL_UART_TxCpltCallback+0x24>
		//free sem
		BaseType_t xHigherPr = pdFALSE;
 80013f8:	2300      	movs	r3, #0
 80013fa:	60fb      	str	r3, [r7, #12]
		xSemaphoreGiveFromISR(xBinarySemUART2, &xHigherPr);
 80013fc:	4b06      	ldr	r3, [pc, #24]	@ (8001418 <HAL_UART_TxCpltCallback+0x30>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f107 020c 	add.w	r2, r7, #12
 8001404:	4611      	mov	r1, r2
 8001406:	4618      	mov	r0, r3
 8001408:	f004 f82c 	bl	8005464 <xQueueGiveFromISR>
	}
}
 800140c:	bf00      	nop
 800140e:	3710      	adds	r7, #16
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	20000180 	.word	0x20000180
 8001418:	20000228 	.word	0x20000228

0800141c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af06      	add	r7, sp, #24
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001422:	f000 fc55 	bl	8001cd0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001426:	f000 f889 	bl	800153c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800142a:	f000 f9d3 	bl	80017d4 <MX_GPIO_Init>
	MX_DMA_Init();
 800142e:	f000 f9b1 	bl	8001794 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8001432:	f000 f985 	bl	8001740 <MX_USART2_UART_Init>
	MX_USART1_UART_Init();
 8001436:	f000 f959 	bl	80016ec <MX_USART1_UART_Init>
	MX_TIM10_Init();
 800143a:	f000 f935 	bl	80016a8 <MX_TIM10_Init>
	MX_TIM2_Init();
 800143e:	f000 f8e7 	bl	8001610 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */

	xBinarySemUART2 = xSemaphoreCreateBinary();
 8001442:	2203      	movs	r2, #3
 8001444:	2100      	movs	r1, #0
 8001446:	2001      	movs	r0, #1
 8001448:	f003 fe0d 	bl	8005066 <xQueueGenericCreate>
 800144c:	4603      	mov	r3, r0
 800144e:	4a2e      	ldr	r2, [pc, #184]	@ (8001508 <main+0xec>)
 8001450:	6013      	str	r3, [r2, #0]
	xSemaphoreGive(xBinarySemUART2);
 8001452:	4b2d      	ldr	r3, [pc, #180]	@ (8001508 <main+0xec>)
 8001454:	6818      	ldr	r0, [r3, #0]
 8001456:	2300      	movs	r3, #0
 8001458:	2200      	movs	r2, #0
 800145a:	2100      	movs	r1, #0
 800145c:	f003 fe62 	bl	8005124 <xQueueGenericSend>

	vMSTPeriodicTaskCreate(MSTTask1,                  // Function to execute
 8001460:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8001464:	9305      	str	r3, [sp, #20]
 8001466:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800146a:	9304      	str	r3, [sp, #16]
 800146c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001470:	9303      	str	r3, [sp, #12]
 8001472:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001476:	9302      	str	r3, [sp, #8]
 8001478:	4b24      	ldr	r3, [pc, #144]	@ (800150c <main+0xf0>)
 800147a:	9301      	str	r3, [sp, #4]
 800147c:	2305      	movs	r3, #5
 800147e:	9300      	str	r3, [sp, #0]
 8001480:	2300      	movs	r3, #0
 8001482:	2280      	movs	r2, #128	@ 0x80
 8001484:	4922      	ldr	r1, [pc, #136]	@ (8001510 <main+0xf4>)
 8001486:	4823      	ldr	r0, [pc, #140]	@ (8001514 <main+0xf8>)
 8001488:	f7ff f944 	bl	8000714 <vMSTPeriodicTaskCreate>
	                       500,                       //deadline
	                       500,                       //phase
	                       300                        //WCET
	                      );

	vMSTPeriodicTaskCreate(MSTTask2, "2",
 800148c:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8001490:	9305      	str	r3, [sp, #20]
 8001492:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001496:	9304      	str	r3, [sp, #16]
 8001498:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800149c:	9303      	str	r3, [sp, #12]
 800149e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014a2:	9302      	str	r3, [sp, #8]
 80014a4:	4b1c      	ldr	r3, [pc, #112]	@ (8001518 <main+0xfc>)
 80014a6:	9301      	str	r3, [sp, #4]
 80014a8:	2302      	movs	r3, #2
 80014aa:	9300      	str	r3, [sp, #0]
 80014ac:	2300      	movs	r3, #0
 80014ae:	2280      	movs	r2, #128	@ 0x80
 80014b0:	491a      	ldr	r1, [pc, #104]	@ (800151c <main+0x100>)
 80014b2:	481b      	ldr	r0, [pc, #108]	@ (8001520 <main+0x104>)
 80014b4:	f7ff f92e 	bl	8000714 <vMSTPeriodicTaskCreate>
	                       configMINIMAL_STACK_SIZE,
	                       NULL, 2, &Task2Handle, 1000, 300, 10000, 300);

	vMSTSporadicTaskCreate(MSTTask3, "3",
 80014b8:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80014bc:	9304      	str	r3, [sp, #16]
 80014be:	23c8      	movs	r3, #200	@ 0xc8
 80014c0:	9303      	str	r3, [sp, #12]
 80014c2:	2301      	movs	r3, #1
 80014c4:	9302      	str	r3, [sp, #8]
 80014c6:	4b17      	ldr	r3, [pc, #92]	@ (8001524 <main+0x108>)
 80014c8:	9301      	str	r3, [sp, #4]
 80014ca:	2301      	movs	r3, #1
 80014cc:	9300      	str	r3, [sp, #0]
 80014ce:	2300      	movs	r3, #0
 80014d0:	2280      	movs	r2, #128	@ 0x80
 80014d2:	4915      	ldr	r1, [pc, #84]	@ (8001528 <main+0x10c>)
 80014d4:	4815      	ldr	r0, [pc, #84]	@ (800152c <main+0x110>)
 80014d6:	f7ff fa37 	bl	8000948 <vMSTSporadicTaskCreate>
	                       configMINIMAL_STACK_SIZE,
	                       NULL, 1, &Task3Handle, 1,
	                       200, 300);
	vMSTSporadicTaskCreate(MSTTask4, "4",
 80014da:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80014de:	9304      	str	r3, [sp, #16]
 80014e0:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80014e4:	9303      	str	r3, [sp, #12]
 80014e6:	2301      	movs	r3, #1
 80014e8:	9302      	str	r3, [sp, #8]
 80014ea:	4b11      	ldr	r3, [pc, #68]	@ (8001530 <main+0x114>)
 80014ec:	9301      	str	r3, [sp, #4]
 80014ee:	2301      	movs	r3, #1
 80014f0:	9300      	str	r3, [sp, #0]
 80014f2:	2300      	movs	r3, #0
 80014f4:	2280      	movs	r2, #128	@ 0x80
 80014f6:	490f      	ldr	r1, [pc, #60]	@ (8001534 <main+0x118>)
 80014f8:	480f      	ldr	r0, [pc, #60]	@ (8001538 <main+0x11c>)
 80014fa:	f7ff fa25 	bl	8000948 <vMSTSporadicTaskCreate>
		                   configMINIMAL_STACK_SIZE,
		                   NULL, 1, &Task4Handle, 1,
		                   300, 300);

	vMSTSchedulerStart();
 80014fe:	f7ff fc2d 	bl	8000d5c <vMSTSchedulerStart>

	//shall never arrive here
	for (;;)
 8001502:	bf00      	nop
 8001504:	e7fd      	b.n	8001502 <main+0xe6>
 8001506:	bf00      	nop
 8001508:	20000228 	.word	0x20000228
 800150c:	20000244 	.word	0x20000244
 8001510:	08009310 	.word	0x08009310
 8001514:	0800126d 	.word	0x0800126d
 8001518:	20000248 	.word	0x20000248
 800151c:	08009314 	.word	0x08009314
 8001520:	080012cd 	.word	0x080012cd
 8001524:	2000024c 	.word	0x2000024c
 8001528:	08009318 	.word	0x08009318
 800152c:	08001339 	.word	0x08001339
 8001530:	20000250 	.word	0x20000250
 8001534:	0800931c 	.word	0x0800931c
 8001538:	08001391 	.word	0x08001391

0800153c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800153c:	b580      	push	{r7, lr}
 800153e:	b094      	sub	sp, #80	@ 0x50
 8001540:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001542:	f107 0320 	add.w	r3, r7, #32
 8001546:	2230      	movs	r2, #48	@ 0x30
 8001548:	2100      	movs	r1, #0
 800154a:	4618      	mov	r0, r3
 800154c:	f007 f9ca 	bl	80088e4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001550:	f107 030c 	add.w	r3, r7, #12
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	609a      	str	r2, [r3, #8]
 800155c:	60da      	str	r2, [r3, #12]
 800155e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001560:	2300      	movs	r3, #0
 8001562:	60bb      	str	r3, [r7, #8]
 8001564:	4b28      	ldr	r3, [pc, #160]	@ (8001608 <SystemClock_Config+0xcc>)
 8001566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001568:	4a27      	ldr	r2, [pc, #156]	@ (8001608 <SystemClock_Config+0xcc>)
 800156a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800156e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001570:	4b25      	ldr	r3, [pc, #148]	@ (8001608 <SystemClock_Config+0xcc>)
 8001572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001574:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001578:	60bb      	str	r3, [r7, #8]
 800157a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800157c:	2300      	movs	r3, #0
 800157e:	607b      	str	r3, [r7, #4]
 8001580:	4b22      	ldr	r3, [pc, #136]	@ (800160c <SystemClock_Config+0xd0>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001588:	4a20      	ldr	r2, [pc, #128]	@ (800160c <SystemClock_Config+0xd0>)
 800158a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800158e:	6013      	str	r3, [r2, #0]
 8001590:	4b1e      	ldr	r3, [pc, #120]	@ (800160c <SystemClock_Config+0xd0>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001598:	607b      	str	r3, [r7, #4]
 800159a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800159c:	2302      	movs	r3, #2
 800159e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015a0:	2301      	movs	r3, #1
 80015a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015a4:	2310      	movs	r3, #16
 80015a6:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015a8:	2302      	movs	r3, #2
 80015aa:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015ac:	2300      	movs	r3, #0
 80015ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 80015b0:	2310      	movs	r3, #16
 80015b2:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 192;
 80015b4:	23c0      	movs	r3, #192	@ 0xc0
 80015b6:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 80015b8:	2308      	movs	r3, #8
 80015ba:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80015bc:	2304      	movs	r3, #4
 80015be:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80015c0:	f107 0320 	add.w	r3, r7, #32
 80015c4:	4618      	mov	r0, r3
 80015c6:	f001 fa51 	bl	8002a6c <HAL_RCC_OscConfig>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <SystemClock_Config+0x98>
		Error_Handler();
 80015d0:	f000 f92c 	bl	800182c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80015d4:	230f      	movs	r3, #15
 80015d6:	60fb      	str	r3, [r7, #12]
	                              | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015d8:	2302      	movs	r3, #2
 80015da:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015dc:	2300      	movs	r3, #0
 80015de:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015e0:	2300      	movs	r3, #0
 80015e2:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015e4:	2300      	movs	r3, #0
 80015e6:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80015e8:	f107 030c 	add.w	r3, r7, #12
 80015ec:	2100      	movs	r1, #0
 80015ee:	4618      	mov	r0, r3
 80015f0:	f001 fcb4 	bl	8002f5c <HAL_RCC_ClockConfig>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <SystemClock_Config+0xc2>
		Error_Handler();
 80015fa:	f000 f917 	bl	800182c <Error_Handler>
	}
}
 80015fe:	bf00      	nop
 8001600:	3750      	adds	r7, #80	@ 0x50
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40023800 	.word	0x40023800
 800160c:	40007000 	.word	0x40007000

08001610 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001616:	f107 0308 	add.w	r3, r7, #8
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	605a      	str	r2, [r3, #4]
 8001620:	609a      	str	r2, [r3, #8]
 8001622:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001624:	463b      	mov	r3, r7
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800162c:	4b1d      	ldr	r3, [pc, #116]	@ (80016a4 <MX_TIM2_Init+0x94>)
 800162e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001632:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 24 - 1;
 8001634:	4b1b      	ldr	r3, [pc, #108]	@ (80016a4 <MX_TIM2_Init+0x94>)
 8001636:	2217      	movs	r2, #23
 8001638:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800163a:	4b1a      	ldr	r3, [pc, #104]	@ (80016a4 <MX_TIM2_Init+0x94>)
 800163c:	2200      	movs	r2, #0
 800163e:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 8001640:	4b18      	ldr	r3, [pc, #96]	@ (80016a4 <MX_TIM2_Init+0x94>)
 8001642:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001646:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001648:	4b16      	ldr	r3, [pc, #88]	@ (80016a4 <MX_TIM2_Init+0x94>)
 800164a:	2200      	movs	r2, #0
 800164c:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800164e:	4b15      	ldr	r3, [pc, #84]	@ (80016a4 <MX_TIM2_Init+0x94>)
 8001650:	2200      	movs	r2, #0
 8001652:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001654:	4813      	ldr	r0, [pc, #76]	@ (80016a4 <MX_TIM2_Init+0x94>)
 8001656:	f001 fe93 	bl	8003380 <HAL_TIM_Base_Init>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_TIM2_Init+0x54>
		Error_Handler();
 8001660:	f000 f8e4 	bl	800182c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001664:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001668:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 800166a:	f107 0308 	add.w	r3, r7, #8
 800166e:	4619      	mov	r1, r3
 8001670:	480c      	ldr	r0, [pc, #48]	@ (80016a4 <MX_TIM2_Init+0x94>)
 8001672:	f002 f827 	bl	80036c4 <HAL_TIM_ConfigClockSource>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_TIM2_Init+0x70>
		Error_Handler();
 800167c:	f000 f8d6 	bl	800182c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001680:	2300      	movs	r3, #0
 8001682:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001684:	2300      	movs	r3, #0
 8001686:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001688:	463b      	mov	r3, r7
 800168a:	4619      	mov	r1, r3
 800168c:	4805      	ldr	r0, [pc, #20]	@ (80016a4 <MX_TIM2_Init+0x94>)
 800168e:	f002 fa2f 	bl	8003af0 <HAL_TIMEx_MasterConfigSynchronization>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <MX_TIM2_Init+0x8c>
	        != HAL_OK) {
		Error_Handler();
 8001698:	f000 f8c8 	bl	800182c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 800169c:	bf00      	nop
 800169e:	3718      	adds	r7, #24
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	200000a8 	.word	0x200000a8

080016a8 <MX_TIM10_Init>:
/**
 * @brief TIM10 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM10_Init(void) {
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
	/* USER CODE END TIM10_Init 0 */

	/* USER CODE BEGIN TIM10_Init 1 */

	/* USER CODE END TIM10_Init 1 */
	htim10.Instance = TIM10;
 80016ac:	4b0d      	ldr	r3, [pc, #52]	@ (80016e4 <MX_TIM10_Init+0x3c>)
 80016ae:	4a0e      	ldr	r2, [pc, #56]	@ (80016e8 <MX_TIM10_Init+0x40>)
 80016b0:	601a      	str	r2, [r3, #0]
	htim10.Init.Prescaler = 15;
 80016b2:	4b0c      	ldr	r3, [pc, #48]	@ (80016e4 <MX_TIM10_Init+0x3c>)
 80016b4:	220f      	movs	r2, #15
 80016b6:	605a      	str	r2, [r3, #4]
	htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b8:	4b0a      	ldr	r3, [pc, #40]	@ (80016e4 <MX_TIM10_Init+0x3c>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	609a      	str	r2, [r3, #8]
	htim10.Init.Period = 99;
 80016be:	4b09      	ldr	r3, [pc, #36]	@ (80016e4 <MX_TIM10_Init+0x3c>)
 80016c0:	2263      	movs	r2, #99	@ 0x63
 80016c2:	60da      	str	r2, [r3, #12]
	htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016c4:	4b07      	ldr	r3, [pc, #28]	@ (80016e4 <MX_TIM10_Init+0x3c>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	611a      	str	r2, [r3, #16]
	htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ca:	4b06      	ldr	r3, [pc, #24]	@ (80016e4 <MX_TIM10_Init+0x3c>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim10) != HAL_OK) {
 80016d0:	4804      	ldr	r0, [pc, #16]	@ (80016e4 <MX_TIM10_Init+0x3c>)
 80016d2:	f001 fe55 	bl	8003380 <HAL_TIM_Base_Init>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <MX_TIM10_Init+0x38>
		Error_Handler();
 80016dc:	f000 f8a6 	bl	800182c <Error_Handler>
	}
	/* USER CODE BEGIN TIM10_Init 2 */

	/* USER CODE END TIM10_Init 2 */

}
 80016e0:	bf00      	nop
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	200000f0 	.word	0x200000f0
 80016e8:	40014400 	.word	0x40014400

080016ec <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80016f0:	4b11      	ldr	r3, [pc, #68]	@ (8001738 <MX_USART1_UART_Init+0x4c>)
 80016f2:	4a12      	ldr	r2, [pc, #72]	@ (800173c <MX_USART1_UART_Init+0x50>)
 80016f4:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80016f6:	4b10      	ldr	r3, [pc, #64]	@ (8001738 <MX_USART1_UART_Init+0x4c>)
 80016f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016fc:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001738 <MX_USART1_UART_Init+0x4c>)
 8001700:	2200      	movs	r2, #0
 8001702:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001704:	4b0c      	ldr	r3, [pc, #48]	@ (8001738 <MX_USART1_UART_Init+0x4c>)
 8001706:	2200      	movs	r2, #0
 8001708:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800170a:	4b0b      	ldr	r3, [pc, #44]	@ (8001738 <MX_USART1_UART_Init+0x4c>)
 800170c:	2200      	movs	r2, #0
 800170e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001710:	4b09      	ldr	r3, [pc, #36]	@ (8001738 <MX_USART1_UART_Init+0x4c>)
 8001712:	220c      	movs	r2, #12
 8001714:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001716:	4b08      	ldr	r3, [pc, #32]	@ (8001738 <MX_USART1_UART_Init+0x4c>)
 8001718:	2200      	movs	r2, #0
 800171a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800171c:	4b06      	ldr	r3, [pc, #24]	@ (8001738 <MX_USART1_UART_Init+0x4c>)
 800171e:	2200      	movs	r2, #0
 8001720:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001722:	4805      	ldr	r0, [pc, #20]	@ (8001738 <MX_USART1_UART_Init+0x4c>)
 8001724:	f002 fa66 	bl	8003bf4 <HAL_UART_Init>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 800172e:	f000 f87d 	bl	800182c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20000138 	.word	0x20000138
 800173c:	40011000 	.word	0x40011000

08001740 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001744:	4b11      	ldr	r3, [pc, #68]	@ (800178c <MX_USART2_UART_Init+0x4c>)
 8001746:	4a12      	ldr	r2, [pc, #72]	@ (8001790 <MX_USART2_UART_Init+0x50>)
 8001748:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 800174a:	4b10      	ldr	r3, [pc, #64]	@ (800178c <MX_USART2_UART_Init+0x4c>)
 800174c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001750:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001752:	4b0e      	ldr	r3, [pc, #56]	@ (800178c <MX_USART2_UART_Init+0x4c>)
 8001754:	2200      	movs	r2, #0
 8001756:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001758:	4b0c      	ldr	r3, [pc, #48]	@ (800178c <MX_USART2_UART_Init+0x4c>)
 800175a:	2200      	movs	r2, #0
 800175c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800175e:	4b0b      	ldr	r3, [pc, #44]	@ (800178c <MX_USART2_UART_Init+0x4c>)
 8001760:	2200      	movs	r2, #0
 8001762:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001764:	4b09      	ldr	r3, [pc, #36]	@ (800178c <MX_USART2_UART_Init+0x4c>)
 8001766:	220c      	movs	r2, #12
 8001768:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800176a:	4b08      	ldr	r3, [pc, #32]	@ (800178c <MX_USART2_UART_Init+0x4c>)
 800176c:	2200      	movs	r2, #0
 800176e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001770:	4b06      	ldr	r3, [pc, #24]	@ (800178c <MX_USART2_UART_Init+0x4c>)
 8001772:	2200      	movs	r2, #0
 8001774:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001776:	4805      	ldr	r0, [pc, #20]	@ (800178c <MX_USART2_UART_Init+0x4c>)
 8001778:	f002 fa3c 	bl	8003bf4 <HAL_UART_Init>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8001782:	f000 f853 	bl	800182c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	20000180 	.word	0x20000180
 8001790:	40004400 	.word	0x40004400

08001794 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	607b      	str	r3, [r7, #4]
 800179e:	4b0c      	ldr	r3, [pc, #48]	@ (80017d0 <MX_DMA_Init+0x3c>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a2:	4a0b      	ldr	r2, [pc, #44]	@ (80017d0 <MX_DMA_Init+0x3c>)
 80017a4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80017a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017aa:	4b09      	ldr	r3, [pc, #36]	@ (80017d0 <MX_DMA_Init+0x3c>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017b2:	607b      	str	r3, [r7, #4]
 80017b4:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80017b6:	2200      	movs	r2, #0
 80017b8:	2105      	movs	r1, #5
 80017ba:	2011      	movs	r0, #17
 80017bc:	f000 fba6 	bl	8001f0c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80017c0:	2011      	movs	r0, #17
 80017c2:	f000 fbbf 	bl	8001f44 <HAL_NVIC_EnableIRQ>

}
 80017c6:	bf00      	nop
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40023800 	.word	0x40023800

080017d4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	607b      	str	r3, [r7, #4]
 80017de:	4b09      	ldr	r3, [pc, #36]	@ (8001804 <MX_GPIO_Init+0x30>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e2:	4a08      	ldr	r2, [pc, #32]	@ (8001804 <MX_GPIO_Init+0x30>)
 80017e4:	f043 0301 	orr.w	r3, r3, #1
 80017e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ea:	4b06      	ldr	r3, [pc, #24]	@ (8001804 <MX_GPIO_Init+0x30>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	607b      	str	r3, [r7, #4]
 80017f4:	687b      	ldr	r3, [r7, #4]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80017f6:	bf00      	nop
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	40023800 	.word	0x40023800

08001808 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM9) {
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a04      	ldr	r2, [pc, #16]	@ (8001828 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d101      	bne.n	800181e <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800181a:	f000 fa7b 	bl	8001d14 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800181e:	bf00      	nop
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	40014000 	.word	0x40014000

0800182c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001830:	b672      	cpsid	i
}
 8001832:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001834:	bf00      	nop
 8001836:	e7fd      	b.n	8001834 <Error_Handler+0x8>

08001838 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	607b      	str	r3, [r7, #4]
 8001842:	4b12      	ldr	r3, [pc, #72]	@ (800188c <HAL_MspInit+0x54>)
 8001844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001846:	4a11      	ldr	r2, [pc, #68]	@ (800188c <HAL_MspInit+0x54>)
 8001848:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800184c:	6453      	str	r3, [r2, #68]	@ 0x44
 800184e:	4b0f      	ldr	r3, [pc, #60]	@ (800188c <HAL_MspInit+0x54>)
 8001850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001852:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001856:	607b      	str	r3, [r7, #4]
 8001858:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	603b      	str	r3, [r7, #0]
 800185e:	4b0b      	ldr	r3, [pc, #44]	@ (800188c <HAL_MspInit+0x54>)
 8001860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001862:	4a0a      	ldr	r2, [pc, #40]	@ (800188c <HAL_MspInit+0x54>)
 8001864:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001868:	6413      	str	r3, [r2, #64]	@ 0x40
 800186a:	4b08      	ldr	r3, [pc, #32]	@ (800188c <HAL_MspInit+0x54>)
 800186c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800186e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001872:	603b      	str	r3, [r7, #0]
 8001874:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001876:	2200      	movs	r2, #0
 8001878:	210f      	movs	r1, #15
 800187a:	f06f 0001 	mvn.w	r0, #1
 800187e:	f000 fb45 	bl	8001f0c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001882:	bf00      	nop
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40023800 	.word	0x40023800

08001890 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018a0:	d10e      	bne.n	80018c0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	4b16      	ldr	r3, [pc, #88]	@ (8001900 <HAL_TIM_Base_MspInit+0x70>)
 80018a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018aa:	4a15      	ldr	r2, [pc, #84]	@ (8001900 <HAL_TIM_Base_MspInit+0x70>)
 80018ac:	f043 0301 	orr.w	r3, r3, #1
 80018b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80018b2:	4b13      	ldr	r3, [pc, #76]	@ (8001900 <HAL_TIM_Base_MspInit+0x70>)
 80018b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b6:	f003 0301 	and.w	r3, r3, #1
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80018be:	e01a      	b.n	80018f6 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM10)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a0f      	ldr	r2, [pc, #60]	@ (8001904 <HAL_TIM_Base_MspInit+0x74>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d115      	bne.n	80018f6 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	60bb      	str	r3, [r7, #8]
 80018ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001900 <HAL_TIM_Base_MspInit+0x70>)
 80018d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018d2:	4a0b      	ldr	r2, [pc, #44]	@ (8001900 <HAL_TIM_Base_MspInit+0x70>)
 80018d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80018da:	4b09      	ldr	r3, [pc, #36]	@ (8001900 <HAL_TIM_Base_MspInit+0x70>)
 80018dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018e2:	60bb      	str	r3, [r7, #8]
 80018e4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 80018e6:	2200      	movs	r2, #0
 80018e8:	2105      	movs	r1, #5
 80018ea:	2019      	movs	r0, #25
 80018ec:	f000 fb0e 	bl	8001f0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80018f0:	2019      	movs	r0, #25
 80018f2:	f000 fb27 	bl	8001f44 <HAL_NVIC_EnableIRQ>
}
 80018f6:	bf00      	nop
 80018f8:	3710      	adds	r7, #16
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40023800 	.word	0x40023800
 8001904:	40014400 	.word	0x40014400

08001908 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b08c      	sub	sp, #48	@ 0x30
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001910:	f107 031c 	add.w	r3, r7, #28
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	605a      	str	r2, [r3, #4]
 800191a:	609a      	str	r2, [r3, #8]
 800191c:	60da      	str	r2, [r3, #12]
 800191e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a4d      	ldr	r2, [pc, #308]	@ (8001a5c <HAL_UART_MspInit+0x154>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d12d      	bne.n	8001986 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	61bb      	str	r3, [r7, #24]
 800192e:	4b4c      	ldr	r3, [pc, #304]	@ (8001a60 <HAL_UART_MspInit+0x158>)
 8001930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001932:	4a4b      	ldr	r2, [pc, #300]	@ (8001a60 <HAL_UART_MspInit+0x158>)
 8001934:	f043 0310 	orr.w	r3, r3, #16
 8001938:	6453      	str	r3, [r2, #68]	@ 0x44
 800193a:	4b49      	ldr	r3, [pc, #292]	@ (8001a60 <HAL_UART_MspInit+0x158>)
 800193c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800193e:	f003 0310 	and.w	r3, r3, #16
 8001942:	61bb      	str	r3, [r7, #24]
 8001944:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	617b      	str	r3, [r7, #20]
 800194a:	4b45      	ldr	r3, [pc, #276]	@ (8001a60 <HAL_UART_MspInit+0x158>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194e:	4a44      	ldr	r2, [pc, #272]	@ (8001a60 <HAL_UART_MspInit+0x158>)
 8001950:	f043 0301 	orr.w	r3, r3, #1
 8001954:	6313      	str	r3, [r2, #48]	@ 0x30
 8001956:	4b42      	ldr	r3, [pc, #264]	@ (8001a60 <HAL_UART_MspInit+0x158>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	617b      	str	r3, [r7, #20]
 8001960:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001962:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001966:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001968:	2302      	movs	r3, #2
 800196a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196c:	2300      	movs	r3, #0
 800196e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001970:	2303      	movs	r3, #3
 8001972:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001974:	2307      	movs	r3, #7
 8001976:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001978:	f107 031c 	add.w	r3, r7, #28
 800197c:	4619      	mov	r1, r3
 800197e:	4839      	ldr	r0, [pc, #228]	@ (8001a64 <HAL_UART_MspInit+0x15c>)
 8001980:	f000 fef0 	bl	8002764 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001984:	e066      	b.n	8001a54 <HAL_UART_MspInit+0x14c>
  else if(huart->Instance==USART2)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a37      	ldr	r2, [pc, #220]	@ (8001a68 <HAL_UART_MspInit+0x160>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d161      	bne.n	8001a54 <HAL_UART_MspInit+0x14c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001990:	2300      	movs	r3, #0
 8001992:	613b      	str	r3, [r7, #16]
 8001994:	4b32      	ldr	r3, [pc, #200]	@ (8001a60 <HAL_UART_MspInit+0x158>)
 8001996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001998:	4a31      	ldr	r2, [pc, #196]	@ (8001a60 <HAL_UART_MspInit+0x158>)
 800199a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800199e:	6413      	str	r3, [r2, #64]	@ 0x40
 80019a0:	4b2f      	ldr	r3, [pc, #188]	@ (8001a60 <HAL_UART_MspInit+0x158>)
 80019a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019a8:	613b      	str	r3, [r7, #16]
 80019aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ac:	2300      	movs	r3, #0
 80019ae:	60fb      	str	r3, [r7, #12]
 80019b0:	4b2b      	ldr	r3, [pc, #172]	@ (8001a60 <HAL_UART_MspInit+0x158>)
 80019b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b4:	4a2a      	ldr	r2, [pc, #168]	@ (8001a60 <HAL_UART_MspInit+0x158>)
 80019b6:	f043 0301 	orr.w	r3, r3, #1
 80019ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80019bc:	4b28      	ldr	r3, [pc, #160]	@ (8001a60 <HAL_UART_MspInit+0x158>)
 80019be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c0:	f003 0301 	and.w	r3, r3, #1
 80019c4:	60fb      	str	r3, [r7, #12]
 80019c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80019c8:	230c      	movs	r3, #12
 80019ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019cc:	2302      	movs	r3, #2
 80019ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d0:	2300      	movs	r3, #0
 80019d2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d4:	2303      	movs	r3, #3
 80019d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019d8:	2307      	movs	r3, #7
 80019da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019dc:	f107 031c 	add.w	r3, r7, #28
 80019e0:	4619      	mov	r1, r3
 80019e2:	4820      	ldr	r0, [pc, #128]	@ (8001a64 <HAL_UART_MspInit+0x15c>)
 80019e4:	f000 febe 	bl	8002764 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80019e8:	4b20      	ldr	r3, [pc, #128]	@ (8001a6c <HAL_UART_MspInit+0x164>)
 80019ea:	4a21      	ldr	r2, [pc, #132]	@ (8001a70 <HAL_UART_MspInit+0x168>)
 80019ec:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80019ee:	4b1f      	ldr	r3, [pc, #124]	@ (8001a6c <HAL_UART_MspInit+0x164>)
 80019f0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80019f4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019f6:	4b1d      	ldr	r3, [pc, #116]	@ (8001a6c <HAL_UART_MspInit+0x164>)
 80019f8:	2240      	movs	r2, #64	@ 0x40
 80019fa:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019fc:	4b1b      	ldr	r3, [pc, #108]	@ (8001a6c <HAL_UART_MspInit+0x164>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a02:	4b1a      	ldr	r3, [pc, #104]	@ (8001a6c <HAL_UART_MspInit+0x164>)
 8001a04:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a08:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a0a:	4b18      	ldr	r3, [pc, #96]	@ (8001a6c <HAL_UART_MspInit+0x164>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a10:	4b16      	ldr	r3, [pc, #88]	@ (8001a6c <HAL_UART_MspInit+0x164>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001a16:	4b15      	ldr	r3, [pc, #84]	@ (8001a6c <HAL_UART_MspInit+0x164>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001a1c:	4b13      	ldr	r3, [pc, #76]	@ (8001a6c <HAL_UART_MspInit+0x164>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a22:	4b12      	ldr	r3, [pc, #72]	@ (8001a6c <HAL_UART_MspInit+0x164>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001a28:	4810      	ldr	r0, [pc, #64]	@ (8001a6c <HAL_UART_MspInit+0x164>)
 8001a2a:	f000 fa99 	bl	8001f60 <HAL_DMA_Init>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <HAL_UART_MspInit+0x130>
      Error_Handler();
 8001a34:	f7ff fefa 	bl	800182c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	4a0c      	ldr	r2, [pc, #48]	@ (8001a6c <HAL_UART_MspInit+0x164>)
 8001a3c:	639a      	str	r2, [r3, #56]	@ 0x38
 8001a3e:	4a0b      	ldr	r2, [pc, #44]	@ (8001a6c <HAL_UART_MspInit+0x164>)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001a44:	2200      	movs	r2, #0
 8001a46:	2105      	movs	r1, #5
 8001a48:	2026      	movs	r0, #38	@ 0x26
 8001a4a:	f000 fa5f 	bl	8001f0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001a4e:	2026      	movs	r0, #38	@ 0x26
 8001a50:	f000 fa78 	bl	8001f44 <HAL_NVIC_EnableIRQ>
}
 8001a54:	bf00      	nop
 8001a56:	3730      	adds	r7, #48	@ 0x30
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	40011000 	.word	0x40011000
 8001a60:	40023800 	.word	0x40023800
 8001a64:	40020000 	.word	0x40020000
 8001a68:	40004400 	.word	0x40004400
 8001a6c:	200001c8 	.word	0x200001c8
 8001a70:	400260a0 	.word	0x400260a0

08001a74 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b08c      	sub	sp, #48	@ 0x30
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001a80:	2300      	movs	r3, #0
 8001a82:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 8001a84:	2300      	movs	r3, #0
 8001a86:	60bb      	str	r3, [r7, #8]
 8001a88:	4b2e      	ldr	r3, [pc, #184]	@ (8001b44 <HAL_InitTick+0xd0>)
 8001a8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a8c:	4a2d      	ldr	r2, [pc, #180]	@ (8001b44 <HAL_InitTick+0xd0>)
 8001a8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a92:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a94:	4b2b      	ldr	r3, [pc, #172]	@ (8001b44 <HAL_InitTick+0xd0>)
 8001a96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a9c:	60bb      	str	r3, [r7, #8]
 8001a9e:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001aa0:	f107 020c 	add.w	r2, r7, #12
 8001aa4:	f107 0310 	add.w	r3, r7, #16
 8001aa8:	4611      	mov	r1, r2
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f001 fc36 	bl	800331c <HAL_RCC_GetClockConfig>
  /* Compute TIM9 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001ab0:	f001 fc20 	bl	80032f4 <HAL_RCC_GetPCLK2Freq>
 8001ab4:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ab8:	4a23      	ldr	r2, [pc, #140]	@ (8001b48 <HAL_InitTick+0xd4>)
 8001aba:	fba2 2303 	umull	r2, r3, r2, r3
 8001abe:	0c9b      	lsrs	r3, r3, #18
 8001ac0:	3b01      	subs	r3, #1
 8001ac2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8001ac4:	4b21      	ldr	r3, [pc, #132]	@ (8001b4c <HAL_InitTick+0xd8>)
 8001ac6:	4a22      	ldr	r2, [pc, #136]	@ (8001b50 <HAL_InitTick+0xdc>)
 8001ac8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 8001aca:	4b20      	ldr	r3, [pc, #128]	@ (8001b4c <HAL_InitTick+0xd8>)
 8001acc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001ad0:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 8001ad2:	4a1e      	ldr	r2, [pc, #120]	@ (8001b4c <HAL_InitTick+0xd8>)
 8001ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad6:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 8001ad8:	4b1c      	ldr	r3, [pc, #112]	@ (8001b4c <HAL_InitTick+0xd8>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ade:	4b1b      	ldr	r3, [pc, #108]	@ (8001b4c <HAL_InitTick+0xd8>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	609a      	str	r2, [r3, #8]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ae4:	4b19      	ldr	r3, [pc, #100]	@ (8001b4c <HAL_InitTick+0xd8>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim9);
 8001aea:	4818      	ldr	r0, [pc, #96]	@ (8001b4c <HAL_InitTick+0xd8>)
 8001aec:	f001 fc48 	bl	8003380 <HAL_TIM_Base_Init>
 8001af0:	4603      	mov	r3, r0
 8001af2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001af6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d11b      	bne.n	8001b36 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim9);
 8001afe:	4813      	ldr	r0, [pc, #76]	@ (8001b4c <HAL_InitTick+0xd8>)
 8001b00:	f001 fc8e 	bl	8003420 <HAL_TIM_Base_Start_IT>
 8001b04:	4603      	mov	r3, r0
 8001b06:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001b0a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d111      	bne.n	8001b36 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM9 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001b12:	2018      	movs	r0, #24
 8001b14:	f000 fa16 	bl	8001f44 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2b0f      	cmp	r3, #15
 8001b1c:	d808      	bhi.n	8001b30 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority, 0U);
 8001b1e:	2200      	movs	r2, #0
 8001b20:	6879      	ldr	r1, [r7, #4]
 8001b22:	2018      	movs	r0, #24
 8001b24:	f000 f9f2 	bl	8001f0c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b28:	4a0a      	ldr	r2, [pc, #40]	@ (8001b54 <HAL_InitTick+0xe0>)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6013      	str	r3, [r2, #0]
 8001b2e:	e002      	b.n	8001b36 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001b36:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3730      	adds	r7, #48	@ 0x30
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	40023800 	.word	0x40023800
 8001b48:	431bde83 	.word	0x431bde83
 8001b4c:	20000254 	.word	0x20000254
 8001b50:	40014000 	.word	0x40014000
 8001b54:	20000004 	.word	0x20000004

08001b58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b5c:	bf00      	nop
 8001b5e:	e7fd      	b.n	8001b5c <NMI_Handler+0x4>

08001b60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b64:	bf00      	nop
 8001b66:	e7fd      	b.n	8001b64 <HardFault_Handler+0x4>

08001b68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b6c:	bf00      	nop
 8001b6e:	e7fd      	b.n	8001b6c <MemManage_Handler+0x4>

08001b70 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b74:	bf00      	nop
 8001b76:	e7fd      	b.n	8001b74 <BusFault_Handler+0x4>

08001b78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b7c:	bf00      	nop
 8001b7e:	e7fd      	b.n	8001b7c <UsageFault_Handler+0x4>

08001b80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b84:	bf00      	nop
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
	...

08001b90 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001b94:	4802      	ldr	r0, [pc, #8]	@ (8001ba0 <DMA1_Stream6_IRQHandler+0x10>)
 8001b96:	f000 fb7b 	bl	8002290 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001b9a:	bf00      	nop
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	200001c8 	.word	0x200001c8

08001ba4 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8001ba8:	4802      	ldr	r0, [pc, #8]	@ (8001bb4 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001baa:	f001 fc9b 	bl	80034e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001bae:	bf00      	nop
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	20000254 	.word	0x20000254

08001bb8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	ulStatsTimerTicks++;
 8001bbc:	4b04      	ldr	r3, [pc, #16]	@ (8001bd0 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	4a03      	ldr	r2, [pc, #12]	@ (8001bd0 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8001bc4:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001bc6:	4803      	ldr	r0, [pc, #12]	@ (8001bd4 <TIM1_UP_TIM10_IRQHandler+0x1c>)
 8001bc8:	f001 fc8c 	bl	80034e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001bcc:	bf00      	nop
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	200000a4 	.word	0x200000a4
 8001bd4:	200000f0 	.word	0x200000f0

08001bd8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001bdc:	4802      	ldr	r0, [pc, #8]	@ (8001be8 <USART2_IRQHandler+0x10>)
 8001bde:	f002 f8c9 	bl	8003d74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001be2:	bf00      	nop
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	20000180 	.word	0x20000180

08001bec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b086      	sub	sp, #24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bf4:	4a14      	ldr	r2, [pc, #80]	@ (8001c48 <_sbrk+0x5c>)
 8001bf6:	4b15      	ldr	r3, [pc, #84]	@ (8001c4c <_sbrk+0x60>)
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c00:	4b13      	ldr	r3, [pc, #76]	@ (8001c50 <_sbrk+0x64>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d102      	bne.n	8001c0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c08:	4b11      	ldr	r3, [pc, #68]	@ (8001c50 <_sbrk+0x64>)
 8001c0a:	4a12      	ldr	r2, [pc, #72]	@ (8001c54 <_sbrk+0x68>)
 8001c0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c0e:	4b10      	ldr	r3, [pc, #64]	@ (8001c50 <_sbrk+0x64>)
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4413      	add	r3, r2
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d207      	bcs.n	8001c2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c1c:	f006 fe6a 	bl	80088f4 <__errno>
 8001c20:	4603      	mov	r3, r0
 8001c22:	220c      	movs	r2, #12
 8001c24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c26:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c2a:	e009      	b.n	8001c40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c2c:	4b08      	ldr	r3, [pc, #32]	@ (8001c50 <_sbrk+0x64>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c32:	4b07      	ldr	r3, [pc, #28]	@ (8001c50 <_sbrk+0x64>)
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4413      	add	r3, r2
 8001c3a:	4a05      	ldr	r2, [pc, #20]	@ (8001c50 <_sbrk+0x64>)
 8001c3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3718      	adds	r7, #24
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	20018000 	.word	0x20018000
 8001c4c:	00000400 	.word	0x00000400
 8001c50:	2000029c 	.word	0x2000029c
 8001c54:	20004e38 	.word	0x20004e38

08001c58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c5c:	4b06      	ldr	r3, [pc, #24]	@ (8001c78 <SystemInit+0x20>)
 8001c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c62:	4a05      	ldr	r2, [pc, #20]	@ (8001c78 <SystemInit+0x20>)
 8001c64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c6c:	bf00      	nop
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	e000ed00 	.word	0xe000ed00

08001c7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c7c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001cb4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001c80:	f7ff ffea 	bl	8001c58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c84:	480c      	ldr	r0, [pc, #48]	@ (8001cb8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c86:	490d      	ldr	r1, [pc, #52]	@ (8001cbc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c88:	4a0d      	ldr	r2, [pc, #52]	@ (8001cc0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c8c:	e002      	b.n	8001c94 <LoopCopyDataInit>

08001c8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c92:	3304      	adds	r3, #4

08001c94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c98:	d3f9      	bcc.n	8001c8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c9a:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c9c:	4c0a      	ldr	r4, [pc, #40]	@ (8001cc8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ca0:	e001      	b.n	8001ca6 <LoopFillZerobss>

08001ca2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ca2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ca4:	3204      	adds	r2, #4

08001ca6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ca6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ca8:	d3fb      	bcc.n	8001ca2 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001caa:	f006 fe29 	bl	8008900 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cae:	f7ff fbb5 	bl	800141c <main>
  bx  lr    
 8001cb2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001cb4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001cb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cbc:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001cc0:	080093c4 	.word	0x080093c4
  ldr r2, =_sbss
 8001cc4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001cc8:	20004e38 	.word	0x20004e38

08001ccc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ccc:	e7fe      	b.n	8001ccc <ADC_IRQHandler>
	...

08001cd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cd4:	4b0e      	ldr	r3, [pc, #56]	@ (8001d10 <HAL_Init+0x40>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a0d      	ldr	r2, [pc, #52]	@ (8001d10 <HAL_Init+0x40>)
 8001cda:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001cde:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ce0:	4b0b      	ldr	r3, [pc, #44]	@ (8001d10 <HAL_Init+0x40>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a0a      	ldr	r2, [pc, #40]	@ (8001d10 <HAL_Init+0x40>)
 8001ce6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001cea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cec:	4b08      	ldr	r3, [pc, #32]	@ (8001d10 <HAL_Init+0x40>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a07      	ldr	r2, [pc, #28]	@ (8001d10 <HAL_Init+0x40>)
 8001cf2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cf6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cf8:	2003      	movs	r0, #3
 8001cfa:	f000 f8fc 	bl	8001ef6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cfe:	200f      	movs	r0, #15
 8001d00:	f7ff feb8 	bl	8001a74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d04:	f7ff fd98 	bl	8001838 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	40023c00 	.word	0x40023c00

08001d14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d18:	4b06      	ldr	r3, [pc, #24]	@ (8001d34 <HAL_IncTick+0x20>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	4b06      	ldr	r3, [pc, #24]	@ (8001d38 <HAL_IncTick+0x24>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4413      	add	r3, r2
 8001d24:	4a04      	ldr	r2, [pc, #16]	@ (8001d38 <HAL_IncTick+0x24>)
 8001d26:	6013      	str	r3, [r2, #0]
}
 8001d28:	bf00      	nop
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	20000008 	.word	0x20000008
 8001d38:	200002a0 	.word	0x200002a0

08001d3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d40:	4b03      	ldr	r3, [pc, #12]	@ (8001d50 <HAL_GetTick+0x14>)
 8001d42:	681b      	ldr	r3, [r3, #0]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	200002a0 	.word	0x200002a0

08001d54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d5c:	f7ff ffee 	bl	8001d3c <HAL_GetTick>
 8001d60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001d6c:	d005      	beq.n	8001d7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d6e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d98 <HAL_Delay+0x44>)
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	461a      	mov	r2, r3
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	4413      	add	r3, r2
 8001d78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d7a:	bf00      	nop
 8001d7c:	f7ff ffde 	bl	8001d3c <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	68fa      	ldr	r2, [r7, #12]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d8f7      	bhi.n	8001d7c <HAL_Delay+0x28>
  {
  }
}
 8001d8c:	bf00      	nop
 8001d8e:	bf00      	nop
 8001d90:	3710      	adds	r7, #16
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	20000008 	.word	0x20000008

08001d9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f003 0307 	and.w	r3, r3, #7
 8001daa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dac:	4b0c      	ldr	r3, [pc, #48]	@ (8001de0 <__NVIC_SetPriorityGrouping+0x44>)
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001db2:	68ba      	ldr	r2, [r7, #8]
 8001db4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001db8:	4013      	ands	r3, r2
 8001dba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dc4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001dc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001dcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dce:	4a04      	ldr	r2, [pc, #16]	@ (8001de0 <__NVIC_SetPriorityGrouping+0x44>)
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	60d3      	str	r3, [r2, #12]
}
 8001dd4:	bf00      	nop
 8001dd6:	3714      	adds	r7, #20
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr
 8001de0:	e000ed00 	.word	0xe000ed00

08001de4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001de8:	4b04      	ldr	r3, [pc, #16]	@ (8001dfc <__NVIC_GetPriorityGrouping+0x18>)
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	0a1b      	lsrs	r3, r3, #8
 8001dee:	f003 0307 	and.w	r3, r3, #7
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr
 8001dfc:	e000ed00 	.word	0xe000ed00

08001e00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	4603      	mov	r3, r0
 8001e08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	db0b      	blt.n	8001e2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e12:	79fb      	ldrb	r3, [r7, #7]
 8001e14:	f003 021f 	and.w	r2, r3, #31
 8001e18:	4907      	ldr	r1, [pc, #28]	@ (8001e38 <__NVIC_EnableIRQ+0x38>)
 8001e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1e:	095b      	lsrs	r3, r3, #5
 8001e20:	2001      	movs	r0, #1
 8001e22:	fa00 f202 	lsl.w	r2, r0, r2
 8001e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e2a:	bf00      	nop
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	e000e100 	.word	0xe000e100

08001e3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	6039      	str	r1, [r7, #0]
 8001e46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	db0a      	blt.n	8001e66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	b2da      	uxtb	r2, r3
 8001e54:	490c      	ldr	r1, [pc, #48]	@ (8001e88 <__NVIC_SetPriority+0x4c>)
 8001e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5a:	0112      	lsls	r2, r2, #4
 8001e5c:	b2d2      	uxtb	r2, r2
 8001e5e:	440b      	add	r3, r1
 8001e60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e64:	e00a      	b.n	8001e7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	b2da      	uxtb	r2, r3
 8001e6a:	4908      	ldr	r1, [pc, #32]	@ (8001e8c <__NVIC_SetPriority+0x50>)
 8001e6c:	79fb      	ldrb	r3, [r7, #7]
 8001e6e:	f003 030f 	and.w	r3, r3, #15
 8001e72:	3b04      	subs	r3, #4
 8001e74:	0112      	lsls	r2, r2, #4
 8001e76:	b2d2      	uxtb	r2, r2
 8001e78:	440b      	add	r3, r1
 8001e7a:	761a      	strb	r2, [r3, #24]
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr
 8001e88:	e000e100 	.word	0xe000e100
 8001e8c:	e000ed00 	.word	0xe000ed00

08001e90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b089      	sub	sp, #36	@ 0x24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f003 0307 	and.w	r3, r3, #7
 8001ea2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	f1c3 0307 	rsb	r3, r3, #7
 8001eaa:	2b04      	cmp	r3, #4
 8001eac:	bf28      	it	cs
 8001eae:	2304      	movcs	r3, #4
 8001eb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	3304      	adds	r3, #4
 8001eb6:	2b06      	cmp	r3, #6
 8001eb8:	d902      	bls.n	8001ec0 <NVIC_EncodePriority+0x30>
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	3b03      	subs	r3, #3
 8001ebe:	e000      	b.n	8001ec2 <NVIC_EncodePriority+0x32>
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	43da      	mvns	r2, r3
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	401a      	ands	r2, r3
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ed8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee2:	43d9      	mvns	r1, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee8:	4313      	orrs	r3, r2
         );
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3724      	adds	r7, #36	@ 0x24
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr

08001ef6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b082      	sub	sp, #8
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f7ff ff4c 	bl	8001d9c <__NVIC_SetPriorityGrouping>
}
 8001f04:	bf00      	nop
 8001f06:	3708      	adds	r7, #8
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	4603      	mov	r3, r0
 8001f14:	60b9      	str	r1, [r7, #8]
 8001f16:	607a      	str	r2, [r7, #4]
 8001f18:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f1e:	f7ff ff61 	bl	8001de4 <__NVIC_GetPriorityGrouping>
 8001f22:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	68b9      	ldr	r1, [r7, #8]
 8001f28:	6978      	ldr	r0, [r7, #20]
 8001f2a:	f7ff ffb1 	bl	8001e90 <NVIC_EncodePriority>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f34:	4611      	mov	r1, r2
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7ff ff80 	bl	8001e3c <__NVIC_SetPriority>
}
 8001f3c:	bf00      	nop
 8001f3e:	3718      	adds	r7, #24
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7ff ff54 	bl	8001e00 <__NVIC_EnableIRQ>
}
 8001f58:	bf00      	nop
 8001f5a:	3708      	adds	r7, #8
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b086      	sub	sp, #24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f6c:	f7ff fee6 	bl	8001d3c <HAL_GetTick>
 8001f70:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d101      	bne.n	8001f7c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e099      	b.n	80020b0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2202      	movs	r2, #2
 8001f80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f022 0201 	bic.w	r2, r2, #1
 8001f9a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f9c:	e00f      	b.n	8001fbe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f9e:	f7ff fecd 	bl	8001d3c <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	2b05      	cmp	r3, #5
 8001faa:	d908      	bls.n	8001fbe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2220      	movs	r2, #32
 8001fb0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2203      	movs	r2, #3
 8001fb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e078      	b.n	80020b0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0301 	and.w	r3, r3, #1
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d1e8      	bne.n	8001f9e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001fd4:	697a      	ldr	r2, [r7, #20]
 8001fd6:	4b38      	ldr	r3, [pc, #224]	@ (80020b8 <HAL_DMA_Init+0x158>)
 8001fd8:	4013      	ands	r3, r2
 8001fda:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685a      	ldr	r2, [r3, #4]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	691b      	ldr	r3, [r3, #16]
 8001ff0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ff6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	699b      	ldr	r3, [r3, #24]
 8001ffc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002002:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a1b      	ldr	r3, [r3, #32]
 8002008:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800200a:	697a      	ldr	r2, [r7, #20]
 800200c:	4313      	orrs	r3, r2
 800200e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002014:	2b04      	cmp	r3, #4
 8002016:	d107      	bne.n	8002028 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002020:	4313      	orrs	r3, r2
 8002022:	697a      	ldr	r2, [r7, #20]
 8002024:	4313      	orrs	r3, r2
 8002026:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	697a      	ldr	r2, [r7, #20]
 800202e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	f023 0307 	bic.w	r3, r3, #7
 800203e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002044:	697a      	ldr	r2, [r7, #20]
 8002046:	4313      	orrs	r3, r2
 8002048:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800204e:	2b04      	cmp	r3, #4
 8002050:	d117      	bne.n	8002082 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002056:	697a      	ldr	r2, [r7, #20]
 8002058:	4313      	orrs	r3, r2
 800205a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002060:	2b00      	cmp	r3, #0
 8002062:	d00e      	beq.n	8002082 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f000 fb01 	bl	800266c <DMA_CheckFifoParam>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d008      	beq.n	8002082 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2240      	movs	r2, #64	@ 0x40
 8002074:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2201      	movs	r2, #1
 800207a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800207e:	2301      	movs	r3, #1
 8002080:	e016      	b.n	80020b0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	697a      	ldr	r2, [r7, #20]
 8002088:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f000 fab8 	bl	8002600 <DMA_CalcBaseAndBitshift>
 8002090:	4603      	mov	r3, r0
 8002092:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002098:	223f      	movs	r2, #63	@ 0x3f
 800209a:	409a      	lsls	r2, r3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2201      	movs	r2, #1
 80020aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80020ae:	2300      	movs	r3, #0
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3718      	adds	r7, #24
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	f010803f 	.word	0xf010803f

080020bc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b086      	sub	sp, #24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	607a      	str	r2, [r7, #4]
 80020c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020ca:	2300      	movs	r3, #0
 80020cc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020d2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d101      	bne.n	80020e2 <HAL_DMA_Start_IT+0x26>
 80020de:	2302      	movs	r3, #2
 80020e0:	e040      	b.n	8002164 <HAL_DMA_Start_IT+0xa8>
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2201      	movs	r2, #1
 80020e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d12f      	bne.n	8002156 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2202      	movs	r2, #2
 80020fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2200      	movs	r2, #0
 8002102:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	68b9      	ldr	r1, [r7, #8]
 800210a:	68f8      	ldr	r0, [r7, #12]
 800210c:	f000 fa4a 	bl	80025a4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002114:	223f      	movs	r2, #63	@ 0x3f
 8002116:	409a      	lsls	r2, r3
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f042 0216 	orr.w	r2, r2, #22
 800212a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002130:	2b00      	cmp	r3, #0
 8002132:	d007      	beq.n	8002144 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f042 0208 	orr.w	r2, r2, #8
 8002142:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f042 0201 	orr.w	r2, r2, #1
 8002152:	601a      	str	r2, [r3, #0]
 8002154:	e005      	b.n	8002162 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800215e:	2302      	movs	r3, #2
 8002160:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002162:	7dfb      	ldrb	r3, [r7, #23]
}
 8002164:	4618      	mov	r0, r3
 8002166:	3718      	adds	r7, #24
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}

0800216c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002178:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800217a:	f7ff fddf 	bl	8001d3c <HAL_GetTick>
 800217e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002186:	b2db      	uxtb	r3, r3
 8002188:	2b02      	cmp	r3, #2
 800218a:	d008      	beq.n	800219e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2280      	movs	r2, #128	@ 0x80
 8002190:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e052      	b.n	8002244 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f022 0216 	bic.w	r2, r2, #22
 80021ac:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	695a      	ldr	r2, [r3, #20]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80021bc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d103      	bne.n	80021ce <HAL_DMA_Abort+0x62>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d007      	beq.n	80021de <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f022 0208 	bic.w	r2, r2, #8
 80021dc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f022 0201 	bic.w	r2, r2, #1
 80021ec:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021ee:	e013      	b.n	8002218 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021f0:	f7ff fda4 	bl	8001d3c <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b05      	cmp	r3, #5
 80021fc:	d90c      	bls.n	8002218 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2220      	movs	r2, #32
 8002202:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2203      	movs	r2, #3
 8002208:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e015      	b.n	8002244 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	2b00      	cmp	r3, #0
 8002224:	d1e4      	bne.n	80021f0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800222a:	223f      	movs	r2, #63	@ 0x3f
 800222c:	409a      	lsls	r2, r3
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2201      	movs	r2, #1
 8002236:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002242:	2300      	movs	r3, #0
}
 8002244:	4618      	mov	r0, r3
 8002246:	3710      	adds	r7, #16
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800225a:	b2db      	uxtb	r3, r3
 800225c:	2b02      	cmp	r3, #2
 800225e:	d004      	beq.n	800226a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2280      	movs	r2, #128	@ 0x80
 8002264:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e00c      	b.n	8002284 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2205      	movs	r2, #5
 800226e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f022 0201 	bic.w	r2, r2, #1
 8002280:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002298:	2300      	movs	r3, #0
 800229a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800229c:	4b8e      	ldr	r3, [pc, #568]	@ (80024d8 <HAL_DMA_IRQHandler+0x248>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a8e      	ldr	r2, [pc, #568]	@ (80024dc <HAL_DMA_IRQHandler+0x24c>)
 80022a2:	fba2 2303 	umull	r2, r3, r2, r3
 80022a6:	0a9b      	lsrs	r3, r3, #10
 80022a8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022ba:	2208      	movs	r2, #8
 80022bc:	409a      	lsls	r2, r3
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	4013      	ands	r3, r2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d01a      	beq.n	80022fc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0304 	and.w	r3, r3, #4
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d013      	beq.n	80022fc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f022 0204 	bic.w	r2, r2, #4
 80022e2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022e8:	2208      	movs	r2, #8
 80022ea:	409a      	lsls	r2, r3
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022f4:	f043 0201 	orr.w	r2, r3, #1
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002300:	2201      	movs	r2, #1
 8002302:	409a      	lsls	r2, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	4013      	ands	r3, r2
 8002308:	2b00      	cmp	r3, #0
 800230a:	d012      	beq.n	8002332 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	695b      	ldr	r3, [r3, #20]
 8002312:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002316:	2b00      	cmp	r3, #0
 8002318:	d00b      	beq.n	8002332 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800231e:	2201      	movs	r2, #1
 8002320:	409a      	lsls	r2, r3
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800232a:	f043 0202 	orr.w	r2, r3, #2
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002336:	2204      	movs	r2, #4
 8002338:	409a      	lsls	r2, r3
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	4013      	ands	r3, r2
 800233e:	2b00      	cmp	r3, #0
 8002340:	d012      	beq.n	8002368 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0302 	and.w	r3, r3, #2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d00b      	beq.n	8002368 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002354:	2204      	movs	r2, #4
 8002356:	409a      	lsls	r2, r3
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002360:	f043 0204 	orr.w	r2, r3, #4
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800236c:	2210      	movs	r2, #16
 800236e:	409a      	lsls	r2, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	4013      	ands	r3, r2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d043      	beq.n	8002400 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0308 	and.w	r3, r3, #8
 8002382:	2b00      	cmp	r3, #0
 8002384:	d03c      	beq.n	8002400 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800238a:	2210      	movs	r2, #16
 800238c:	409a      	lsls	r2, r3
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d018      	beq.n	80023d2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d108      	bne.n	80023c0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d024      	beq.n	8002400 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	4798      	blx	r3
 80023be:	e01f      	b.n	8002400 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d01b      	beq.n	8002400 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	4798      	blx	r3
 80023d0:	e016      	b.n	8002400 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d107      	bne.n	80023f0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f022 0208 	bic.w	r2, r2, #8
 80023ee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d003      	beq.n	8002400 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002404:	2220      	movs	r2, #32
 8002406:	409a      	lsls	r2, r3
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	4013      	ands	r3, r2
 800240c:	2b00      	cmp	r3, #0
 800240e:	f000 808f 	beq.w	8002530 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0310 	and.w	r3, r3, #16
 800241c:	2b00      	cmp	r3, #0
 800241e:	f000 8087 	beq.w	8002530 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002426:	2220      	movs	r2, #32
 8002428:	409a      	lsls	r2, r3
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b05      	cmp	r3, #5
 8002438:	d136      	bne.n	80024a8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f022 0216 	bic.w	r2, r2, #22
 8002448:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	695a      	ldr	r2, [r3, #20]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002458:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800245e:	2b00      	cmp	r3, #0
 8002460:	d103      	bne.n	800246a <HAL_DMA_IRQHandler+0x1da>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002466:	2b00      	cmp	r3, #0
 8002468:	d007      	beq.n	800247a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f022 0208 	bic.w	r2, r2, #8
 8002478:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800247e:	223f      	movs	r2, #63	@ 0x3f
 8002480:	409a      	lsls	r2, r3
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2201      	movs	r2, #1
 800248a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800249a:	2b00      	cmp	r3, #0
 800249c:	d07e      	beq.n	800259c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	4798      	blx	r3
        }
        return;
 80024a6:	e079      	b.n	800259c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d01d      	beq.n	80024f2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d10d      	bne.n	80024e0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d031      	beq.n	8002530 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	4798      	blx	r3
 80024d4:	e02c      	b.n	8002530 <HAL_DMA_IRQHandler+0x2a0>
 80024d6:	bf00      	nop
 80024d8:	20000000 	.word	0x20000000
 80024dc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d023      	beq.n	8002530 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	4798      	blx	r3
 80024f0:	e01e      	b.n	8002530 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d10f      	bne.n	8002520 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f022 0210 	bic.w	r2, r2, #16
 800250e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002524:	2b00      	cmp	r3, #0
 8002526:	d003      	beq.n	8002530 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002534:	2b00      	cmp	r3, #0
 8002536:	d032      	beq.n	800259e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800253c:	f003 0301 	and.w	r3, r3, #1
 8002540:	2b00      	cmp	r3, #0
 8002542:	d022      	beq.n	800258a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2205      	movs	r2, #5
 8002548:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f022 0201 	bic.w	r2, r2, #1
 800255a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	3301      	adds	r3, #1
 8002560:	60bb      	str	r3, [r7, #8]
 8002562:	697a      	ldr	r2, [r7, #20]
 8002564:	429a      	cmp	r2, r3
 8002566:	d307      	bcc.n	8002578 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	2b00      	cmp	r3, #0
 8002574:	d1f2      	bne.n	800255c <HAL_DMA_IRQHandler+0x2cc>
 8002576:	e000      	b.n	800257a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002578:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2201      	movs	r2, #1
 800257e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800258e:	2b00      	cmp	r3, #0
 8002590:	d005      	beq.n	800259e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	4798      	blx	r3
 800259a:	e000      	b.n	800259e <HAL_DMA_IRQHandler+0x30e>
        return;
 800259c:	bf00      	nop
    }
  }
}
 800259e:	3718      	adds	r7, #24
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	607a      	str	r2, [r7, #4]
 80025b0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80025c0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	683a      	ldr	r2, [r7, #0]
 80025c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	2b40      	cmp	r3, #64	@ 0x40
 80025d0:	d108      	bne.n	80025e4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	68ba      	ldr	r2, [r7, #8]
 80025e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80025e2:	e007      	b.n	80025f4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	68ba      	ldr	r2, [r7, #8]
 80025ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	60da      	str	r2, [r3, #12]
}
 80025f4:	bf00      	nop
 80025f6:	3714      	adds	r7, #20
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002600:	b480      	push	{r7}
 8002602:	b085      	sub	sp, #20
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	b2db      	uxtb	r3, r3
 800260e:	3b10      	subs	r3, #16
 8002610:	4a14      	ldr	r2, [pc, #80]	@ (8002664 <DMA_CalcBaseAndBitshift+0x64>)
 8002612:	fba2 2303 	umull	r2, r3, r2, r3
 8002616:	091b      	lsrs	r3, r3, #4
 8002618:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800261a:	4a13      	ldr	r2, [pc, #76]	@ (8002668 <DMA_CalcBaseAndBitshift+0x68>)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	4413      	add	r3, r2
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	461a      	mov	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2b03      	cmp	r3, #3
 800262c:	d909      	bls.n	8002642 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002636:	f023 0303 	bic.w	r3, r3, #3
 800263a:	1d1a      	adds	r2, r3, #4
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002640:	e007      	b.n	8002652 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800264a:	f023 0303 	bic.w	r3, r3, #3
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002656:	4618      	mov	r0, r3
 8002658:	3714      	adds	r7, #20
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	aaaaaaab 	.word	0xaaaaaaab
 8002668:	08009378 	.word	0x08009378

0800266c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800266c:	b480      	push	{r7}
 800266e:	b085      	sub	sp, #20
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002674:	2300      	movs	r3, #0
 8002676:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800267c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d11f      	bne.n	80026c6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	2b03      	cmp	r3, #3
 800268a:	d856      	bhi.n	800273a <DMA_CheckFifoParam+0xce>
 800268c:	a201      	add	r2, pc, #4	@ (adr r2, 8002694 <DMA_CheckFifoParam+0x28>)
 800268e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002692:	bf00      	nop
 8002694:	080026a5 	.word	0x080026a5
 8002698:	080026b7 	.word	0x080026b7
 800269c:	080026a5 	.word	0x080026a5
 80026a0:	0800273b 	.word	0x0800273b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d046      	beq.n	800273e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026b4:	e043      	b.n	800273e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026ba:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80026be:	d140      	bne.n	8002742 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026c4:	e03d      	b.n	8002742 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	699b      	ldr	r3, [r3, #24]
 80026ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80026ce:	d121      	bne.n	8002714 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	2b03      	cmp	r3, #3
 80026d4:	d837      	bhi.n	8002746 <DMA_CheckFifoParam+0xda>
 80026d6:	a201      	add	r2, pc, #4	@ (adr r2, 80026dc <DMA_CheckFifoParam+0x70>)
 80026d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026dc:	080026ed 	.word	0x080026ed
 80026e0:	080026f3 	.word	0x080026f3
 80026e4:	080026ed 	.word	0x080026ed
 80026e8:	08002705 	.word	0x08002705
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	73fb      	strb	r3, [r7, #15]
      break;
 80026f0:	e030      	b.n	8002754 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026f6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d025      	beq.n	800274a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002702:	e022      	b.n	800274a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002708:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800270c:	d11f      	bne.n	800274e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002712:	e01c      	b.n	800274e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	2b02      	cmp	r3, #2
 8002718:	d903      	bls.n	8002722 <DMA_CheckFifoParam+0xb6>
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	2b03      	cmp	r3, #3
 800271e:	d003      	beq.n	8002728 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002720:	e018      	b.n	8002754 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	73fb      	strb	r3, [r7, #15]
      break;
 8002726:	e015      	b.n	8002754 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800272c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d00e      	beq.n	8002752 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	73fb      	strb	r3, [r7, #15]
      break;
 8002738:	e00b      	b.n	8002752 <DMA_CheckFifoParam+0xe6>
      break;
 800273a:	bf00      	nop
 800273c:	e00a      	b.n	8002754 <DMA_CheckFifoParam+0xe8>
      break;
 800273e:	bf00      	nop
 8002740:	e008      	b.n	8002754 <DMA_CheckFifoParam+0xe8>
      break;
 8002742:	bf00      	nop
 8002744:	e006      	b.n	8002754 <DMA_CheckFifoParam+0xe8>
      break;
 8002746:	bf00      	nop
 8002748:	e004      	b.n	8002754 <DMA_CheckFifoParam+0xe8>
      break;
 800274a:	bf00      	nop
 800274c:	e002      	b.n	8002754 <DMA_CheckFifoParam+0xe8>
      break;   
 800274e:	bf00      	nop
 8002750:	e000      	b.n	8002754 <DMA_CheckFifoParam+0xe8>
      break;
 8002752:	bf00      	nop
    }
  } 
  
  return status; 
 8002754:	7bfb      	ldrb	r3, [r7, #15]
}
 8002756:	4618      	mov	r0, r3
 8002758:	3714      	adds	r7, #20
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop

08002764 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002764:	b480      	push	{r7}
 8002766:	b089      	sub	sp, #36	@ 0x24
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800276e:	2300      	movs	r3, #0
 8002770:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002772:	2300      	movs	r3, #0
 8002774:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002776:	2300      	movs	r3, #0
 8002778:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800277a:	2300      	movs	r3, #0
 800277c:	61fb      	str	r3, [r7, #28]
 800277e:	e159      	b.n	8002a34 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002780:	2201      	movs	r2, #1
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	fa02 f303 	lsl.w	r3, r2, r3
 8002788:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	697a      	ldr	r2, [r7, #20]
 8002790:	4013      	ands	r3, r2
 8002792:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002794:	693a      	ldr	r2, [r7, #16]
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	429a      	cmp	r2, r3
 800279a:	f040 8148 	bne.w	8002a2e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f003 0303 	and.w	r3, r3, #3
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d005      	beq.n	80027b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d130      	bne.n	8002818 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	2203      	movs	r2, #3
 80027c2:	fa02 f303 	lsl.w	r3, r2, r3
 80027c6:	43db      	mvns	r3, r3
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	4013      	ands	r3, r2
 80027cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	68da      	ldr	r2, [r3, #12]
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	fa02 f303 	lsl.w	r3, r2, r3
 80027da:	69ba      	ldr	r2, [r7, #24]
 80027dc:	4313      	orrs	r3, r2
 80027de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027ec:	2201      	movs	r2, #1
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	fa02 f303 	lsl.w	r3, r2, r3
 80027f4:	43db      	mvns	r3, r3
 80027f6:	69ba      	ldr	r2, [r7, #24]
 80027f8:	4013      	ands	r3, r2
 80027fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	091b      	lsrs	r3, r3, #4
 8002802:	f003 0201 	and.w	r2, r3, #1
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	fa02 f303 	lsl.w	r3, r2, r3
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	4313      	orrs	r3, r2
 8002810:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f003 0303 	and.w	r3, r3, #3
 8002820:	2b03      	cmp	r3, #3
 8002822:	d017      	beq.n	8002854 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	2203      	movs	r2, #3
 8002830:	fa02 f303 	lsl.w	r3, r2, r3
 8002834:	43db      	mvns	r3, r3
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	4013      	ands	r3, r2
 800283a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	689a      	ldr	r2, [r3, #8]
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	005b      	lsls	r3, r3, #1
 8002844:	fa02 f303 	lsl.w	r3, r2, r3
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	4313      	orrs	r3, r2
 800284c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f003 0303 	and.w	r3, r3, #3
 800285c:	2b02      	cmp	r3, #2
 800285e:	d123      	bne.n	80028a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	08da      	lsrs	r2, r3, #3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	3208      	adds	r2, #8
 8002868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800286c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	f003 0307 	and.w	r3, r3, #7
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	220f      	movs	r2, #15
 8002878:	fa02 f303 	lsl.w	r3, r2, r3
 800287c:	43db      	mvns	r3, r3
 800287e:	69ba      	ldr	r2, [r7, #24]
 8002880:	4013      	ands	r3, r2
 8002882:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	691a      	ldr	r2, [r3, #16]
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	f003 0307 	and.w	r3, r3, #7
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	4313      	orrs	r3, r2
 8002898:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	08da      	lsrs	r2, r3, #3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	3208      	adds	r2, #8
 80028a2:	69b9      	ldr	r1, [r7, #24]
 80028a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	2203      	movs	r2, #3
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	43db      	mvns	r3, r3
 80028ba:	69ba      	ldr	r2, [r7, #24]
 80028bc:	4013      	ands	r3, r2
 80028be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f003 0203 	and.w	r2, r3, #3
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	f000 80a2 	beq.w	8002a2e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028ea:	2300      	movs	r3, #0
 80028ec:	60fb      	str	r3, [r7, #12]
 80028ee:	4b57      	ldr	r3, [pc, #348]	@ (8002a4c <HAL_GPIO_Init+0x2e8>)
 80028f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028f2:	4a56      	ldr	r2, [pc, #344]	@ (8002a4c <HAL_GPIO_Init+0x2e8>)
 80028f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80028fa:	4b54      	ldr	r3, [pc, #336]	@ (8002a4c <HAL_GPIO_Init+0x2e8>)
 80028fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002902:	60fb      	str	r3, [r7, #12]
 8002904:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002906:	4a52      	ldr	r2, [pc, #328]	@ (8002a50 <HAL_GPIO_Init+0x2ec>)
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	089b      	lsrs	r3, r3, #2
 800290c:	3302      	adds	r3, #2
 800290e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002912:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	f003 0303 	and.w	r3, r3, #3
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	220f      	movs	r2, #15
 800291e:	fa02 f303 	lsl.w	r3, r2, r3
 8002922:	43db      	mvns	r3, r3
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	4013      	ands	r3, r2
 8002928:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a49      	ldr	r2, [pc, #292]	@ (8002a54 <HAL_GPIO_Init+0x2f0>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d019      	beq.n	8002966 <HAL_GPIO_Init+0x202>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a48      	ldr	r2, [pc, #288]	@ (8002a58 <HAL_GPIO_Init+0x2f4>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d013      	beq.n	8002962 <HAL_GPIO_Init+0x1fe>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a47      	ldr	r2, [pc, #284]	@ (8002a5c <HAL_GPIO_Init+0x2f8>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d00d      	beq.n	800295e <HAL_GPIO_Init+0x1fa>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a46      	ldr	r2, [pc, #280]	@ (8002a60 <HAL_GPIO_Init+0x2fc>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d007      	beq.n	800295a <HAL_GPIO_Init+0x1f6>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a45      	ldr	r2, [pc, #276]	@ (8002a64 <HAL_GPIO_Init+0x300>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d101      	bne.n	8002956 <HAL_GPIO_Init+0x1f2>
 8002952:	2304      	movs	r3, #4
 8002954:	e008      	b.n	8002968 <HAL_GPIO_Init+0x204>
 8002956:	2307      	movs	r3, #7
 8002958:	e006      	b.n	8002968 <HAL_GPIO_Init+0x204>
 800295a:	2303      	movs	r3, #3
 800295c:	e004      	b.n	8002968 <HAL_GPIO_Init+0x204>
 800295e:	2302      	movs	r3, #2
 8002960:	e002      	b.n	8002968 <HAL_GPIO_Init+0x204>
 8002962:	2301      	movs	r3, #1
 8002964:	e000      	b.n	8002968 <HAL_GPIO_Init+0x204>
 8002966:	2300      	movs	r3, #0
 8002968:	69fa      	ldr	r2, [r7, #28]
 800296a:	f002 0203 	and.w	r2, r2, #3
 800296e:	0092      	lsls	r2, r2, #2
 8002970:	4093      	lsls	r3, r2
 8002972:	69ba      	ldr	r2, [r7, #24]
 8002974:	4313      	orrs	r3, r2
 8002976:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002978:	4935      	ldr	r1, [pc, #212]	@ (8002a50 <HAL_GPIO_Init+0x2ec>)
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	089b      	lsrs	r3, r3, #2
 800297e:	3302      	adds	r3, #2
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002986:	4b38      	ldr	r3, [pc, #224]	@ (8002a68 <HAL_GPIO_Init+0x304>)
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	43db      	mvns	r3, r3
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	4013      	ands	r3, r2
 8002994:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d003      	beq.n	80029aa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80029a2:	69ba      	ldr	r2, [r7, #24]
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029aa:	4a2f      	ldr	r2, [pc, #188]	@ (8002a68 <HAL_GPIO_Init+0x304>)
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029b0:	4b2d      	ldr	r3, [pc, #180]	@ (8002a68 <HAL_GPIO_Init+0x304>)
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	43db      	mvns	r3, r3
 80029ba:	69ba      	ldr	r2, [r7, #24]
 80029bc:	4013      	ands	r3, r2
 80029be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d003      	beq.n	80029d4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029d4:	4a24      	ldr	r2, [pc, #144]	@ (8002a68 <HAL_GPIO_Init+0x304>)
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029da:	4b23      	ldr	r3, [pc, #140]	@ (8002a68 <HAL_GPIO_Init+0x304>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	43db      	mvns	r3, r3
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	4013      	ands	r3, r2
 80029e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d003      	beq.n	80029fe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029fe:	4a1a      	ldr	r2, [pc, #104]	@ (8002a68 <HAL_GPIO_Init+0x304>)
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a04:	4b18      	ldr	r3, [pc, #96]	@ (8002a68 <HAL_GPIO_Init+0x304>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	43db      	mvns	r3, r3
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	4013      	ands	r3, r2
 8002a12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d003      	beq.n	8002a28 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a28:	4a0f      	ldr	r2, [pc, #60]	@ (8002a68 <HAL_GPIO_Init+0x304>)
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	3301      	adds	r3, #1
 8002a32:	61fb      	str	r3, [r7, #28]
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	2b0f      	cmp	r3, #15
 8002a38:	f67f aea2 	bls.w	8002780 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a3c:	bf00      	nop
 8002a3e:	bf00      	nop
 8002a40:	3724      	adds	r7, #36	@ 0x24
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	40023800 	.word	0x40023800
 8002a50:	40013800 	.word	0x40013800
 8002a54:	40020000 	.word	0x40020000
 8002a58:	40020400 	.word	0x40020400
 8002a5c:	40020800 	.word	0x40020800
 8002a60:	40020c00 	.word	0x40020c00
 8002a64:	40021000 	.word	0x40021000
 8002a68:	40013c00 	.word	0x40013c00

08002a6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b086      	sub	sp, #24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d101      	bne.n	8002a7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e267      	b.n	8002f4e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d075      	beq.n	8002b76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002a8a:	4b88      	ldr	r3, [pc, #544]	@ (8002cac <HAL_RCC_OscConfig+0x240>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f003 030c 	and.w	r3, r3, #12
 8002a92:	2b04      	cmp	r3, #4
 8002a94:	d00c      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a96:	4b85      	ldr	r3, [pc, #532]	@ (8002cac <HAL_RCC_OscConfig+0x240>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002a9e:	2b08      	cmp	r3, #8
 8002aa0:	d112      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002aa2:	4b82      	ldr	r3, [pc, #520]	@ (8002cac <HAL_RCC_OscConfig+0x240>)
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002aaa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002aae:	d10b      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ab0:	4b7e      	ldr	r3, [pc, #504]	@ (8002cac <HAL_RCC_OscConfig+0x240>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d05b      	beq.n	8002b74 <HAL_RCC_OscConfig+0x108>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d157      	bne.n	8002b74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e242      	b.n	8002f4e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ad0:	d106      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x74>
 8002ad2:	4b76      	ldr	r3, [pc, #472]	@ (8002cac <HAL_RCC_OscConfig+0x240>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a75      	ldr	r2, [pc, #468]	@ (8002cac <HAL_RCC_OscConfig+0x240>)
 8002ad8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002adc:	6013      	str	r3, [r2, #0]
 8002ade:	e01d      	b.n	8002b1c <HAL_RCC_OscConfig+0xb0>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ae8:	d10c      	bne.n	8002b04 <HAL_RCC_OscConfig+0x98>
 8002aea:	4b70      	ldr	r3, [pc, #448]	@ (8002cac <HAL_RCC_OscConfig+0x240>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a6f      	ldr	r2, [pc, #444]	@ (8002cac <HAL_RCC_OscConfig+0x240>)
 8002af0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002af4:	6013      	str	r3, [r2, #0]
 8002af6:	4b6d      	ldr	r3, [pc, #436]	@ (8002cac <HAL_RCC_OscConfig+0x240>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a6c      	ldr	r2, [pc, #432]	@ (8002cac <HAL_RCC_OscConfig+0x240>)
 8002afc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b00:	6013      	str	r3, [r2, #0]
 8002b02:	e00b      	b.n	8002b1c <HAL_RCC_OscConfig+0xb0>
 8002b04:	4b69      	ldr	r3, [pc, #420]	@ (8002cac <HAL_RCC_OscConfig+0x240>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a68      	ldr	r2, [pc, #416]	@ (8002cac <HAL_RCC_OscConfig+0x240>)
 8002b0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b0e:	6013      	str	r3, [r2, #0]
 8002b10:	4b66      	ldr	r3, [pc, #408]	@ (8002cac <HAL_RCC_OscConfig+0x240>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a65      	ldr	r2, [pc, #404]	@ (8002cac <HAL_RCC_OscConfig+0x240>)
 8002b16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d013      	beq.n	8002b4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b24:	f7ff f90a 	bl	8001d3c <HAL_GetTick>
 8002b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b2a:	e008      	b.n	8002b3e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b2c:	f7ff f906 	bl	8001d3c <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b64      	cmp	r3, #100	@ 0x64
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e207      	b.n	8002f4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b3e:	4b5b      	ldr	r3, [pc, #364]	@ (8002cac <HAL_RCC_OscConfig+0x240>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d0f0      	beq.n	8002b2c <HAL_RCC_OscConfig+0xc0>
 8002b4a:	e014      	b.n	8002b76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b4c:	f7ff f8f6 	bl	8001d3c <HAL_GetTick>
 8002b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b52:	e008      	b.n	8002b66 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b54:	f7ff f8f2 	bl	8001d3c <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b64      	cmp	r3, #100	@ 0x64
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e1f3      	b.n	8002f4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b66:	4b51      	ldr	r3, [pc, #324]	@ (8002cac <HAL_RCC_OscConfig+0x240>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d1f0      	bne.n	8002b54 <HAL_RCC_OscConfig+0xe8>
 8002b72:	e000      	b.n	8002b76 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d063      	beq.n	8002c4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002b82:	4b4a      	ldr	r3, [pc, #296]	@ (8002cac <HAL_RCC_OscConfig+0x240>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f003 030c 	and.w	r3, r3, #12
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d00b      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b8e:	4b47      	ldr	r3, [pc, #284]	@ (8002cac <HAL_RCC_OscConfig+0x240>)
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002b96:	2b08      	cmp	r3, #8
 8002b98:	d11c      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b9a:	4b44      	ldr	r3, [pc, #272]	@ (8002cac <HAL_RCC_OscConfig+0x240>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d116      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ba6:	4b41      	ldr	r3, [pc, #260]	@ (8002cac <HAL_RCC_OscConfig+0x240>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d005      	beq.n	8002bbe <HAL_RCC_OscConfig+0x152>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d001      	beq.n	8002bbe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e1c7      	b.n	8002f4e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bbe:	4b3b      	ldr	r3, [pc, #236]	@ (8002cac <HAL_RCC_OscConfig+0x240>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	4937      	ldr	r1, [pc, #220]	@ (8002cac <HAL_RCC_OscConfig+0x240>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bd2:	e03a      	b.n	8002c4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d020      	beq.n	8002c1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bdc:	4b34      	ldr	r3, [pc, #208]	@ (8002cb0 <HAL_RCC_OscConfig+0x244>)
 8002bde:	2201      	movs	r2, #1
 8002be0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be2:	f7ff f8ab 	bl	8001d3c <HAL_GetTick>
 8002be6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002be8:	e008      	b.n	8002bfc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bea:	f7ff f8a7 	bl	8001d3c <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d901      	bls.n	8002bfc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e1a8      	b.n	8002f4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bfc:	4b2b      	ldr	r3, [pc, #172]	@ (8002cac <HAL_RCC_OscConfig+0x240>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0302 	and.w	r3, r3, #2
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d0f0      	beq.n	8002bea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c08:	4b28      	ldr	r3, [pc, #160]	@ (8002cac <HAL_RCC_OscConfig+0x240>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	691b      	ldr	r3, [r3, #16]
 8002c14:	00db      	lsls	r3, r3, #3
 8002c16:	4925      	ldr	r1, [pc, #148]	@ (8002cac <HAL_RCC_OscConfig+0x240>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	600b      	str	r3, [r1, #0]
 8002c1c:	e015      	b.n	8002c4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c1e:	4b24      	ldr	r3, [pc, #144]	@ (8002cb0 <HAL_RCC_OscConfig+0x244>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c24:	f7ff f88a 	bl	8001d3c <HAL_GetTick>
 8002c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c2a:	e008      	b.n	8002c3e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c2c:	f7ff f886 	bl	8001d3c <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e187      	b.n	8002f4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c3e:	4b1b      	ldr	r3, [pc, #108]	@ (8002cac <HAL_RCC_OscConfig+0x240>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d1f0      	bne.n	8002c2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0308 	and.w	r3, r3, #8
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d036      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	695b      	ldr	r3, [r3, #20]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d016      	beq.n	8002c8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c5e:	4b15      	ldr	r3, [pc, #84]	@ (8002cb4 <HAL_RCC_OscConfig+0x248>)
 8002c60:	2201      	movs	r2, #1
 8002c62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c64:	f7ff f86a 	bl	8001d3c <HAL_GetTick>
 8002c68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c6a:	e008      	b.n	8002c7e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c6c:	f7ff f866 	bl	8001d3c <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e167      	b.n	8002f4e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c7e:	4b0b      	ldr	r3, [pc, #44]	@ (8002cac <HAL_RCC_OscConfig+0x240>)
 8002c80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d0f0      	beq.n	8002c6c <HAL_RCC_OscConfig+0x200>
 8002c8a:	e01b      	b.n	8002cc4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c8c:	4b09      	ldr	r3, [pc, #36]	@ (8002cb4 <HAL_RCC_OscConfig+0x248>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c92:	f7ff f853 	bl	8001d3c <HAL_GetTick>
 8002c96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c98:	e00e      	b.n	8002cb8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c9a:	f7ff f84f 	bl	8001d3c <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d907      	bls.n	8002cb8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e150      	b.n	8002f4e <HAL_RCC_OscConfig+0x4e2>
 8002cac:	40023800 	.word	0x40023800
 8002cb0:	42470000 	.word	0x42470000
 8002cb4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cb8:	4b88      	ldr	r3, [pc, #544]	@ (8002edc <HAL_RCC_OscConfig+0x470>)
 8002cba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cbc:	f003 0302 	and.w	r3, r3, #2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d1ea      	bne.n	8002c9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0304 	and.w	r3, r3, #4
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	f000 8097 	beq.w	8002e00 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cd6:	4b81      	ldr	r3, [pc, #516]	@ (8002edc <HAL_RCC_OscConfig+0x470>)
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d10f      	bne.n	8002d02 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	60bb      	str	r3, [r7, #8]
 8002ce6:	4b7d      	ldr	r3, [pc, #500]	@ (8002edc <HAL_RCC_OscConfig+0x470>)
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cea:	4a7c      	ldr	r2, [pc, #496]	@ (8002edc <HAL_RCC_OscConfig+0x470>)
 8002cec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cf0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cf2:	4b7a      	ldr	r3, [pc, #488]	@ (8002edc <HAL_RCC_OscConfig+0x470>)
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cfa:	60bb      	str	r3, [r7, #8]
 8002cfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d02:	4b77      	ldr	r3, [pc, #476]	@ (8002ee0 <HAL_RCC_OscConfig+0x474>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d118      	bne.n	8002d40 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d0e:	4b74      	ldr	r3, [pc, #464]	@ (8002ee0 <HAL_RCC_OscConfig+0x474>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a73      	ldr	r2, [pc, #460]	@ (8002ee0 <HAL_RCC_OscConfig+0x474>)
 8002d14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d1a:	f7ff f80f 	bl	8001d3c <HAL_GetTick>
 8002d1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d20:	e008      	b.n	8002d34 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d22:	f7ff f80b 	bl	8001d3c <HAL_GetTick>
 8002d26:	4602      	mov	r2, r0
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d901      	bls.n	8002d34 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e10c      	b.n	8002f4e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d34:	4b6a      	ldr	r3, [pc, #424]	@ (8002ee0 <HAL_RCC_OscConfig+0x474>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d0f0      	beq.n	8002d22 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d106      	bne.n	8002d56 <HAL_RCC_OscConfig+0x2ea>
 8002d48:	4b64      	ldr	r3, [pc, #400]	@ (8002edc <HAL_RCC_OscConfig+0x470>)
 8002d4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d4c:	4a63      	ldr	r2, [pc, #396]	@ (8002edc <HAL_RCC_OscConfig+0x470>)
 8002d4e:	f043 0301 	orr.w	r3, r3, #1
 8002d52:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d54:	e01c      	b.n	8002d90 <HAL_RCC_OscConfig+0x324>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	2b05      	cmp	r3, #5
 8002d5c:	d10c      	bne.n	8002d78 <HAL_RCC_OscConfig+0x30c>
 8002d5e:	4b5f      	ldr	r3, [pc, #380]	@ (8002edc <HAL_RCC_OscConfig+0x470>)
 8002d60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d62:	4a5e      	ldr	r2, [pc, #376]	@ (8002edc <HAL_RCC_OscConfig+0x470>)
 8002d64:	f043 0304 	orr.w	r3, r3, #4
 8002d68:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d6a:	4b5c      	ldr	r3, [pc, #368]	@ (8002edc <HAL_RCC_OscConfig+0x470>)
 8002d6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d6e:	4a5b      	ldr	r2, [pc, #364]	@ (8002edc <HAL_RCC_OscConfig+0x470>)
 8002d70:	f043 0301 	orr.w	r3, r3, #1
 8002d74:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d76:	e00b      	b.n	8002d90 <HAL_RCC_OscConfig+0x324>
 8002d78:	4b58      	ldr	r3, [pc, #352]	@ (8002edc <HAL_RCC_OscConfig+0x470>)
 8002d7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d7c:	4a57      	ldr	r2, [pc, #348]	@ (8002edc <HAL_RCC_OscConfig+0x470>)
 8002d7e:	f023 0301 	bic.w	r3, r3, #1
 8002d82:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d84:	4b55      	ldr	r3, [pc, #340]	@ (8002edc <HAL_RCC_OscConfig+0x470>)
 8002d86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d88:	4a54      	ldr	r2, [pc, #336]	@ (8002edc <HAL_RCC_OscConfig+0x470>)
 8002d8a:	f023 0304 	bic.w	r3, r3, #4
 8002d8e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d015      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d98:	f7fe ffd0 	bl	8001d3c <HAL_GetTick>
 8002d9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d9e:	e00a      	b.n	8002db6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002da0:	f7fe ffcc 	bl	8001d3c <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e0cb      	b.n	8002f4e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002db6:	4b49      	ldr	r3, [pc, #292]	@ (8002edc <HAL_RCC_OscConfig+0x470>)
 8002db8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dba:	f003 0302 	and.w	r3, r3, #2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d0ee      	beq.n	8002da0 <HAL_RCC_OscConfig+0x334>
 8002dc2:	e014      	b.n	8002dee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dc4:	f7fe ffba 	bl	8001d3c <HAL_GetTick>
 8002dc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dca:	e00a      	b.n	8002de2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dcc:	f7fe ffb6 	bl	8001d3c <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e0b5      	b.n	8002f4e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002de2:	4b3e      	ldr	r3, [pc, #248]	@ (8002edc <HAL_RCC_OscConfig+0x470>)
 8002de4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1ee      	bne.n	8002dcc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002dee:	7dfb      	ldrb	r3, [r7, #23]
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d105      	bne.n	8002e00 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002df4:	4b39      	ldr	r3, [pc, #228]	@ (8002edc <HAL_RCC_OscConfig+0x470>)
 8002df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df8:	4a38      	ldr	r2, [pc, #224]	@ (8002edc <HAL_RCC_OscConfig+0x470>)
 8002dfa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002dfe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	699b      	ldr	r3, [r3, #24]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	f000 80a1 	beq.w	8002f4c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e0a:	4b34      	ldr	r3, [pc, #208]	@ (8002edc <HAL_RCC_OscConfig+0x470>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f003 030c 	and.w	r3, r3, #12
 8002e12:	2b08      	cmp	r3, #8
 8002e14:	d05c      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	699b      	ldr	r3, [r3, #24]
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d141      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e1e:	4b31      	ldr	r3, [pc, #196]	@ (8002ee4 <HAL_RCC_OscConfig+0x478>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e24:	f7fe ff8a 	bl	8001d3c <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e2a:	e008      	b.n	8002e3e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e2c:	f7fe ff86 	bl	8001d3c <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e087      	b.n	8002f4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e3e:	4b27      	ldr	r3, [pc, #156]	@ (8002edc <HAL_RCC_OscConfig+0x470>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1f0      	bne.n	8002e2c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	69da      	ldr	r2, [r3, #28]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a1b      	ldr	r3, [r3, #32]
 8002e52:	431a      	orrs	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e58:	019b      	lsls	r3, r3, #6
 8002e5a:	431a      	orrs	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e60:	085b      	lsrs	r3, r3, #1
 8002e62:	3b01      	subs	r3, #1
 8002e64:	041b      	lsls	r3, r3, #16
 8002e66:	431a      	orrs	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e6c:	061b      	lsls	r3, r3, #24
 8002e6e:	491b      	ldr	r1, [pc, #108]	@ (8002edc <HAL_RCC_OscConfig+0x470>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e74:	4b1b      	ldr	r3, [pc, #108]	@ (8002ee4 <HAL_RCC_OscConfig+0x478>)
 8002e76:	2201      	movs	r2, #1
 8002e78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e7a:	f7fe ff5f 	bl	8001d3c <HAL_GetTick>
 8002e7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e80:	e008      	b.n	8002e94 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e82:	f7fe ff5b 	bl	8001d3c <HAL_GetTick>
 8002e86:	4602      	mov	r2, r0
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d901      	bls.n	8002e94 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e05c      	b.n	8002f4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e94:	4b11      	ldr	r3, [pc, #68]	@ (8002edc <HAL_RCC_OscConfig+0x470>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d0f0      	beq.n	8002e82 <HAL_RCC_OscConfig+0x416>
 8002ea0:	e054      	b.n	8002f4c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ea2:	4b10      	ldr	r3, [pc, #64]	@ (8002ee4 <HAL_RCC_OscConfig+0x478>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea8:	f7fe ff48 	bl	8001d3c <HAL_GetTick>
 8002eac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eae:	e008      	b.n	8002ec2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eb0:	f7fe ff44 	bl	8001d3c <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e045      	b.n	8002f4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ec2:	4b06      	ldr	r3, [pc, #24]	@ (8002edc <HAL_RCC_OscConfig+0x470>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d1f0      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x444>
 8002ece:	e03d      	b.n	8002f4c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	699b      	ldr	r3, [r3, #24]
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d107      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e038      	b.n	8002f4e <HAL_RCC_OscConfig+0x4e2>
 8002edc:	40023800 	.word	0x40023800
 8002ee0:	40007000 	.word	0x40007000
 8002ee4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ee8:	4b1b      	ldr	r3, [pc, #108]	@ (8002f58 <HAL_RCC_OscConfig+0x4ec>)
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d028      	beq.n	8002f48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d121      	bne.n	8002f48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d11a      	bne.n	8002f48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f12:	68fa      	ldr	r2, [r7, #12]
 8002f14:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002f18:	4013      	ands	r3, r2
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002f1e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d111      	bne.n	8002f48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f2e:	085b      	lsrs	r3, r3, #1
 8002f30:	3b01      	subs	r3, #1
 8002f32:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d107      	bne.n	8002f48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f42:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d001      	beq.n	8002f4c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e000      	b.n	8002f4e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3718      	adds	r7, #24
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	40023800 	.word	0x40023800

08002f5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d101      	bne.n	8002f70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e0cc      	b.n	800310a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f70:	4b68      	ldr	r3, [pc, #416]	@ (8003114 <HAL_RCC_ClockConfig+0x1b8>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0307 	and.w	r3, r3, #7
 8002f78:	683a      	ldr	r2, [r7, #0]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d90c      	bls.n	8002f98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f7e:	4b65      	ldr	r3, [pc, #404]	@ (8003114 <HAL_RCC_ClockConfig+0x1b8>)
 8002f80:	683a      	ldr	r2, [r7, #0]
 8002f82:	b2d2      	uxtb	r2, r2
 8002f84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f86:	4b63      	ldr	r3, [pc, #396]	@ (8003114 <HAL_RCC_ClockConfig+0x1b8>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0307 	and.w	r3, r3, #7
 8002f8e:	683a      	ldr	r2, [r7, #0]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d001      	beq.n	8002f98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e0b8      	b.n	800310a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0302 	and.w	r3, r3, #2
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d020      	beq.n	8002fe6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0304 	and.w	r3, r3, #4
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d005      	beq.n	8002fbc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fb0:	4b59      	ldr	r3, [pc, #356]	@ (8003118 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	4a58      	ldr	r2, [pc, #352]	@ (8003118 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002fba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0308 	and.w	r3, r3, #8
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d005      	beq.n	8002fd4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fc8:	4b53      	ldr	r3, [pc, #332]	@ (8003118 <HAL_RCC_ClockConfig+0x1bc>)
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	4a52      	ldr	r2, [pc, #328]	@ (8003118 <HAL_RCC_ClockConfig+0x1bc>)
 8002fce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002fd2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fd4:	4b50      	ldr	r3, [pc, #320]	@ (8003118 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	494d      	ldr	r1, [pc, #308]	@ (8003118 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0301 	and.w	r3, r3, #1
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d044      	beq.n	800307c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d107      	bne.n	800300a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ffa:	4b47      	ldr	r3, [pc, #284]	@ (8003118 <HAL_RCC_ClockConfig+0x1bc>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d119      	bne.n	800303a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e07f      	b.n	800310a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	2b02      	cmp	r3, #2
 8003010:	d003      	beq.n	800301a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003016:	2b03      	cmp	r3, #3
 8003018:	d107      	bne.n	800302a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800301a:	4b3f      	ldr	r3, [pc, #252]	@ (8003118 <HAL_RCC_ClockConfig+0x1bc>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d109      	bne.n	800303a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e06f      	b.n	800310a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800302a:	4b3b      	ldr	r3, [pc, #236]	@ (8003118 <HAL_RCC_ClockConfig+0x1bc>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	2b00      	cmp	r3, #0
 8003034:	d101      	bne.n	800303a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e067      	b.n	800310a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800303a:	4b37      	ldr	r3, [pc, #220]	@ (8003118 <HAL_RCC_ClockConfig+0x1bc>)
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f023 0203 	bic.w	r2, r3, #3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	4934      	ldr	r1, [pc, #208]	@ (8003118 <HAL_RCC_ClockConfig+0x1bc>)
 8003048:	4313      	orrs	r3, r2
 800304a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800304c:	f7fe fe76 	bl	8001d3c <HAL_GetTick>
 8003050:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003052:	e00a      	b.n	800306a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003054:	f7fe fe72 	bl	8001d3c <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003062:	4293      	cmp	r3, r2
 8003064:	d901      	bls.n	800306a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e04f      	b.n	800310a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800306a:	4b2b      	ldr	r3, [pc, #172]	@ (8003118 <HAL_RCC_ClockConfig+0x1bc>)
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f003 020c 	and.w	r2, r3, #12
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	429a      	cmp	r2, r3
 800307a:	d1eb      	bne.n	8003054 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800307c:	4b25      	ldr	r3, [pc, #148]	@ (8003114 <HAL_RCC_ClockConfig+0x1b8>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0307 	and.w	r3, r3, #7
 8003084:	683a      	ldr	r2, [r7, #0]
 8003086:	429a      	cmp	r2, r3
 8003088:	d20c      	bcs.n	80030a4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800308a:	4b22      	ldr	r3, [pc, #136]	@ (8003114 <HAL_RCC_ClockConfig+0x1b8>)
 800308c:	683a      	ldr	r2, [r7, #0]
 800308e:	b2d2      	uxtb	r2, r2
 8003090:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003092:	4b20      	ldr	r3, [pc, #128]	@ (8003114 <HAL_RCC_ClockConfig+0x1b8>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0307 	and.w	r3, r3, #7
 800309a:	683a      	ldr	r2, [r7, #0]
 800309c:	429a      	cmp	r2, r3
 800309e:	d001      	beq.n	80030a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e032      	b.n	800310a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0304 	and.w	r3, r3, #4
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d008      	beq.n	80030c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030b0:	4b19      	ldr	r3, [pc, #100]	@ (8003118 <HAL_RCC_ClockConfig+0x1bc>)
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	4916      	ldr	r1, [pc, #88]	@ (8003118 <HAL_RCC_ClockConfig+0x1bc>)
 80030be:	4313      	orrs	r3, r2
 80030c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0308 	and.w	r3, r3, #8
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d009      	beq.n	80030e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030ce:	4b12      	ldr	r3, [pc, #72]	@ (8003118 <HAL_RCC_ClockConfig+0x1bc>)
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	00db      	lsls	r3, r3, #3
 80030dc:	490e      	ldr	r1, [pc, #56]	@ (8003118 <HAL_RCC_ClockConfig+0x1bc>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030e2:	f000 f821 	bl	8003128 <HAL_RCC_GetSysClockFreq>
 80030e6:	4602      	mov	r2, r0
 80030e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003118 <HAL_RCC_ClockConfig+0x1bc>)
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	091b      	lsrs	r3, r3, #4
 80030ee:	f003 030f 	and.w	r3, r3, #15
 80030f2:	490a      	ldr	r1, [pc, #40]	@ (800311c <HAL_RCC_ClockConfig+0x1c0>)
 80030f4:	5ccb      	ldrb	r3, [r1, r3]
 80030f6:	fa22 f303 	lsr.w	r3, r2, r3
 80030fa:	4a09      	ldr	r2, [pc, #36]	@ (8003120 <HAL_RCC_ClockConfig+0x1c4>)
 80030fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80030fe:	4b09      	ldr	r3, [pc, #36]	@ (8003124 <HAL_RCC_ClockConfig+0x1c8>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4618      	mov	r0, r3
 8003104:	f7fe fcb6 	bl	8001a74 <HAL_InitTick>

  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3710      	adds	r7, #16
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	40023c00 	.word	0x40023c00
 8003118:	40023800 	.word	0x40023800
 800311c:	08009360 	.word	0x08009360
 8003120:	20000000 	.word	0x20000000
 8003124:	20000004 	.word	0x20000004

08003128 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003128:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800312c:	b090      	sub	sp, #64	@ 0x40
 800312e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003130:	2300      	movs	r3, #0
 8003132:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003134:	2300      	movs	r3, #0
 8003136:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003138:	2300      	movs	r3, #0
 800313a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800313c:	2300      	movs	r3, #0
 800313e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003140:	4b59      	ldr	r3, [pc, #356]	@ (80032a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f003 030c 	and.w	r3, r3, #12
 8003148:	2b08      	cmp	r3, #8
 800314a:	d00d      	beq.n	8003168 <HAL_RCC_GetSysClockFreq+0x40>
 800314c:	2b08      	cmp	r3, #8
 800314e:	f200 80a1 	bhi.w	8003294 <HAL_RCC_GetSysClockFreq+0x16c>
 8003152:	2b00      	cmp	r3, #0
 8003154:	d002      	beq.n	800315c <HAL_RCC_GetSysClockFreq+0x34>
 8003156:	2b04      	cmp	r3, #4
 8003158:	d003      	beq.n	8003162 <HAL_RCC_GetSysClockFreq+0x3a>
 800315a:	e09b      	b.n	8003294 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800315c:	4b53      	ldr	r3, [pc, #332]	@ (80032ac <HAL_RCC_GetSysClockFreq+0x184>)
 800315e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003160:	e09b      	b.n	800329a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003162:	4b53      	ldr	r3, [pc, #332]	@ (80032b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003164:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003166:	e098      	b.n	800329a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003168:	4b4f      	ldr	r3, [pc, #316]	@ (80032a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003170:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003172:	4b4d      	ldr	r3, [pc, #308]	@ (80032a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d028      	beq.n	80031d0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800317e:	4b4a      	ldr	r3, [pc, #296]	@ (80032a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	099b      	lsrs	r3, r3, #6
 8003184:	2200      	movs	r2, #0
 8003186:	623b      	str	r3, [r7, #32]
 8003188:	627a      	str	r2, [r7, #36]	@ 0x24
 800318a:	6a3b      	ldr	r3, [r7, #32]
 800318c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003190:	2100      	movs	r1, #0
 8003192:	4b47      	ldr	r3, [pc, #284]	@ (80032b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003194:	fb03 f201 	mul.w	r2, r3, r1
 8003198:	2300      	movs	r3, #0
 800319a:	fb00 f303 	mul.w	r3, r0, r3
 800319e:	4413      	add	r3, r2
 80031a0:	4a43      	ldr	r2, [pc, #268]	@ (80032b0 <HAL_RCC_GetSysClockFreq+0x188>)
 80031a2:	fba0 1202 	umull	r1, r2, r0, r2
 80031a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80031a8:	460a      	mov	r2, r1
 80031aa:	62ba      	str	r2, [r7, #40]	@ 0x28
 80031ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80031ae:	4413      	add	r3, r2
 80031b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80031b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031b4:	2200      	movs	r2, #0
 80031b6:	61bb      	str	r3, [r7, #24]
 80031b8:	61fa      	str	r2, [r7, #28]
 80031ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031be:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80031c2:	f7fd f85d 	bl	8000280 <__aeabi_uldivmod>
 80031c6:	4602      	mov	r2, r0
 80031c8:	460b      	mov	r3, r1
 80031ca:	4613      	mov	r3, r2
 80031cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031ce:	e053      	b.n	8003278 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031d0:	4b35      	ldr	r3, [pc, #212]	@ (80032a8 <HAL_RCC_GetSysClockFreq+0x180>)
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	099b      	lsrs	r3, r3, #6
 80031d6:	2200      	movs	r2, #0
 80031d8:	613b      	str	r3, [r7, #16]
 80031da:	617a      	str	r2, [r7, #20]
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80031e2:	f04f 0b00 	mov.w	fp, #0
 80031e6:	4652      	mov	r2, sl
 80031e8:	465b      	mov	r3, fp
 80031ea:	f04f 0000 	mov.w	r0, #0
 80031ee:	f04f 0100 	mov.w	r1, #0
 80031f2:	0159      	lsls	r1, r3, #5
 80031f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031f8:	0150      	lsls	r0, r2, #5
 80031fa:	4602      	mov	r2, r0
 80031fc:	460b      	mov	r3, r1
 80031fe:	ebb2 080a 	subs.w	r8, r2, sl
 8003202:	eb63 090b 	sbc.w	r9, r3, fp
 8003206:	f04f 0200 	mov.w	r2, #0
 800320a:	f04f 0300 	mov.w	r3, #0
 800320e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003212:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003216:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800321a:	ebb2 0408 	subs.w	r4, r2, r8
 800321e:	eb63 0509 	sbc.w	r5, r3, r9
 8003222:	f04f 0200 	mov.w	r2, #0
 8003226:	f04f 0300 	mov.w	r3, #0
 800322a:	00eb      	lsls	r3, r5, #3
 800322c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003230:	00e2      	lsls	r2, r4, #3
 8003232:	4614      	mov	r4, r2
 8003234:	461d      	mov	r5, r3
 8003236:	eb14 030a 	adds.w	r3, r4, sl
 800323a:	603b      	str	r3, [r7, #0]
 800323c:	eb45 030b 	adc.w	r3, r5, fp
 8003240:	607b      	str	r3, [r7, #4]
 8003242:	f04f 0200 	mov.w	r2, #0
 8003246:	f04f 0300 	mov.w	r3, #0
 800324a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800324e:	4629      	mov	r1, r5
 8003250:	028b      	lsls	r3, r1, #10
 8003252:	4621      	mov	r1, r4
 8003254:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003258:	4621      	mov	r1, r4
 800325a:	028a      	lsls	r2, r1, #10
 800325c:	4610      	mov	r0, r2
 800325e:	4619      	mov	r1, r3
 8003260:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003262:	2200      	movs	r2, #0
 8003264:	60bb      	str	r3, [r7, #8]
 8003266:	60fa      	str	r2, [r7, #12]
 8003268:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800326c:	f7fd f808 	bl	8000280 <__aeabi_uldivmod>
 8003270:	4602      	mov	r2, r0
 8003272:	460b      	mov	r3, r1
 8003274:	4613      	mov	r3, r2
 8003276:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003278:	4b0b      	ldr	r3, [pc, #44]	@ (80032a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	0c1b      	lsrs	r3, r3, #16
 800327e:	f003 0303 	and.w	r3, r3, #3
 8003282:	3301      	adds	r3, #1
 8003284:	005b      	lsls	r3, r3, #1
 8003286:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003288:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800328a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800328c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003290:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003292:	e002      	b.n	800329a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003294:	4b05      	ldr	r3, [pc, #20]	@ (80032ac <HAL_RCC_GetSysClockFreq+0x184>)
 8003296:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003298:	bf00      	nop
    }
  }
  return sysclockfreq;
 800329a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800329c:	4618      	mov	r0, r3
 800329e:	3740      	adds	r7, #64	@ 0x40
 80032a0:	46bd      	mov	sp, r7
 80032a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032a6:	bf00      	nop
 80032a8:	40023800 	.word	0x40023800
 80032ac:	00f42400 	.word	0x00f42400
 80032b0:	017d7840 	.word	0x017d7840

080032b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032b4:	b480      	push	{r7}
 80032b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032b8:	4b03      	ldr	r3, [pc, #12]	@ (80032c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80032ba:	681b      	ldr	r3, [r3, #0]
}
 80032bc:	4618      	mov	r0, r3
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	20000000 	.word	0x20000000

080032cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80032d0:	f7ff fff0 	bl	80032b4 <HAL_RCC_GetHCLKFreq>
 80032d4:	4602      	mov	r2, r0
 80032d6:	4b05      	ldr	r3, [pc, #20]	@ (80032ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	0a9b      	lsrs	r3, r3, #10
 80032dc:	f003 0307 	and.w	r3, r3, #7
 80032e0:	4903      	ldr	r1, [pc, #12]	@ (80032f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032e2:	5ccb      	ldrb	r3, [r1, r3]
 80032e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	40023800 	.word	0x40023800
 80032f0:	08009370 	.word	0x08009370

080032f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80032f8:	f7ff ffdc 	bl	80032b4 <HAL_RCC_GetHCLKFreq>
 80032fc:	4602      	mov	r2, r0
 80032fe:	4b05      	ldr	r3, [pc, #20]	@ (8003314 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	0b5b      	lsrs	r3, r3, #13
 8003304:	f003 0307 	and.w	r3, r3, #7
 8003308:	4903      	ldr	r1, [pc, #12]	@ (8003318 <HAL_RCC_GetPCLK2Freq+0x24>)
 800330a:	5ccb      	ldrb	r3, [r1, r3]
 800330c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003310:	4618      	mov	r0, r3
 8003312:	bd80      	pop	{r7, pc}
 8003314:	40023800 	.word	0x40023800
 8003318:	08009370 	.word	0x08009370

0800331c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	220f      	movs	r2, #15
 800332a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800332c:	4b12      	ldr	r3, [pc, #72]	@ (8003378 <HAL_RCC_GetClockConfig+0x5c>)
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f003 0203 	and.w	r2, r3, #3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003338:	4b0f      	ldr	r3, [pc, #60]	@ (8003378 <HAL_RCC_GetClockConfig+0x5c>)
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003344:	4b0c      	ldr	r3, [pc, #48]	@ (8003378 <HAL_RCC_GetClockConfig+0x5c>)
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003350:	4b09      	ldr	r3, [pc, #36]	@ (8003378 <HAL_RCC_GetClockConfig+0x5c>)
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	08db      	lsrs	r3, r3, #3
 8003356:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800335e:	4b07      	ldr	r3, [pc, #28]	@ (800337c <HAL_RCC_GetClockConfig+0x60>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0207 	and.w	r2, r3, #7
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	601a      	str	r2, [r3, #0]
}
 800336a:	bf00      	nop
 800336c:	370c      	adds	r7, #12
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	40023800 	.word	0x40023800
 800337c:	40023c00 	.word	0x40023c00

08003380 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d101      	bne.n	8003392 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e041      	b.n	8003416 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003398:	b2db      	uxtb	r3, r3
 800339a:	2b00      	cmp	r3, #0
 800339c:	d106      	bne.n	80033ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f7fe fa72 	bl	8001890 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2202      	movs	r2, #2
 80033b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	3304      	adds	r3, #4
 80033bc:	4619      	mov	r1, r3
 80033be:	4610      	mov	r0, r2
 80033c0:	f000 fa70 	bl	80038a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	3708      	adds	r7, #8
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
	...

08003420 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003420:	b480      	push	{r7}
 8003422:	b085      	sub	sp, #20
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800342e:	b2db      	uxtb	r3, r3
 8003430:	2b01      	cmp	r3, #1
 8003432:	d001      	beq.n	8003438 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e044      	b.n	80034c2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2202      	movs	r2, #2
 800343c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	68da      	ldr	r2, [r3, #12]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f042 0201 	orr.w	r2, r2, #1
 800344e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a1e      	ldr	r2, [pc, #120]	@ (80034d0 <HAL_TIM_Base_Start_IT+0xb0>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d018      	beq.n	800348c <HAL_TIM_Base_Start_IT+0x6c>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003462:	d013      	beq.n	800348c <HAL_TIM_Base_Start_IT+0x6c>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a1a      	ldr	r2, [pc, #104]	@ (80034d4 <HAL_TIM_Base_Start_IT+0xb4>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d00e      	beq.n	800348c <HAL_TIM_Base_Start_IT+0x6c>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a19      	ldr	r2, [pc, #100]	@ (80034d8 <HAL_TIM_Base_Start_IT+0xb8>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d009      	beq.n	800348c <HAL_TIM_Base_Start_IT+0x6c>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a17      	ldr	r2, [pc, #92]	@ (80034dc <HAL_TIM_Base_Start_IT+0xbc>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d004      	beq.n	800348c <HAL_TIM_Base_Start_IT+0x6c>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a16      	ldr	r2, [pc, #88]	@ (80034e0 <HAL_TIM_Base_Start_IT+0xc0>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d111      	bne.n	80034b0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	f003 0307 	and.w	r3, r3, #7
 8003496:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2b06      	cmp	r3, #6
 800349c:	d010      	beq.n	80034c0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f042 0201 	orr.w	r2, r2, #1
 80034ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034ae:	e007      	b.n	80034c0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f042 0201 	orr.w	r2, r2, #1
 80034be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3714      	adds	r7, #20
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	40010000 	.word	0x40010000
 80034d4:	40000400 	.word	0x40000400
 80034d8:	40000800 	.word	0x40000800
 80034dc:	40000c00 	.word	0x40000c00
 80034e0:	40014000 	.word	0x40014000

080034e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	f003 0302 	and.w	r3, r3, #2
 8003502:	2b00      	cmp	r3, #0
 8003504:	d020      	beq.n	8003548 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f003 0302 	and.w	r3, r3, #2
 800350c:	2b00      	cmp	r3, #0
 800350e:	d01b      	beq.n	8003548 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f06f 0202 	mvn.w	r2, #2
 8003518:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2201      	movs	r2, #1
 800351e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	f003 0303 	and.w	r3, r3, #3
 800352a:	2b00      	cmp	r3, #0
 800352c:	d003      	beq.n	8003536 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f000 f999 	bl	8003866 <HAL_TIM_IC_CaptureCallback>
 8003534:	e005      	b.n	8003542 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 f98b 	bl	8003852 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 f99c 	bl	800387a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	f003 0304 	and.w	r3, r3, #4
 800354e:	2b00      	cmp	r3, #0
 8003550:	d020      	beq.n	8003594 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f003 0304 	and.w	r3, r3, #4
 8003558:	2b00      	cmp	r3, #0
 800355a:	d01b      	beq.n	8003594 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f06f 0204 	mvn.w	r2, #4
 8003564:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2202      	movs	r2, #2
 800356a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	699b      	ldr	r3, [r3, #24]
 8003572:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003576:	2b00      	cmp	r3, #0
 8003578:	d003      	beq.n	8003582 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 f973 	bl	8003866 <HAL_TIM_IC_CaptureCallback>
 8003580:	e005      	b.n	800358e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 f965 	bl	8003852 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f000 f976 	bl	800387a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	f003 0308 	and.w	r3, r3, #8
 800359a:	2b00      	cmp	r3, #0
 800359c:	d020      	beq.n	80035e0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f003 0308 	and.w	r3, r3, #8
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d01b      	beq.n	80035e0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f06f 0208 	mvn.w	r2, #8
 80035b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2204      	movs	r2, #4
 80035b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	69db      	ldr	r3, [r3, #28]
 80035be:	f003 0303 	and.w	r3, r3, #3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d003      	beq.n	80035ce <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 f94d 	bl	8003866 <HAL_TIM_IC_CaptureCallback>
 80035cc:	e005      	b.n	80035da <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 f93f 	bl	8003852 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f000 f950 	bl	800387a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	f003 0310 	and.w	r3, r3, #16
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d020      	beq.n	800362c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f003 0310 	and.w	r3, r3, #16
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d01b      	beq.n	800362c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f06f 0210 	mvn.w	r2, #16
 80035fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2208      	movs	r2, #8
 8003602:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	69db      	ldr	r3, [r3, #28]
 800360a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800360e:	2b00      	cmp	r3, #0
 8003610:	d003      	beq.n	800361a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 f927 	bl	8003866 <HAL_TIM_IC_CaptureCallback>
 8003618:	e005      	b.n	8003626 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f000 f919 	bl	8003852 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f000 f92a 	bl	800387a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00c      	beq.n	8003650 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f003 0301 	and.w	r3, r3, #1
 800363c:	2b00      	cmp	r3, #0
 800363e:	d007      	beq.n	8003650 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f06f 0201 	mvn.w	r2, #1
 8003648:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f7fe f8dc 	bl	8001808 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003656:	2b00      	cmp	r3, #0
 8003658:	d00c      	beq.n	8003674 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003660:	2b00      	cmp	r3, #0
 8003662:	d007      	beq.n	8003674 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800366c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 fab6 	bl	8003be0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00c      	beq.n	8003698 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003684:	2b00      	cmp	r3, #0
 8003686:	d007      	beq.n	8003698 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003690:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 f8fb 	bl	800388e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	f003 0320 	and.w	r3, r3, #32
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00c      	beq.n	80036bc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	f003 0320 	and.w	r3, r3, #32
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d007      	beq.n	80036bc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f06f 0220 	mvn.w	r2, #32
 80036b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 fa88 	bl	8003bcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036bc:	bf00      	nop
 80036be:	3710      	adds	r7, #16
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036ce:	2300      	movs	r3, #0
 80036d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d101      	bne.n	80036e0 <HAL_TIM_ConfigClockSource+0x1c>
 80036dc:	2302      	movs	r3, #2
 80036de:	e0b4      	b.n	800384a <HAL_TIM_ConfigClockSource+0x186>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2202      	movs	r2, #2
 80036ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80036fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003706:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68ba      	ldr	r2, [r7, #8]
 800370e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003718:	d03e      	beq.n	8003798 <HAL_TIM_ConfigClockSource+0xd4>
 800371a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800371e:	f200 8087 	bhi.w	8003830 <HAL_TIM_ConfigClockSource+0x16c>
 8003722:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003726:	f000 8086 	beq.w	8003836 <HAL_TIM_ConfigClockSource+0x172>
 800372a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800372e:	d87f      	bhi.n	8003830 <HAL_TIM_ConfigClockSource+0x16c>
 8003730:	2b70      	cmp	r3, #112	@ 0x70
 8003732:	d01a      	beq.n	800376a <HAL_TIM_ConfigClockSource+0xa6>
 8003734:	2b70      	cmp	r3, #112	@ 0x70
 8003736:	d87b      	bhi.n	8003830 <HAL_TIM_ConfigClockSource+0x16c>
 8003738:	2b60      	cmp	r3, #96	@ 0x60
 800373a:	d050      	beq.n	80037de <HAL_TIM_ConfigClockSource+0x11a>
 800373c:	2b60      	cmp	r3, #96	@ 0x60
 800373e:	d877      	bhi.n	8003830 <HAL_TIM_ConfigClockSource+0x16c>
 8003740:	2b50      	cmp	r3, #80	@ 0x50
 8003742:	d03c      	beq.n	80037be <HAL_TIM_ConfigClockSource+0xfa>
 8003744:	2b50      	cmp	r3, #80	@ 0x50
 8003746:	d873      	bhi.n	8003830 <HAL_TIM_ConfigClockSource+0x16c>
 8003748:	2b40      	cmp	r3, #64	@ 0x40
 800374a:	d058      	beq.n	80037fe <HAL_TIM_ConfigClockSource+0x13a>
 800374c:	2b40      	cmp	r3, #64	@ 0x40
 800374e:	d86f      	bhi.n	8003830 <HAL_TIM_ConfigClockSource+0x16c>
 8003750:	2b30      	cmp	r3, #48	@ 0x30
 8003752:	d064      	beq.n	800381e <HAL_TIM_ConfigClockSource+0x15a>
 8003754:	2b30      	cmp	r3, #48	@ 0x30
 8003756:	d86b      	bhi.n	8003830 <HAL_TIM_ConfigClockSource+0x16c>
 8003758:	2b20      	cmp	r3, #32
 800375a:	d060      	beq.n	800381e <HAL_TIM_ConfigClockSource+0x15a>
 800375c:	2b20      	cmp	r3, #32
 800375e:	d867      	bhi.n	8003830 <HAL_TIM_ConfigClockSource+0x16c>
 8003760:	2b00      	cmp	r3, #0
 8003762:	d05c      	beq.n	800381e <HAL_TIM_ConfigClockSource+0x15a>
 8003764:	2b10      	cmp	r3, #16
 8003766:	d05a      	beq.n	800381e <HAL_TIM_ConfigClockSource+0x15a>
 8003768:	e062      	b.n	8003830 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800377a:	f000 f999 	bl	8003ab0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800378c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68ba      	ldr	r2, [r7, #8]
 8003794:	609a      	str	r2, [r3, #8]
      break;
 8003796:	e04f      	b.n	8003838 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80037a8:	f000 f982 	bl	8003ab0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	689a      	ldr	r2, [r3, #8]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80037ba:	609a      	str	r2, [r3, #8]
      break;
 80037bc:	e03c      	b.n	8003838 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037ca:	461a      	mov	r2, r3
 80037cc:	f000 f8f6 	bl	80039bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2150      	movs	r1, #80	@ 0x50
 80037d6:	4618      	mov	r0, r3
 80037d8:	f000 f94f 	bl	8003a7a <TIM_ITRx_SetConfig>
      break;
 80037dc:	e02c      	b.n	8003838 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80037ea:	461a      	mov	r2, r3
 80037ec:	f000 f915 	bl	8003a1a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2160      	movs	r1, #96	@ 0x60
 80037f6:	4618      	mov	r0, r3
 80037f8:	f000 f93f 	bl	8003a7a <TIM_ITRx_SetConfig>
      break;
 80037fc:	e01c      	b.n	8003838 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800380a:	461a      	mov	r2, r3
 800380c:	f000 f8d6 	bl	80039bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2140      	movs	r1, #64	@ 0x40
 8003816:	4618      	mov	r0, r3
 8003818:	f000 f92f 	bl	8003a7a <TIM_ITRx_SetConfig>
      break;
 800381c:	e00c      	b.n	8003838 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4619      	mov	r1, r3
 8003828:	4610      	mov	r0, r2
 800382a:	f000 f926 	bl	8003a7a <TIM_ITRx_SetConfig>
      break;
 800382e:	e003      	b.n	8003838 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	73fb      	strb	r3, [r7, #15]
      break;
 8003834:	e000      	b.n	8003838 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003836:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003848:	7bfb      	ldrb	r3, [r7, #15]
}
 800384a:	4618      	mov	r0, r3
 800384c:	3710      	adds	r7, #16
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}

08003852 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003852:	b480      	push	{r7}
 8003854:	b083      	sub	sp, #12
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800385a:	bf00      	nop
 800385c:	370c      	adds	r7, #12
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr

08003866 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003866:	b480      	push	{r7}
 8003868:	b083      	sub	sp, #12
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800386e:	bf00      	nop
 8003870:	370c      	adds	r7, #12
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr

0800387a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800387a:	b480      	push	{r7}
 800387c:	b083      	sub	sp, #12
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003882:	bf00      	nop
 8003884:	370c      	adds	r7, #12
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr

0800388e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800388e:	b480      	push	{r7}
 8003890:	b083      	sub	sp, #12
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003896:	bf00      	nop
 8003898:	370c      	adds	r7, #12
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
	...

080038a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b085      	sub	sp, #20
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4a3a      	ldr	r2, [pc, #232]	@ (80039a0 <TIM_Base_SetConfig+0xfc>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d00f      	beq.n	80038dc <TIM_Base_SetConfig+0x38>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038c2:	d00b      	beq.n	80038dc <TIM_Base_SetConfig+0x38>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a37      	ldr	r2, [pc, #220]	@ (80039a4 <TIM_Base_SetConfig+0x100>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d007      	beq.n	80038dc <TIM_Base_SetConfig+0x38>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4a36      	ldr	r2, [pc, #216]	@ (80039a8 <TIM_Base_SetConfig+0x104>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d003      	beq.n	80038dc <TIM_Base_SetConfig+0x38>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4a35      	ldr	r2, [pc, #212]	@ (80039ac <TIM_Base_SetConfig+0x108>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d108      	bne.n	80038ee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	68fa      	ldr	r2, [r7, #12]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a2b      	ldr	r2, [pc, #172]	@ (80039a0 <TIM_Base_SetConfig+0xfc>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d01b      	beq.n	800392e <TIM_Base_SetConfig+0x8a>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038fc:	d017      	beq.n	800392e <TIM_Base_SetConfig+0x8a>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a28      	ldr	r2, [pc, #160]	@ (80039a4 <TIM_Base_SetConfig+0x100>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d013      	beq.n	800392e <TIM_Base_SetConfig+0x8a>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a27      	ldr	r2, [pc, #156]	@ (80039a8 <TIM_Base_SetConfig+0x104>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d00f      	beq.n	800392e <TIM_Base_SetConfig+0x8a>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a26      	ldr	r2, [pc, #152]	@ (80039ac <TIM_Base_SetConfig+0x108>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d00b      	beq.n	800392e <TIM_Base_SetConfig+0x8a>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a25      	ldr	r2, [pc, #148]	@ (80039b0 <TIM_Base_SetConfig+0x10c>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d007      	beq.n	800392e <TIM_Base_SetConfig+0x8a>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a24      	ldr	r2, [pc, #144]	@ (80039b4 <TIM_Base_SetConfig+0x110>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d003      	beq.n	800392e <TIM_Base_SetConfig+0x8a>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a23      	ldr	r2, [pc, #140]	@ (80039b8 <TIM_Base_SetConfig+0x114>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d108      	bne.n	8003940 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003934:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	68fa      	ldr	r2, [r7, #12]
 800393c:	4313      	orrs	r3, r2
 800393e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	695b      	ldr	r3, [r3, #20]
 800394a:	4313      	orrs	r3, r2
 800394c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	68fa      	ldr	r2, [r7, #12]
 8003952:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	689a      	ldr	r2, [r3, #8]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4a0e      	ldr	r2, [pc, #56]	@ (80039a0 <TIM_Base_SetConfig+0xfc>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d103      	bne.n	8003974 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	691a      	ldr	r2, [r3, #16]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	2b01      	cmp	r3, #1
 8003984:	d105      	bne.n	8003992 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	f023 0201 	bic.w	r2, r3, #1
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	611a      	str	r2, [r3, #16]
  }
}
 8003992:	bf00      	nop
 8003994:	3714      	adds	r7, #20
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop
 80039a0:	40010000 	.word	0x40010000
 80039a4:	40000400 	.word	0x40000400
 80039a8:	40000800 	.word	0x40000800
 80039ac:	40000c00 	.word	0x40000c00
 80039b0:	40014000 	.word	0x40014000
 80039b4:	40014400 	.word	0x40014400
 80039b8:	40014800 	.word	0x40014800

080039bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039bc:	b480      	push	{r7}
 80039be:	b087      	sub	sp, #28
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	60b9      	str	r1, [r7, #8]
 80039c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6a1b      	ldr	r3, [r3, #32]
 80039cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6a1b      	ldr	r3, [r3, #32]
 80039d2:	f023 0201 	bic.w	r2, r3, #1
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	699b      	ldr	r3, [r3, #24]
 80039de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80039e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	011b      	lsls	r3, r3, #4
 80039ec:	693a      	ldr	r2, [r7, #16]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	f023 030a 	bic.w	r3, r3, #10
 80039f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80039fa:	697a      	ldr	r2, [r7, #20]
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	693a      	ldr	r2, [r7, #16]
 8003a06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	697a      	ldr	r2, [r7, #20]
 8003a0c:	621a      	str	r2, [r3, #32]
}
 8003a0e:	bf00      	nop
 8003a10:	371c      	adds	r7, #28
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr

08003a1a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a1a:	b480      	push	{r7}
 8003a1c:	b087      	sub	sp, #28
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	60f8      	str	r0, [r7, #12]
 8003a22:	60b9      	str	r1, [r7, #8]
 8003a24:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6a1b      	ldr	r3, [r3, #32]
 8003a2a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6a1b      	ldr	r3, [r3, #32]
 8003a30:	f023 0210 	bic.w	r2, r3, #16
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	699b      	ldr	r3, [r3, #24]
 8003a3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003a44:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	031b      	lsls	r3, r3, #12
 8003a4a:	693a      	ldr	r2, [r7, #16]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003a56:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	011b      	lsls	r3, r3, #4
 8003a5c:	697a      	ldr	r2, [r7, #20]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	693a      	ldr	r2, [r7, #16]
 8003a66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	697a      	ldr	r2, [r7, #20]
 8003a6c:	621a      	str	r2, [r3, #32]
}
 8003a6e:	bf00      	nop
 8003a70:	371c      	adds	r7, #28
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr

08003a7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a7a:	b480      	push	{r7}
 8003a7c:	b085      	sub	sp, #20
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
 8003a82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a92:	683a      	ldr	r2, [r7, #0]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	f043 0307 	orr.w	r3, r3, #7
 8003a9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	68fa      	ldr	r2, [r7, #12]
 8003aa2:	609a      	str	r2, [r3, #8]
}
 8003aa4:	bf00      	nop
 8003aa6:	3714      	adds	r7, #20
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b087      	sub	sp, #28
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]
 8003abc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003aca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	021a      	lsls	r2, r3, #8
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	431a      	orrs	r2, r3
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	697a      	ldr	r2, [r7, #20]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	697a      	ldr	r2, [r7, #20]
 8003ae2:	609a      	str	r2, [r3, #8]
}
 8003ae4:	bf00      	nop
 8003ae6:	371c      	adds	r7, #28
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b085      	sub	sp, #20
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d101      	bne.n	8003b08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b04:	2302      	movs	r3, #2
 8003b06:	e050      	b.n	8003baa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2202      	movs	r2, #2
 8003b14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	68fa      	ldr	r2, [r7, #12]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a1c      	ldr	r2, [pc, #112]	@ (8003bb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d018      	beq.n	8003b7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b54:	d013      	beq.n	8003b7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a18      	ldr	r2, [pc, #96]	@ (8003bbc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d00e      	beq.n	8003b7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a16      	ldr	r2, [pc, #88]	@ (8003bc0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d009      	beq.n	8003b7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a15      	ldr	r2, [pc, #84]	@ (8003bc4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d004      	beq.n	8003b7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a13      	ldr	r2, [pc, #76]	@ (8003bc8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d10c      	bne.n	8003b98 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	68ba      	ldr	r2, [r7, #8]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	68ba      	ldr	r2, [r7, #8]
 8003b96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3714      	adds	r7, #20
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop
 8003bb8:	40010000 	.word	0x40010000
 8003bbc:	40000400 	.word	0x40000400
 8003bc0:	40000800 	.word	0x40000800
 8003bc4:	40000c00 	.word	0x40000c00
 8003bc8:	40014000 	.word	0x40014000

08003bcc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003bd4:	bf00      	nop
 8003bd6:	370c      	adds	r7, #12
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003be8:	bf00      	nop
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d101      	bne.n	8003c06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e042      	b.n	8003c8c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d106      	bne.n	8003c20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f7fd fe74 	bl	8001908 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2224      	movs	r2, #36	@ 0x24
 8003c24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68da      	ldr	r2, [r3, #12]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003c36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f000 fdc1 	bl	80047c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	691a      	ldr	r2, [r3, #16]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003c4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	695a      	ldr	r2, [r3, #20]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003c5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	68da      	ldr	r2, [r3, #12]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003c6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2220      	movs	r2, #32
 8003c78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2220      	movs	r2, #32
 8003c80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003c8a:	2300      	movs	r3, #0
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3708      	adds	r7, #8
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b08c      	sub	sp, #48	@ 0x30
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	2b20      	cmp	r3, #32
 8003cac:	d156      	bne.n	8003d5c <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d002      	beq.n	8003cba <HAL_UART_Transmit_DMA+0x26>
 8003cb4:	88fb      	ldrh	r3, [r7, #6]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d101      	bne.n	8003cbe <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e04f      	b.n	8003d5e <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8003cbe:	68ba      	ldr	r2, [r7, #8]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	88fa      	ldrh	r2, [r7, #6]
 8003cc8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	88fa      	ldrh	r2, [r7, #6]
 8003cce:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2221      	movs	r2, #33	@ 0x21
 8003cda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ce2:	4a21      	ldr	r2, [pc, #132]	@ (8003d68 <HAL_UART_Transmit_DMA+0xd4>)
 8003ce4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cea:	4a20      	ldr	r2, [pc, #128]	@ (8003d6c <HAL_UART_Transmit_DMA+0xd8>)
 8003cec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cf2:	4a1f      	ldr	r2, [pc, #124]	@ (8003d70 <HAL_UART_Transmit_DMA+0xdc>)
 8003cf4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8003cfe:	f107 0308 	add.w	r3, r7, #8
 8003d02:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003d08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d0a:	6819      	ldr	r1, [r3, #0]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	3304      	adds	r3, #4
 8003d12:	461a      	mov	r2, r3
 8003d14:	88fb      	ldrh	r3, [r7, #6]
 8003d16:	f7fe f9d1 	bl	80020bc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003d22:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	3314      	adds	r3, #20
 8003d2a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	e853 3f00 	ldrex	r3, [r3]
 8003d32:	617b      	str	r3, [r7, #20]
   return(result);
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d3a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	3314      	adds	r3, #20
 8003d42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d44:	627a      	str	r2, [r7, #36]	@ 0x24
 8003d46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d48:	6a39      	ldr	r1, [r7, #32]
 8003d4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d4c:	e841 2300 	strex	r3, r2, [r1]
 8003d50:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d1e5      	bne.n	8003d24 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	e000      	b.n	8003d5e <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8003d5c:	2302      	movs	r3, #2
  }
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3730      	adds	r7, #48	@ 0x30
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	080042ed 	.word	0x080042ed
 8003d6c:	08004387 	.word	0x08004387
 8003d70:	080043a3 	.word	0x080043a3

08003d74 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b0ba      	sub	sp, #232	@ 0xe8
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	695b      	ldr	r3, [r3, #20]
 8003d96:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003da0:	2300      	movs	r3, #0
 8003da2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003da6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003daa:	f003 030f 	and.w	r3, r3, #15
 8003dae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003db2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d10f      	bne.n	8003dda <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003dba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dbe:	f003 0320 	and.w	r3, r3, #32
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d009      	beq.n	8003dda <HAL_UART_IRQHandler+0x66>
 8003dc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003dca:	f003 0320 	and.w	r3, r3, #32
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d003      	beq.n	8003dda <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 fc36 	bl	8004644 <UART_Receive_IT>
      return;
 8003dd8:	e25b      	b.n	8004292 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003dda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	f000 80de 	beq.w	8003fa0 <HAL_UART_IRQHandler+0x22c>
 8003de4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003de8:	f003 0301 	and.w	r3, r3, #1
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d106      	bne.n	8003dfe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003df0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003df4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	f000 80d1 	beq.w	8003fa0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003dfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e02:	f003 0301 	and.w	r3, r3, #1
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d00b      	beq.n	8003e22 <HAL_UART_IRQHandler+0xae>
 8003e0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d005      	beq.n	8003e22 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e1a:	f043 0201 	orr.w	r2, r3, #1
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e26:	f003 0304 	and.w	r3, r3, #4
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00b      	beq.n	8003e46 <HAL_UART_IRQHandler+0xd2>
 8003e2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e32:	f003 0301 	and.w	r3, r3, #1
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d005      	beq.n	8003e46 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e3e:	f043 0202 	orr.w	r2, r3, #2
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00b      	beq.n	8003e6a <HAL_UART_IRQHandler+0xf6>
 8003e52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e56:	f003 0301 	and.w	r3, r3, #1
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d005      	beq.n	8003e6a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e62:	f043 0204 	orr.w	r2, r3, #4
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003e6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e6e:	f003 0308 	and.w	r3, r3, #8
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d011      	beq.n	8003e9a <HAL_UART_IRQHandler+0x126>
 8003e76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e7a:	f003 0320 	and.w	r3, r3, #32
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d105      	bne.n	8003e8e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003e82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e86:	f003 0301 	and.w	r3, r3, #1
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d005      	beq.n	8003e9a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e92:	f043 0208 	orr.w	r2, r3, #8
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	f000 81f2 	beq.w	8004288 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ea4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ea8:	f003 0320 	and.w	r3, r3, #32
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d008      	beq.n	8003ec2 <HAL_UART_IRQHandler+0x14e>
 8003eb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003eb4:	f003 0320 	and.w	r3, r3, #32
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d002      	beq.n	8003ec2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f000 fbc1 	bl	8004644 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	695b      	ldr	r3, [r3, #20]
 8003ec8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ecc:	2b40      	cmp	r3, #64	@ 0x40
 8003ece:	bf0c      	ite	eq
 8003ed0:	2301      	moveq	r3, #1
 8003ed2:	2300      	movne	r3, #0
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ede:	f003 0308 	and.w	r3, r3, #8
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d103      	bne.n	8003eee <HAL_UART_IRQHandler+0x17a>
 8003ee6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d04f      	beq.n	8003f8e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 fac9 	bl	8004486 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003efe:	2b40      	cmp	r3, #64	@ 0x40
 8003f00:	d141      	bne.n	8003f86 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	3314      	adds	r3, #20
 8003f08:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003f10:	e853 3f00 	ldrex	r3, [r3]
 8003f14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003f18:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003f1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	3314      	adds	r3, #20
 8003f2a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003f2e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003f32:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f36:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003f3a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003f3e:	e841 2300 	strex	r3, r2, [r1]
 8003f42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003f46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d1d9      	bne.n	8003f02 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d013      	beq.n	8003f7e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f5a:	4a7e      	ldr	r2, [pc, #504]	@ (8004154 <HAL_UART_IRQHandler+0x3e0>)
 8003f5c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f62:	4618      	mov	r0, r3
 8003f64:	f7fe f972 	bl	800224c <HAL_DMA_Abort_IT>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d016      	beq.n	8003f9c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003f78:	4610      	mov	r0, r2
 8003f7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f7c:	e00e      	b.n	8003f9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 f99e 	bl	80042c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f84:	e00a      	b.n	8003f9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 f99a 	bl	80042c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f8c:	e006      	b.n	8003f9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 f996 	bl	80042c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003f9a:	e175      	b.n	8004288 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f9c:	bf00      	nop
    return;
 8003f9e:	e173      	b.n	8004288 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	f040 814f 	bne.w	8004248 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003faa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fae:	f003 0310 	and.w	r3, r3, #16
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	f000 8148 	beq.w	8004248 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003fb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fbc:	f003 0310 	and.w	r3, r3, #16
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	f000 8141 	beq.w	8004248 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	60bb      	str	r3, [r7, #8]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	60bb      	str	r3, [r7, #8]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	60bb      	str	r3, [r7, #8]
 8003fda:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fe6:	2b40      	cmp	r3, #64	@ 0x40
 8003fe8:	f040 80b6 	bne.w	8004158 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003ff8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	f000 8145 	beq.w	800428c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004006:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800400a:	429a      	cmp	r2, r3
 800400c:	f080 813e 	bcs.w	800428c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004016:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800401c:	69db      	ldr	r3, [r3, #28]
 800401e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004022:	f000 8088 	beq.w	8004136 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	330c      	adds	r3, #12
 800402c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004030:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004034:	e853 3f00 	ldrex	r3, [r3]
 8004038:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800403c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004040:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004044:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	330c      	adds	r3, #12
 800404e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004052:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004056:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800405a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800405e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004062:	e841 2300 	strex	r3, r2, [r1]
 8004066:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800406a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800406e:	2b00      	cmp	r3, #0
 8004070:	d1d9      	bne.n	8004026 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	3314      	adds	r3, #20
 8004078:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800407a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800407c:	e853 3f00 	ldrex	r3, [r3]
 8004080:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004082:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004084:	f023 0301 	bic.w	r3, r3, #1
 8004088:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	3314      	adds	r3, #20
 8004092:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004096:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800409a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800409c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800409e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80040a2:	e841 2300 	strex	r3, r2, [r1]
 80040a6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80040a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d1e1      	bne.n	8004072 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	3314      	adds	r3, #20
 80040b4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80040b8:	e853 3f00 	ldrex	r3, [r3]
 80040bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80040be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80040c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	3314      	adds	r3, #20
 80040ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80040d2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80040d4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80040d8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80040da:	e841 2300 	strex	r3, r2, [r1]
 80040de:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80040e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d1e3      	bne.n	80040ae <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2220      	movs	r2, #32
 80040ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	330c      	adds	r3, #12
 80040fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040fe:	e853 3f00 	ldrex	r3, [r3]
 8004102:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004104:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004106:	f023 0310 	bic.w	r3, r3, #16
 800410a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	330c      	adds	r3, #12
 8004114:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004118:	65ba      	str	r2, [r7, #88]	@ 0x58
 800411a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800411c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800411e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004120:	e841 2300 	strex	r3, r2, [r1]
 8004124:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004126:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004128:	2b00      	cmp	r3, #0
 800412a:	d1e3      	bne.n	80040f4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004130:	4618      	mov	r0, r3
 8004132:	f7fe f81b 	bl	800216c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2202      	movs	r2, #2
 800413a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004144:	b29b      	uxth	r3, r3
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	b29b      	uxth	r3, r3
 800414a:	4619      	mov	r1, r3
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f000 f8c1 	bl	80042d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004152:	e09b      	b.n	800428c <HAL_UART_IRQHandler+0x518>
 8004154:	0800454d 	.word	0x0800454d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004160:	b29b      	uxth	r3, r3
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800416c:	b29b      	uxth	r3, r3
 800416e:	2b00      	cmp	r3, #0
 8004170:	f000 808e 	beq.w	8004290 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004174:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004178:	2b00      	cmp	r3, #0
 800417a:	f000 8089 	beq.w	8004290 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	330c      	adds	r3, #12
 8004184:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004188:	e853 3f00 	ldrex	r3, [r3]
 800418c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800418e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004190:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004194:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	330c      	adds	r3, #12
 800419e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80041a2:	647a      	str	r2, [r7, #68]	@ 0x44
 80041a4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80041a8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80041aa:	e841 2300 	strex	r3, r2, [r1]
 80041ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80041b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d1e3      	bne.n	800417e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	3314      	adds	r3, #20
 80041bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c0:	e853 3f00 	ldrex	r3, [r3]
 80041c4:	623b      	str	r3, [r7, #32]
   return(result);
 80041c6:	6a3b      	ldr	r3, [r7, #32]
 80041c8:	f023 0301 	bic.w	r3, r3, #1
 80041cc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	3314      	adds	r3, #20
 80041d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80041da:	633a      	str	r2, [r7, #48]	@ 0x30
 80041dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80041e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041e2:	e841 2300 	strex	r3, r2, [r1]
 80041e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80041e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d1e3      	bne.n	80041b6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2220      	movs	r2, #32
 80041f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	330c      	adds	r3, #12
 8004202:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	e853 3f00 	ldrex	r3, [r3]
 800420a:	60fb      	str	r3, [r7, #12]
   return(result);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f023 0310 	bic.w	r3, r3, #16
 8004212:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	330c      	adds	r3, #12
 800421c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004220:	61fa      	str	r2, [r7, #28]
 8004222:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004224:	69b9      	ldr	r1, [r7, #24]
 8004226:	69fa      	ldr	r2, [r7, #28]
 8004228:	e841 2300 	strex	r3, r2, [r1]
 800422c:	617b      	str	r3, [r7, #20]
   return(result);
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d1e3      	bne.n	80041fc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2202      	movs	r2, #2
 8004238:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800423a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800423e:	4619      	mov	r1, r3
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f000 f847 	bl	80042d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004246:	e023      	b.n	8004290 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004248:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800424c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004250:	2b00      	cmp	r3, #0
 8004252:	d009      	beq.n	8004268 <HAL_UART_IRQHandler+0x4f4>
 8004254:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004258:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800425c:	2b00      	cmp	r3, #0
 800425e:	d003      	beq.n	8004268 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f000 f987 	bl	8004574 <UART_Transmit_IT>
    return;
 8004266:	e014      	b.n	8004292 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004268:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800426c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004270:	2b00      	cmp	r3, #0
 8004272:	d00e      	beq.n	8004292 <HAL_UART_IRQHandler+0x51e>
 8004274:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004278:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800427c:	2b00      	cmp	r3, #0
 800427e:	d008      	beq.n	8004292 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f000 f9c7 	bl	8004614 <UART_EndTransmit_IT>
    return;
 8004286:	e004      	b.n	8004292 <HAL_UART_IRQHandler+0x51e>
    return;
 8004288:	bf00      	nop
 800428a:	e002      	b.n	8004292 <HAL_UART_IRQHandler+0x51e>
      return;
 800428c:	bf00      	nop
 800428e:	e000      	b.n	8004292 <HAL_UART_IRQHandler+0x51e>
      return;
 8004290:	bf00      	nop
  }
}
 8004292:	37e8      	adds	r7, #232	@ 0xe8
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}

08004298 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80042a0:	bf00      	nop
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80042b4:	bf00      	nop
 80042b6:	370c      	adds	r7, #12
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80042c8:	bf00      	nop
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	460b      	mov	r3, r1
 80042de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80042e0:	bf00      	nop
 80042e2:	370c      	adds	r7, #12
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr

080042ec <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b090      	sub	sp, #64	@ 0x40
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004304:	2b00      	cmp	r3, #0
 8004306:	d137      	bne.n	8004378 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8004308:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800430a:	2200      	movs	r2, #0
 800430c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800430e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	3314      	adds	r3, #20
 8004314:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004318:	e853 3f00 	ldrex	r3, [r3]
 800431c:	623b      	str	r3, [r7, #32]
   return(result);
 800431e:	6a3b      	ldr	r3, [r7, #32]
 8004320:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004324:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004326:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	3314      	adds	r3, #20
 800432c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800432e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004330:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004332:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004334:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004336:	e841 2300 	strex	r3, r2, [r1]
 800433a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800433c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800433e:	2b00      	cmp	r3, #0
 8004340:	d1e5      	bne.n	800430e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004342:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	330c      	adds	r3, #12
 8004348:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	e853 3f00 	ldrex	r3, [r3]
 8004350:	60fb      	str	r3, [r7, #12]
   return(result);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004358:	637b      	str	r3, [r7, #52]	@ 0x34
 800435a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	330c      	adds	r3, #12
 8004360:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004362:	61fa      	str	r2, [r7, #28]
 8004364:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004366:	69b9      	ldr	r1, [r7, #24]
 8004368:	69fa      	ldr	r2, [r7, #28]
 800436a:	e841 2300 	strex	r3, r2, [r1]
 800436e:	617b      	str	r3, [r7, #20]
   return(result);
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d1e5      	bne.n	8004342 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004376:	e002      	b.n	800437e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004378:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800437a:	f7fd f835 	bl	80013e8 <HAL_UART_TxCpltCallback>
}
 800437e:	bf00      	nop
 8004380:	3740      	adds	r7, #64	@ 0x40
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}

08004386 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004386:	b580      	push	{r7, lr}
 8004388:	b084      	sub	sp, #16
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004392:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004394:	68f8      	ldr	r0, [r7, #12]
 8004396:	f7ff ff7f 	bl	8004298 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800439a:	bf00      	nop
 800439c:	3710      	adds	r7, #16
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}

080043a2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80043a2:	b580      	push	{r7, lr}
 80043a4:	b084      	sub	sp, #16
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80043aa:	2300      	movs	r3, #0
 80043ac:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043b2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	695b      	ldr	r3, [r3, #20]
 80043ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043be:	2b80      	cmp	r3, #128	@ 0x80
 80043c0:	bf0c      	ite	eq
 80043c2:	2301      	moveq	r3, #1
 80043c4:	2300      	movne	r3, #0
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	2b21      	cmp	r3, #33	@ 0x21
 80043d4:	d108      	bne.n	80043e8 <UART_DMAError+0x46>
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d005      	beq.n	80043e8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	2200      	movs	r2, #0
 80043e0:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80043e2:	68b8      	ldr	r0, [r7, #8]
 80043e4:	f000 f827 	bl	8004436 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	695b      	ldr	r3, [r3, #20]
 80043ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043f2:	2b40      	cmp	r3, #64	@ 0x40
 80043f4:	bf0c      	ite	eq
 80043f6:	2301      	moveq	r3, #1
 80043f8:	2300      	movne	r3, #0
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004404:	b2db      	uxtb	r3, r3
 8004406:	2b22      	cmp	r3, #34	@ 0x22
 8004408:	d108      	bne.n	800441c <UART_DMAError+0x7a>
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d005      	beq.n	800441c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	2200      	movs	r2, #0
 8004414:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8004416:	68b8      	ldr	r0, [r7, #8]
 8004418:	f000 f835 	bl	8004486 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004420:	f043 0210 	orr.w	r2, r3, #16
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004428:	68b8      	ldr	r0, [r7, #8]
 800442a:	f7ff ff49 	bl	80042c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800442e:	bf00      	nop
 8004430:	3710      	adds	r7, #16
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}

08004436 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004436:	b480      	push	{r7}
 8004438:	b089      	sub	sp, #36	@ 0x24
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	330c      	adds	r3, #12
 8004444:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	e853 3f00 	ldrex	r3, [r3]
 800444c:	60bb      	str	r3, [r7, #8]
   return(result);
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004454:	61fb      	str	r3, [r7, #28]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	330c      	adds	r3, #12
 800445c:	69fa      	ldr	r2, [r7, #28]
 800445e:	61ba      	str	r2, [r7, #24]
 8004460:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004462:	6979      	ldr	r1, [r7, #20]
 8004464:	69ba      	ldr	r2, [r7, #24]
 8004466:	e841 2300 	strex	r3, r2, [r1]
 800446a:	613b      	str	r3, [r7, #16]
   return(result);
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d1e5      	bne.n	800443e <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2220      	movs	r2, #32
 8004476:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800447a:	bf00      	nop
 800447c:	3724      	adds	r7, #36	@ 0x24
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr

08004486 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004486:	b480      	push	{r7}
 8004488:	b095      	sub	sp, #84	@ 0x54
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	330c      	adds	r3, #12
 8004494:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004496:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004498:	e853 3f00 	ldrex	r3, [r3]
 800449c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800449e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80044a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	330c      	adds	r3, #12
 80044ac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80044ae:	643a      	str	r2, [r7, #64]	@ 0x40
 80044b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80044b4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80044b6:	e841 2300 	strex	r3, r2, [r1]
 80044ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80044bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d1e5      	bne.n	800448e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	3314      	adds	r3, #20
 80044c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ca:	6a3b      	ldr	r3, [r7, #32]
 80044cc:	e853 3f00 	ldrex	r3, [r3]
 80044d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	f023 0301 	bic.w	r3, r3, #1
 80044d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	3314      	adds	r3, #20
 80044e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80044e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80044e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044ea:	e841 2300 	strex	r3, r2, [r1]
 80044ee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80044f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d1e5      	bne.n	80044c2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d119      	bne.n	8004532 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	330c      	adds	r3, #12
 8004504:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	e853 3f00 	ldrex	r3, [r3]
 800450c:	60bb      	str	r3, [r7, #8]
   return(result);
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	f023 0310 	bic.w	r3, r3, #16
 8004514:	647b      	str	r3, [r7, #68]	@ 0x44
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	330c      	adds	r3, #12
 800451c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800451e:	61ba      	str	r2, [r7, #24]
 8004520:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004522:	6979      	ldr	r1, [r7, #20]
 8004524:	69ba      	ldr	r2, [r7, #24]
 8004526:	e841 2300 	strex	r3, r2, [r1]
 800452a:	613b      	str	r3, [r7, #16]
   return(result);
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1e5      	bne.n	80044fe <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2220      	movs	r2, #32
 8004536:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004540:	bf00      	nop
 8004542:	3754      	adds	r7, #84	@ 0x54
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004558:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2200      	movs	r2, #0
 800455e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2200      	movs	r2, #0
 8004564:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004566:	68f8      	ldr	r0, [r7, #12]
 8004568:	f7ff feaa 	bl	80042c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800456c:	bf00      	nop
 800456e:	3710      	adds	r7, #16
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}

08004574 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004574:	b480      	push	{r7}
 8004576:	b085      	sub	sp, #20
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004582:	b2db      	uxtb	r3, r3
 8004584:	2b21      	cmp	r3, #33	@ 0x21
 8004586:	d13e      	bne.n	8004606 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004590:	d114      	bne.n	80045bc <UART_Transmit_IT+0x48>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d110      	bne.n	80045bc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a1b      	ldr	r3, [r3, #32]
 800459e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	881b      	ldrh	r3, [r3, #0]
 80045a4:	461a      	mov	r2, r3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045ae:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6a1b      	ldr	r3, [r3, #32]
 80045b4:	1c9a      	adds	r2, r3, #2
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	621a      	str	r2, [r3, #32]
 80045ba:	e008      	b.n	80045ce <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a1b      	ldr	r3, [r3, #32]
 80045c0:	1c59      	adds	r1, r3, #1
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	6211      	str	r1, [r2, #32]
 80045c6:	781a      	ldrb	r2, [r3, #0]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	3b01      	subs	r3, #1
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	4619      	mov	r1, r3
 80045dc:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d10f      	bne.n	8004602 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	68da      	ldr	r2, [r3, #12]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80045f0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68da      	ldr	r2, [r3, #12]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004600:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004602:	2300      	movs	r3, #0
 8004604:	e000      	b.n	8004608 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004606:	2302      	movs	r3, #2
  }
}
 8004608:	4618      	mov	r0, r3
 800460a:	3714      	adds	r7, #20
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68da      	ldr	r2, [r3, #12]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800462a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2220      	movs	r2, #32
 8004630:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f7fc fed7 	bl	80013e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800463a:	2300      	movs	r3, #0
}
 800463c:	4618      	mov	r0, r3
 800463e:	3708      	adds	r7, #8
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}

08004644 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b08c      	sub	sp, #48	@ 0x30
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004652:	b2db      	uxtb	r3, r3
 8004654:	2b22      	cmp	r3, #34	@ 0x22
 8004656:	f040 80ae 	bne.w	80047b6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004662:	d117      	bne.n	8004694 <UART_Receive_IT+0x50>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	691b      	ldr	r3, [r3, #16]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d113      	bne.n	8004694 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800466c:	2300      	movs	r3, #0
 800466e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004674:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	b29b      	uxth	r3, r3
 800467e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004682:	b29a      	uxth	r2, r3
 8004684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004686:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800468c:	1c9a      	adds	r2, r3, #2
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	629a      	str	r2, [r3, #40]	@ 0x28
 8004692:	e026      	b.n	80046e2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004698:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800469a:	2300      	movs	r3, #0
 800469c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046a6:	d007      	beq.n	80046b8 <UART_Receive_IT+0x74>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d10a      	bne.n	80046c6 <UART_Receive_IT+0x82>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	691b      	ldr	r3, [r3, #16]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d106      	bne.n	80046c6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	b2da      	uxtb	r2, r3
 80046c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046c2:	701a      	strb	r2, [r3, #0]
 80046c4:	e008      	b.n	80046d8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80046d2:	b2da      	uxtb	r2, r3
 80046d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046d6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046dc:	1c5a      	adds	r2, r3, #1
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	3b01      	subs	r3, #1
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	4619      	mov	r1, r3
 80046f0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d15d      	bne.n	80047b2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	68da      	ldr	r2, [r3, #12]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f022 0220 	bic.w	r2, r2, #32
 8004704:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	68da      	ldr	r2, [r3, #12]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004714:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	695a      	ldr	r2, [r3, #20]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f022 0201 	bic.w	r2, r2, #1
 8004724:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2220      	movs	r2, #32
 800472a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004738:	2b01      	cmp	r3, #1
 800473a:	d135      	bne.n	80047a8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	330c      	adds	r3, #12
 8004748:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	e853 3f00 	ldrex	r3, [r3]
 8004750:	613b      	str	r3, [r7, #16]
   return(result);
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	f023 0310 	bic.w	r3, r3, #16
 8004758:	627b      	str	r3, [r7, #36]	@ 0x24
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	330c      	adds	r3, #12
 8004760:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004762:	623a      	str	r2, [r7, #32]
 8004764:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004766:	69f9      	ldr	r1, [r7, #28]
 8004768:	6a3a      	ldr	r2, [r7, #32]
 800476a:	e841 2300 	strex	r3, r2, [r1]
 800476e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d1e5      	bne.n	8004742 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 0310 	and.w	r3, r3, #16
 8004780:	2b10      	cmp	r3, #16
 8004782:	d10a      	bne.n	800479a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004784:	2300      	movs	r3, #0
 8004786:	60fb      	str	r3, [r7, #12]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	60fb      	str	r3, [r7, #12]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	60fb      	str	r3, [r7, #12]
 8004798:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800479e:	4619      	mov	r1, r3
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f7ff fd97 	bl	80042d4 <HAL_UARTEx_RxEventCallback>
 80047a6:	e002      	b.n	80047ae <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f7ff fd7f 	bl	80042ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80047ae:	2300      	movs	r3, #0
 80047b0:	e002      	b.n	80047b8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80047b2:	2300      	movs	r3, #0
 80047b4:	e000      	b.n	80047b8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80047b6:	2302      	movs	r3, #2
  }
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3730      	adds	r7, #48	@ 0x30
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}

080047c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047c4:	b0c0      	sub	sp, #256	@ 0x100
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	691b      	ldr	r3, [r3, #16]
 80047d4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80047d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047dc:	68d9      	ldr	r1, [r3, #12]
 80047de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	ea40 0301 	orr.w	r3, r0, r1
 80047e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80047ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047ee:	689a      	ldr	r2, [r3, #8]
 80047f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	431a      	orrs	r2, r3
 80047f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047fc:	695b      	ldr	r3, [r3, #20]
 80047fe:	431a      	orrs	r2, r3
 8004800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004804:	69db      	ldr	r3, [r3, #28]
 8004806:	4313      	orrs	r3, r2
 8004808:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800480c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004818:	f021 010c 	bic.w	r1, r1, #12
 800481c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004826:	430b      	orrs	r3, r1
 8004828:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800482a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	695b      	ldr	r3, [r3, #20]
 8004832:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004836:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800483a:	6999      	ldr	r1, [r3, #24]
 800483c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	ea40 0301 	orr.w	r3, r0, r1
 8004846:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	4b8f      	ldr	r3, [pc, #572]	@ (8004a8c <UART_SetConfig+0x2cc>)
 8004850:	429a      	cmp	r2, r3
 8004852:	d005      	beq.n	8004860 <UART_SetConfig+0xa0>
 8004854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	4b8d      	ldr	r3, [pc, #564]	@ (8004a90 <UART_SetConfig+0x2d0>)
 800485c:	429a      	cmp	r2, r3
 800485e:	d104      	bne.n	800486a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004860:	f7fe fd48 	bl	80032f4 <HAL_RCC_GetPCLK2Freq>
 8004864:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004868:	e003      	b.n	8004872 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800486a:	f7fe fd2f 	bl	80032cc <HAL_RCC_GetPCLK1Freq>
 800486e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004872:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004876:	69db      	ldr	r3, [r3, #28]
 8004878:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800487c:	f040 810c 	bne.w	8004a98 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004880:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004884:	2200      	movs	r2, #0
 8004886:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800488a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800488e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004892:	4622      	mov	r2, r4
 8004894:	462b      	mov	r3, r5
 8004896:	1891      	adds	r1, r2, r2
 8004898:	65b9      	str	r1, [r7, #88]	@ 0x58
 800489a:	415b      	adcs	r3, r3
 800489c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800489e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80048a2:	4621      	mov	r1, r4
 80048a4:	eb12 0801 	adds.w	r8, r2, r1
 80048a8:	4629      	mov	r1, r5
 80048aa:	eb43 0901 	adc.w	r9, r3, r1
 80048ae:	f04f 0200 	mov.w	r2, #0
 80048b2:	f04f 0300 	mov.w	r3, #0
 80048b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048c2:	4690      	mov	r8, r2
 80048c4:	4699      	mov	r9, r3
 80048c6:	4623      	mov	r3, r4
 80048c8:	eb18 0303 	adds.w	r3, r8, r3
 80048cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80048d0:	462b      	mov	r3, r5
 80048d2:	eb49 0303 	adc.w	r3, r9, r3
 80048d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80048da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80048e6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80048ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80048ee:	460b      	mov	r3, r1
 80048f0:	18db      	adds	r3, r3, r3
 80048f2:	653b      	str	r3, [r7, #80]	@ 0x50
 80048f4:	4613      	mov	r3, r2
 80048f6:	eb42 0303 	adc.w	r3, r2, r3
 80048fa:	657b      	str	r3, [r7, #84]	@ 0x54
 80048fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004900:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004904:	f7fb fcbc 	bl	8000280 <__aeabi_uldivmod>
 8004908:	4602      	mov	r2, r0
 800490a:	460b      	mov	r3, r1
 800490c:	4b61      	ldr	r3, [pc, #388]	@ (8004a94 <UART_SetConfig+0x2d4>)
 800490e:	fba3 2302 	umull	r2, r3, r3, r2
 8004912:	095b      	lsrs	r3, r3, #5
 8004914:	011c      	lsls	r4, r3, #4
 8004916:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800491a:	2200      	movs	r2, #0
 800491c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004920:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004924:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004928:	4642      	mov	r2, r8
 800492a:	464b      	mov	r3, r9
 800492c:	1891      	adds	r1, r2, r2
 800492e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004930:	415b      	adcs	r3, r3
 8004932:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004934:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004938:	4641      	mov	r1, r8
 800493a:	eb12 0a01 	adds.w	sl, r2, r1
 800493e:	4649      	mov	r1, r9
 8004940:	eb43 0b01 	adc.w	fp, r3, r1
 8004944:	f04f 0200 	mov.w	r2, #0
 8004948:	f04f 0300 	mov.w	r3, #0
 800494c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004950:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004954:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004958:	4692      	mov	sl, r2
 800495a:	469b      	mov	fp, r3
 800495c:	4643      	mov	r3, r8
 800495e:	eb1a 0303 	adds.w	r3, sl, r3
 8004962:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004966:	464b      	mov	r3, r9
 8004968:	eb4b 0303 	adc.w	r3, fp, r3
 800496c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800497c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004980:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004984:	460b      	mov	r3, r1
 8004986:	18db      	adds	r3, r3, r3
 8004988:	643b      	str	r3, [r7, #64]	@ 0x40
 800498a:	4613      	mov	r3, r2
 800498c:	eb42 0303 	adc.w	r3, r2, r3
 8004990:	647b      	str	r3, [r7, #68]	@ 0x44
 8004992:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004996:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800499a:	f7fb fc71 	bl	8000280 <__aeabi_uldivmod>
 800499e:	4602      	mov	r2, r0
 80049a0:	460b      	mov	r3, r1
 80049a2:	4611      	mov	r1, r2
 80049a4:	4b3b      	ldr	r3, [pc, #236]	@ (8004a94 <UART_SetConfig+0x2d4>)
 80049a6:	fba3 2301 	umull	r2, r3, r3, r1
 80049aa:	095b      	lsrs	r3, r3, #5
 80049ac:	2264      	movs	r2, #100	@ 0x64
 80049ae:	fb02 f303 	mul.w	r3, r2, r3
 80049b2:	1acb      	subs	r3, r1, r3
 80049b4:	00db      	lsls	r3, r3, #3
 80049b6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80049ba:	4b36      	ldr	r3, [pc, #216]	@ (8004a94 <UART_SetConfig+0x2d4>)
 80049bc:	fba3 2302 	umull	r2, r3, r3, r2
 80049c0:	095b      	lsrs	r3, r3, #5
 80049c2:	005b      	lsls	r3, r3, #1
 80049c4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80049c8:	441c      	add	r4, r3
 80049ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049ce:	2200      	movs	r2, #0
 80049d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80049d4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80049d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80049dc:	4642      	mov	r2, r8
 80049de:	464b      	mov	r3, r9
 80049e0:	1891      	adds	r1, r2, r2
 80049e2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80049e4:	415b      	adcs	r3, r3
 80049e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80049ec:	4641      	mov	r1, r8
 80049ee:	1851      	adds	r1, r2, r1
 80049f0:	6339      	str	r1, [r7, #48]	@ 0x30
 80049f2:	4649      	mov	r1, r9
 80049f4:	414b      	adcs	r3, r1
 80049f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80049f8:	f04f 0200 	mov.w	r2, #0
 80049fc:	f04f 0300 	mov.w	r3, #0
 8004a00:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004a04:	4659      	mov	r1, fp
 8004a06:	00cb      	lsls	r3, r1, #3
 8004a08:	4651      	mov	r1, sl
 8004a0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a0e:	4651      	mov	r1, sl
 8004a10:	00ca      	lsls	r2, r1, #3
 8004a12:	4610      	mov	r0, r2
 8004a14:	4619      	mov	r1, r3
 8004a16:	4603      	mov	r3, r0
 8004a18:	4642      	mov	r2, r8
 8004a1a:	189b      	adds	r3, r3, r2
 8004a1c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004a20:	464b      	mov	r3, r9
 8004a22:	460a      	mov	r2, r1
 8004a24:	eb42 0303 	adc.w	r3, r2, r3
 8004a28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004a38:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004a3c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004a40:	460b      	mov	r3, r1
 8004a42:	18db      	adds	r3, r3, r3
 8004a44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a46:	4613      	mov	r3, r2
 8004a48:	eb42 0303 	adc.w	r3, r2, r3
 8004a4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a4e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004a52:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004a56:	f7fb fc13 	bl	8000280 <__aeabi_uldivmod>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8004a94 <UART_SetConfig+0x2d4>)
 8004a60:	fba3 1302 	umull	r1, r3, r3, r2
 8004a64:	095b      	lsrs	r3, r3, #5
 8004a66:	2164      	movs	r1, #100	@ 0x64
 8004a68:	fb01 f303 	mul.w	r3, r1, r3
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	00db      	lsls	r3, r3, #3
 8004a70:	3332      	adds	r3, #50	@ 0x32
 8004a72:	4a08      	ldr	r2, [pc, #32]	@ (8004a94 <UART_SetConfig+0x2d4>)
 8004a74:	fba2 2303 	umull	r2, r3, r2, r3
 8004a78:	095b      	lsrs	r3, r3, #5
 8004a7a:	f003 0207 	and.w	r2, r3, #7
 8004a7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4422      	add	r2, r4
 8004a86:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a88:	e106      	b.n	8004c98 <UART_SetConfig+0x4d8>
 8004a8a:	bf00      	nop
 8004a8c:	40011000 	.word	0x40011000
 8004a90:	40011400 	.word	0x40011400
 8004a94:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004aa2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004aa6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004aaa:	4642      	mov	r2, r8
 8004aac:	464b      	mov	r3, r9
 8004aae:	1891      	adds	r1, r2, r2
 8004ab0:	6239      	str	r1, [r7, #32]
 8004ab2:	415b      	adcs	r3, r3
 8004ab4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ab6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004aba:	4641      	mov	r1, r8
 8004abc:	1854      	adds	r4, r2, r1
 8004abe:	4649      	mov	r1, r9
 8004ac0:	eb43 0501 	adc.w	r5, r3, r1
 8004ac4:	f04f 0200 	mov.w	r2, #0
 8004ac8:	f04f 0300 	mov.w	r3, #0
 8004acc:	00eb      	lsls	r3, r5, #3
 8004ace:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ad2:	00e2      	lsls	r2, r4, #3
 8004ad4:	4614      	mov	r4, r2
 8004ad6:	461d      	mov	r5, r3
 8004ad8:	4643      	mov	r3, r8
 8004ada:	18e3      	adds	r3, r4, r3
 8004adc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004ae0:	464b      	mov	r3, r9
 8004ae2:	eb45 0303 	adc.w	r3, r5, r3
 8004ae6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004af6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004afa:	f04f 0200 	mov.w	r2, #0
 8004afe:	f04f 0300 	mov.w	r3, #0
 8004b02:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004b06:	4629      	mov	r1, r5
 8004b08:	008b      	lsls	r3, r1, #2
 8004b0a:	4621      	mov	r1, r4
 8004b0c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b10:	4621      	mov	r1, r4
 8004b12:	008a      	lsls	r2, r1, #2
 8004b14:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004b18:	f7fb fbb2 	bl	8000280 <__aeabi_uldivmod>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	460b      	mov	r3, r1
 8004b20:	4b60      	ldr	r3, [pc, #384]	@ (8004ca4 <UART_SetConfig+0x4e4>)
 8004b22:	fba3 2302 	umull	r2, r3, r3, r2
 8004b26:	095b      	lsrs	r3, r3, #5
 8004b28:	011c      	lsls	r4, r3, #4
 8004b2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004b34:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004b38:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004b3c:	4642      	mov	r2, r8
 8004b3e:	464b      	mov	r3, r9
 8004b40:	1891      	adds	r1, r2, r2
 8004b42:	61b9      	str	r1, [r7, #24]
 8004b44:	415b      	adcs	r3, r3
 8004b46:	61fb      	str	r3, [r7, #28]
 8004b48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b4c:	4641      	mov	r1, r8
 8004b4e:	1851      	adds	r1, r2, r1
 8004b50:	6139      	str	r1, [r7, #16]
 8004b52:	4649      	mov	r1, r9
 8004b54:	414b      	adcs	r3, r1
 8004b56:	617b      	str	r3, [r7, #20]
 8004b58:	f04f 0200 	mov.w	r2, #0
 8004b5c:	f04f 0300 	mov.w	r3, #0
 8004b60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b64:	4659      	mov	r1, fp
 8004b66:	00cb      	lsls	r3, r1, #3
 8004b68:	4651      	mov	r1, sl
 8004b6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b6e:	4651      	mov	r1, sl
 8004b70:	00ca      	lsls	r2, r1, #3
 8004b72:	4610      	mov	r0, r2
 8004b74:	4619      	mov	r1, r3
 8004b76:	4603      	mov	r3, r0
 8004b78:	4642      	mov	r2, r8
 8004b7a:	189b      	adds	r3, r3, r2
 8004b7c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004b80:	464b      	mov	r3, r9
 8004b82:	460a      	mov	r2, r1
 8004b84:	eb42 0303 	adc.w	r3, r2, r3
 8004b88:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004b96:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004b98:	f04f 0200 	mov.w	r2, #0
 8004b9c:	f04f 0300 	mov.w	r3, #0
 8004ba0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004ba4:	4649      	mov	r1, r9
 8004ba6:	008b      	lsls	r3, r1, #2
 8004ba8:	4641      	mov	r1, r8
 8004baa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bae:	4641      	mov	r1, r8
 8004bb0:	008a      	lsls	r2, r1, #2
 8004bb2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004bb6:	f7fb fb63 	bl	8000280 <__aeabi_uldivmod>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	4611      	mov	r1, r2
 8004bc0:	4b38      	ldr	r3, [pc, #224]	@ (8004ca4 <UART_SetConfig+0x4e4>)
 8004bc2:	fba3 2301 	umull	r2, r3, r3, r1
 8004bc6:	095b      	lsrs	r3, r3, #5
 8004bc8:	2264      	movs	r2, #100	@ 0x64
 8004bca:	fb02 f303 	mul.w	r3, r2, r3
 8004bce:	1acb      	subs	r3, r1, r3
 8004bd0:	011b      	lsls	r3, r3, #4
 8004bd2:	3332      	adds	r3, #50	@ 0x32
 8004bd4:	4a33      	ldr	r2, [pc, #204]	@ (8004ca4 <UART_SetConfig+0x4e4>)
 8004bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bda:	095b      	lsrs	r3, r3, #5
 8004bdc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004be0:	441c      	add	r4, r3
 8004be2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004be6:	2200      	movs	r2, #0
 8004be8:	673b      	str	r3, [r7, #112]	@ 0x70
 8004bea:	677a      	str	r2, [r7, #116]	@ 0x74
 8004bec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004bf0:	4642      	mov	r2, r8
 8004bf2:	464b      	mov	r3, r9
 8004bf4:	1891      	adds	r1, r2, r2
 8004bf6:	60b9      	str	r1, [r7, #8]
 8004bf8:	415b      	adcs	r3, r3
 8004bfa:	60fb      	str	r3, [r7, #12]
 8004bfc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c00:	4641      	mov	r1, r8
 8004c02:	1851      	adds	r1, r2, r1
 8004c04:	6039      	str	r1, [r7, #0]
 8004c06:	4649      	mov	r1, r9
 8004c08:	414b      	adcs	r3, r1
 8004c0a:	607b      	str	r3, [r7, #4]
 8004c0c:	f04f 0200 	mov.w	r2, #0
 8004c10:	f04f 0300 	mov.w	r3, #0
 8004c14:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004c18:	4659      	mov	r1, fp
 8004c1a:	00cb      	lsls	r3, r1, #3
 8004c1c:	4651      	mov	r1, sl
 8004c1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c22:	4651      	mov	r1, sl
 8004c24:	00ca      	lsls	r2, r1, #3
 8004c26:	4610      	mov	r0, r2
 8004c28:	4619      	mov	r1, r3
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	4642      	mov	r2, r8
 8004c2e:	189b      	adds	r3, r3, r2
 8004c30:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c32:	464b      	mov	r3, r9
 8004c34:	460a      	mov	r2, r1
 8004c36:	eb42 0303 	adc.w	r3, r2, r3
 8004c3a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	663b      	str	r3, [r7, #96]	@ 0x60
 8004c46:	667a      	str	r2, [r7, #100]	@ 0x64
 8004c48:	f04f 0200 	mov.w	r2, #0
 8004c4c:	f04f 0300 	mov.w	r3, #0
 8004c50:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004c54:	4649      	mov	r1, r9
 8004c56:	008b      	lsls	r3, r1, #2
 8004c58:	4641      	mov	r1, r8
 8004c5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c5e:	4641      	mov	r1, r8
 8004c60:	008a      	lsls	r2, r1, #2
 8004c62:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004c66:	f7fb fb0b 	bl	8000280 <__aeabi_uldivmod>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	460b      	mov	r3, r1
 8004c6e:	4b0d      	ldr	r3, [pc, #52]	@ (8004ca4 <UART_SetConfig+0x4e4>)
 8004c70:	fba3 1302 	umull	r1, r3, r3, r2
 8004c74:	095b      	lsrs	r3, r3, #5
 8004c76:	2164      	movs	r1, #100	@ 0x64
 8004c78:	fb01 f303 	mul.w	r3, r1, r3
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	011b      	lsls	r3, r3, #4
 8004c80:	3332      	adds	r3, #50	@ 0x32
 8004c82:	4a08      	ldr	r2, [pc, #32]	@ (8004ca4 <UART_SetConfig+0x4e4>)
 8004c84:	fba2 2303 	umull	r2, r3, r2, r3
 8004c88:	095b      	lsrs	r3, r3, #5
 8004c8a:	f003 020f 	and.w	r2, r3, #15
 8004c8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4422      	add	r2, r4
 8004c96:	609a      	str	r2, [r3, #8]
}
 8004c98:	bf00      	nop
 8004c9a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ca4:	51eb851f 	.word	0x51eb851f

08004ca8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004cac:	4b05      	ldr	r3, [pc, #20]	@ (8004cc4 <SysTick_Handler+0x1c>)
 8004cae:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004cb0:	f002 f8f8 	bl	8006ea4 <xTaskGetSchedulerState>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d001      	beq.n	8004cbe <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004cba:	f003 f9dd 	bl	8008078 <xPortSysTickHandler>
  }
}
 8004cbe:	bf00      	nop
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	e000e010 	.word	0xe000e010

08004cc8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004cc8:	b480      	push	{r7}
 8004cca:	b085      	sub	sp, #20
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	4a07      	ldr	r2, [pc, #28]	@ (8004cf4 <vApplicationGetIdleTaskMemory+0x2c>)
 8004cd8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	4a06      	ldr	r2, [pc, #24]	@ (8004cf8 <vApplicationGetIdleTaskMemory+0x30>)
 8004cde:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2280      	movs	r2, #128	@ 0x80
 8004ce4:	601a      	str	r2, [r3, #0]
}
 8004ce6:	bf00      	nop
 8004ce8:	3714      	adds	r7, #20
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr
 8004cf2:	bf00      	nop
 8004cf4:	200002a4 	.word	0x200002a4
 8004cf8:	2000037c 	.word	0x2000037c

08004cfc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004cfc:	b480      	push	{r7}
 8004cfe:	b085      	sub	sp, #20
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	4a07      	ldr	r2, [pc, #28]	@ (8004d28 <vApplicationGetTimerTaskMemory+0x2c>)
 8004d0c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	4a06      	ldr	r2, [pc, #24]	@ (8004d2c <vApplicationGetTimerTaskMemory+0x30>)
 8004d12:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004d1a:	601a      	str	r2, [r3, #0]
}
 8004d1c:	bf00      	nop
 8004d1e:	3714      	adds	r7, #20
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr
 8004d28:	2000057c 	.word	0x2000057c
 8004d2c:	20000654 	.word	0x20000654

08004d30 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f103 0208 	add.w	r2, r3, #8
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004d48:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f103 0208 	add.w	r2, r3, #8
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f103 0208 	add.w	r2, r3, #8
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004d64:	bf00      	nop
 8004d66:	370c      	adds	r7, #12
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004d7e:	bf00      	nop
 8004d80:	370c      	adds	r7, #12
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr

08004d8a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d8a:	b480      	push	{r7}
 8004d8c:	b085      	sub	sp, #20
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
 8004d92:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	68fa      	ldr	r2, [r7, #12]
 8004d9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	689a      	ldr	r2, [r3, #8]
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	683a      	ldr	r2, [r7, #0]
 8004dae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	683a      	ldr	r2, [r7, #0]
 8004db4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	1c5a      	adds	r2, r3, #1
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	601a      	str	r2, [r3, #0]
}
 8004dc6:	bf00      	nop
 8004dc8:	3714      	adds	r7, #20
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr

08004dd2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004dd2:	b480      	push	{r7}
 8004dd4:	b085      	sub	sp, #20
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6078      	str	r0, [r7, #4]
 8004dda:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004de8:	d103      	bne.n	8004df2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	60fb      	str	r3, [r7, #12]
 8004df0:	e00c      	b.n	8004e0c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	3308      	adds	r3, #8
 8004df6:	60fb      	str	r3, [r7, #12]
 8004df8:	e002      	b.n	8004e00 <vListInsert+0x2e>
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	60fb      	str	r3, [r7, #12]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	68ba      	ldr	r2, [r7, #8]
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d2f6      	bcs.n	8004dfa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	685a      	ldr	r2, [r3, #4]
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	683a      	ldr	r2, [r7, #0]
 8004e1a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	68fa      	ldr	r2, [r7, #12]
 8004e20:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	683a      	ldr	r2, [r7, #0]
 8004e26:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	1c5a      	adds	r2, r3, #1
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	601a      	str	r2, [r3, #0]
}
 8004e38:	bf00      	nop
 8004e3a:	3714      	adds	r7, #20
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004e44:	b480      	push	{r7}
 8004e46:	b085      	sub	sp, #20
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	691b      	ldr	r3, [r3, #16]
 8004e50:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	6892      	ldr	r2, [r2, #8]
 8004e5a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	6852      	ldr	r2, [r2, #4]
 8004e64:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d103      	bne.n	8004e78 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	689a      	ldr	r2, [r3, #8]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	1e5a      	subs	r2, r3, #1
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3714      	adds	r7, #20
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr

08004e98 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d10b      	bne.n	8004ec4 <xQueueGenericReset+0x2c>
	__asm volatile
 8004eac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eb0:	f383 8811 	msr	BASEPRI, r3
 8004eb4:	f3bf 8f6f 	isb	sy
 8004eb8:	f3bf 8f4f 	dsb	sy
 8004ebc:	60bb      	str	r3, [r7, #8]
}
 8004ebe:	bf00      	nop
 8004ec0:	bf00      	nop
 8004ec2:	e7fd      	b.n	8004ec0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004ec4:	f003 f848 	bl	8007f58 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ed0:	68f9      	ldr	r1, [r7, #12]
 8004ed2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004ed4:	fb01 f303 	mul.w	r3, r1, r3
 8004ed8:	441a      	add	r2, r3
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ef4:	3b01      	subs	r3, #1
 8004ef6:	68f9      	ldr	r1, [r7, #12]
 8004ef8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004efa:	fb01 f303 	mul.w	r3, r1, r3
 8004efe:	441a      	add	r2, r3
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	22ff      	movs	r2, #255	@ 0xff
 8004f08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	22ff      	movs	r2, #255	@ 0xff
 8004f10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d114      	bne.n	8004f44 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d01a      	beq.n	8004f58 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	3310      	adds	r3, #16
 8004f26:	4618      	mov	r0, r3
 8004f28:	f001 fccc 	bl	80068c4 <xTaskRemoveFromEventList>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d012      	beq.n	8004f58 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004f32:	4b0d      	ldr	r3, [pc, #52]	@ (8004f68 <xQueueGenericReset+0xd0>)
 8004f34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f38:	601a      	str	r2, [r3, #0]
 8004f3a:	f3bf 8f4f 	dsb	sy
 8004f3e:	f3bf 8f6f 	isb	sy
 8004f42:	e009      	b.n	8004f58 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	3310      	adds	r3, #16
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f7ff fef1 	bl	8004d30 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	3324      	adds	r3, #36	@ 0x24
 8004f52:	4618      	mov	r0, r3
 8004f54:	f7ff feec 	bl	8004d30 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004f58:	f003 f830 	bl	8007fbc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004f5c:	2301      	movs	r3, #1
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3710      	adds	r7, #16
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	e000ed04 	.word	0xe000ed04

08004f6c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b08e      	sub	sp, #56	@ 0x38
 8004f70:	af02      	add	r7, sp, #8
 8004f72:	60f8      	str	r0, [r7, #12]
 8004f74:	60b9      	str	r1, [r7, #8]
 8004f76:	607a      	str	r2, [r7, #4]
 8004f78:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d10b      	bne.n	8004f98 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004f80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f84:	f383 8811 	msr	BASEPRI, r3
 8004f88:	f3bf 8f6f 	isb	sy
 8004f8c:	f3bf 8f4f 	dsb	sy
 8004f90:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004f92:	bf00      	nop
 8004f94:	bf00      	nop
 8004f96:	e7fd      	b.n	8004f94 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d10b      	bne.n	8004fb6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fa2:	f383 8811 	msr	BASEPRI, r3
 8004fa6:	f3bf 8f6f 	isb	sy
 8004faa:	f3bf 8f4f 	dsb	sy
 8004fae:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004fb0:	bf00      	nop
 8004fb2:	bf00      	nop
 8004fb4:	e7fd      	b.n	8004fb2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d002      	beq.n	8004fc2 <xQueueGenericCreateStatic+0x56>
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d001      	beq.n	8004fc6 <xQueueGenericCreateStatic+0x5a>
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e000      	b.n	8004fc8 <xQueueGenericCreateStatic+0x5c>
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d10b      	bne.n	8004fe4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004fcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fd0:	f383 8811 	msr	BASEPRI, r3
 8004fd4:	f3bf 8f6f 	isb	sy
 8004fd8:	f3bf 8f4f 	dsb	sy
 8004fdc:	623b      	str	r3, [r7, #32]
}
 8004fde:	bf00      	nop
 8004fe0:	bf00      	nop
 8004fe2:	e7fd      	b.n	8004fe0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d102      	bne.n	8004ff0 <xQueueGenericCreateStatic+0x84>
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d101      	bne.n	8004ff4 <xQueueGenericCreateStatic+0x88>
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e000      	b.n	8004ff6 <xQueueGenericCreateStatic+0x8a>
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d10b      	bne.n	8005012 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004ffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ffe:	f383 8811 	msr	BASEPRI, r3
 8005002:	f3bf 8f6f 	isb	sy
 8005006:	f3bf 8f4f 	dsb	sy
 800500a:	61fb      	str	r3, [r7, #28]
}
 800500c:	bf00      	nop
 800500e:	bf00      	nop
 8005010:	e7fd      	b.n	800500e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005012:	2350      	movs	r3, #80	@ 0x50
 8005014:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	2b50      	cmp	r3, #80	@ 0x50
 800501a:	d00b      	beq.n	8005034 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800501c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005020:	f383 8811 	msr	BASEPRI, r3
 8005024:	f3bf 8f6f 	isb	sy
 8005028:	f3bf 8f4f 	dsb	sy
 800502c:	61bb      	str	r3, [r7, #24]
}
 800502e:	bf00      	nop
 8005030:	bf00      	nop
 8005032:	e7fd      	b.n	8005030 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005034:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800503a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800503c:	2b00      	cmp	r3, #0
 800503e:	d00d      	beq.n	800505c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005040:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005042:	2201      	movs	r2, #1
 8005044:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005048:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800504c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800504e:	9300      	str	r3, [sp, #0]
 8005050:	4613      	mov	r3, r2
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	68b9      	ldr	r1, [r7, #8]
 8005056:	68f8      	ldr	r0, [r7, #12]
 8005058:	f000 f840 	bl	80050dc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800505c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800505e:	4618      	mov	r0, r3
 8005060:	3730      	adds	r7, #48	@ 0x30
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}

08005066 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005066:	b580      	push	{r7, lr}
 8005068:	b08a      	sub	sp, #40	@ 0x28
 800506a:	af02      	add	r7, sp, #8
 800506c:	60f8      	str	r0, [r7, #12]
 800506e:	60b9      	str	r1, [r7, #8]
 8005070:	4613      	mov	r3, r2
 8005072:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d10b      	bne.n	8005092 <xQueueGenericCreate+0x2c>
	__asm volatile
 800507a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800507e:	f383 8811 	msr	BASEPRI, r3
 8005082:	f3bf 8f6f 	isb	sy
 8005086:	f3bf 8f4f 	dsb	sy
 800508a:	613b      	str	r3, [r7, #16]
}
 800508c:	bf00      	nop
 800508e:	bf00      	nop
 8005090:	e7fd      	b.n	800508e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	68ba      	ldr	r2, [r7, #8]
 8005096:	fb02 f303 	mul.w	r3, r2, r3
 800509a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	3350      	adds	r3, #80	@ 0x50
 80050a0:	4618      	mov	r0, r3
 80050a2:	f003 f87b 	bl	800819c <pvPortMalloc>
 80050a6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80050a8:	69bb      	ldr	r3, [r7, #24]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d011      	beq.n	80050d2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	3350      	adds	r3, #80	@ 0x50
 80050b6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80050b8:	69bb      	ldr	r3, [r7, #24]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80050c0:	79fa      	ldrb	r2, [r7, #7]
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	9300      	str	r3, [sp, #0]
 80050c6:	4613      	mov	r3, r2
 80050c8:	697a      	ldr	r2, [r7, #20]
 80050ca:	68b9      	ldr	r1, [r7, #8]
 80050cc:	68f8      	ldr	r0, [r7, #12]
 80050ce:	f000 f805 	bl	80050dc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80050d2:	69bb      	ldr	r3, [r7, #24]
	}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3720      	adds	r7, #32
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	60b9      	str	r1, [r7, #8]
 80050e6:	607a      	str	r2, [r7, #4]
 80050e8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d103      	bne.n	80050f8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	69ba      	ldr	r2, [r7, #24]
 80050f4:	601a      	str	r2, [r3, #0]
 80050f6:	e002      	b.n	80050fe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	68fa      	ldr	r2, [r7, #12]
 8005102:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005104:	69bb      	ldr	r3, [r7, #24]
 8005106:	68ba      	ldr	r2, [r7, #8]
 8005108:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800510a:	2101      	movs	r1, #1
 800510c:	69b8      	ldr	r0, [r7, #24]
 800510e:	f7ff fec3 	bl	8004e98 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005112:	69bb      	ldr	r3, [r7, #24]
 8005114:	78fa      	ldrb	r2, [r7, #3]
 8005116:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800511a:	bf00      	nop
 800511c:	3710      	adds	r7, #16
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
	...

08005124 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b08e      	sub	sp, #56	@ 0x38
 8005128:	af00      	add	r7, sp, #0
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	60b9      	str	r1, [r7, #8]
 800512e:	607a      	str	r2, [r7, #4]
 8005130:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005132:	2300      	movs	r3, #0
 8005134:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800513a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800513c:	2b00      	cmp	r3, #0
 800513e:	d10b      	bne.n	8005158 <xQueueGenericSend+0x34>
	__asm volatile
 8005140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005144:	f383 8811 	msr	BASEPRI, r3
 8005148:	f3bf 8f6f 	isb	sy
 800514c:	f3bf 8f4f 	dsb	sy
 8005150:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005152:	bf00      	nop
 8005154:	bf00      	nop
 8005156:	e7fd      	b.n	8005154 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d103      	bne.n	8005166 <xQueueGenericSend+0x42>
 800515e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005162:	2b00      	cmp	r3, #0
 8005164:	d101      	bne.n	800516a <xQueueGenericSend+0x46>
 8005166:	2301      	movs	r3, #1
 8005168:	e000      	b.n	800516c <xQueueGenericSend+0x48>
 800516a:	2300      	movs	r3, #0
 800516c:	2b00      	cmp	r3, #0
 800516e:	d10b      	bne.n	8005188 <xQueueGenericSend+0x64>
	__asm volatile
 8005170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005174:	f383 8811 	msr	BASEPRI, r3
 8005178:	f3bf 8f6f 	isb	sy
 800517c:	f3bf 8f4f 	dsb	sy
 8005180:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005182:	bf00      	nop
 8005184:	bf00      	nop
 8005186:	e7fd      	b.n	8005184 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	2b02      	cmp	r3, #2
 800518c:	d103      	bne.n	8005196 <xQueueGenericSend+0x72>
 800518e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005190:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005192:	2b01      	cmp	r3, #1
 8005194:	d101      	bne.n	800519a <xQueueGenericSend+0x76>
 8005196:	2301      	movs	r3, #1
 8005198:	e000      	b.n	800519c <xQueueGenericSend+0x78>
 800519a:	2300      	movs	r3, #0
 800519c:	2b00      	cmp	r3, #0
 800519e:	d10b      	bne.n	80051b8 <xQueueGenericSend+0x94>
	__asm volatile
 80051a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051a4:	f383 8811 	msr	BASEPRI, r3
 80051a8:	f3bf 8f6f 	isb	sy
 80051ac:	f3bf 8f4f 	dsb	sy
 80051b0:	623b      	str	r3, [r7, #32]
}
 80051b2:	bf00      	nop
 80051b4:	bf00      	nop
 80051b6:	e7fd      	b.n	80051b4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80051b8:	f001 fe74 	bl	8006ea4 <xTaskGetSchedulerState>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d102      	bne.n	80051c8 <xQueueGenericSend+0xa4>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d101      	bne.n	80051cc <xQueueGenericSend+0xa8>
 80051c8:	2301      	movs	r3, #1
 80051ca:	e000      	b.n	80051ce <xQueueGenericSend+0xaa>
 80051cc:	2300      	movs	r3, #0
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d10b      	bne.n	80051ea <xQueueGenericSend+0xc6>
	__asm volatile
 80051d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051d6:	f383 8811 	msr	BASEPRI, r3
 80051da:	f3bf 8f6f 	isb	sy
 80051de:	f3bf 8f4f 	dsb	sy
 80051e2:	61fb      	str	r3, [r7, #28]
}
 80051e4:	bf00      	nop
 80051e6:	bf00      	nop
 80051e8:	e7fd      	b.n	80051e6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80051ea:	f002 feb5 	bl	8007f58 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80051ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80051f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d302      	bcc.n	8005200 <xQueueGenericSend+0xdc>
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	d129      	bne.n	8005254 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005200:	683a      	ldr	r2, [r7, #0]
 8005202:	68b9      	ldr	r1, [r7, #8]
 8005204:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005206:	f000 fbc7 	bl	8005998 <prvCopyDataToQueue>
 800520a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800520c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800520e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005210:	2b00      	cmp	r3, #0
 8005212:	d010      	beq.n	8005236 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005216:	3324      	adds	r3, #36	@ 0x24
 8005218:	4618      	mov	r0, r3
 800521a:	f001 fb53 	bl	80068c4 <xTaskRemoveFromEventList>
 800521e:	4603      	mov	r3, r0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d013      	beq.n	800524c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005224:	4b3f      	ldr	r3, [pc, #252]	@ (8005324 <xQueueGenericSend+0x200>)
 8005226:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800522a:	601a      	str	r2, [r3, #0]
 800522c:	f3bf 8f4f 	dsb	sy
 8005230:	f3bf 8f6f 	isb	sy
 8005234:	e00a      	b.n	800524c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005238:	2b00      	cmp	r3, #0
 800523a:	d007      	beq.n	800524c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800523c:	4b39      	ldr	r3, [pc, #228]	@ (8005324 <xQueueGenericSend+0x200>)
 800523e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005242:	601a      	str	r2, [r3, #0]
 8005244:	f3bf 8f4f 	dsb	sy
 8005248:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800524c:	f002 feb6 	bl	8007fbc <vPortExitCritical>
				return pdPASS;
 8005250:	2301      	movs	r3, #1
 8005252:	e063      	b.n	800531c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d103      	bne.n	8005262 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800525a:	f002 feaf 	bl	8007fbc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800525e:	2300      	movs	r3, #0
 8005260:	e05c      	b.n	800531c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005262:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005264:	2b00      	cmp	r3, #0
 8005266:	d106      	bne.n	8005276 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005268:	f107 0314 	add.w	r3, r7, #20
 800526c:	4618      	mov	r0, r3
 800526e:	f001 fb8d 	bl	800698c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005272:	2301      	movs	r3, #1
 8005274:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005276:	f002 fea1 	bl	8007fbc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800527a:	f001 f849 	bl	8006310 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800527e:	f002 fe6b 	bl	8007f58 <vPortEnterCritical>
 8005282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005284:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005288:	b25b      	sxtb	r3, r3
 800528a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800528e:	d103      	bne.n	8005298 <xQueueGenericSend+0x174>
 8005290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005292:	2200      	movs	r2, #0
 8005294:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800529a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800529e:	b25b      	sxtb	r3, r3
 80052a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80052a4:	d103      	bne.n	80052ae <xQueueGenericSend+0x18a>
 80052a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80052ae:	f002 fe85 	bl	8007fbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80052b2:	1d3a      	adds	r2, r7, #4
 80052b4:	f107 0314 	add.w	r3, r7, #20
 80052b8:	4611      	mov	r1, r2
 80052ba:	4618      	mov	r0, r3
 80052bc:	f001 fb7c 	bl	80069b8 <xTaskCheckForTimeOut>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d124      	bne.n	8005310 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80052c6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80052c8:	f000 fc5e 	bl	8005b88 <prvIsQueueFull>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d018      	beq.n	8005304 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80052d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052d4:	3310      	adds	r3, #16
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	4611      	mov	r1, r2
 80052da:	4618      	mov	r0, r3
 80052dc:	f001 faa0 	bl	8006820 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80052e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80052e2:	f000 fbe9 	bl	8005ab8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80052e6:	f001 f821 	bl	800632c <xTaskResumeAll>
 80052ea:	4603      	mov	r3, r0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	f47f af7c 	bne.w	80051ea <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80052f2:	4b0c      	ldr	r3, [pc, #48]	@ (8005324 <xQueueGenericSend+0x200>)
 80052f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052f8:	601a      	str	r2, [r3, #0]
 80052fa:	f3bf 8f4f 	dsb	sy
 80052fe:	f3bf 8f6f 	isb	sy
 8005302:	e772      	b.n	80051ea <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005304:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005306:	f000 fbd7 	bl	8005ab8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800530a:	f001 f80f 	bl	800632c <xTaskResumeAll>
 800530e:	e76c      	b.n	80051ea <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005310:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005312:	f000 fbd1 	bl	8005ab8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005316:	f001 f809 	bl	800632c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800531a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800531c:	4618      	mov	r0, r3
 800531e:	3738      	adds	r7, #56	@ 0x38
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}
 8005324:	e000ed04 	.word	0xe000ed04

08005328 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b090      	sub	sp, #64	@ 0x40
 800532c:	af00      	add	r7, sp, #0
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	60b9      	str	r1, [r7, #8]
 8005332:	607a      	str	r2, [r7, #4]
 8005334:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800533a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800533c:	2b00      	cmp	r3, #0
 800533e:	d10b      	bne.n	8005358 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005344:	f383 8811 	msr	BASEPRI, r3
 8005348:	f3bf 8f6f 	isb	sy
 800534c:	f3bf 8f4f 	dsb	sy
 8005350:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005352:	bf00      	nop
 8005354:	bf00      	nop
 8005356:	e7fd      	b.n	8005354 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d103      	bne.n	8005366 <xQueueGenericSendFromISR+0x3e>
 800535e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005362:	2b00      	cmp	r3, #0
 8005364:	d101      	bne.n	800536a <xQueueGenericSendFromISR+0x42>
 8005366:	2301      	movs	r3, #1
 8005368:	e000      	b.n	800536c <xQueueGenericSendFromISR+0x44>
 800536a:	2300      	movs	r3, #0
 800536c:	2b00      	cmp	r3, #0
 800536e:	d10b      	bne.n	8005388 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005374:	f383 8811 	msr	BASEPRI, r3
 8005378:	f3bf 8f6f 	isb	sy
 800537c:	f3bf 8f4f 	dsb	sy
 8005380:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005382:	bf00      	nop
 8005384:	bf00      	nop
 8005386:	e7fd      	b.n	8005384 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	2b02      	cmp	r3, #2
 800538c:	d103      	bne.n	8005396 <xQueueGenericSendFromISR+0x6e>
 800538e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005390:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005392:	2b01      	cmp	r3, #1
 8005394:	d101      	bne.n	800539a <xQueueGenericSendFromISR+0x72>
 8005396:	2301      	movs	r3, #1
 8005398:	e000      	b.n	800539c <xQueueGenericSendFromISR+0x74>
 800539a:	2300      	movs	r3, #0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d10b      	bne.n	80053b8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80053a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053a4:	f383 8811 	msr	BASEPRI, r3
 80053a8:	f3bf 8f6f 	isb	sy
 80053ac:	f3bf 8f4f 	dsb	sy
 80053b0:	623b      	str	r3, [r7, #32]
}
 80053b2:	bf00      	nop
 80053b4:	bf00      	nop
 80053b6:	e7fd      	b.n	80053b4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80053b8:	f002 feae 	bl	8008118 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80053bc:	f3ef 8211 	mrs	r2, BASEPRI
 80053c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053c4:	f383 8811 	msr	BASEPRI, r3
 80053c8:	f3bf 8f6f 	isb	sy
 80053cc:	f3bf 8f4f 	dsb	sy
 80053d0:	61fa      	str	r2, [r7, #28]
 80053d2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80053d4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80053d6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80053d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80053dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d302      	bcc.n	80053ea <xQueueGenericSendFromISR+0xc2>
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	2b02      	cmp	r3, #2
 80053e8:	d12f      	bne.n	800544a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80053ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80053f0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80053f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80053fa:	683a      	ldr	r2, [r7, #0]
 80053fc:	68b9      	ldr	r1, [r7, #8]
 80053fe:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005400:	f000 faca 	bl	8005998 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005404:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005408:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800540c:	d112      	bne.n	8005434 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800540e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005412:	2b00      	cmp	r3, #0
 8005414:	d016      	beq.n	8005444 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005418:	3324      	adds	r3, #36	@ 0x24
 800541a:	4618      	mov	r0, r3
 800541c:	f001 fa52 	bl	80068c4 <xTaskRemoveFromEventList>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d00e      	beq.n	8005444 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d00b      	beq.n	8005444 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	601a      	str	r2, [r3, #0]
 8005432:	e007      	b.n	8005444 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005434:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005438:	3301      	adds	r3, #1
 800543a:	b2db      	uxtb	r3, r3
 800543c:	b25a      	sxtb	r2, r3
 800543e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005440:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005444:	2301      	movs	r3, #1
 8005446:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005448:	e001      	b.n	800544e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800544a:	2300      	movs	r3, #0
 800544c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800544e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005450:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005458:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800545a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800545c:	4618      	mov	r0, r3
 800545e:	3740      	adds	r7, #64	@ 0x40
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}

08005464 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b08e      	sub	sp, #56	@ 0x38
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005474:	2b00      	cmp	r3, #0
 8005476:	d10b      	bne.n	8005490 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8005478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800547c:	f383 8811 	msr	BASEPRI, r3
 8005480:	f3bf 8f6f 	isb	sy
 8005484:	f3bf 8f4f 	dsb	sy
 8005488:	623b      	str	r3, [r7, #32]
}
 800548a:	bf00      	nop
 800548c:	bf00      	nop
 800548e:	e7fd      	b.n	800548c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005494:	2b00      	cmp	r3, #0
 8005496:	d00b      	beq.n	80054b0 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8005498:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800549c:	f383 8811 	msr	BASEPRI, r3
 80054a0:	f3bf 8f6f 	isb	sy
 80054a4:	f3bf 8f4f 	dsb	sy
 80054a8:	61fb      	str	r3, [r7, #28]
}
 80054aa:	bf00      	nop
 80054ac:	bf00      	nop
 80054ae:	e7fd      	b.n	80054ac <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80054b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d103      	bne.n	80054c0 <xQueueGiveFromISR+0x5c>
 80054b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d101      	bne.n	80054c4 <xQueueGiveFromISR+0x60>
 80054c0:	2301      	movs	r3, #1
 80054c2:	e000      	b.n	80054c6 <xQueueGiveFromISR+0x62>
 80054c4:	2300      	movs	r3, #0
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d10b      	bne.n	80054e2 <xQueueGiveFromISR+0x7e>
	__asm volatile
 80054ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ce:	f383 8811 	msr	BASEPRI, r3
 80054d2:	f3bf 8f6f 	isb	sy
 80054d6:	f3bf 8f4f 	dsb	sy
 80054da:	61bb      	str	r3, [r7, #24]
}
 80054dc:	bf00      	nop
 80054de:	bf00      	nop
 80054e0:	e7fd      	b.n	80054de <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80054e2:	f002 fe19 	bl	8008118 <vPortValidateInterruptPriority>
	__asm volatile
 80054e6:	f3ef 8211 	mrs	r2, BASEPRI
 80054ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ee:	f383 8811 	msr	BASEPRI, r3
 80054f2:	f3bf 8f6f 	isb	sy
 80054f6:	f3bf 8f4f 	dsb	sy
 80054fa:	617a      	str	r2, [r7, #20]
 80054fc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80054fe:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005500:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005504:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005506:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800550a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800550c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800550e:	429a      	cmp	r2, r3
 8005510:	d22b      	bcs.n	800556a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005514:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005518:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800551c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800551e:	1c5a      	adds	r2, r3, #1
 8005520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005522:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005524:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005528:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800552c:	d112      	bne.n	8005554 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800552e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005532:	2b00      	cmp	r3, #0
 8005534:	d016      	beq.n	8005564 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005538:	3324      	adds	r3, #36	@ 0x24
 800553a:	4618      	mov	r0, r3
 800553c:	f001 f9c2 	bl	80068c4 <xTaskRemoveFromEventList>
 8005540:	4603      	mov	r3, r0
 8005542:	2b00      	cmp	r3, #0
 8005544:	d00e      	beq.n	8005564 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d00b      	beq.n	8005564 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	2201      	movs	r2, #1
 8005550:	601a      	str	r2, [r3, #0]
 8005552:	e007      	b.n	8005564 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005554:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005558:	3301      	adds	r3, #1
 800555a:	b2db      	uxtb	r3, r3
 800555c:	b25a      	sxtb	r2, r3
 800555e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005560:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005564:	2301      	movs	r3, #1
 8005566:	637b      	str	r3, [r7, #52]	@ 0x34
 8005568:	e001      	b.n	800556e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800556a:	2300      	movs	r3, #0
 800556c:	637b      	str	r3, [r7, #52]	@ 0x34
 800556e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005570:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f383 8811 	msr	BASEPRI, r3
}
 8005578:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800557a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800557c:	4618      	mov	r0, r3
 800557e:	3738      	adds	r7, #56	@ 0x38
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}

08005584 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b08c      	sub	sp, #48	@ 0x30
 8005588:	af00      	add	r7, sp, #0
 800558a:	60f8      	str	r0, [r7, #12]
 800558c:	60b9      	str	r1, [r7, #8]
 800558e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005590:	2300      	movs	r3, #0
 8005592:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800559a:	2b00      	cmp	r3, #0
 800559c:	d10b      	bne.n	80055b6 <xQueueReceive+0x32>
	__asm volatile
 800559e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055a2:	f383 8811 	msr	BASEPRI, r3
 80055a6:	f3bf 8f6f 	isb	sy
 80055aa:	f3bf 8f4f 	dsb	sy
 80055ae:	623b      	str	r3, [r7, #32]
}
 80055b0:	bf00      	nop
 80055b2:	bf00      	nop
 80055b4:	e7fd      	b.n	80055b2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d103      	bne.n	80055c4 <xQueueReceive+0x40>
 80055bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d101      	bne.n	80055c8 <xQueueReceive+0x44>
 80055c4:	2301      	movs	r3, #1
 80055c6:	e000      	b.n	80055ca <xQueueReceive+0x46>
 80055c8:	2300      	movs	r3, #0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d10b      	bne.n	80055e6 <xQueueReceive+0x62>
	__asm volatile
 80055ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055d2:	f383 8811 	msr	BASEPRI, r3
 80055d6:	f3bf 8f6f 	isb	sy
 80055da:	f3bf 8f4f 	dsb	sy
 80055de:	61fb      	str	r3, [r7, #28]
}
 80055e0:	bf00      	nop
 80055e2:	bf00      	nop
 80055e4:	e7fd      	b.n	80055e2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80055e6:	f001 fc5d 	bl	8006ea4 <xTaskGetSchedulerState>
 80055ea:	4603      	mov	r3, r0
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d102      	bne.n	80055f6 <xQueueReceive+0x72>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d101      	bne.n	80055fa <xQueueReceive+0x76>
 80055f6:	2301      	movs	r3, #1
 80055f8:	e000      	b.n	80055fc <xQueueReceive+0x78>
 80055fa:	2300      	movs	r3, #0
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d10b      	bne.n	8005618 <xQueueReceive+0x94>
	__asm volatile
 8005600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005604:	f383 8811 	msr	BASEPRI, r3
 8005608:	f3bf 8f6f 	isb	sy
 800560c:	f3bf 8f4f 	dsb	sy
 8005610:	61bb      	str	r3, [r7, #24]
}
 8005612:	bf00      	nop
 8005614:	bf00      	nop
 8005616:	e7fd      	b.n	8005614 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005618:	f002 fc9e 	bl	8007f58 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800561c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800561e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005620:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005624:	2b00      	cmp	r3, #0
 8005626:	d01f      	beq.n	8005668 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005628:	68b9      	ldr	r1, [r7, #8]
 800562a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800562c:	f000 fa1e 	bl	8005a6c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005632:	1e5a      	subs	r2, r3, #1
 8005634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005636:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800563a:	691b      	ldr	r3, [r3, #16]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d00f      	beq.n	8005660 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005642:	3310      	adds	r3, #16
 8005644:	4618      	mov	r0, r3
 8005646:	f001 f93d 	bl	80068c4 <xTaskRemoveFromEventList>
 800564a:	4603      	mov	r3, r0
 800564c:	2b00      	cmp	r3, #0
 800564e:	d007      	beq.n	8005660 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005650:	4b3c      	ldr	r3, [pc, #240]	@ (8005744 <xQueueReceive+0x1c0>)
 8005652:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005656:	601a      	str	r2, [r3, #0]
 8005658:	f3bf 8f4f 	dsb	sy
 800565c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005660:	f002 fcac 	bl	8007fbc <vPortExitCritical>
				return pdPASS;
 8005664:	2301      	movs	r3, #1
 8005666:	e069      	b.n	800573c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d103      	bne.n	8005676 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800566e:	f002 fca5 	bl	8007fbc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005672:	2300      	movs	r3, #0
 8005674:	e062      	b.n	800573c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005678:	2b00      	cmp	r3, #0
 800567a:	d106      	bne.n	800568a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800567c:	f107 0310 	add.w	r3, r7, #16
 8005680:	4618      	mov	r0, r3
 8005682:	f001 f983 	bl	800698c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005686:	2301      	movs	r3, #1
 8005688:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800568a:	f002 fc97 	bl	8007fbc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800568e:	f000 fe3f 	bl	8006310 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005692:	f002 fc61 	bl	8007f58 <vPortEnterCritical>
 8005696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005698:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800569c:	b25b      	sxtb	r3, r3
 800569e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80056a2:	d103      	bne.n	80056ac <xQueueReceive+0x128>
 80056a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056a6:	2200      	movs	r2, #0
 80056a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80056ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056ae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80056b2:	b25b      	sxtb	r3, r3
 80056b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80056b8:	d103      	bne.n	80056c2 <xQueueReceive+0x13e>
 80056ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056bc:	2200      	movs	r2, #0
 80056be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80056c2:	f002 fc7b 	bl	8007fbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80056c6:	1d3a      	adds	r2, r7, #4
 80056c8:	f107 0310 	add.w	r3, r7, #16
 80056cc:	4611      	mov	r1, r2
 80056ce:	4618      	mov	r0, r3
 80056d0:	f001 f972 	bl	80069b8 <xTaskCheckForTimeOut>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d123      	bne.n	8005722 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80056da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80056dc:	f000 fa3e 	bl	8005b5c <prvIsQueueEmpty>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d017      	beq.n	8005716 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80056e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056e8:	3324      	adds	r3, #36	@ 0x24
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	4611      	mov	r1, r2
 80056ee:	4618      	mov	r0, r3
 80056f0:	f001 f896 	bl	8006820 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80056f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80056f6:	f000 f9df 	bl	8005ab8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80056fa:	f000 fe17 	bl	800632c <xTaskResumeAll>
 80056fe:	4603      	mov	r3, r0
 8005700:	2b00      	cmp	r3, #0
 8005702:	d189      	bne.n	8005618 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005704:	4b0f      	ldr	r3, [pc, #60]	@ (8005744 <xQueueReceive+0x1c0>)
 8005706:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800570a:	601a      	str	r2, [r3, #0]
 800570c:	f3bf 8f4f 	dsb	sy
 8005710:	f3bf 8f6f 	isb	sy
 8005714:	e780      	b.n	8005618 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005716:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005718:	f000 f9ce 	bl	8005ab8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800571c:	f000 fe06 	bl	800632c <xTaskResumeAll>
 8005720:	e77a      	b.n	8005618 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005722:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005724:	f000 f9c8 	bl	8005ab8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005728:	f000 fe00 	bl	800632c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800572c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800572e:	f000 fa15 	bl	8005b5c <prvIsQueueEmpty>
 8005732:	4603      	mov	r3, r0
 8005734:	2b00      	cmp	r3, #0
 8005736:	f43f af6f 	beq.w	8005618 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800573a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800573c:	4618      	mov	r0, r3
 800573e:	3730      	adds	r7, #48	@ 0x30
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}
 8005744:	e000ed04 	.word	0xe000ed04

08005748 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b08e      	sub	sp, #56	@ 0x38
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005752:	2300      	movs	r3, #0
 8005754:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800575a:	2300      	movs	r3, #0
 800575c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800575e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005760:	2b00      	cmp	r3, #0
 8005762:	d10b      	bne.n	800577c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8005764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005768:	f383 8811 	msr	BASEPRI, r3
 800576c:	f3bf 8f6f 	isb	sy
 8005770:	f3bf 8f4f 	dsb	sy
 8005774:	623b      	str	r3, [r7, #32]
}
 8005776:	bf00      	nop
 8005778:	bf00      	nop
 800577a:	e7fd      	b.n	8005778 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800577c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800577e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005780:	2b00      	cmp	r3, #0
 8005782:	d00b      	beq.n	800579c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8005784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005788:	f383 8811 	msr	BASEPRI, r3
 800578c:	f3bf 8f6f 	isb	sy
 8005790:	f3bf 8f4f 	dsb	sy
 8005794:	61fb      	str	r3, [r7, #28]
}
 8005796:	bf00      	nop
 8005798:	bf00      	nop
 800579a:	e7fd      	b.n	8005798 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800579c:	f001 fb82 	bl	8006ea4 <xTaskGetSchedulerState>
 80057a0:	4603      	mov	r3, r0
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d102      	bne.n	80057ac <xQueueSemaphoreTake+0x64>
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d101      	bne.n	80057b0 <xQueueSemaphoreTake+0x68>
 80057ac:	2301      	movs	r3, #1
 80057ae:	e000      	b.n	80057b2 <xQueueSemaphoreTake+0x6a>
 80057b0:	2300      	movs	r3, #0
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d10b      	bne.n	80057ce <xQueueSemaphoreTake+0x86>
	__asm volatile
 80057b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057ba:	f383 8811 	msr	BASEPRI, r3
 80057be:	f3bf 8f6f 	isb	sy
 80057c2:	f3bf 8f4f 	dsb	sy
 80057c6:	61bb      	str	r3, [r7, #24]
}
 80057c8:	bf00      	nop
 80057ca:	bf00      	nop
 80057cc:	e7fd      	b.n	80057ca <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80057ce:	f002 fbc3 	bl	8007f58 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80057d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057d6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80057d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d024      	beq.n	8005828 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80057de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057e0:	1e5a      	subs	r2, r3, #1
 80057e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057e4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80057e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d104      	bne.n	80057f8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80057ee:	f001 fcd3 	bl	8007198 <pvTaskIncrementMutexHeldCount>
 80057f2:	4602      	mov	r2, r0
 80057f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057f6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80057f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057fa:	691b      	ldr	r3, [r3, #16]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d00f      	beq.n	8005820 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005802:	3310      	adds	r3, #16
 8005804:	4618      	mov	r0, r3
 8005806:	f001 f85d 	bl	80068c4 <xTaskRemoveFromEventList>
 800580a:	4603      	mov	r3, r0
 800580c:	2b00      	cmp	r3, #0
 800580e:	d007      	beq.n	8005820 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005810:	4b54      	ldr	r3, [pc, #336]	@ (8005964 <xQueueSemaphoreTake+0x21c>)
 8005812:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005816:	601a      	str	r2, [r3, #0]
 8005818:	f3bf 8f4f 	dsb	sy
 800581c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005820:	f002 fbcc 	bl	8007fbc <vPortExitCritical>
				return pdPASS;
 8005824:	2301      	movs	r3, #1
 8005826:	e098      	b.n	800595a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d112      	bne.n	8005854 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800582e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005830:	2b00      	cmp	r3, #0
 8005832:	d00b      	beq.n	800584c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8005834:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005838:	f383 8811 	msr	BASEPRI, r3
 800583c:	f3bf 8f6f 	isb	sy
 8005840:	f3bf 8f4f 	dsb	sy
 8005844:	617b      	str	r3, [r7, #20]
}
 8005846:	bf00      	nop
 8005848:	bf00      	nop
 800584a:	e7fd      	b.n	8005848 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800584c:	f002 fbb6 	bl	8007fbc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005850:	2300      	movs	r3, #0
 8005852:	e082      	b.n	800595a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005854:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005856:	2b00      	cmp	r3, #0
 8005858:	d106      	bne.n	8005868 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800585a:	f107 030c 	add.w	r3, r7, #12
 800585e:	4618      	mov	r0, r3
 8005860:	f001 f894 	bl	800698c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005864:	2301      	movs	r3, #1
 8005866:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005868:	f002 fba8 	bl	8007fbc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800586c:	f000 fd50 	bl	8006310 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005870:	f002 fb72 	bl	8007f58 <vPortEnterCritical>
 8005874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005876:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800587a:	b25b      	sxtb	r3, r3
 800587c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005880:	d103      	bne.n	800588a <xQueueSemaphoreTake+0x142>
 8005882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005884:	2200      	movs	r2, #0
 8005886:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800588a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800588c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005890:	b25b      	sxtb	r3, r3
 8005892:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005896:	d103      	bne.n	80058a0 <xQueueSemaphoreTake+0x158>
 8005898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800589a:	2200      	movs	r2, #0
 800589c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80058a0:	f002 fb8c 	bl	8007fbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80058a4:	463a      	mov	r2, r7
 80058a6:	f107 030c 	add.w	r3, r7, #12
 80058aa:	4611      	mov	r1, r2
 80058ac:	4618      	mov	r0, r3
 80058ae:	f001 f883 	bl	80069b8 <xTaskCheckForTimeOut>
 80058b2:	4603      	mov	r3, r0
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d132      	bne.n	800591e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80058b8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80058ba:	f000 f94f 	bl	8005b5c <prvIsQueueEmpty>
 80058be:	4603      	mov	r3, r0
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d026      	beq.n	8005912 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80058c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d109      	bne.n	80058e0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80058cc:	f002 fb44 	bl	8007f58 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80058d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	4618      	mov	r0, r3
 80058d6:	f001 fb03 	bl	8006ee0 <xTaskPriorityInherit>
 80058da:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80058dc:	f002 fb6e 	bl	8007fbc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80058e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058e2:	3324      	adds	r3, #36	@ 0x24
 80058e4:	683a      	ldr	r2, [r7, #0]
 80058e6:	4611      	mov	r1, r2
 80058e8:	4618      	mov	r0, r3
 80058ea:	f000 ff99 	bl	8006820 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80058ee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80058f0:	f000 f8e2 	bl	8005ab8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80058f4:	f000 fd1a 	bl	800632c <xTaskResumeAll>
 80058f8:	4603      	mov	r3, r0
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	f47f af67 	bne.w	80057ce <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8005900:	4b18      	ldr	r3, [pc, #96]	@ (8005964 <xQueueSemaphoreTake+0x21c>)
 8005902:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005906:	601a      	str	r2, [r3, #0]
 8005908:	f3bf 8f4f 	dsb	sy
 800590c:	f3bf 8f6f 	isb	sy
 8005910:	e75d      	b.n	80057ce <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005912:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005914:	f000 f8d0 	bl	8005ab8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005918:	f000 fd08 	bl	800632c <xTaskResumeAll>
 800591c:	e757      	b.n	80057ce <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800591e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005920:	f000 f8ca 	bl	8005ab8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005924:	f000 fd02 	bl	800632c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005928:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800592a:	f000 f917 	bl	8005b5c <prvIsQueueEmpty>
 800592e:	4603      	mov	r3, r0
 8005930:	2b00      	cmp	r3, #0
 8005932:	f43f af4c 	beq.w	80057ce <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005938:	2b00      	cmp	r3, #0
 800593a:	d00d      	beq.n	8005958 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800593c:	f002 fb0c 	bl	8007f58 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005940:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005942:	f000 f811 	bl	8005968 <prvGetDisinheritPriorityAfterTimeout>
 8005946:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800594e:	4618      	mov	r0, r3
 8005950:	f001 fb9e 	bl	8007090 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005954:	f002 fb32 	bl	8007fbc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005958:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800595a:	4618      	mov	r0, r3
 800595c:	3738      	adds	r7, #56	@ 0x38
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}
 8005962:	bf00      	nop
 8005964:	e000ed04 	.word	0xe000ed04

08005968 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005968:	b480      	push	{r7}
 800596a:	b085      	sub	sp, #20
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005974:	2b00      	cmp	r3, #0
 8005976:	d006      	beq.n	8005986 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8005982:	60fb      	str	r3, [r7, #12]
 8005984:	e001      	b.n	800598a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005986:	2300      	movs	r3, #0
 8005988:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800598a:	68fb      	ldr	r3, [r7, #12]
	}
 800598c:	4618      	mov	r0, r3
 800598e:	3714      	adds	r7, #20
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b086      	sub	sp, #24
 800599c:	af00      	add	r7, sp, #0
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	60b9      	str	r1, [r7, #8]
 80059a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80059a4:	2300      	movs	r3, #0
 80059a6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059ac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d10d      	bne.n	80059d2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d14d      	bne.n	8005a5a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	4618      	mov	r0, r3
 80059c4:	f001 faf4 	bl	8006fb0 <xTaskPriorityDisinherit>
 80059c8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2200      	movs	r2, #0
 80059ce:	609a      	str	r2, [r3, #8]
 80059d0:	e043      	b.n	8005a5a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d119      	bne.n	8005a0c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6858      	ldr	r0, [r3, #4]
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059e0:	461a      	mov	r2, r3
 80059e2:	68b9      	ldr	r1, [r7, #8]
 80059e4:	f003 f810 	bl	8008a08 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	685a      	ldr	r2, [r3, #4]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059f0:	441a      	add	r2, r3
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	685a      	ldr	r2, [r3, #4]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d32b      	bcc.n	8005a5a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	605a      	str	r2, [r3, #4]
 8005a0a:	e026      	b.n	8005a5a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	68d8      	ldr	r0, [r3, #12]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a14:	461a      	mov	r2, r3
 8005a16:	68b9      	ldr	r1, [r7, #8]
 8005a18:	f002 fff6 	bl	8008a08 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	68da      	ldr	r2, [r3, #12]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a24:	425b      	negs	r3, r3
 8005a26:	441a      	add	r2, r3
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	68da      	ldr	r2, [r3, #12]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d207      	bcs.n	8005a48 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	689a      	ldr	r2, [r3, #8]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a40:	425b      	negs	r3, r3
 8005a42:	441a      	add	r2, r3
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2b02      	cmp	r3, #2
 8005a4c:	d105      	bne.n	8005a5a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d002      	beq.n	8005a5a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	3b01      	subs	r3, #1
 8005a58:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	1c5a      	adds	r2, r3, #1
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005a62:	697b      	ldr	r3, [r7, #20]
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3718      	adds	r7, #24
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}

08005a6c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b082      	sub	sp, #8
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d018      	beq.n	8005ab0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	68da      	ldr	r2, [r3, #12]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a86:	441a      	add	r2, r3
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	68da      	ldr	r2, [r3, #12]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d303      	bcc.n	8005aa0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	68d9      	ldr	r1, [r3, #12]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	6838      	ldr	r0, [r7, #0]
 8005aac:	f002 ffac 	bl	8008a08 <memcpy>
	}
}
 8005ab0:	bf00      	nop
 8005ab2:	3708      	adds	r7, #8
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005ac0:	f002 fa4a 	bl	8007f58 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005aca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005acc:	e011      	b.n	8005af2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d012      	beq.n	8005afc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	3324      	adds	r3, #36	@ 0x24
 8005ada:	4618      	mov	r0, r3
 8005adc:	f000 fef2 	bl	80068c4 <xTaskRemoveFromEventList>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d001      	beq.n	8005aea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005ae6:	f000 ffcb 	bl	8006a80 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005aea:	7bfb      	ldrb	r3, [r7, #15]
 8005aec:	3b01      	subs	r3, #1
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005af2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	dce9      	bgt.n	8005ace <prvUnlockQueue+0x16>
 8005afa:	e000      	b.n	8005afe <prvUnlockQueue+0x46>
					break;
 8005afc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	22ff      	movs	r2, #255	@ 0xff
 8005b02:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005b06:	f002 fa59 	bl	8007fbc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005b0a:	f002 fa25 	bl	8007f58 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005b14:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005b16:	e011      	b.n	8005b3c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	691b      	ldr	r3, [r3, #16]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d012      	beq.n	8005b46 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	3310      	adds	r3, #16
 8005b24:	4618      	mov	r0, r3
 8005b26:	f000 fecd 	bl	80068c4 <xTaskRemoveFromEventList>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d001      	beq.n	8005b34 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005b30:	f000 ffa6 	bl	8006a80 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005b34:	7bbb      	ldrb	r3, [r7, #14]
 8005b36:	3b01      	subs	r3, #1
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005b3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	dce9      	bgt.n	8005b18 <prvUnlockQueue+0x60>
 8005b44:	e000      	b.n	8005b48 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005b46:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	22ff      	movs	r2, #255	@ 0xff
 8005b4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005b50:	f002 fa34 	bl	8007fbc <vPortExitCritical>
}
 8005b54:	bf00      	nop
 8005b56:	3710      	adds	r7, #16
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b084      	sub	sp, #16
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005b64:	f002 f9f8 	bl	8007f58 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d102      	bne.n	8005b76 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005b70:	2301      	movs	r3, #1
 8005b72:	60fb      	str	r3, [r7, #12]
 8005b74:	e001      	b.n	8005b7a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005b76:	2300      	movs	r3, #0
 8005b78:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005b7a:	f002 fa1f 	bl	8007fbc <vPortExitCritical>

	return xReturn;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3710      	adds	r7, #16
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}

08005b88 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b084      	sub	sp, #16
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005b90:	f002 f9e2 	bl	8007f58 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d102      	bne.n	8005ba6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	60fb      	str	r3, [r7, #12]
 8005ba4:	e001      	b.n	8005baa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005baa:	f002 fa07 	bl	8007fbc <vPortExitCritical>

	return xReturn;
 8005bae:	68fb      	ldr	r3, [r7, #12]
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3710      	adds	r7, #16
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}

08005bb8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005bb8:	b480      	push	{r7}
 8005bba:	b085      	sub	sp, #20
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	60fb      	str	r3, [r7, #12]
 8005bc6:	e014      	b.n	8005bf2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005bc8:	4a0f      	ldr	r2, [pc, #60]	@ (8005c08 <vQueueAddToRegistry+0x50>)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d10b      	bne.n	8005bec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005bd4:	490c      	ldr	r1, [pc, #48]	@ (8005c08 <vQueueAddToRegistry+0x50>)
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	683a      	ldr	r2, [r7, #0]
 8005bda:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005bde:	4a0a      	ldr	r2, [pc, #40]	@ (8005c08 <vQueueAddToRegistry+0x50>)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	00db      	lsls	r3, r3, #3
 8005be4:	4413      	add	r3, r2
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005bea:	e006      	b.n	8005bfa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	3301      	adds	r3, #1
 8005bf0:	60fb      	str	r3, [r7, #12]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2b07      	cmp	r3, #7
 8005bf6:	d9e7      	bls.n	8005bc8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005bf8:	bf00      	nop
 8005bfa:	bf00      	nop
 8005bfc:	3714      	adds	r7, #20
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr
 8005c06:	bf00      	nop
 8005c08:	20000a54 	.word	0x20000a54

08005c0c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b086      	sub	sp, #24
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	60b9      	str	r1, [r7, #8]
 8005c16:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005c1c:	f002 f99c 	bl	8007f58 <vPortEnterCritical>
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005c26:	b25b      	sxtb	r3, r3
 8005c28:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c2c:	d103      	bne.n	8005c36 <vQueueWaitForMessageRestricted+0x2a>
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	2200      	movs	r2, #0
 8005c32:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005c3c:	b25b      	sxtb	r3, r3
 8005c3e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c42:	d103      	bne.n	8005c4c <vQueueWaitForMessageRestricted+0x40>
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005c4c:	f002 f9b6 	bl	8007fbc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d106      	bne.n	8005c66 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	3324      	adds	r3, #36	@ 0x24
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	68b9      	ldr	r1, [r7, #8]
 8005c60:	4618      	mov	r0, r3
 8005c62:	f000 fe03 	bl	800686c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005c66:	6978      	ldr	r0, [r7, #20]
 8005c68:	f7ff ff26 	bl	8005ab8 <prvUnlockQueue>
	}
 8005c6c:	bf00      	nop
 8005c6e:	3718      	adds	r7, #24
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b08e      	sub	sp, #56	@ 0x38
 8005c78:	af04      	add	r7, sp, #16
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	60b9      	str	r1, [r7, #8]
 8005c7e:	607a      	str	r2, [r7, #4]
 8005c80:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005c82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d10b      	bne.n	8005ca0 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005c88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c8c:	f383 8811 	msr	BASEPRI, r3
 8005c90:	f3bf 8f6f 	isb	sy
 8005c94:	f3bf 8f4f 	dsb	sy
 8005c98:	623b      	str	r3, [r7, #32]
}
 8005c9a:	bf00      	nop
 8005c9c:	bf00      	nop
 8005c9e:	e7fd      	b.n	8005c9c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005ca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d10b      	bne.n	8005cbe <xTaskCreateStatic+0x4a>
	__asm volatile
 8005ca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005caa:	f383 8811 	msr	BASEPRI, r3
 8005cae:	f3bf 8f6f 	isb	sy
 8005cb2:	f3bf 8f4f 	dsb	sy
 8005cb6:	61fb      	str	r3, [r7, #28]
}
 8005cb8:	bf00      	nop
 8005cba:	bf00      	nop
 8005cbc:	e7fd      	b.n	8005cba <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005cbe:	23d8      	movs	r3, #216	@ 0xd8
 8005cc0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	2bd8      	cmp	r3, #216	@ 0xd8
 8005cc6:	d00b      	beq.n	8005ce0 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005cc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ccc:	f383 8811 	msr	BASEPRI, r3
 8005cd0:	f3bf 8f6f 	isb	sy
 8005cd4:	f3bf 8f4f 	dsb	sy
 8005cd8:	61bb      	str	r3, [r7, #24]
}
 8005cda:	bf00      	nop
 8005cdc:	bf00      	nop
 8005cde:	e7fd      	b.n	8005cdc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005ce0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005ce2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d01e      	beq.n	8005d26 <xTaskCreateStatic+0xb2>
 8005ce8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d01b      	beq.n	8005d26 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005cee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cf0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cf4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005cf6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cfa:	2202      	movs	r2, #2
 8005cfc:	f883 20d5 	strb.w	r2, [r3, #213]	@ 0xd5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005d00:	2300      	movs	r3, #0
 8005d02:	9303      	str	r3, [sp, #12]
 8005d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d06:	9302      	str	r3, [sp, #8]
 8005d08:	f107 0314 	add.w	r3, r7, #20
 8005d0c:	9301      	str	r3, [sp, #4]
 8005d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d10:	9300      	str	r3, [sp, #0]
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	68b9      	ldr	r1, [r7, #8]
 8005d18:	68f8      	ldr	r0, [r7, #12]
 8005d1a:	f000 f851 	bl	8005dc0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005d1e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005d20:	f000 f90e 	bl	8005f40 <prvAddNewTaskToReadyList>
 8005d24:	e001      	b.n	8005d2a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005d26:	2300      	movs	r3, #0
 8005d28:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005d2a:	697b      	ldr	r3, [r7, #20]
	}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3728      	adds	r7, #40	@ 0x28
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b08c      	sub	sp, #48	@ 0x30
 8005d38:	af04      	add	r7, sp, #16
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	60b9      	str	r1, [r7, #8]
 8005d3e:	603b      	str	r3, [r7, #0]
 8005d40:	4613      	mov	r3, r2
 8005d42:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005d44:	88fb      	ldrh	r3, [r7, #6]
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f002 fa27 	bl	800819c <pvPortMalloc>
 8005d4e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d00e      	beq.n	8005d74 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005d56:	20d8      	movs	r0, #216	@ 0xd8
 8005d58:	f002 fa20 	bl	800819c <pvPortMalloc>
 8005d5c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d003      	beq.n	8005d6c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005d64:	69fb      	ldr	r3, [r7, #28]
 8005d66:	697a      	ldr	r2, [r7, #20]
 8005d68:	631a      	str	r2, [r3, #48]	@ 0x30
 8005d6a:	e005      	b.n	8005d78 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005d6c:	6978      	ldr	r0, [r7, #20]
 8005d6e:	f002 fae3 	bl	8008338 <vPortFree>
 8005d72:	e001      	b.n	8005d78 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005d74:	2300      	movs	r3, #0
 8005d76:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005d78:	69fb      	ldr	r3, [r7, #28]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d017      	beq.n	8005dae <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005d7e:	69fb      	ldr	r3, [r7, #28]
 8005d80:	2200      	movs	r2, #0
 8005d82:	f883 20d5 	strb.w	r2, [r3, #213]	@ 0xd5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005d86:	88fa      	ldrh	r2, [r7, #6]
 8005d88:	2300      	movs	r3, #0
 8005d8a:	9303      	str	r3, [sp, #12]
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	9302      	str	r3, [sp, #8]
 8005d90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d92:	9301      	str	r3, [sp, #4]
 8005d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d96:	9300      	str	r3, [sp, #0]
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	68b9      	ldr	r1, [r7, #8]
 8005d9c:	68f8      	ldr	r0, [r7, #12]
 8005d9e:	f000 f80f 	bl	8005dc0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005da2:	69f8      	ldr	r0, [r7, #28]
 8005da4:	f000 f8cc 	bl	8005f40 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005da8:	2301      	movs	r3, #1
 8005daa:	61bb      	str	r3, [r7, #24]
 8005dac:	e002      	b.n	8005db4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005dae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005db2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005db4:	69bb      	ldr	r3, [r7, #24]
	}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3720      	adds	r7, #32
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}
	...

08005dc0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b088      	sub	sp, #32
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	60b9      	str	r1, [r7, #8]
 8005dca:	607a      	str	r2, [r7, #4]
 8005dcc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dd0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	21a5      	movs	r1, #165	@ 0xa5
 8005dda:	f002 fd83 	bl	80088e4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005de0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005de8:	3b01      	subs	r3, #1
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	4413      	add	r3, r2
 8005dee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005df0:	69bb      	ldr	r3, [r7, #24]
 8005df2:	f023 0307 	bic.w	r3, r3, #7
 8005df6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005df8:	69bb      	ldr	r3, [r7, #24]
 8005dfa:	f003 0307 	and.w	r3, r3, #7
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d00b      	beq.n	8005e1a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005e02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e06:	f383 8811 	msr	BASEPRI, r3
 8005e0a:	f3bf 8f6f 	isb	sy
 8005e0e:	f3bf 8f4f 	dsb	sy
 8005e12:	617b      	str	r3, [r7, #20]
}
 8005e14:	bf00      	nop
 8005e16:	bf00      	nop
 8005e18:	e7fd      	b.n	8005e16 <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8005e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e1c:	69ba      	ldr	r2, [r7, #24]
 8005e1e:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d01f      	beq.n	8005e66 <prvInitialiseNewTask+0xa6>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005e26:	2300      	movs	r3, #0
 8005e28:	61fb      	str	r3, [r7, #28]
 8005e2a:	e012      	b.n	8005e52 <prvInitialiseNewTask+0x92>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005e2c:	68ba      	ldr	r2, [r7, #8]
 8005e2e:	69fb      	ldr	r3, [r7, #28]
 8005e30:	4413      	add	r3, r2
 8005e32:	7819      	ldrb	r1, [r3, #0]
 8005e34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e36:	69fb      	ldr	r3, [r7, #28]
 8005e38:	4413      	add	r3, r2
 8005e3a:	3334      	adds	r3, #52	@ 0x34
 8005e3c:	460a      	mov	r2, r1
 8005e3e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005e40:	68ba      	ldr	r2, [r7, #8]
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	4413      	add	r3, r2
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d006      	beq.n	8005e5a <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	3301      	adds	r3, #1
 8005e50:	61fb      	str	r3, [r7, #28]
 8005e52:	69fb      	ldr	r3, [r7, #28]
 8005e54:	2b0f      	cmp	r3, #15
 8005e56:	d9e9      	bls.n	8005e2c <prvInitialiseNewTask+0x6c>
 8005e58:	e000      	b.n	8005e5c <prvInitialiseNewTask+0x9c>
			{
				break;
 8005e5a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005e64:	e003      	b.n	8005e6e <prvInitialiseNewTask+0xae>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005e6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e70:	2b37      	cmp	r3, #55	@ 0x37
 8005e72:	d901      	bls.n	8005e78 <prvInitialiseNewTask+0xb8>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005e74:	2337      	movs	r3, #55	@ 0x37
 8005e76:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e7a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e7c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e80:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e82:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->uxMutexesHeld = 0;
 8005e84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e86:	2200      	movs	r2, #0
 8005e88:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e8c:	3304      	adds	r3, #4
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f7fe ff6e 	bl	8004d70 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e96:	3318      	adds	r3, #24
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f7fe ff69 	bl	8004d70 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ea0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ea2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ea4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ea6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005eb2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8005eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	}
	#endif

	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
	{
		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	61fb      	str	r3, [r7, #28]
 8005ec0:	e008      	b.n	8005ed4 <prvInitialiseNewTask+0x114>
		{
			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 8005ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ec4:	69fa      	ldr	r2, [r7, #28]
 8005ec6:	3216      	adds	r2, #22
 8005ec8:	2100      	movs	r1, #0
 8005eca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 8005ece:	69fb      	ldr	r3, [r7, #28]
 8005ed0:	3301      	adds	r3, #1
 8005ed2:	61fb      	str	r3, [r7, #28]
 8005ed4:	69fb      	ldr	r3, [r7, #28]
 8005ed6:	2b09      	cmp	r3, #9
 8005ed8:	d9f3      	bls.n	8005ec2 <prvInitialiseNewTask+0x102>
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005edc:	2200      	movs	r2, #0
 8005ede:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eec:	3384      	adds	r3, #132	@ 0x84
 8005eee:	224c      	movs	r2, #76	@ 0x4c
 8005ef0:	2100      	movs	r1, #0
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f002 fcf6 	bl	80088e4 <memset>
 8005ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005efa:	4a0e      	ldr	r2, [pc, #56]	@ (8005f34 <prvInitialiseNewTask+0x174>)
 8005efc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8005f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f02:	4a0d      	ldr	r2, [pc, #52]	@ (8005f38 <prvInitialiseNewTask+0x178>)
 8005f04:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8005f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f0a:	4a0c      	ldr	r2, [pc, #48]	@ (8005f3c <prvInitialiseNewTask+0x17c>)
 8005f0c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005f10:	683a      	ldr	r2, [r7, #0]
 8005f12:	68f9      	ldr	r1, [r7, #12]
 8005f14:	69b8      	ldr	r0, [r7, #24]
 8005f16:	f001 feef 	bl	8007cf8 <pxPortInitialiseStack>
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f1e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005f20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d002      	beq.n	8005f2c <prvInitialiseNewTask+0x16c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005f26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f2a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f2c:	bf00      	nop
 8005f2e:	3720      	adds	r7, #32
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}
 8005f34:	20004cf0 	.word	0x20004cf0
 8005f38:	20004d58 	.word	0x20004d58
 8005f3c:	20004dc0 	.word	0x20004dc0

08005f40 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b082      	sub	sp, #8
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005f48:	f002 f806 	bl	8007f58 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005f4c:	4b2d      	ldr	r3, [pc, #180]	@ (8006004 <prvAddNewTaskToReadyList+0xc4>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	3301      	adds	r3, #1
 8005f52:	4a2c      	ldr	r2, [pc, #176]	@ (8006004 <prvAddNewTaskToReadyList+0xc4>)
 8005f54:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005f56:	4b2c      	ldr	r3, [pc, #176]	@ (8006008 <prvAddNewTaskToReadyList+0xc8>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d109      	bne.n	8005f72 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005f5e:	4a2a      	ldr	r2, [pc, #168]	@ (8006008 <prvAddNewTaskToReadyList+0xc8>)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005f64:	4b27      	ldr	r3, [pc, #156]	@ (8006004 <prvAddNewTaskToReadyList+0xc4>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d110      	bne.n	8005f8e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005f6c:	f000 fdf0 	bl	8006b50 <prvInitialiseTaskLists>
 8005f70:	e00d      	b.n	8005f8e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005f72:	4b26      	ldr	r3, [pc, #152]	@ (800600c <prvAddNewTaskToReadyList+0xcc>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d109      	bne.n	8005f8e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005f7a:	4b23      	ldr	r3, [pc, #140]	@ (8006008 <prvAddNewTaskToReadyList+0xc8>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d802      	bhi.n	8005f8e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005f88:	4a1f      	ldr	r2, [pc, #124]	@ (8006008 <prvAddNewTaskToReadyList+0xc8>)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005f8e:	4b20      	ldr	r3, [pc, #128]	@ (8006010 <prvAddNewTaskToReadyList+0xd0>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	3301      	adds	r3, #1
 8005f94:	4a1e      	ldr	r2, [pc, #120]	@ (8006010 <prvAddNewTaskToReadyList+0xd0>)
 8005f96:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005f98:	4b1d      	ldr	r3, [pc, #116]	@ (8006010 <prvAddNewTaskToReadyList+0xd0>)
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	649a      	str	r2, [r3, #72]	@ 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fa4:	4b1b      	ldr	r3, [pc, #108]	@ (8006014 <prvAddNewTaskToReadyList+0xd4>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d903      	bls.n	8005fb4 <prvAddNewTaskToReadyList+0x74>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fb0:	4a18      	ldr	r2, [pc, #96]	@ (8006014 <prvAddNewTaskToReadyList+0xd4>)
 8005fb2:	6013      	str	r3, [r2, #0]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fb8:	4613      	mov	r3, r2
 8005fba:	009b      	lsls	r3, r3, #2
 8005fbc:	4413      	add	r3, r2
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	4a15      	ldr	r2, [pc, #84]	@ (8006018 <prvAddNewTaskToReadyList+0xd8>)
 8005fc2:	441a      	add	r2, r3
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	3304      	adds	r3, #4
 8005fc8:	4619      	mov	r1, r3
 8005fca:	4610      	mov	r0, r2
 8005fcc:	f7fe fedd 	bl	8004d8a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005fd0:	f001 fff4 	bl	8007fbc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005fd4:	4b0d      	ldr	r3, [pc, #52]	@ (800600c <prvAddNewTaskToReadyList+0xcc>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d00e      	beq.n	8005ffa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005fdc:	4b0a      	ldr	r3, [pc, #40]	@ (8006008 <prvAddNewTaskToReadyList+0xc8>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d207      	bcs.n	8005ffa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005fea:	4b0c      	ldr	r3, [pc, #48]	@ (800601c <prvAddNewTaskToReadyList+0xdc>)
 8005fec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ff0:	601a      	str	r2, [r3, #0]
 8005ff2:	f3bf 8f4f 	dsb	sy
 8005ff6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ffa:	bf00      	nop
 8005ffc:	3708      	adds	r7, #8
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
 8006002:	bf00      	nop
 8006004:	20000f68 	.word	0x20000f68
 8006008:	20000a94 	.word	0x20000a94
 800600c:	20000f74 	.word	0x20000f74
 8006010:	20000f84 	.word	0x20000f84
 8006014:	20000f70 	.word	0x20000f70
 8006018:	20000a98 	.word	0x20000a98
 800601c:	e000ed04 	.word	0xe000ed04

08006020 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8006020:	b580      	push	{r7, lr}
 8006022:	b088      	sub	sp, #32
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 800602c:	69bb      	ldr	r3, [r7, #24]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d10b      	bne.n	800604a <eTaskGetState+0x2a>
	__asm volatile
 8006032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006036:	f383 8811 	msr	BASEPRI, r3
 800603a:	f3bf 8f6f 	isb	sy
 800603e:	f3bf 8f4f 	dsb	sy
 8006042:	60bb      	str	r3, [r7, #8]
}
 8006044:	bf00      	nop
 8006046:	bf00      	nop
 8006048:	e7fd      	b.n	8006046 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 800604a:	4b24      	ldr	r3, [pc, #144]	@ (80060dc <eTaskGetState+0xbc>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	69ba      	ldr	r2, [r7, #24]
 8006050:	429a      	cmp	r2, r3
 8006052:	d102      	bne.n	800605a <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8006054:	2300      	movs	r3, #0
 8006056:	77fb      	strb	r3, [r7, #31]
 8006058:	e03a      	b.n	80060d0 <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 800605a:	f001 ff7d 	bl	8007f58 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800605e:	69bb      	ldr	r3, [r7, #24]
 8006060:	695b      	ldr	r3, [r3, #20]
 8006062:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8006064:	4b1e      	ldr	r3, [pc, #120]	@ (80060e0 <eTaskGetState+0xc0>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800606a:	4b1e      	ldr	r3, [pc, #120]	@ (80060e4 <eTaskGetState+0xc4>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8006070:	f001 ffa4 	bl	8007fbc <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8006074:	697a      	ldr	r2, [r7, #20]
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	429a      	cmp	r2, r3
 800607a:	d003      	beq.n	8006084 <eTaskGetState+0x64>
 800607c:	697a      	ldr	r2, [r7, #20]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	429a      	cmp	r2, r3
 8006082:	d102      	bne.n	800608a <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8006084:	2302      	movs	r3, #2
 8006086:	77fb      	strb	r3, [r7, #31]
 8006088:	e022      	b.n	80060d0 <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	4a16      	ldr	r2, [pc, #88]	@ (80060e8 <eTaskGetState+0xc8>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d112      	bne.n	80060b8 <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8006092:	69bb      	ldr	r3, [r7, #24]
 8006094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006096:	2b00      	cmp	r3, #0
 8006098:	d10b      	bne.n	80060b2 <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	f893 30d4 	ldrb.w	r3, [r3, #212]	@ 0xd4
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d102      	bne.n	80060ac <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 80060a6:	2302      	movs	r3, #2
 80060a8:	77fb      	strb	r3, [r7, #31]
 80060aa:	e011      	b.n	80060d0 <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 80060ac:	2303      	movs	r3, #3
 80060ae:	77fb      	strb	r3, [r7, #31]
 80060b0:	e00e      	b.n	80060d0 <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 80060b2:	2302      	movs	r3, #2
 80060b4:	77fb      	strb	r3, [r7, #31]
 80060b6:	e00b      	b.n	80060d0 <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	4a0c      	ldr	r2, [pc, #48]	@ (80060ec <eTaskGetState+0xcc>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d002      	beq.n	80060c6 <eTaskGetState+0xa6>
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d102      	bne.n	80060cc <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 80060c6:	2304      	movs	r3, #4
 80060c8:	77fb      	strb	r3, [r7, #31]
 80060ca:	e001      	b.n	80060d0 <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 80060cc:	2301      	movs	r3, #1
 80060ce:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 80060d0:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80060d2:	4618      	mov	r0, r3
 80060d4:	3720      	adds	r7, #32
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
 80060da:	bf00      	nop
 80060dc:	20000a94 	.word	0x20000a94
 80060e0:	20000f20 	.word	0x20000f20
 80060e4:	20000f24 	.word	0x20000f24
 80060e8:	20000f54 	.word	0x20000f54
 80060ec:	20000f3c 	.word	0x20000f3c

080060f0 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b088      	sub	sp, #32
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 80060fa:	2300      	movs	r3, #0
 80060fc:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	2b37      	cmp	r3, #55	@ 0x37
 8006102:	d90b      	bls.n	800611c <vTaskPrioritySet+0x2c>
	__asm volatile
 8006104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006108:	f383 8811 	msr	BASEPRI, r3
 800610c:	f3bf 8f6f 	isb	sy
 8006110:	f3bf 8f4f 	dsb	sy
 8006114:	60fb      	str	r3, [r7, #12]
}
 8006116:	bf00      	nop
 8006118:	bf00      	nop
 800611a:	e7fd      	b.n	8006118 <vTaskPrioritySet+0x28>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	2b37      	cmp	r3, #55	@ 0x37
 8006120:	d901      	bls.n	8006126 <vTaskPrioritySet+0x36>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006122:	2337      	movs	r3, #55	@ 0x37
 8006124:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 8006126:	f001 ff17 	bl	8007f58 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d102      	bne.n	8006136 <vTaskPrioritySet+0x46>
 8006130:	4b3a      	ldr	r3, [pc, #232]	@ (800621c <vTaskPrioritySet+0x12c>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	e000      	b.n	8006138 <vTaskPrioritySet+0x48>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 800613a:	69bb      	ldr	r3, [r7, #24]
 800613c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800613e:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 8006140:	697a      	ldr	r2, [r7, #20]
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	429a      	cmp	r2, r3
 8006146:	d063      	beq.n	8006210 <vTaskPrioritySet+0x120>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 8006148:	683a      	ldr	r2, [r7, #0]
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	429a      	cmp	r2, r3
 800614e:	d90d      	bls.n	800616c <vTaskPrioritySet+0x7c>
				{
					if( pxTCB != pxCurrentTCB )
 8006150:	4b32      	ldr	r3, [pc, #200]	@ (800621c <vTaskPrioritySet+0x12c>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	69ba      	ldr	r2, [r7, #24]
 8006156:	429a      	cmp	r2, r3
 8006158:	d00f      	beq.n	800617a <vTaskPrioritySet+0x8a>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800615a:	4b30      	ldr	r3, [pc, #192]	@ (800621c <vTaskPrioritySet+0x12c>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006160:	683a      	ldr	r2, [r7, #0]
 8006162:	429a      	cmp	r2, r3
 8006164:	d309      	bcc.n	800617a <vTaskPrioritySet+0x8a>
						{
							xYieldRequired = pdTRUE;
 8006166:	2301      	movs	r3, #1
 8006168:	61fb      	str	r3, [r7, #28]
 800616a:	e006      	b.n	800617a <vTaskPrioritySet+0x8a>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 800616c:	4b2b      	ldr	r3, [pc, #172]	@ (800621c <vTaskPrioritySet+0x12c>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	69ba      	ldr	r2, [r7, #24]
 8006172:	429a      	cmp	r2, r3
 8006174:	d101      	bne.n	800617a <vTaskPrioritySet+0x8a>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 8006176:	2301      	movs	r3, #1
 8006178:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800617a:	69bb      	ldr	r3, [r7, #24]
 800617c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800617e:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8006180:	69bb      	ldr	r3, [r7, #24]
 8006182:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006184:	69bb      	ldr	r3, [r7, #24]
 8006186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006188:	429a      	cmp	r2, r3
 800618a:	d102      	bne.n	8006192 <vTaskPrioritySet+0xa2>
					{
						pxTCB->uxPriority = uxNewPriority;
 800618c:	69bb      	ldr	r3, [r7, #24]
 800618e:	683a      	ldr	r2, [r7, #0]
 8006190:	62da      	str	r2, [r3, #44]	@ 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 8006192:	69bb      	ldr	r3, [r7, #24]
 8006194:	683a      	ldr	r2, [r7, #0]
 8006196:	651a      	str	r2, [r3, #80]	@ 0x50
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006198:	69bb      	ldr	r3, [r7, #24]
 800619a:	699b      	ldr	r3, [r3, #24]
 800619c:	2b00      	cmp	r3, #0
 800619e:	db04      	blt.n	80061aa <vTaskPrioritySet+0xba>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80061a6:	69bb      	ldr	r3, [r7, #24]
 80061a8:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80061aa:	69bb      	ldr	r3, [r7, #24]
 80061ac:	6959      	ldr	r1, [r3, #20]
 80061ae:	693a      	ldr	r2, [r7, #16]
 80061b0:	4613      	mov	r3, r2
 80061b2:	009b      	lsls	r3, r3, #2
 80061b4:	4413      	add	r3, r2
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	4a19      	ldr	r2, [pc, #100]	@ (8006220 <vTaskPrioritySet+0x130>)
 80061ba:	4413      	add	r3, r2
 80061bc:	4299      	cmp	r1, r3
 80061be:	d11c      	bne.n	80061fa <vTaskPrioritySet+0x10a>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80061c0:	69bb      	ldr	r3, [r7, #24]
 80061c2:	3304      	adds	r3, #4
 80061c4:	4618      	mov	r0, r3
 80061c6:	f7fe fe3d 	bl	8004e44 <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 80061ca:	69bb      	ldr	r3, [r7, #24]
 80061cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061ce:	4b15      	ldr	r3, [pc, #84]	@ (8006224 <vTaskPrioritySet+0x134>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d903      	bls.n	80061de <vTaskPrioritySet+0xee>
 80061d6:	69bb      	ldr	r3, [r7, #24]
 80061d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061da:	4a12      	ldr	r2, [pc, #72]	@ (8006224 <vTaskPrioritySet+0x134>)
 80061dc:	6013      	str	r3, [r2, #0]
 80061de:	69bb      	ldr	r3, [r7, #24]
 80061e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061e2:	4613      	mov	r3, r2
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	4413      	add	r3, r2
 80061e8:	009b      	lsls	r3, r3, #2
 80061ea:	4a0d      	ldr	r2, [pc, #52]	@ (8006220 <vTaskPrioritySet+0x130>)
 80061ec:	441a      	add	r2, r3
 80061ee:	69bb      	ldr	r3, [r7, #24]
 80061f0:	3304      	adds	r3, #4
 80061f2:	4619      	mov	r1, r3
 80061f4:	4610      	mov	r0, r2
 80061f6:	f7fe fdc8 	bl	8004d8a <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 80061fa:	69fb      	ldr	r3, [r7, #28]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d007      	beq.n	8006210 <vTaskPrioritySet+0x120>
				{
					taskYIELD_IF_USING_PREEMPTION();
 8006200:	4b09      	ldr	r3, [pc, #36]	@ (8006228 <vTaskPrioritySet+0x138>)
 8006202:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006206:	601a      	str	r2, [r3, #0]
 8006208:	f3bf 8f4f 	dsb	sy
 800620c:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 8006210:	f001 fed4 	bl	8007fbc <vPortExitCritical>
	}
 8006214:	bf00      	nop
 8006216:	3720      	adds	r7, #32
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}
 800621c:	20000a94 	.word	0x20000a94
 8006220:	20000a98 	.word	0x20000a98
 8006224:	20000f70 	.word	0x20000f70
 8006228:	e000ed04 	.word	0xe000ed04

0800622c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b08a      	sub	sp, #40	@ 0x28
 8006230:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006232:	2300      	movs	r3, #0
 8006234:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006236:	2300      	movs	r3, #0
 8006238:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800623a:	463a      	mov	r2, r7
 800623c:	1d39      	adds	r1, r7, #4
 800623e:	f107 0308 	add.w	r3, r7, #8
 8006242:	4618      	mov	r0, r3
 8006244:	f7fe fd40 	bl	8004cc8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006248:	6839      	ldr	r1, [r7, #0]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	68ba      	ldr	r2, [r7, #8]
 800624e:	9202      	str	r2, [sp, #8]
 8006250:	9301      	str	r3, [sp, #4]
 8006252:	2300      	movs	r3, #0
 8006254:	9300      	str	r3, [sp, #0]
 8006256:	2300      	movs	r3, #0
 8006258:	460a      	mov	r2, r1
 800625a:	4925      	ldr	r1, [pc, #148]	@ (80062f0 <vTaskStartScheduler+0xc4>)
 800625c:	4825      	ldr	r0, [pc, #148]	@ (80062f4 <vTaskStartScheduler+0xc8>)
 800625e:	f7ff fd09 	bl	8005c74 <xTaskCreateStatic>
 8006262:	4603      	mov	r3, r0
 8006264:	4a24      	ldr	r2, [pc, #144]	@ (80062f8 <vTaskStartScheduler+0xcc>)
 8006266:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006268:	4b23      	ldr	r3, [pc, #140]	@ (80062f8 <vTaskStartScheduler+0xcc>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d002      	beq.n	8006276 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006270:	2301      	movs	r3, #1
 8006272:	617b      	str	r3, [r7, #20]
 8006274:	e001      	b.n	800627a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006276:	2300      	movs	r3, #0
 8006278:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	2b01      	cmp	r3, #1
 800627e:	d102      	bne.n	8006286 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006280:	f001 f960 	bl	8007544 <xTimerCreateTimerTask>
 8006284:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	2b01      	cmp	r3, #1
 800628a:	d11d      	bne.n	80062c8 <vTaskStartScheduler+0x9c>
	__asm volatile
 800628c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006290:	f383 8811 	msr	BASEPRI, r3
 8006294:	f3bf 8f6f 	isb	sy
 8006298:	f3bf 8f4f 	dsb	sy
 800629c:	613b      	str	r3, [r7, #16]
}
 800629e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80062a0:	4b16      	ldr	r3, [pc, #88]	@ (80062fc <vTaskStartScheduler+0xd0>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	3384      	adds	r3, #132	@ 0x84
 80062a6:	4a16      	ldr	r2, [pc, #88]	@ (8006300 <vTaskStartScheduler+0xd4>)
 80062a8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80062aa:	4b16      	ldr	r3, [pc, #88]	@ (8006304 <vTaskStartScheduler+0xd8>)
 80062ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80062b0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80062b2:	4b15      	ldr	r3, [pc, #84]	@ (8006308 <vTaskStartScheduler+0xdc>)
 80062b4:	2201      	movs	r2, #1
 80062b6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80062b8:	4b14      	ldr	r3, [pc, #80]	@ (800630c <vTaskStartScheduler+0xe0>)
 80062ba:	2200      	movs	r2, #0
 80062bc:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80062be:	f7fa ffbb 	bl	8001238 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80062c2:	f001 fda5 	bl	8007e10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80062c6:	e00f      	b.n	80062e8 <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80062ce:	d10b      	bne.n	80062e8 <vTaskStartScheduler+0xbc>
	__asm volatile
 80062d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062d4:	f383 8811 	msr	BASEPRI, r3
 80062d8:	f3bf 8f6f 	isb	sy
 80062dc:	f3bf 8f4f 	dsb	sy
 80062e0:	60fb      	str	r3, [r7, #12]
}
 80062e2:	bf00      	nop
 80062e4:	bf00      	nop
 80062e6:	e7fd      	b.n	80062e4 <vTaskStartScheduler+0xb8>
}
 80062e8:	bf00      	nop
 80062ea:	3718      	adds	r7, #24
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}
 80062f0:	08009320 	.word	0x08009320
 80062f4:	08006a99 	.word	0x08006a99
 80062f8:	20000f8c 	.word	0x20000f8c
 80062fc:	20000a94 	.word	0x20000a94
 8006300:	20000010 	.word	0x20000010
 8006304:	20000f88 	.word	0x20000f88
 8006308:	20000f74 	.word	0x20000f74
 800630c:	20000f6c 	.word	0x20000f6c

08006310 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006310:	b480      	push	{r7}
 8006312:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006314:	4b04      	ldr	r3, [pc, #16]	@ (8006328 <vTaskSuspendAll+0x18>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	3301      	adds	r3, #1
 800631a:	4a03      	ldr	r2, [pc, #12]	@ (8006328 <vTaskSuspendAll+0x18>)
 800631c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800631e:	bf00      	nop
 8006320:	46bd      	mov	sp, r7
 8006322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006326:	4770      	bx	lr
 8006328:	20000f90 	.word	0x20000f90

0800632c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b084      	sub	sp, #16
 8006330:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006332:	2300      	movs	r3, #0
 8006334:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006336:	2300      	movs	r3, #0
 8006338:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800633a:	4b42      	ldr	r3, [pc, #264]	@ (8006444 <xTaskResumeAll+0x118>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d10b      	bne.n	800635a <xTaskResumeAll+0x2e>
	__asm volatile
 8006342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006346:	f383 8811 	msr	BASEPRI, r3
 800634a:	f3bf 8f6f 	isb	sy
 800634e:	f3bf 8f4f 	dsb	sy
 8006352:	603b      	str	r3, [r7, #0]
}
 8006354:	bf00      	nop
 8006356:	bf00      	nop
 8006358:	e7fd      	b.n	8006356 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800635a:	f001 fdfd 	bl	8007f58 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800635e:	4b39      	ldr	r3, [pc, #228]	@ (8006444 <xTaskResumeAll+0x118>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	3b01      	subs	r3, #1
 8006364:	4a37      	ldr	r2, [pc, #220]	@ (8006444 <xTaskResumeAll+0x118>)
 8006366:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006368:	4b36      	ldr	r3, [pc, #216]	@ (8006444 <xTaskResumeAll+0x118>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d162      	bne.n	8006436 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006370:	4b35      	ldr	r3, [pc, #212]	@ (8006448 <xTaskResumeAll+0x11c>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d05e      	beq.n	8006436 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006378:	e02f      	b.n	80063da <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800637a:	4b34      	ldr	r3, [pc, #208]	@ (800644c <xTaskResumeAll+0x120>)
 800637c:	68db      	ldr	r3, [r3, #12]
 800637e:	68db      	ldr	r3, [r3, #12]
 8006380:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	3318      	adds	r3, #24
 8006386:	4618      	mov	r0, r3
 8006388:	f7fe fd5c 	bl	8004e44 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	3304      	adds	r3, #4
 8006390:	4618      	mov	r0, r3
 8006392:	f7fe fd57 	bl	8004e44 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800639a:	4b2d      	ldr	r3, [pc, #180]	@ (8006450 <xTaskResumeAll+0x124>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	429a      	cmp	r2, r3
 80063a0:	d903      	bls.n	80063aa <xTaskResumeAll+0x7e>
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063a6:	4a2a      	ldr	r2, [pc, #168]	@ (8006450 <xTaskResumeAll+0x124>)
 80063a8:	6013      	str	r3, [r2, #0]
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063ae:	4613      	mov	r3, r2
 80063b0:	009b      	lsls	r3, r3, #2
 80063b2:	4413      	add	r3, r2
 80063b4:	009b      	lsls	r3, r3, #2
 80063b6:	4a27      	ldr	r2, [pc, #156]	@ (8006454 <xTaskResumeAll+0x128>)
 80063b8:	441a      	add	r2, r3
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	3304      	adds	r3, #4
 80063be:	4619      	mov	r1, r3
 80063c0:	4610      	mov	r0, r2
 80063c2:	f7fe fce2 	bl	8004d8a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063ca:	4b23      	ldr	r3, [pc, #140]	@ (8006458 <xTaskResumeAll+0x12c>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d302      	bcc.n	80063da <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80063d4:	4b21      	ldr	r3, [pc, #132]	@ (800645c <xTaskResumeAll+0x130>)
 80063d6:	2201      	movs	r2, #1
 80063d8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80063da:	4b1c      	ldr	r3, [pc, #112]	@ (800644c <xTaskResumeAll+0x120>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d1cb      	bne.n	800637a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d001      	beq.n	80063ec <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80063e8:	f000 fd2c 	bl	8006e44 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80063ec:	4b1c      	ldr	r3, [pc, #112]	@ (8006460 <xTaskResumeAll+0x134>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d010      	beq.n	800641a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80063f8:	f000 f8d6 	bl	80065a8 <xTaskIncrementTick>
 80063fc:	4603      	mov	r3, r0
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d002      	beq.n	8006408 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006402:	4b16      	ldr	r3, [pc, #88]	@ (800645c <xTaskResumeAll+0x130>)
 8006404:	2201      	movs	r2, #1
 8006406:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	3b01      	subs	r3, #1
 800640c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d1f1      	bne.n	80063f8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006414:	4b12      	ldr	r3, [pc, #72]	@ (8006460 <xTaskResumeAll+0x134>)
 8006416:	2200      	movs	r2, #0
 8006418:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800641a:	4b10      	ldr	r3, [pc, #64]	@ (800645c <xTaskResumeAll+0x130>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d009      	beq.n	8006436 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006422:	2301      	movs	r3, #1
 8006424:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006426:	4b0f      	ldr	r3, [pc, #60]	@ (8006464 <xTaskResumeAll+0x138>)
 8006428:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800642c:	601a      	str	r2, [r3, #0]
 800642e:	f3bf 8f4f 	dsb	sy
 8006432:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006436:	f001 fdc1 	bl	8007fbc <vPortExitCritical>

	return xAlreadyYielded;
 800643a:	68bb      	ldr	r3, [r7, #8]
}
 800643c:	4618      	mov	r0, r3
 800643e:	3710      	adds	r7, #16
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}
 8006444:	20000f90 	.word	0x20000f90
 8006448:	20000f68 	.word	0x20000f68
 800644c:	20000f28 	.word	0x20000f28
 8006450:	20000f70 	.word	0x20000f70
 8006454:	20000a98 	.word	0x20000a98
 8006458:	20000a94 	.word	0x20000a94
 800645c:	20000f7c 	.word	0x20000f7c
 8006460:	20000f78 	.word	0x20000f78
 8006464:	e000ed04 	.word	0xe000ed04

08006468 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006468:	b480      	push	{r7}
 800646a:	b083      	sub	sp, #12
 800646c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800646e:	4b05      	ldr	r3, [pc, #20]	@ (8006484 <xTaskGetTickCount+0x1c>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006474:	687b      	ldr	r3, [r7, #4]
}
 8006476:	4618      	mov	r0, r3
 8006478:	370c      	adds	r7, #12
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr
 8006482:	bf00      	nop
 8006484:	20000f6c 	.word	0x20000f6c

08006488 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 8006488:	b580      	push	{r7, lr}
 800648a:	b086      	sub	sp, #24
 800648c:	af00      	add	r7, sp, #0
 800648e:	60f8      	str	r0, [r7, #12]
 8006490:	60b9      	str	r1, [r7, #8]
 8006492:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 8006494:	2300      	movs	r3, #0
 8006496:	617b      	str	r3, [r7, #20]
 8006498:	2338      	movs	r3, #56	@ 0x38
 800649a:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 800649c:	f7ff ff38 	bl	8006310 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 80064a0:	4b3b      	ldr	r3, [pc, #236]	@ (8006590 <uxTaskGetSystemState+0x108>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	68ba      	ldr	r2, [r7, #8]
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d36a      	bcc.n	8006580 <uxTaskGetSystemState+0xf8>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	3b01      	subs	r3, #1
 80064ae:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 80064b0:	697a      	ldr	r2, [r7, #20]
 80064b2:	4613      	mov	r3, r2
 80064b4:	00db      	lsls	r3, r3, #3
 80064b6:	4413      	add	r3, r2
 80064b8:	009b      	lsls	r3, r3, #2
 80064ba:	461a      	mov	r2, r3
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	1898      	adds	r0, r3, r2
 80064c0:	693a      	ldr	r2, [r7, #16]
 80064c2:	4613      	mov	r3, r2
 80064c4:	009b      	lsls	r3, r3, #2
 80064c6:	4413      	add	r3, r2
 80064c8:	009b      	lsls	r3, r3, #2
 80064ca:	4a32      	ldr	r2, [pc, #200]	@ (8006594 <uxTaskGetSystemState+0x10c>)
 80064cc:	4413      	add	r3, r2
 80064ce:	2201      	movs	r2, #1
 80064d0:	4619      	mov	r1, r3
 80064d2:	f000 fc13 	bl	8006cfc <prvListTasksWithinSingleList>
 80064d6:	4602      	mov	r2, r0
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	4413      	add	r3, r2
 80064dc:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d1e2      	bne.n	80064aa <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 80064e4:	697a      	ldr	r2, [r7, #20]
 80064e6:	4613      	mov	r3, r2
 80064e8:	00db      	lsls	r3, r3, #3
 80064ea:	4413      	add	r3, r2
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	461a      	mov	r2, r3
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	4413      	add	r3, r2
 80064f4:	4a28      	ldr	r2, [pc, #160]	@ (8006598 <uxTaskGetSystemState+0x110>)
 80064f6:	6811      	ldr	r1, [r2, #0]
 80064f8:	2202      	movs	r2, #2
 80064fa:	4618      	mov	r0, r3
 80064fc:	f000 fbfe 	bl	8006cfc <prvListTasksWithinSingleList>
 8006500:	4602      	mov	r2, r0
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	4413      	add	r3, r2
 8006506:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8006508:	697a      	ldr	r2, [r7, #20]
 800650a:	4613      	mov	r3, r2
 800650c:	00db      	lsls	r3, r3, #3
 800650e:	4413      	add	r3, r2
 8006510:	009b      	lsls	r3, r3, #2
 8006512:	461a      	mov	r2, r3
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	4413      	add	r3, r2
 8006518:	4a20      	ldr	r2, [pc, #128]	@ (800659c <uxTaskGetSystemState+0x114>)
 800651a:	6811      	ldr	r1, [r2, #0]
 800651c:	2202      	movs	r2, #2
 800651e:	4618      	mov	r0, r3
 8006520:	f000 fbec 	bl	8006cfc <prvListTasksWithinSingleList>
 8006524:	4602      	mov	r2, r0
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	4413      	add	r3, r2
 800652a:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800652c:	697a      	ldr	r2, [r7, #20]
 800652e:	4613      	mov	r3, r2
 8006530:	00db      	lsls	r3, r3, #3
 8006532:	4413      	add	r3, r2
 8006534:	009b      	lsls	r3, r3, #2
 8006536:	461a      	mov	r2, r3
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	4413      	add	r3, r2
 800653c:	2204      	movs	r2, #4
 800653e:	4918      	ldr	r1, [pc, #96]	@ (80065a0 <uxTaskGetSystemState+0x118>)
 8006540:	4618      	mov	r0, r3
 8006542:	f000 fbdb 	bl	8006cfc <prvListTasksWithinSingleList>
 8006546:	4602      	mov	r2, r0
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	4413      	add	r3, r2
 800654c:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800654e:	697a      	ldr	r2, [r7, #20]
 8006550:	4613      	mov	r3, r2
 8006552:	00db      	lsls	r3, r3, #3
 8006554:	4413      	add	r3, r2
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	461a      	mov	r2, r3
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	4413      	add	r3, r2
 800655e:	2203      	movs	r2, #3
 8006560:	4910      	ldr	r1, [pc, #64]	@ (80065a4 <uxTaskGetSystemState+0x11c>)
 8006562:	4618      	mov	r0, r3
 8006564:	f000 fbca 	bl	8006cfc <prvListTasksWithinSingleList>
 8006568:	4602      	mov	r2, r0
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	4413      	add	r3, r2
 800656e:	617b      	str	r3, [r7, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1)
				{
					if( pulTotalRunTime != NULL )
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d004      	beq.n	8006580 <uxTaskGetSystemState+0xf8>
					{
						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
						#else
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8006576:	f7fa fe6d 	bl	8001254 <getRunTimeCounterValue>
 800657a:	4602      	mov	r2, r0
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 8006580:	f7ff fed4 	bl	800632c <xTaskResumeAll>

		return uxTask;
 8006584:	697b      	ldr	r3, [r7, #20]
	}
 8006586:	4618      	mov	r0, r3
 8006588:	3718      	adds	r7, #24
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
 800658e:	bf00      	nop
 8006590:	20000f68 	.word	0x20000f68
 8006594:	20000a98 	.word	0x20000a98
 8006598:	20000f20 	.word	0x20000f20
 800659c:	20000f24 	.word	0x20000f24
 80065a0:	20000f3c 	.word	0x20000f3c
 80065a4:	20000f54 	.word	0x20000f54

080065a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b086      	sub	sp, #24
 80065ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80065ae:	2300      	movs	r3, #0
 80065b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065b2:	4b4f      	ldr	r3, [pc, #316]	@ (80066f0 <xTaskIncrementTick+0x148>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	f040 8090 	bne.w	80066dc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80065bc:	4b4d      	ldr	r3, [pc, #308]	@ (80066f4 <xTaskIncrementTick+0x14c>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	3301      	adds	r3, #1
 80065c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80065c4:	4a4b      	ldr	r2, [pc, #300]	@ (80066f4 <xTaskIncrementTick+0x14c>)
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d121      	bne.n	8006614 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80065d0:	4b49      	ldr	r3, [pc, #292]	@ (80066f8 <xTaskIncrementTick+0x150>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d00b      	beq.n	80065f2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80065da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065de:	f383 8811 	msr	BASEPRI, r3
 80065e2:	f3bf 8f6f 	isb	sy
 80065e6:	f3bf 8f4f 	dsb	sy
 80065ea:	603b      	str	r3, [r7, #0]
}
 80065ec:	bf00      	nop
 80065ee:	bf00      	nop
 80065f0:	e7fd      	b.n	80065ee <xTaskIncrementTick+0x46>
 80065f2:	4b41      	ldr	r3, [pc, #260]	@ (80066f8 <xTaskIncrementTick+0x150>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	60fb      	str	r3, [r7, #12]
 80065f8:	4b40      	ldr	r3, [pc, #256]	@ (80066fc <xTaskIncrementTick+0x154>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a3e      	ldr	r2, [pc, #248]	@ (80066f8 <xTaskIncrementTick+0x150>)
 80065fe:	6013      	str	r3, [r2, #0]
 8006600:	4a3e      	ldr	r2, [pc, #248]	@ (80066fc <xTaskIncrementTick+0x154>)
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	6013      	str	r3, [r2, #0]
 8006606:	4b3e      	ldr	r3, [pc, #248]	@ (8006700 <xTaskIncrementTick+0x158>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	3301      	adds	r3, #1
 800660c:	4a3c      	ldr	r2, [pc, #240]	@ (8006700 <xTaskIncrementTick+0x158>)
 800660e:	6013      	str	r3, [r2, #0]
 8006610:	f000 fc18 	bl	8006e44 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006614:	4b3b      	ldr	r3, [pc, #236]	@ (8006704 <xTaskIncrementTick+0x15c>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	693a      	ldr	r2, [r7, #16]
 800661a:	429a      	cmp	r2, r3
 800661c:	d349      	bcc.n	80066b2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800661e:	4b36      	ldr	r3, [pc, #216]	@ (80066f8 <xTaskIncrementTick+0x150>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d104      	bne.n	8006632 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006628:	4b36      	ldr	r3, [pc, #216]	@ (8006704 <xTaskIncrementTick+0x15c>)
 800662a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800662e:	601a      	str	r2, [r3, #0]
					break;
 8006630:	e03f      	b.n	80066b2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006632:	4b31      	ldr	r3, [pc, #196]	@ (80066f8 <xTaskIncrementTick+0x150>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	68db      	ldr	r3, [r3, #12]
 8006638:	68db      	ldr	r3, [r3, #12]
 800663a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006642:	693a      	ldr	r2, [r7, #16]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	429a      	cmp	r2, r3
 8006648:	d203      	bcs.n	8006652 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800664a:	4a2e      	ldr	r2, [pc, #184]	@ (8006704 <xTaskIncrementTick+0x15c>)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006650:	e02f      	b.n	80066b2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	3304      	adds	r3, #4
 8006656:	4618      	mov	r0, r3
 8006658:	f7fe fbf4 	bl	8004e44 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006660:	2b00      	cmp	r3, #0
 8006662:	d004      	beq.n	800666e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	3318      	adds	r3, #24
 8006668:	4618      	mov	r0, r3
 800666a:	f7fe fbeb 	bl	8004e44 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006672:	4b25      	ldr	r3, [pc, #148]	@ (8006708 <xTaskIncrementTick+0x160>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	429a      	cmp	r2, r3
 8006678:	d903      	bls.n	8006682 <xTaskIncrementTick+0xda>
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800667e:	4a22      	ldr	r2, [pc, #136]	@ (8006708 <xTaskIncrementTick+0x160>)
 8006680:	6013      	str	r3, [r2, #0]
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006686:	4613      	mov	r3, r2
 8006688:	009b      	lsls	r3, r3, #2
 800668a:	4413      	add	r3, r2
 800668c:	009b      	lsls	r3, r3, #2
 800668e:	4a1f      	ldr	r2, [pc, #124]	@ (800670c <xTaskIncrementTick+0x164>)
 8006690:	441a      	add	r2, r3
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	3304      	adds	r3, #4
 8006696:	4619      	mov	r1, r3
 8006698:	4610      	mov	r0, r2
 800669a:	f7fe fb76 	bl	8004d8a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066a2:	4b1b      	ldr	r3, [pc, #108]	@ (8006710 <xTaskIncrementTick+0x168>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d3b8      	bcc.n	800661e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80066ac:	2301      	movs	r3, #1
 80066ae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066b0:	e7b5      	b.n	800661e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80066b2:	4b17      	ldr	r3, [pc, #92]	@ (8006710 <xTaskIncrementTick+0x168>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066b8:	4914      	ldr	r1, [pc, #80]	@ (800670c <xTaskIncrementTick+0x164>)
 80066ba:	4613      	mov	r3, r2
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	4413      	add	r3, r2
 80066c0:	009b      	lsls	r3, r3, #2
 80066c2:	440b      	add	r3, r1
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d901      	bls.n	80066ce <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80066ca:	2301      	movs	r3, #1
 80066cc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80066ce:	4b11      	ldr	r3, [pc, #68]	@ (8006714 <xTaskIncrementTick+0x16c>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d007      	beq.n	80066e6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80066d6:	2301      	movs	r3, #1
 80066d8:	617b      	str	r3, [r7, #20]
 80066da:	e004      	b.n	80066e6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80066dc:	4b0e      	ldr	r3, [pc, #56]	@ (8006718 <xTaskIncrementTick+0x170>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	3301      	adds	r3, #1
 80066e2:	4a0d      	ldr	r2, [pc, #52]	@ (8006718 <xTaskIncrementTick+0x170>)
 80066e4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80066e6:	697b      	ldr	r3, [r7, #20]
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3718      	adds	r7, #24
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}
 80066f0:	20000f90 	.word	0x20000f90
 80066f4:	20000f6c 	.word	0x20000f6c
 80066f8:	20000f20 	.word	0x20000f20
 80066fc:	20000f24 	.word	0x20000f24
 8006700:	20000f80 	.word	0x20000f80
 8006704:	20000f88 	.word	0x20000f88
 8006708:	20000f70 	.word	0x20000f70
 800670c:	20000a98 	.word	0x20000a98
 8006710:	20000a94 	.word	0x20000a94
 8006714:	20000f7c 	.word	0x20000f7c
 8006718:	20000f78 	.word	0x20000f78

0800671c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b084      	sub	sp, #16
 8006720:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006722:	4b37      	ldr	r3, [pc, #220]	@ (8006800 <vTaskSwitchContext+0xe4>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d003      	beq.n	8006732 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800672a:	4b36      	ldr	r3, [pc, #216]	@ (8006804 <vTaskSwitchContext+0xe8>)
 800672c:	2201      	movs	r2, #1
 800672e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006730:	e062      	b.n	80067f8 <vTaskSwitchContext+0xdc>
		xYieldPending = pdFALSE;
 8006732:	4b34      	ldr	r3, [pc, #208]	@ (8006804 <vTaskSwitchContext+0xe8>)
 8006734:	2200      	movs	r2, #0
 8006736:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8006738:	f7fa fd8c 	bl	8001254 <getRunTimeCounterValue>
 800673c:	4603      	mov	r3, r0
 800673e:	4a32      	ldr	r2, [pc, #200]	@ (8006808 <vTaskSwitchContext+0xec>)
 8006740:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8006742:	4b31      	ldr	r3, [pc, #196]	@ (8006808 <vTaskSwitchContext+0xec>)
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	4b31      	ldr	r3, [pc, #196]	@ (800680c <vTaskSwitchContext+0xf0>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	429a      	cmp	r2, r3
 800674c:	d90b      	bls.n	8006766 <vTaskSwitchContext+0x4a>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800674e:	4b30      	ldr	r3, [pc, #192]	@ (8006810 <vTaskSwitchContext+0xf4>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
 8006756:	4a2c      	ldr	r2, [pc, #176]	@ (8006808 <vTaskSwitchContext+0xec>)
 8006758:	6810      	ldr	r0, [r2, #0]
 800675a:	4a2c      	ldr	r2, [pc, #176]	@ (800680c <vTaskSwitchContext+0xf0>)
 800675c:	6812      	ldr	r2, [r2, #0]
 800675e:	1a82      	subs	r2, r0, r2
 8006760:	440a      	add	r2, r1
 8006762:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
			ulTaskSwitchedInTime = ulTotalRunTime;
 8006766:	4b28      	ldr	r3, [pc, #160]	@ (8006808 <vTaskSwitchContext+0xec>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a28      	ldr	r2, [pc, #160]	@ (800680c <vTaskSwitchContext+0xf0>)
 800676c:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800676e:	4b29      	ldr	r3, [pc, #164]	@ (8006814 <vTaskSwitchContext+0xf8>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	60fb      	str	r3, [r7, #12]
 8006774:	e011      	b.n	800679a <vTaskSwitchContext+0x7e>
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d10b      	bne.n	8006794 <vTaskSwitchContext+0x78>
	__asm volatile
 800677c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006780:	f383 8811 	msr	BASEPRI, r3
 8006784:	f3bf 8f6f 	isb	sy
 8006788:	f3bf 8f4f 	dsb	sy
 800678c:	607b      	str	r3, [r7, #4]
}
 800678e:	bf00      	nop
 8006790:	bf00      	nop
 8006792:	e7fd      	b.n	8006790 <vTaskSwitchContext+0x74>
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	3b01      	subs	r3, #1
 8006798:	60fb      	str	r3, [r7, #12]
 800679a:	491f      	ldr	r1, [pc, #124]	@ (8006818 <vTaskSwitchContext+0xfc>)
 800679c:	68fa      	ldr	r2, [r7, #12]
 800679e:	4613      	mov	r3, r2
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	4413      	add	r3, r2
 80067a4:	009b      	lsls	r3, r3, #2
 80067a6:	440b      	add	r3, r1
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d0e3      	beq.n	8006776 <vTaskSwitchContext+0x5a>
 80067ae:	68fa      	ldr	r2, [r7, #12]
 80067b0:	4613      	mov	r3, r2
 80067b2:	009b      	lsls	r3, r3, #2
 80067b4:	4413      	add	r3, r2
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	4a17      	ldr	r2, [pc, #92]	@ (8006818 <vTaskSwitchContext+0xfc>)
 80067ba:	4413      	add	r3, r2
 80067bc:	60bb      	str	r3, [r7, #8]
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	685a      	ldr	r2, [r3, #4]
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	605a      	str	r2, [r3, #4]
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	685a      	ldr	r2, [r3, #4]
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	3308      	adds	r3, #8
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d104      	bne.n	80067de <vTaskSwitchContext+0xc2>
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	685a      	ldr	r2, [r3, #4]
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	605a      	str	r2, [r3, #4]
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	4a0a      	ldr	r2, [pc, #40]	@ (8006810 <vTaskSwitchContext+0xf4>)
 80067e6:	6013      	str	r3, [r2, #0]
 80067e8:	4a0a      	ldr	r2, [pc, #40]	@ (8006814 <vTaskSwitchContext+0xf8>)
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80067ee:	4b08      	ldr	r3, [pc, #32]	@ (8006810 <vTaskSwitchContext+0xf4>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	3384      	adds	r3, #132	@ 0x84
 80067f4:	4a09      	ldr	r2, [pc, #36]	@ (800681c <vTaskSwitchContext+0x100>)
 80067f6:	6013      	str	r3, [r2, #0]
}
 80067f8:	bf00      	nop
 80067fa:	3710      	adds	r7, #16
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}
 8006800:	20000f90 	.word	0x20000f90
 8006804:	20000f7c 	.word	0x20000f7c
 8006808:	20000f98 	.word	0x20000f98
 800680c:	20000f94 	.word	0x20000f94
 8006810:	20000a94 	.word	0x20000a94
 8006814:	20000f70 	.word	0x20000f70
 8006818:	20000a98 	.word	0x20000a98
 800681c:	20000010 	.word	0x20000010

08006820 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b084      	sub	sp, #16
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d10b      	bne.n	8006848 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006834:	f383 8811 	msr	BASEPRI, r3
 8006838:	f3bf 8f6f 	isb	sy
 800683c:	f3bf 8f4f 	dsb	sy
 8006840:	60fb      	str	r3, [r7, #12]
}
 8006842:	bf00      	nop
 8006844:	bf00      	nop
 8006846:	e7fd      	b.n	8006844 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006848:	4b07      	ldr	r3, [pc, #28]	@ (8006868 <vTaskPlaceOnEventList+0x48>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	3318      	adds	r3, #24
 800684e:	4619      	mov	r1, r3
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f7fe fabe 	bl	8004dd2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006856:	2101      	movs	r1, #1
 8006858:	6838      	ldr	r0, [r7, #0]
 800685a:	f000 fe1f 	bl	800749c <prvAddCurrentTaskToDelayedList>
}
 800685e:	bf00      	nop
 8006860:	3710      	adds	r7, #16
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
 8006866:	bf00      	nop
 8006868:	20000a94 	.word	0x20000a94

0800686c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800686c:	b580      	push	{r7, lr}
 800686e:	b086      	sub	sp, #24
 8006870:	af00      	add	r7, sp, #0
 8006872:	60f8      	str	r0, [r7, #12]
 8006874:	60b9      	str	r1, [r7, #8]
 8006876:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d10b      	bne.n	8006896 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800687e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006882:	f383 8811 	msr	BASEPRI, r3
 8006886:	f3bf 8f6f 	isb	sy
 800688a:	f3bf 8f4f 	dsb	sy
 800688e:	617b      	str	r3, [r7, #20]
}
 8006890:	bf00      	nop
 8006892:	bf00      	nop
 8006894:	e7fd      	b.n	8006892 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006896:	4b0a      	ldr	r3, [pc, #40]	@ (80068c0 <vTaskPlaceOnEventListRestricted+0x54>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	3318      	adds	r3, #24
 800689c:	4619      	mov	r1, r3
 800689e:	68f8      	ldr	r0, [r7, #12]
 80068a0:	f7fe fa73 	bl	8004d8a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d002      	beq.n	80068b0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80068aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80068ae:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80068b0:	6879      	ldr	r1, [r7, #4]
 80068b2:	68b8      	ldr	r0, [r7, #8]
 80068b4:	f000 fdf2 	bl	800749c <prvAddCurrentTaskToDelayedList>
	}
 80068b8:	bf00      	nop
 80068ba:	3718      	adds	r7, #24
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}
 80068c0:	20000a94 	.word	0x20000a94

080068c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b086      	sub	sp, #24
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	68db      	ldr	r3, [r3, #12]
 80068d2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d10b      	bne.n	80068f2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80068da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068de:	f383 8811 	msr	BASEPRI, r3
 80068e2:	f3bf 8f6f 	isb	sy
 80068e6:	f3bf 8f4f 	dsb	sy
 80068ea:	60fb      	str	r3, [r7, #12]
}
 80068ec:	bf00      	nop
 80068ee:	bf00      	nop
 80068f0:	e7fd      	b.n	80068ee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	3318      	adds	r3, #24
 80068f6:	4618      	mov	r0, r3
 80068f8:	f7fe faa4 	bl	8004e44 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068fc:	4b1d      	ldr	r3, [pc, #116]	@ (8006974 <xTaskRemoveFromEventList+0xb0>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d11d      	bne.n	8006940 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	3304      	adds	r3, #4
 8006908:	4618      	mov	r0, r3
 800690a:	f7fe fa9b 	bl	8004e44 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006912:	4b19      	ldr	r3, [pc, #100]	@ (8006978 <xTaskRemoveFromEventList+0xb4>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	429a      	cmp	r2, r3
 8006918:	d903      	bls.n	8006922 <xTaskRemoveFromEventList+0x5e>
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800691e:	4a16      	ldr	r2, [pc, #88]	@ (8006978 <xTaskRemoveFromEventList+0xb4>)
 8006920:	6013      	str	r3, [r2, #0]
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006926:	4613      	mov	r3, r2
 8006928:	009b      	lsls	r3, r3, #2
 800692a:	4413      	add	r3, r2
 800692c:	009b      	lsls	r3, r3, #2
 800692e:	4a13      	ldr	r2, [pc, #76]	@ (800697c <xTaskRemoveFromEventList+0xb8>)
 8006930:	441a      	add	r2, r3
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	3304      	adds	r3, #4
 8006936:	4619      	mov	r1, r3
 8006938:	4610      	mov	r0, r2
 800693a:	f7fe fa26 	bl	8004d8a <vListInsertEnd>
 800693e:	e005      	b.n	800694c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	3318      	adds	r3, #24
 8006944:	4619      	mov	r1, r3
 8006946:	480e      	ldr	r0, [pc, #56]	@ (8006980 <xTaskRemoveFromEventList+0xbc>)
 8006948:	f7fe fa1f 	bl	8004d8a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006950:	4b0c      	ldr	r3, [pc, #48]	@ (8006984 <xTaskRemoveFromEventList+0xc0>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006956:	429a      	cmp	r2, r3
 8006958:	d905      	bls.n	8006966 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800695a:	2301      	movs	r3, #1
 800695c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800695e:	4b0a      	ldr	r3, [pc, #40]	@ (8006988 <xTaskRemoveFromEventList+0xc4>)
 8006960:	2201      	movs	r2, #1
 8006962:	601a      	str	r2, [r3, #0]
 8006964:	e001      	b.n	800696a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006966:	2300      	movs	r3, #0
 8006968:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800696a:	697b      	ldr	r3, [r7, #20]
}
 800696c:	4618      	mov	r0, r3
 800696e:	3718      	adds	r7, #24
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}
 8006974:	20000f90 	.word	0x20000f90
 8006978:	20000f70 	.word	0x20000f70
 800697c:	20000a98 	.word	0x20000a98
 8006980:	20000f28 	.word	0x20000f28
 8006984:	20000a94 	.word	0x20000a94
 8006988:	20000f7c 	.word	0x20000f7c

0800698c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800698c:	b480      	push	{r7}
 800698e:	b083      	sub	sp, #12
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006994:	4b06      	ldr	r3, [pc, #24]	@ (80069b0 <vTaskInternalSetTimeOutState+0x24>)
 8006996:	681a      	ldr	r2, [r3, #0]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800699c:	4b05      	ldr	r3, [pc, #20]	@ (80069b4 <vTaskInternalSetTimeOutState+0x28>)
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	605a      	str	r2, [r3, #4]
}
 80069a4:	bf00      	nop
 80069a6:	370c      	adds	r7, #12
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr
 80069b0:	20000f80 	.word	0x20000f80
 80069b4:	20000f6c 	.word	0x20000f6c

080069b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b088      	sub	sp, #32
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d10b      	bne.n	80069e0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80069c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069cc:	f383 8811 	msr	BASEPRI, r3
 80069d0:	f3bf 8f6f 	isb	sy
 80069d4:	f3bf 8f4f 	dsb	sy
 80069d8:	613b      	str	r3, [r7, #16]
}
 80069da:	bf00      	nop
 80069dc:	bf00      	nop
 80069de:	e7fd      	b.n	80069dc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d10b      	bne.n	80069fe <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80069e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069ea:	f383 8811 	msr	BASEPRI, r3
 80069ee:	f3bf 8f6f 	isb	sy
 80069f2:	f3bf 8f4f 	dsb	sy
 80069f6:	60fb      	str	r3, [r7, #12]
}
 80069f8:	bf00      	nop
 80069fa:	bf00      	nop
 80069fc:	e7fd      	b.n	80069fa <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80069fe:	f001 faab 	bl	8007f58 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006a02:	4b1d      	ldr	r3, [pc, #116]	@ (8006a78 <xTaskCheckForTimeOut+0xc0>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	69ba      	ldr	r2, [r7, #24]
 8006a0e:	1ad3      	subs	r3, r2, r3
 8006a10:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006a1a:	d102      	bne.n	8006a22 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	61fb      	str	r3, [r7, #28]
 8006a20:	e023      	b.n	8006a6a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681a      	ldr	r2, [r3, #0]
 8006a26:	4b15      	ldr	r3, [pc, #84]	@ (8006a7c <xTaskCheckForTimeOut+0xc4>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	d007      	beq.n	8006a3e <xTaskCheckForTimeOut+0x86>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	69ba      	ldr	r2, [r7, #24]
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d302      	bcc.n	8006a3e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	61fb      	str	r3, [r7, #28]
 8006a3c:	e015      	b.n	8006a6a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	697a      	ldr	r2, [r7, #20]
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d20b      	bcs.n	8006a60 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	681a      	ldr	r2, [r3, #0]
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	1ad2      	subs	r2, r2, r3
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f7ff ff99 	bl	800698c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	61fb      	str	r3, [r7, #28]
 8006a5e:	e004      	b.n	8006a6a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	2200      	movs	r2, #0
 8006a64:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006a66:	2301      	movs	r3, #1
 8006a68:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006a6a:	f001 faa7 	bl	8007fbc <vPortExitCritical>

	return xReturn;
 8006a6e:	69fb      	ldr	r3, [r7, #28]
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3720      	adds	r7, #32
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}
 8006a78:	20000f6c 	.word	0x20000f6c
 8006a7c:	20000f80 	.word	0x20000f80

08006a80 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006a80:	b480      	push	{r7}
 8006a82:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006a84:	4b03      	ldr	r3, [pc, #12]	@ (8006a94 <vTaskMissedYield+0x14>)
 8006a86:	2201      	movs	r2, #1
 8006a88:	601a      	str	r2, [r3, #0]
}
 8006a8a:	bf00      	nop
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr
 8006a94:	20000f7c 	.word	0x20000f7c

08006a98 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b082      	sub	sp, #8
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006aa0:	f000 f896 	bl	8006bd0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006aa4:	4b06      	ldr	r3, [pc, #24]	@ (8006ac0 <prvIdleTask+0x28>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d9f9      	bls.n	8006aa0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006aac:	4b05      	ldr	r3, [pc, #20]	@ (8006ac4 <prvIdleTask+0x2c>)
 8006aae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ab2:	601a      	str	r2, [r3, #0]
 8006ab4:	f3bf 8f4f 	dsb	sy
 8006ab8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006abc:	e7f0      	b.n	8006aa0 <prvIdleTask+0x8>
 8006abe:	bf00      	nop
 8006ac0:	20000a98 	.word	0x20000a98
 8006ac4:	e000ed04 	.word	0xe000ed04

08006ac8 <vTaskSetThreadLocalStoragePointer>:
/*-----------------------------------------------------------*/

#if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )

	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue )
	{
 8006ac8:	b480      	push	{r7}
 8006aca:	b087      	sub	sp, #28
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	60f8      	str	r0, [r7, #12]
 8006ad0:	60b9      	str	r1, [r7, #8]
 8006ad2:	607a      	str	r2, [r7, #4]
	TCB_t *pxTCB;

		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	2b09      	cmp	r3, #9
 8006ad8:	dc0d      	bgt.n	8006af6 <vTaskSetThreadLocalStoragePointer+0x2e>
		{
			pxTCB = prvGetTCBFromHandle( xTaskToSet );
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d102      	bne.n	8006ae6 <vTaskSetThreadLocalStoragePointer+0x1e>
 8006ae0:	4b08      	ldr	r3, [pc, #32]	@ (8006b04 <vTaskSetThreadLocalStoragePointer+0x3c>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	e000      	b.n	8006ae8 <vTaskSetThreadLocalStoragePointer+0x20>
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	617b      	str	r3, [r7, #20]
			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	68ba      	ldr	r2, [r7, #8]
 8006aee:	3216      	adds	r2, #22
 8006af0:	6879      	ldr	r1, [r7, #4]
 8006af2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		}
	}
 8006af6:	bf00      	nop
 8006af8:	371c      	adds	r7, #28
 8006afa:	46bd      	mov	sp, r7
 8006afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b00:	4770      	bx	lr
 8006b02:	bf00      	nop
 8006b04:	20000a94 	.word	0x20000a94

08006b08 <pvTaskGetThreadLocalStoragePointer>:
/*-----------------------------------------------------------*/

#if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )

	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
	{
 8006b08:	b480      	push	{r7}
 8006b0a:	b085      	sub	sp, #20
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	6039      	str	r1, [r7, #0]
	void *pvReturn = NULL;
 8006b12:	2300      	movs	r3, #0
 8006b14:	60fb      	str	r3, [r7, #12]
	TCB_t *pxTCB;

		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	2b09      	cmp	r3, #9
 8006b1a:	dc0e      	bgt.n	8006b3a <pvTaskGetThreadLocalStoragePointer+0x32>
		{
			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d102      	bne.n	8006b28 <pvTaskGetThreadLocalStoragePointer+0x20>
 8006b22:	4b0a      	ldr	r3, [pc, #40]	@ (8006b4c <pvTaskGetThreadLocalStoragePointer+0x44>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	e000      	b.n	8006b2a <pvTaskGetThreadLocalStoragePointer+0x22>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	60bb      	str	r3, [r7, #8]
			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	683a      	ldr	r2, [r7, #0]
 8006b30:	3216      	adds	r2, #22
 8006b32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b36:	60fb      	str	r3, [r7, #12]
 8006b38:	e001      	b.n	8006b3e <pvTaskGetThreadLocalStoragePointer+0x36>
		}
		else
		{
			pvReturn = NULL;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	60fb      	str	r3, [r7, #12]
		}

		return pvReturn;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
	}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3714      	adds	r7, #20
 8006b44:	46bd      	mov	sp, r7
 8006b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4a:	4770      	bx	lr
 8006b4c:	20000a94 	.word	0x20000a94

08006b50 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b082      	sub	sp, #8
 8006b54:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006b56:	2300      	movs	r3, #0
 8006b58:	607b      	str	r3, [r7, #4]
 8006b5a:	e00c      	b.n	8006b76 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006b5c:	687a      	ldr	r2, [r7, #4]
 8006b5e:	4613      	mov	r3, r2
 8006b60:	009b      	lsls	r3, r3, #2
 8006b62:	4413      	add	r3, r2
 8006b64:	009b      	lsls	r3, r3, #2
 8006b66:	4a12      	ldr	r2, [pc, #72]	@ (8006bb0 <prvInitialiseTaskLists+0x60>)
 8006b68:	4413      	add	r3, r2
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f7fe f8e0 	bl	8004d30 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	3301      	adds	r3, #1
 8006b74:	607b      	str	r3, [r7, #4]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2b37      	cmp	r3, #55	@ 0x37
 8006b7a:	d9ef      	bls.n	8006b5c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006b7c:	480d      	ldr	r0, [pc, #52]	@ (8006bb4 <prvInitialiseTaskLists+0x64>)
 8006b7e:	f7fe f8d7 	bl	8004d30 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006b82:	480d      	ldr	r0, [pc, #52]	@ (8006bb8 <prvInitialiseTaskLists+0x68>)
 8006b84:	f7fe f8d4 	bl	8004d30 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006b88:	480c      	ldr	r0, [pc, #48]	@ (8006bbc <prvInitialiseTaskLists+0x6c>)
 8006b8a:	f7fe f8d1 	bl	8004d30 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006b8e:	480c      	ldr	r0, [pc, #48]	@ (8006bc0 <prvInitialiseTaskLists+0x70>)
 8006b90:	f7fe f8ce 	bl	8004d30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006b94:	480b      	ldr	r0, [pc, #44]	@ (8006bc4 <prvInitialiseTaskLists+0x74>)
 8006b96:	f7fe f8cb 	bl	8004d30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006b9a:	4b0b      	ldr	r3, [pc, #44]	@ (8006bc8 <prvInitialiseTaskLists+0x78>)
 8006b9c:	4a05      	ldr	r2, [pc, #20]	@ (8006bb4 <prvInitialiseTaskLists+0x64>)
 8006b9e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006ba0:	4b0a      	ldr	r3, [pc, #40]	@ (8006bcc <prvInitialiseTaskLists+0x7c>)
 8006ba2:	4a05      	ldr	r2, [pc, #20]	@ (8006bb8 <prvInitialiseTaskLists+0x68>)
 8006ba4:	601a      	str	r2, [r3, #0]
}
 8006ba6:	bf00      	nop
 8006ba8:	3708      	adds	r7, #8
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}
 8006bae:	bf00      	nop
 8006bb0:	20000a98 	.word	0x20000a98
 8006bb4:	20000ef8 	.word	0x20000ef8
 8006bb8:	20000f0c 	.word	0x20000f0c
 8006bbc:	20000f28 	.word	0x20000f28
 8006bc0:	20000f3c 	.word	0x20000f3c
 8006bc4:	20000f54 	.word	0x20000f54
 8006bc8:	20000f20 	.word	0x20000f20
 8006bcc:	20000f24 	.word	0x20000f24

08006bd0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b082      	sub	sp, #8
 8006bd4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006bd6:	e019      	b.n	8006c0c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006bd8:	f001 f9be 	bl	8007f58 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bdc:	4b10      	ldr	r3, [pc, #64]	@ (8006c20 <prvCheckTasksWaitingTermination+0x50>)
 8006bde:	68db      	ldr	r3, [r3, #12]
 8006be0:	68db      	ldr	r3, [r3, #12]
 8006be2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	3304      	adds	r3, #4
 8006be8:	4618      	mov	r0, r3
 8006bea:	f7fe f92b 	bl	8004e44 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006bee:	4b0d      	ldr	r3, [pc, #52]	@ (8006c24 <prvCheckTasksWaitingTermination+0x54>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	3b01      	subs	r3, #1
 8006bf4:	4a0b      	ldr	r2, [pc, #44]	@ (8006c24 <prvCheckTasksWaitingTermination+0x54>)
 8006bf6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8006c28 <prvCheckTasksWaitingTermination+0x58>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	3b01      	subs	r3, #1
 8006bfe:	4a0a      	ldr	r2, [pc, #40]	@ (8006c28 <prvCheckTasksWaitingTermination+0x58>)
 8006c00:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006c02:	f001 f9db 	bl	8007fbc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f000 f8e6 	bl	8006dd8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006c0c:	4b06      	ldr	r3, [pc, #24]	@ (8006c28 <prvCheckTasksWaitingTermination+0x58>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d1e1      	bne.n	8006bd8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006c14:	bf00      	nop
 8006c16:	bf00      	nop
 8006c18:	3708      	adds	r7, #8
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
 8006c1e:	bf00      	nop
 8006c20:	20000f3c 	.word	0x20000f3c
 8006c24:	20000f68 	.word	0x20000f68
 8006c28:	20000f50 	.word	0x20000f50

08006c2c <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b086      	sub	sp, #24
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	60f8      	str	r0, [r7, #12]
 8006c34:	60b9      	str	r1, [r7, #8]
 8006c36:	607a      	str	r2, [r7, #4]
 8006c38:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d102      	bne.n	8006c46 <vTaskGetInfo+0x1a>
 8006c40:	4b2d      	ldr	r3, [pc, #180]	@ (8006cf8 <vTaskGetInfo+0xcc>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	e000      	b.n	8006c48 <vTaskGetInfo+0x1c>
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	697a      	ldr	r2, [r7, #20]
 8006c4e:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	615a      	str	r2, [r3, #20]
		}
		#endif

		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 8006c84:	78fb      	ldrb	r3, [r7, #3]
 8006c86:	2b05      	cmp	r3, #5
 8006c88:	d01a      	beq.n	8006cc0 <vTaskGetInfo+0x94>
		{
			if( pxTCB == pxCurrentTCB )
 8006c8a:	4b1b      	ldr	r3, [pc, #108]	@ (8006cf8 <vTaskGetInfo+0xcc>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	697a      	ldr	r2, [r7, #20]
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d103      	bne.n	8006c9c <vTaskGetInfo+0x70>
			{
				pxTaskStatus->eCurrentState = eRunning;
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	2200      	movs	r2, #0
 8006c98:	731a      	strb	r2, [r3, #12]
 8006c9a:	e018      	b.n	8006cce <vTaskGetInfo+0xa2>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	78fa      	ldrb	r2, [r7, #3]
 8006ca0:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 8006ca2:	78fb      	ldrb	r3, [r7, #3]
 8006ca4:	2b03      	cmp	r3, #3
 8006ca6:	d112      	bne.n	8006cce <vTaskGetInfo+0xa2>
					{
						vTaskSuspendAll();
 8006ca8:	f7ff fb32 	bl	8006310 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d002      	beq.n	8006cba <vTaskGetInfo+0x8e>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	2202      	movs	r2, #2
 8006cb8:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 8006cba:	f7ff fb37 	bl	800632c <xTaskResumeAll>
 8006cbe:	e006      	b.n	8006cce <vTaskGetInfo+0xa2>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 8006cc0:	6978      	ldr	r0, [r7, #20]
 8006cc2:	f7ff f9ad 	bl	8006020 <eTaskGetState>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	461a      	mov	r2, r3
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d009      	beq.n	8006ce8 <vTaskGetInfo+0xbc>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f000 f861 	bl	8006da0 <prvTaskCheckFreeStackSpace>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 8006ce6:	e002      	b.n	8006cee <vTaskGetInfo+0xc2>
			pxTaskStatus->usStackHighWaterMark = 0;
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	2200      	movs	r2, #0
 8006cec:	841a      	strh	r2, [r3, #32]
	}
 8006cee:	bf00      	nop
 8006cf0:	3718      	adds	r7, #24
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}
 8006cf6:	bf00      	nop
 8006cf8:	20000a94 	.word	0x20000a94

08006cfc <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b08a      	sub	sp, #40	@ 0x28
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	60f8      	str	r0, [r7, #12]
 8006d04:	60b9      	str	r1, [r7, #8]
 8006d06:	4613      	mov	r3, r2
 8006d08:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	627b      	str	r3, [r7, #36]	@ 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d03f      	beq.n	8006d96 <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	623b      	str	r3, [r7, #32]
 8006d1a:	6a3b      	ldr	r3, [r7, #32]
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	685a      	ldr	r2, [r3, #4]
 8006d20:	6a3b      	ldr	r3, [r7, #32]
 8006d22:	605a      	str	r2, [r3, #4]
 8006d24:	6a3b      	ldr	r3, [r7, #32]
 8006d26:	685a      	ldr	r2, [r3, #4]
 8006d28:	6a3b      	ldr	r3, [r7, #32]
 8006d2a:	3308      	adds	r3, #8
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	d104      	bne.n	8006d3a <prvListTasksWithinSingleList+0x3e>
 8006d30:	6a3b      	ldr	r3, [r7, #32]
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	685a      	ldr	r2, [r3, #4]
 8006d36:	6a3b      	ldr	r3, [r7, #32]
 8006d38:	605a      	str	r2, [r3, #4]
 8006d3a:	6a3b      	ldr	r3, [r7, #32]
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	68db      	ldr	r3, [r3, #12]
 8006d40:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	61bb      	str	r3, [r7, #24]
 8006d46:	69bb      	ldr	r3, [r7, #24]
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	685a      	ldr	r2, [r3, #4]
 8006d4c:	69bb      	ldr	r3, [r7, #24]
 8006d4e:	605a      	str	r2, [r3, #4]
 8006d50:	69bb      	ldr	r3, [r7, #24]
 8006d52:	685a      	ldr	r2, [r3, #4]
 8006d54:	69bb      	ldr	r3, [r7, #24]
 8006d56:	3308      	adds	r3, #8
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d104      	bne.n	8006d66 <prvListTasksWithinSingleList+0x6a>
 8006d5c:	69bb      	ldr	r3, [r7, #24]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	685a      	ldr	r2, [r3, #4]
 8006d62:	69bb      	ldr	r3, [r7, #24]
 8006d64:	605a      	str	r2, [r3, #4]
 8006d66:	69bb      	ldr	r3, [r7, #24]
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	68db      	ldr	r3, [r3, #12]
 8006d6c:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 8006d6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d70:	4613      	mov	r3, r2
 8006d72:	00db      	lsls	r3, r3, #3
 8006d74:	4413      	add	r3, r2
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	461a      	mov	r2, r3
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	1899      	adds	r1, r3, r2
 8006d7e:	79fb      	ldrb	r3, [r7, #7]
 8006d80:	2201      	movs	r2, #1
 8006d82:	6978      	ldr	r0, [r7, #20]
 8006d84:	f7ff ff52 	bl	8006c2c <vTaskGetInfo>
				uxTask++;
 8006d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d8a:	3301      	adds	r3, #1
 8006d8c:	627b      	str	r3, [r7, #36]	@ 0x24
			} while( pxNextTCB != pxFirstTCB );
 8006d8e:	697a      	ldr	r2, [r7, #20]
 8006d90:	69fb      	ldr	r3, [r7, #28]
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d1d5      	bne.n	8006d42 <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 8006d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3728      	adds	r7, #40	@ 0x28
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}

08006da0 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8006da0:	b480      	push	{r7}
 8006da2:	b085      	sub	sp, #20
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8006da8:	2300      	movs	r3, #0
 8006daa:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8006dac:	e005      	b.n	8006dba <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	3301      	adds	r3, #1
 8006db2:	607b      	str	r3, [r7, #4]
			ulCount++;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	3301      	adds	r3, #1
 8006db8:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	781b      	ldrb	r3, [r3, #0]
 8006dbe:	2ba5      	cmp	r3, #165	@ 0xa5
 8006dc0:	d0f5      	beq.n	8006dae <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	089b      	lsrs	r3, r3, #2
 8006dc6:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	b29b      	uxth	r3, r3
	}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3714      	adds	r7, #20
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr

08006dd8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b084      	sub	sp, #16
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	3384      	adds	r3, #132	@ 0x84
 8006de4:	4618      	mov	r0, r3
 8006de6:	f001 fdb1 	bl	800894c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d108      	bne.n	8006e06 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f001 fa9d 	bl	8008338 <vPortFree>
				vPortFree( pxTCB );
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f001 fa9a 	bl	8008338 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006e04:	e019      	b.n	8006e3a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d103      	bne.n	8006e18 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f001 fa91 	bl	8008338 <vPortFree>
	}
 8006e16:	e010      	b.n	8006e3a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 8006e1e:	2b02      	cmp	r3, #2
 8006e20:	d00b      	beq.n	8006e3a <prvDeleteTCB+0x62>
	__asm volatile
 8006e22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e26:	f383 8811 	msr	BASEPRI, r3
 8006e2a:	f3bf 8f6f 	isb	sy
 8006e2e:	f3bf 8f4f 	dsb	sy
 8006e32:	60fb      	str	r3, [r7, #12]
}
 8006e34:	bf00      	nop
 8006e36:	bf00      	nop
 8006e38:	e7fd      	b.n	8006e36 <prvDeleteTCB+0x5e>
	}
 8006e3a:	bf00      	nop
 8006e3c:	3710      	adds	r7, #16
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}
	...

08006e44 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006e44:	b480      	push	{r7}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e4a:	4b0c      	ldr	r3, [pc, #48]	@ (8006e7c <prvResetNextTaskUnblockTime+0x38>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d104      	bne.n	8006e5e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006e54:	4b0a      	ldr	r3, [pc, #40]	@ (8006e80 <prvResetNextTaskUnblockTime+0x3c>)
 8006e56:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006e5a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006e5c:	e008      	b.n	8006e70 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e5e:	4b07      	ldr	r3, [pc, #28]	@ (8006e7c <prvResetNextTaskUnblockTime+0x38>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	68db      	ldr	r3, [r3, #12]
 8006e64:	68db      	ldr	r3, [r3, #12]
 8006e66:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	4a04      	ldr	r2, [pc, #16]	@ (8006e80 <prvResetNextTaskUnblockTime+0x3c>)
 8006e6e:	6013      	str	r3, [r2, #0]
}
 8006e70:	bf00      	nop
 8006e72:	370c      	adds	r7, #12
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr
 8006e7c:	20000f20 	.word	0x20000f20
 8006e80:	20000f88 	.word	0x20000f88

08006e84 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8006e84:	b480      	push	{r7}
 8006e86:	b083      	sub	sp, #12
 8006e88:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8006e8a:	4b05      	ldr	r3, [pc, #20]	@ (8006ea0 <xTaskGetCurrentTaskHandle+0x1c>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8006e90:	687b      	ldr	r3, [r7, #4]
	}
 8006e92:	4618      	mov	r0, r3
 8006e94:	370c      	adds	r7, #12
 8006e96:	46bd      	mov	sp, r7
 8006e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9c:	4770      	bx	lr
 8006e9e:	bf00      	nop
 8006ea0:	20000a94 	.word	0x20000a94

08006ea4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b083      	sub	sp, #12
 8006ea8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006eaa:	4b0b      	ldr	r3, [pc, #44]	@ (8006ed8 <xTaskGetSchedulerState+0x34>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d102      	bne.n	8006eb8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	607b      	str	r3, [r7, #4]
 8006eb6:	e008      	b.n	8006eca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006eb8:	4b08      	ldr	r3, [pc, #32]	@ (8006edc <xTaskGetSchedulerState+0x38>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d102      	bne.n	8006ec6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006ec0:	2302      	movs	r3, #2
 8006ec2:	607b      	str	r3, [r7, #4]
 8006ec4:	e001      	b.n	8006eca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006eca:	687b      	ldr	r3, [r7, #4]
	}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	370c      	adds	r7, #12
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr
 8006ed8:	20000f74 	.word	0x20000f74
 8006edc:	20000f90 	.word	0x20000f90

08006ee0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b084      	sub	sp, #16
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006eec:	2300      	movs	r3, #0
 8006eee:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d051      	beq.n	8006f9a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006efa:	4b2a      	ldr	r3, [pc, #168]	@ (8006fa4 <xTaskPriorityInherit+0xc4>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f00:	429a      	cmp	r2, r3
 8006f02:	d241      	bcs.n	8006f88 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	699b      	ldr	r3, [r3, #24]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	db06      	blt.n	8006f1a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f0c:	4b25      	ldr	r3, [pc, #148]	@ (8006fa4 <xTaskPriorityInherit+0xc4>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f12:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	6959      	ldr	r1, [r3, #20]
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f22:	4613      	mov	r3, r2
 8006f24:	009b      	lsls	r3, r3, #2
 8006f26:	4413      	add	r3, r2
 8006f28:	009b      	lsls	r3, r3, #2
 8006f2a:	4a1f      	ldr	r2, [pc, #124]	@ (8006fa8 <xTaskPriorityInherit+0xc8>)
 8006f2c:	4413      	add	r3, r2
 8006f2e:	4299      	cmp	r1, r3
 8006f30:	d122      	bne.n	8006f78 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	3304      	adds	r3, #4
 8006f36:	4618      	mov	r0, r3
 8006f38:	f7fd ff84 	bl	8004e44 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006f3c:	4b19      	ldr	r3, [pc, #100]	@ (8006fa4 <xTaskPriorityInherit+0xc4>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f4a:	4b18      	ldr	r3, [pc, #96]	@ (8006fac <xTaskPriorityInherit+0xcc>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	d903      	bls.n	8006f5a <xTaskPriorityInherit+0x7a>
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f56:	4a15      	ldr	r2, [pc, #84]	@ (8006fac <xTaskPriorityInherit+0xcc>)
 8006f58:	6013      	str	r3, [r2, #0]
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f5e:	4613      	mov	r3, r2
 8006f60:	009b      	lsls	r3, r3, #2
 8006f62:	4413      	add	r3, r2
 8006f64:	009b      	lsls	r3, r3, #2
 8006f66:	4a10      	ldr	r2, [pc, #64]	@ (8006fa8 <xTaskPriorityInherit+0xc8>)
 8006f68:	441a      	add	r2, r3
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	3304      	adds	r3, #4
 8006f6e:	4619      	mov	r1, r3
 8006f70:	4610      	mov	r0, r2
 8006f72:	f7fd ff0a 	bl	8004d8a <vListInsertEnd>
 8006f76:	e004      	b.n	8006f82 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006f78:	4b0a      	ldr	r3, [pc, #40]	@ (8006fa4 <xTaskPriorityInherit+0xc4>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006f82:	2301      	movs	r3, #1
 8006f84:	60fb      	str	r3, [r7, #12]
 8006f86:	e008      	b.n	8006f9a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006f8c:	4b05      	ldr	r3, [pc, #20]	@ (8006fa4 <xTaskPriorityInherit+0xc4>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f92:	429a      	cmp	r2, r3
 8006f94:	d201      	bcs.n	8006f9a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006f96:	2301      	movs	r3, #1
 8006f98:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
	}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3710      	adds	r7, #16
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}
 8006fa4:	20000a94 	.word	0x20000a94
 8006fa8:	20000a98 	.word	0x20000a98
 8006fac:	20000f70 	.word	0x20000f70

08006fb0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b086      	sub	sp, #24
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d058      	beq.n	8007078 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006fc6:	4b2f      	ldr	r3, [pc, #188]	@ (8007084 <xTaskPriorityDisinherit+0xd4>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	693a      	ldr	r2, [r7, #16]
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d00b      	beq.n	8006fe8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006fd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fd4:	f383 8811 	msr	BASEPRI, r3
 8006fd8:	f3bf 8f6f 	isb	sy
 8006fdc:	f3bf 8f4f 	dsb	sy
 8006fe0:	60fb      	str	r3, [r7, #12]
}
 8006fe2:	bf00      	nop
 8006fe4:	bf00      	nop
 8006fe6:	e7fd      	b.n	8006fe4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d10b      	bne.n	8007008 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006ff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ff4:	f383 8811 	msr	BASEPRI, r3
 8006ff8:	f3bf 8f6f 	isb	sy
 8006ffc:	f3bf 8f4f 	dsb	sy
 8007000:	60bb      	str	r3, [r7, #8]
}
 8007002:	bf00      	nop
 8007004:	bf00      	nop
 8007006:	e7fd      	b.n	8007004 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800700c:	1e5a      	subs	r2, r3, #1
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	655a      	str	r2, [r3, #84]	@ 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800701a:	429a      	cmp	r2, r3
 800701c:	d02c      	beq.n	8007078 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007022:	2b00      	cmp	r3, #0
 8007024:	d128      	bne.n	8007078 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	3304      	adds	r3, #4
 800702a:	4618      	mov	r0, r3
 800702c:	f7fd ff0a 	bl	8004e44 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800703c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007048:	4b0f      	ldr	r3, [pc, #60]	@ (8007088 <xTaskPriorityDisinherit+0xd8>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	429a      	cmp	r2, r3
 800704e:	d903      	bls.n	8007058 <xTaskPriorityDisinherit+0xa8>
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007054:	4a0c      	ldr	r2, [pc, #48]	@ (8007088 <xTaskPriorityDisinherit+0xd8>)
 8007056:	6013      	str	r3, [r2, #0]
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800705c:	4613      	mov	r3, r2
 800705e:	009b      	lsls	r3, r3, #2
 8007060:	4413      	add	r3, r2
 8007062:	009b      	lsls	r3, r3, #2
 8007064:	4a09      	ldr	r2, [pc, #36]	@ (800708c <xTaskPriorityDisinherit+0xdc>)
 8007066:	441a      	add	r2, r3
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	3304      	adds	r3, #4
 800706c:	4619      	mov	r1, r3
 800706e:	4610      	mov	r0, r2
 8007070:	f7fd fe8b 	bl	8004d8a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007074:	2301      	movs	r3, #1
 8007076:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007078:	697b      	ldr	r3, [r7, #20]
	}
 800707a:	4618      	mov	r0, r3
 800707c:	3718      	adds	r7, #24
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}
 8007082:	bf00      	nop
 8007084:	20000a94 	.word	0x20000a94
 8007088:	20000f70 	.word	0x20000f70
 800708c:	20000a98 	.word	0x20000a98

08007090 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007090:	b580      	push	{r7, lr}
 8007092:	b088      	sub	sp, #32
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800709e:	2301      	movs	r3, #1
 80070a0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d06c      	beq.n	8007182 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80070a8:	69bb      	ldr	r3, [r7, #24]
 80070aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d10b      	bne.n	80070c8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80070b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070b4:	f383 8811 	msr	BASEPRI, r3
 80070b8:	f3bf 8f6f 	isb	sy
 80070bc:	f3bf 8f4f 	dsb	sy
 80070c0:	60fb      	str	r3, [r7, #12]
}
 80070c2:	bf00      	nop
 80070c4:	bf00      	nop
 80070c6:	e7fd      	b.n	80070c4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80070c8:	69bb      	ldr	r3, [r7, #24]
 80070ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070cc:	683a      	ldr	r2, [r7, #0]
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d902      	bls.n	80070d8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	61fb      	str	r3, [r7, #28]
 80070d6:	e002      	b.n	80070de <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80070d8:	69bb      	ldr	r3, [r7, #24]
 80070da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070dc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80070de:	69bb      	ldr	r3, [r7, #24]
 80070e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070e2:	69fa      	ldr	r2, [r7, #28]
 80070e4:	429a      	cmp	r2, r3
 80070e6:	d04c      	beq.n	8007182 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80070e8:	69bb      	ldr	r3, [r7, #24]
 80070ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070ec:	697a      	ldr	r2, [r7, #20]
 80070ee:	429a      	cmp	r2, r3
 80070f0:	d147      	bne.n	8007182 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80070f2:	4b26      	ldr	r3, [pc, #152]	@ (800718c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	69ba      	ldr	r2, [r7, #24]
 80070f8:	429a      	cmp	r2, r3
 80070fa:	d10b      	bne.n	8007114 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80070fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007100:	f383 8811 	msr	BASEPRI, r3
 8007104:	f3bf 8f6f 	isb	sy
 8007108:	f3bf 8f4f 	dsb	sy
 800710c:	60bb      	str	r3, [r7, #8]
}
 800710e:	bf00      	nop
 8007110:	bf00      	nop
 8007112:	e7fd      	b.n	8007110 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007114:	69bb      	ldr	r3, [r7, #24]
 8007116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007118:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800711a:	69bb      	ldr	r3, [r7, #24]
 800711c:	69fa      	ldr	r2, [r7, #28]
 800711e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007120:	69bb      	ldr	r3, [r7, #24]
 8007122:	699b      	ldr	r3, [r3, #24]
 8007124:	2b00      	cmp	r3, #0
 8007126:	db04      	blt.n	8007132 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007128:	69fb      	ldr	r3, [r7, #28]
 800712a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800712e:	69bb      	ldr	r3, [r7, #24]
 8007130:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007132:	69bb      	ldr	r3, [r7, #24]
 8007134:	6959      	ldr	r1, [r3, #20]
 8007136:	693a      	ldr	r2, [r7, #16]
 8007138:	4613      	mov	r3, r2
 800713a:	009b      	lsls	r3, r3, #2
 800713c:	4413      	add	r3, r2
 800713e:	009b      	lsls	r3, r3, #2
 8007140:	4a13      	ldr	r2, [pc, #76]	@ (8007190 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007142:	4413      	add	r3, r2
 8007144:	4299      	cmp	r1, r3
 8007146:	d11c      	bne.n	8007182 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007148:	69bb      	ldr	r3, [r7, #24]
 800714a:	3304      	adds	r3, #4
 800714c:	4618      	mov	r0, r3
 800714e:	f7fd fe79 	bl	8004e44 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007152:	69bb      	ldr	r3, [r7, #24]
 8007154:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007156:	4b0f      	ldr	r3, [pc, #60]	@ (8007194 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	429a      	cmp	r2, r3
 800715c:	d903      	bls.n	8007166 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800715e:	69bb      	ldr	r3, [r7, #24]
 8007160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007162:	4a0c      	ldr	r2, [pc, #48]	@ (8007194 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007164:	6013      	str	r3, [r2, #0]
 8007166:	69bb      	ldr	r3, [r7, #24]
 8007168:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800716a:	4613      	mov	r3, r2
 800716c:	009b      	lsls	r3, r3, #2
 800716e:	4413      	add	r3, r2
 8007170:	009b      	lsls	r3, r3, #2
 8007172:	4a07      	ldr	r2, [pc, #28]	@ (8007190 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007174:	441a      	add	r2, r3
 8007176:	69bb      	ldr	r3, [r7, #24]
 8007178:	3304      	adds	r3, #4
 800717a:	4619      	mov	r1, r3
 800717c:	4610      	mov	r0, r2
 800717e:	f7fd fe04 	bl	8004d8a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007182:	bf00      	nop
 8007184:	3720      	adds	r7, #32
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}
 800718a:	bf00      	nop
 800718c:	20000a94 	.word	0x20000a94
 8007190:	20000a98 	.word	0x20000a98
 8007194:	20000f70 	.word	0x20000f70

08007198 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007198:	b480      	push	{r7}
 800719a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800719c:	4b07      	ldr	r3, [pc, #28]	@ (80071bc <pvTaskIncrementMutexHeldCount+0x24>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d004      	beq.n	80071ae <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80071a4:	4b05      	ldr	r3, [pc, #20]	@ (80071bc <pvTaskIncrementMutexHeldCount+0x24>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80071aa:	3201      	adds	r2, #1
 80071ac:	655a      	str	r2, [r3, #84]	@ 0x54
		}

		return pxCurrentTCB;
 80071ae:	4b03      	ldr	r3, [pc, #12]	@ (80071bc <pvTaskIncrementMutexHeldCount+0x24>)
 80071b0:	681b      	ldr	r3, [r3, #0]
	}
 80071b2:	4618      	mov	r0, r3
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr
 80071bc:	20000a94 	.word	0x20000a94

080071c0 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b084      	sub	sp, #16
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 80071ca:	f000 fec5 	bl	8007f58 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80071ce:	4b20      	ldr	r3, [pc, #128]	@ (8007250 <ulTaskNotifyTake+0x90>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d113      	bne.n	8007202 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80071da:	4b1d      	ldr	r3, [pc, #116]	@ (8007250 <ulTaskNotifyTake+0x90>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	2201      	movs	r2, #1
 80071e0:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4

				if( xTicksToWait > ( TickType_t ) 0 )
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d00b      	beq.n	8007202 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80071ea:	2101      	movs	r1, #1
 80071ec:	6838      	ldr	r0, [r7, #0]
 80071ee:	f000 f955 	bl	800749c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80071f2:	4b18      	ldr	r3, [pc, #96]	@ (8007254 <ulTaskNotifyTake+0x94>)
 80071f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80071f8:	601a      	str	r2, [r3, #0]
 80071fa:	f3bf 8f4f 	dsb	sy
 80071fe:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007202:	f000 fedb 	bl	8007fbc <vPortExitCritical>

		taskENTER_CRITICAL();
 8007206:	f000 fea7 	bl	8007f58 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800720a:	4b11      	ldr	r3, [pc, #68]	@ (8007250 <ulTaskNotifyTake+0x90>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8007212:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d00e      	beq.n	8007238 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d005      	beq.n	800722c <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8007220:	4b0b      	ldr	r3, [pc, #44]	@ (8007250 <ulTaskNotifyTake+0x90>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	2200      	movs	r2, #0
 8007226:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 800722a:	e005      	b.n	8007238 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800722c:	4b08      	ldr	r3, [pc, #32]	@ (8007250 <ulTaskNotifyTake+0x90>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	68fa      	ldr	r2, [r7, #12]
 8007232:	3a01      	subs	r2, #1
 8007234:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007238:	4b05      	ldr	r3, [pc, #20]	@ (8007250 <ulTaskNotifyTake+0x90>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	2200      	movs	r2, #0
 800723e:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4
		}
		taskEXIT_CRITICAL();
 8007242:	f000 febb 	bl	8007fbc <vPortExitCritical>

		return ulReturn;
 8007246:	68fb      	ldr	r3, [r7, #12]
	}
 8007248:	4618      	mov	r0, r3
 800724a:	3710      	adds	r7, #16
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}
 8007250:	20000a94 	.word	0x20000a94
 8007254:	e000ed04 	.word	0xe000ed04

08007258 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8007258:	b580      	push	{r7, lr}
 800725a:	b086      	sub	sp, #24
 800725c:	af00      	add	r7, sp, #0
 800725e:	60f8      	str	r0, [r7, #12]
 8007260:	60b9      	str	r1, [r7, #8]
 8007262:	607a      	str	r2, [r7, #4]
 8007264:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8007266:	f000 fe77 	bl	8007f58 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800726a:	4b29      	ldr	r3, [pc, #164]	@ (8007310 <xTaskNotifyWait+0xb8>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f893 30d4 	ldrb.w	r3, [r3, #212]	@ 0xd4
 8007272:	b2db      	uxtb	r3, r3
 8007274:	2b02      	cmp	r3, #2
 8007276:	d01c      	beq.n	80072b2 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8007278:	4b25      	ldr	r3, [pc, #148]	@ (8007310 <xTaskNotifyWait+0xb8>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f8d3 10d0 	ldr.w	r1, [r3, #208]	@ 0xd0
 8007280:	68fa      	ldr	r2, [r7, #12]
 8007282:	43d2      	mvns	r2, r2
 8007284:	400a      	ands	r2, r1
 8007286:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800728a:	4b21      	ldr	r3, [pc, #132]	@ (8007310 <xTaskNotifyWait+0xb8>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	2201      	movs	r2, #1
 8007290:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4

				if( xTicksToWait > ( TickType_t ) 0 )
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d00b      	beq.n	80072b2 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800729a:	2101      	movs	r1, #1
 800729c:	6838      	ldr	r0, [r7, #0]
 800729e:	f000 f8fd 	bl	800749c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80072a2:	4b1c      	ldr	r3, [pc, #112]	@ (8007314 <xTaskNotifyWait+0xbc>)
 80072a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80072a8:	601a      	str	r2, [r3, #0]
 80072aa:	f3bf 8f4f 	dsb	sy
 80072ae:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80072b2:	f000 fe83 	bl	8007fbc <vPortExitCritical>

		taskENTER_CRITICAL();
 80072b6:	f000 fe4f 	bl	8007f58 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d005      	beq.n	80072cc <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80072c0:	4b13      	ldr	r3, [pc, #76]	@ (8007310 <xTaskNotifyWait+0xb8>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80072cc:	4b10      	ldr	r3, [pc, #64]	@ (8007310 <xTaskNotifyWait+0xb8>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f893 30d4 	ldrb.w	r3, [r3, #212]	@ 0xd4
 80072d4:	b2db      	uxtb	r3, r3
 80072d6:	2b02      	cmp	r3, #2
 80072d8:	d002      	beq.n	80072e0 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80072da:	2300      	movs	r3, #0
 80072dc:	617b      	str	r3, [r7, #20]
 80072de:	e00a      	b.n	80072f6 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80072e0:	4b0b      	ldr	r3, [pc, #44]	@ (8007310 <xTaskNotifyWait+0xb8>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f8d3 10d0 	ldr.w	r1, [r3, #208]	@ 0xd0
 80072e8:	68ba      	ldr	r2, [r7, #8]
 80072ea:	43d2      	mvns	r2, r2
 80072ec:	400a      	ands	r2, r1
 80072ee:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
				xReturn = pdTRUE;
 80072f2:	2301      	movs	r3, #1
 80072f4:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80072f6:	4b06      	ldr	r3, [pc, #24]	@ (8007310 <xTaskNotifyWait+0xb8>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	2200      	movs	r2, #0
 80072fc:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4
		}
		taskEXIT_CRITICAL();
 8007300:	f000 fe5c 	bl	8007fbc <vPortExitCritical>

		return xReturn;
 8007304:	697b      	ldr	r3, [r7, #20]
	}
 8007306:	4618      	mov	r0, r3
 8007308:	3718      	adds	r7, #24
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}
 800730e:	bf00      	nop
 8007310:	20000a94 	.word	0x20000a94
 8007314:	e000ed04 	.word	0xe000ed04

08007318 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8007318:	b580      	push	{r7, lr}
 800731a:	b08a      	sub	sp, #40	@ 0x28
 800731c:	af00      	add	r7, sp, #0
 800731e:	60f8      	str	r0, [r7, #12]
 8007320:	60b9      	str	r1, [r7, #8]
 8007322:	603b      	str	r3, [r7, #0]
 8007324:	4613      	mov	r3, r2
 8007326:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8007328:	2301      	movs	r3, #1
 800732a:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d10b      	bne.n	800734a <xTaskGenericNotify+0x32>
	__asm volatile
 8007332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007336:	f383 8811 	msr	BASEPRI, r3
 800733a:	f3bf 8f6f 	isb	sy
 800733e:	f3bf 8f4f 	dsb	sy
 8007342:	61bb      	str	r3, [r7, #24]
}
 8007344:	bf00      	nop
 8007346:	bf00      	nop
 8007348:	e7fd      	b.n	8007346 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800734e:	f000 fe03 	bl	8007f58 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d004      	beq.n	8007362 <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8007358:	6a3b      	ldr	r3, [r7, #32]
 800735a:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8007362:	6a3b      	ldr	r3, [r7, #32]
 8007364:	f893 30d4 	ldrb.w	r3, [r3, #212]	@ 0xd4
 8007368:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800736a:	6a3b      	ldr	r3, [r7, #32]
 800736c:	2202      	movs	r2, #2
 800736e:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4

			switch( eAction )
 8007372:	79fb      	ldrb	r3, [r7, #7]
 8007374:	2b04      	cmp	r3, #4
 8007376:	d82e      	bhi.n	80073d6 <xTaskGenericNotify+0xbe>
 8007378:	a201      	add	r2, pc, #4	@ (adr r2, 8007380 <xTaskGenericNotify+0x68>)
 800737a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800737e:	bf00      	nop
 8007380:	080073fb 	.word	0x080073fb
 8007384:	08007395 	.word	0x08007395
 8007388:	080073a7 	.word	0x080073a7
 800738c:	080073b7 	.word	0x080073b7
 8007390:	080073c1 	.word	0x080073c1
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8007394:	6a3b      	ldr	r3, [r7, #32]
 8007396:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	431a      	orrs	r2, r3
 800739e:	6a3b      	ldr	r3, [r7, #32]
 80073a0:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
					break;
 80073a4:	e02c      	b.n	8007400 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80073a6:	6a3b      	ldr	r3, [r7, #32]
 80073a8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80073ac:	1c5a      	adds	r2, r3, #1
 80073ae:	6a3b      	ldr	r3, [r7, #32]
 80073b0:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
					break;
 80073b4:	e024      	b.n	8007400 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80073b6:	6a3b      	ldr	r3, [r7, #32]
 80073b8:	68ba      	ldr	r2, [r7, #8]
 80073ba:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
					break;
 80073be:	e01f      	b.n	8007400 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80073c0:	7ffb      	ldrb	r3, [r7, #31]
 80073c2:	2b02      	cmp	r3, #2
 80073c4:	d004      	beq.n	80073d0 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80073c6:	6a3b      	ldr	r3, [r7, #32]
 80073c8:	68ba      	ldr	r2, [r7, #8]
 80073ca:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80073ce:	e017      	b.n	8007400 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 80073d0:	2300      	movs	r3, #0
 80073d2:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 80073d4:	e014      	b.n	8007400 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80073d6:	6a3b      	ldr	r3, [r7, #32]
 80073d8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80073dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80073e0:	d00d      	beq.n	80073fe <xTaskGenericNotify+0xe6>
	__asm volatile
 80073e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073e6:	f383 8811 	msr	BASEPRI, r3
 80073ea:	f3bf 8f6f 	isb	sy
 80073ee:	f3bf 8f4f 	dsb	sy
 80073f2:	617b      	str	r3, [r7, #20]
}
 80073f4:	bf00      	nop
 80073f6:	bf00      	nop
 80073f8:	e7fd      	b.n	80073f6 <xTaskGenericNotify+0xde>
					break;
 80073fa:	bf00      	nop
 80073fc:	e000      	b.n	8007400 <xTaskGenericNotify+0xe8>

					break;
 80073fe:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007400:	7ffb      	ldrb	r3, [r7, #31]
 8007402:	2b01      	cmp	r3, #1
 8007404:	d13b      	bne.n	800747e <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007406:	6a3b      	ldr	r3, [r7, #32]
 8007408:	3304      	adds	r3, #4
 800740a:	4618      	mov	r0, r3
 800740c:	f7fd fd1a 	bl	8004e44 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8007410:	6a3b      	ldr	r3, [r7, #32]
 8007412:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007414:	4b1d      	ldr	r3, [pc, #116]	@ (800748c <xTaskGenericNotify+0x174>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	429a      	cmp	r2, r3
 800741a:	d903      	bls.n	8007424 <xTaskGenericNotify+0x10c>
 800741c:	6a3b      	ldr	r3, [r7, #32]
 800741e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007420:	4a1a      	ldr	r2, [pc, #104]	@ (800748c <xTaskGenericNotify+0x174>)
 8007422:	6013      	str	r3, [r2, #0]
 8007424:	6a3b      	ldr	r3, [r7, #32]
 8007426:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007428:	4613      	mov	r3, r2
 800742a:	009b      	lsls	r3, r3, #2
 800742c:	4413      	add	r3, r2
 800742e:	009b      	lsls	r3, r3, #2
 8007430:	4a17      	ldr	r2, [pc, #92]	@ (8007490 <xTaskGenericNotify+0x178>)
 8007432:	441a      	add	r2, r3
 8007434:	6a3b      	ldr	r3, [r7, #32]
 8007436:	3304      	adds	r3, #4
 8007438:	4619      	mov	r1, r3
 800743a:	4610      	mov	r0, r2
 800743c:	f7fd fca5 	bl	8004d8a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007440:	6a3b      	ldr	r3, [r7, #32]
 8007442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007444:	2b00      	cmp	r3, #0
 8007446:	d00b      	beq.n	8007460 <xTaskGenericNotify+0x148>
	__asm volatile
 8007448:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800744c:	f383 8811 	msr	BASEPRI, r3
 8007450:	f3bf 8f6f 	isb	sy
 8007454:	f3bf 8f4f 	dsb	sy
 8007458:	613b      	str	r3, [r7, #16]
}
 800745a:	bf00      	nop
 800745c:	bf00      	nop
 800745e:	e7fd      	b.n	800745c <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007460:	6a3b      	ldr	r3, [r7, #32]
 8007462:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007464:	4b0b      	ldr	r3, [pc, #44]	@ (8007494 <xTaskGenericNotify+0x17c>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800746a:	429a      	cmp	r2, r3
 800746c:	d907      	bls.n	800747e <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800746e:	4b0a      	ldr	r3, [pc, #40]	@ (8007498 <xTaskGenericNotify+0x180>)
 8007470:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007474:	601a      	str	r2, [r3, #0]
 8007476:	f3bf 8f4f 	dsb	sy
 800747a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800747e:	f000 fd9d 	bl	8007fbc <vPortExitCritical>

		return xReturn;
 8007482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8007484:	4618      	mov	r0, r3
 8007486:	3728      	adds	r7, #40	@ 0x28
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}
 800748c:	20000f70 	.word	0x20000f70
 8007490:	20000a98 	.word	0x20000a98
 8007494:	20000a94 	.word	0x20000a94
 8007498:	e000ed04 	.word	0xe000ed04

0800749c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
 80074a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80074a6:	4b21      	ldr	r3, [pc, #132]	@ (800752c <prvAddCurrentTaskToDelayedList+0x90>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80074ac:	4b20      	ldr	r3, [pc, #128]	@ (8007530 <prvAddCurrentTaskToDelayedList+0x94>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	3304      	adds	r3, #4
 80074b2:	4618      	mov	r0, r3
 80074b4:	f7fd fcc6 	bl	8004e44 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80074be:	d10a      	bne.n	80074d6 <prvAddCurrentTaskToDelayedList+0x3a>
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d007      	beq.n	80074d6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80074c6:	4b1a      	ldr	r3, [pc, #104]	@ (8007530 <prvAddCurrentTaskToDelayedList+0x94>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	3304      	adds	r3, #4
 80074cc:	4619      	mov	r1, r3
 80074ce:	4819      	ldr	r0, [pc, #100]	@ (8007534 <prvAddCurrentTaskToDelayedList+0x98>)
 80074d0:	f7fd fc5b 	bl	8004d8a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80074d4:	e026      	b.n	8007524 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80074d6:	68fa      	ldr	r2, [r7, #12]
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	4413      	add	r3, r2
 80074dc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80074de:	4b14      	ldr	r3, [pc, #80]	@ (8007530 <prvAddCurrentTaskToDelayedList+0x94>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	68ba      	ldr	r2, [r7, #8]
 80074e4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80074e6:	68ba      	ldr	r2, [r7, #8]
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	429a      	cmp	r2, r3
 80074ec:	d209      	bcs.n	8007502 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80074ee:	4b12      	ldr	r3, [pc, #72]	@ (8007538 <prvAddCurrentTaskToDelayedList+0x9c>)
 80074f0:	681a      	ldr	r2, [r3, #0]
 80074f2:	4b0f      	ldr	r3, [pc, #60]	@ (8007530 <prvAddCurrentTaskToDelayedList+0x94>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	3304      	adds	r3, #4
 80074f8:	4619      	mov	r1, r3
 80074fa:	4610      	mov	r0, r2
 80074fc:	f7fd fc69 	bl	8004dd2 <vListInsert>
}
 8007500:	e010      	b.n	8007524 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007502:	4b0e      	ldr	r3, [pc, #56]	@ (800753c <prvAddCurrentTaskToDelayedList+0xa0>)
 8007504:	681a      	ldr	r2, [r3, #0]
 8007506:	4b0a      	ldr	r3, [pc, #40]	@ (8007530 <prvAddCurrentTaskToDelayedList+0x94>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	3304      	adds	r3, #4
 800750c:	4619      	mov	r1, r3
 800750e:	4610      	mov	r0, r2
 8007510:	f7fd fc5f 	bl	8004dd2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007514:	4b0a      	ldr	r3, [pc, #40]	@ (8007540 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	68ba      	ldr	r2, [r7, #8]
 800751a:	429a      	cmp	r2, r3
 800751c:	d202      	bcs.n	8007524 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800751e:	4a08      	ldr	r2, [pc, #32]	@ (8007540 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	6013      	str	r3, [r2, #0]
}
 8007524:	bf00      	nop
 8007526:	3710      	adds	r7, #16
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}
 800752c:	20000f6c 	.word	0x20000f6c
 8007530:	20000a94 	.word	0x20000a94
 8007534:	20000f54 	.word	0x20000f54
 8007538:	20000f24 	.word	0x20000f24
 800753c:	20000f20 	.word	0x20000f20
 8007540:	20000f88 	.word	0x20000f88

08007544 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b08a      	sub	sp, #40	@ 0x28
 8007548:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800754a:	2300      	movs	r3, #0
 800754c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800754e:	f000 fb71 	bl	8007c34 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007552:	4b1d      	ldr	r3, [pc, #116]	@ (80075c8 <xTimerCreateTimerTask+0x84>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d021      	beq.n	800759e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800755a:	2300      	movs	r3, #0
 800755c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800755e:	2300      	movs	r3, #0
 8007560:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007562:	1d3a      	adds	r2, r7, #4
 8007564:	f107 0108 	add.w	r1, r7, #8
 8007568:	f107 030c 	add.w	r3, r7, #12
 800756c:	4618      	mov	r0, r3
 800756e:	f7fd fbc5 	bl	8004cfc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007572:	6879      	ldr	r1, [r7, #4]
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	68fa      	ldr	r2, [r7, #12]
 8007578:	9202      	str	r2, [sp, #8]
 800757a:	9301      	str	r3, [sp, #4]
 800757c:	2302      	movs	r3, #2
 800757e:	9300      	str	r3, [sp, #0]
 8007580:	2300      	movs	r3, #0
 8007582:	460a      	mov	r2, r1
 8007584:	4911      	ldr	r1, [pc, #68]	@ (80075cc <xTimerCreateTimerTask+0x88>)
 8007586:	4812      	ldr	r0, [pc, #72]	@ (80075d0 <xTimerCreateTimerTask+0x8c>)
 8007588:	f7fe fb74 	bl	8005c74 <xTaskCreateStatic>
 800758c:	4603      	mov	r3, r0
 800758e:	4a11      	ldr	r2, [pc, #68]	@ (80075d4 <xTimerCreateTimerTask+0x90>)
 8007590:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007592:	4b10      	ldr	r3, [pc, #64]	@ (80075d4 <xTimerCreateTimerTask+0x90>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d001      	beq.n	800759e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800759a:	2301      	movs	r3, #1
 800759c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d10b      	bne.n	80075bc <xTimerCreateTimerTask+0x78>
	__asm volatile
 80075a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075a8:	f383 8811 	msr	BASEPRI, r3
 80075ac:	f3bf 8f6f 	isb	sy
 80075b0:	f3bf 8f4f 	dsb	sy
 80075b4:	613b      	str	r3, [r7, #16]
}
 80075b6:	bf00      	nop
 80075b8:	bf00      	nop
 80075ba:	e7fd      	b.n	80075b8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80075bc:	697b      	ldr	r3, [r7, #20]
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3718      	adds	r7, #24
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}
 80075c6:	bf00      	nop
 80075c8:	20000fcc 	.word	0x20000fcc
 80075cc:	08009350 	.word	0x08009350
 80075d0:	080077cd 	.word	0x080077cd
 80075d4:	20000fd0 	.word	0x20000fd0

080075d8 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b088      	sub	sp, #32
 80075dc:	af02      	add	r7, sp, #8
 80075de:	60f8      	str	r0, [r7, #12]
 80075e0:	60b9      	str	r1, [r7, #8]
 80075e2:	607a      	str	r2, [r7, #4]
 80075e4:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80075e6:	202c      	movs	r0, #44	@ 0x2c
 80075e8:	f000 fdd8 	bl	800819c <pvPortMalloc>
 80075ec:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d00d      	beq.n	8007610 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	2200      	movs	r2, #0
 80075f8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	9301      	str	r3, [sp, #4]
 8007600:	6a3b      	ldr	r3, [r7, #32]
 8007602:	9300      	str	r3, [sp, #0]
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	687a      	ldr	r2, [r7, #4]
 8007608:	68b9      	ldr	r1, [r7, #8]
 800760a:	68f8      	ldr	r0, [r7, #12]
 800760c:	f000 f805 	bl	800761a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8007610:	697b      	ldr	r3, [r7, #20]
	}
 8007612:	4618      	mov	r0, r3
 8007614:	3718      	adds	r7, #24
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}

0800761a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800761a:	b580      	push	{r7, lr}
 800761c:	b086      	sub	sp, #24
 800761e:	af00      	add	r7, sp, #0
 8007620:	60f8      	str	r0, [r7, #12]
 8007622:	60b9      	str	r1, [r7, #8]
 8007624:	607a      	str	r2, [r7, #4]
 8007626:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d10b      	bne.n	8007646 <prvInitialiseNewTimer+0x2c>
	__asm volatile
 800762e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007632:	f383 8811 	msr	BASEPRI, r3
 8007636:	f3bf 8f6f 	isb	sy
 800763a:	f3bf 8f4f 	dsb	sy
 800763e:	617b      	str	r3, [r7, #20]
}
 8007640:	bf00      	nop
 8007642:	bf00      	nop
 8007644:	e7fd      	b.n	8007642 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8007646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007648:	2b00      	cmp	r3, #0
 800764a:	d01e      	beq.n	800768a <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800764c:	f000 faf2 	bl	8007c34 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8007650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007652:	68fa      	ldr	r2, [r7, #12]
 8007654:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8007656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007658:	68ba      	ldr	r2, [r7, #8]
 800765a:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800765c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800765e:	683a      	ldr	r2, [r7, #0]
 8007660:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8007662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007664:	6a3a      	ldr	r2, [r7, #32]
 8007666:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8007668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800766a:	3304      	adds	r3, #4
 800766c:	4618      	mov	r0, r3
 800766e:	f7fd fb7f 	bl	8004d70 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d008      	beq.n	800768a <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8007678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800767a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800767e:	f043 0304 	orr.w	r3, r3, #4
 8007682:	b2da      	uxtb	r2, r3
 8007684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007686:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800768a:	bf00      	nop
 800768c:	3718      	adds	r7, #24
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}
	...

08007694 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b08a      	sub	sp, #40	@ 0x28
 8007698:	af00      	add	r7, sp, #0
 800769a:	60f8      	str	r0, [r7, #12]
 800769c:	60b9      	str	r1, [r7, #8]
 800769e:	607a      	str	r2, [r7, #4]
 80076a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80076a2:	2300      	movs	r3, #0
 80076a4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d10b      	bne.n	80076c4 <xTimerGenericCommand+0x30>
	__asm volatile
 80076ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076b0:	f383 8811 	msr	BASEPRI, r3
 80076b4:	f3bf 8f6f 	isb	sy
 80076b8:	f3bf 8f4f 	dsb	sy
 80076bc:	623b      	str	r3, [r7, #32]
}
 80076be:	bf00      	nop
 80076c0:	bf00      	nop
 80076c2:	e7fd      	b.n	80076c0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80076c4:	4b19      	ldr	r3, [pc, #100]	@ (800772c <xTimerGenericCommand+0x98>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d02a      	beq.n	8007722 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	2b05      	cmp	r3, #5
 80076dc:	dc18      	bgt.n	8007710 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80076de:	f7ff fbe1 	bl	8006ea4 <xTaskGetSchedulerState>
 80076e2:	4603      	mov	r3, r0
 80076e4:	2b02      	cmp	r3, #2
 80076e6:	d109      	bne.n	80076fc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80076e8:	4b10      	ldr	r3, [pc, #64]	@ (800772c <xTimerGenericCommand+0x98>)
 80076ea:	6818      	ldr	r0, [r3, #0]
 80076ec:	f107 0110 	add.w	r1, r7, #16
 80076f0:	2300      	movs	r3, #0
 80076f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076f4:	f7fd fd16 	bl	8005124 <xQueueGenericSend>
 80076f8:	6278      	str	r0, [r7, #36]	@ 0x24
 80076fa:	e012      	b.n	8007722 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80076fc:	4b0b      	ldr	r3, [pc, #44]	@ (800772c <xTimerGenericCommand+0x98>)
 80076fe:	6818      	ldr	r0, [r3, #0]
 8007700:	f107 0110 	add.w	r1, r7, #16
 8007704:	2300      	movs	r3, #0
 8007706:	2200      	movs	r2, #0
 8007708:	f7fd fd0c 	bl	8005124 <xQueueGenericSend>
 800770c:	6278      	str	r0, [r7, #36]	@ 0x24
 800770e:	e008      	b.n	8007722 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007710:	4b06      	ldr	r3, [pc, #24]	@ (800772c <xTimerGenericCommand+0x98>)
 8007712:	6818      	ldr	r0, [r3, #0]
 8007714:	f107 0110 	add.w	r1, r7, #16
 8007718:	2300      	movs	r3, #0
 800771a:	683a      	ldr	r2, [r7, #0]
 800771c:	f7fd fe04 	bl	8005328 <xQueueGenericSendFromISR>
 8007720:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007724:	4618      	mov	r0, r3
 8007726:	3728      	adds	r7, #40	@ 0x28
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}
 800772c:	20000fcc 	.word	0x20000fcc

08007730 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b088      	sub	sp, #32
 8007734:	af02      	add	r7, sp, #8
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800773a:	4b23      	ldr	r3, [pc, #140]	@ (80077c8 <prvProcessExpiredTimer+0x98>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	68db      	ldr	r3, [r3, #12]
 8007740:	68db      	ldr	r3, [r3, #12]
 8007742:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	3304      	adds	r3, #4
 8007748:	4618      	mov	r0, r3
 800774a:	f7fd fb7b 	bl	8004e44 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007754:	f003 0304 	and.w	r3, r3, #4
 8007758:	2b00      	cmp	r3, #0
 800775a:	d023      	beq.n	80077a4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	699a      	ldr	r2, [r3, #24]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	18d1      	adds	r1, r2, r3
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	683a      	ldr	r2, [r7, #0]
 8007768:	6978      	ldr	r0, [r7, #20]
 800776a:	f000 f8d5 	bl	8007918 <prvInsertTimerInActiveList>
 800776e:	4603      	mov	r3, r0
 8007770:	2b00      	cmp	r3, #0
 8007772:	d020      	beq.n	80077b6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007774:	2300      	movs	r3, #0
 8007776:	9300      	str	r3, [sp, #0]
 8007778:	2300      	movs	r3, #0
 800777a:	687a      	ldr	r2, [r7, #4]
 800777c:	2100      	movs	r1, #0
 800777e:	6978      	ldr	r0, [r7, #20]
 8007780:	f7ff ff88 	bl	8007694 <xTimerGenericCommand>
 8007784:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d114      	bne.n	80077b6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800778c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007790:	f383 8811 	msr	BASEPRI, r3
 8007794:	f3bf 8f6f 	isb	sy
 8007798:	f3bf 8f4f 	dsb	sy
 800779c:	60fb      	str	r3, [r7, #12]
}
 800779e:	bf00      	nop
 80077a0:	bf00      	nop
 80077a2:	e7fd      	b.n	80077a0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80077aa:	f023 0301 	bic.w	r3, r3, #1
 80077ae:	b2da      	uxtb	r2, r3
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	6a1b      	ldr	r3, [r3, #32]
 80077ba:	6978      	ldr	r0, [r7, #20]
 80077bc:	4798      	blx	r3
}
 80077be:	bf00      	nop
 80077c0:	3718      	adds	r7, #24
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}
 80077c6:	bf00      	nop
 80077c8:	20000fc4 	.word	0x20000fc4

080077cc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80077d4:	f107 0308 	add.w	r3, r7, #8
 80077d8:	4618      	mov	r0, r3
 80077da:	f000 f859 	bl	8007890 <prvGetNextExpireTime>
 80077de:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	4619      	mov	r1, r3
 80077e4:	68f8      	ldr	r0, [r7, #12]
 80077e6:	f000 f805 	bl	80077f4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80077ea:	f000 f8d7 	bl	800799c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80077ee:	bf00      	nop
 80077f0:	e7f0      	b.n	80077d4 <prvTimerTask+0x8>
	...

080077f4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b084      	sub	sp, #16
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80077fe:	f7fe fd87 	bl	8006310 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007802:	f107 0308 	add.w	r3, r7, #8
 8007806:	4618      	mov	r0, r3
 8007808:	f000 f866 	bl	80078d8 <prvSampleTimeNow>
 800780c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d130      	bne.n	8007876 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d10a      	bne.n	8007830 <prvProcessTimerOrBlockTask+0x3c>
 800781a:	687a      	ldr	r2, [r7, #4]
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	429a      	cmp	r2, r3
 8007820:	d806      	bhi.n	8007830 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007822:	f7fe fd83 	bl	800632c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007826:	68f9      	ldr	r1, [r7, #12]
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f7ff ff81 	bl	8007730 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800782e:	e024      	b.n	800787a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d008      	beq.n	8007848 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007836:	4b13      	ldr	r3, [pc, #76]	@ (8007884 <prvProcessTimerOrBlockTask+0x90>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d101      	bne.n	8007844 <prvProcessTimerOrBlockTask+0x50>
 8007840:	2301      	movs	r3, #1
 8007842:	e000      	b.n	8007846 <prvProcessTimerOrBlockTask+0x52>
 8007844:	2300      	movs	r3, #0
 8007846:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007848:	4b0f      	ldr	r3, [pc, #60]	@ (8007888 <prvProcessTimerOrBlockTask+0x94>)
 800784a:	6818      	ldr	r0, [r3, #0]
 800784c:	687a      	ldr	r2, [r7, #4]
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	1ad3      	subs	r3, r2, r3
 8007852:	683a      	ldr	r2, [r7, #0]
 8007854:	4619      	mov	r1, r3
 8007856:	f7fe f9d9 	bl	8005c0c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800785a:	f7fe fd67 	bl	800632c <xTaskResumeAll>
 800785e:	4603      	mov	r3, r0
 8007860:	2b00      	cmp	r3, #0
 8007862:	d10a      	bne.n	800787a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007864:	4b09      	ldr	r3, [pc, #36]	@ (800788c <prvProcessTimerOrBlockTask+0x98>)
 8007866:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800786a:	601a      	str	r2, [r3, #0]
 800786c:	f3bf 8f4f 	dsb	sy
 8007870:	f3bf 8f6f 	isb	sy
}
 8007874:	e001      	b.n	800787a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007876:	f7fe fd59 	bl	800632c <xTaskResumeAll>
}
 800787a:	bf00      	nop
 800787c:	3710      	adds	r7, #16
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}
 8007882:	bf00      	nop
 8007884:	20000fc8 	.word	0x20000fc8
 8007888:	20000fcc 	.word	0x20000fcc
 800788c:	e000ed04 	.word	0xe000ed04

08007890 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007890:	b480      	push	{r7}
 8007892:	b085      	sub	sp, #20
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007898:	4b0e      	ldr	r3, [pc, #56]	@ (80078d4 <prvGetNextExpireTime+0x44>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d101      	bne.n	80078a6 <prvGetNextExpireTime+0x16>
 80078a2:	2201      	movs	r2, #1
 80078a4:	e000      	b.n	80078a8 <prvGetNextExpireTime+0x18>
 80078a6:	2200      	movs	r2, #0
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d105      	bne.n	80078c0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80078b4:	4b07      	ldr	r3, [pc, #28]	@ (80078d4 <prvGetNextExpireTime+0x44>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	68db      	ldr	r3, [r3, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	60fb      	str	r3, [r7, #12]
 80078be:	e001      	b.n	80078c4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80078c0:	2300      	movs	r3, #0
 80078c2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80078c4:	68fb      	ldr	r3, [r7, #12]
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3714      	adds	r7, #20
 80078ca:	46bd      	mov	sp, r7
 80078cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d0:	4770      	bx	lr
 80078d2:	bf00      	nop
 80078d4:	20000fc4 	.word	0x20000fc4

080078d8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b084      	sub	sp, #16
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80078e0:	f7fe fdc2 	bl	8006468 <xTaskGetTickCount>
 80078e4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80078e6:	4b0b      	ldr	r3, [pc, #44]	@ (8007914 <prvSampleTimeNow+0x3c>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	68fa      	ldr	r2, [r7, #12]
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d205      	bcs.n	80078fc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80078f0:	f000 f93a 	bl	8007b68 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2201      	movs	r2, #1
 80078f8:	601a      	str	r2, [r3, #0]
 80078fa:	e002      	b.n	8007902 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2200      	movs	r2, #0
 8007900:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007902:	4a04      	ldr	r2, [pc, #16]	@ (8007914 <prvSampleTimeNow+0x3c>)
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007908:	68fb      	ldr	r3, [r7, #12]
}
 800790a:	4618      	mov	r0, r3
 800790c:	3710      	adds	r7, #16
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}
 8007912:	bf00      	nop
 8007914:	20000fd4 	.word	0x20000fd4

08007918 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b086      	sub	sp, #24
 800791c:	af00      	add	r7, sp, #0
 800791e:	60f8      	str	r0, [r7, #12]
 8007920:	60b9      	str	r1, [r7, #8]
 8007922:	607a      	str	r2, [r7, #4]
 8007924:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007926:	2300      	movs	r3, #0
 8007928:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	68ba      	ldr	r2, [r7, #8]
 800792e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	68fa      	ldr	r2, [r7, #12]
 8007934:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007936:	68ba      	ldr	r2, [r7, #8]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	429a      	cmp	r2, r3
 800793c:	d812      	bhi.n	8007964 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800793e:	687a      	ldr	r2, [r7, #4]
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	1ad2      	subs	r2, r2, r3
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	699b      	ldr	r3, [r3, #24]
 8007948:	429a      	cmp	r2, r3
 800794a:	d302      	bcc.n	8007952 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800794c:	2301      	movs	r3, #1
 800794e:	617b      	str	r3, [r7, #20]
 8007950:	e01b      	b.n	800798a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007952:	4b10      	ldr	r3, [pc, #64]	@ (8007994 <prvInsertTimerInActiveList+0x7c>)
 8007954:	681a      	ldr	r2, [r3, #0]
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	3304      	adds	r3, #4
 800795a:	4619      	mov	r1, r3
 800795c:	4610      	mov	r0, r2
 800795e:	f7fd fa38 	bl	8004dd2 <vListInsert>
 8007962:	e012      	b.n	800798a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007964:	687a      	ldr	r2, [r7, #4]
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	429a      	cmp	r2, r3
 800796a:	d206      	bcs.n	800797a <prvInsertTimerInActiveList+0x62>
 800796c:	68ba      	ldr	r2, [r7, #8]
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	429a      	cmp	r2, r3
 8007972:	d302      	bcc.n	800797a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007974:	2301      	movs	r3, #1
 8007976:	617b      	str	r3, [r7, #20]
 8007978:	e007      	b.n	800798a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800797a:	4b07      	ldr	r3, [pc, #28]	@ (8007998 <prvInsertTimerInActiveList+0x80>)
 800797c:	681a      	ldr	r2, [r3, #0]
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	3304      	adds	r3, #4
 8007982:	4619      	mov	r1, r3
 8007984:	4610      	mov	r0, r2
 8007986:	f7fd fa24 	bl	8004dd2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800798a:	697b      	ldr	r3, [r7, #20]
}
 800798c:	4618      	mov	r0, r3
 800798e:	3718      	adds	r7, #24
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}
 8007994:	20000fc8 	.word	0x20000fc8
 8007998:	20000fc4 	.word	0x20000fc4

0800799c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b08e      	sub	sp, #56	@ 0x38
 80079a0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80079a2:	e0ce      	b.n	8007b42 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	da19      	bge.n	80079de <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80079aa:	1d3b      	adds	r3, r7, #4
 80079ac:	3304      	adds	r3, #4
 80079ae:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80079b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d10b      	bne.n	80079ce <prvProcessReceivedCommands+0x32>
	__asm volatile
 80079b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079ba:	f383 8811 	msr	BASEPRI, r3
 80079be:	f3bf 8f6f 	isb	sy
 80079c2:	f3bf 8f4f 	dsb	sy
 80079c6:	61fb      	str	r3, [r7, #28]
}
 80079c8:	bf00      	nop
 80079ca:	bf00      	nop
 80079cc:	e7fd      	b.n	80079ca <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80079ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80079d4:	6850      	ldr	r0, [r2, #4]
 80079d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80079d8:	6892      	ldr	r2, [r2, #8]
 80079da:	4611      	mov	r1, r2
 80079dc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	f2c0 80ae 	blt.w	8007b42 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80079ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079ec:	695b      	ldr	r3, [r3, #20]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d004      	beq.n	80079fc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80079f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079f4:	3304      	adds	r3, #4
 80079f6:	4618      	mov	r0, r3
 80079f8:	f7fd fa24 	bl	8004e44 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80079fc:	463b      	mov	r3, r7
 80079fe:	4618      	mov	r0, r3
 8007a00:	f7ff ff6a 	bl	80078d8 <prvSampleTimeNow>
 8007a04:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2b09      	cmp	r3, #9
 8007a0a:	f200 8097 	bhi.w	8007b3c <prvProcessReceivedCommands+0x1a0>
 8007a0e:	a201      	add	r2, pc, #4	@ (adr r2, 8007a14 <prvProcessReceivedCommands+0x78>)
 8007a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a14:	08007a3d 	.word	0x08007a3d
 8007a18:	08007a3d 	.word	0x08007a3d
 8007a1c:	08007a3d 	.word	0x08007a3d
 8007a20:	08007ab3 	.word	0x08007ab3
 8007a24:	08007ac7 	.word	0x08007ac7
 8007a28:	08007b13 	.word	0x08007b13
 8007a2c:	08007a3d 	.word	0x08007a3d
 8007a30:	08007a3d 	.word	0x08007a3d
 8007a34:	08007ab3 	.word	0x08007ab3
 8007a38:	08007ac7 	.word	0x08007ac7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007a3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a3e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007a42:	f043 0301 	orr.w	r3, r3, #1
 8007a46:	b2da      	uxtb	r2, r3
 8007a48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a4a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007a4e:	68ba      	ldr	r2, [r7, #8]
 8007a50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a52:	699b      	ldr	r3, [r3, #24]
 8007a54:	18d1      	adds	r1, r2, r3
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007a5c:	f7ff ff5c 	bl	8007918 <prvInsertTimerInActiveList>
 8007a60:	4603      	mov	r3, r0
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d06c      	beq.n	8007b40 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007a66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a68:	6a1b      	ldr	r3, [r3, #32]
 8007a6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007a6c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a70:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007a74:	f003 0304 	and.w	r3, r3, #4
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d061      	beq.n	8007b40 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007a7c:	68ba      	ldr	r2, [r7, #8]
 8007a7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a80:	699b      	ldr	r3, [r3, #24]
 8007a82:	441a      	add	r2, r3
 8007a84:	2300      	movs	r3, #0
 8007a86:	9300      	str	r3, [sp, #0]
 8007a88:	2300      	movs	r3, #0
 8007a8a:	2100      	movs	r1, #0
 8007a8c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007a8e:	f7ff fe01 	bl	8007694 <xTimerGenericCommand>
 8007a92:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007a94:	6a3b      	ldr	r3, [r7, #32]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d152      	bne.n	8007b40 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8007a9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a9e:	f383 8811 	msr	BASEPRI, r3
 8007aa2:	f3bf 8f6f 	isb	sy
 8007aa6:	f3bf 8f4f 	dsb	sy
 8007aaa:	61bb      	str	r3, [r7, #24]
}
 8007aac:	bf00      	nop
 8007aae:	bf00      	nop
 8007ab0:	e7fd      	b.n	8007aae <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007ab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ab4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007ab8:	f023 0301 	bic.w	r3, r3, #1
 8007abc:	b2da      	uxtb	r2, r3
 8007abe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ac0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007ac4:	e03d      	b.n	8007b42 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ac8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007acc:	f043 0301 	orr.w	r3, r3, #1
 8007ad0:	b2da      	uxtb	r2, r3
 8007ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ad4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007ad8:	68ba      	ldr	r2, [r7, #8]
 8007ada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007adc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007ade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ae0:	699b      	ldr	r3, [r3, #24]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d10b      	bne.n	8007afe <prvProcessReceivedCommands+0x162>
	__asm volatile
 8007ae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aea:	f383 8811 	msr	BASEPRI, r3
 8007aee:	f3bf 8f6f 	isb	sy
 8007af2:	f3bf 8f4f 	dsb	sy
 8007af6:	617b      	str	r3, [r7, #20]
}
 8007af8:	bf00      	nop
 8007afa:	bf00      	nop
 8007afc:	e7fd      	b.n	8007afa <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007afe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b00:	699a      	ldr	r2, [r3, #24]
 8007b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b04:	18d1      	adds	r1, r2, r3
 8007b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b0c:	f7ff ff04 	bl	8007918 <prvInsertTimerInActiveList>
					break;
 8007b10:	e017      	b.n	8007b42 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007b12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b14:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007b18:	f003 0302 	and.w	r3, r3, #2
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d103      	bne.n	8007b28 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007b20:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b22:	f000 fc09 	bl	8008338 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007b26:	e00c      	b.n	8007b42 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007b28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b2a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007b2e:	f023 0301 	bic.w	r3, r3, #1
 8007b32:	b2da      	uxtb	r2, r3
 8007b34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b36:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007b3a:	e002      	b.n	8007b42 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007b3c:	bf00      	nop
 8007b3e:	e000      	b.n	8007b42 <prvProcessReceivedCommands+0x1a6>
					break;
 8007b40:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007b42:	4b08      	ldr	r3, [pc, #32]	@ (8007b64 <prvProcessReceivedCommands+0x1c8>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	1d39      	adds	r1, r7, #4
 8007b48:	2200      	movs	r2, #0
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f7fd fd1a 	bl	8005584 <xQueueReceive>
 8007b50:	4603      	mov	r3, r0
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	f47f af26 	bne.w	80079a4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007b58:	bf00      	nop
 8007b5a:	bf00      	nop
 8007b5c:	3730      	adds	r7, #48	@ 0x30
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}
 8007b62:	bf00      	nop
 8007b64:	20000fcc 	.word	0x20000fcc

08007b68 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b088      	sub	sp, #32
 8007b6c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007b6e:	e049      	b.n	8007c04 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007b70:	4b2e      	ldr	r3, [pc, #184]	@ (8007c2c <prvSwitchTimerLists+0xc4>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	68db      	ldr	r3, [r3, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b7a:	4b2c      	ldr	r3, [pc, #176]	@ (8007c2c <prvSwitchTimerLists+0xc4>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	68db      	ldr	r3, [r3, #12]
 8007b80:	68db      	ldr	r3, [r3, #12]
 8007b82:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	3304      	adds	r3, #4
 8007b88:	4618      	mov	r0, r3
 8007b8a:	f7fd f95b 	bl	8004e44 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	6a1b      	ldr	r3, [r3, #32]
 8007b92:	68f8      	ldr	r0, [r7, #12]
 8007b94:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007b9c:	f003 0304 	and.w	r3, r3, #4
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d02f      	beq.n	8007c04 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	699b      	ldr	r3, [r3, #24]
 8007ba8:	693a      	ldr	r2, [r7, #16]
 8007baa:	4413      	add	r3, r2
 8007bac:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007bae:	68ba      	ldr	r2, [r7, #8]
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	429a      	cmp	r2, r3
 8007bb4:	d90e      	bls.n	8007bd4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	68ba      	ldr	r2, [r7, #8]
 8007bba:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	68fa      	ldr	r2, [r7, #12]
 8007bc0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007bc2:	4b1a      	ldr	r3, [pc, #104]	@ (8007c2c <prvSwitchTimerLists+0xc4>)
 8007bc4:	681a      	ldr	r2, [r3, #0]
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	3304      	adds	r3, #4
 8007bca:	4619      	mov	r1, r3
 8007bcc:	4610      	mov	r0, r2
 8007bce:	f7fd f900 	bl	8004dd2 <vListInsert>
 8007bd2:	e017      	b.n	8007c04 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	9300      	str	r3, [sp, #0]
 8007bd8:	2300      	movs	r3, #0
 8007bda:	693a      	ldr	r2, [r7, #16]
 8007bdc:	2100      	movs	r1, #0
 8007bde:	68f8      	ldr	r0, [r7, #12]
 8007be0:	f7ff fd58 	bl	8007694 <xTimerGenericCommand>
 8007be4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d10b      	bne.n	8007c04 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007bec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bf0:	f383 8811 	msr	BASEPRI, r3
 8007bf4:	f3bf 8f6f 	isb	sy
 8007bf8:	f3bf 8f4f 	dsb	sy
 8007bfc:	603b      	str	r3, [r7, #0]
}
 8007bfe:	bf00      	nop
 8007c00:	bf00      	nop
 8007c02:	e7fd      	b.n	8007c00 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007c04:	4b09      	ldr	r3, [pc, #36]	@ (8007c2c <prvSwitchTimerLists+0xc4>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d1b0      	bne.n	8007b70 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007c0e:	4b07      	ldr	r3, [pc, #28]	@ (8007c2c <prvSwitchTimerLists+0xc4>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007c14:	4b06      	ldr	r3, [pc, #24]	@ (8007c30 <prvSwitchTimerLists+0xc8>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4a04      	ldr	r2, [pc, #16]	@ (8007c2c <prvSwitchTimerLists+0xc4>)
 8007c1a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007c1c:	4a04      	ldr	r2, [pc, #16]	@ (8007c30 <prvSwitchTimerLists+0xc8>)
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	6013      	str	r3, [r2, #0]
}
 8007c22:	bf00      	nop
 8007c24:	3718      	adds	r7, #24
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}
 8007c2a:	bf00      	nop
 8007c2c:	20000fc4 	.word	0x20000fc4
 8007c30:	20000fc8 	.word	0x20000fc8

08007c34 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b082      	sub	sp, #8
 8007c38:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007c3a:	f000 f98d 	bl	8007f58 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007c3e:	4b15      	ldr	r3, [pc, #84]	@ (8007c94 <prvCheckForValidListAndQueue+0x60>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d120      	bne.n	8007c88 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007c46:	4814      	ldr	r0, [pc, #80]	@ (8007c98 <prvCheckForValidListAndQueue+0x64>)
 8007c48:	f7fd f872 	bl	8004d30 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007c4c:	4813      	ldr	r0, [pc, #76]	@ (8007c9c <prvCheckForValidListAndQueue+0x68>)
 8007c4e:	f7fd f86f 	bl	8004d30 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007c52:	4b13      	ldr	r3, [pc, #76]	@ (8007ca0 <prvCheckForValidListAndQueue+0x6c>)
 8007c54:	4a10      	ldr	r2, [pc, #64]	@ (8007c98 <prvCheckForValidListAndQueue+0x64>)
 8007c56:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007c58:	4b12      	ldr	r3, [pc, #72]	@ (8007ca4 <prvCheckForValidListAndQueue+0x70>)
 8007c5a:	4a10      	ldr	r2, [pc, #64]	@ (8007c9c <prvCheckForValidListAndQueue+0x68>)
 8007c5c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007c5e:	2300      	movs	r3, #0
 8007c60:	9300      	str	r3, [sp, #0]
 8007c62:	4b11      	ldr	r3, [pc, #68]	@ (8007ca8 <prvCheckForValidListAndQueue+0x74>)
 8007c64:	4a11      	ldr	r2, [pc, #68]	@ (8007cac <prvCheckForValidListAndQueue+0x78>)
 8007c66:	2110      	movs	r1, #16
 8007c68:	200a      	movs	r0, #10
 8007c6a:	f7fd f97f 	bl	8004f6c <xQueueGenericCreateStatic>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	4a08      	ldr	r2, [pc, #32]	@ (8007c94 <prvCheckForValidListAndQueue+0x60>)
 8007c72:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007c74:	4b07      	ldr	r3, [pc, #28]	@ (8007c94 <prvCheckForValidListAndQueue+0x60>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d005      	beq.n	8007c88 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007c7c:	4b05      	ldr	r3, [pc, #20]	@ (8007c94 <prvCheckForValidListAndQueue+0x60>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	490b      	ldr	r1, [pc, #44]	@ (8007cb0 <prvCheckForValidListAndQueue+0x7c>)
 8007c82:	4618      	mov	r0, r3
 8007c84:	f7fd ff98 	bl	8005bb8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007c88:	f000 f998 	bl	8007fbc <vPortExitCritical>
}
 8007c8c:	bf00      	nop
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}
 8007c92:	bf00      	nop
 8007c94:	20000fcc 	.word	0x20000fcc
 8007c98:	20000f9c 	.word	0x20000f9c
 8007c9c:	20000fb0 	.word	0x20000fb0
 8007ca0:	20000fc4 	.word	0x20000fc4
 8007ca4:	20000fc8 	.word	0x20000fc8
 8007ca8:	20001078 	.word	0x20001078
 8007cac:	20000fd8 	.word	0x20000fd8
 8007cb0:	08009358 	.word	0x08009358

08007cb4 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b086      	sub	sp, #24
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d10b      	bne.n	8007cde <pvTimerGetTimerID+0x2a>
	__asm volatile
 8007cc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cca:	f383 8811 	msr	BASEPRI, r3
 8007cce:	f3bf 8f6f 	isb	sy
 8007cd2:	f3bf 8f4f 	dsb	sy
 8007cd6:	60fb      	str	r3, [r7, #12]
}
 8007cd8:	bf00      	nop
 8007cda:	bf00      	nop
 8007cdc:	e7fd      	b.n	8007cda <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8007cde:	f000 f93b 	bl	8007f58 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	69db      	ldr	r3, [r3, #28]
 8007ce6:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8007ce8:	f000 f968 	bl	8007fbc <vPortExitCritical>

	return pvReturn;
 8007cec:	693b      	ldr	r3, [r7, #16]
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3718      	adds	r7, #24
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}
	...

08007cf8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b085      	sub	sp, #20
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	60f8      	str	r0, [r7, #12]
 8007d00:	60b9      	str	r1, [r7, #8]
 8007d02:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	3b04      	subs	r3, #4
 8007d08:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007d10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	3b04      	subs	r3, #4
 8007d16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	f023 0201 	bic.w	r2, r3, #1
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	3b04      	subs	r3, #4
 8007d26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007d28:	4a0c      	ldr	r2, [pc, #48]	@ (8007d5c <pxPortInitialiseStack+0x64>)
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	3b14      	subs	r3, #20
 8007d32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007d34:	687a      	ldr	r2, [r7, #4]
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	3b04      	subs	r3, #4
 8007d3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	f06f 0202 	mvn.w	r2, #2
 8007d46:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	3b20      	subs	r3, #32
 8007d4c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3714      	adds	r7, #20
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr
 8007d5c:	08007d61 	.word	0x08007d61

08007d60 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007d60:	b480      	push	{r7}
 8007d62:	b085      	sub	sp, #20
 8007d64:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007d66:	2300      	movs	r3, #0
 8007d68:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007d6a:	4b13      	ldr	r3, [pc, #76]	@ (8007db8 <prvTaskExitError+0x58>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007d72:	d00b      	beq.n	8007d8c <prvTaskExitError+0x2c>
	__asm volatile
 8007d74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d78:	f383 8811 	msr	BASEPRI, r3
 8007d7c:	f3bf 8f6f 	isb	sy
 8007d80:	f3bf 8f4f 	dsb	sy
 8007d84:	60fb      	str	r3, [r7, #12]
}
 8007d86:	bf00      	nop
 8007d88:	bf00      	nop
 8007d8a:	e7fd      	b.n	8007d88 <prvTaskExitError+0x28>
	__asm volatile
 8007d8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d90:	f383 8811 	msr	BASEPRI, r3
 8007d94:	f3bf 8f6f 	isb	sy
 8007d98:	f3bf 8f4f 	dsb	sy
 8007d9c:	60bb      	str	r3, [r7, #8]
}
 8007d9e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007da0:	bf00      	nop
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d0fc      	beq.n	8007da2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007da8:	bf00      	nop
 8007daa:	bf00      	nop
 8007dac:	3714      	adds	r7, #20
 8007dae:	46bd      	mov	sp, r7
 8007db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db4:	4770      	bx	lr
 8007db6:	bf00      	nop
 8007db8:	2000000c 	.word	0x2000000c
 8007dbc:	00000000 	.word	0x00000000

08007dc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007dc0:	4b07      	ldr	r3, [pc, #28]	@ (8007de0 <pxCurrentTCBConst2>)
 8007dc2:	6819      	ldr	r1, [r3, #0]
 8007dc4:	6808      	ldr	r0, [r1, #0]
 8007dc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dca:	f380 8809 	msr	PSP, r0
 8007dce:	f3bf 8f6f 	isb	sy
 8007dd2:	f04f 0000 	mov.w	r0, #0
 8007dd6:	f380 8811 	msr	BASEPRI, r0
 8007dda:	4770      	bx	lr
 8007ddc:	f3af 8000 	nop.w

08007de0 <pxCurrentTCBConst2>:
 8007de0:	20000a94 	.word	0x20000a94
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007de4:	bf00      	nop
 8007de6:	bf00      	nop

08007de8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007de8:	4808      	ldr	r0, [pc, #32]	@ (8007e0c <prvPortStartFirstTask+0x24>)
 8007dea:	6800      	ldr	r0, [r0, #0]
 8007dec:	6800      	ldr	r0, [r0, #0]
 8007dee:	f380 8808 	msr	MSP, r0
 8007df2:	f04f 0000 	mov.w	r0, #0
 8007df6:	f380 8814 	msr	CONTROL, r0
 8007dfa:	b662      	cpsie	i
 8007dfc:	b661      	cpsie	f
 8007dfe:	f3bf 8f4f 	dsb	sy
 8007e02:	f3bf 8f6f 	isb	sy
 8007e06:	df00      	svc	0
 8007e08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007e0a:	bf00      	nop
 8007e0c:	e000ed08 	.word	0xe000ed08

08007e10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b086      	sub	sp, #24
 8007e14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007e16:	4b47      	ldr	r3, [pc, #284]	@ (8007f34 <xPortStartScheduler+0x124>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4a47      	ldr	r2, [pc, #284]	@ (8007f38 <xPortStartScheduler+0x128>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d10b      	bne.n	8007e38 <xPortStartScheduler+0x28>
	__asm volatile
 8007e20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e24:	f383 8811 	msr	BASEPRI, r3
 8007e28:	f3bf 8f6f 	isb	sy
 8007e2c:	f3bf 8f4f 	dsb	sy
 8007e30:	60fb      	str	r3, [r7, #12]
}
 8007e32:	bf00      	nop
 8007e34:	bf00      	nop
 8007e36:	e7fd      	b.n	8007e34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007e38:	4b3e      	ldr	r3, [pc, #248]	@ (8007f34 <xPortStartScheduler+0x124>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a3f      	ldr	r2, [pc, #252]	@ (8007f3c <xPortStartScheduler+0x12c>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d10b      	bne.n	8007e5a <xPortStartScheduler+0x4a>
	__asm volatile
 8007e42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e46:	f383 8811 	msr	BASEPRI, r3
 8007e4a:	f3bf 8f6f 	isb	sy
 8007e4e:	f3bf 8f4f 	dsb	sy
 8007e52:	613b      	str	r3, [r7, #16]
}
 8007e54:	bf00      	nop
 8007e56:	bf00      	nop
 8007e58:	e7fd      	b.n	8007e56 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007e5a:	4b39      	ldr	r3, [pc, #228]	@ (8007f40 <xPortStartScheduler+0x130>)
 8007e5c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	781b      	ldrb	r3, [r3, #0]
 8007e62:	b2db      	uxtb	r3, r3
 8007e64:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	22ff      	movs	r2, #255	@ 0xff
 8007e6a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	781b      	ldrb	r3, [r3, #0]
 8007e70:	b2db      	uxtb	r3, r3
 8007e72:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007e74:	78fb      	ldrb	r3, [r7, #3]
 8007e76:	b2db      	uxtb	r3, r3
 8007e78:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007e7c:	b2da      	uxtb	r2, r3
 8007e7e:	4b31      	ldr	r3, [pc, #196]	@ (8007f44 <xPortStartScheduler+0x134>)
 8007e80:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007e82:	4b31      	ldr	r3, [pc, #196]	@ (8007f48 <xPortStartScheduler+0x138>)
 8007e84:	2207      	movs	r2, #7
 8007e86:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e88:	e009      	b.n	8007e9e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8007e8a:	4b2f      	ldr	r3, [pc, #188]	@ (8007f48 <xPortStartScheduler+0x138>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	3b01      	subs	r3, #1
 8007e90:	4a2d      	ldr	r2, [pc, #180]	@ (8007f48 <xPortStartScheduler+0x138>)
 8007e92:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007e94:	78fb      	ldrb	r3, [r7, #3]
 8007e96:	b2db      	uxtb	r3, r3
 8007e98:	005b      	lsls	r3, r3, #1
 8007e9a:	b2db      	uxtb	r3, r3
 8007e9c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e9e:	78fb      	ldrb	r3, [r7, #3]
 8007ea0:	b2db      	uxtb	r3, r3
 8007ea2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ea6:	2b80      	cmp	r3, #128	@ 0x80
 8007ea8:	d0ef      	beq.n	8007e8a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007eaa:	4b27      	ldr	r3, [pc, #156]	@ (8007f48 <xPortStartScheduler+0x138>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f1c3 0307 	rsb	r3, r3, #7
 8007eb2:	2b04      	cmp	r3, #4
 8007eb4:	d00b      	beq.n	8007ece <xPortStartScheduler+0xbe>
	__asm volatile
 8007eb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eba:	f383 8811 	msr	BASEPRI, r3
 8007ebe:	f3bf 8f6f 	isb	sy
 8007ec2:	f3bf 8f4f 	dsb	sy
 8007ec6:	60bb      	str	r3, [r7, #8]
}
 8007ec8:	bf00      	nop
 8007eca:	bf00      	nop
 8007ecc:	e7fd      	b.n	8007eca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007ece:	4b1e      	ldr	r3, [pc, #120]	@ (8007f48 <xPortStartScheduler+0x138>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	021b      	lsls	r3, r3, #8
 8007ed4:	4a1c      	ldr	r2, [pc, #112]	@ (8007f48 <xPortStartScheduler+0x138>)
 8007ed6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007ed8:	4b1b      	ldr	r3, [pc, #108]	@ (8007f48 <xPortStartScheduler+0x138>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007ee0:	4a19      	ldr	r2, [pc, #100]	@ (8007f48 <xPortStartScheduler+0x138>)
 8007ee2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	b2da      	uxtb	r2, r3
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007eec:	4b17      	ldr	r3, [pc, #92]	@ (8007f4c <xPortStartScheduler+0x13c>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4a16      	ldr	r2, [pc, #88]	@ (8007f4c <xPortStartScheduler+0x13c>)
 8007ef2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007ef6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007ef8:	4b14      	ldr	r3, [pc, #80]	@ (8007f4c <xPortStartScheduler+0x13c>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a13      	ldr	r2, [pc, #76]	@ (8007f4c <xPortStartScheduler+0x13c>)
 8007efe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007f02:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007f04:	f000 f8da 	bl	80080bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007f08:	4b11      	ldr	r3, [pc, #68]	@ (8007f50 <xPortStartScheduler+0x140>)
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007f0e:	f000 f8f9 	bl	8008104 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007f12:	4b10      	ldr	r3, [pc, #64]	@ (8007f54 <xPortStartScheduler+0x144>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	4a0f      	ldr	r2, [pc, #60]	@ (8007f54 <xPortStartScheduler+0x144>)
 8007f18:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007f1c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007f1e:	f7ff ff63 	bl	8007de8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007f22:	f7fe fbfb 	bl	800671c <vTaskSwitchContext>
	prvTaskExitError();
 8007f26:	f7ff ff1b 	bl	8007d60 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007f2a:	2300      	movs	r3, #0
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3718      	adds	r7, #24
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}
 8007f34:	e000ed00 	.word	0xe000ed00
 8007f38:	410fc271 	.word	0x410fc271
 8007f3c:	410fc270 	.word	0x410fc270
 8007f40:	e000e400 	.word	0xe000e400
 8007f44:	200010c8 	.word	0x200010c8
 8007f48:	200010cc 	.word	0x200010cc
 8007f4c:	e000ed20 	.word	0xe000ed20
 8007f50:	2000000c 	.word	0x2000000c
 8007f54:	e000ef34 	.word	0xe000ef34

08007f58 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b083      	sub	sp, #12
 8007f5c:	af00      	add	r7, sp, #0
	__asm volatile
 8007f5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f62:	f383 8811 	msr	BASEPRI, r3
 8007f66:	f3bf 8f6f 	isb	sy
 8007f6a:	f3bf 8f4f 	dsb	sy
 8007f6e:	607b      	str	r3, [r7, #4]
}
 8007f70:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007f72:	4b10      	ldr	r3, [pc, #64]	@ (8007fb4 <vPortEnterCritical+0x5c>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	3301      	adds	r3, #1
 8007f78:	4a0e      	ldr	r2, [pc, #56]	@ (8007fb4 <vPortEnterCritical+0x5c>)
 8007f7a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007f7c:	4b0d      	ldr	r3, [pc, #52]	@ (8007fb4 <vPortEnterCritical+0x5c>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	2b01      	cmp	r3, #1
 8007f82:	d110      	bne.n	8007fa6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007f84:	4b0c      	ldr	r3, [pc, #48]	@ (8007fb8 <vPortEnterCritical+0x60>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	b2db      	uxtb	r3, r3
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d00b      	beq.n	8007fa6 <vPortEnterCritical+0x4e>
	__asm volatile
 8007f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f92:	f383 8811 	msr	BASEPRI, r3
 8007f96:	f3bf 8f6f 	isb	sy
 8007f9a:	f3bf 8f4f 	dsb	sy
 8007f9e:	603b      	str	r3, [r7, #0]
}
 8007fa0:	bf00      	nop
 8007fa2:	bf00      	nop
 8007fa4:	e7fd      	b.n	8007fa2 <vPortEnterCritical+0x4a>
	}
}
 8007fa6:	bf00      	nop
 8007fa8:	370c      	adds	r7, #12
 8007faa:	46bd      	mov	sp, r7
 8007fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb0:	4770      	bx	lr
 8007fb2:	bf00      	nop
 8007fb4:	2000000c 	.word	0x2000000c
 8007fb8:	e000ed04 	.word	0xe000ed04

08007fbc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b083      	sub	sp, #12
 8007fc0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007fc2:	4b12      	ldr	r3, [pc, #72]	@ (800800c <vPortExitCritical+0x50>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d10b      	bne.n	8007fe2 <vPortExitCritical+0x26>
	__asm volatile
 8007fca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fce:	f383 8811 	msr	BASEPRI, r3
 8007fd2:	f3bf 8f6f 	isb	sy
 8007fd6:	f3bf 8f4f 	dsb	sy
 8007fda:	607b      	str	r3, [r7, #4]
}
 8007fdc:	bf00      	nop
 8007fde:	bf00      	nop
 8007fe0:	e7fd      	b.n	8007fde <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007fe2:	4b0a      	ldr	r3, [pc, #40]	@ (800800c <vPortExitCritical+0x50>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	3b01      	subs	r3, #1
 8007fe8:	4a08      	ldr	r2, [pc, #32]	@ (800800c <vPortExitCritical+0x50>)
 8007fea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007fec:	4b07      	ldr	r3, [pc, #28]	@ (800800c <vPortExitCritical+0x50>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d105      	bne.n	8008000 <vPortExitCritical+0x44>
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	f383 8811 	msr	BASEPRI, r3
}
 8007ffe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008000:	bf00      	nop
 8008002:	370c      	adds	r7, #12
 8008004:	46bd      	mov	sp, r7
 8008006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800a:	4770      	bx	lr
 800800c:	2000000c 	.word	0x2000000c

08008010 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008010:	f3ef 8009 	mrs	r0, PSP
 8008014:	f3bf 8f6f 	isb	sy
 8008018:	4b15      	ldr	r3, [pc, #84]	@ (8008070 <pxCurrentTCBConst>)
 800801a:	681a      	ldr	r2, [r3, #0]
 800801c:	f01e 0f10 	tst.w	lr, #16
 8008020:	bf08      	it	eq
 8008022:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008026:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800802a:	6010      	str	r0, [r2, #0]
 800802c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008030:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008034:	f380 8811 	msr	BASEPRI, r0
 8008038:	f3bf 8f4f 	dsb	sy
 800803c:	f3bf 8f6f 	isb	sy
 8008040:	f7fe fb6c 	bl	800671c <vTaskSwitchContext>
 8008044:	f04f 0000 	mov.w	r0, #0
 8008048:	f380 8811 	msr	BASEPRI, r0
 800804c:	bc09      	pop	{r0, r3}
 800804e:	6819      	ldr	r1, [r3, #0]
 8008050:	6808      	ldr	r0, [r1, #0]
 8008052:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008056:	f01e 0f10 	tst.w	lr, #16
 800805a:	bf08      	it	eq
 800805c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008060:	f380 8809 	msr	PSP, r0
 8008064:	f3bf 8f6f 	isb	sy
 8008068:	4770      	bx	lr
 800806a:	bf00      	nop
 800806c:	f3af 8000 	nop.w

08008070 <pxCurrentTCBConst>:
 8008070:	20000a94 	.word	0x20000a94
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008074:	bf00      	nop
 8008076:	bf00      	nop

08008078 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b082      	sub	sp, #8
 800807c:	af00      	add	r7, sp, #0
	__asm volatile
 800807e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008082:	f383 8811 	msr	BASEPRI, r3
 8008086:	f3bf 8f6f 	isb	sy
 800808a:	f3bf 8f4f 	dsb	sy
 800808e:	607b      	str	r3, [r7, #4]
}
 8008090:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008092:	f7fe fa89 	bl	80065a8 <xTaskIncrementTick>
 8008096:	4603      	mov	r3, r0
 8008098:	2b00      	cmp	r3, #0
 800809a:	d003      	beq.n	80080a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800809c:	4b06      	ldr	r3, [pc, #24]	@ (80080b8 <xPortSysTickHandler+0x40>)
 800809e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80080a2:	601a      	str	r2, [r3, #0]
 80080a4:	2300      	movs	r3, #0
 80080a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	f383 8811 	msr	BASEPRI, r3
}
 80080ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80080b0:	bf00      	nop
 80080b2:	3708      	adds	r7, #8
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}
 80080b8:	e000ed04 	.word	0xe000ed04

080080bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80080bc:	b480      	push	{r7}
 80080be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80080c0:	4b0b      	ldr	r3, [pc, #44]	@ (80080f0 <vPortSetupTimerInterrupt+0x34>)
 80080c2:	2200      	movs	r2, #0
 80080c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80080c6:	4b0b      	ldr	r3, [pc, #44]	@ (80080f4 <vPortSetupTimerInterrupt+0x38>)
 80080c8:	2200      	movs	r2, #0
 80080ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80080cc:	4b0a      	ldr	r3, [pc, #40]	@ (80080f8 <vPortSetupTimerInterrupt+0x3c>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4a0a      	ldr	r2, [pc, #40]	@ (80080fc <vPortSetupTimerInterrupt+0x40>)
 80080d2:	fba2 2303 	umull	r2, r3, r2, r3
 80080d6:	099b      	lsrs	r3, r3, #6
 80080d8:	4a09      	ldr	r2, [pc, #36]	@ (8008100 <vPortSetupTimerInterrupt+0x44>)
 80080da:	3b01      	subs	r3, #1
 80080dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80080de:	4b04      	ldr	r3, [pc, #16]	@ (80080f0 <vPortSetupTimerInterrupt+0x34>)
 80080e0:	2207      	movs	r2, #7
 80080e2:	601a      	str	r2, [r3, #0]
}
 80080e4:	bf00      	nop
 80080e6:	46bd      	mov	sp, r7
 80080e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop
 80080f0:	e000e010 	.word	0xe000e010
 80080f4:	e000e018 	.word	0xe000e018
 80080f8:	20000000 	.word	0x20000000
 80080fc:	10624dd3 	.word	0x10624dd3
 8008100:	e000e014 	.word	0xe000e014

08008104 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008104:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008114 <vPortEnableVFP+0x10>
 8008108:	6801      	ldr	r1, [r0, #0]
 800810a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800810e:	6001      	str	r1, [r0, #0]
 8008110:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008112:	bf00      	nop
 8008114:	e000ed88 	.word	0xe000ed88

08008118 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008118:	b480      	push	{r7}
 800811a:	b085      	sub	sp, #20
 800811c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800811e:	f3ef 8305 	mrs	r3, IPSR
 8008122:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	2b0f      	cmp	r3, #15
 8008128:	d915      	bls.n	8008156 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800812a:	4a18      	ldr	r2, [pc, #96]	@ (800818c <vPortValidateInterruptPriority+0x74>)
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	4413      	add	r3, r2
 8008130:	781b      	ldrb	r3, [r3, #0]
 8008132:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008134:	4b16      	ldr	r3, [pc, #88]	@ (8008190 <vPortValidateInterruptPriority+0x78>)
 8008136:	781b      	ldrb	r3, [r3, #0]
 8008138:	7afa      	ldrb	r2, [r7, #11]
 800813a:	429a      	cmp	r2, r3
 800813c:	d20b      	bcs.n	8008156 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800813e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008142:	f383 8811 	msr	BASEPRI, r3
 8008146:	f3bf 8f6f 	isb	sy
 800814a:	f3bf 8f4f 	dsb	sy
 800814e:	607b      	str	r3, [r7, #4]
}
 8008150:	bf00      	nop
 8008152:	bf00      	nop
 8008154:	e7fd      	b.n	8008152 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008156:	4b0f      	ldr	r3, [pc, #60]	@ (8008194 <vPortValidateInterruptPriority+0x7c>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800815e:	4b0e      	ldr	r3, [pc, #56]	@ (8008198 <vPortValidateInterruptPriority+0x80>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	429a      	cmp	r2, r3
 8008164:	d90b      	bls.n	800817e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800816a:	f383 8811 	msr	BASEPRI, r3
 800816e:	f3bf 8f6f 	isb	sy
 8008172:	f3bf 8f4f 	dsb	sy
 8008176:	603b      	str	r3, [r7, #0]
}
 8008178:	bf00      	nop
 800817a:	bf00      	nop
 800817c:	e7fd      	b.n	800817a <vPortValidateInterruptPriority+0x62>
	}
 800817e:	bf00      	nop
 8008180:	3714      	adds	r7, #20
 8008182:	46bd      	mov	sp, r7
 8008184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008188:	4770      	bx	lr
 800818a:	bf00      	nop
 800818c:	e000e3f0 	.word	0xe000e3f0
 8008190:	200010c8 	.word	0x200010c8
 8008194:	e000ed0c 	.word	0xe000ed0c
 8008198:	200010cc 	.word	0x200010cc

0800819c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b08a      	sub	sp, #40	@ 0x28
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80081a4:	2300      	movs	r3, #0
 80081a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80081a8:	f7fe f8b2 	bl	8006310 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80081ac:	4b5c      	ldr	r3, [pc, #368]	@ (8008320 <pvPortMalloc+0x184>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d101      	bne.n	80081b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80081b4:	f000 f924 	bl	8008400 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80081b8:	4b5a      	ldr	r3, [pc, #360]	@ (8008324 <pvPortMalloc+0x188>)
 80081ba:	681a      	ldr	r2, [r3, #0]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	4013      	ands	r3, r2
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	f040 8095 	bne.w	80082f0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d01e      	beq.n	800820a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80081cc:	2208      	movs	r2, #8
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	4413      	add	r3, r2
 80081d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f003 0307 	and.w	r3, r3, #7
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d015      	beq.n	800820a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f023 0307 	bic.w	r3, r3, #7
 80081e4:	3308      	adds	r3, #8
 80081e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f003 0307 	and.w	r3, r3, #7
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d00b      	beq.n	800820a <pvPortMalloc+0x6e>
	__asm volatile
 80081f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081f6:	f383 8811 	msr	BASEPRI, r3
 80081fa:	f3bf 8f6f 	isb	sy
 80081fe:	f3bf 8f4f 	dsb	sy
 8008202:	617b      	str	r3, [r7, #20]
}
 8008204:	bf00      	nop
 8008206:	bf00      	nop
 8008208:	e7fd      	b.n	8008206 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d06f      	beq.n	80082f0 <pvPortMalloc+0x154>
 8008210:	4b45      	ldr	r3, [pc, #276]	@ (8008328 <pvPortMalloc+0x18c>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	687a      	ldr	r2, [r7, #4]
 8008216:	429a      	cmp	r2, r3
 8008218:	d86a      	bhi.n	80082f0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800821a:	4b44      	ldr	r3, [pc, #272]	@ (800832c <pvPortMalloc+0x190>)
 800821c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800821e:	4b43      	ldr	r3, [pc, #268]	@ (800832c <pvPortMalloc+0x190>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008224:	e004      	b.n	8008230 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008228:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800822a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008232:	685b      	ldr	r3, [r3, #4]
 8008234:	687a      	ldr	r2, [r7, #4]
 8008236:	429a      	cmp	r2, r3
 8008238:	d903      	bls.n	8008242 <pvPortMalloc+0xa6>
 800823a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d1f1      	bne.n	8008226 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008242:	4b37      	ldr	r3, [pc, #220]	@ (8008320 <pvPortMalloc+0x184>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008248:	429a      	cmp	r2, r3
 800824a:	d051      	beq.n	80082f0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800824c:	6a3b      	ldr	r3, [r7, #32]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	2208      	movs	r2, #8
 8008252:	4413      	add	r3, r2
 8008254:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008258:	681a      	ldr	r2, [r3, #0]
 800825a:	6a3b      	ldr	r3, [r7, #32]
 800825c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800825e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008260:	685a      	ldr	r2, [r3, #4]
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	1ad2      	subs	r2, r2, r3
 8008266:	2308      	movs	r3, #8
 8008268:	005b      	lsls	r3, r3, #1
 800826a:	429a      	cmp	r2, r3
 800826c:	d920      	bls.n	80082b0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800826e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	4413      	add	r3, r2
 8008274:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008276:	69bb      	ldr	r3, [r7, #24]
 8008278:	f003 0307 	and.w	r3, r3, #7
 800827c:	2b00      	cmp	r3, #0
 800827e:	d00b      	beq.n	8008298 <pvPortMalloc+0xfc>
	__asm volatile
 8008280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008284:	f383 8811 	msr	BASEPRI, r3
 8008288:	f3bf 8f6f 	isb	sy
 800828c:	f3bf 8f4f 	dsb	sy
 8008290:	613b      	str	r3, [r7, #16]
}
 8008292:	bf00      	nop
 8008294:	bf00      	nop
 8008296:	e7fd      	b.n	8008294 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800829a:	685a      	ldr	r2, [r3, #4]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	1ad2      	subs	r2, r2, r3
 80082a0:	69bb      	ldr	r3, [r7, #24]
 80082a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80082a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082a6:	687a      	ldr	r2, [r7, #4]
 80082a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80082aa:	69b8      	ldr	r0, [r7, #24]
 80082ac:	f000 f90a 	bl	80084c4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80082b0:	4b1d      	ldr	r3, [pc, #116]	@ (8008328 <pvPortMalloc+0x18c>)
 80082b2:	681a      	ldr	r2, [r3, #0]
 80082b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082b6:	685b      	ldr	r3, [r3, #4]
 80082b8:	1ad3      	subs	r3, r2, r3
 80082ba:	4a1b      	ldr	r2, [pc, #108]	@ (8008328 <pvPortMalloc+0x18c>)
 80082bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80082be:	4b1a      	ldr	r3, [pc, #104]	@ (8008328 <pvPortMalloc+0x18c>)
 80082c0:	681a      	ldr	r2, [r3, #0]
 80082c2:	4b1b      	ldr	r3, [pc, #108]	@ (8008330 <pvPortMalloc+0x194>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d203      	bcs.n	80082d2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80082ca:	4b17      	ldr	r3, [pc, #92]	@ (8008328 <pvPortMalloc+0x18c>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	4a18      	ldr	r2, [pc, #96]	@ (8008330 <pvPortMalloc+0x194>)
 80082d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80082d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082d4:	685a      	ldr	r2, [r3, #4]
 80082d6:	4b13      	ldr	r3, [pc, #76]	@ (8008324 <pvPortMalloc+0x188>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	431a      	orrs	r2, r3
 80082dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80082e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082e2:	2200      	movs	r2, #0
 80082e4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80082e6:	4b13      	ldr	r3, [pc, #76]	@ (8008334 <pvPortMalloc+0x198>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	3301      	adds	r3, #1
 80082ec:	4a11      	ldr	r2, [pc, #68]	@ (8008334 <pvPortMalloc+0x198>)
 80082ee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80082f0:	f7fe f81c 	bl	800632c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80082f4:	69fb      	ldr	r3, [r7, #28]
 80082f6:	f003 0307 	and.w	r3, r3, #7
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d00b      	beq.n	8008316 <pvPortMalloc+0x17a>
	__asm volatile
 80082fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008302:	f383 8811 	msr	BASEPRI, r3
 8008306:	f3bf 8f6f 	isb	sy
 800830a:	f3bf 8f4f 	dsb	sy
 800830e:	60fb      	str	r3, [r7, #12]
}
 8008310:	bf00      	nop
 8008312:	bf00      	nop
 8008314:	e7fd      	b.n	8008312 <pvPortMalloc+0x176>
	return pvReturn;
 8008316:	69fb      	ldr	r3, [r7, #28]
}
 8008318:	4618      	mov	r0, r3
 800831a:	3728      	adds	r7, #40	@ 0x28
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}
 8008320:	20004cd8 	.word	0x20004cd8
 8008324:	20004cec 	.word	0x20004cec
 8008328:	20004cdc 	.word	0x20004cdc
 800832c:	20004cd0 	.word	0x20004cd0
 8008330:	20004ce0 	.word	0x20004ce0
 8008334:	20004ce4 	.word	0x20004ce4

08008338 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b086      	sub	sp, #24
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d04f      	beq.n	80083ea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800834a:	2308      	movs	r3, #8
 800834c:	425b      	negs	r3, r3
 800834e:	697a      	ldr	r2, [r7, #20]
 8008350:	4413      	add	r3, r2
 8008352:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008358:	693b      	ldr	r3, [r7, #16]
 800835a:	685a      	ldr	r2, [r3, #4]
 800835c:	4b25      	ldr	r3, [pc, #148]	@ (80083f4 <vPortFree+0xbc>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4013      	ands	r3, r2
 8008362:	2b00      	cmp	r3, #0
 8008364:	d10b      	bne.n	800837e <vPortFree+0x46>
	__asm volatile
 8008366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800836a:	f383 8811 	msr	BASEPRI, r3
 800836e:	f3bf 8f6f 	isb	sy
 8008372:	f3bf 8f4f 	dsb	sy
 8008376:	60fb      	str	r3, [r7, #12]
}
 8008378:	bf00      	nop
 800837a:	bf00      	nop
 800837c:	e7fd      	b.n	800837a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d00b      	beq.n	800839e <vPortFree+0x66>
	__asm volatile
 8008386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800838a:	f383 8811 	msr	BASEPRI, r3
 800838e:	f3bf 8f6f 	isb	sy
 8008392:	f3bf 8f4f 	dsb	sy
 8008396:	60bb      	str	r3, [r7, #8]
}
 8008398:	bf00      	nop
 800839a:	bf00      	nop
 800839c:	e7fd      	b.n	800839a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	685a      	ldr	r2, [r3, #4]
 80083a2:	4b14      	ldr	r3, [pc, #80]	@ (80083f4 <vPortFree+0xbc>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4013      	ands	r3, r2
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d01e      	beq.n	80083ea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d11a      	bne.n	80083ea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80083b4:	693b      	ldr	r3, [r7, #16]
 80083b6:	685a      	ldr	r2, [r3, #4]
 80083b8:	4b0e      	ldr	r3, [pc, #56]	@ (80083f4 <vPortFree+0xbc>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	43db      	mvns	r3, r3
 80083be:	401a      	ands	r2, r3
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80083c4:	f7fd ffa4 	bl	8006310 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80083c8:	693b      	ldr	r3, [r7, #16]
 80083ca:	685a      	ldr	r2, [r3, #4]
 80083cc:	4b0a      	ldr	r3, [pc, #40]	@ (80083f8 <vPortFree+0xc0>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4413      	add	r3, r2
 80083d2:	4a09      	ldr	r2, [pc, #36]	@ (80083f8 <vPortFree+0xc0>)
 80083d4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80083d6:	6938      	ldr	r0, [r7, #16]
 80083d8:	f000 f874 	bl	80084c4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80083dc:	4b07      	ldr	r3, [pc, #28]	@ (80083fc <vPortFree+0xc4>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	3301      	adds	r3, #1
 80083e2:	4a06      	ldr	r2, [pc, #24]	@ (80083fc <vPortFree+0xc4>)
 80083e4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80083e6:	f7fd ffa1 	bl	800632c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80083ea:	bf00      	nop
 80083ec:	3718      	adds	r7, #24
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}
 80083f2:	bf00      	nop
 80083f4:	20004cec 	.word	0x20004cec
 80083f8:	20004cdc 	.word	0x20004cdc
 80083fc:	20004ce8 	.word	0x20004ce8

08008400 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008400:	b480      	push	{r7}
 8008402:	b085      	sub	sp, #20
 8008404:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008406:	f643 33ff 	movw	r3, #15359	@ 0x3bff
 800840a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800840c:	4b27      	ldr	r3, [pc, #156]	@ (80084ac <prvHeapInit+0xac>)
 800840e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	f003 0307 	and.w	r3, r3, #7
 8008416:	2b00      	cmp	r3, #0
 8008418:	d00c      	beq.n	8008434 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	3307      	adds	r3, #7
 800841e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	f023 0307 	bic.w	r3, r3, #7
 8008426:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008428:	68ba      	ldr	r2, [r7, #8]
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	1ad3      	subs	r3, r2, r3
 800842e:	4a1f      	ldr	r2, [pc, #124]	@ (80084ac <prvHeapInit+0xac>)
 8008430:	4413      	add	r3, r2
 8008432:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008438:	4a1d      	ldr	r2, [pc, #116]	@ (80084b0 <prvHeapInit+0xb0>)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800843e:	4b1c      	ldr	r3, [pc, #112]	@ (80084b0 <prvHeapInit+0xb0>)
 8008440:	2200      	movs	r2, #0
 8008442:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	68ba      	ldr	r2, [r7, #8]
 8008448:	4413      	add	r3, r2
 800844a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800844c:	2208      	movs	r2, #8
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	1a9b      	subs	r3, r3, r2
 8008452:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	f023 0307 	bic.w	r3, r3, #7
 800845a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	4a15      	ldr	r2, [pc, #84]	@ (80084b4 <prvHeapInit+0xb4>)
 8008460:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008462:	4b14      	ldr	r3, [pc, #80]	@ (80084b4 <prvHeapInit+0xb4>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	2200      	movs	r2, #0
 8008468:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800846a:	4b12      	ldr	r3, [pc, #72]	@ (80084b4 <prvHeapInit+0xb4>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	2200      	movs	r2, #0
 8008470:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	68fa      	ldr	r2, [r7, #12]
 800847a:	1ad2      	subs	r2, r2, r3
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008480:	4b0c      	ldr	r3, [pc, #48]	@ (80084b4 <prvHeapInit+0xb4>)
 8008482:	681a      	ldr	r2, [r3, #0]
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	685b      	ldr	r3, [r3, #4]
 800848c:	4a0a      	ldr	r2, [pc, #40]	@ (80084b8 <prvHeapInit+0xb8>)
 800848e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	685b      	ldr	r3, [r3, #4]
 8008494:	4a09      	ldr	r2, [pc, #36]	@ (80084bc <prvHeapInit+0xbc>)
 8008496:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008498:	4b09      	ldr	r3, [pc, #36]	@ (80084c0 <prvHeapInit+0xc0>)
 800849a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800849e:	601a      	str	r2, [r3, #0]
}
 80084a0:	bf00      	nop
 80084a2:	3714      	adds	r7, #20
 80084a4:	46bd      	mov	sp, r7
 80084a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084aa:	4770      	bx	lr
 80084ac:	200010d0 	.word	0x200010d0
 80084b0:	20004cd0 	.word	0x20004cd0
 80084b4:	20004cd8 	.word	0x20004cd8
 80084b8:	20004ce0 	.word	0x20004ce0
 80084bc:	20004cdc 	.word	0x20004cdc
 80084c0:	20004cec 	.word	0x20004cec

080084c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80084c4:	b480      	push	{r7}
 80084c6:	b085      	sub	sp, #20
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80084cc:	4b28      	ldr	r3, [pc, #160]	@ (8008570 <prvInsertBlockIntoFreeList+0xac>)
 80084ce:	60fb      	str	r3, [r7, #12]
 80084d0:	e002      	b.n	80084d8 <prvInsertBlockIntoFreeList+0x14>
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	60fb      	str	r3, [r7, #12]
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	687a      	ldr	r2, [r7, #4]
 80084de:	429a      	cmp	r2, r3
 80084e0:	d8f7      	bhi.n	80084d2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	685b      	ldr	r3, [r3, #4]
 80084ea:	68ba      	ldr	r2, [r7, #8]
 80084ec:	4413      	add	r3, r2
 80084ee:	687a      	ldr	r2, [r7, #4]
 80084f0:	429a      	cmp	r2, r3
 80084f2:	d108      	bne.n	8008506 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	685a      	ldr	r2, [r3, #4]
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	685b      	ldr	r3, [r3, #4]
 80084fc:	441a      	add	r2, r3
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	685b      	ldr	r3, [r3, #4]
 800850e:	68ba      	ldr	r2, [r7, #8]
 8008510:	441a      	add	r2, r3
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	429a      	cmp	r2, r3
 8008518:	d118      	bne.n	800854c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681a      	ldr	r2, [r3, #0]
 800851e:	4b15      	ldr	r3, [pc, #84]	@ (8008574 <prvInsertBlockIntoFreeList+0xb0>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	429a      	cmp	r2, r3
 8008524:	d00d      	beq.n	8008542 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	685a      	ldr	r2, [r3, #4]
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	685b      	ldr	r3, [r3, #4]
 8008530:	441a      	add	r2, r3
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	681a      	ldr	r2, [r3, #0]
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	601a      	str	r2, [r3, #0]
 8008540:	e008      	b.n	8008554 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008542:	4b0c      	ldr	r3, [pc, #48]	@ (8008574 <prvInsertBlockIntoFreeList+0xb0>)
 8008544:	681a      	ldr	r2, [r3, #0]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	601a      	str	r2, [r3, #0]
 800854a:	e003      	b.n	8008554 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681a      	ldr	r2, [r3, #0]
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008554:	68fa      	ldr	r2, [r7, #12]
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	429a      	cmp	r2, r3
 800855a:	d002      	beq.n	8008562 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	687a      	ldr	r2, [r7, #4]
 8008560:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008562:	bf00      	nop
 8008564:	3714      	adds	r7, #20
 8008566:	46bd      	mov	sp, r7
 8008568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856c:	4770      	bx	lr
 800856e:	bf00      	nop
 8008570:	20004cd0 	.word	0x20004cd0
 8008574:	20004cd8 	.word	0x20004cd8

08008578 <swapfunc>:
 8008578:	2b02      	cmp	r3, #2
 800857a:	b510      	push	{r4, lr}
 800857c:	d00a      	beq.n	8008594 <swapfunc+0x1c>
 800857e:	0892      	lsrs	r2, r2, #2
 8008580:	3a01      	subs	r2, #1
 8008582:	6803      	ldr	r3, [r0, #0]
 8008584:	680c      	ldr	r4, [r1, #0]
 8008586:	f840 4b04 	str.w	r4, [r0], #4
 800858a:	2a00      	cmp	r2, #0
 800858c:	f841 3b04 	str.w	r3, [r1], #4
 8008590:	dcf6      	bgt.n	8008580 <swapfunc+0x8>
 8008592:	bd10      	pop	{r4, pc}
 8008594:	4402      	add	r2, r0
 8008596:	780c      	ldrb	r4, [r1, #0]
 8008598:	7803      	ldrb	r3, [r0, #0]
 800859a:	f800 4b01 	strb.w	r4, [r0], #1
 800859e:	f801 3b01 	strb.w	r3, [r1], #1
 80085a2:	1a13      	subs	r3, r2, r0
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	dcf6      	bgt.n	8008596 <swapfunc+0x1e>
 80085a8:	e7f3      	b.n	8008592 <swapfunc+0x1a>

080085aa <med3.constprop.0>:
 80085aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ac:	460f      	mov	r7, r1
 80085ae:	4616      	mov	r6, r2
 80085b0:	4604      	mov	r4, r0
 80085b2:	461d      	mov	r5, r3
 80085b4:	4798      	blx	r3
 80085b6:	2800      	cmp	r0, #0
 80085b8:	4631      	mov	r1, r6
 80085ba:	4638      	mov	r0, r7
 80085bc:	da0c      	bge.n	80085d8 <med3.constprop.0+0x2e>
 80085be:	47a8      	blx	r5
 80085c0:	2800      	cmp	r0, #0
 80085c2:	da02      	bge.n	80085ca <med3.constprop.0+0x20>
 80085c4:	463c      	mov	r4, r7
 80085c6:	4620      	mov	r0, r4
 80085c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085ca:	4631      	mov	r1, r6
 80085cc:	4620      	mov	r0, r4
 80085ce:	47a8      	blx	r5
 80085d0:	2800      	cmp	r0, #0
 80085d2:	daf8      	bge.n	80085c6 <med3.constprop.0+0x1c>
 80085d4:	4634      	mov	r4, r6
 80085d6:	e7f6      	b.n	80085c6 <med3.constprop.0+0x1c>
 80085d8:	47a8      	blx	r5
 80085da:	2800      	cmp	r0, #0
 80085dc:	dcf2      	bgt.n	80085c4 <med3.constprop.0+0x1a>
 80085de:	4631      	mov	r1, r6
 80085e0:	4620      	mov	r0, r4
 80085e2:	47a8      	blx	r5
 80085e4:	2800      	cmp	r0, #0
 80085e6:	daf5      	bge.n	80085d4 <med3.constprop.0+0x2a>
 80085e8:	e7ed      	b.n	80085c6 <med3.constprop.0+0x1c>

080085ea <qsort>:
 80085ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085ee:	b095      	sub	sp, #84	@ 0x54
 80085f0:	4607      	mov	r7, r0
 80085f2:	9300      	str	r3, [sp, #0]
 80085f4:	ea40 0302 	orr.w	r3, r0, r2
 80085f8:	079b      	lsls	r3, r3, #30
 80085fa:	4615      	mov	r5, r2
 80085fc:	d118      	bne.n	8008630 <qsort+0x46>
 80085fe:	f1b2 0804 	subs.w	r8, r2, #4
 8008602:	bf18      	it	ne
 8008604:	f04f 0801 	movne.w	r8, #1
 8008608:	2300      	movs	r3, #0
 800860a:	9301      	str	r3, [sp, #4]
 800860c:	fb05 f401 	mul.w	r4, r5, r1
 8008610:	193b      	adds	r3, r7, r4
 8008612:	2906      	cmp	r1, #6
 8008614:	eb07 0b05 	add.w	fp, r7, r5
 8008618:	9302      	str	r3, [sp, #8]
 800861a:	d828      	bhi.n	800866e <qsort+0x84>
 800861c:	9b02      	ldr	r3, [sp, #8]
 800861e:	459b      	cmp	fp, r3
 8008620:	d310      	bcc.n	8008644 <qsort+0x5a>
 8008622:	9b01      	ldr	r3, [sp, #4]
 8008624:	2b00      	cmp	r3, #0
 8008626:	f040 8117 	bne.w	8008858 <qsort+0x26e>
 800862a:	b015      	add	sp, #84	@ 0x54
 800862c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008630:	f04f 0802 	mov.w	r8, #2
 8008634:	e7e8      	b.n	8008608 <qsort+0x1e>
 8008636:	4643      	mov	r3, r8
 8008638:	462a      	mov	r2, r5
 800863a:	4631      	mov	r1, r6
 800863c:	4620      	mov	r0, r4
 800863e:	f7ff ff9b 	bl	8008578 <swapfunc>
 8008642:	e00f      	b.n	8008664 <qsort+0x7a>
 8008644:	465c      	mov	r4, fp
 8008646:	e00e      	b.n	8008666 <qsort+0x7c>
 8008648:	1b66      	subs	r6, r4, r5
 800864a:	9b00      	ldr	r3, [sp, #0]
 800864c:	4621      	mov	r1, r4
 800864e:	4630      	mov	r0, r6
 8008650:	4798      	blx	r3
 8008652:	2800      	cmp	r0, #0
 8008654:	dd09      	ble.n	800866a <qsort+0x80>
 8008656:	f1b8 0f00 	cmp.w	r8, #0
 800865a:	d1ec      	bne.n	8008636 <qsort+0x4c>
 800865c:	6823      	ldr	r3, [r4, #0]
 800865e:	6832      	ldr	r2, [r6, #0]
 8008660:	6022      	str	r2, [r4, #0]
 8008662:	6033      	str	r3, [r6, #0]
 8008664:	4634      	mov	r4, r6
 8008666:	42a7      	cmp	r7, r4
 8008668:	d3ee      	bcc.n	8008648 <qsort+0x5e>
 800866a:	44ab      	add	fp, r5
 800866c:	e7d6      	b.n	800861c <qsort+0x32>
 800866e:	ea4f 0951 	mov.w	r9, r1, lsr #1
 8008672:	1b64      	subs	r4, r4, r5
 8008674:	2907      	cmp	r1, #7
 8008676:	fb05 7909 	mla	r9, r5, r9, r7
 800867a:	443c      	add	r4, r7
 800867c:	d021      	beq.n	80086c2 <qsort+0xd8>
 800867e:	2928      	cmp	r1, #40	@ 0x28
 8008680:	d944      	bls.n	800870c <qsort+0x122>
 8008682:	08ce      	lsrs	r6, r1, #3
 8008684:	436e      	muls	r6, r5
 8008686:	9b00      	ldr	r3, [sp, #0]
 8008688:	eb07 0246 	add.w	r2, r7, r6, lsl #1
 800868c:	19b9      	adds	r1, r7, r6
 800868e:	4638      	mov	r0, r7
 8008690:	f7ff ff8b 	bl	80085aa <med3.constprop.0>
 8008694:	4649      	mov	r1, r9
 8008696:	eb09 0206 	add.w	r2, r9, r6
 800869a:	9b00      	ldr	r3, [sp, #0]
 800869c:	4682      	mov	sl, r0
 800869e:	1b88      	subs	r0, r1, r6
 80086a0:	f7ff ff83 	bl	80085aa <med3.constprop.0>
 80086a4:	4622      	mov	r2, r4
 80086a6:	9b00      	ldr	r3, [sp, #0]
 80086a8:	4681      	mov	r9, r0
 80086aa:	1ba1      	subs	r1, r4, r6
 80086ac:	eba4 0046 	sub.w	r0, r4, r6, lsl #1
 80086b0:	f7ff ff7b 	bl	80085aa <med3.constprop.0>
 80086b4:	4602      	mov	r2, r0
 80086b6:	4649      	mov	r1, r9
 80086b8:	9b00      	ldr	r3, [sp, #0]
 80086ba:	4650      	mov	r0, sl
 80086bc:	f7ff ff75 	bl	80085aa <med3.constprop.0>
 80086c0:	4681      	mov	r9, r0
 80086c2:	f1b8 0f00 	cmp.w	r8, #0
 80086c6:	d124      	bne.n	8008712 <qsort+0x128>
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	f8d9 2000 	ldr.w	r2, [r9]
 80086ce:	603a      	str	r2, [r7, #0]
 80086d0:	f8c9 3000 	str.w	r3, [r9]
 80086d4:	46d9      	mov	r9, fp
 80086d6:	46a2      	mov	sl, r4
 80086d8:	465e      	mov	r6, fp
 80086da:	2300      	movs	r3, #0
 80086dc:	45a1      	cmp	r9, r4
 80086de:	d836      	bhi.n	800874e <qsort+0x164>
 80086e0:	9303      	str	r3, [sp, #12]
 80086e2:	4639      	mov	r1, r7
 80086e4:	9b00      	ldr	r3, [sp, #0]
 80086e6:	4648      	mov	r0, r9
 80086e8:	4798      	blx	r3
 80086ea:	2800      	cmp	r0, #0
 80086ec:	9b03      	ldr	r3, [sp, #12]
 80086ee:	dc2c      	bgt.n	800874a <qsort+0x160>
 80086f0:	d10a      	bne.n	8008708 <qsort+0x11e>
 80086f2:	f1b8 0f00 	cmp.w	r8, #0
 80086f6:	d113      	bne.n	8008720 <qsort+0x136>
 80086f8:	6833      	ldr	r3, [r6, #0]
 80086fa:	f8d9 2000 	ldr.w	r2, [r9]
 80086fe:	6032      	str	r2, [r6, #0]
 8008700:	f8c9 3000 	str.w	r3, [r9]
 8008704:	442e      	add	r6, r5
 8008706:	2301      	movs	r3, #1
 8008708:	44a9      	add	r9, r5
 800870a:	e7e7      	b.n	80086dc <qsort+0xf2>
 800870c:	4622      	mov	r2, r4
 800870e:	46ba      	mov	sl, r7
 8008710:	e7d1      	b.n	80086b6 <qsort+0xcc>
 8008712:	4643      	mov	r3, r8
 8008714:	462a      	mov	r2, r5
 8008716:	4649      	mov	r1, r9
 8008718:	4638      	mov	r0, r7
 800871a:	f7ff ff2d 	bl	8008578 <swapfunc>
 800871e:	e7d9      	b.n	80086d4 <qsort+0xea>
 8008720:	4643      	mov	r3, r8
 8008722:	462a      	mov	r2, r5
 8008724:	4649      	mov	r1, r9
 8008726:	4630      	mov	r0, r6
 8008728:	f7ff ff26 	bl	8008578 <swapfunc>
 800872c:	e7ea      	b.n	8008704 <qsort+0x11a>
 800872e:	d10b      	bne.n	8008748 <qsort+0x15e>
 8008730:	f1b8 0f00 	cmp.w	r8, #0
 8008734:	d113      	bne.n	800875e <qsort+0x174>
 8008736:	6823      	ldr	r3, [r4, #0]
 8008738:	f8da 2000 	ldr.w	r2, [sl]
 800873c:	6022      	str	r2, [r4, #0]
 800873e:	f8ca 3000 	str.w	r3, [sl]
 8008742:	ebaa 0a05 	sub.w	sl, sl, r5
 8008746:	2301      	movs	r3, #1
 8008748:	1b64      	subs	r4, r4, r5
 800874a:	45a1      	cmp	r9, r4
 800874c:	d90e      	bls.n	800876c <qsort+0x182>
 800874e:	2b00      	cmp	r3, #0
 8008750:	d140      	bne.n	80087d4 <qsort+0x1ea>
 8008752:	9b02      	ldr	r3, [sp, #8]
 8008754:	459b      	cmp	fp, r3
 8008756:	f4bf af64 	bcs.w	8008622 <qsort+0x38>
 800875a:	465c      	mov	r4, fp
 800875c:	e036      	b.n	80087cc <qsort+0x1e2>
 800875e:	4643      	mov	r3, r8
 8008760:	462a      	mov	r2, r5
 8008762:	4651      	mov	r1, sl
 8008764:	4620      	mov	r0, r4
 8008766:	f7ff ff07 	bl	8008578 <swapfunc>
 800876a:	e7ea      	b.n	8008742 <qsort+0x158>
 800876c:	9303      	str	r3, [sp, #12]
 800876e:	4639      	mov	r1, r7
 8008770:	9b00      	ldr	r3, [sp, #0]
 8008772:	4620      	mov	r0, r4
 8008774:	4798      	blx	r3
 8008776:	2800      	cmp	r0, #0
 8008778:	9b03      	ldr	r3, [sp, #12]
 800877a:	dad8      	bge.n	800872e <qsort+0x144>
 800877c:	f1b8 0f00 	cmp.w	r8, #0
 8008780:	d107      	bne.n	8008792 <qsort+0x1a8>
 8008782:	f8d9 3000 	ldr.w	r3, [r9]
 8008786:	6822      	ldr	r2, [r4, #0]
 8008788:	f8c9 2000 	str.w	r2, [r9]
 800878c:	6023      	str	r3, [r4, #0]
 800878e:	1b64      	subs	r4, r4, r5
 8008790:	e7b9      	b.n	8008706 <qsort+0x11c>
 8008792:	4643      	mov	r3, r8
 8008794:	462a      	mov	r2, r5
 8008796:	4621      	mov	r1, r4
 8008798:	4648      	mov	r0, r9
 800879a:	f7ff feed 	bl	8008578 <swapfunc>
 800879e:	e7f6      	b.n	800878e <qsort+0x1a4>
 80087a0:	4643      	mov	r3, r8
 80087a2:	462a      	mov	r2, r5
 80087a4:	4631      	mov	r1, r6
 80087a6:	4620      	mov	r0, r4
 80087a8:	f7ff fee6 	bl	8008578 <swapfunc>
 80087ac:	e00d      	b.n	80087ca <qsort+0x1e0>
 80087ae:	1b66      	subs	r6, r4, r5
 80087b0:	9b00      	ldr	r3, [sp, #0]
 80087b2:	4621      	mov	r1, r4
 80087b4:	4630      	mov	r0, r6
 80087b6:	4798      	blx	r3
 80087b8:	2800      	cmp	r0, #0
 80087ba:	dd09      	ble.n	80087d0 <qsort+0x1e6>
 80087bc:	f1b8 0f00 	cmp.w	r8, #0
 80087c0:	d1ee      	bne.n	80087a0 <qsort+0x1b6>
 80087c2:	6823      	ldr	r3, [r4, #0]
 80087c4:	6832      	ldr	r2, [r6, #0]
 80087c6:	6022      	str	r2, [r4, #0]
 80087c8:	6033      	str	r3, [r6, #0]
 80087ca:	4634      	mov	r4, r6
 80087cc:	42a7      	cmp	r7, r4
 80087ce:	d3ee      	bcc.n	80087ae <qsort+0x1c4>
 80087d0:	44ab      	add	fp, r5
 80087d2:	e7be      	b.n	8008752 <qsort+0x168>
 80087d4:	eba9 0b06 	sub.w	fp, r9, r6
 80087d8:	1bf2      	subs	r2, r6, r7
 80087da:	455a      	cmp	r2, fp
 80087dc:	bfa8      	it	ge
 80087de:	465a      	movge	r2, fp
 80087e0:	b12a      	cbz	r2, 80087ee <qsort+0x204>
 80087e2:	4643      	mov	r3, r8
 80087e4:	eba9 0102 	sub.w	r1, r9, r2
 80087e8:	4638      	mov	r0, r7
 80087ea:	f7ff fec5 	bl	8008578 <swapfunc>
 80087ee:	9b02      	ldr	r3, [sp, #8]
 80087f0:	eba3 020a 	sub.w	r2, r3, sl
 80087f4:	ebaa 0404 	sub.w	r4, sl, r4
 80087f8:	1b52      	subs	r2, r2, r5
 80087fa:	42a2      	cmp	r2, r4
 80087fc:	bf28      	it	cs
 80087fe:	4622      	movcs	r2, r4
 8008800:	b12a      	cbz	r2, 800880e <qsort+0x224>
 8008802:	9902      	ldr	r1, [sp, #8]
 8008804:	4643      	mov	r3, r8
 8008806:	1a89      	subs	r1, r1, r2
 8008808:	4648      	mov	r0, r9
 800880a:	f7ff feb5 	bl	8008578 <swapfunc>
 800880e:	9b02      	ldr	r3, [sp, #8]
 8008810:	455c      	cmp	r4, fp
 8008812:	eba3 0604 	sub.w	r6, r3, r4
 8008816:	d805      	bhi.n	8008824 <qsort+0x23a>
 8008818:	4623      	mov	r3, r4
 800881a:	465c      	mov	r4, fp
 800881c:	469b      	mov	fp, r3
 800881e:	4633      	mov	r3, r6
 8008820:	463e      	mov	r6, r7
 8008822:	461f      	mov	r7, r3
 8008824:	45ab      	cmp	fp, r5
 8008826:	d920      	bls.n	800886a <qsort+0x280>
 8008828:	fbbb f1f5 	udiv	r1, fp, r5
 800882c:	9b01      	ldr	r3, [sp, #4]
 800882e:	2b07      	cmp	r3, #7
 8008830:	d80b      	bhi.n	800884a <qsort+0x260>
 8008832:	fbb4 f4f5 	udiv	r4, r4, r5
 8008836:	aa14      	add	r2, sp, #80	@ 0x50
 8008838:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800883c:	f843 6c40 	str.w	r6, [r3, #-64]
 8008840:	f843 4c3c 	str.w	r4, [r3, #-60]
 8008844:	9b01      	ldr	r3, [sp, #4]
 8008846:	3301      	adds	r3, #1
 8008848:	e6df      	b.n	800860a <qsort+0x20>
 800884a:	9b00      	ldr	r3, [sp, #0]
 800884c:	462a      	mov	r2, r5
 800884e:	4638      	mov	r0, r7
 8008850:	f7ff fecb 	bl	80085ea <qsort>
 8008854:	42ac      	cmp	r4, r5
 8008856:	d80b      	bhi.n	8008870 <qsort+0x286>
 8008858:	9b01      	ldr	r3, [sp, #4]
 800885a:	aa14      	add	r2, sp, #80	@ 0x50
 800885c:	3b01      	subs	r3, #1
 800885e:	9301      	str	r3, [sp, #4]
 8008860:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008864:	e953 7110 	ldrd	r7, r1, [r3, #-64]	@ 0x40
 8008868:	e6d0      	b.n	800860c <qsort+0x22>
 800886a:	42ac      	cmp	r4, r5
 800886c:	f67f aed9 	bls.w	8008622 <qsort+0x38>
 8008870:	fbb4 f1f5 	udiv	r1, r4, r5
 8008874:	4637      	mov	r7, r6
 8008876:	e6c9      	b.n	800860c <qsort+0x22>

08008878 <sniprintf>:
 8008878:	b40c      	push	{r2, r3}
 800887a:	b530      	push	{r4, r5, lr}
 800887c:	4b18      	ldr	r3, [pc, #96]	@ (80088e0 <sniprintf+0x68>)
 800887e:	1e0c      	subs	r4, r1, #0
 8008880:	681d      	ldr	r5, [r3, #0]
 8008882:	b09d      	sub	sp, #116	@ 0x74
 8008884:	da08      	bge.n	8008898 <sniprintf+0x20>
 8008886:	238b      	movs	r3, #139	@ 0x8b
 8008888:	602b      	str	r3, [r5, #0]
 800888a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800888e:	b01d      	add	sp, #116	@ 0x74
 8008890:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008894:	b002      	add	sp, #8
 8008896:	4770      	bx	lr
 8008898:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800889c:	f8ad 3014 	strh.w	r3, [sp, #20]
 80088a0:	f04f 0300 	mov.w	r3, #0
 80088a4:	931b      	str	r3, [sp, #108]	@ 0x6c
 80088a6:	bf14      	ite	ne
 80088a8:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80088ac:	4623      	moveq	r3, r4
 80088ae:	9304      	str	r3, [sp, #16]
 80088b0:	9307      	str	r3, [sp, #28]
 80088b2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80088b6:	9002      	str	r0, [sp, #8]
 80088b8:	9006      	str	r0, [sp, #24]
 80088ba:	f8ad 3016 	strh.w	r3, [sp, #22]
 80088be:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80088c0:	ab21      	add	r3, sp, #132	@ 0x84
 80088c2:	a902      	add	r1, sp, #8
 80088c4:	4628      	mov	r0, r5
 80088c6:	9301      	str	r3, [sp, #4]
 80088c8:	f000 f952 	bl	8008b70 <_svfiprintf_r>
 80088cc:	1c43      	adds	r3, r0, #1
 80088ce:	bfbc      	itt	lt
 80088d0:	238b      	movlt	r3, #139	@ 0x8b
 80088d2:	602b      	strlt	r3, [r5, #0]
 80088d4:	2c00      	cmp	r4, #0
 80088d6:	d0da      	beq.n	800888e <sniprintf+0x16>
 80088d8:	9b02      	ldr	r3, [sp, #8]
 80088da:	2200      	movs	r2, #0
 80088dc:	701a      	strb	r2, [r3, #0]
 80088de:	e7d6      	b.n	800888e <sniprintf+0x16>
 80088e0:	20000010 	.word	0x20000010

080088e4 <memset>:
 80088e4:	4402      	add	r2, r0
 80088e6:	4603      	mov	r3, r0
 80088e8:	4293      	cmp	r3, r2
 80088ea:	d100      	bne.n	80088ee <memset+0xa>
 80088ec:	4770      	bx	lr
 80088ee:	f803 1b01 	strb.w	r1, [r3], #1
 80088f2:	e7f9      	b.n	80088e8 <memset+0x4>

080088f4 <__errno>:
 80088f4:	4b01      	ldr	r3, [pc, #4]	@ (80088fc <__errno+0x8>)
 80088f6:	6818      	ldr	r0, [r3, #0]
 80088f8:	4770      	bx	lr
 80088fa:	bf00      	nop
 80088fc:	20000010 	.word	0x20000010

08008900 <__libc_init_array>:
 8008900:	b570      	push	{r4, r5, r6, lr}
 8008902:	4d0d      	ldr	r5, [pc, #52]	@ (8008938 <__libc_init_array+0x38>)
 8008904:	4c0d      	ldr	r4, [pc, #52]	@ (800893c <__libc_init_array+0x3c>)
 8008906:	1b64      	subs	r4, r4, r5
 8008908:	10a4      	asrs	r4, r4, #2
 800890a:	2600      	movs	r6, #0
 800890c:	42a6      	cmp	r6, r4
 800890e:	d109      	bne.n	8008924 <__libc_init_array+0x24>
 8008910:	4d0b      	ldr	r5, [pc, #44]	@ (8008940 <__libc_init_array+0x40>)
 8008912:	4c0c      	ldr	r4, [pc, #48]	@ (8008944 <__libc_init_array+0x44>)
 8008914:	f000 fcc2 	bl	800929c <_init>
 8008918:	1b64      	subs	r4, r4, r5
 800891a:	10a4      	asrs	r4, r4, #2
 800891c:	2600      	movs	r6, #0
 800891e:	42a6      	cmp	r6, r4
 8008920:	d105      	bne.n	800892e <__libc_init_array+0x2e>
 8008922:	bd70      	pop	{r4, r5, r6, pc}
 8008924:	f855 3b04 	ldr.w	r3, [r5], #4
 8008928:	4798      	blx	r3
 800892a:	3601      	adds	r6, #1
 800892c:	e7ee      	b.n	800890c <__libc_init_array+0xc>
 800892e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008932:	4798      	blx	r3
 8008934:	3601      	adds	r6, #1
 8008936:	e7f2      	b.n	800891e <__libc_init_array+0x1e>
 8008938:	080093bc 	.word	0x080093bc
 800893c:	080093bc 	.word	0x080093bc
 8008940:	080093bc 	.word	0x080093bc
 8008944:	080093c0 	.word	0x080093c0

08008948 <__retarget_lock_acquire_recursive>:
 8008948:	4770      	bx	lr

0800894a <__retarget_lock_release_recursive>:
 800894a:	4770      	bx	lr

0800894c <_reclaim_reent>:
 800894c:	4b2d      	ldr	r3, [pc, #180]	@ (8008a04 <_reclaim_reent+0xb8>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4283      	cmp	r3, r0
 8008952:	b570      	push	{r4, r5, r6, lr}
 8008954:	4604      	mov	r4, r0
 8008956:	d053      	beq.n	8008a00 <_reclaim_reent+0xb4>
 8008958:	69c3      	ldr	r3, [r0, #28]
 800895a:	b31b      	cbz	r3, 80089a4 <_reclaim_reent+0x58>
 800895c:	68db      	ldr	r3, [r3, #12]
 800895e:	b163      	cbz	r3, 800897a <_reclaim_reent+0x2e>
 8008960:	2500      	movs	r5, #0
 8008962:	69e3      	ldr	r3, [r4, #28]
 8008964:	68db      	ldr	r3, [r3, #12]
 8008966:	5959      	ldr	r1, [r3, r5]
 8008968:	b9b1      	cbnz	r1, 8008998 <_reclaim_reent+0x4c>
 800896a:	3504      	adds	r5, #4
 800896c:	2d80      	cmp	r5, #128	@ 0x80
 800896e:	d1f8      	bne.n	8008962 <_reclaim_reent+0x16>
 8008970:	69e3      	ldr	r3, [r4, #28]
 8008972:	4620      	mov	r0, r4
 8008974:	68d9      	ldr	r1, [r3, #12]
 8008976:	f000 f855 	bl	8008a24 <_free_r>
 800897a:	69e3      	ldr	r3, [r4, #28]
 800897c:	6819      	ldr	r1, [r3, #0]
 800897e:	b111      	cbz	r1, 8008986 <_reclaim_reent+0x3a>
 8008980:	4620      	mov	r0, r4
 8008982:	f000 f84f 	bl	8008a24 <_free_r>
 8008986:	69e3      	ldr	r3, [r4, #28]
 8008988:	689d      	ldr	r5, [r3, #8]
 800898a:	b15d      	cbz	r5, 80089a4 <_reclaim_reent+0x58>
 800898c:	4629      	mov	r1, r5
 800898e:	4620      	mov	r0, r4
 8008990:	682d      	ldr	r5, [r5, #0]
 8008992:	f000 f847 	bl	8008a24 <_free_r>
 8008996:	e7f8      	b.n	800898a <_reclaim_reent+0x3e>
 8008998:	680e      	ldr	r6, [r1, #0]
 800899a:	4620      	mov	r0, r4
 800899c:	f000 f842 	bl	8008a24 <_free_r>
 80089a0:	4631      	mov	r1, r6
 80089a2:	e7e1      	b.n	8008968 <_reclaim_reent+0x1c>
 80089a4:	6961      	ldr	r1, [r4, #20]
 80089a6:	b111      	cbz	r1, 80089ae <_reclaim_reent+0x62>
 80089a8:	4620      	mov	r0, r4
 80089aa:	f000 f83b 	bl	8008a24 <_free_r>
 80089ae:	69e1      	ldr	r1, [r4, #28]
 80089b0:	b111      	cbz	r1, 80089b8 <_reclaim_reent+0x6c>
 80089b2:	4620      	mov	r0, r4
 80089b4:	f000 f836 	bl	8008a24 <_free_r>
 80089b8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80089ba:	b111      	cbz	r1, 80089c2 <_reclaim_reent+0x76>
 80089bc:	4620      	mov	r0, r4
 80089be:	f000 f831 	bl	8008a24 <_free_r>
 80089c2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80089c4:	b111      	cbz	r1, 80089cc <_reclaim_reent+0x80>
 80089c6:	4620      	mov	r0, r4
 80089c8:	f000 f82c 	bl	8008a24 <_free_r>
 80089cc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80089ce:	b111      	cbz	r1, 80089d6 <_reclaim_reent+0x8a>
 80089d0:	4620      	mov	r0, r4
 80089d2:	f000 f827 	bl	8008a24 <_free_r>
 80089d6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80089d8:	b111      	cbz	r1, 80089e0 <_reclaim_reent+0x94>
 80089da:	4620      	mov	r0, r4
 80089dc:	f000 f822 	bl	8008a24 <_free_r>
 80089e0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80089e2:	b111      	cbz	r1, 80089ea <_reclaim_reent+0x9e>
 80089e4:	4620      	mov	r0, r4
 80089e6:	f000 f81d 	bl	8008a24 <_free_r>
 80089ea:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80089ec:	b111      	cbz	r1, 80089f4 <_reclaim_reent+0xa8>
 80089ee:	4620      	mov	r0, r4
 80089f0:	f000 f818 	bl	8008a24 <_free_r>
 80089f4:	6a23      	ldr	r3, [r4, #32]
 80089f6:	b11b      	cbz	r3, 8008a00 <_reclaim_reent+0xb4>
 80089f8:	4620      	mov	r0, r4
 80089fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80089fe:	4718      	bx	r3
 8008a00:	bd70      	pop	{r4, r5, r6, pc}
 8008a02:	bf00      	nop
 8008a04:	20000010 	.word	0x20000010

08008a08 <memcpy>:
 8008a08:	440a      	add	r2, r1
 8008a0a:	4291      	cmp	r1, r2
 8008a0c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008a10:	d100      	bne.n	8008a14 <memcpy+0xc>
 8008a12:	4770      	bx	lr
 8008a14:	b510      	push	{r4, lr}
 8008a16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a1e:	4291      	cmp	r1, r2
 8008a20:	d1f9      	bne.n	8008a16 <memcpy+0xe>
 8008a22:	bd10      	pop	{r4, pc}

08008a24 <_free_r>:
 8008a24:	b538      	push	{r3, r4, r5, lr}
 8008a26:	4605      	mov	r5, r0
 8008a28:	2900      	cmp	r1, #0
 8008a2a:	d041      	beq.n	8008ab0 <_free_r+0x8c>
 8008a2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a30:	1f0c      	subs	r4, r1, #4
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	bfb8      	it	lt
 8008a36:	18e4      	addlt	r4, r4, r3
 8008a38:	f000 fbc4 	bl	80091c4 <__malloc_lock>
 8008a3c:	4a1d      	ldr	r2, [pc, #116]	@ (8008ab4 <_free_r+0x90>)
 8008a3e:	6813      	ldr	r3, [r2, #0]
 8008a40:	b933      	cbnz	r3, 8008a50 <_free_r+0x2c>
 8008a42:	6063      	str	r3, [r4, #4]
 8008a44:	6014      	str	r4, [r2, #0]
 8008a46:	4628      	mov	r0, r5
 8008a48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a4c:	f000 bbc0 	b.w	80091d0 <__malloc_unlock>
 8008a50:	42a3      	cmp	r3, r4
 8008a52:	d908      	bls.n	8008a66 <_free_r+0x42>
 8008a54:	6820      	ldr	r0, [r4, #0]
 8008a56:	1821      	adds	r1, r4, r0
 8008a58:	428b      	cmp	r3, r1
 8008a5a:	bf01      	itttt	eq
 8008a5c:	6819      	ldreq	r1, [r3, #0]
 8008a5e:	685b      	ldreq	r3, [r3, #4]
 8008a60:	1809      	addeq	r1, r1, r0
 8008a62:	6021      	streq	r1, [r4, #0]
 8008a64:	e7ed      	b.n	8008a42 <_free_r+0x1e>
 8008a66:	461a      	mov	r2, r3
 8008a68:	685b      	ldr	r3, [r3, #4]
 8008a6a:	b10b      	cbz	r3, 8008a70 <_free_r+0x4c>
 8008a6c:	42a3      	cmp	r3, r4
 8008a6e:	d9fa      	bls.n	8008a66 <_free_r+0x42>
 8008a70:	6811      	ldr	r1, [r2, #0]
 8008a72:	1850      	adds	r0, r2, r1
 8008a74:	42a0      	cmp	r0, r4
 8008a76:	d10b      	bne.n	8008a90 <_free_r+0x6c>
 8008a78:	6820      	ldr	r0, [r4, #0]
 8008a7a:	4401      	add	r1, r0
 8008a7c:	1850      	adds	r0, r2, r1
 8008a7e:	4283      	cmp	r3, r0
 8008a80:	6011      	str	r1, [r2, #0]
 8008a82:	d1e0      	bne.n	8008a46 <_free_r+0x22>
 8008a84:	6818      	ldr	r0, [r3, #0]
 8008a86:	685b      	ldr	r3, [r3, #4]
 8008a88:	6053      	str	r3, [r2, #4]
 8008a8a:	4408      	add	r0, r1
 8008a8c:	6010      	str	r0, [r2, #0]
 8008a8e:	e7da      	b.n	8008a46 <_free_r+0x22>
 8008a90:	d902      	bls.n	8008a98 <_free_r+0x74>
 8008a92:	230c      	movs	r3, #12
 8008a94:	602b      	str	r3, [r5, #0]
 8008a96:	e7d6      	b.n	8008a46 <_free_r+0x22>
 8008a98:	6820      	ldr	r0, [r4, #0]
 8008a9a:	1821      	adds	r1, r4, r0
 8008a9c:	428b      	cmp	r3, r1
 8008a9e:	bf04      	itt	eq
 8008aa0:	6819      	ldreq	r1, [r3, #0]
 8008aa2:	685b      	ldreq	r3, [r3, #4]
 8008aa4:	6063      	str	r3, [r4, #4]
 8008aa6:	bf04      	itt	eq
 8008aa8:	1809      	addeq	r1, r1, r0
 8008aaa:	6021      	streq	r1, [r4, #0]
 8008aac:	6054      	str	r4, [r2, #4]
 8008aae:	e7ca      	b.n	8008a46 <_free_r+0x22>
 8008ab0:	bd38      	pop	{r3, r4, r5, pc}
 8008ab2:	bf00      	nop
 8008ab4:	20004e34 	.word	0x20004e34

08008ab8 <__ssputs_r>:
 8008ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008abc:	688e      	ldr	r6, [r1, #8]
 8008abe:	461f      	mov	r7, r3
 8008ac0:	42be      	cmp	r6, r7
 8008ac2:	680b      	ldr	r3, [r1, #0]
 8008ac4:	4682      	mov	sl, r0
 8008ac6:	460c      	mov	r4, r1
 8008ac8:	4690      	mov	r8, r2
 8008aca:	d82d      	bhi.n	8008b28 <__ssputs_r+0x70>
 8008acc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008ad0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008ad4:	d026      	beq.n	8008b24 <__ssputs_r+0x6c>
 8008ad6:	6965      	ldr	r5, [r4, #20]
 8008ad8:	6909      	ldr	r1, [r1, #16]
 8008ada:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008ade:	eba3 0901 	sub.w	r9, r3, r1
 8008ae2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008ae6:	1c7b      	adds	r3, r7, #1
 8008ae8:	444b      	add	r3, r9
 8008aea:	106d      	asrs	r5, r5, #1
 8008aec:	429d      	cmp	r5, r3
 8008aee:	bf38      	it	cc
 8008af0:	461d      	movcc	r5, r3
 8008af2:	0553      	lsls	r3, r2, #21
 8008af4:	d527      	bpl.n	8008b46 <__ssputs_r+0x8e>
 8008af6:	4629      	mov	r1, r5
 8008af8:	f000 f958 	bl	8008dac <_malloc_r>
 8008afc:	4606      	mov	r6, r0
 8008afe:	b360      	cbz	r0, 8008b5a <__ssputs_r+0xa2>
 8008b00:	6921      	ldr	r1, [r4, #16]
 8008b02:	464a      	mov	r2, r9
 8008b04:	f7ff ff80 	bl	8008a08 <memcpy>
 8008b08:	89a3      	ldrh	r3, [r4, #12]
 8008b0a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008b0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b12:	81a3      	strh	r3, [r4, #12]
 8008b14:	6126      	str	r6, [r4, #16]
 8008b16:	6165      	str	r5, [r4, #20]
 8008b18:	444e      	add	r6, r9
 8008b1a:	eba5 0509 	sub.w	r5, r5, r9
 8008b1e:	6026      	str	r6, [r4, #0]
 8008b20:	60a5      	str	r5, [r4, #8]
 8008b22:	463e      	mov	r6, r7
 8008b24:	42be      	cmp	r6, r7
 8008b26:	d900      	bls.n	8008b2a <__ssputs_r+0x72>
 8008b28:	463e      	mov	r6, r7
 8008b2a:	6820      	ldr	r0, [r4, #0]
 8008b2c:	4632      	mov	r2, r6
 8008b2e:	4641      	mov	r1, r8
 8008b30:	f000 fb82 	bl	8009238 <memmove>
 8008b34:	68a3      	ldr	r3, [r4, #8]
 8008b36:	1b9b      	subs	r3, r3, r6
 8008b38:	60a3      	str	r3, [r4, #8]
 8008b3a:	6823      	ldr	r3, [r4, #0]
 8008b3c:	4433      	add	r3, r6
 8008b3e:	6023      	str	r3, [r4, #0]
 8008b40:	2000      	movs	r0, #0
 8008b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b46:	462a      	mov	r2, r5
 8008b48:	f000 fb48 	bl	80091dc <_realloc_r>
 8008b4c:	4606      	mov	r6, r0
 8008b4e:	2800      	cmp	r0, #0
 8008b50:	d1e0      	bne.n	8008b14 <__ssputs_r+0x5c>
 8008b52:	6921      	ldr	r1, [r4, #16]
 8008b54:	4650      	mov	r0, sl
 8008b56:	f7ff ff65 	bl	8008a24 <_free_r>
 8008b5a:	230c      	movs	r3, #12
 8008b5c:	f8ca 3000 	str.w	r3, [sl]
 8008b60:	89a3      	ldrh	r3, [r4, #12]
 8008b62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b66:	81a3      	strh	r3, [r4, #12]
 8008b68:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008b6c:	e7e9      	b.n	8008b42 <__ssputs_r+0x8a>
	...

08008b70 <_svfiprintf_r>:
 8008b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b74:	4698      	mov	r8, r3
 8008b76:	898b      	ldrh	r3, [r1, #12]
 8008b78:	061b      	lsls	r3, r3, #24
 8008b7a:	b09d      	sub	sp, #116	@ 0x74
 8008b7c:	4607      	mov	r7, r0
 8008b7e:	460d      	mov	r5, r1
 8008b80:	4614      	mov	r4, r2
 8008b82:	d510      	bpl.n	8008ba6 <_svfiprintf_r+0x36>
 8008b84:	690b      	ldr	r3, [r1, #16]
 8008b86:	b973      	cbnz	r3, 8008ba6 <_svfiprintf_r+0x36>
 8008b88:	2140      	movs	r1, #64	@ 0x40
 8008b8a:	f000 f90f 	bl	8008dac <_malloc_r>
 8008b8e:	6028      	str	r0, [r5, #0]
 8008b90:	6128      	str	r0, [r5, #16]
 8008b92:	b930      	cbnz	r0, 8008ba2 <_svfiprintf_r+0x32>
 8008b94:	230c      	movs	r3, #12
 8008b96:	603b      	str	r3, [r7, #0]
 8008b98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008b9c:	b01d      	add	sp, #116	@ 0x74
 8008b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ba2:	2340      	movs	r3, #64	@ 0x40
 8008ba4:	616b      	str	r3, [r5, #20]
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	9309      	str	r3, [sp, #36]	@ 0x24
 8008baa:	2320      	movs	r3, #32
 8008bac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008bb0:	f8cd 800c 	str.w	r8, [sp, #12]
 8008bb4:	2330      	movs	r3, #48	@ 0x30
 8008bb6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008d54 <_svfiprintf_r+0x1e4>
 8008bba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008bbe:	f04f 0901 	mov.w	r9, #1
 8008bc2:	4623      	mov	r3, r4
 8008bc4:	469a      	mov	sl, r3
 8008bc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008bca:	b10a      	cbz	r2, 8008bd0 <_svfiprintf_r+0x60>
 8008bcc:	2a25      	cmp	r2, #37	@ 0x25
 8008bce:	d1f9      	bne.n	8008bc4 <_svfiprintf_r+0x54>
 8008bd0:	ebba 0b04 	subs.w	fp, sl, r4
 8008bd4:	d00b      	beq.n	8008bee <_svfiprintf_r+0x7e>
 8008bd6:	465b      	mov	r3, fp
 8008bd8:	4622      	mov	r2, r4
 8008bda:	4629      	mov	r1, r5
 8008bdc:	4638      	mov	r0, r7
 8008bde:	f7ff ff6b 	bl	8008ab8 <__ssputs_r>
 8008be2:	3001      	adds	r0, #1
 8008be4:	f000 80a7 	beq.w	8008d36 <_svfiprintf_r+0x1c6>
 8008be8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008bea:	445a      	add	r2, fp
 8008bec:	9209      	str	r2, [sp, #36]	@ 0x24
 8008bee:	f89a 3000 	ldrb.w	r3, [sl]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	f000 809f 	beq.w	8008d36 <_svfiprintf_r+0x1c6>
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008bfe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c02:	f10a 0a01 	add.w	sl, sl, #1
 8008c06:	9304      	str	r3, [sp, #16]
 8008c08:	9307      	str	r3, [sp, #28]
 8008c0a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008c0e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008c10:	4654      	mov	r4, sl
 8008c12:	2205      	movs	r2, #5
 8008c14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c18:	484e      	ldr	r0, [pc, #312]	@ (8008d54 <_svfiprintf_r+0x1e4>)
 8008c1a:	f7f7 fae1 	bl	80001e0 <memchr>
 8008c1e:	9a04      	ldr	r2, [sp, #16]
 8008c20:	b9d8      	cbnz	r0, 8008c5a <_svfiprintf_r+0xea>
 8008c22:	06d0      	lsls	r0, r2, #27
 8008c24:	bf44      	itt	mi
 8008c26:	2320      	movmi	r3, #32
 8008c28:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008c2c:	0711      	lsls	r1, r2, #28
 8008c2e:	bf44      	itt	mi
 8008c30:	232b      	movmi	r3, #43	@ 0x2b
 8008c32:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008c36:	f89a 3000 	ldrb.w	r3, [sl]
 8008c3a:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c3c:	d015      	beq.n	8008c6a <_svfiprintf_r+0xfa>
 8008c3e:	9a07      	ldr	r2, [sp, #28]
 8008c40:	4654      	mov	r4, sl
 8008c42:	2000      	movs	r0, #0
 8008c44:	f04f 0c0a 	mov.w	ip, #10
 8008c48:	4621      	mov	r1, r4
 8008c4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c4e:	3b30      	subs	r3, #48	@ 0x30
 8008c50:	2b09      	cmp	r3, #9
 8008c52:	d94b      	bls.n	8008cec <_svfiprintf_r+0x17c>
 8008c54:	b1b0      	cbz	r0, 8008c84 <_svfiprintf_r+0x114>
 8008c56:	9207      	str	r2, [sp, #28]
 8008c58:	e014      	b.n	8008c84 <_svfiprintf_r+0x114>
 8008c5a:	eba0 0308 	sub.w	r3, r0, r8
 8008c5e:	fa09 f303 	lsl.w	r3, r9, r3
 8008c62:	4313      	orrs	r3, r2
 8008c64:	9304      	str	r3, [sp, #16]
 8008c66:	46a2      	mov	sl, r4
 8008c68:	e7d2      	b.n	8008c10 <_svfiprintf_r+0xa0>
 8008c6a:	9b03      	ldr	r3, [sp, #12]
 8008c6c:	1d19      	adds	r1, r3, #4
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	9103      	str	r1, [sp, #12]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	bfbb      	ittet	lt
 8008c76:	425b      	neglt	r3, r3
 8008c78:	f042 0202 	orrlt.w	r2, r2, #2
 8008c7c:	9307      	strge	r3, [sp, #28]
 8008c7e:	9307      	strlt	r3, [sp, #28]
 8008c80:	bfb8      	it	lt
 8008c82:	9204      	strlt	r2, [sp, #16]
 8008c84:	7823      	ldrb	r3, [r4, #0]
 8008c86:	2b2e      	cmp	r3, #46	@ 0x2e
 8008c88:	d10a      	bne.n	8008ca0 <_svfiprintf_r+0x130>
 8008c8a:	7863      	ldrb	r3, [r4, #1]
 8008c8c:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c8e:	d132      	bne.n	8008cf6 <_svfiprintf_r+0x186>
 8008c90:	9b03      	ldr	r3, [sp, #12]
 8008c92:	1d1a      	adds	r2, r3, #4
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	9203      	str	r2, [sp, #12]
 8008c98:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008c9c:	3402      	adds	r4, #2
 8008c9e:	9305      	str	r3, [sp, #20]
 8008ca0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008d64 <_svfiprintf_r+0x1f4>
 8008ca4:	7821      	ldrb	r1, [r4, #0]
 8008ca6:	2203      	movs	r2, #3
 8008ca8:	4650      	mov	r0, sl
 8008caa:	f7f7 fa99 	bl	80001e0 <memchr>
 8008cae:	b138      	cbz	r0, 8008cc0 <_svfiprintf_r+0x150>
 8008cb0:	9b04      	ldr	r3, [sp, #16]
 8008cb2:	eba0 000a 	sub.w	r0, r0, sl
 8008cb6:	2240      	movs	r2, #64	@ 0x40
 8008cb8:	4082      	lsls	r2, r0
 8008cba:	4313      	orrs	r3, r2
 8008cbc:	3401      	adds	r4, #1
 8008cbe:	9304      	str	r3, [sp, #16]
 8008cc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cc4:	4824      	ldr	r0, [pc, #144]	@ (8008d58 <_svfiprintf_r+0x1e8>)
 8008cc6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008cca:	2206      	movs	r2, #6
 8008ccc:	f7f7 fa88 	bl	80001e0 <memchr>
 8008cd0:	2800      	cmp	r0, #0
 8008cd2:	d036      	beq.n	8008d42 <_svfiprintf_r+0x1d2>
 8008cd4:	4b21      	ldr	r3, [pc, #132]	@ (8008d5c <_svfiprintf_r+0x1ec>)
 8008cd6:	bb1b      	cbnz	r3, 8008d20 <_svfiprintf_r+0x1b0>
 8008cd8:	9b03      	ldr	r3, [sp, #12]
 8008cda:	3307      	adds	r3, #7
 8008cdc:	f023 0307 	bic.w	r3, r3, #7
 8008ce0:	3308      	adds	r3, #8
 8008ce2:	9303      	str	r3, [sp, #12]
 8008ce4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ce6:	4433      	add	r3, r6
 8008ce8:	9309      	str	r3, [sp, #36]	@ 0x24
 8008cea:	e76a      	b.n	8008bc2 <_svfiprintf_r+0x52>
 8008cec:	fb0c 3202 	mla	r2, ip, r2, r3
 8008cf0:	460c      	mov	r4, r1
 8008cf2:	2001      	movs	r0, #1
 8008cf4:	e7a8      	b.n	8008c48 <_svfiprintf_r+0xd8>
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	3401      	adds	r4, #1
 8008cfa:	9305      	str	r3, [sp, #20]
 8008cfc:	4619      	mov	r1, r3
 8008cfe:	f04f 0c0a 	mov.w	ip, #10
 8008d02:	4620      	mov	r0, r4
 8008d04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d08:	3a30      	subs	r2, #48	@ 0x30
 8008d0a:	2a09      	cmp	r2, #9
 8008d0c:	d903      	bls.n	8008d16 <_svfiprintf_r+0x1a6>
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d0c6      	beq.n	8008ca0 <_svfiprintf_r+0x130>
 8008d12:	9105      	str	r1, [sp, #20]
 8008d14:	e7c4      	b.n	8008ca0 <_svfiprintf_r+0x130>
 8008d16:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d1a:	4604      	mov	r4, r0
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	e7f0      	b.n	8008d02 <_svfiprintf_r+0x192>
 8008d20:	ab03      	add	r3, sp, #12
 8008d22:	9300      	str	r3, [sp, #0]
 8008d24:	462a      	mov	r2, r5
 8008d26:	4b0e      	ldr	r3, [pc, #56]	@ (8008d60 <_svfiprintf_r+0x1f0>)
 8008d28:	a904      	add	r1, sp, #16
 8008d2a:	4638      	mov	r0, r7
 8008d2c:	f3af 8000 	nop.w
 8008d30:	1c42      	adds	r2, r0, #1
 8008d32:	4606      	mov	r6, r0
 8008d34:	d1d6      	bne.n	8008ce4 <_svfiprintf_r+0x174>
 8008d36:	89ab      	ldrh	r3, [r5, #12]
 8008d38:	065b      	lsls	r3, r3, #25
 8008d3a:	f53f af2d 	bmi.w	8008b98 <_svfiprintf_r+0x28>
 8008d3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008d40:	e72c      	b.n	8008b9c <_svfiprintf_r+0x2c>
 8008d42:	ab03      	add	r3, sp, #12
 8008d44:	9300      	str	r3, [sp, #0]
 8008d46:	462a      	mov	r2, r5
 8008d48:	4b05      	ldr	r3, [pc, #20]	@ (8008d60 <_svfiprintf_r+0x1f0>)
 8008d4a:	a904      	add	r1, sp, #16
 8008d4c:	4638      	mov	r0, r7
 8008d4e:	f000 f91b 	bl	8008f88 <_printf_i>
 8008d52:	e7ed      	b.n	8008d30 <_svfiprintf_r+0x1c0>
 8008d54:	08009380 	.word	0x08009380
 8008d58:	0800938a 	.word	0x0800938a
 8008d5c:	00000000 	.word	0x00000000
 8008d60:	08008ab9 	.word	0x08008ab9
 8008d64:	08009386 	.word	0x08009386

08008d68 <sbrk_aligned>:
 8008d68:	b570      	push	{r4, r5, r6, lr}
 8008d6a:	4e0f      	ldr	r6, [pc, #60]	@ (8008da8 <sbrk_aligned+0x40>)
 8008d6c:	460c      	mov	r4, r1
 8008d6e:	6831      	ldr	r1, [r6, #0]
 8008d70:	4605      	mov	r5, r0
 8008d72:	b911      	cbnz	r1, 8008d7a <sbrk_aligned+0x12>
 8008d74:	f000 fa7a 	bl	800926c <_sbrk_r>
 8008d78:	6030      	str	r0, [r6, #0]
 8008d7a:	4621      	mov	r1, r4
 8008d7c:	4628      	mov	r0, r5
 8008d7e:	f000 fa75 	bl	800926c <_sbrk_r>
 8008d82:	1c43      	adds	r3, r0, #1
 8008d84:	d103      	bne.n	8008d8e <sbrk_aligned+0x26>
 8008d86:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008d8a:	4620      	mov	r0, r4
 8008d8c:	bd70      	pop	{r4, r5, r6, pc}
 8008d8e:	1cc4      	adds	r4, r0, #3
 8008d90:	f024 0403 	bic.w	r4, r4, #3
 8008d94:	42a0      	cmp	r0, r4
 8008d96:	d0f8      	beq.n	8008d8a <sbrk_aligned+0x22>
 8008d98:	1a21      	subs	r1, r4, r0
 8008d9a:	4628      	mov	r0, r5
 8008d9c:	f000 fa66 	bl	800926c <_sbrk_r>
 8008da0:	3001      	adds	r0, #1
 8008da2:	d1f2      	bne.n	8008d8a <sbrk_aligned+0x22>
 8008da4:	e7ef      	b.n	8008d86 <sbrk_aligned+0x1e>
 8008da6:	bf00      	nop
 8008da8:	20004e30 	.word	0x20004e30

08008dac <_malloc_r>:
 8008dac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008db0:	1ccd      	adds	r5, r1, #3
 8008db2:	f025 0503 	bic.w	r5, r5, #3
 8008db6:	3508      	adds	r5, #8
 8008db8:	2d0c      	cmp	r5, #12
 8008dba:	bf38      	it	cc
 8008dbc:	250c      	movcc	r5, #12
 8008dbe:	2d00      	cmp	r5, #0
 8008dc0:	4606      	mov	r6, r0
 8008dc2:	db01      	blt.n	8008dc8 <_malloc_r+0x1c>
 8008dc4:	42a9      	cmp	r1, r5
 8008dc6:	d904      	bls.n	8008dd2 <_malloc_r+0x26>
 8008dc8:	230c      	movs	r3, #12
 8008dca:	6033      	str	r3, [r6, #0]
 8008dcc:	2000      	movs	r0, #0
 8008dce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008dd2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008ea8 <_malloc_r+0xfc>
 8008dd6:	f000 f9f5 	bl	80091c4 <__malloc_lock>
 8008dda:	f8d8 3000 	ldr.w	r3, [r8]
 8008dde:	461c      	mov	r4, r3
 8008de0:	bb44      	cbnz	r4, 8008e34 <_malloc_r+0x88>
 8008de2:	4629      	mov	r1, r5
 8008de4:	4630      	mov	r0, r6
 8008de6:	f7ff ffbf 	bl	8008d68 <sbrk_aligned>
 8008dea:	1c43      	adds	r3, r0, #1
 8008dec:	4604      	mov	r4, r0
 8008dee:	d158      	bne.n	8008ea2 <_malloc_r+0xf6>
 8008df0:	f8d8 4000 	ldr.w	r4, [r8]
 8008df4:	4627      	mov	r7, r4
 8008df6:	2f00      	cmp	r7, #0
 8008df8:	d143      	bne.n	8008e82 <_malloc_r+0xd6>
 8008dfa:	2c00      	cmp	r4, #0
 8008dfc:	d04b      	beq.n	8008e96 <_malloc_r+0xea>
 8008dfe:	6823      	ldr	r3, [r4, #0]
 8008e00:	4639      	mov	r1, r7
 8008e02:	4630      	mov	r0, r6
 8008e04:	eb04 0903 	add.w	r9, r4, r3
 8008e08:	f000 fa30 	bl	800926c <_sbrk_r>
 8008e0c:	4581      	cmp	r9, r0
 8008e0e:	d142      	bne.n	8008e96 <_malloc_r+0xea>
 8008e10:	6821      	ldr	r1, [r4, #0]
 8008e12:	1a6d      	subs	r5, r5, r1
 8008e14:	4629      	mov	r1, r5
 8008e16:	4630      	mov	r0, r6
 8008e18:	f7ff ffa6 	bl	8008d68 <sbrk_aligned>
 8008e1c:	3001      	adds	r0, #1
 8008e1e:	d03a      	beq.n	8008e96 <_malloc_r+0xea>
 8008e20:	6823      	ldr	r3, [r4, #0]
 8008e22:	442b      	add	r3, r5
 8008e24:	6023      	str	r3, [r4, #0]
 8008e26:	f8d8 3000 	ldr.w	r3, [r8]
 8008e2a:	685a      	ldr	r2, [r3, #4]
 8008e2c:	bb62      	cbnz	r2, 8008e88 <_malloc_r+0xdc>
 8008e2e:	f8c8 7000 	str.w	r7, [r8]
 8008e32:	e00f      	b.n	8008e54 <_malloc_r+0xa8>
 8008e34:	6822      	ldr	r2, [r4, #0]
 8008e36:	1b52      	subs	r2, r2, r5
 8008e38:	d420      	bmi.n	8008e7c <_malloc_r+0xd0>
 8008e3a:	2a0b      	cmp	r2, #11
 8008e3c:	d917      	bls.n	8008e6e <_malloc_r+0xc2>
 8008e3e:	1961      	adds	r1, r4, r5
 8008e40:	42a3      	cmp	r3, r4
 8008e42:	6025      	str	r5, [r4, #0]
 8008e44:	bf18      	it	ne
 8008e46:	6059      	strne	r1, [r3, #4]
 8008e48:	6863      	ldr	r3, [r4, #4]
 8008e4a:	bf08      	it	eq
 8008e4c:	f8c8 1000 	streq.w	r1, [r8]
 8008e50:	5162      	str	r2, [r4, r5]
 8008e52:	604b      	str	r3, [r1, #4]
 8008e54:	4630      	mov	r0, r6
 8008e56:	f000 f9bb 	bl	80091d0 <__malloc_unlock>
 8008e5a:	f104 000b 	add.w	r0, r4, #11
 8008e5e:	1d23      	adds	r3, r4, #4
 8008e60:	f020 0007 	bic.w	r0, r0, #7
 8008e64:	1ac2      	subs	r2, r0, r3
 8008e66:	bf1c      	itt	ne
 8008e68:	1a1b      	subne	r3, r3, r0
 8008e6a:	50a3      	strne	r3, [r4, r2]
 8008e6c:	e7af      	b.n	8008dce <_malloc_r+0x22>
 8008e6e:	6862      	ldr	r2, [r4, #4]
 8008e70:	42a3      	cmp	r3, r4
 8008e72:	bf0c      	ite	eq
 8008e74:	f8c8 2000 	streq.w	r2, [r8]
 8008e78:	605a      	strne	r2, [r3, #4]
 8008e7a:	e7eb      	b.n	8008e54 <_malloc_r+0xa8>
 8008e7c:	4623      	mov	r3, r4
 8008e7e:	6864      	ldr	r4, [r4, #4]
 8008e80:	e7ae      	b.n	8008de0 <_malloc_r+0x34>
 8008e82:	463c      	mov	r4, r7
 8008e84:	687f      	ldr	r7, [r7, #4]
 8008e86:	e7b6      	b.n	8008df6 <_malloc_r+0x4a>
 8008e88:	461a      	mov	r2, r3
 8008e8a:	685b      	ldr	r3, [r3, #4]
 8008e8c:	42a3      	cmp	r3, r4
 8008e8e:	d1fb      	bne.n	8008e88 <_malloc_r+0xdc>
 8008e90:	2300      	movs	r3, #0
 8008e92:	6053      	str	r3, [r2, #4]
 8008e94:	e7de      	b.n	8008e54 <_malloc_r+0xa8>
 8008e96:	230c      	movs	r3, #12
 8008e98:	6033      	str	r3, [r6, #0]
 8008e9a:	4630      	mov	r0, r6
 8008e9c:	f000 f998 	bl	80091d0 <__malloc_unlock>
 8008ea0:	e794      	b.n	8008dcc <_malloc_r+0x20>
 8008ea2:	6005      	str	r5, [r0, #0]
 8008ea4:	e7d6      	b.n	8008e54 <_malloc_r+0xa8>
 8008ea6:	bf00      	nop
 8008ea8:	20004e34 	.word	0x20004e34

08008eac <_printf_common>:
 8008eac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008eb0:	4616      	mov	r6, r2
 8008eb2:	4698      	mov	r8, r3
 8008eb4:	688a      	ldr	r2, [r1, #8]
 8008eb6:	690b      	ldr	r3, [r1, #16]
 8008eb8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	bfb8      	it	lt
 8008ec0:	4613      	movlt	r3, r2
 8008ec2:	6033      	str	r3, [r6, #0]
 8008ec4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008ec8:	4607      	mov	r7, r0
 8008eca:	460c      	mov	r4, r1
 8008ecc:	b10a      	cbz	r2, 8008ed2 <_printf_common+0x26>
 8008ece:	3301      	adds	r3, #1
 8008ed0:	6033      	str	r3, [r6, #0]
 8008ed2:	6823      	ldr	r3, [r4, #0]
 8008ed4:	0699      	lsls	r1, r3, #26
 8008ed6:	bf42      	ittt	mi
 8008ed8:	6833      	ldrmi	r3, [r6, #0]
 8008eda:	3302      	addmi	r3, #2
 8008edc:	6033      	strmi	r3, [r6, #0]
 8008ede:	6825      	ldr	r5, [r4, #0]
 8008ee0:	f015 0506 	ands.w	r5, r5, #6
 8008ee4:	d106      	bne.n	8008ef4 <_printf_common+0x48>
 8008ee6:	f104 0a19 	add.w	sl, r4, #25
 8008eea:	68e3      	ldr	r3, [r4, #12]
 8008eec:	6832      	ldr	r2, [r6, #0]
 8008eee:	1a9b      	subs	r3, r3, r2
 8008ef0:	42ab      	cmp	r3, r5
 8008ef2:	dc26      	bgt.n	8008f42 <_printf_common+0x96>
 8008ef4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008ef8:	6822      	ldr	r2, [r4, #0]
 8008efa:	3b00      	subs	r3, #0
 8008efc:	bf18      	it	ne
 8008efe:	2301      	movne	r3, #1
 8008f00:	0692      	lsls	r2, r2, #26
 8008f02:	d42b      	bmi.n	8008f5c <_printf_common+0xb0>
 8008f04:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008f08:	4641      	mov	r1, r8
 8008f0a:	4638      	mov	r0, r7
 8008f0c:	47c8      	blx	r9
 8008f0e:	3001      	adds	r0, #1
 8008f10:	d01e      	beq.n	8008f50 <_printf_common+0xa4>
 8008f12:	6823      	ldr	r3, [r4, #0]
 8008f14:	6922      	ldr	r2, [r4, #16]
 8008f16:	f003 0306 	and.w	r3, r3, #6
 8008f1a:	2b04      	cmp	r3, #4
 8008f1c:	bf02      	ittt	eq
 8008f1e:	68e5      	ldreq	r5, [r4, #12]
 8008f20:	6833      	ldreq	r3, [r6, #0]
 8008f22:	1aed      	subeq	r5, r5, r3
 8008f24:	68a3      	ldr	r3, [r4, #8]
 8008f26:	bf0c      	ite	eq
 8008f28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008f2c:	2500      	movne	r5, #0
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	bfc4      	itt	gt
 8008f32:	1a9b      	subgt	r3, r3, r2
 8008f34:	18ed      	addgt	r5, r5, r3
 8008f36:	2600      	movs	r6, #0
 8008f38:	341a      	adds	r4, #26
 8008f3a:	42b5      	cmp	r5, r6
 8008f3c:	d11a      	bne.n	8008f74 <_printf_common+0xc8>
 8008f3e:	2000      	movs	r0, #0
 8008f40:	e008      	b.n	8008f54 <_printf_common+0xa8>
 8008f42:	2301      	movs	r3, #1
 8008f44:	4652      	mov	r2, sl
 8008f46:	4641      	mov	r1, r8
 8008f48:	4638      	mov	r0, r7
 8008f4a:	47c8      	blx	r9
 8008f4c:	3001      	adds	r0, #1
 8008f4e:	d103      	bne.n	8008f58 <_printf_common+0xac>
 8008f50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008f54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f58:	3501      	adds	r5, #1
 8008f5a:	e7c6      	b.n	8008eea <_printf_common+0x3e>
 8008f5c:	18e1      	adds	r1, r4, r3
 8008f5e:	1c5a      	adds	r2, r3, #1
 8008f60:	2030      	movs	r0, #48	@ 0x30
 8008f62:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008f66:	4422      	add	r2, r4
 8008f68:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008f6c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008f70:	3302      	adds	r3, #2
 8008f72:	e7c7      	b.n	8008f04 <_printf_common+0x58>
 8008f74:	2301      	movs	r3, #1
 8008f76:	4622      	mov	r2, r4
 8008f78:	4641      	mov	r1, r8
 8008f7a:	4638      	mov	r0, r7
 8008f7c:	47c8      	blx	r9
 8008f7e:	3001      	adds	r0, #1
 8008f80:	d0e6      	beq.n	8008f50 <_printf_common+0xa4>
 8008f82:	3601      	adds	r6, #1
 8008f84:	e7d9      	b.n	8008f3a <_printf_common+0x8e>
	...

08008f88 <_printf_i>:
 8008f88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f8c:	7e0f      	ldrb	r7, [r1, #24]
 8008f8e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008f90:	2f78      	cmp	r7, #120	@ 0x78
 8008f92:	4691      	mov	r9, r2
 8008f94:	4680      	mov	r8, r0
 8008f96:	460c      	mov	r4, r1
 8008f98:	469a      	mov	sl, r3
 8008f9a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008f9e:	d807      	bhi.n	8008fb0 <_printf_i+0x28>
 8008fa0:	2f62      	cmp	r7, #98	@ 0x62
 8008fa2:	d80a      	bhi.n	8008fba <_printf_i+0x32>
 8008fa4:	2f00      	cmp	r7, #0
 8008fa6:	f000 80d1 	beq.w	800914c <_printf_i+0x1c4>
 8008faa:	2f58      	cmp	r7, #88	@ 0x58
 8008fac:	f000 80b8 	beq.w	8009120 <_printf_i+0x198>
 8008fb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008fb4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008fb8:	e03a      	b.n	8009030 <_printf_i+0xa8>
 8008fba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008fbe:	2b15      	cmp	r3, #21
 8008fc0:	d8f6      	bhi.n	8008fb0 <_printf_i+0x28>
 8008fc2:	a101      	add	r1, pc, #4	@ (adr r1, 8008fc8 <_printf_i+0x40>)
 8008fc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008fc8:	08009021 	.word	0x08009021
 8008fcc:	08009035 	.word	0x08009035
 8008fd0:	08008fb1 	.word	0x08008fb1
 8008fd4:	08008fb1 	.word	0x08008fb1
 8008fd8:	08008fb1 	.word	0x08008fb1
 8008fdc:	08008fb1 	.word	0x08008fb1
 8008fe0:	08009035 	.word	0x08009035
 8008fe4:	08008fb1 	.word	0x08008fb1
 8008fe8:	08008fb1 	.word	0x08008fb1
 8008fec:	08008fb1 	.word	0x08008fb1
 8008ff0:	08008fb1 	.word	0x08008fb1
 8008ff4:	08009133 	.word	0x08009133
 8008ff8:	0800905f 	.word	0x0800905f
 8008ffc:	080090ed 	.word	0x080090ed
 8009000:	08008fb1 	.word	0x08008fb1
 8009004:	08008fb1 	.word	0x08008fb1
 8009008:	08009155 	.word	0x08009155
 800900c:	08008fb1 	.word	0x08008fb1
 8009010:	0800905f 	.word	0x0800905f
 8009014:	08008fb1 	.word	0x08008fb1
 8009018:	08008fb1 	.word	0x08008fb1
 800901c:	080090f5 	.word	0x080090f5
 8009020:	6833      	ldr	r3, [r6, #0]
 8009022:	1d1a      	adds	r2, r3, #4
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	6032      	str	r2, [r6, #0]
 8009028:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800902c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009030:	2301      	movs	r3, #1
 8009032:	e09c      	b.n	800916e <_printf_i+0x1e6>
 8009034:	6833      	ldr	r3, [r6, #0]
 8009036:	6820      	ldr	r0, [r4, #0]
 8009038:	1d19      	adds	r1, r3, #4
 800903a:	6031      	str	r1, [r6, #0]
 800903c:	0606      	lsls	r6, r0, #24
 800903e:	d501      	bpl.n	8009044 <_printf_i+0xbc>
 8009040:	681d      	ldr	r5, [r3, #0]
 8009042:	e003      	b.n	800904c <_printf_i+0xc4>
 8009044:	0645      	lsls	r5, r0, #25
 8009046:	d5fb      	bpl.n	8009040 <_printf_i+0xb8>
 8009048:	f9b3 5000 	ldrsh.w	r5, [r3]
 800904c:	2d00      	cmp	r5, #0
 800904e:	da03      	bge.n	8009058 <_printf_i+0xd0>
 8009050:	232d      	movs	r3, #45	@ 0x2d
 8009052:	426d      	negs	r5, r5
 8009054:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009058:	4858      	ldr	r0, [pc, #352]	@ (80091bc <_printf_i+0x234>)
 800905a:	230a      	movs	r3, #10
 800905c:	e011      	b.n	8009082 <_printf_i+0xfa>
 800905e:	6821      	ldr	r1, [r4, #0]
 8009060:	6833      	ldr	r3, [r6, #0]
 8009062:	0608      	lsls	r0, r1, #24
 8009064:	f853 5b04 	ldr.w	r5, [r3], #4
 8009068:	d402      	bmi.n	8009070 <_printf_i+0xe8>
 800906a:	0649      	lsls	r1, r1, #25
 800906c:	bf48      	it	mi
 800906e:	b2ad      	uxthmi	r5, r5
 8009070:	2f6f      	cmp	r7, #111	@ 0x6f
 8009072:	4852      	ldr	r0, [pc, #328]	@ (80091bc <_printf_i+0x234>)
 8009074:	6033      	str	r3, [r6, #0]
 8009076:	bf14      	ite	ne
 8009078:	230a      	movne	r3, #10
 800907a:	2308      	moveq	r3, #8
 800907c:	2100      	movs	r1, #0
 800907e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009082:	6866      	ldr	r6, [r4, #4]
 8009084:	60a6      	str	r6, [r4, #8]
 8009086:	2e00      	cmp	r6, #0
 8009088:	db05      	blt.n	8009096 <_printf_i+0x10e>
 800908a:	6821      	ldr	r1, [r4, #0]
 800908c:	432e      	orrs	r6, r5
 800908e:	f021 0104 	bic.w	r1, r1, #4
 8009092:	6021      	str	r1, [r4, #0]
 8009094:	d04b      	beq.n	800912e <_printf_i+0x1a6>
 8009096:	4616      	mov	r6, r2
 8009098:	fbb5 f1f3 	udiv	r1, r5, r3
 800909c:	fb03 5711 	mls	r7, r3, r1, r5
 80090a0:	5dc7      	ldrb	r7, [r0, r7]
 80090a2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80090a6:	462f      	mov	r7, r5
 80090a8:	42bb      	cmp	r3, r7
 80090aa:	460d      	mov	r5, r1
 80090ac:	d9f4      	bls.n	8009098 <_printf_i+0x110>
 80090ae:	2b08      	cmp	r3, #8
 80090b0:	d10b      	bne.n	80090ca <_printf_i+0x142>
 80090b2:	6823      	ldr	r3, [r4, #0]
 80090b4:	07df      	lsls	r7, r3, #31
 80090b6:	d508      	bpl.n	80090ca <_printf_i+0x142>
 80090b8:	6923      	ldr	r3, [r4, #16]
 80090ba:	6861      	ldr	r1, [r4, #4]
 80090bc:	4299      	cmp	r1, r3
 80090be:	bfde      	ittt	le
 80090c0:	2330      	movle	r3, #48	@ 0x30
 80090c2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80090c6:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80090ca:	1b92      	subs	r2, r2, r6
 80090cc:	6122      	str	r2, [r4, #16]
 80090ce:	f8cd a000 	str.w	sl, [sp]
 80090d2:	464b      	mov	r3, r9
 80090d4:	aa03      	add	r2, sp, #12
 80090d6:	4621      	mov	r1, r4
 80090d8:	4640      	mov	r0, r8
 80090da:	f7ff fee7 	bl	8008eac <_printf_common>
 80090de:	3001      	adds	r0, #1
 80090e0:	d14a      	bne.n	8009178 <_printf_i+0x1f0>
 80090e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80090e6:	b004      	add	sp, #16
 80090e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090ec:	6823      	ldr	r3, [r4, #0]
 80090ee:	f043 0320 	orr.w	r3, r3, #32
 80090f2:	6023      	str	r3, [r4, #0]
 80090f4:	4832      	ldr	r0, [pc, #200]	@ (80091c0 <_printf_i+0x238>)
 80090f6:	2778      	movs	r7, #120	@ 0x78
 80090f8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80090fc:	6823      	ldr	r3, [r4, #0]
 80090fe:	6831      	ldr	r1, [r6, #0]
 8009100:	061f      	lsls	r7, r3, #24
 8009102:	f851 5b04 	ldr.w	r5, [r1], #4
 8009106:	d402      	bmi.n	800910e <_printf_i+0x186>
 8009108:	065f      	lsls	r7, r3, #25
 800910a:	bf48      	it	mi
 800910c:	b2ad      	uxthmi	r5, r5
 800910e:	6031      	str	r1, [r6, #0]
 8009110:	07d9      	lsls	r1, r3, #31
 8009112:	bf44      	itt	mi
 8009114:	f043 0320 	orrmi.w	r3, r3, #32
 8009118:	6023      	strmi	r3, [r4, #0]
 800911a:	b11d      	cbz	r5, 8009124 <_printf_i+0x19c>
 800911c:	2310      	movs	r3, #16
 800911e:	e7ad      	b.n	800907c <_printf_i+0xf4>
 8009120:	4826      	ldr	r0, [pc, #152]	@ (80091bc <_printf_i+0x234>)
 8009122:	e7e9      	b.n	80090f8 <_printf_i+0x170>
 8009124:	6823      	ldr	r3, [r4, #0]
 8009126:	f023 0320 	bic.w	r3, r3, #32
 800912a:	6023      	str	r3, [r4, #0]
 800912c:	e7f6      	b.n	800911c <_printf_i+0x194>
 800912e:	4616      	mov	r6, r2
 8009130:	e7bd      	b.n	80090ae <_printf_i+0x126>
 8009132:	6833      	ldr	r3, [r6, #0]
 8009134:	6825      	ldr	r5, [r4, #0]
 8009136:	6961      	ldr	r1, [r4, #20]
 8009138:	1d18      	adds	r0, r3, #4
 800913a:	6030      	str	r0, [r6, #0]
 800913c:	062e      	lsls	r6, r5, #24
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	d501      	bpl.n	8009146 <_printf_i+0x1be>
 8009142:	6019      	str	r1, [r3, #0]
 8009144:	e002      	b.n	800914c <_printf_i+0x1c4>
 8009146:	0668      	lsls	r0, r5, #25
 8009148:	d5fb      	bpl.n	8009142 <_printf_i+0x1ba>
 800914a:	8019      	strh	r1, [r3, #0]
 800914c:	2300      	movs	r3, #0
 800914e:	6123      	str	r3, [r4, #16]
 8009150:	4616      	mov	r6, r2
 8009152:	e7bc      	b.n	80090ce <_printf_i+0x146>
 8009154:	6833      	ldr	r3, [r6, #0]
 8009156:	1d1a      	adds	r2, r3, #4
 8009158:	6032      	str	r2, [r6, #0]
 800915a:	681e      	ldr	r6, [r3, #0]
 800915c:	6862      	ldr	r2, [r4, #4]
 800915e:	2100      	movs	r1, #0
 8009160:	4630      	mov	r0, r6
 8009162:	f7f7 f83d 	bl	80001e0 <memchr>
 8009166:	b108      	cbz	r0, 800916c <_printf_i+0x1e4>
 8009168:	1b80      	subs	r0, r0, r6
 800916a:	6060      	str	r0, [r4, #4]
 800916c:	6863      	ldr	r3, [r4, #4]
 800916e:	6123      	str	r3, [r4, #16]
 8009170:	2300      	movs	r3, #0
 8009172:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009176:	e7aa      	b.n	80090ce <_printf_i+0x146>
 8009178:	6923      	ldr	r3, [r4, #16]
 800917a:	4632      	mov	r2, r6
 800917c:	4649      	mov	r1, r9
 800917e:	4640      	mov	r0, r8
 8009180:	47d0      	blx	sl
 8009182:	3001      	adds	r0, #1
 8009184:	d0ad      	beq.n	80090e2 <_printf_i+0x15a>
 8009186:	6823      	ldr	r3, [r4, #0]
 8009188:	079b      	lsls	r3, r3, #30
 800918a:	d413      	bmi.n	80091b4 <_printf_i+0x22c>
 800918c:	68e0      	ldr	r0, [r4, #12]
 800918e:	9b03      	ldr	r3, [sp, #12]
 8009190:	4298      	cmp	r0, r3
 8009192:	bfb8      	it	lt
 8009194:	4618      	movlt	r0, r3
 8009196:	e7a6      	b.n	80090e6 <_printf_i+0x15e>
 8009198:	2301      	movs	r3, #1
 800919a:	4632      	mov	r2, r6
 800919c:	4649      	mov	r1, r9
 800919e:	4640      	mov	r0, r8
 80091a0:	47d0      	blx	sl
 80091a2:	3001      	adds	r0, #1
 80091a4:	d09d      	beq.n	80090e2 <_printf_i+0x15a>
 80091a6:	3501      	adds	r5, #1
 80091a8:	68e3      	ldr	r3, [r4, #12]
 80091aa:	9903      	ldr	r1, [sp, #12]
 80091ac:	1a5b      	subs	r3, r3, r1
 80091ae:	42ab      	cmp	r3, r5
 80091b0:	dcf2      	bgt.n	8009198 <_printf_i+0x210>
 80091b2:	e7eb      	b.n	800918c <_printf_i+0x204>
 80091b4:	2500      	movs	r5, #0
 80091b6:	f104 0619 	add.w	r6, r4, #25
 80091ba:	e7f5      	b.n	80091a8 <_printf_i+0x220>
 80091bc:	08009391 	.word	0x08009391
 80091c0:	080093a2 	.word	0x080093a2

080091c4 <__malloc_lock>:
 80091c4:	4801      	ldr	r0, [pc, #4]	@ (80091cc <__malloc_lock+0x8>)
 80091c6:	f7ff bbbf 	b.w	8008948 <__retarget_lock_acquire_recursive>
 80091ca:	bf00      	nop
 80091cc:	20004e28 	.word	0x20004e28

080091d0 <__malloc_unlock>:
 80091d0:	4801      	ldr	r0, [pc, #4]	@ (80091d8 <__malloc_unlock+0x8>)
 80091d2:	f7ff bbba 	b.w	800894a <__retarget_lock_release_recursive>
 80091d6:	bf00      	nop
 80091d8:	20004e28 	.word	0x20004e28

080091dc <_realloc_r>:
 80091dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091e0:	4607      	mov	r7, r0
 80091e2:	4614      	mov	r4, r2
 80091e4:	460d      	mov	r5, r1
 80091e6:	b921      	cbnz	r1, 80091f2 <_realloc_r+0x16>
 80091e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80091ec:	4611      	mov	r1, r2
 80091ee:	f7ff bddd 	b.w	8008dac <_malloc_r>
 80091f2:	b92a      	cbnz	r2, 8009200 <_realloc_r+0x24>
 80091f4:	f7ff fc16 	bl	8008a24 <_free_r>
 80091f8:	4625      	mov	r5, r4
 80091fa:	4628      	mov	r0, r5
 80091fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009200:	f000 f844 	bl	800928c <_malloc_usable_size_r>
 8009204:	4284      	cmp	r4, r0
 8009206:	4606      	mov	r6, r0
 8009208:	d802      	bhi.n	8009210 <_realloc_r+0x34>
 800920a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800920e:	d8f4      	bhi.n	80091fa <_realloc_r+0x1e>
 8009210:	4621      	mov	r1, r4
 8009212:	4638      	mov	r0, r7
 8009214:	f7ff fdca 	bl	8008dac <_malloc_r>
 8009218:	4680      	mov	r8, r0
 800921a:	b908      	cbnz	r0, 8009220 <_realloc_r+0x44>
 800921c:	4645      	mov	r5, r8
 800921e:	e7ec      	b.n	80091fa <_realloc_r+0x1e>
 8009220:	42b4      	cmp	r4, r6
 8009222:	4622      	mov	r2, r4
 8009224:	4629      	mov	r1, r5
 8009226:	bf28      	it	cs
 8009228:	4632      	movcs	r2, r6
 800922a:	f7ff fbed 	bl	8008a08 <memcpy>
 800922e:	4629      	mov	r1, r5
 8009230:	4638      	mov	r0, r7
 8009232:	f7ff fbf7 	bl	8008a24 <_free_r>
 8009236:	e7f1      	b.n	800921c <_realloc_r+0x40>

08009238 <memmove>:
 8009238:	4288      	cmp	r0, r1
 800923a:	b510      	push	{r4, lr}
 800923c:	eb01 0402 	add.w	r4, r1, r2
 8009240:	d902      	bls.n	8009248 <memmove+0x10>
 8009242:	4284      	cmp	r4, r0
 8009244:	4623      	mov	r3, r4
 8009246:	d807      	bhi.n	8009258 <memmove+0x20>
 8009248:	1e43      	subs	r3, r0, #1
 800924a:	42a1      	cmp	r1, r4
 800924c:	d008      	beq.n	8009260 <memmove+0x28>
 800924e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009252:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009256:	e7f8      	b.n	800924a <memmove+0x12>
 8009258:	4402      	add	r2, r0
 800925a:	4601      	mov	r1, r0
 800925c:	428a      	cmp	r2, r1
 800925e:	d100      	bne.n	8009262 <memmove+0x2a>
 8009260:	bd10      	pop	{r4, pc}
 8009262:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009266:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800926a:	e7f7      	b.n	800925c <memmove+0x24>

0800926c <_sbrk_r>:
 800926c:	b538      	push	{r3, r4, r5, lr}
 800926e:	4d06      	ldr	r5, [pc, #24]	@ (8009288 <_sbrk_r+0x1c>)
 8009270:	2300      	movs	r3, #0
 8009272:	4604      	mov	r4, r0
 8009274:	4608      	mov	r0, r1
 8009276:	602b      	str	r3, [r5, #0]
 8009278:	f7f8 fcb8 	bl	8001bec <_sbrk>
 800927c:	1c43      	adds	r3, r0, #1
 800927e:	d102      	bne.n	8009286 <_sbrk_r+0x1a>
 8009280:	682b      	ldr	r3, [r5, #0]
 8009282:	b103      	cbz	r3, 8009286 <_sbrk_r+0x1a>
 8009284:	6023      	str	r3, [r4, #0]
 8009286:	bd38      	pop	{r3, r4, r5, pc}
 8009288:	20004e2c 	.word	0x20004e2c

0800928c <_malloc_usable_size_r>:
 800928c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009290:	1f18      	subs	r0, r3, #4
 8009292:	2b00      	cmp	r3, #0
 8009294:	bfbc      	itt	lt
 8009296:	580b      	ldrlt	r3, [r1, r0]
 8009298:	18c0      	addlt	r0, r0, r3
 800929a:	4770      	bx	lr

0800929c <_init>:
 800929c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800929e:	bf00      	nop
 80092a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092a2:	bc08      	pop	{r3}
 80092a4:	469e      	mov	lr, r3
 80092a6:	4770      	bx	lr

080092a8 <_fini>:
 80092a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092aa:	bf00      	nop
 80092ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092ae:	bc08      	pop	{r3}
 80092b0:	469e      	mov	lr, r3
 80092b2:	4770      	bx	lr
